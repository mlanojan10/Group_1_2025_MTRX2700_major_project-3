
MajorProjBase.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006620  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  080067a8  080067a8  000077a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080067f0  080067f0  00008044  2**0
                  CONTENTS
  4 .ARM          00000000  080067f0  080067f0  00008044  2**0
                  CONTENTS
  5 .preinit_array 00000000  080067f0  080067f0  00008044  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080067f0  080067f0  000077f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080067f4  080067f4  000077f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000044  20000000  080067f8  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00008044  2**0
                  CONTENTS
 10 .bss          000004f8  20000044  20000044  00008044  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000053c  2000053c  00008044  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00008044  2**0
                  CONTENTS, READONLY
 13 .debug_info   00014c49  00000000  00000000  00008074  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002ac7  00000000  00000000  0001ccbd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000012d0  00000000  00000000  0001f788  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000eb8  00000000  00000000  00020a58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001f7a8  00000000  00000000  00021910  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00017f2d  00000000  00000000  000410b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c20da  00000000  00000000  00058fe5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0011b0bf  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000506c  00000000  00000000  0011b104  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000066  00000000  00000000  00120170  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000044 	.word	0x20000044
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08006790 	.word	0x08006790

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000048 	.word	0x20000048
 80001c4:	08006790 	.word	0x08006790

080001c8 <map>:
ADC_HandleTypeDef hadc2;

volatile uint32_t joy_x = 0;
volatile uint32_t joy_y = 0;

int map(int val, int in_min, int in_max, int out_min, int out_max) {
 80001c8:	b480      	push	{r7}
 80001ca:	b085      	sub	sp, #20
 80001cc:	af00      	add	r7, sp, #0
 80001ce:	60f8      	str	r0, [r7, #12]
 80001d0:	60b9      	str	r1, [r7, #8]
 80001d2:	607a      	str	r2, [r7, #4]
 80001d4:	603b      	str	r3, [r7, #0]
    return (val - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 80001d6:	68fa      	ldr	r2, [r7, #12]
 80001d8:	68bb      	ldr	r3, [r7, #8]
 80001da:	1ad3      	subs	r3, r2, r3
 80001dc:	69b9      	ldr	r1, [r7, #24]
 80001de:	683a      	ldr	r2, [r7, #0]
 80001e0:	1a8a      	subs	r2, r1, r2
 80001e2:	fb03 f202 	mul.w	r2, r3, r2
 80001e6:	6879      	ldr	r1, [r7, #4]
 80001e8:	68bb      	ldr	r3, [r7, #8]
 80001ea:	1acb      	subs	r3, r1, r3
 80001ec:	fb92 f2f3 	sdiv	r2, r2, r3
 80001f0:	683b      	ldr	r3, [r7, #0]
 80001f2:	4413      	add	r3, r2
}
 80001f4:	4618      	mov	r0, r3
 80001f6:	3714      	adds	r7, #20
 80001f8:	46bd      	mov	sp, r7
 80001fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001fe:	4770      	bx	lr

08000200 <enable_clocks>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

// enable the clocks for desired peripherals (GPIOA, C and E)
void enable_clocks() {
 8000200:	b480      	push	{r7}
 8000202:	af00      	add	r7, sp, #0
	RCC->AHBENR |= RCC_AHBENR_GPIOAEN | RCC_AHBENR_GPIOCEN | RCC_AHBENR_GPIOEEN;
 8000204:	4b05      	ldr	r3, [pc, #20]	@ (800021c <enable_clocks+0x1c>)
 8000206:	695b      	ldr	r3, [r3, #20]
 8000208:	4a04      	ldr	r2, [pc, #16]	@ (800021c <enable_clocks+0x1c>)
 800020a:	f443 1328 	orr.w	r3, r3, #2752512	@ 0x2a0000
 800020e:	6153      	str	r3, [r2, #20]
}
 8000210:	bf00      	nop
 8000212:	46bd      	mov	sp, r7
 8000214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000218:	4770      	bx	lr
 800021a:	bf00      	nop
 800021c:	40021000 	.word	0x40021000

08000220 <initialise_board>:


// initialise the discovery board I/O (just outputs: inputs are selected by default)
void initialise_board() {
 8000220:	b480      	push	{r7}
 8000222:	b083      	sub	sp, #12
 8000224:	af00      	add	r7, sp, #0
	// get a pointer to the second half word of the MODER register (for outputs pe8-15)
	uint16_t *led_output_registers = ((uint16_t *)&(GPIOE->MODER)) + 1;
 8000226:	4b06      	ldr	r3, [pc, #24]	@ (8000240 <initialise_board+0x20>)
 8000228:	607b      	str	r3, [r7, #4]
	*led_output_registers = 0x5555;
 800022a:	687b      	ldr	r3, [r7, #4]
 800022c:	f245 5255 	movw	r2, #21845	@ 0x5555
 8000230:	801a      	strh	r2, [r3, #0]
}
 8000232:	bf00      	nop
 8000234:	370c      	adds	r7, #12
 8000236:	46bd      	mov	sp, r7
 8000238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800023c:	4770      	bx	lr
 800023e:	bf00      	nop
 8000240:	48001002 	.word	0x48001002

08000244 <HAL_TIM_IC_CaptureCallback>:

uint16_t rise_time = 0;
uint16_t last_period = 0;

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8000244:	b580      	push	{r7, lr}
 8000246:	b08c      	sub	sp, #48	@ 0x30
 8000248:	af00      	add	r7, sp, #0
 800024a:	6078      	str	r0, [r7, #4]
	uint8_t buffer[32];
	if (htim->Instance == TIM1 && htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1)
 800024c:	687b      	ldr	r3, [r7, #4]
 800024e:	681b      	ldr	r3, [r3, #0]
 8000250:	4a17      	ldr	r2, [pc, #92]	@ (80002b0 <HAL_TIM_IC_CaptureCallback+0x6c>)
 8000252:	4293      	cmp	r3, r2
 8000254:	d127      	bne.n	80002a6 <HAL_TIM_IC_CaptureCallback+0x62>
 8000256:	687b      	ldr	r3, [r7, #4]
 8000258:	7f1b      	ldrb	r3, [r3, #28]
 800025a:	2b01      	cmp	r3, #1
 800025c:	d123      	bne.n	80002a6 <HAL_TIM_IC_CaptureCallback+0x62>
	{
		uint16_t IC_Val1 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1); // read the first value
 800025e:	2100      	movs	r1, #0
 8000260:	6878      	ldr	r0, [r7, #4]
 8000262:	f005 fbd5 	bl	8005a10 <HAL_TIM_ReadCapturedValue>
 8000266:	4603      	mov	r3, r0
 8000268:	85fb      	strh	r3, [r7, #46]	@ 0x2e

		if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_8) == 1)
 800026a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800026e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000272:	f002 fb29 	bl	80028c8 <HAL_GPIO_ReadPin>
 8000276:	4603      	mov	r3, r0
 8000278:	2b01      	cmp	r3, #1
 800027a:	d103      	bne.n	8000284 <HAL_TIM_IC_CaptureCallback+0x40>
			rise_time = IC_Val1;
 800027c:	4a0d      	ldr	r2, [pc, #52]	@ (80002b4 <HAL_TIM_IC_CaptureCallback+0x70>)
 800027e:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8000280:	8013      	strh	r3, [r2, #0]
 8000282:	e006      	b.n	8000292 <HAL_TIM_IC_CaptureCallback+0x4e>
		else
			last_period = IC_Val1 - rise_time;
 8000284:	4b0b      	ldr	r3, [pc, #44]	@ (80002b4 <HAL_TIM_IC_CaptureCallback+0x70>)
 8000286:	881b      	ldrh	r3, [r3, #0]
 8000288:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800028a:	1ad3      	subs	r3, r2, r3
 800028c:	b29a      	uxth	r2, r3
 800028e:	4b0a      	ldr	r3, [pc, #40]	@ (80002b8 <HAL_TIM_IC_CaptureCallback+0x74>)
 8000290:	801a      	strh	r2, [r3, #0]

		diff = IC_Val1 - last_capture;
 8000292:	4b0a      	ldr	r3, [pc, #40]	@ (80002bc <HAL_TIM_IC_CaptureCallback+0x78>)
 8000294:	881b      	ldrh	r3, [r3, #0]
 8000296:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8000298:	1ad3      	subs	r3, r2, r3
 800029a:	b29a      	uxth	r2, r3
 800029c:	4b08      	ldr	r3, [pc, #32]	@ (80002c0 <HAL_TIM_IC_CaptureCallback+0x7c>)
 800029e:	801a      	strh	r2, [r3, #0]
		last_capture = IC_Val1;
 80002a0:	4a06      	ldr	r2, [pc, #24]	@ (80002bc <HAL_TIM_IC_CaptureCallback+0x78>)
 80002a2:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80002a4:	8013      	strh	r3, [r2, #0]
	}
}
 80002a6:	bf00      	nop
 80002a8:	3730      	adds	r7, #48	@ 0x30
 80002aa:	46bd      	mov	sp, r7
 80002ac:	bd80      	pop	{r7, pc}
 80002ae:	bf00      	nop
 80002b0:	40012c00 	.word	0x40012c00
 80002b4:	20000530 	.word	0x20000530
 80002b8:	20000532 	.word	0x20000532
 80002bc:	2000052c 	.word	0x2000052c
 80002c0:	2000052e 	.word	0x2000052e

080002c4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80002c4:	b5b0      	push	{r4, r5, r7, lr}
 80002c6:	b096      	sub	sp, #88	@ 0x58
 80002c8:	af02      	add	r7, sp, #8
	//  PA8 is TIM1 channel 1, this is used for the LASPWM (the laser PWM signal)
	//  PB6 is I2C1 clock (SCL on the PTU), PB7 is I2C1 data (SDA on the PTU)



	uint8_t string_to_send[64] = "This is a string !\r\n";
 80002ca:	4b51      	ldr	r3, [pc, #324]	@ (8000410 <main+0x14c>)
 80002cc:	1d3c      	adds	r4, r7, #4
 80002ce:	461d      	mov	r5, r3
 80002d0:	6828      	ldr	r0, [r5, #0]
 80002d2:	6869      	ldr	r1, [r5, #4]
 80002d4:	68aa      	ldr	r2, [r5, #8]
 80002d6:	68eb      	ldr	r3, [r5, #12]
 80002d8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80002da:	6928      	ldr	r0, [r5, #16]
 80002dc:	6020      	str	r0, [r4, #0]
 80002de:	7d2b      	ldrb	r3, [r5, #20]
 80002e0:	7123      	strb	r3, [r4, #4]
 80002e2:	f107 0319 	add.w	r3, r7, #25
 80002e6:	222b      	movs	r2, #43	@ 0x2b
 80002e8:	2100      	movs	r1, #0
 80002ea:	4618      	mov	r0, r3
 80002ec:	f006 fa23 	bl	8006736 <memset>

	enable_clocks();
 80002f0:	f7ff ff86 	bl	8000200 <enable_clocks>
	initialise_board();
 80002f4:	f7ff ff94 	bl	8000220 <initialise_board>

	LedRegister *led_register = ((uint8_t*)&(GPIOE->ODR)) + 1;
 80002f8:	4b46      	ldr	r3, [pc, #280]	@ (8000414 <main+0x150>)
 80002fa:	64fb      	str	r3, [r7, #76]	@ 0x4c

	SerialInitialise(BAUD_115200, &USART1_PORT, 0x00);
 80002fc:	2200      	movs	r2, #0
 80002fe:	4946      	ldr	r1, [pc, #280]	@ (8000418 <main+0x154>)
 8000300:	2004      	movs	r0, #4
 8000302:	f000 fc19 	bl	8000b38 <SerialInitialise>

	HAL_StatusTypeDef return_value = 0x00;
 8000306:	2300      	movs	r3, #0
 8000308:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b

	volatile uint16_t vertical_PWM = 1000;
 800030c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000310:	807b      	strh	r3, [r7, #2]
	volatile uint16_t horizontal_PWM = 1000;
 8000312:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000316:	803b      	strh	r3, [r7, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000318:	f000 ff14 	bl	8001144 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800031c:	f000 f88c 	bl	8000438 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000320:	f000 fb3a 	bl	8000998 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000324:	f000 f9bc 	bl	80006a0 <MX_I2C1_Init>
  MX_SPI1_Init();
 8000328:	f000 f9fa 	bl	8000720 <MX_SPI1_Init>
  MX_USB_PCD_Init();
 800032c:	f000 fb12 	bl	8000954 <MX_USB_PCD_Init>
  MX_TIM2_Init();
 8000330:	f000 faaa 	bl	8000888 <MX_TIM2_Init>
  MX_TIM1_Init();
 8000334:	f000 fa32 	bl	800079c <MX_TIM1_Init>
  MX_ADC1_Init();
 8000338:	f000 f8e4 	bl	8000504 <MX_ADC1_Init>
  MX_ADC2_Init();
 800033c:	f000 f952 	bl	80005e4 <MX_ADC2_Init>
  /* USER CODE BEGIN 2 */

	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8000340:	2100      	movs	r1, #0
 8000342:	4836      	ldr	r0, [pc, #216]	@ (800041c <main+0x158>)
 8000344:	f004 fd44 	bl	8004dd0 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 8000348:	2104      	movs	r1, #4
 800034a:	4834      	ldr	r0, [pc, #208]	@ (800041c <main+0x158>)
 800034c:	f004 fd40 	bl	8004dd0 <HAL_TIM_PWM_Start>

	HAL_TIM_IC_Start_IT(&htim1, TIM_CHANNEL_1);
 8000350:	2100      	movs	r1, #0
 8000352:	4833      	ldr	r0, [pc, #204]	@ (8000420 <main+0x15c>)
 8000354:	f004 fe9e 	bl	8005094 <HAL_TIM_IC_Start_IT>

	// TIM 2 is setup with a prescaler that makes 1 count = 1 microsecond
	// Even with HAL, you can still set the values yourself
	TIM2->ARR = 20000; // 20000 = 20ms, which is the desired clock period for servos
 8000358:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800035c:	f644 6220 	movw	r2, #20000	@ 0x4e20
 8000360:	62da      	str	r2, [r3, #44]	@ 0x2c
	TIM2->CR1 |= TIM_CR1_ARPE; // this makes the timing not change until the next pulse is finished
 8000362:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000366:	681b      	ldr	r3, [r3, #0]
 8000368:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800036c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000370:	6013      	str	r3, [r2, #0]

	// note: for PWM if you continually change the clock period
	// you can get unexpected results. To remove this, set ARPE so that the
	// ARR settings are not activated until the next cycle.

	initialise_ptu_i2c(&hi2c1);
 8000372:	482c      	ldr	r0, [pc, #176]	@ (8000424 <main+0x160>)
 8000374:	f000 fb94 	bl	8000aa0 <initialise_ptu_i2c>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
	{
		// Read joystick X (ADC1_IN3 on PA2)
			    HAL_ADC_Start(&hadc1);
 8000378:	482b      	ldr	r0, [pc, #172]	@ (8000428 <main+0x164>)
 800037a:	f001 f94d 	bl	8001618 <HAL_ADC_Start>
			    HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 800037e:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8000382:	4829      	ldr	r0, [pc, #164]	@ (8000428 <main+0x164>)
 8000384:	f001 fa5e 	bl	8001844 <HAL_ADC_PollForConversion>
			    joy_x = HAL_ADC_GetValue(&hadc1);
 8000388:	4827      	ldr	r0, [pc, #156]	@ (8000428 <main+0x164>)
 800038a:	f001 fb5d 	bl	8001a48 <HAL_ADC_GetValue>
 800038e:	4603      	mov	r3, r0
 8000390:	4a26      	ldr	r2, [pc, #152]	@ (800042c <main+0x168>)
 8000392:	6013      	str	r3, [r2, #0]

			    // Read joystick Y (ADC2_IN1 on PA4)
			    HAL_ADC_Start(&hadc2);
 8000394:	4826      	ldr	r0, [pc, #152]	@ (8000430 <main+0x16c>)
 8000396:	f001 f93f 	bl	8001618 <HAL_ADC_Start>
			    HAL_ADC_PollForConversion(&hadc2, HAL_MAX_DELAY);
 800039a:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 800039e:	4824      	ldr	r0, [pc, #144]	@ (8000430 <main+0x16c>)
 80003a0:	f001 fa50 	bl	8001844 <HAL_ADC_PollForConversion>
			    joy_y = HAL_ADC_GetValue(&hadc2);
 80003a4:	4822      	ldr	r0, [pc, #136]	@ (8000430 <main+0x16c>)
 80003a6:	f001 fb4f 	bl	8001a48 <HAL_ADC_GetValue>
 80003aa:	4603      	mov	r3, r0
 80003ac:	4a21      	ldr	r2, [pc, #132]	@ (8000434 <main+0x170>)
 80003ae:	6013      	str	r3, [r2, #0]

			    // Map ADC values to PWM duty cycle range (1000 to 2000 us)
			    uint16_t pan_pwm = map(joy_x, 0, 4095, 1000, 2000);
 80003b0:	4b1e      	ldr	r3, [pc, #120]	@ (800042c <main+0x168>)
 80003b2:	681b      	ldr	r3, [r3, #0]
 80003b4:	4618      	mov	r0, r3
 80003b6:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 80003ba:	9300      	str	r3, [sp, #0]
 80003bc:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80003c0:	f640 72ff 	movw	r2, #4095	@ 0xfff
 80003c4:	2100      	movs	r1, #0
 80003c6:	f7ff feff 	bl	80001c8 <map>
 80003ca:	4603      	mov	r3, r0
 80003cc:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
			    uint16_t tilt_pwm = map(joy_y, 0, 4095, 1000, 2000);
 80003d0:	4b18      	ldr	r3, [pc, #96]	@ (8000434 <main+0x170>)
 80003d2:	681b      	ldr	r3, [r3, #0]
 80003d4:	4618      	mov	r0, r3
 80003d6:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 80003da:	9300      	str	r3, [sp, #0]
 80003dc:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80003e0:	f640 72ff 	movw	r2, #4095	@ 0xfff
 80003e4:	2100      	movs	r1, #0
 80003e6:	f7ff feef 	bl	80001c8 <map>
 80003ea:	4603      	mov	r3, r0
 80003ec:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46

			    // Update PWM duty cycles
			    TIM2->CCR1 = pan_pwm;  // Pan servo (PA15 = TIM2_CH1)
 80003f0:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80003f4:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 80003f8:	6353      	str	r3, [r2, #52]	@ 0x34
			    TIM2->CCR2 = tilt_pwm; // Tilt servo (PA1 = TIM2_CH2)
 80003fa:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80003fe:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8000402:	6393      	str	r3, [r2, #56]	@ 0x38

			    HAL_Delay(50); // Adjust responsiveness if needed
 8000404:	2032      	movs	r0, #50	@ 0x32
 8000406:	f000 ff03 	bl	8001210 <HAL_Delay>
	{
 800040a:	bf00      	nop
 800040c:	e7b4      	b.n	8000378 <main+0xb4>
 800040e:	bf00      	nop
 8000410:	080067a8 	.word	0x080067a8
 8000414:	48001015 	.word	0x48001015
 8000418:	20000000 	.word	0x20000000
 800041c:	20000204 	.word	0x20000204
 8000420:	200001b8 	.word	0x200001b8
 8000424:	20000100 	.word	0x20000100
 8000428:	20000060 	.word	0x20000060
 800042c:	20000524 	.word	0x20000524
 8000430:	200000b0 	.word	0x200000b0
 8000434:	20000528 	.word	0x20000528

08000438 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000438:	b580      	push	{r7, lr}
 800043a:	b09e      	sub	sp, #120	@ 0x78
 800043c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800043e:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8000442:	2228      	movs	r2, #40	@ 0x28
 8000444:	2100      	movs	r1, #0
 8000446:	4618      	mov	r0, r3
 8000448:	f006 f975 	bl	8006736 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800044c:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8000450:	2200      	movs	r2, #0
 8000452:	601a      	str	r2, [r3, #0]
 8000454:	605a      	str	r2, [r3, #4]
 8000456:	609a      	str	r2, [r3, #8]
 8000458:	60da      	str	r2, [r3, #12]
 800045a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800045c:	463b      	mov	r3, r7
 800045e:	223c      	movs	r2, #60	@ 0x3c
 8000460:	2100      	movs	r1, #0
 8000462:	4618      	mov	r0, r3
 8000464:	f006 f967 	bl	8006736 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8000468:	2303      	movs	r3, #3
 800046a:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800046c:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8000470:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000472:	2300      	movs	r3, #0
 8000474:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000476:	2301      	movs	r3, #1
 8000478:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800047a:	2310      	movs	r3, #16
 800047c:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800047e:	2302      	movs	r3, #2
 8000480:	66fb      	str	r3, [r7, #108]	@ 0x6c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000482:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000486:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8000488:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800048c:	677b      	str	r3, [r7, #116]	@ 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800048e:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8000492:	4618      	mov	r0, r3
 8000494:	f002 ffc4 	bl	8003420 <HAL_RCC_OscConfig>
 8000498:	4603      	mov	r3, r0
 800049a:	2b00      	cmp	r3, #0
 800049c:	d001      	beq.n	80004a2 <SystemClock_Config+0x6a>
  {
    Error_Handler();
 800049e:	f000 faf9 	bl	8000a94 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80004a2:	230f      	movs	r3, #15
 80004a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80004a6:	2302      	movs	r3, #2
 80004a8:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80004aa:	2300      	movs	r3, #0
 80004ac:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80004ae:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80004b2:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80004b4:	2300      	movs	r3, #0
 80004b6:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80004b8:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80004bc:	2101      	movs	r1, #1
 80004be:	4618      	mov	r0, r3
 80004c0:	f003 ffbc 	bl	800443c <HAL_RCC_ClockConfig>
 80004c4:	4603      	mov	r3, r0
 80004c6:	2b00      	cmp	r3, #0
 80004c8:	d001      	beq.n	80004ce <SystemClock_Config+0x96>
  {
    Error_Handler();
 80004ca:	f000 fae3 	bl	8000a94 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_I2C1
 80004ce:	4b0c      	ldr	r3, [pc, #48]	@ (8000500 <SystemClock_Config+0xc8>)
 80004d0:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_TIM1|RCC_PERIPHCLK_ADC12;
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12PLLCLK_DIV1;
 80004d2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80004d6:	627b      	str	r3, [r7, #36]	@ 0x24
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 80004d8:	2300      	movs	r3, #0
 80004da:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.USBClockSelection = RCC_USBCLKSOURCE_PLL;
 80004dc:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80004e0:	63bb      	str	r3, [r7, #56]	@ 0x38
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_HCLK;
 80004e2:	2300      	movs	r3, #0
 80004e4:	633b      	str	r3, [r7, #48]	@ 0x30
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80004e6:	463b      	mov	r3, r7
 80004e8:	4618      	mov	r0, r3
 80004ea:	f004 f969 	bl	80047c0 <HAL_RCCEx_PeriphCLKConfig>
 80004ee:	4603      	mov	r3, r0
 80004f0:	2b00      	cmp	r3, #0
 80004f2:	d001      	beq.n	80004f8 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80004f4:	f000 face 	bl	8000a94 <Error_Handler>
  }
}
 80004f8:	bf00      	nop
 80004fa:	3778      	adds	r7, #120	@ 0x78
 80004fc:	46bd      	mov	sp, r7
 80004fe:	bd80      	pop	{r7, pc}
 8000500:	000210a0 	.word	0x000210a0

08000504 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000504:	b580      	push	{r7, lr}
 8000506:	b08a      	sub	sp, #40	@ 0x28
 8000508:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800050a:	f107 031c 	add.w	r3, r7, #28
 800050e:	2200      	movs	r2, #0
 8000510:	601a      	str	r2, [r3, #0]
 8000512:	605a      	str	r2, [r3, #4]
 8000514:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000516:	1d3b      	adds	r3, r7, #4
 8000518:	2200      	movs	r2, #0
 800051a:	601a      	str	r2, [r3, #0]
 800051c:	605a      	str	r2, [r3, #4]
 800051e:	609a      	str	r2, [r3, #8]
 8000520:	60da      	str	r2, [r3, #12]
 8000522:	611a      	str	r2, [r3, #16]
 8000524:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000526:	4b2e      	ldr	r3, [pc, #184]	@ (80005e0 <MX_ADC1_Init+0xdc>)
 8000528:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800052c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800052e:	4b2c      	ldr	r3, [pc, #176]	@ (80005e0 <MX_ADC1_Init+0xdc>)
 8000530:	2200      	movs	r2, #0
 8000532:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000534:	4b2a      	ldr	r3, [pc, #168]	@ (80005e0 <MX_ADC1_Init+0xdc>)
 8000536:	2200      	movs	r2, #0
 8000538:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800053a:	4b29      	ldr	r3, [pc, #164]	@ (80005e0 <MX_ADC1_Init+0xdc>)
 800053c:	2200      	movs	r2, #0
 800053e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000540:	4b27      	ldr	r3, [pc, #156]	@ (80005e0 <MX_ADC1_Init+0xdc>)
 8000542:	2200      	movs	r2, #0
 8000544:	765a      	strb	r2, [r3, #25]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000546:	4b26      	ldr	r3, [pc, #152]	@ (80005e0 <MX_ADC1_Init+0xdc>)
 8000548:	2200      	movs	r2, #0
 800054a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800054e:	4b24      	ldr	r3, [pc, #144]	@ (80005e0 <MX_ADC1_Init+0xdc>)
 8000550:	2200      	movs	r2, #0
 8000552:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000554:	4b22      	ldr	r3, [pc, #136]	@ (80005e0 <MX_ADC1_Init+0xdc>)
 8000556:	2201      	movs	r2, #1
 8000558:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800055a:	4b21      	ldr	r3, [pc, #132]	@ (80005e0 <MX_ADC1_Init+0xdc>)
 800055c:	2200      	movs	r2, #0
 800055e:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000560:	4b1f      	ldr	r3, [pc, #124]	@ (80005e0 <MX_ADC1_Init+0xdc>)
 8000562:	2201      	movs	r2, #1
 8000564:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000566:	4b1e      	ldr	r3, [pc, #120]	@ (80005e0 <MX_ADC1_Init+0xdc>)
 8000568:	2200      	movs	r2, #0
 800056a:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800056e:	4b1c      	ldr	r3, [pc, #112]	@ (80005e0 <MX_ADC1_Init+0xdc>)
 8000570:	2204      	movs	r2, #4
 8000572:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000574:	4b1a      	ldr	r3, [pc, #104]	@ (80005e0 <MX_ADC1_Init+0xdc>)
 8000576:	2200      	movs	r2, #0
 8000578:	761a      	strb	r2, [r3, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 800057a:	4b19      	ldr	r3, [pc, #100]	@ (80005e0 <MX_ADC1_Init+0xdc>)
 800057c:	2200      	movs	r2, #0
 800057e:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000580:	4817      	ldr	r0, [pc, #92]	@ (80005e0 <MX_ADC1_Init+0xdc>)
 8000582:	f000 fe69 	bl	8001258 <HAL_ADC_Init>
 8000586:	4603      	mov	r3, r0
 8000588:	2b00      	cmp	r3, #0
 800058a:	d001      	beq.n	8000590 <MX_ADC1_Init+0x8c>
  {
    Error_Handler();
 800058c:	f000 fa82 	bl	8000a94 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000590:	2300      	movs	r3, #0
 8000592:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000594:	f107 031c 	add.w	r3, r7, #28
 8000598:	4619      	mov	r1, r3
 800059a:	4811      	ldr	r0, [pc, #68]	@ (80005e0 <MX_ADC1_Init+0xdc>)
 800059c:	f001 fd4c 	bl	8002038 <HAL_ADCEx_MultiModeConfigChannel>
 80005a0:	4603      	mov	r3, r0
 80005a2:	2b00      	cmp	r3, #0
 80005a4:	d001      	beq.n	80005aa <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 80005a6:	f000 fa75 	bl	8000a94 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80005aa:	2303      	movs	r3, #3
 80005ac:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80005ae:	2301      	movs	r3, #1
 80005b0:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80005b2:	2300      	movs	r3, #0
 80005b4:	613b      	str	r3, [r7, #16]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80005b6:	2300      	movs	r3, #0
 80005b8:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80005ba:	2300      	movs	r3, #0
 80005bc:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80005be:	2300      	movs	r3, #0
 80005c0:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80005c2:	1d3b      	adds	r3, r7, #4
 80005c4:	4619      	mov	r1, r3
 80005c6:	4806      	ldr	r0, [pc, #24]	@ (80005e0 <MX_ADC1_Init+0xdc>)
 80005c8:	f001 fa4c 	bl	8001a64 <HAL_ADC_ConfigChannel>
 80005cc:	4603      	mov	r3, r0
 80005ce:	2b00      	cmp	r3, #0
 80005d0:	d001      	beq.n	80005d6 <MX_ADC1_Init+0xd2>
  {
    Error_Handler();
 80005d2:	f000 fa5f 	bl	8000a94 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80005d6:	bf00      	nop
 80005d8:	3728      	adds	r7, #40	@ 0x28
 80005da:	46bd      	mov	sp, r7
 80005dc:	bd80      	pop	{r7, pc}
 80005de:	bf00      	nop
 80005e0:	20000060 	.word	0x20000060

080005e4 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	b086      	sub	sp, #24
 80005e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80005ea:	463b      	mov	r3, r7
 80005ec:	2200      	movs	r2, #0
 80005ee:	601a      	str	r2, [r3, #0]
 80005f0:	605a      	str	r2, [r3, #4]
 80005f2:	609a      	str	r2, [r3, #8]
 80005f4:	60da      	str	r2, [r3, #12]
 80005f6:	611a      	str	r2, [r3, #16]
 80005f8:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 80005fa:	4b27      	ldr	r3, [pc, #156]	@ (8000698 <MX_ADC2_Init+0xb4>)
 80005fc:	4a27      	ldr	r2, [pc, #156]	@ (800069c <MX_ADC2_Init+0xb8>)
 80005fe:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000600:	4b25      	ldr	r3, [pc, #148]	@ (8000698 <MX_ADC2_Init+0xb4>)
 8000602:	2200      	movs	r2, #0
 8000604:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8000606:	4b24      	ldr	r3, [pc, #144]	@ (8000698 <MX_ADC2_Init+0xb4>)
 8000608:	2200      	movs	r2, #0
 800060a:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800060c:	4b22      	ldr	r3, [pc, #136]	@ (8000698 <MX_ADC2_Init+0xb4>)
 800060e:	2200      	movs	r2, #0
 8000610:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8000612:	4b21      	ldr	r3, [pc, #132]	@ (8000698 <MX_ADC2_Init+0xb4>)
 8000614:	2200      	movs	r2, #0
 8000616:	765a      	strb	r2, [r3, #25]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000618:	4b1f      	ldr	r3, [pc, #124]	@ (8000698 <MX_ADC2_Init+0xb4>)
 800061a:	2200      	movs	r2, #0
 800061c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000620:	4b1d      	ldr	r3, [pc, #116]	@ (8000698 <MX_ADC2_Init+0xb4>)
 8000622:	2200      	movs	r2, #0
 8000624:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000626:	4b1c      	ldr	r3, [pc, #112]	@ (8000698 <MX_ADC2_Init+0xb4>)
 8000628:	2201      	movs	r2, #1
 800062a:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800062c:	4b1a      	ldr	r3, [pc, #104]	@ (8000698 <MX_ADC2_Init+0xb4>)
 800062e:	2200      	movs	r2, #0
 8000630:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 8000632:	4b19      	ldr	r3, [pc, #100]	@ (8000698 <MX_ADC2_Init+0xb4>)
 8000634:	2201      	movs	r2, #1
 8000636:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8000638:	4b17      	ldr	r3, [pc, #92]	@ (8000698 <MX_ADC2_Init+0xb4>)
 800063a:	2200      	movs	r2, #0
 800063c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000640:	4b15      	ldr	r3, [pc, #84]	@ (8000698 <MX_ADC2_Init+0xb4>)
 8000642:	2204      	movs	r2, #4
 8000644:	615a      	str	r2, [r3, #20]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8000646:	4b14      	ldr	r3, [pc, #80]	@ (8000698 <MX_ADC2_Init+0xb4>)
 8000648:	2200      	movs	r2, #0
 800064a:	761a      	strb	r2, [r3, #24]
  hadc2.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 800064c:	4b12      	ldr	r3, [pc, #72]	@ (8000698 <MX_ADC2_Init+0xb4>)
 800064e:	2200      	movs	r2, #0
 8000650:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000652:	4811      	ldr	r0, [pc, #68]	@ (8000698 <MX_ADC2_Init+0xb4>)
 8000654:	f000 fe00 	bl	8001258 <HAL_ADC_Init>
 8000658:	4603      	mov	r3, r0
 800065a:	2b00      	cmp	r3, #0
 800065c:	d001      	beq.n	8000662 <MX_ADC2_Init+0x7e>
  {
    Error_Handler();
 800065e:	f000 fa19 	bl	8000a94 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000662:	2301      	movs	r3, #1
 8000664:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000666:	2301      	movs	r3, #1
 8000668:	607b      	str	r3, [r7, #4]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800066a:	2300      	movs	r3, #0
 800066c:	60fb      	str	r3, [r7, #12]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800066e:	2300      	movs	r3, #0
 8000670:	60bb      	str	r3, [r7, #8]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000672:	2300      	movs	r3, #0
 8000674:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000676:	2300      	movs	r3, #0
 8000678:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800067a:	463b      	mov	r3, r7
 800067c:	4619      	mov	r1, r3
 800067e:	4806      	ldr	r0, [pc, #24]	@ (8000698 <MX_ADC2_Init+0xb4>)
 8000680:	f001 f9f0 	bl	8001a64 <HAL_ADC_ConfigChannel>
 8000684:	4603      	mov	r3, r0
 8000686:	2b00      	cmp	r3, #0
 8000688:	d001      	beq.n	800068e <MX_ADC2_Init+0xaa>
  {
    Error_Handler();
 800068a:	f000 fa03 	bl	8000a94 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 800068e:	bf00      	nop
 8000690:	3718      	adds	r7, #24
 8000692:	46bd      	mov	sp, r7
 8000694:	bd80      	pop	{r7, pc}
 8000696:	bf00      	nop
 8000698:	200000b0 	.word	0x200000b0
 800069c:	50000100 	.word	0x50000100

080006a0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80006a0:	b580      	push	{r7, lr}
 80006a2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80006a4:	4b1b      	ldr	r3, [pc, #108]	@ (8000714 <MX_I2C1_Init+0x74>)
 80006a6:	4a1c      	ldr	r2, [pc, #112]	@ (8000718 <MX_I2C1_Init+0x78>)
 80006a8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00201D2B;
 80006aa:	4b1a      	ldr	r3, [pc, #104]	@ (8000714 <MX_I2C1_Init+0x74>)
 80006ac:	4a1b      	ldr	r2, [pc, #108]	@ (800071c <MX_I2C1_Init+0x7c>)
 80006ae:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80006b0:	4b18      	ldr	r3, [pc, #96]	@ (8000714 <MX_I2C1_Init+0x74>)
 80006b2:	2200      	movs	r2, #0
 80006b4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80006b6:	4b17      	ldr	r3, [pc, #92]	@ (8000714 <MX_I2C1_Init+0x74>)
 80006b8:	2201      	movs	r2, #1
 80006ba:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80006bc:	4b15      	ldr	r3, [pc, #84]	@ (8000714 <MX_I2C1_Init+0x74>)
 80006be:	2200      	movs	r2, #0
 80006c0:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80006c2:	4b14      	ldr	r3, [pc, #80]	@ (8000714 <MX_I2C1_Init+0x74>)
 80006c4:	2200      	movs	r2, #0
 80006c6:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80006c8:	4b12      	ldr	r3, [pc, #72]	@ (8000714 <MX_I2C1_Init+0x74>)
 80006ca:	2200      	movs	r2, #0
 80006cc:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80006ce:	4b11      	ldr	r3, [pc, #68]	@ (8000714 <MX_I2C1_Init+0x74>)
 80006d0:	2200      	movs	r2, #0
 80006d2:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80006d4:	4b0f      	ldr	r3, [pc, #60]	@ (8000714 <MX_I2C1_Init+0x74>)
 80006d6:	2200      	movs	r2, #0
 80006d8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80006da:	480e      	ldr	r0, [pc, #56]	@ (8000714 <MX_I2C1_Init+0x74>)
 80006dc:	f002 f924 	bl	8002928 <HAL_I2C_Init>
 80006e0:	4603      	mov	r3, r0
 80006e2:	2b00      	cmp	r3, #0
 80006e4:	d001      	beq.n	80006ea <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80006e6:	f000 f9d5 	bl	8000a94 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80006ea:	2100      	movs	r1, #0
 80006ec:	4809      	ldr	r0, [pc, #36]	@ (8000714 <MX_I2C1_Init+0x74>)
 80006ee:	f002 fd39 	bl	8003164 <HAL_I2CEx_ConfigAnalogFilter>
 80006f2:	4603      	mov	r3, r0
 80006f4:	2b00      	cmp	r3, #0
 80006f6:	d001      	beq.n	80006fc <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80006f8:	f000 f9cc 	bl	8000a94 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80006fc:	2100      	movs	r1, #0
 80006fe:	4805      	ldr	r0, [pc, #20]	@ (8000714 <MX_I2C1_Init+0x74>)
 8000700:	f002 fd7b 	bl	80031fa <HAL_I2CEx_ConfigDigitalFilter>
 8000704:	4603      	mov	r3, r0
 8000706:	2b00      	cmp	r3, #0
 8000708:	d001      	beq.n	800070e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800070a:	f000 f9c3 	bl	8000a94 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800070e:	bf00      	nop
 8000710:	bd80      	pop	{r7, pc}
 8000712:	bf00      	nop
 8000714:	20000100 	.word	0x20000100
 8000718:	40005400 	.word	0x40005400
 800071c:	00201d2b 	.word	0x00201d2b

08000720 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000720:	b580      	push	{r7, lr}
 8000722:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000724:	4b1b      	ldr	r3, [pc, #108]	@ (8000794 <MX_SPI1_Init+0x74>)
 8000726:	4a1c      	ldr	r2, [pc, #112]	@ (8000798 <MX_SPI1_Init+0x78>)
 8000728:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800072a:	4b1a      	ldr	r3, [pc, #104]	@ (8000794 <MX_SPI1_Init+0x74>)
 800072c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000730:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000732:	4b18      	ldr	r3, [pc, #96]	@ (8000794 <MX_SPI1_Init+0x74>)
 8000734:	2200      	movs	r2, #0
 8000736:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8000738:	4b16      	ldr	r3, [pc, #88]	@ (8000794 <MX_SPI1_Init+0x74>)
 800073a:	f44f 7240 	mov.w	r2, #768	@ 0x300
 800073e:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000740:	4b14      	ldr	r3, [pc, #80]	@ (8000794 <MX_SPI1_Init+0x74>)
 8000742:	2200      	movs	r2, #0
 8000744:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000746:	4b13      	ldr	r3, [pc, #76]	@ (8000794 <MX_SPI1_Init+0x74>)
 8000748:	2200      	movs	r2, #0
 800074a:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800074c:	4b11      	ldr	r3, [pc, #68]	@ (8000794 <MX_SPI1_Init+0x74>)
 800074e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000752:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8000754:	4b0f      	ldr	r3, [pc, #60]	@ (8000794 <MX_SPI1_Init+0x74>)
 8000756:	2208      	movs	r2, #8
 8000758:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800075a:	4b0e      	ldr	r3, [pc, #56]	@ (8000794 <MX_SPI1_Init+0x74>)
 800075c:	2200      	movs	r2, #0
 800075e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000760:	4b0c      	ldr	r3, [pc, #48]	@ (8000794 <MX_SPI1_Init+0x74>)
 8000762:	2200      	movs	r2, #0
 8000764:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000766:	4b0b      	ldr	r3, [pc, #44]	@ (8000794 <MX_SPI1_Init+0x74>)
 8000768:	2200      	movs	r2, #0
 800076a:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 800076c:	4b09      	ldr	r3, [pc, #36]	@ (8000794 <MX_SPI1_Init+0x74>)
 800076e:	2207      	movs	r2, #7
 8000770:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000772:	4b08      	ldr	r3, [pc, #32]	@ (8000794 <MX_SPI1_Init+0x74>)
 8000774:	2200      	movs	r2, #0
 8000776:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000778:	4b06      	ldr	r3, [pc, #24]	@ (8000794 <MX_SPI1_Init+0x74>)
 800077a:	2208      	movs	r2, #8
 800077c:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800077e:	4805      	ldr	r0, [pc, #20]	@ (8000794 <MX_SPI1_Init+0x74>)
 8000780:	f004 f9cc 	bl	8004b1c <HAL_SPI_Init>
 8000784:	4603      	mov	r3, r0
 8000786:	2b00      	cmp	r3, #0
 8000788:	d001      	beq.n	800078e <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 800078a:	f000 f983 	bl	8000a94 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800078e:	bf00      	nop
 8000790:	bd80      	pop	{r7, pc}
 8000792:	bf00      	nop
 8000794:	20000154 	.word	0x20000154
 8000798:	40013000 	.word	0x40013000

0800079c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800079c:	b580      	push	{r7, lr}
 800079e:	b08c      	sub	sp, #48	@ 0x30
 80007a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80007a2:	f107 0320 	add.w	r3, r7, #32
 80007a6:	2200      	movs	r2, #0
 80007a8:	601a      	str	r2, [r3, #0]
 80007aa:	605a      	str	r2, [r3, #4]
 80007ac:	609a      	str	r2, [r3, #8]
 80007ae:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80007b0:	f107 0314 	add.w	r3, r7, #20
 80007b4:	2200      	movs	r2, #0
 80007b6:	601a      	str	r2, [r3, #0]
 80007b8:	605a      	str	r2, [r3, #4]
 80007ba:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80007bc:	1d3b      	adds	r3, r7, #4
 80007be:	2200      	movs	r2, #0
 80007c0:	601a      	str	r2, [r3, #0]
 80007c2:	605a      	str	r2, [r3, #4]
 80007c4:	609a      	str	r2, [r3, #8]
 80007c6:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80007c8:	4b2d      	ldr	r3, [pc, #180]	@ (8000880 <MX_TIM1_Init+0xe4>)
 80007ca:	4a2e      	ldr	r2, [pc, #184]	@ (8000884 <MX_TIM1_Init+0xe8>)
 80007cc:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 47;
 80007ce:	4b2c      	ldr	r3, [pc, #176]	@ (8000880 <MX_TIM1_Init+0xe4>)
 80007d0:	222f      	movs	r2, #47	@ 0x2f
 80007d2:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007d4:	4b2a      	ldr	r3, [pc, #168]	@ (8000880 <MX_TIM1_Init+0xe4>)
 80007d6:	2200      	movs	r2, #0
 80007d8:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80007da:	4b29      	ldr	r3, [pc, #164]	@ (8000880 <MX_TIM1_Init+0xe4>)
 80007dc:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80007e0:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80007e2:	4b27      	ldr	r3, [pc, #156]	@ (8000880 <MX_TIM1_Init+0xe4>)
 80007e4:	2200      	movs	r2, #0
 80007e6:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80007e8:	4b25      	ldr	r3, [pc, #148]	@ (8000880 <MX_TIM1_Init+0xe4>)
 80007ea:	2200      	movs	r2, #0
 80007ec:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80007ee:	4b24      	ldr	r3, [pc, #144]	@ (8000880 <MX_TIM1_Init+0xe4>)
 80007f0:	2200      	movs	r2, #0
 80007f2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80007f4:	4822      	ldr	r0, [pc, #136]	@ (8000880 <MX_TIM1_Init+0xe4>)
 80007f6:	f004 fa3c 	bl	8004c72 <HAL_TIM_Base_Init>
 80007fa:	4603      	mov	r3, r0
 80007fc:	2b00      	cmp	r3, #0
 80007fe:	d001      	beq.n	8000804 <MX_TIM1_Init+0x68>
  {
    Error_Handler();
 8000800:	f000 f948 	bl	8000a94 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000804:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000808:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800080a:	f107 0320 	add.w	r3, r7, #32
 800080e:	4619      	mov	r1, r3
 8000810:	481b      	ldr	r0, [pc, #108]	@ (8000880 <MX_TIM1_Init+0xe4>)
 8000812:	f005 f833 	bl	800587c <HAL_TIM_ConfigClockSource>
 8000816:	4603      	mov	r3, r0
 8000818:	2b00      	cmp	r3, #0
 800081a:	d001      	beq.n	8000820 <MX_TIM1_Init+0x84>
  {
    Error_Handler();
 800081c:	f000 f93a 	bl	8000a94 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim1) != HAL_OK)
 8000820:	4817      	ldr	r0, [pc, #92]	@ (8000880 <MX_TIM1_Init+0xe4>)
 8000822:	f004 fbd5 	bl	8004fd0 <HAL_TIM_IC_Init>
 8000826:	4603      	mov	r3, r0
 8000828:	2b00      	cmp	r3, #0
 800082a:	d001      	beq.n	8000830 <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 800082c:	f000 f932 	bl	8000a94 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000830:	2300      	movs	r3, #0
 8000832:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000834:	2300      	movs	r3, #0
 8000836:	61bb      	str	r3, [r7, #24]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000838:	2300      	movs	r3, #0
 800083a:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800083c:	f107 0314 	add.w	r3, r7, #20
 8000840:	4619      	mov	r1, r3
 8000842:	480f      	ldr	r0, [pc, #60]	@ (8000880 <MX_TIM1_Init+0xe4>)
 8000844:	f005 fea0 	bl	8006588 <HAL_TIMEx_MasterConfigSynchronization>
 8000848:	4603      	mov	r3, r0
 800084a:	2b00      	cmp	r3, #0
 800084c:	d001      	beq.n	8000852 <MX_TIM1_Init+0xb6>
  {
    Error_Handler();
 800084e:	f000 f921 	bl	8000a94 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_BOTHEDGE;
 8000852:	230a      	movs	r3, #10
 8000854:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000856:	2301      	movs	r3, #1
 8000858:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 800085a:	2300      	movs	r3, #0
 800085c:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 800085e:	2300      	movs	r3, #0
 8000860:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8000862:	1d3b      	adds	r3, r7, #4
 8000864:	2200      	movs	r2, #0
 8000866:	4619      	mov	r1, r3
 8000868:	4805      	ldr	r0, [pc, #20]	@ (8000880 <MX_TIM1_Init+0xe4>)
 800086a:	f004 fe57 	bl	800551c <HAL_TIM_IC_ConfigChannel>
 800086e:	4603      	mov	r3, r0
 8000870:	2b00      	cmp	r3, #0
 8000872:	d001      	beq.n	8000878 <MX_TIM1_Init+0xdc>
  {
    Error_Handler();
 8000874:	f000 f90e 	bl	8000a94 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000878:	bf00      	nop
 800087a:	3730      	adds	r7, #48	@ 0x30
 800087c:	46bd      	mov	sp, r7
 800087e:	bd80      	pop	{r7, pc}
 8000880:	200001b8 	.word	0x200001b8
 8000884:	40012c00 	.word	0x40012c00

08000888 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000888:	b580      	push	{r7, lr}
 800088a:	b08a      	sub	sp, #40	@ 0x28
 800088c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800088e:	f107 031c 	add.w	r3, r7, #28
 8000892:	2200      	movs	r2, #0
 8000894:	601a      	str	r2, [r3, #0]
 8000896:	605a      	str	r2, [r3, #4]
 8000898:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800089a:	463b      	mov	r3, r7
 800089c:	2200      	movs	r2, #0
 800089e:	601a      	str	r2, [r3, #0]
 80008a0:	605a      	str	r2, [r3, #4]
 80008a2:	609a      	str	r2, [r3, #8]
 80008a4:	60da      	str	r2, [r3, #12]
 80008a6:	611a      	str	r2, [r3, #16]
 80008a8:	615a      	str	r2, [r3, #20]
 80008aa:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80008ac:	4b28      	ldr	r3, [pc, #160]	@ (8000950 <MX_TIM2_Init+0xc8>)
 80008ae:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80008b2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 47;
 80008b4:	4b26      	ldr	r3, [pc, #152]	@ (8000950 <MX_TIM2_Init+0xc8>)
 80008b6:	222f      	movs	r2, #47	@ 0x2f
 80008b8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008ba:	4b25      	ldr	r3, [pc, #148]	@ (8000950 <MX_TIM2_Init+0xc8>)
 80008bc:	2200      	movs	r2, #0
 80008be:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 20000;
 80008c0:	4b23      	ldr	r3, [pc, #140]	@ (8000950 <MX_TIM2_Init+0xc8>)
 80008c2:	f644 6220 	movw	r2, #20000	@ 0x4e20
 80008c6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80008c8:	4b21      	ldr	r3, [pc, #132]	@ (8000950 <MX_TIM2_Init+0xc8>)
 80008ca:	2200      	movs	r2, #0
 80008cc:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80008ce:	4b20      	ldr	r3, [pc, #128]	@ (8000950 <MX_TIM2_Init+0xc8>)
 80008d0:	2280      	movs	r2, #128	@ 0x80
 80008d2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80008d4:	481e      	ldr	r0, [pc, #120]	@ (8000950 <MX_TIM2_Init+0xc8>)
 80008d6:	f004 fa23 	bl	8004d20 <HAL_TIM_PWM_Init>
 80008da:	4603      	mov	r3, r0
 80008dc:	2b00      	cmp	r3, #0
 80008de:	d001      	beq.n	80008e4 <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 80008e0:	f000 f8d8 	bl	8000a94 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80008e4:	2300      	movs	r3, #0
 80008e6:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80008e8:	2300      	movs	r3, #0
 80008ea:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80008ec:	f107 031c 	add.w	r3, r7, #28
 80008f0:	4619      	mov	r1, r3
 80008f2:	4817      	ldr	r0, [pc, #92]	@ (8000950 <MX_TIM2_Init+0xc8>)
 80008f4:	f005 fe48 	bl	8006588 <HAL_TIMEx_MasterConfigSynchronization>
 80008f8:	4603      	mov	r3, r0
 80008fa:	2b00      	cmp	r3, #0
 80008fc:	d001      	beq.n	8000902 <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 80008fe:	f000 f8c9 	bl	8000a94 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000902:	2360      	movs	r3, #96	@ 0x60
 8000904:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 2000;
 8000906:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 800090a:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800090c:	2300      	movs	r3, #0
 800090e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000910:	2300      	movs	r3, #0
 8000912:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000914:	463b      	mov	r3, r7
 8000916:	2200      	movs	r2, #0
 8000918:	4619      	mov	r1, r3
 800091a:	480d      	ldr	r0, [pc, #52]	@ (8000950 <MX_TIM2_Init+0xc8>)
 800091c:	f004 fe9a 	bl	8005654 <HAL_TIM_PWM_ConfigChannel>
 8000920:	4603      	mov	r3, r0
 8000922:	2b00      	cmp	r3, #0
 8000924:	d001      	beq.n	800092a <MX_TIM2_Init+0xa2>
  {
    Error_Handler();
 8000926:	f000 f8b5 	bl	8000a94 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800092a:	463b      	mov	r3, r7
 800092c:	2204      	movs	r2, #4
 800092e:	4619      	mov	r1, r3
 8000930:	4807      	ldr	r0, [pc, #28]	@ (8000950 <MX_TIM2_Init+0xc8>)
 8000932:	f004 fe8f 	bl	8005654 <HAL_TIM_PWM_ConfigChannel>
 8000936:	4603      	mov	r3, r0
 8000938:	2b00      	cmp	r3, #0
 800093a:	d001      	beq.n	8000940 <MX_TIM2_Init+0xb8>
  {
    Error_Handler();
 800093c:	f000 f8aa 	bl	8000a94 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000940:	4803      	ldr	r0, [pc, #12]	@ (8000950 <MX_TIM2_Init+0xc8>)
 8000942:	f000 fb05 	bl	8000f50 <HAL_TIM_MspPostInit>

}
 8000946:	bf00      	nop
 8000948:	3728      	adds	r7, #40	@ 0x28
 800094a:	46bd      	mov	sp, r7
 800094c:	bd80      	pop	{r7, pc}
 800094e:	bf00      	nop
 8000950:	20000204 	.word	0x20000204

08000954 <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 8000954:	b580      	push	{r7, lr}
 8000956:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 8000958:	4b0d      	ldr	r3, [pc, #52]	@ (8000990 <MX_USB_PCD_Init+0x3c>)
 800095a:	4a0e      	ldr	r2, [pc, #56]	@ (8000994 <MX_USB_PCD_Init+0x40>)
 800095c:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800095e:	4b0c      	ldr	r3, [pc, #48]	@ (8000990 <MX_USB_PCD_Init+0x3c>)
 8000960:	2208      	movs	r2, #8
 8000962:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8000964:	4b0a      	ldr	r3, [pc, #40]	@ (8000990 <MX_USB_PCD_Init+0x3c>)
 8000966:	2202      	movs	r2, #2
 8000968:	715a      	strb	r2, [r3, #5]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800096a:	4b09      	ldr	r3, [pc, #36]	@ (8000990 <MX_USB_PCD_Init+0x3c>)
 800096c:	2202      	movs	r2, #2
 800096e:	71da      	strb	r2, [r3, #7]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8000970:	4b07      	ldr	r3, [pc, #28]	@ (8000990 <MX_USB_PCD_Init+0x3c>)
 8000972:	2200      	movs	r2, #0
 8000974:	725a      	strb	r2, [r3, #9]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8000976:	4b06      	ldr	r3, [pc, #24]	@ (8000990 <MX_USB_PCD_Init+0x3c>)
 8000978:	2200      	movs	r2, #0
 800097a:	72da      	strb	r2, [r3, #11]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800097c:	4804      	ldr	r0, [pc, #16]	@ (8000990 <MX_USB_PCD_Init+0x3c>)
 800097e:	f002 fc88 	bl	8003292 <HAL_PCD_Init>
 8000982:	4603      	mov	r3, r0
 8000984:	2b00      	cmp	r3, #0
 8000986:	d001      	beq.n	800098c <MX_USB_PCD_Init+0x38>
  {
    Error_Handler();
 8000988:	f000 f884 	bl	8000a94 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 800098c:	bf00      	nop
 800098e:	bd80      	pop	{r7, pc}
 8000990:	20000250 	.word	0x20000250
 8000994:	40005c00 	.word	0x40005c00

08000998 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000998:	b580      	push	{r7, lr}
 800099a:	b08a      	sub	sp, #40	@ 0x28
 800099c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800099e:	f107 0314 	add.w	r3, r7, #20
 80009a2:	2200      	movs	r2, #0
 80009a4:	601a      	str	r2, [r3, #0]
 80009a6:	605a      	str	r2, [r3, #4]
 80009a8:	609a      	str	r2, [r3, #8]
 80009aa:	60da      	str	r2, [r3, #12]
 80009ac:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80009ae:	4b37      	ldr	r3, [pc, #220]	@ (8000a8c <MX_GPIO_Init+0xf4>)
 80009b0:	695b      	ldr	r3, [r3, #20]
 80009b2:	4a36      	ldr	r2, [pc, #216]	@ (8000a8c <MX_GPIO_Init+0xf4>)
 80009b4:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80009b8:	6153      	str	r3, [r2, #20]
 80009ba:	4b34      	ldr	r3, [pc, #208]	@ (8000a8c <MX_GPIO_Init+0xf4>)
 80009bc:	695b      	ldr	r3, [r3, #20]
 80009be:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80009c2:	613b      	str	r3, [r7, #16]
 80009c4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009c6:	4b31      	ldr	r3, [pc, #196]	@ (8000a8c <MX_GPIO_Init+0xf4>)
 80009c8:	695b      	ldr	r3, [r3, #20]
 80009ca:	4a30      	ldr	r2, [pc, #192]	@ (8000a8c <MX_GPIO_Init+0xf4>)
 80009cc:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80009d0:	6153      	str	r3, [r2, #20]
 80009d2:	4b2e      	ldr	r3, [pc, #184]	@ (8000a8c <MX_GPIO_Init+0xf4>)
 80009d4:	695b      	ldr	r3, [r3, #20]
 80009d6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80009da:	60fb      	str	r3, [r7, #12]
 80009dc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80009de:	4b2b      	ldr	r3, [pc, #172]	@ (8000a8c <MX_GPIO_Init+0xf4>)
 80009e0:	695b      	ldr	r3, [r3, #20]
 80009e2:	4a2a      	ldr	r2, [pc, #168]	@ (8000a8c <MX_GPIO_Init+0xf4>)
 80009e4:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80009e8:	6153      	str	r3, [r2, #20]
 80009ea:	4b28      	ldr	r3, [pc, #160]	@ (8000a8c <MX_GPIO_Init+0xf4>)
 80009ec:	695b      	ldr	r3, [r3, #20]
 80009ee:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80009f2:	60bb      	str	r3, [r7, #8]
 80009f4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009f6:	4b25      	ldr	r3, [pc, #148]	@ (8000a8c <MX_GPIO_Init+0xf4>)
 80009f8:	695b      	ldr	r3, [r3, #20]
 80009fa:	4a24      	ldr	r2, [pc, #144]	@ (8000a8c <MX_GPIO_Init+0xf4>)
 80009fc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000a00:	6153      	str	r3, [r2, #20]
 8000a02:	4b22      	ldr	r3, [pc, #136]	@ (8000a8c <MX_GPIO_Init+0xf4>)
 8000a04:	695b      	ldr	r3, [r3, #20]
 8000a06:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000a0a:	607b      	str	r3, [r7, #4]
 8000a0c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a0e:	4b1f      	ldr	r3, [pc, #124]	@ (8000a8c <MX_GPIO_Init+0xf4>)
 8000a10:	695b      	ldr	r3, [r3, #20]
 8000a12:	4a1e      	ldr	r2, [pc, #120]	@ (8000a8c <MX_GPIO_Init+0xf4>)
 8000a14:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000a18:	6153      	str	r3, [r2, #20]
 8000a1a:	4b1c      	ldr	r3, [pc, #112]	@ (8000a8c <MX_GPIO_Init+0xf4>)
 8000a1c:	695b      	ldr	r3, [r3, #20]
 8000a1e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000a22:	603b      	str	r3, [r7, #0]
 8000a24:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, CS_I2C_SPI_Pin|LD4_Pin|LD3_Pin|LD5_Pin
 8000a26:	2200      	movs	r2, #0
 8000a28:	f64f 7108 	movw	r1, #65288	@ 0xff08
 8000a2c:	4818      	ldr	r0, [pc, #96]	@ (8000a90 <MX_GPIO_Init+0xf8>)
 8000a2e:	f001 ff63 	bl	80028f8 <HAL_GPIO_WritePin>
                          |LD6_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : CS_I2C_SPI_Pin LD4_Pin LD3_Pin LD5_Pin
                           LD7_Pin LD9_Pin LD10_Pin LD8_Pin
                           LD6_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin|LD4_Pin|LD3_Pin|LD5_Pin
 8000a32:	f64f 7308 	movw	r3, #65288	@ 0xff08
 8000a36:	617b      	str	r3, [r7, #20]
                          |LD7_Pin|LD9_Pin|LD10_Pin|LD8_Pin
                          |LD6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a38:	2301      	movs	r3, #1
 8000a3a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a3c:	2300      	movs	r3, #0
 8000a3e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a40:	2300      	movs	r3, #0
 8000a42:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000a44:	f107 0314 	add.w	r3, r7, #20
 8000a48:	4619      	mov	r1, r3
 8000a4a:	4811      	ldr	r0, [pc, #68]	@ (8000a90 <MX_GPIO_Init+0xf8>)
 8000a4c:	f001 fdc2 	bl	80025d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : MEMS_INT3_Pin MEMS_INT4_Pin MEMS_INT1_Pin MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT3_Pin|MEMS_INT4_Pin|MEMS_INT1_Pin|MEMS_INT2_Pin;
 8000a50:	2333      	movs	r3, #51	@ 0x33
 8000a52:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000a54:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8000a58:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a5a:	2300      	movs	r3, #0
 8000a5c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000a5e:	f107 0314 	add.w	r3, r7, #20
 8000a62:	4619      	mov	r1, r3
 8000a64:	480a      	ldr	r0, [pc, #40]	@ (8000a90 <MX_GPIO_Init+0xf8>)
 8000a66:	f001 fdb5 	bl	80025d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000a6a:	2301      	movs	r3, #1
 8000a6c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a6e:	2300      	movs	r3, #0
 8000a70:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a72:	2300      	movs	r3, #0
 8000a74:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000a76:	f107 0314 	add.w	r3, r7, #20
 8000a7a:	4619      	mov	r1, r3
 8000a7c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000a80:	f001 fda8 	bl	80025d4 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000a84:	bf00      	nop
 8000a86:	3728      	adds	r7, #40	@ 0x28
 8000a88:	46bd      	mov	sp, r7
 8000a8a:	bd80      	pop	{r7, pc}
 8000a8c:	40021000 	.word	0x40021000
 8000a90:	48001000 	.word	0x48001000

08000a94 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a94:	b480      	push	{r7}
 8000a96:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a98:	b672      	cpsid	i
}
 8000a9a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8000a9c:	bf00      	nop
 8000a9e:	e7fd      	b.n	8000a9c <Error_Handler+0x8>

08000aa0 <initialise_ptu_i2c>:

#include "ptu_definitions.h"

ACCELEROMETER_CFG_STRUCT accelerometer_cfg = {ADXL345_POWER_CTL, 0x08, ADXL345_DATA_FORMAT, 0x08};

void initialise_ptu_i2c(I2C_HandleTypeDef *i2c) {
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	b088      	sub	sp, #32
 8000aa4:	af04      	add	r7, sp, #16
 8000aa6:	6078      	str	r0, [r7, #4]

	HAL_StatusTypeDef return_value = 0x00;
 8000aa8:	2300      	movs	r3, #0
 8000aaa:	73fb      	strb	r3, [r7, #15]

	uint8_t reg_1 = 0b00001111;
 8000aac:	230f      	movs	r3, #15
 8000aae:	73bb      	strb	r3, [r7, #14]
	// Enable x, y, z and turn off power down:
	return_value = HAL_I2C_Mem_Write(i2c, gyro_wr, L3G4200D_CTRL_REG1, 1, &reg_1, 1, 10);
 8000ab0:	230a      	movs	r3, #10
 8000ab2:	9302      	str	r3, [sp, #8]
 8000ab4:	2301      	movs	r3, #1
 8000ab6:	9301      	str	r3, [sp, #4]
 8000ab8:	f107 030e 	add.w	r3, r7, #14
 8000abc:	9300      	str	r3, [sp, #0]
 8000abe:	2301      	movs	r3, #1
 8000ac0:	2220      	movs	r2, #32
 8000ac2:	21d2      	movs	r1, #210	@ 0xd2
 8000ac4:	6878      	ldr	r0, [r7, #4]
 8000ac6:	f001 ffcb 	bl	8002a60 <HAL_I2C_Mem_Write>
 8000aca:	4603      	mov	r3, r0
 8000acc:	73fb      	strb	r3, [r7, #15]

	uint8_t reg_2 = 0b00000000;
 8000ace:	2300      	movs	r3, #0
 8000ad0:	737b      	strb	r3, [r7, #13]
	// If you'd like to adjust/use the HPF, you can edit the line below to configure CTRL_REG2:
	return_value = HAL_I2C_Mem_Write(i2c, gyro_wr, L3G4200D_CTRL_REG2, 1, &reg_2, 1, 10);
 8000ad2:	230a      	movs	r3, #10
 8000ad4:	9302      	str	r3, [sp, #8]
 8000ad6:	2301      	movs	r3, #1
 8000ad8:	9301      	str	r3, [sp, #4]
 8000ada:	f107 030d 	add.w	r3, r7, #13
 8000ade:	9300      	str	r3, [sp, #0]
 8000ae0:	2301      	movs	r3, #1
 8000ae2:	2221      	movs	r2, #33	@ 0x21
 8000ae4:	21d2      	movs	r1, #210	@ 0xd2
 8000ae6:	6878      	ldr	r0, [r7, #4]
 8000ae8:	f001 ffba 	bl	8002a60 <HAL_I2C_Mem_Write>
 8000aec:	4603      	mov	r3, r0
 8000aee:	73fb      	strb	r3, [r7, #15]

	// Configure CTRL_REG3 to generate data ready interrupt on INT2
	// No interrupts used on INT1, if you'd like to configure INT1
	// or INT2 otherwise, consult the datasheet:
	return_value = HAL_I2C_Mem_Write(i2c, gyro_wr, L3G4200D_CTRL_REG3, 1, &reg_2, 1, 10);
 8000af0:	230a      	movs	r3, #10
 8000af2:	9302      	str	r3, [sp, #8]
 8000af4:	2301      	movs	r3, #1
 8000af6:	9301      	str	r3, [sp, #4]
 8000af8:	f107 030d 	add.w	r3, r7, #13
 8000afc:	9300      	str	r3, [sp, #0]
 8000afe:	2301      	movs	r3, #1
 8000b00:	2222      	movs	r2, #34	@ 0x22
 8000b02:	21d2      	movs	r1, #210	@ 0xd2
 8000b04:	6878      	ldr	r0, [r7, #4]
 8000b06:	f001 ffab 	bl	8002a60 <HAL_I2C_Mem_Write>
 8000b0a:	4603      	mov	r3, r0
 8000b0c:	73fb      	strb	r3, [r7, #15]
	// CTRL_REG5 controls high-pass filtering of outputs, use it
	// if you'd like:
	//HAL_I2C_Mem_Write(&hi2c1, gyro_wr, L3G4200D_CTRL_REG5, 1, &reg_2, 10);

	// reset lidar board
	uint8_t reset_value = 0x00;
 8000b0e:	2300      	movs	r3, #0
 8000b10:	733b      	strb	r3, [r7, #12]
	return_value = HAL_I2C_Mem_Write(i2c, LIDAR_WR, 0x00, 1, &reset_value, 1, 10);
 8000b12:	230a      	movs	r3, #10
 8000b14:	9302      	str	r3, [sp, #8]
 8000b16:	2301      	movs	r3, #1
 8000b18:	9301      	str	r3, [sp, #4]
 8000b1a:	f107 030c 	add.w	r3, r7, #12
 8000b1e:	9300      	str	r3, [sp, #0]
 8000b20:	2301      	movs	r3, #1
 8000b22:	2200      	movs	r2, #0
 8000b24:	21c4      	movs	r1, #196	@ 0xc4
 8000b26:	6878      	ldr	r0, [r7, #4]
 8000b28:	f001 ff9a 	bl	8002a60 <HAL_I2C_Mem_Write>
 8000b2c:	4603      	mov	r3, r0
 8000b2e:	73fb      	strb	r3, [r7, #15]
}
 8000b30:	bf00      	nop
 8000b32:	3710      	adds	r7, #16
 8000b34:	46bd      	mov	sp, r7
 8000b36:	bd80      	pop	{r7, pc}

08000b38 <SerialInitialise>:
		0x77};


// InitialiseSerial - Initialise the serial port
// Input: baudRate is from an enumerated set
void SerialInitialise(uint32_t baudRate, SerialPort *serial_port, void (*completion_function)(uint32_t)) {
 8000b38:	b480      	push	{r7}
 8000b3a:	b087      	sub	sp, #28
 8000b3c:	af00      	add	r7, sp, #0
 8000b3e:	60f8      	str	r0, [r7, #12]
 8000b40:	60b9      	str	r1, [r7, #8]
 8000b42:	607a      	str	r2, [r7, #4]

	serial_port->completion_function = completion_function;
 8000b44:	68bb      	ldr	r3, [r7, #8]
 8000b46:	687a      	ldr	r2, [r7, #4]
 8000b48:	635a      	str	r2, [r3, #52]	@ 0x34

	// enable clock power, system configuration clock and GPIOC
	// common to all UARTs
	RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 8000b4a:	4b34      	ldr	r3, [pc, #208]	@ (8000c1c <SerialInitialise+0xe4>)
 8000b4c:	69db      	ldr	r3, [r3, #28]
 8000b4e:	4a33      	ldr	r2, [pc, #204]	@ (8000c1c <SerialInitialise+0xe4>)
 8000b50:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000b54:	61d3      	str	r3, [r2, #28]
	RCC->APB2ENR |= RCC_APB2ENR_SYSCFGEN;
 8000b56:	4b31      	ldr	r3, [pc, #196]	@ (8000c1c <SerialInitialise+0xe4>)
 8000b58:	699b      	ldr	r3, [r3, #24]
 8000b5a:	4a30      	ldr	r2, [pc, #192]	@ (8000c1c <SerialInitialise+0xe4>)
 8000b5c:	f043 0301 	orr.w	r3, r3, #1
 8000b60:	6193      	str	r3, [r2, #24]

	switch(serial_port->SerialPortGPIO) {
 8000b62:	68bb      	ldr	r3, [r7, #8]
 8000b64:	699b      	ldr	r3, [r3, #24]
 8000b66:	2b02      	cmp	r3, #2
 8000b68:	d106      	bne.n	8000b78 <SerialInitialise+0x40>
	case SERIAL_GPIO_C:
		RCC->AHBENR |= RCC_AHBENR_GPIOCEN;
 8000b6a:	4b2c      	ldr	r3, [pc, #176]	@ (8000c1c <SerialInitialise+0xe4>)
 8000b6c:	695b      	ldr	r3, [r3, #20]
 8000b6e:	4a2b      	ldr	r2, [pc, #172]	@ (8000c1c <SerialInitialise+0xe4>)
 8000b70:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8000b74:	6153      	str	r3, [r2, #20]
		break;
 8000b76:	e000      	b.n	8000b7a <SerialInitialise+0x42>
	default:
		break;
 8000b78:	bf00      	nop
	}

	// set pin mode
	*(serial_port->SerialPinModeRegister) = serial_port->SerialPinModeValue;
 8000b7a:	68bb      	ldr	r3, [r7, #8]
 8000b7c:	69db      	ldr	r3, [r3, #28]
 8000b7e:	68ba      	ldr	r2, [r7, #8]
 8000b80:	6a12      	ldr	r2, [r2, #32]
 8000b82:	601a      	str	r2, [r3, #0]

	// enable high speed clock for GPIOC
	*(serial_port->SerialPinSpeedRegister) = serial_port->SerialPinSpeedValue;
 8000b84:	68bb      	ldr	r3, [r7, #8]
 8000b86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000b88:	68ba      	ldr	r2, [r7, #8]
 8000b8a:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8000b8c:	601a      	str	r2, [r3, #0]

	// set alternate function to enable USART to an external pin
	*(serial_port->SerialPinAlternatePinRegister) = serial_port->SerialPinAlternatePinValue;
 8000b8e:	68bb      	ldr	r3, [r7, #8]
 8000b90:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000b92:	68ba      	ldr	r2, [r7, #8]
 8000b94:	f892 2030 	ldrb.w	r2, [r2, #48]	@ 0x30
 8000b98:	b2d2      	uxtb	r2, r2
 8000b9a:	701a      	strb	r2, [r3, #0]

	*(serial_port->TimerEnableRegister) |= serial_port->TimerEnableMask;
 8000b9c:	68bb      	ldr	r3, [r7, #8]
 8000b9e:	6959      	ldr	r1, [r3, #20]
 8000ba0:	68bb      	ldr	r3, [r7, #8]
 8000ba2:	691b      	ldr	r3, [r3, #16]
 8000ba4:	681a      	ldr	r2, [r3, #0]
 8000ba6:	68bb      	ldr	r3, [r7, #8]
 8000ba8:	691b      	ldr	r3, [r3, #16]
 8000baa:	430a      	orrs	r2, r1
 8000bac:	601a      	str	r2, [r3, #0]

	uint16_t *baud_rate_config = ((uint16_t*)serial_port->BaudRate); // only 16 bits used!
 8000bae:	68bb      	ldr	r3, [r7, #8]
 8000bb0:	681b      	ldr	r3, [r3, #0]
 8000bb2:	617b      	str	r3, [r7, #20]

	// Baud rate calculation from datasheet
	switch(baudRate){
 8000bb4:	68fb      	ldr	r3, [r7, #12]
 8000bb6:	2b04      	cmp	r3, #4
 8000bb8:	d821      	bhi.n	8000bfe <SerialInitialise+0xc6>
 8000bba:	a201      	add	r2, pc, #4	@ (adr r2, 8000bc0 <SerialInitialise+0x88>)
 8000bbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000bc0:	08000bd5 	.word	0x08000bd5
 8000bc4:	08000bdd 	.word	0x08000bdd
 8000bc8:	08000be5 	.word	0x08000be5
 8000bcc:	08000bed 	.word	0x08000bed
 8000bd0:	08000bf5 	.word	0x08000bf5
	case BAUD_9600:
		// NEED TO FIX THIS !
		*baud_rate_config = 0x46;  // 115200 at 8MHz
 8000bd4:	697b      	ldr	r3, [r7, #20]
 8000bd6:	2246      	movs	r2, #70	@ 0x46
 8000bd8:	801a      	strh	r2, [r3, #0]
		break;
 8000bda:	e010      	b.n	8000bfe <SerialInitialise+0xc6>
	case BAUD_19200:
		// NEED TO FIX THIS !
		*baud_rate_config = 0x46;  // 115200 at 8MHz
 8000bdc:	697b      	ldr	r3, [r7, #20]
 8000bde:	2246      	movs	r2, #70	@ 0x46
 8000be0:	801a      	strh	r2, [r3, #0]
		break;
 8000be2:	e00c      	b.n	8000bfe <SerialInitialise+0xc6>
	case BAUD_38400:
		// NEED TO FIX THIS !
		*baud_rate_config = 0x46;  // 115200 at 8MHz
 8000be4:	697b      	ldr	r3, [r7, #20]
 8000be6:	2246      	movs	r2, #70	@ 0x46
 8000be8:	801a      	strh	r2, [r3, #0]
		break;
 8000bea:	e008      	b.n	8000bfe <SerialInitialise+0xc6>
	case BAUD_57600:
		// NEED TO FIX THIS !
		*baud_rate_config = 0x46;  // 115200 at 8MHz
 8000bec:	697b      	ldr	r3, [r7, #20]
 8000bee:	2246      	movs	r2, #70	@ 0x46
 8000bf0:	801a      	strh	r2, [r3, #0]
		break;
 8000bf2:	e004      	b.n	8000bfe <SerialInitialise+0xc6>
	case BAUD_115200:
		*baud_rate_config = 0x46 * 0x06;  // 115200 at 8MHz
 8000bf4:	697b      	ldr	r3, [r7, #20]
 8000bf6:	f44f 72d2 	mov.w	r2, #420	@ 0x1a4
 8000bfa:	801a      	strh	r2, [r3, #0]
		break;
 8000bfc:	bf00      	nop
	}


	// enable serial port for tx and rx
	*(serial_port->ControlRegister1) |= USART_CR1_TE | USART_CR1_RE | USART_CR1_UE;
 8000bfe:	68bb      	ldr	r3, [r7, #8]
 8000c00:	685b      	ldr	r3, [r3, #4]
 8000c02:	681a      	ldr	r2, [r3, #0]
 8000c04:	68bb      	ldr	r3, [r7, #8]
 8000c06:	685b      	ldr	r3, [r3, #4]
 8000c08:	f042 020d 	orr.w	r2, r2, #13
 8000c0c:	601a      	str	r2, [r3, #0]
}
 8000c0e:	bf00      	nop
 8000c10:	371c      	adds	r7, #28
 8000c12:	46bd      	mov	sp, r7
 8000c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c18:	4770      	bx	lr
 8000c1a:	bf00      	nop
 8000c1c:	40021000 	.word	0x40021000

08000c20 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c20:	b580      	push	{r7, lr}
 8000c22:	b082      	sub	sp, #8
 8000c24:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c26:	4b0f      	ldr	r3, [pc, #60]	@ (8000c64 <HAL_MspInit+0x44>)
 8000c28:	699b      	ldr	r3, [r3, #24]
 8000c2a:	4a0e      	ldr	r2, [pc, #56]	@ (8000c64 <HAL_MspInit+0x44>)
 8000c2c:	f043 0301 	orr.w	r3, r3, #1
 8000c30:	6193      	str	r3, [r2, #24]
 8000c32:	4b0c      	ldr	r3, [pc, #48]	@ (8000c64 <HAL_MspInit+0x44>)
 8000c34:	699b      	ldr	r3, [r3, #24]
 8000c36:	f003 0301 	and.w	r3, r3, #1
 8000c3a:	607b      	str	r3, [r7, #4]
 8000c3c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c3e:	4b09      	ldr	r3, [pc, #36]	@ (8000c64 <HAL_MspInit+0x44>)
 8000c40:	69db      	ldr	r3, [r3, #28]
 8000c42:	4a08      	ldr	r2, [pc, #32]	@ (8000c64 <HAL_MspInit+0x44>)
 8000c44:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000c48:	61d3      	str	r3, [r2, #28]
 8000c4a:	4b06      	ldr	r3, [pc, #24]	@ (8000c64 <HAL_MspInit+0x44>)
 8000c4c:	69db      	ldr	r3, [r3, #28]
 8000c4e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000c52:	603b      	str	r3, [r7, #0]
 8000c54:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000c56:	2007      	movs	r0, #7
 8000c58:	f001 fc7a 	bl	8002550 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c5c:	bf00      	nop
 8000c5e:	3708      	adds	r7, #8
 8000c60:	46bd      	mov	sp, r7
 8000c62:	bd80      	pop	{r7, pc}
 8000c64:	40021000 	.word	0x40021000

08000c68 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	b08c      	sub	sp, #48	@ 0x30
 8000c6c:	af00      	add	r7, sp, #0
 8000c6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c70:	f107 031c 	add.w	r3, r7, #28
 8000c74:	2200      	movs	r2, #0
 8000c76:	601a      	str	r2, [r3, #0]
 8000c78:	605a      	str	r2, [r3, #4]
 8000c7a:	609a      	str	r2, [r3, #8]
 8000c7c:	60da      	str	r2, [r3, #12]
 8000c7e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	681b      	ldr	r3, [r3, #0]
 8000c84:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8000c88:	d12e      	bne.n	8000ce8 <HAL_ADC_MspInit+0x80>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 8000c8a:	4b33      	ldr	r3, [pc, #204]	@ (8000d58 <HAL_ADC_MspInit+0xf0>)
 8000c8c:	681b      	ldr	r3, [r3, #0]
 8000c8e:	3301      	adds	r3, #1
 8000c90:	4a31      	ldr	r2, [pc, #196]	@ (8000d58 <HAL_ADC_MspInit+0xf0>)
 8000c92:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8000c94:	4b30      	ldr	r3, [pc, #192]	@ (8000d58 <HAL_ADC_MspInit+0xf0>)
 8000c96:	681b      	ldr	r3, [r3, #0]
 8000c98:	2b01      	cmp	r3, #1
 8000c9a:	d10b      	bne.n	8000cb4 <HAL_ADC_MspInit+0x4c>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8000c9c:	4b2f      	ldr	r3, [pc, #188]	@ (8000d5c <HAL_ADC_MspInit+0xf4>)
 8000c9e:	695b      	ldr	r3, [r3, #20]
 8000ca0:	4a2e      	ldr	r2, [pc, #184]	@ (8000d5c <HAL_ADC_MspInit+0xf4>)
 8000ca2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000ca6:	6153      	str	r3, [r2, #20]
 8000ca8:	4b2c      	ldr	r3, [pc, #176]	@ (8000d5c <HAL_ADC_MspInit+0xf4>)
 8000caa:	695b      	ldr	r3, [r3, #20]
 8000cac:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000cb0:	61bb      	str	r3, [r7, #24]
 8000cb2:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cb4:	4b29      	ldr	r3, [pc, #164]	@ (8000d5c <HAL_ADC_MspInit+0xf4>)
 8000cb6:	695b      	ldr	r3, [r3, #20]
 8000cb8:	4a28      	ldr	r2, [pc, #160]	@ (8000d5c <HAL_ADC_MspInit+0xf4>)
 8000cba:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000cbe:	6153      	str	r3, [r2, #20]
 8000cc0:	4b26      	ldr	r3, [pc, #152]	@ (8000d5c <HAL_ADC_MspInit+0xf4>)
 8000cc2:	695b      	ldr	r3, [r3, #20]
 8000cc4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000cc8:	617b      	str	r3, [r7, #20]
 8000cca:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PA2     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000ccc:	2304      	movs	r3, #4
 8000cce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000cd0:	2303      	movs	r3, #3
 8000cd2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cd4:	2300      	movs	r3, #0
 8000cd6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cd8:	f107 031c 	add.w	r3, r7, #28
 8000cdc:	4619      	mov	r1, r3
 8000cde:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000ce2:	f001 fc77 	bl	80025d4 <HAL_GPIO_Init>
    /* USER CODE BEGIN ADC2_MspInit 1 */

    /* USER CODE END ADC2_MspInit 1 */
  }

}
 8000ce6:	e032      	b.n	8000d4e <HAL_ADC_MspInit+0xe6>
  else if(hadc->Instance==ADC2)
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	681b      	ldr	r3, [r3, #0]
 8000cec:	4a1c      	ldr	r2, [pc, #112]	@ (8000d60 <HAL_ADC_MspInit+0xf8>)
 8000cee:	4293      	cmp	r3, r2
 8000cf0:	d12d      	bne.n	8000d4e <HAL_ADC_MspInit+0xe6>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8000cf2:	4b19      	ldr	r3, [pc, #100]	@ (8000d58 <HAL_ADC_MspInit+0xf0>)
 8000cf4:	681b      	ldr	r3, [r3, #0]
 8000cf6:	3301      	adds	r3, #1
 8000cf8:	4a17      	ldr	r2, [pc, #92]	@ (8000d58 <HAL_ADC_MspInit+0xf0>)
 8000cfa:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8000cfc:	4b16      	ldr	r3, [pc, #88]	@ (8000d58 <HAL_ADC_MspInit+0xf0>)
 8000cfe:	681b      	ldr	r3, [r3, #0]
 8000d00:	2b01      	cmp	r3, #1
 8000d02:	d10b      	bne.n	8000d1c <HAL_ADC_MspInit+0xb4>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8000d04:	4b15      	ldr	r3, [pc, #84]	@ (8000d5c <HAL_ADC_MspInit+0xf4>)
 8000d06:	695b      	ldr	r3, [r3, #20]
 8000d08:	4a14      	ldr	r2, [pc, #80]	@ (8000d5c <HAL_ADC_MspInit+0xf4>)
 8000d0a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000d0e:	6153      	str	r3, [r2, #20]
 8000d10:	4b12      	ldr	r3, [pc, #72]	@ (8000d5c <HAL_ADC_MspInit+0xf4>)
 8000d12:	695b      	ldr	r3, [r3, #20]
 8000d14:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000d18:	613b      	str	r3, [r7, #16]
 8000d1a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d1c:	4b0f      	ldr	r3, [pc, #60]	@ (8000d5c <HAL_ADC_MspInit+0xf4>)
 8000d1e:	695b      	ldr	r3, [r3, #20]
 8000d20:	4a0e      	ldr	r2, [pc, #56]	@ (8000d5c <HAL_ADC_MspInit+0xf4>)
 8000d22:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000d26:	6153      	str	r3, [r2, #20]
 8000d28:	4b0c      	ldr	r3, [pc, #48]	@ (8000d5c <HAL_ADC_MspInit+0xf4>)
 8000d2a:	695b      	ldr	r3, [r3, #20]
 8000d2c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000d30:	60fb      	str	r3, [r7, #12]
 8000d32:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000d34:	2310      	movs	r3, #16
 8000d36:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000d38:	2303      	movs	r3, #3
 8000d3a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d3c:	2300      	movs	r3, #0
 8000d3e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d40:	f107 031c 	add.w	r3, r7, #28
 8000d44:	4619      	mov	r1, r3
 8000d46:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000d4a:	f001 fc43 	bl	80025d4 <HAL_GPIO_Init>
}
 8000d4e:	bf00      	nop
 8000d50:	3730      	adds	r7, #48	@ 0x30
 8000d52:	46bd      	mov	sp, r7
 8000d54:	bd80      	pop	{r7, pc}
 8000d56:	bf00      	nop
 8000d58:	20000534 	.word	0x20000534
 8000d5c:	40021000 	.word	0x40021000
 8000d60:	50000100 	.word	0x50000100

08000d64 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000d64:	b580      	push	{r7, lr}
 8000d66:	b08a      	sub	sp, #40	@ 0x28
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d6c:	f107 0314 	add.w	r3, r7, #20
 8000d70:	2200      	movs	r2, #0
 8000d72:	601a      	str	r2, [r3, #0]
 8000d74:	605a      	str	r2, [r3, #4]
 8000d76:	609a      	str	r2, [r3, #8]
 8000d78:	60da      	str	r2, [r3, #12]
 8000d7a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	4a17      	ldr	r2, [pc, #92]	@ (8000de0 <HAL_I2C_MspInit+0x7c>)
 8000d82:	4293      	cmp	r3, r2
 8000d84:	d127      	bne.n	8000dd6 <HAL_I2C_MspInit+0x72>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d86:	4b17      	ldr	r3, [pc, #92]	@ (8000de4 <HAL_I2C_MspInit+0x80>)
 8000d88:	695b      	ldr	r3, [r3, #20]
 8000d8a:	4a16      	ldr	r2, [pc, #88]	@ (8000de4 <HAL_I2C_MspInit+0x80>)
 8000d8c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000d90:	6153      	str	r3, [r2, #20]
 8000d92:	4b14      	ldr	r3, [pc, #80]	@ (8000de4 <HAL_I2C_MspInit+0x80>)
 8000d94:	695b      	ldr	r3, [r3, #20]
 8000d96:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000d9a:	613b      	str	r3, [r7, #16]
 8000d9c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = I2C1_SCL_Pin|I2C1_SDA_Pin;
 8000d9e:	23c0      	movs	r3, #192	@ 0xc0
 8000da0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000da2:	2312      	movs	r3, #18
 8000da4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000da6:	2301      	movs	r3, #1
 8000da8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000daa:	2303      	movs	r3, #3
 8000dac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000dae:	2304      	movs	r3, #4
 8000db0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000db2:	f107 0314 	add.w	r3, r7, #20
 8000db6:	4619      	mov	r1, r3
 8000db8:	480b      	ldr	r0, [pc, #44]	@ (8000de8 <HAL_I2C_MspInit+0x84>)
 8000dba:	f001 fc0b 	bl	80025d4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000dbe:	4b09      	ldr	r3, [pc, #36]	@ (8000de4 <HAL_I2C_MspInit+0x80>)
 8000dc0:	69db      	ldr	r3, [r3, #28]
 8000dc2:	4a08      	ldr	r2, [pc, #32]	@ (8000de4 <HAL_I2C_MspInit+0x80>)
 8000dc4:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000dc8:	61d3      	str	r3, [r2, #28]
 8000dca:	4b06      	ldr	r3, [pc, #24]	@ (8000de4 <HAL_I2C_MspInit+0x80>)
 8000dcc:	69db      	ldr	r3, [r3, #28]
 8000dce:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000dd2:	60fb      	str	r3, [r7, #12]
 8000dd4:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 8000dd6:	bf00      	nop
 8000dd8:	3728      	adds	r7, #40	@ 0x28
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	bd80      	pop	{r7, pc}
 8000dde:	bf00      	nop
 8000de0:	40005400 	.word	0x40005400
 8000de4:	40021000 	.word	0x40021000
 8000de8:	48000400 	.word	0x48000400

08000dec <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000dec:	b580      	push	{r7, lr}
 8000dee:	b08a      	sub	sp, #40	@ 0x28
 8000df0:	af00      	add	r7, sp, #0
 8000df2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000df4:	f107 0314 	add.w	r3, r7, #20
 8000df8:	2200      	movs	r2, #0
 8000dfa:	601a      	str	r2, [r3, #0]
 8000dfc:	605a      	str	r2, [r3, #4]
 8000dfe:	609a      	str	r2, [r3, #8]
 8000e00:	60da      	str	r2, [r3, #12]
 8000e02:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	4a17      	ldr	r2, [pc, #92]	@ (8000e68 <HAL_SPI_MspInit+0x7c>)
 8000e0a:	4293      	cmp	r3, r2
 8000e0c:	d128      	bne.n	8000e60 <HAL_SPI_MspInit+0x74>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000e0e:	4b17      	ldr	r3, [pc, #92]	@ (8000e6c <HAL_SPI_MspInit+0x80>)
 8000e10:	699b      	ldr	r3, [r3, #24]
 8000e12:	4a16      	ldr	r2, [pc, #88]	@ (8000e6c <HAL_SPI_MspInit+0x80>)
 8000e14:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000e18:	6193      	str	r3, [r2, #24]
 8000e1a:	4b14      	ldr	r3, [pc, #80]	@ (8000e6c <HAL_SPI_MspInit+0x80>)
 8000e1c:	699b      	ldr	r3, [r3, #24]
 8000e1e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000e22:	613b      	str	r3, [r7, #16]
 8000e24:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e26:	4b11      	ldr	r3, [pc, #68]	@ (8000e6c <HAL_SPI_MspInit+0x80>)
 8000e28:	695b      	ldr	r3, [r3, #20]
 8000e2a:	4a10      	ldr	r2, [pc, #64]	@ (8000e6c <HAL_SPI_MspInit+0x80>)
 8000e2c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000e30:	6153      	str	r3, [r2, #20]
 8000e32:	4b0e      	ldr	r3, [pc, #56]	@ (8000e6c <HAL_SPI_MspInit+0x80>)
 8000e34:	695b      	ldr	r3, [r3, #20]
 8000e36:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000e3a:	60fb      	str	r3, [r7, #12]
 8000e3c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MISOA7_Pin;
 8000e3e:	23e0      	movs	r3, #224	@ 0xe0
 8000e40:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e42:	2302      	movs	r3, #2
 8000e44:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e46:	2300      	movs	r3, #0
 8000e48:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000e4a:	2303      	movs	r3, #3
 8000e4c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000e4e:	2305      	movs	r3, #5
 8000e50:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e52:	f107 0314 	add.w	r3, r7, #20
 8000e56:	4619      	mov	r1, r3
 8000e58:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000e5c:	f001 fbba 	bl	80025d4 <HAL_GPIO_Init>

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 8000e60:	bf00      	nop
 8000e62:	3728      	adds	r7, #40	@ 0x28
 8000e64:	46bd      	mov	sp, r7
 8000e66:	bd80      	pop	{r7, pc}
 8000e68:	40013000 	.word	0x40013000
 8000e6c:	40021000 	.word	0x40021000

08000e70 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000e70:	b580      	push	{r7, lr}
 8000e72:	b08a      	sub	sp, #40	@ 0x28
 8000e74:	af00      	add	r7, sp, #0
 8000e76:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e78:	f107 0314 	add.w	r3, r7, #20
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	601a      	str	r2, [r3, #0]
 8000e80:	605a      	str	r2, [r3, #4]
 8000e82:	609a      	str	r2, [r3, #8]
 8000e84:	60da      	str	r2, [r3, #12]
 8000e86:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	4a1c      	ldr	r2, [pc, #112]	@ (8000f00 <HAL_TIM_Base_MspInit+0x90>)
 8000e8e:	4293      	cmp	r3, r2
 8000e90:	d131      	bne.n	8000ef6 <HAL_TIM_Base_MspInit+0x86>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000e92:	4b1c      	ldr	r3, [pc, #112]	@ (8000f04 <HAL_TIM_Base_MspInit+0x94>)
 8000e94:	699b      	ldr	r3, [r3, #24]
 8000e96:	4a1b      	ldr	r2, [pc, #108]	@ (8000f04 <HAL_TIM_Base_MspInit+0x94>)
 8000e98:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000e9c:	6193      	str	r3, [r2, #24]
 8000e9e:	4b19      	ldr	r3, [pc, #100]	@ (8000f04 <HAL_TIM_Base_MspInit+0x94>)
 8000ea0:	699b      	ldr	r3, [r3, #24]
 8000ea2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8000ea6:	613b      	str	r3, [r7, #16]
 8000ea8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000eaa:	4b16      	ldr	r3, [pc, #88]	@ (8000f04 <HAL_TIM_Base_MspInit+0x94>)
 8000eac:	695b      	ldr	r3, [r3, #20]
 8000eae:	4a15      	ldr	r2, [pc, #84]	@ (8000f04 <HAL_TIM_Base_MspInit+0x94>)
 8000eb0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000eb4:	6153      	str	r3, [r2, #20]
 8000eb6:	4b13      	ldr	r3, [pc, #76]	@ (8000f04 <HAL_TIM_Base_MspInit+0x94>)
 8000eb8:	695b      	ldr	r3, [r3, #20]
 8000eba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000ebe:	60fb      	str	r3, [r7, #12]
 8000ec0:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000ec2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000ec6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ec8:	2302      	movs	r3, #2
 8000eca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ecc:	2300      	movs	r3, #0
 8000ece:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ed0:	2300      	movs	r3, #0
 8000ed2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8000ed4:	2306      	movs	r3, #6
 8000ed6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ed8:	f107 0314 	add.w	r3, r7, #20
 8000edc:	4619      	mov	r1, r3
 8000ede:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000ee2:	f001 fb77 	bl	80025d4 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	2100      	movs	r1, #0
 8000eea:	201b      	movs	r0, #27
 8000eec:	f001 fb3b 	bl	8002566 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8000ef0:	201b      	movs	r0, #27
 8000ef2:	f001 fb54 	bl	800259e <HAL_NVIC_EnableIRQ>

    /* USER CODE END TIM1_MspInit 1 */

  }

}
 8000ef6:	bf00      	nop
 8000ef8:	3728      	adds	r7, #40	@ 0x28
 8000efa:	46bd      	mov	sp, r7
 8000efc:	bd80      	pop	{r7, pc}
 8000efe:	bf00      	nop
 8000f00:	40012c00 	.word	0x40012c00
 8000f04:	40021000 	.word	0x40021000

08000f08 <HAL_TIM_PWM_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_pwm: TIM_PWM handle pointer
  * @retval None
  */
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	b084      	sub	sp, #16
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000f18:	d113      	bne.n	8000f42 <HAL_TIM_PWM_MspInit+0x3a>
  {
    /* USER CODE BEGIN TIM2_MspInit 0 */

    /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000f1a:	4b0c      	ldr	r3, [pc, #48]	@ (8000f4c <HAL_TIM_PWM_MspInit+0x44>)
 8000f1c:	69db      	ldr	r3, [r3, #28]
 8000f1e:	4a0b      	ldr	r2, [pc, #44]	@ (8000f4c <HAL_TIM_PWM_MspInit+0x44>)
 8000f20:	f043 0301 	orr.w	r3, r3, #1
 8000f24:	61d3      	str	r3, [r2, #28]
 8000f26:	4b09      	ldr	r3, [pc, #36]	@ (8000f4c <HAL_TIM_PWM_MspInit+0x44>)
 8000f28:	69db      	ldr	r3, [r3, #28]
 8000f2a:	f003 0301 	and.w	r3, r3, #1
 8000f2e:	60fb      	str	r3, [r7, #12]
 8000f30:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000f32:	2200      	movs	r2, #0
 8000f34:	2100      	movs	r1, #0
 8000f36:	201c      	movs	r0, #28
 8000f38:	f001 fb15 	bl	8002566 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000f3c:	201c      	movs	r0, #28
 8000f3e:	f001 fb2e 	bl	800259e <HAL_NVIC_EnableIRQ>

    /* USER CODE END TIM2_MspInit 1 */

  }

}
 8000f42:	bf00      	nop
 8000f44:	3710      	adds	r7, #16
 8000f46:	46bd      	mov	sp, r7
 8000f48:	bd80      	pop	{r7, pc}
 8000f4a:	bf00      	nop
 8000f4c:	40021000 	.word	0x40021000

08000f50 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	b088      	sub	sp, #32
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f58:	f107 030c 	add.w	r3, r7, #12
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	601a      	str	r2, [r3, #0]
 8000f60:	605a      	str	r2, [r3, #4]
 8000f62:	609a      	str	r2, [r3, #8]
 8000f64:	60da      	str	r2, [r3, #12]
 8000f66:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000f70:	d11d      	bne.n	8000fae <HAL_TIM_MspPostInit+0x5e>
  {
    /* USER CODE BEGIN TIM2_MspPostInit 0 */

    /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f72:	4b11      	ldr	r3, [pc, #68]	@ (8000fb8 <HAL_TIM_MspPostInit+0x68>)
 8000f74:	695b      	ldr	r3, [r3, #20]
 8000f76:	4a10      	ldr	r2, [pc, #64]	@ (8000fb8 <HAL_TIM_MspPostInit+0x68>)
 8000f78:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000f7c:	6153      	str	r3, [r2, #20]
 8000f7e:	4b0e      	ldr	r3, [pc, #56]	@ (8000fb8 <HAL_TIM_MspPostInit+0x68>)
 8000f80:	695b      	ldr	r3, [r3, #20]
 8000f82:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000f86:	60bb      	str	r3, [r7, #8]
 8000f88:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA1     ------> TIM2_CH2
    PA15     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_15;
 8000f8a:	f248 0302 	movw	r3, #32770	@ 0x8002
 8000f8e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f90:	2302      	movs	r3, #2
 8000f92:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f94:	2300      	movs	r3, #0
 8000f96:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f98:	2300      	movs	r3, #0
 8000f9a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000f9c:	2301      	movs	r3, #1
 8000f9e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fa0:	f107 030c 	add.w	r3, r7, #12
 8000fa4:	4619      	mov	r1, r3
 8000fa6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000faa:	f001 fb13 	bl	80025d4 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM2_MspPostInit 1 */

    /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8000fae:	bf00      	nop
 8000fb0:	3720      	adds	r7, #32
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	bd80      	pop	{r7, pc}
 8000fb6:	bf00      	nop
 8000fb8:	40021000 	.word	0x40021000

08000fbc <HAL_PCD_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hpcd: PCD handle pointer
  * @retval None
  */
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	b08a      	sub	sp, #40	@ 0x28
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fc4:	f107 0314 	add.w	r3, r7, #20
 8000fc8:	2200      	movs	r2, #0
 8000fca:	601a      	str	r2, [r3, #0]
 8000fcc:	605a      	str	r2, [r3, #4]
 8000fce:	609a      	str	r2, [r3, #8]
 8000fd0:	60da      	str	r2, [r3, #12]
 8000fd2:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB)
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	4a18      	ldr	r2, [pc, #96]	@ (800103c <HAL_PCD_MspInit+0x80>)
 8000fda:	4293      	cmp	r3, r2
 8000fdc:	d129      	bne.n	8001032 <HAL_PCD_MspInit+0x76>
  {
    /* USER CODE BEGIN USB_MspInit 0 */

    /* USER CODE END USB_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fde:	4b18      	ldr	r3, [pc, #96]	@ (8001040 <HAL_PCD_MspInit+0x84>)
 8000fe0:	695b      	ldr	r3, [r3, #20]
 8000fe2:	4a17      	ldr	r2, [pc, #92]	@ (8001040 <HAL_PCD_MspInit+0x84>)
 8000fe4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000fe8:	6153      	str	r3, [r2, #20]
 8000fea:	4b15      	ldr	r3, [pc, #84]	@ (8001040 <HAL_PCD_MspInit+0x84>)
 8000fec:	695b      	ldr	r3, [r3, #20]
 8000fee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000ff2:	613b      	str	r3, [r7, #16]
 8000ff4:	693b      	ldr	r3, [r7, #16]
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = DM_Pin|DP_Pin;
 8000ff6:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8000ffa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ffc:	2302      	movs	r3, #2
 8000ffe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001000:	2300      	movs	r3, #0
 8001002:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001004:	2303      	movs	r3, #3
 8001006:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF14_USB;
 8001008:	230e      	movs	r3, #14
 800100a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800100c:	f107 0314 	add.w	r3, r7, #20
 8001010:	4619      	mov	r1, r3
 8001012:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001016:	f001 fadd 	bl	80025d4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800101a:	4b09      	ldr	r3, [pc, #36]	@ (8001040 <HAL_PCD_MspInit+0x84>)
 800101c:	69db      	ldr	r3, [r3, #28]
 800101e:	4a08      	ldr	r2, [pc, #32]	@ (8001040 <HAL_PCD_MspInit+0x84>)
 8001020:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8001024:	61d3      	str	r3, [r2, #28]
 8001026:	4b06      	ldr	r3, [pc, #24]	@ (8001040 <HAL_PCD_MspInit+0x84>)
 8001028:	69db      	ldr	r3, [r3, #28]
 800102a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800102e:	60fb      	str	r3, [r7, #12]
 8001030:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END USB_MspInit 1 */

  }

}
 8001032:	bf00      	nop
 8001034:	3728      	adds	r7, #40	@ 0x28
 8001036:	46bd      	mov	sp, r7
 8001038:	bd80      	pop	{r7, pc}
 800103a:	bf00      	nop
 800103c:	40005c00 	.word	0x40005c00
 8001040:	40021000 	.word	0x40021000

08001044 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001044:	b480      	push	{r7}
 8001046:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001048:	bf00      	nop
 800104a:	e7fd      	b.n	8001048 <NMI_Handler+0x4>

0800104c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800104c:	b480      	push	{r7}
 800104e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001050:	bf00      	nop
 8001052:	e7fd      	b.n	8001050 <HardFault_Handler+0x4>

08001054 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001054:	b480      	push	{r7}
 8001056:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001058:	bf00      	nop
 800105a:	e7fd      	b.n	8001058 <MemManage_Handler+0x4>

0800105c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800105c:	b480      	push	{r7}
 800105e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001060:	bf00      	nop
 8001062:	e7fd      	b.n	8001060 <BusFault_Handler+0x4>

08001064 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001064:	b480      	push	{r7}
 8001066:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001068:	bf00      	nop
 800106a:	e7fd      	b.n	8001068 <UsageFault_Handler+0x4>

0800106c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800106c:	b480      	push	{r7}
 800106e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001070:	bf00      	nop
 8001072:	46bd      	mov	sp, r7
 8001074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001078:	4770      	bx	lr

0800107a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800107a:	b480      	push	{r7}
 800107c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800107e:	bf00      	nop
 8001080:	46bd      	mov	sp, r7
 8001082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001086:	4770      	bx	lr

08001088 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001088:	b480      	push	{r7}
 800108a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800108c:	bf00      	nop
 800108e:	46bd      	mov	sp, r7
 8001090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001094:	4770      	bx	lr

08001096 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001096:	b580      	push	{r7, lr}
 8001098:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800109a:	f000 f899 	bl	80011d0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800109e:	bf00      	nop
 80010a0:	bd80      	pop	{r7, pc}
	...

080010a4 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80010a8:	4802      	ldr	r0, [pc, #8]	@ (80010b4 <TIM1_CC_IRQHandler+0x10>)
 80010aa:	f004 f935 	bl	8005318 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 80010ae:	bf00      	nop
 80010b0:	bd80      	pop	{r7, pc}
 80010b2:	bf00      	nop
 80010b4:	200001b8 	.word	0x200001b8

080010b8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80010bc:	4802      	ldr	r0, [pc, #8]	@ (80010c8 <TIM2_IRQHandler+0x10>)
 80010be:	f004 f92b 	bl	8005318 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80010c2:	bf00      	nop
 80010c4:	bd80      	pop	{r7, pc}
 80010c6:	bf00      	nop
 80010c8:	20000204 	.word	0x20000204

080010cc <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80010cc:	b480      	push	{r7}
 80010ce:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80010d0:	4b06      	ldr	r3, [pc, #24]	@ (80010ec <SystemInit+0x20>)
 80010d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80010d6:	4a05      	ldr	r2, [pc, #20]	@ (80010ec <SystemInit+0x20>)
 80010d8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80010dc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80010e0:	bf00      	nop
 80010e2:	46bd      	mov	sp, r7
 80010e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e8:	4770      	bx	lr
 80010ea:	bf00      	nop
 80010ec:	e000ed00 	.word	0xe000ed00

080010f0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80010f0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001128 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 80010f4:	f7ff ffea 	bl	80010cc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80010f8:	480c      	ldr	r0, [pc, #48]	@ (800112c <LoopForever+0x6>)
  ldr r1, =_edata
 80010fa:	490d      	ldr	r1, [pc, #52]	@ (8001130 <LoopForever+0xa>)
  ldr r2, =_sidata
 80010fc:	4a0d      	ldr	r2, [pc, #52]	@ (8001134 <LoopForever+0xe>)
  movs r3, #0
 80010fe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001100:	e002      	b.n	8001108 <LoopCopyDataInit>

08001102 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001102:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001104:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001106:	3304      	adds	r3, #4

08001108 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001108:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800110a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800110c:	d3f9      	bcc.n	8001102 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800110e:	4a0a      	ldr	r2, [pc, #40]	@ (8001138 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001110:	4c0a      	ldr	r4, [pc, #40]	@ (800113c <LoopForever+0x16>)
  movs r3, #0
 8001112:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001114:	e001      	b.n	800111a <LoopFillZerobss>

08001116 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001116:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001118:	3204      	adds	r2, #4

0800111a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800111a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800111c:	d3fb      	bcc.n	8001116 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800111e:	f005 fb13 	bl	8006748 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001122:	f7ff f8cf 	bl	80002c4 <main>

08001126 <LoopForever>:

LoopForever:
    b LoopForever
 8001126:	e7fe      	b.n	8001126 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001128:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 800112c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001130:	20000044 	.word	0x20000044
  ldr r2, =_sidata
 8001134:	080067f8 	.word	0x080067f8
  ldr r2, =_sbss
 8001138:	20000044 	.word	0x20000044
  ldr r4, =_ebss
 800113c:	2000053c 	.word	0x2000053c

08001140 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001140:	e7fe      	b.n	8001140 <ADC1_2_IRQHandler>
	...

08001144 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001148:	4b08      	ldr	r3, [pc, #32]	@ (800116c <HAL_Init+0x28>)
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	4a07      	ldr	r2, [pc, #28]	@ (800116c <HAL_Init+0x28>)
 800114e:	f043 0310 	orr.w	r3, r3, #16
 8001152:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001154:	2003      	movs	r0, #3
 8001156:	f001 f9fb 	bl	8002550 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800115a:	2000      	movs	r0, #0
 800115c:	f000 f808 	bl	8001170 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001160:	f7ff fd5e 	bl	8000c20 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001164:	2300      	movs	r3, #0
}
 8001166:	4618      	mov	r0, r3
 8001168:	bd80      	pop	{r7, pc}
 800116a:	bf00      	nop
 800116c:	40022000 	.word	0x40022000

08001170 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001170:	b580      	push	{r7, lr}
 8001172:	b082      	sub	sp, #8
 8001174:	af00      	add	r7, sp, #0
 8001176:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001178:	4b12      	ldr	r3, [pc, #72]	@ (80011c4 <HAL_InitTick+0x54>)
 800117a:	681a      	ldr	r2, [r3, #0]
 800117c:	4b12      	ldr	r3, [pc, #72]	@ (80011c8 <HAL_InitTick+0x58>)
 800117e:	781b      	ldrb	r3, [r3, #0]
 8001180:	4619      	mov	r1, r3
 8001182:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001186:	fbb3 f3f1 	udiv	r3, r3, r1
 800118a:	fbb2 f3f3 	udiv	r3, r2, r3
 800118e:	4618      	mov	r0, r3
 8001190:	f001 fa13 	bl	80025ba <HAL_SYSTICK_Config>
 8001194:	4603      	mov	r3, r0
 8001196:	2b00      	cmp	r3, #0
 8001198:	d001      	beq.n	800119e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800119a:	2301      	movs	r3, #1
 800119c:	e00e      	b.n	80011bc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	2b0f      	cmp	r3, #15
 80011a2:	d80a      	bhi.n	80011ba <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80011a4:	2200      	movs	r2, #0
 80011a6:	6879      	ldr	r1, [r7, #4]
 80011a8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80011ac:	f001 f9db 	bl	8002566 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80011b0:	4a06      	ldr	r2, [pc, #24]	@ (80011cc <HAL_InitTick+0x5c>)
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 80011b6:	2300      	movs	r3, #0
 80011b8:	e000      	b.n	80011bc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80011ba:	2301      	movs	r3, #1
}
 80011bc:	4618      	mov	r0, r3
 80011be:	3708      	adds	r7, #8
 80011c0:	46bd      	mov	sp, r7
 80011c2:	bd80      	pop	{r7, pc}
 80011c4:	20000038 	.word	0x20000038
 80011c8:	20000040 	.word	0x20000040
 80011cc:	2000003c 	.word	0x2000003c

080011d0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80011d0:	b480      	push	{r7}
 80011d2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80011d4:	4b06      	ldr	r3, [pc, #24]	@ (80011f0 <HAL_IncTick+0x20>)
 80011d6:	781b      	ldrb	r3, [r3, #0]
 80011d8:	461a      	mov	r2, r3
 80011da:	4b06      	ldr	r3, [pc, #24]	@ (80011f4 <HAL_IncTick+0x24>)
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	4413      	add	r3, r2
 80011e0:	4a04      	ldr	r2, [pc, #16]	@ (80011f4 <HAL_IncTick+0x24>)
 80011e2:	6013      	str	r3, [r2, #0]
}
 80011e4:	bf00      	nop
 80011e6:	46bd      	mov	sp, r7
 80011e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ec:	4770      	bx	lr
 80011ee:	bf00      	nop
 80011f0:	20000040 	.word	0x20000040
 80011f4:	20000538 	.word	0x20000538

080011f8 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80011f8:	b480      	push	{r7}
 80011fa:	af00      	add	r7, sp, #0
  return uwTick;  
 80011fc:	4b03      	ldr	r3, [pc, #12]	@ (800120c <HAL_GetTick+0x14>)
 80011fe:	681b      	ldr	r3, [r3, #0]
}
 8001200:	4618      	mov	r0, r3
 8001202:	46bd      	mov	sp, r7
 8001204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001208:	4770      	bx	lr
 800120a:	bf00      	nop
 800120c:	20000538 	.word	0x20000538

08001210 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001210:	b580      	push	{r7, lr}
 8001212:	b084      	sub	sp, #16
 8001214:	af00      	add	r7, sp, #0
 8001216:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001218:	f7ff ffee 	bl	80011f8 <HAL_GetTick>
 800121c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001222:	68fb      	ldr	r3, [r7, #12]
 8001224:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001228:	d005      	beq.n	8001236 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800122a:	4b0a      	ldr	r3, [pc, #40]	@ (8001254 <HAL_Delay+0x44>)
 800122c:	781b      	ldrb	r3, [r3, #0]
 800122e:	461a      	mov	r2, r3
 8001230:	68fb      	ldr	r3, [r7, #12]
 8001232:	4413      	add	r3, r2
 8001234:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8001236:	bf00      	nop
 8001238:	f7ff ffde 	bl	80011f8 <HAL_GetTick>
 800123c:	4602      	mov	r2, r0
 800123e:	68bb      	ldr	r3, [r7, #8]
 8001240:	1ad3      	subs	r3, r2, r3
 8001242:	68fa      	ldr	r2, [r7, #12]
 8001244:	429a      	cmp	r2, r3
 8001246:	d8f7      	bhi.n	8001238 <HAL_Delay+0x28>
  {
  }
}
 8001248:	bf00      	nop
 800124a:	bf00      	nop
 800124c:	3710      	adds	r7, #16
 800124e:	46bd      	mov	sp, r7
 8001250:	bd80      	pop	{r7, pc}
 8001252:	bf00      	nop
 8001254:	20000040 	.word	0x20000040

08001258 <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001258:	b580      	push	{r7, lr}
 800125a:	b09a      	sub	sp, #104	@ 0x68
 800125c:	af00      	add	r7, sp, #0
 800125e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001260:	2300      	movs	r3, #0
 8001262:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 8001266:	2300      	movs	r3, #0
 8001268:	663b      	str	r3, [r7, #96]	@ 0x60
  __IO uint32_t wait_loop_index = 0U;
 800126a:	2300      	movs	r3, #0
 800126c:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	2b00      	cmp	r3, #0
 8001272:	d101      	bne.n	8001278 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8001274:	2301      	movs	r3, #1
 8001276:	e1c9      	b.n	800160c <HAL_ADC_Init+0x3b4>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	691b      	ldr	r3, [r3, #16]
 800127c:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001282:	f003 0310 	and.w	r3, r3, #16
 8001286:	2b00      	cmp	r3, #0
 8001288:	d176      	bne.n	8001378 <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800128e:	2b00      	cmp	r3, #0
 8001290:	d152      	bne.n	8001338 <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	2200      	movs	r2, #0
 8001296:	645a      	str	r2, [r3, #68]	@ 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	2200      	movs	r2, #0
 800129c:	64da      	str	r2, [r3, #76]	@ 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	2200      	movs	r2, #0
 80012a2:	649a      	str	r2, [r3, #72]	@ 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	2200      	movs	r2, #0
 80012a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80012ac:	6878      	ldr	r0, [r7, #4]
 80012ae:	f7ff fcdb 	bl	8000c68 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	689b      	ldr	r3, [r3, #8]
 80012b8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d13b      	bne.n	8001338 <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 80012c0:	6878      	ldr	r0, [r7, #4]
 80012c2:	f001 f80f 	bl	80022e4 <ADC_Disable>
 80012c6:	4603      	mov	r3, r0
 80012c8:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012d0:	f003 0310 	and.w	r3, r3, #16
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d12f      	bne.n	8001338 <HAL_ADC_Init+0xe0>
 80012d8:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d12b      	bne.n	8001338 <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012e4:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80012e8:	f023 0302 	bic.w	r3, r3, #2
 80012ec:	f043 0202 	orr.w	r2, r3, #2
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	641a      	str	r2, [r3, #64]	@ 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	689a      	ldr	r2, [r3, #8]
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001302:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	689a      	ldr	r2, [r3, #8]
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8001312:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001314:	4b86      	ldr	r3, [pc, #536]	@ (8001530 <HAL_ADC_Init+0x2d8>)
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	4a86      	ldr	r2, [pc, #536]	@ (8001534 <HAL_ADC_Init+0x2dc>)
 800131a:	fba2 2303 	umull	r2, r3, r2, r3
 800131e:	0c9a      	lsrs	r2, r3, #18
 8001320:	4613      	mov	r3, r2
 8001322:	009b      	lsls	r3, r3, #2
 8001324:	4413      	add	r3, r2
 8001326:	005b      	lsls	r3, r3, #1
 8001328:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800132a:	e002      	b.n	8001332 <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 800132c:	68bb      	ldr	r3, [r7, #8]
 800132e:	3b01      	subs	r3, #1
 8001330:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001332:	68bb      	ldr	r3, [r7, #8]
 8001334:	2b00      	cmp	r3, #0
 8001336:	d1f9      	bne.n	800132c <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	689b      	ldr	r3, [r3, #8]
 800133e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001342:	2b00      	cmp	r3, #0
 8001344:	d007      	beq.n	8001356 <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	689b      	ldr	r3, [r3, #8]
 800134c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8001350:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001354:	d110      	bne.n	8001378 <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800135a:	f023 0312 	bic.w	r3, r3, #18
 800135e:	f043 0210 	orr.w	r2, r3, #16
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	641a      	str	r2, [r3, #64]	@ 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800136a:	f043 0201 	orr.w	r2, r3, #1
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	645a      	str	r2, [r3, #68]	@ 0x44
      
      tmp_hal_status = HAL_ERROR;
 8001372:	2301      	movs	r3, #1
 8001374:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800137c:	f003 0310 	and.w	r3, r3, #16
 8001380:	2b00      	cmp	r3, #0
 8001382:	f040 8136 	bne.w	80015f2 <HAL_ADC_Init+0x39a>
 8001386:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800138a:	2b00      	cmp	r3, #0
 800138c:	f040 8131 	bne.w	80015f2 <HAL_ADC_Init+0x39a>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	689b      	ldr	r3, [r3, #8]
 8001396:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 800139a:	2b00      	cmp	r3, #0
 800139c:	f040 8129 	bne.w	80015f2 <HAL_ADC_Init+0x39a>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013a4:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 80013a8:	f043 0202 	orr.w	r2, r3, #2
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	641a      	str	r2, [r3, #64]	@ 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80013b8:	d004      	beq.n	80013c4 <HAL_ADC_Init+0x16c>
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	4a5e      	ldr	r2, [pc, #376]	@ (8001538 <HAL_ADC_Init+0x2e0>)
 80013c0:	4293      	cmp	r3, r2
 80013c2:	d101      	bne.n	80013c8 <HAL_ADC_Init+0x170>
 80013c4:	4b5d      	ldr	r3, [pc, #372]	@ (800153c <HAL_ADC_Init+0x2e4>)
 80013c6:	e000      	b.n	80013ca <HAL_ADC_Init+0x172>
 80013c8:	4b5d      	ldr	r3, [pc, #372]	@ (8001540 <HAL_ADC_Init+0x2e8>)
 80013ca:	65fb      	str	r3, [r7, #92]	@ 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80013d4:	d102      	bne.n	80013dc <HAL_ADC_Init+0x184>
 80013d6:	4b58      	ldr	r3, [pc, #352]	@ (8001538 <HAL_ADC_Init+0x2e0>)
 80013d8:	60fb      	str	r3, [r7, #12]
 80013da:	e01a      	b.n	8001412 <HAL_ADC_Init+0x1ba>
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	4a55      	ldr	r2, [pc, #340]	@ (8001538 <HAL_ADC_Init+0x2e0>)
 80013e2:	4293      	cmp	r3, r2
 80013e4:	d103      	bne.n	80013ee <HAL_ADC_Init+0x196>
 80013e6:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80013ea:	60fb      	str	r3, [r7, #12]
 80013ec:	e011      	b.n	8001412 <HAL_ADC_Init+0x1ba>
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	4a54      	ldr	r2, [pc, #336]	@ (8001544 <HAL_ADC_Init+0x2ec>)
 80013f4:	4293      	cmp	r3, r2
 80013f6:	d102      	bne.n	80013fe <HAL_ADC_Init+0x1a6>
 80013f8:	4b53      	ldr	r3, [pc, #332]	@ (8001548 <HAL_ADC_Init+0x2f0>)
 80013fa:	60fb      	str	r3, [r7, #12]
 80013fc:	e009      	b.n	8001412 <HAL_ADC_Init+0x1ba>
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	4a51      	ldr	r2, [pc, #324]	@ (8001548 <HAL_ADC_Init+0x2f0>)
 8001404:	4293      	cmp	r3, r2
 8001406:	d102      	bne.n	800140e <HAL_ADC_Init+0x1b6>
 8001408:	4b4e      	ldr	r3, [pc, #312]	@ (8001544 <HAL_ADC_Init+0x2ec>)
 800140a:	60fb      	str	r3, [r7, #12]
 800140c:	e001      	b.n	8001412 <HAL_ADC_Init+0x1ba>
 800140e:	2300      	movs	r3, #0
 8001410:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	689b      	ldr	r3, [r3, #8]
 8001418:	f003 0303 	and.w	r3, r3, #3
 800141c:	2b01      	cmp	r3, #1
 800141e:	d108      	bne.n	8001432 <HAL_ADC_Init+0x1da>
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	f003 0301 	and.w	r3, r3, #1
 800142a:	2b01      	cmp	r3, #1
 800142c:	d101      	bne.n	8001432 <HAL_ADC_Init+0x1da>
 800142e:	2301      	movs	r3, #1
 8001430:	e000      	b.n	8001434 <HAL_ADC_Init+0x1dc>
 8001432:	2300      	movs	r3, #0
 8001434:	2b00      	cmp	r3, #0
 8001436:	d11c      	bne.n	8001472 <HAL_ADC_Init+0x21a>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001438:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 800143a:	2b00      	cmp	r3, #0
 800143c:	d010      	beq.n	8001460 <HAL_ADC_Init+0x208>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 800143e:	68fb      	ldr	r3, [r7, #12]
 8001440:	689b      	ldr	r3, [r3, #8]
 8001442:	f003 0303 	and.w	r3, r3, #3
 8001446:	2b01      	cmp	r3, #1
 8001448:	d107      	bne.n	800145a <HAL_ADC_Init+0x202>
 800144a:	68fb      	ldr	r3, [r7, #12]
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	f003 0301 	and.w	r3, r3, #1
 8001452:	2b01      	cmp	r3, #1
 8001454:	d101      	bne.n	800145a <HAL_ADC_Init+0x202>
 8001456:	2301      	movs	r3, #1
 8001458:	e000      	b.n	800145c <HAL_ADC_Init+0x204>
 800145a:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 800145c:	2b00      	cmp	r3, #0
 800145e:	d108      	bne.n	8001472 <HAL_ADC_Init+0x21a>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 8001460:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001462:	689b      	ldr	r3, [r3, #8]
 8001464:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	685b      	ldr	r3, [r3, #4]
 800146c:	431a      	orrs	r2, r3
 800146e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001470:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	7e5b      	ldrb	r3, [r3, #25]
 8001476:	035b      	lsls	r3, r3, #13
 8001478:	687a      	ldr	r2, [r7, #4]
 800147a:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800147c:	2a01      	cmp	r2, #1
 800147e:	d002      	beq.n	8001486 <HAL_ADC_Init+0x22e>
 8001480:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001484:	e000      	b.n	8001488 <HAL_ADC_Init+0x230>
 8001486:	2200      	movs	r2, #0
 8001488:	431a      	orrs	r2, r3
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	68db      	ldr	r3, [r3, #12]
 800148e:	431a      	orrs	r2, r3
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	689b      	ldr	r3, [r3, #8]
 8001494:	4313      	orrs	r3, r2
 8001496:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8001498:	4313      	orrs	r3, r2
 800149a:	663b      	str	r3, [r7, #96]	@ 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	f893 3020 	ldrb.w	r3, [r3, #32]
 80014a2:	2b01      	cmp	r3, #1
 80014a4:	d11b      	bne.n	80014de <HAL_ADC_Init+0x286>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	7e5b      	ldrb	r3, [r3, #25]
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d109      	bne.n	80014c2 <HAL_ADC_Init+0x26a>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80014b2:	3b01      	subs	r3, #1
 80014b4:	045a      	lsls	r2, r3, #17
 80014b6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80014b8:	4313      	orrs	r3, r2
 80014ba:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80014be:	663b      	str	r3, [r7, #96]	@ 0x60
 80014c0:	e00d      	b.n	80014de <HAL_ADC_Init+0x286>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014c6:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 80014ca:	f043 0220 	orr.w	r2, r3, #32
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	641a      	str	r2, [r3, #64]	@ 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80014d6:	f043 0201 	orr.w	r2, r3, #1
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	645a      	str	r2, [r3, #68]	@ 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80014e2:	2b01      	cmp	r3, #1
 80014e4:	d03a      	beq.n	800155c <HAL_ADC_Init+0x304>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	4a16      	ldr	r2, [pc, #88]	@ (8001544 <HAL_ADC_Init+0x2ec>)
 80014ec:	4293      	cmp	r3, r2
 80014ee:	d004      	beq.n	80014fa <HAL_ADC_Init+0x2a2>
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	4a14      	ldr	r2, [pc, #80]	@ (8001548 <HAL_ADC_Init+0x2f0>)
 80014f6:	4293      	cmp	r3, r2
 80014f8:	d128      	bne.n	800154c <HAL_ADC_Init+0x2f4>
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80014fe:	f5b3 7f30 	cmp.w	r3, #704	@ 0x2c0
 8001502:	d012      	beq.n	800152a <HAL_ADC_Init+0x2d2>
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001508:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800150c:	d00a      	beq.n	8001524 <HAL_ADC_Init+0x2cc>
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001512:	f5b3 7fe0 	cmp.w	r3, #448	@ 0x1c0
 8001516:	d002      	beq.n	800151e <HAL_ADC_Init+0x2c6>
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800151c:	e018      	b.n	8001550 <HAL_ADC_Init+0x2f8>
 800151e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001522:	e015      	b.n	8001550 <HAL_ADC_Init+0x2f8>
 8001524:	f44f 7330 	mov.w	r3, #704	@ 0x2c0
 8001528:	e012      	b.n	8001550 <HAL_ADC_Init+0x2f8>
 800152a:	f44f 73e0 	mov.w	r3, #448	@ 0x1c0
 800152e:	e00f      	b.n	8001550 <HAL_ADC_Init+0x2f8>
 8001530:	20000038 	.word	0x20000038
 8001534:	431bde83 	.word	0x431bde83
 8001538:	50000100 	.word	0x50000100
 800153c:	50000300 	.word	0x50000300
 8001540:	50000700 	.word	0x50000700
 8001544:	50000400 	.word	0x50000400
 8001548:	50000500 	.word	0x50000500
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001550:	687a      	ldr	r2, [r7, #4]
 8001552:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8001554:	4313      	orrs	r3, r2
 8001556:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8001558:	4313      	orrs	r3, r2
 800155a:	663b      	str	r3, [r7, #96]	@ 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	689b      	ldr	r3, [r3, #8]
 8001562:	f003 030c 	and.w	r3, r3, #12
 8001566:	2b00      	cmp	r3, #0
 8001568:	d114      	bne.n	8001594 <HAL_ADC_Init+0x33c>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	68db      	ldr	r3, [r3, #12]
 8001570:	687a      	ldr	r2, [r7, #4]
 8001572:	6812      	ldr	r2, [r2, #0]
 8001574:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8001578:	f023 0302 	bic.w	r3, r3, #2
 800157c:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	7e1b      	ldrb	r3, [r3, #24]
 8001582:	039a      	lsls	r2, r3, #14
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800158a:	005b      	lsls	r3, r3, #1
 800158c:	4313      	orrs	r3, r2
 800158e:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8001590:	4313      	orrs	r3, r2
 8001592:	663b      	str	r3, [r7, #96]	@ 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	68da      	ldr	r2, [r3, #12]
 800159a:	4b1e      	ldr	r3, [pc, #120]	@ (8001614 <HAL_ADC_Init+0x3bc>)
 800159c:	4013      	ands	r3, r2
 800159e:	687a      	ldr	r2, [r7, #4]
 80015a0:	6812      	ldr	r2, [r2, #0]
 80015a2:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 80015a4:	430b      	orrs	r3, r1
 80015a6:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	691b      	ldr	r3, [r3, #16]
 80015ac:	2b01      	cmp	r3, #1
 80015ae:	d10c      	bne.n	80015ca <HAL_ADC_Init+0x372>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015b6:	f023 010f 	bic.w	r1, r3, #15
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	69db      	ldr	r3, [r3, #28]
 80015be:	1e5a      	subs	r2, r3, #1
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	430a      	orrs	r2, r1
 80015c6:	631a      	str	r2, [r3, #48]	@ 0x30
 80015c8:	e007      	b.n	80015da <HAL_ADC_Init+0x382>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	f022 020f 	bic.w	r2, r2, #15
 80015d8:	631a      	str	r2, [r3, #48]	@ 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	2200      	movs	r2, #0
 80015de:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015e4:	f023 0303 	bic.w	r3, r3, #3
 80015e8:	f043 0201 	orr.w	r2, r3, #1
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	641a      	str	r2, [r3, #64]	@ 0x40
 80015f0:	e00a      	b.n	8001608 <HAL_ADC_Init+0x3b0>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015f6:	f023 0312 	bic.w	r3, r3, #18
 80015fa:	f043 0210 	orr.w	r2, r3, #16
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 8001602:	2301      	movs	r3, #1
 8001604:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 8001608:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
}
 800160c:	4618      	mov	r0, r3
 800160e:	3768      	adds	r7, #104	@ 0x68
 8001610:	46bd      	mov	sp, r7
 8001612:	bd80      	pop	{r7, pc}
 8001614:	fff0c007 	.word	0xfff0c007

08001618 <HAL_ADC_Start>:
  *         if ADC is master, ADC is enabled and multimode conversion is started.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001618:	b580      	push	{r7, lr}
 800161a:	b084      	sub	sp, #16
 800161c:	af00      	add	r7, sp, #0
 800161e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001620:	2300      	movs	r3, #0
 8001622:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	689b      	ldr	r3, [r3, #8]
 800162a:	f003 0304 	and.w	r3, r3, #4
 800162e:	2b00      	cmp	r3, #0
 8001630:	f040 80f9 	bne.w	8001826 <HAL_ADC_Start+0x20e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800163a:	2b01      	cmp	r3, #1
 800163c:	d101      	bne.n	8001642 <HAL_ADC_Start+0x2a>
 800163e:	2302      	movs	r3, #2
 8001640:	e0f4      	b.n	800182c <HAL_ADC_Start+0x214>
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	2201      	movs	r2, #1
 8001646:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 800164a:	6878      	ldr	r0, [r7, #4]
 800164c:	f000 fde6 	bl	800221c <ADC_Enable>
 8001650:	4603      	mov	r3, r0
 8001652:	73fb      	strb	r3, [r7, #15]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001654:	7bfb      	ldrb	r3, [r7, #15]
 8001656:	2b00      	cmp	r3, #0
 8001658:	f040 80e0 	bne.w	800181c <HAL_ADC_Start+0x204>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001660:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8001664:	f023 0301 	bic.w	r3, r3, #1
 8001668:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	641a      	str	r2, [r3, #64]	@ 0x40
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Set group injected state (from auto-injection) and multimode state   */
      /* for all cases of multimode: independent mode, multimode ADC master   */
      /* or multimode ADC slave (for devices with several ADCs):              */
      if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001678:	d004      	beq.n	8001684 <HAL_ADC_Start+0x6c>
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	4a6d      	ldr	r2, [pc, #436]	@ (8001834 <HAL_ADC_Start+0x21c>)
 8001680:	4293      	cmp	r3, r2
 8001682:	d106      	bne.n	8001692 <HAL_ADC_Start+0x7a>
 8001684:	4b6c      	ldr	r3, [pc, #432]	@ (8001838 <HAL_ADC_Start+0x220>)
 8001686:	689b      	ldr	r3, [r3, #8]
 8001688:	f003 031f 	and.w	r3, r3, #31
 800168c:	2b00      	cmp	r3, #0
 800168e:	d010      	beq.n	80016b2 <HAL_ADC_Start+0x9a>
 8001690:	e005      	b.n	800169e <HAL_ADC_Start+0x86>
 8001692:	4b6a      	ldr	r3, [pc, #424]	@ (800183c <HAL_ADC_Start+0x224>)
 8001694:	689b      	ldr	r3, [r3, #8]
 8001696:	f003 031f 	and.w	r3, r3, #31
 800169a:	2b00      	cmp	r3, #0
 800169c:	d009      	beq.n	80016b2 <HAL_ADC_Start+0x9a>
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80016a6:	d004      	beq.n	80016b2 <HAL_ADC_Start+0x9a>
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	4a64      	ldr	r2, [pc, #400]	@ (8001840 <HAL_ADC_Start+0x228>)
 80016ae:	4293      	cmp	r3, r2
 80016b0:	d115      	bne.n	80016de <HAL_ADC_Start+0xc6>
      {
        /* Set ADC state (ADC independent or master) */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016b6:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	641a      	str	r2, [r3, #64]	@ 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	68db      	ldr	r3, [r3, #12]
 80016c4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d036      	beq.n	800173a <HAL_ADC_Start+0x122>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016d0:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80016d4:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	641a      	str	r2, [r3, #64]	@ 0x40
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 80016dc:	e02d      	b.n	800173a <HAL_ADC_Start+0x122>
        }
      }
      else
      {
        /* Set ADC state (ADC slave) */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016e2:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	641a      	str	r2, [r3, #64]	@ 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80016f2:	d004      	beq.n	80016fe <HAL_ADC_Start+0xe6>
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	4a4e      	ldr	r2, [pc, #312]	@ (8001834 <HAL_ADC_Start+0x21c>)
 80016fa:	4293      	cmp	r3, r2
 80016fc:	d10a      	bne.n	8001714 <HAL_ADC_Start+0xfc>
 80016fe:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8001702:	68db      	ldr	r3, [r3, #12]
 8001704:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001708:	2b00      	cmp	r3, #0
 800170a:	bf14      	ite	ne
 800170c:	2301      	movne	r3, #1
 800170e:	2300      	moveq	r3, #0
 8001710:	b2db      	uxtb	r3, r3
 8001712:	e008      	b.n	8001726 <HAL_ADC_Start+0x10e>
 8001714:	4b4a      	ldr	r3, [pc, #296]	@ (8001840 <HAL_ADC_Start+0x228>)
 8001716:	68db      	ldr	r3, [r3, #12]
 8001718:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800171c:	2b00      	cmp	r3, #0
 800171e:	bf14      	ite	ne
 8001720:	2301      	movne	r3, #1
 8001722:	2300      	moveq	r3, #0
 8001724:	b2db      	uxtb	r3, r3
 8001726:	2b00      	cmp	r3, #0
 8001728:	d007      	beq.n	800173a <HAL_ADC_Start+0x122>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800172e:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001732:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	641a      	str	r2, [r3, #64]	@ 0x40
        }
      }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800173e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001742:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001746:	d106      	bne.n	8001756 <HAL_ADC_Start+0x13e>
      {
        /* Reset ADC error code fields related to conversions on group regular*/
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800174c:	f023 0206 	bic.w	r2, r3, #6
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	645a      	str	r2, [r3, #68]	@ 0x44
 8001754:	e002      	b.n	800175c <HAL_ADC_Start+0x144>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	2200      	movs	r2, #0
 800175a:	645a      	str	r2, [r3, #68]	@ 0x44
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	2200      	movs	r2, #0
 8001760:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	221c      	movs	r2, #28
 800176a:	601a      	str	r2, [r3, #0]
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Case of multimode enabled (for devices with several ADCs):           */
      /*  - if ADC is slave, ADC is enabled only (conversion is not started). */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001774:	d004      	beq.n	8001780 <HAL_ADC_Start+0x168>
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	4a2e      	ldr	r2, [pc, #184]	@ (8001834 <HAL_ADC_Start+0x21c>)
 800177c:	4293      	cmp	r3, r2
 800177e:	d106      	bne.n	800178e <HAL_ADC_Start+0x176>
 8001780:	4b2d      	ldr	r3, [pc, #180]	@ (8001838 <HAL_ADC_Start+0x220>)
 8001782:	689b      	ldr	r3, [r3, #8]
 8001784:	f003 031f 	and.w	r3, r3, #31
 8001788:	2b00      	cmp	r3, #0
 800178a:	d03e      	beq.n	800180a <HAL_ADC_Start+0x1f2>
 800178c:	e005      	b.n	800179a <HAL_ADC_Start+0x182>
 800178e:	4b2b      	ldr	r3, [pc, #172]	@ (800183c <HAL_ADC_Start+0x224>)
 8001790:	689b      	ldr	r3, [r3, #8]
 8001792:	f003 031f 	and.w	r3, r3, #31
 8001796:	2b00      	cmp	r3, #0
 8001798:	d037      	beq.n	800180a <HAL_ADC_Start+0x1f2>
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80017a2:	d004      	beq.n	80017ae <HAL_ADC_Start+0x196>
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	4a22      	ldr	r2, [pc, #136]	@ (8001834 <HAL_ADC_Start+0x21c>)
 80017aa:	4293      	cmp	r3, r2
 80017ac:	d106      	bne.n	80017bc <HAL_ADC_Start+0x1a4>
 80017ae:	4b22      	ldr	r3, [pc, #136]	@ (8001838 <HAL_ADC_Start+0x220>)
 80017b0:	689b      	ldr	r3, [r3, #8]
 80017b2:	f003 031f 	and.w	r3, r3, #31
 80017b6:	2b05      	cmp	r3, #5
 80017b8:	d027      	beq.n	800180a <HAL_ADC_Start+0x1f2>
 80017ba:	e005      	b.n	80017c8 <HAL_ADC_Start+0x1b0>
 80017bc:	4b1f      	ldr	r3, [pc, #124]	@ (800183c <HAL_ADC_Start+0x224>)
 80017be:	689b      	ldr	r3, [r3, #8]
 80017c0:	f003 031f 	and.w	r3, r3, #31
 80017c4:	2b05      	cmp	r3, #5
 80017c6:	d020      	beq.n	800180a <HAL_ADC_Start+0x1f2>
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80017d0:	d004      	beq.n	80017dc <HAL_ADC_Start+0x1c4>
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	4a17      	ldr	r2, [pc, #92]	@ (8001834 <HAL_ADC_Start+0x21c>)
 80017d8:	4293      	cmp	r3, r2
 80017da:	d106      	bne.n	80017ea <HAL_ADC_Start+0x1d2>
 80017dc:	4b16      	ldr	r3, [pc, #88]	@ (8001838 <HAL_ADC_Start+0x220>)
 80017de:	689b      	ldr	r3, [r3, #8]
 80017e0:	f003 031f 	and.w	r3, r3, #31
 80017e4:	2b09      	cmp	r3, #9
 80017e6:	d010      	beq.n	800180a <HAL_ADC_Start+0x1f2>
 80017e8:	e005      	b.n	80017f6 <HAL_ADC_Start+0x1de>
 80017ea:	4b14      	ldr	r3, [pc, #80]	@ (800183c <HAL_ADC_Start+0x224>)
 80017ec:	689b      	ldr	r3, [r3, #8]
 80017ee:	f003 031f 	and.w	r3, r3, #31
 80017f2:	2b09      	cmp	r3, #9
 80017f4:	d009      	beq.n	800180a <HAL_ADC_Start+0x1f2>
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80017fe:	d004      	beq.n	800180a <HAL_ADC_Start+0x1f2>
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	4a0e      	ldr	r2, [pc, #56]	@ (8001840 <HAL_ADC_Start+0x228>)
 8001806:	4293      	cmp	r3, r2
 8001808:	d10f      	bne.n	800182a <HAL_ADC_Start+0x212>
      {
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	689a      	ldr	r2, [r3, #8]
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	f042 0204 	orr.w	r2, r2, #4
 8001818:	609a      	str	r2, [r3, #8]
 800181a:	e006      	b.n	800182a <HAL_ADC_Start+0x212>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	2200      	movs	r2, #0
 8001820:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8001824:	e001      	b.n	800182a <HAL_ADC_Start+0x212>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001826:	2302      	movs	r3, #2
 8001828:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800182a:	7bfb      	ldrb	r3, [r7, #15]
}
 800182c:	4618      	mov	r0, r3
 800182e:	3710      	adds	r7, #16
 8001830:	46bd      	mov	sp, r7
 8001832:	bd80      	pop	{r7, pc}
 8001834:	50000100 	.word	0x50000100
 8001838:	50000300 	.word	0x50000300
 800183c:	50000700 	.word	0x50000700
 8001840:	50000400 	.word	0x50000400

08001844 <HAL_ADC_PollForConversion>:
  * @note   Depending on init parameter "EOCSelection", flags EOS or EOC is 
  *         checked and cleared depending on autodelay status (bit AUTDLY).     
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8001844:	b580      	push	{r7, lr}
 8001846:	b086      	sub	sp, #24
 8001848:	af00      	add	r7, sp, #0
 800184a:	6078      	str	r0, [r7, #4]
 800184c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_EOC;
  ADC_Common_TypeDef *tmpADC_Common;
  uint32_t tmp_cfgr     = 0x0U;
 800184e:	2300      	movs	r3, #0
 8001850:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

/* If end of conversion selected to end of sequence */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	695b      	ldr	r3, [r3, #20]
 8001856:	2b08      	cmp	r3, #8
 8001858:	d102      	bne.n	8001860 <HAL_ADC_PollForConversion+0x1c>
  {
    tmp_Flag_EOC = ADC_FLAG_EOS;
 800185a:	2308      	movs	r3, #8
 800185c:	617b      	str	r3, [r7, #20]
 800185e:	e03a      	b.n	80018d6 <HAL_ADC_PollForConversion+0x92>
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001868:	d004      	beq.n	8001874 <HAL_ADC_PollForConversion+0x30>
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	4a72      	ldr	r2, [pc, #456]	@ (8001a38 <HAL_ADC_PollForConversion+0x1f4>)
 8001870:	4293      	cmp	r3, r2
 8001872:	d101      	bne.n	8001878 <HAL_ADC_PollForConversion+0x34>
 8001874:	4b71      	ldr	r3, [pc, #452]	@ (8001a3c <HAL_ADC_PollForConversion+0x1f8>)
 8001876:	e000      	b.n	800187a <HAL_ADC_PollForConversion+0x36>
 8001878:	4b71      	ldr	r3, [pc, #452]	@ (8001a40 <HAL_ADC_PollForConversion+0x1fc>)
 800187a:	60fb      	str	r3, [r7, #12]
    
    /* Check DMA configuration, depending on MultiMode set or not */
    if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI) == ADC_MODE_INDEPENDENT)
 800187c:	68fb      	ldr	r3, [r7, #12]
 800187e:	689b      	ldr	r3, [r3, #8]
 8001880:	f003 031f 	and.w	r3, r3, #31
 8001884:	2b00      	cmp	r3, #0
 8001886:	d112      	bne.n	80018ae <HAL_ADC_PollForConversion+0x6a>
    {
      if (HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_DMAEN))
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	68db      	ldr	r3, [r3, #12]
 800188e:	f003 0301 	and.w	r3, r3, #1
 8001892:	2b01      	cmp	r3, #1
 8001894:	d11d      	bne.n	80018d2 <HAL_ADC_PollForConversion+0x8e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800189a:	f043 0220 	orr.w	r2, r3, #32
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	641a      	str	r2, [r3, #64]	@ 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	2200      	movs	r2, #0
 80018a6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
        
        return HAL_ERROR;
 80018aa:	2301      	movs	r3, #1
 80018ac:	e0bf      	b.n	8001a2e <HAL_ADC_PollForConversion+0x1ea>
      }
    }
    else
    {
      /* MultiMode is enabled, Common Control Register MDMA bits must be checked */
      if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA) != RESET)
 80018ae:	68fb      	ldr	r3, [r7, #12]
 80018b0:	689b      	ldr	r3, [r3, #8]
 80018b2:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d00b      	beq.n	80018d2 <HAL_ADC_PollForConversion+0x8e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018be:	f043 0220 	orr.w	r2, r3, #32
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	641a      	str	r2, [r3, #64]	@ 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	2200      	movs	r2, #0
 80018ca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
        
        return HAL_ERROR;
 80018ce:	2301      	movs	r3, #1
 80018d0:	e0ad      	b.n	8001a2e <HAL_ADC_PollForConversion+0x1ea>
      }
    }
    
    tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 80018d2:	230c      	movs	r3, #12
 80018d4:	617b      	str	r3, [r7, #20]
  }
  
  /* Get relevant register CFGR in ADC instance of ADC master or slave      */
  /* in function of multimode state (for devices with multimode             */
  /* available).                                                            */
  if(ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80018de:	d004      	beq.n	80018ea <HAL_ADC_PollForConversion+0xa6>
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	4a54      	ldr	r2, [pc, #336]	@ (8001a38 <HAL_ADC_PollForConversion+0x1f4>)
 80018e6:	4293      	cmp	r3, r2
 80018e8:	d106      	bne.n	80018f8 <HAL_ADC_PollForConversion+0xb4>
 80018ea:	4b54      	ldr	r3, [pc, #336]	@ (8001a3c <HAL_ADC_PollForConversion+0x1f8>)
 80018ec:	689b      	ldr	r3, [r3, #8]
 80018ee:	f003 031f 	and.w	r3, r3, #31
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d010      	beq.n	8001918 <HAL_ADC_PollForConversion+0xd4>
 80018f6:	e005      	b.n	8001904 <HAL_ADC_PollForConversion+0xc0>
 80018f8:	4b51      	ldr	r3, [pc, #324]	@ (8001a40 <HAL_ADC_PollForConversion+0x1fc>)
 80018fa:	689b      	ldr	r3, [r3, #8]
 80018fc:	f003 031f 	and.w	r3, r3, #31
 8001900:	2b00      	cmp	r3, #0
 8001902:	d009      	beq.n	8001918 <HAL_ADC_PollForConversion+0xd4>
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800190c:	d004      	beq.n	8001918 <HAL_ADC_PollForConversion+0xd4>
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	4a4c      	ldr	r2, [pc, #304]	@ (8001a44 <HAL_ADC_PollForConversion+0x200>)
 8001914:	4293      	cmp	r3, r2
 8001916:	d104      	bne.n	8001922 <HAL_ADC_PollForConversion+0xde>
  {
    tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	68db      	ldr	r3, [r3, #12]
 800191e:	613b      	str	r3, [r7, #16]
 8001920:	e00f      	b.n	8001942 <HAL_ADC_PollForConversion+0xfe>
  }
  else
  {
    tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800192a:	d004      	beq.n	8001936 <HAL_ADC_PollForConversion+0xf2>
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	4a41      	ldr	r2, [pc, #260]	@ (8001a38 <HAL_ADC_PollForConversion+0x1f4>)
 8001932:	4293      	cmp	r3, r2
 8001934:	d102      	bne.n	800193c <HAL_ADC_PollForConversion+0xf8>
 8001936:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 800193a:	e000      	b.n	800193e <HAL_ADC_PollForConversion+0xfa>
 800193c:	4b41      	ldr	r3, [pc, #260]	@ (8001a44 <HAL_ADC_PollForConversion+0x200>)
 800193e:	68db      	ldr	r3, [r3, #12]
 8001940:	613b      	str	r3, [r7, #16]
  }
  
  /* Get tick count */
  tickstart = HAL_GetTick();  
 8001942:	f7ff fc59 	bl	80011f8 <HAL_GetTick>
 8001946:	60b8      	str	r0, [r7, #8]
  
  /* Wait until End of Conversion or End of Sequence flag is raised */
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8001948:	e021      	b.n	800198e <HAL_ADC_PollForConversion+0x14a>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 800194a:	683b      	ldr	r3, [r7, #0]
 800194c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001950:	d01d      	beq.n	800198e <HAL_ADC_PollForConversion+0x14a>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8001952:	683b      	ldr	r3, [r7, #0]
 8001954:	2b00      	cmp	r3, #0
 8001956:	d007      	beq.n	8001968 <HAL_ADC_PollForConversion+0x124>
 8001958:	f7ff fc4e 	bl	80011f8 <HAL_GetTick>
 800195c:	4602      	mov	r2, r0
 800195e:	68bb      	ldr	r3, [r7, #8]
 8001960:	1ad3      	subs	r3, r2, r3
 8001962:	683a      	ldr	r2, [r7, #0]
 8001964:	429a      	cmp	r2, r3
 8001966:	d212      	bcs.n	800198e <HAL_ADC_PollForConversion+0x14a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	681a      	ldr	r2, [r3, #0]
 800196e:	697b      	ldr	r3, [r7, #20]
 8001970:	4013      	ands	r3, r2
 8001972:	2b00      	cmp	r3, #0
 8001974:	d10b      	bne.n	800198e <HAL_ADC_PollForConversion+0x14a>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800197a:	f043 0204 	orr.w	r2, r3, #4
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	2200      	movs	r2, #0
 8001986:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_TIMEOUT;
 800198a:	2303      	movs	r3, #3
 800198c:	e04f      	b.n	8001a2e <HAL_ADC_PollForConversion+0x1ea>
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	681a      	ldr	r2, [r3, #0]
 8001994:	697b      	ldr	r3, [r7, #20]
 8001996:	4013      	ands	r3, r2
 8001998:	2b00      	cmp	r3, #0
 800199a:	d0d6      	beq.n	800194a <HAL_ADC_PollForConversion+0x106>
      }
    }
  }
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019a0:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	641a      	str	r2, [r3, #64]	@ 0x40
  
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)           && 
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	68db      	ldr	r3, [r3, #12]
 80019ae:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d131      	bne.n	8001a1a <HAL_ADC_PollForConversion+0x1d6>
     (READ_BIT (tmp_cfgr, ADC_CFGR_CONT) == RESET)   )
 80019b6:	693b      	ldr	r3, [r7, #16]
 80019b8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)           && 
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d12c      	bne.n	8001a1a <HAL_ADC_PollForConversion+0x1d6>
  {
    /* If End of Sequence is reached, disable interrupts */
    if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	f003 0308 	and.w	r3, r3, #8
 80019ca:	2b08      	cmp	r3, #8
 80019cc:	d125      	bne.n	8001a1a <HAL_ADC_PollForConversion+0x1d6>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	689b      	ldr	r3, [r3, #8]
 80019d4:	f003 0304 	and.w	r3, r3, #4
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d112      	bne.n	8001a02 <HAL_ADC_PollForConversion+0x1be>
      {        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019e0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	641a      	str	r2, [r3, #64]	@ 0x40
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019ec:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d112      	bne.n	8001a1a <HAL_ADC_PollForConversion+0x1d6>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019f8:	f043 0201 	orr.w	r2, r3, #1
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	641a      	str	r2, [r3, #64]	@ 0x40
 8001a00:	e00b      	b.n	8001a1a <HAL_ADC_PollForConversion+0x1d6>
        }
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a06:	f043 0220 	orr.w	r2, r3, #32
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	641a      	str	r2, [r3, #64]	@ 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a12:	f043 0201 	orr.w	r2, r3, #1
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	645a      	str	r2, [r3, #68]	@ 0x44
  }
  
  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (READ_BIT (tmp_cfgr, ADC_CFGR_AUTDLY) == RESET)
 8001a1a:	693b      	ldr	r3, [r7, #16]
 8001a1c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d103      	bne.n	8001a2c <HAL_ADC_PollForConversion+0x1e8>
  {
    /* Clear regular group conversion flag */
    /* (EOC or EOS depending on HAL ADC initialization parameter) */
    __HAL_ADC_CLEAR_FLAG(hadc, tmp_Flag_EOC);
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	697a      	ldr	r2, [r7, #20]
 8001a2a:	601a      	str	r2, [r3, #0]
  }
  
  /* Return ADC state */
  return HAL_OK;
 8001a2c:	2300      	movs	r3, #0
}
 8001a2e:	4618      	mov	r0, r3
 8001a30:	3718      	adds	r7, #24
 8001a32:	46bd      	mov	sp, r7
 8001a34:	bd80      	pop	{r7, pc}
 8001a36:	bf00      	nop
 8001a38:	50000100 	.word	0x50000100
 8001a3c:	50000300 	.word	0x50000300
 8001a40:	50000700 	.word	0x50000700
 8001a44:	50000400 	.word	0x50000400

08001a48 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8001a48:	b480      	push	{r7}
 8001a4a:	b083      	sub	sp, #12
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	6078      	str	r0, [r7, #4]

  /* Note: ADC flag EOC is not cleared here by software because               */
  /*       automatically cleared by hardware when reading register DR.        */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 8001a56:	4618      	mov	r0, r3
 8001a58:	370c      	adds	r7, #12
 8001a5a:	46bd      	mov	sp, r7
 8001a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a60:	4770      	bx	lr
	...

08001a64 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001a64:	b480      	push	{r7}
 8001a66:	b09b      	sub	sp, #108	@ 0x6c
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	6078      	str	r0, [r7, #4]
 8001a6c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001a6e:	2300      	movs	r3, #0
 8001a70:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 8001a74:	2300      	movs	r3, #0
 8001a76:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001a7e:	2b01      	cmp	r3, #1
 8001a80:	d101      	bne.n	8001a86 <HAL_ADC_ConfigChannel+0x22>
 8001a82:	2302      	movs	r3, #2
 8001a84:	e2c8      	b.n	8002018 <HAL_ADC_ConfigChannel+0x5b4>
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	2201      	movs	r2, #1
 8001a8a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	689b      	ldr	r3, [r3, #8]
 8001a94:	f003 0304 	and.w	r3, r3, #4
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	f040 82ac 	bne.w	8001ff6 <HAL_ADC_ConfigChannel+0x592>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 8001a9e:	683b      	ldr	r3, [r7, #0]
 8001aa0:	685b      	ldr	r3, [r3, #4]
 8001aa2:	2b04      	cmp	r3, #4
 8001aa4:	d81c      	bhi.n	8001ae0 <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001aac:	683b      	ldr	r3, [r7, #0]
 8001aae:	685a      	ldr	r2, [r3, #4]
 8001ab0:	4613      	mov	r3, r2
 8001ab2:	005b      	lsls	r3, r3, #1
 8001ab4:	4413      	add	r3, r2
 8001ab6:	005b      	lsls	r3, r3, #1
 8001ab8:	461a      	mov	r2, r3
 8001aba:	231f      	movs	r3, #31
 8001abc:	4093      	lsls	r3, r2
 8001abe:	43db      	mvns	r3, r3
 8001ac0:	4019      	ands	r1, r3
 8001ac2:	683b      	ldr	r3, [r7, #0]
 8001ac4:	6818      	ldr	r0, [r3, #0]
 8001ac6:	683b      	ldr	r3, [r7, #0]
 8001ac8:	685a      	ldr	r2, [r3, #4]
 8001aca:	4613      	mov	r3, r2
 8001acc:	005b      	lsls	r3, r3, #1
 8001ace:	4413      	add	r3, r2
 8001ad0:	005b      	lsls	r3, r3, #1
 8001ad2:	fa00 f203 	lsl.w	r2, r0, r3
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	430a      	orrs	r2, r1
 8001adc:	631a      	str	r2, [r3, #48]	@ 0x30
 8001ade:	e063      	b.n	8001ba8 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 8001ae0:	683b      	ldr	r3, [r7, #0]
 8001ae2:	685b      	ldr	r3, [r3, #4]
 8001ae4:	2b09      	cmp	r3, #9
 8001ae6:	d81e      	bhi.n	8001b26 <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001aee:	683b      	ldr	r3, [r7, #0]
 8001af0:	685a      	ldr	r2, [r3, #4]
 8001af2:	4613      	mov	r3, r2
 8001af4:	005b      	lsls	r3, r3, #1
 8001af6:	4413      	add	r3, r2
 8001af8:	005b      	lsls	r3, r3, #1
 8001afa:	3b1e      	subs	r3, #30
 8001afc:	221f      	movs	r2, #31
 8001afe:	fa02 f303 	lsl.w	r3, r2, r3
 8001b02:	43db      	mvns	r3, r3
 8001b04:	4019      	ands	r1, r3
 8001b06:	683b      	ldr	r3, [r7, #0]
 8001b08:	6818      	ldr	r0, [r3, #0]
 8001b0a:	683b      	ldr	r3, [r7, #0]
 8001b0c:	685a      	ldr	r2, [r3, #4]
 8001b0e:	4613      	mov	r3, r2
 8001b10:	005b      	lsls	r3, r3, #1
 8001b12:	4413      	add	r3, r2
 8001b14:	005b      	lsls	r3, r3, #1
 8001b16:	3b1e      	subs	r3, #30
 8001b18:	fa00 f203 	lsl.w	r2, r0, r3
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	430a      	orrs	r2, r1
 8001b22:	635a      	str	r2, [r3, #52]	@ 0x34
 8001b24:	e040      	b.n	8001ba8 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 8001b26:	683b      	ldr	r3, [r7, #0]
 8001b28:	685b      	ldr	r3, [r3, #4]
 8001b2a:	2b0e      	cmp	r3, #14
 8001b2c:	d81e      	bhi.n	8001b6c <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 8001b34:	683b      	ldr	r3, [r7, #0]
 8001b36:	685a      	ldr	r2, [r3, #4]
 8001b38:	4613      	mov	r3, r2
 8001b3a:	005b      	lsls	r3, r3, #1
 8001b3c:	4413      	add	r3, r2
 8001b3e:	005b      	lsls	r3, r3, #1
 8001b40:	3b3c      	subs	r3, #60	@ 0x3c
 8001b42:	221f      	movs	r2, #31
 8001b44:	fa02 f303 	lsl.w	r3, r2, r3
 8001b48:	43db      	mvns	r3, r3
 8001b4a:	4019      	ands	r1, r3
 8001b4c:	683b      	ldr	r3, [r7, #0]
 8001b4e:	6818      	ldr	r0, [r3, #0]
 8001b50:	683b      	ldr	r3, [r7, #0]
 8001b52:	685a      	ldr	r2, [r3, #4]
 8001b54:	4613      	mov	r3, r2
 8001b56:	005b      	lsls	r3, r3, #1
 8001b58:	4413      	add	r3, r2
 8001b5a:	005b      	lsls	r3, r3, #1
 8001b5c:	3b3c      	subs	r3, #60	@ 0x3c
 8001b5e:	fa00 f203 	lsl.w	r2, r0, r3
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	430a      	orrs	r2, r1
 8001b68:	639a      	str	r2, [r3, #56]	@ 0x38
 8001b6a:	e01d      	b.n	8001ba8 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
 8001b72:	683b      	ldr	r3, [r7, #0]
 8001b74:	685a      	ldr	r2, [r3, #4]
 8001b76:	4613      	mov	r3, r2
 8001b78:	005b      	lsls	r3, r3, #1
 8001b7a:	4413      	add	r3, r2
 8001b7c:	005b      	lsls	r3, r3, #1
 8001b7e:	3b5a      	subs	r3, #90	@ 0x5a
 8001b80:	221f      	movs	r2, #31
 8001b82:	fa02 f303 	lsl.w	r3, r2, r3
 8001b86:	43db      	mvns	r3, r3
 8001b88:	4019      	ands	r1, r3
 8001b8a:	683b      	ldr	r3, [r7, #0]
 8001b8c:	6818      	ldr	r0, [r3, #0]
 8001b8e:	683b      	ldr	r3, [r7, #0]
 8001b90:	685a      	ldr	r2, [r3, #4]
 8001b92:	4613      	mov	r3, r2
 8001b94:	005b      	lsls	r3, r3, #1
 8001b96:	4413      	add	r3, r2
 8001b98:	005b      	lsls	r3, r3, #1
 8001b9a:	3b5a      	subs	r3, #90	@ 0x5a
 8001b9c:	fa00 f203 	lsl.w	r2, r0, r3
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	430a      	orrs	r2, r1
 8001ba6:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	689b      	ldr	r3, [r3, #8]
 8001bae:	f003 030c 	and.w	r3, r3, #12
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	f040 80e5 	bne.w	8001d82 <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 8001bb8:	683b      	ldr	r3, [r7, #0]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	2b09      	cmp	r3, #9
 8001bbe:	d91c      	bls.n	8001bfa <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	6999      	ldr	r1, [r3, #24]
 8001bc6:	683b      	ldr	r3, [r7, #0]
 8001bc8:	681a      	ldr	r2, [r3, #0]
 8001bca:	4613      	mov	r3, r2
 8001bcc:	005b      	lsls	r3, r3, #1
 8001bce:	4413      	add	r3, r2
 8001bd0:	3b1e      	subs	r3, #30
 8001bd2:	2207      	movs	r2, #7
 8001bd4:	fa02 f303 	lsl.w	r3, r2, r3
 8001bd8:	43db      	mvns	r3, r3
 8001bda:	4019      	ands	r1, r3
 8001bdc:	683b      	ldr	r3, [r7, #0]
 8001bde:	6898      	ldr	r0, [r3, #8]
 8001be0:	683b      	ldr	r3, [r7, #0]
 8001be2:	681a      	ldr	r2, [r3, #0]
 8001be4:	4613      	mov	r3, r2
 8001be6:	005b      	lsls	r3, r3, #1
 8001be8:	4413      	add	r3, r2
 8001bea:	3b1e      	subs	r3, #30
 8001bec:	fa00 f203 	lsl.w	r2, r0, r3
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	430a      	orrs	r2, r1
 8001bf6:	619a      	str	r2, [r3, #24]
 8001bf8:	e019      	b.n	8001c2e <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	6959      	ldr	r1, [r3, #20]
 8001c00:	683b      	ldr	r3, [r7, #0]
 8001c02:	681a      	ldr	r2, [r3, #0]
 8001c04:	4613      	mov	r3, r2
 8001c06:	005b      	lsls	r3, r3, #1
 8001c08:	4413      	add	r3, r2
 8001c0a:	2207      	movs	r2, #7
 8001c0c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c10:	43db      	mvns	r3, r3
 8001c12:	4019      	ands	r1, r3
 8001c14:	683b      	ldr	r3, [r7, #0]
 8001c16:	6898      	ldr	r0, [r3, #8]
 8001c18:	683b      	ldr	r3, [r7, #0]
 8001c1a:	681a      	ldr	r2, [r3, #0]
 8001c1c:	4613      	mov	r3, r2
 8001c1e:	005b      	lsls	r3, r3, #1
 8001c20:	4413      	add	r3, r2
 8001c22:	fa00 f203 	lsl.w	r2, r0, r3
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	430a      	orrs	r2, r1
 8001c2c:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 8001c2e:	683b      	ldr	r3, [r7, #0]
 8001c30:	695a      	ldr	r2, [r3, #20]
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	68db      	ldr	r3, [r3, #12]
 8001c38:	08db      	lsrs	r3, r3, #3
 8001c3a:	f003 0303 	and.w	r3, r3, #3
 8001c3e:	005b      	lsls	r3, r3, #1
 8001c40:	fa02 f303 	lsl.w	r3, r2, r3
 8001c44:	663b      	str	r3, [r7, #96]	@ 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 8001c46:	683b      	ldr	r3, [r7, #0]
 8001c48:	691b      	ldr	r3, [r3, #16]
 8001c4a:	3b01      	subs	r3, #1
 8001c4c:	2b03      	cmp	r3, #3
 8001c4e:	d84f      	bhi.n	8001cf0 <HAL_ADC_ConfigChannel+0x28c>
 8001c50:	a201      	add	r2, pc, #4	@ (adr r2, 8001c58 <HAL_ADC_ConfigChannel+0x1f4>)
 8001c52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c56:	bf00      	nop
 8001c58:	08001c69 	.word	0x08001c69
 8001c5c:	08001c8b 	.word	0x08001c8b
 8001c60:	08001cad 	.word	0x08001cad
 8001c64:	08001ccf 	.word	0x08001ccf
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001c6e:	4b99      	ldr	r3, [pc, #612]	@ (8001ed4 <HAL_ADC_ConfigChannel+0x470>)
 8001c70:	4013      	ands	r3, r2
 8001c72:	683a      	ldr	r2, [r7, #0]
 8001c74:	6812      	ldr	r2, [r2, #0]
 8001c76:	0691      	lsls	r1, r2, #26
 8001c78:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8001c7a:	430a      	orrs	r2, r1
 8001c7c:	431a      	orrs	r2, r3
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8001c86:	661a      	str	r2, [r3, #96]	@ 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001c88:	e07b      	b.n	8001d82 <HAL_ADC_ConfigChannel+0x31e>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8001c90:	4b90      	ldr	r3, [pc, #576]	@ (8001ed4 <HAL_ADC_ConfigChannel+0x470>)
 8001c92:	4013      	ands	r3, r2
 8001c94:	683a      	ldr	r2, [r7, #0]
 8001c96:	6812      	ldr	r2, [r2, #0]
 8001c98:	0691      	lsls	r1, r2, #26
 8001c9a:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8001c9c:	430a      	orrs	r2, r1
 8001c9e:	431a      	orrs	r2, r3
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8001ca8:	665a      	str	r2, [r3, #100]	@ 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001caa:	e06a      	b.n	8001d82 <HAL_ADC_ConfigChannel+0x31e>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8001cb2:	4b88      	ldr	r3, [pc, #544]	@ (8001ed4 <HAL_ADC_ConfigChannel+0x470>)
 8001cb4:	4013      	ands	r3, r2
 8001cb6:	683a      	ldr	r2, [r7, #0]
 8001cb8:	6812      	ldr	r2, [r2, #0]
 8001cba:	0691      	lsls	r1, r2, #26
 8001cbc:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8001cbe:	430a      	orrs	r2, r1
 8001cc0:	431a      	orrs	r2, r3
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8001cca:	669a      	str	r2, [r3, #104]	@ 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001ccc:	e059      	b.n	8001d82 <HAL_ADC_ConfigChannel+0x31e>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8001cd4:	4b7f      	ldr	r3, [pc, #508]	@ (8001ed4 <HAL_ADC_ConfigChannel+0x470>)
 8001cd6:	4013      	ands	r3, r2
 8001cd8:	683a      	ldr	r2, [r7, #0]
 8001cda:	6812      	ldr	r2, [r2, #0]
 8001cdc:	0691      	lsls	r1, r2, #26
 8001cde:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8001ce0:	430a      	orrs	r2, r1
 8001ce2:	431a      	orrs	r2, r3
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8001cec:	66da      	str	r2, [r3, #108]	@ 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001cee:	e048      	b.n	8001d82 <HAL_ADC_ConfigChannel+0x31e>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001cf6:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001cfa:	683b      	ldr	r3, [r7, #0]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	069b      	lsls	r3, r3, #26
 8001d00:	429a      	cmp	r2, r3
 8001d02:	d107      	bne.n	8001d14 <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8001d12:	661a      	str	r2, [r3, #96]	@ 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8001d1a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001d1e:	683b      	ldr	r3, [r7, #0]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	069b      	lsls	r3, r3, #26
 8001d24:	429a      	cmp	r2, r3
 8001d26:	d107      	bne.n	8001d38 <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8001d36:	665a      	str	r2, [r3, #100]	@ 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8001d3e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001d42:	683b      	ldr	r3, [r7, #0]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	069b      	lsls	r3, r3, #26
 8001d48:	429a      	cmp	r2, r3
 8001d4a:	d107      	bne.n	8001d5c <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8001d5a:	669a      	str	r2, [r3, #104]	@ 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001d62:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001d66:	683b      	ldr	r3, [r7, #0]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	069b      	lsls	r3, r3, #26
 8001d6c:	429a      	cmp	r2, r3
 8001d6e:	d107      	bne.n	8001d80 <HAL_ADC_ConfigChannel+0x31c>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8001d7e:	66da      	str	r2, [r3, #108]	@ 0x6c
      }
      break;
 8001d80:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	689b      	ldr	r3, [r3, #8]
 8001d88:	f003 0303 	and.w	r3, r3, #3
 8001d8c:	2b01      	cmp	r3, #1
 8001d8e:	d108      	bne.n	8001da2 <HAL_ADC_ConfigChannel+0x33e>
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	f003 0301 	and.w	r3, r3, #1
 8001d9a:	2b01      	cmp	r3, #1
 8001d9c:	d101      	bne.n	8001da2 <HAL_ADC_ConfigChannel+0x33e>
 8001d9e:	2301      	movs	r3, #1
 8001da0:	e000      	b.n	8001da4 <HAL_ADC_ConfigChannel+0x340>
 8001da2:	2300      	movs	r3, #0
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	f040 8131 	bne.w	800200c <HAL_ADC_ConfigChannel+0x5a8>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8001daa:	683b      	ldr	r3, [r7, #0]
 8001dac:	68db      	ldr	r3, [r3, #12]
 8001dae:	2b01      	cmp	r3, #1
 8001db0:	d00f      	beq.n	8001dd2 <HAL_ADC_ConfigChannel+0x36e>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	f8d3 10b0 	ldr.w	r1, [r3, #176]	@ 0xb0
 8001dba:	683b      	ldr	r3, [r7, #0]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	2201      	movs	r2, #1
 8001dc0:	fa02 f303 	lsl.w	r3, r2, r3
 8001dc4:	43da      	mvns	r2, r3
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	400a      	ands	r2, r1
 8001dcc:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
 8001dd0:	e049      	b.n	8001e66 <HAL_ADC_ConfigChannel+0x402>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	f8d3 10b0 	ldr.w	r1, [r3, #176]	@ 0xb0
 8001dda:	683b      	ldr	r3, [r7, #0]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	2201      	movs	r2, #1
 8001de0:	409a      	lsls	r2, r3
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	430a      	orrs	r2, r1
 8001de8:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 8001dec:	683b      	ldr	r3, [r7, #0]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	2b09      	cmp	r3, #9
 8001df2:	d91c      	bls.n	8001e2e <HAL_ADC_ConfigChannel+0x3ca>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	6999      	ldr	r1, [r3, #24]
 8001dfa:	683b      	ldr	r3, [r7, #0]
 8001dfc:	681a      	ldr	r2, [r3, #0]
 8001dfe:	4613      	mov	r3, r2
 8001e00:	005b      	lsls	r3, r3, #1
 8001e02:	4413      	add	r3, r2
 8001e04:	3b1b      	subs	r3, #27
 8001e06:	2207      	movs	r2, #7
 8001e08:	fa02 f303 	lsl.w	r3, r2, r3
 8001e0c:	43db      	mvns	r3, r3
 8001e0e:	4019      	ands	r1, r3
 8001e10:	683b      	ldr	r3, [r7, #0]
 8001e12:	6898      	ldr	r0, [r3, #8]
 8001e14:	683b      	ldr	r3, [r7, #0]
 8001e16:	681a      	ldr	r2, [r3, #0]
 8001e18:	4613      	mov	r3, r2
 8001e1a:	005b      	lsls	r3, r3, #1
 8001e1c:	4413      	add	r3, r2
 8001e1e:	3b1b      	subs	r3, #27
 8001e20:	fa00 f203 	lsl.w	r2, r0, r3
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	430a      	orrs	r2, r1
 8001e2a:	619a      	str	r2, [r3, #24]
 8001e2c:	e01b      	b.n	8001e66 <HAL_ADC_ConfigChannel+0x402>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	6959      	ldr	r1, [r3, #20]
 8001e34:	683b      	ldr	r3, [r7, #0]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	1c5a      	adds	r2, r3, #1
 8001e3a:	4613      	mov	r3, r2
 8001e3c:	005b      	lsls	r3, r3, #1
 8001e3e:	4413      	add	r3, r2
 8001e40:	2207      	movs	r2, #7
 8001e42:	fa02 f303 	lsl.w	r3, r2, r3
 8001e46:	43db      	mvns	r3, r3
 8001e48:	4019      	ands	r1, r3
 8001e4a:	683b      	ldr	r3, [r7, #0]
 8001e4c:	6898      	ldr	r0, [r3, #8]
 8001e4e:	683b      	ldr	r3, [r7, #0]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	1c5a      	adds	r2, r3, #1
 8001e54:	4613      	mov	r3, r2
 8001e56:	005b      	lsls	r3, r3, #1
 8001e58:	4413      	add	r3, r2
 8001e5a:	fa00 f203 	lsl.w	r2, r0, r3
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	430a      	orrs	r2, r1
 8001e64:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001e6e:	d004      	beq.n	8001e7a <HAL_ADC_ConfigChannel+0x416>
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	4a18      	ldr	r2, [pc, #96]	@ (8001ed8 <HAL_ADC_ConfigChannel+0x474>)
 8001e76:	4293      	cmp	r3, r2
 8001e78:	d101      	bne.n	8001e7e <HAL_ADC_ConfigChannel+0x41a>
 8001e7a:	4b18      	ldr	r3, [pc, #96]	@ (8001edc <HAL_ADC_ConfigChannel+0x478>)
 8001e7c:	e000      	b.n	8001e80 <HAL_ADC_ConfigChannel+0x41c>
 8001e7e:	4b18      	ldr	r3, [pc, #96]	@ (8001ee0 <HAL_ADC_ConfigChannel+0x47c>)
 8001e80:	65fb      	str	r3, [r7, #92]	@ 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001e82:	683b      	ldr	r3, [r7, #0]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	2b10      	cmp	r3, #16
 8001e88:	d105      	bne.n	8001e96 <HAL_ADC_ConfigChannel+0x432>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8001e8a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001e8c:	689b      	ldr	r3, [r3, #8]
 8001e8e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d015      	beq.n	8001ec2 <HAL_ADC_ConfigChannel+0x45e>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8001e96:	683b      	ldr	r3, [r7, #0]
 8001e98:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8001e9a:	2b11      	cmp	r3, #17
 8001e9c:	d105      	bne.n	8001eaa <HAL_ADC_ConfigChannel+0x446>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8001e9e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001ea0:	689b      	ldr	r3, [r3, #8]
 8001ea2:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d00b      	beq.n	8001ec2 <HAL_ADC_ConfigChannel+0x45e>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8001eaa:	683b      	ldr	r3, [r7, #0]
 8001eac:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8001eae:	2b12      	cmp	r3, #18
 8001eb0:	f040 80ac 	bne.w	800200c <HAL_ADC_ConfigChannel+0x5a8>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 8001eb4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001eb6:	689b      	ldr	r3, [r3, #8]
 8001eb8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	f040 80a5 	bne.w	800200c <HAL_ADC_ConfigChannel+0x5a8>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001eca:	d10b      	bne.n	8001ee4 <HAL_ADC_ConfigChannel+0x480>
 8001ecc:	4b02      	ldr	r3, [pc, #8]	@ (8001ed8 <HAL_ADC_ConfigChannel+0x474>)
 8001ece:	60fb      	str	r3, [r7, #12]
 8001ed0:	e023      	b.n	8001f1a <HAL_ADC_ConfigChannel+0x4b6>
 8001ed2:	bf00      	nop
 8001ed4:	83fff000 	.word	0x83fff000
 8001ed8:	50000100 	.word	0x50000100
 8001edc:	50000300 	.word	0x50000300
 8001ee0:	50000700 	.word	0x50000700
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	4a4e      	ldr	r2, [pc, #312]	@ (8002024 <HAL_ADC_ConfigChannel+0x5c0>)
 8001eea:	4293      	cmp	r3, r2
 8001eec:	d103      	bne.n	8001ef6 <HAL_ADC_ConfigChannel+0x492>
 8001eee:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8001ef2:	60fb      	str	r3, [r7, #12]
 8001ef4:	e011      	b.n	8001f1a <HAL_ADC_ConfigChannel+0x4b6>
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	4a4b      	ldr	r2, [pc, #300]	@ (8002028 <HAL_ADC_ConfigChannel+0x5c4>)
 8001efc:	4293      	cmp	r3, r2
 8001efe:	d102      	bne.n	8001f06 <HAL_ADC_ConfigChannel+0x4a2>
 8001f00:	4b4a      	ldr	r3, [pc, #296]	@ (800202c <HAL_ADC_ConfigChannel+0x5c8>)
 8001f02:	60fb      	str	r3, [r7, #12]
 8001f04:	e009      	b.n	8001f1a <HAL_ADC_ConfigChannel+0x4b6>
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	4a48      	ldr	r2, [pc, #288]	@ (800202c <HAL_ADC_ConfigChannel+0x5c8>)
 8001f0c:	4293      	cmp	r3, r2
 8001f0e:	d102      	bne.n	8001f16 <HAL_ADC_ConfigChannel+0x4b2>
 8001f10:	4b45      	ldr	r3, [pc, #276]	@ (8002028 <HAL_ADC_ConfigChannel+0x5c4>)
 8001f12:	60fb      	str	r3, [r7, #12]
 8001f14:	e001      	b.n	8001f1a <HAL_ADC_ConfigChannel+0x4b6>
 8001f16:	2300      	movs	r3, #0
 8001f18:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	689b      	ldr	r3, [r3, #8]
 8001f20:	f003 0303 	and.w	r3, r3, #3
 8001f24:	2b01      	cmp	r3, #1
 8001f26:	d108      	bne.n	8001f3a <HAL_ADC_ConfigChannel+0x4d6>
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	f003 0301 	and.w	r3, r3, #1
 8001f32:	2b01      	cmp	r3, #1
 8001f34:	d101      	bne.n	8001f3a <HAL_ADC_ConfigChannel+0x4d6>
 8001f36:	2301      	movs	r3, #1
 8001f38:	e000      	b.n	8001f3c <HAL_ADC_ConfigChannel+0x4d8>
 8001f3a:	2300      	movs	r3, #0
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d150      	bne.n	8001fe2 <HAL_ADC_ConfigChannel+0x57e>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001f40:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d010      	beq.n	8001f68 <HAL_ADC_ConfigChannel+0x504>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	689b      	ldr	r3, [r3, #8]
 8001f4a:	f003 0303 	and.w	r3, r3, #3
 8001f4e:	2b01      	cmp	r3, #1
 8001f50:	d107      	bne.n	8001f62 <HAL_ADC_ConfigChannel+0x4fe>
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	f003 0301 	and.w	r3, r3, #1
 8001f5a:	2b01      	cmp	r3, #1
 8001f5c:	d101      	bne.n	8001f62 <HAL_ADC_ConfigChannel+0x4fe>
 8001f5e:	2301      	movs	r3, #1
 8001f60:	e000      	b.n	8001f64 <HAL_ADC_ConfigChannel+0x500>
 8001f62:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d13c      	bne.n	8001fe2 <HAL_ADC_ConfigChannel+0x57e>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001f68:	683b      	ldr	r3, [r7, #0]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	2b10      	cmp	r3, #16
 8001f6e:	d11d      	bne.n	8001fac <HAL_ADC_ConfigChannel+0x548>
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001f78:	d118      	bne.n	8001fac <HAL_ADC_ConfigChannel+0x548>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 8001f7a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001f7c:	689b      	ldr	r3, [r3, #8]
 8001f7e:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8001f82:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001f84:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001f86:	4b2a      	ldr	r3, [pc, #168]	@ (8002030 <HAL_ADC_ConfigChannel+0x5cc>)
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	4a2a      	ldr	r2, [pc, #168]	@ (8002034 <HAL_ADC_ConfigChannel+0x5d0>)
 8001f8c:	fba2 2303 	umull	r2, r3, r2, r3
 8001f90:	0c9a      	lsrs	r2, r3, #18
 8001f92:	4613      	mov	r3, r2
 8001f94:	009b      	lsls	r3, r3, #2
 8001f96:	4413      	add	r3, r2
 8001f98:	005b      	lsls	r3, r3, #1
 8001f9a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001f9c:	e002      	b.n	8001fa4 <HAL_ADC_ConfigChannel+0x540>
          {
            wait_loop_index--;
 8001f9e:	68bb      	ldr	r3, [r7, #8]
 8001fa0:	3b01      	subs	r3, #1
 8001fa2:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001fa4:	68bb      	ldr	r3, [r7, #8]
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d1f9      	bne.n	8001f9e <HAL_ADC_ConfigChannel+0x53a>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001faa:	e02e      	b.n	800200a <HAL_ADC_ConfigChannel+0x5a6>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 8001fac:	683b      	ldr	r3, [r7, #0]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	2b11      	cmp	r3, #17
 8001fb2:	d10b      	bne.n	8001fcc <HAL_ADC_ConfigChannel+0x568>
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001fbc:	d106      	bne.n	8001fcc <HAL_ADC_ConfigChannel+0x568>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 8001fbe:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001fc0:	689b      	ldr	r3, [r3, #8]
 8001fc2:	f043 7280 	orr.w	r2, r3, #16777216	@ 0x1000000
 8001fc6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001fc8:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001fca:	e01e      	b.n	800200a <HAL_ADC_ConfigChannel+0x5a6>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 8001fcc:	683b      	ldr	r3, [r7, #0]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	2b12      	cmp	r3, #18
 8001fd2:	d11a      	bne.n	800200a <HAL_ADC_ConfigChannel+0x5a6>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 8001fd4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001fd6:	689b      	ldr	r3, [r3, #8]
 8001fd8:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8001fdc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001fde:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001fe0:	e013      	b.n	800200a <HAL_ADC_ConfigChannel+0x5a6>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fe6:	f043 0220 	orr.w	r2, r3, #32
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	641a      	str	r2, [r3, #64]	@ 0x40
        
        tmp_hal_status = HAL_ERROR;
 8001fee:	2301      	movs	r3, #1
 8001ff0:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 8001ff4:	e00a      	b.n	800200c <HAL_ADC_ConfigChannel+0x5a8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ffa:	f043 0220 	orr.w	r2, r3, #32
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	641a      	str	r2, [r3, #64]	@ 0x40
    
    tmp_hal_status = HAL_ERROR;
 8002002:	2301      	movs	r3, #1
 8002004:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 8002008:	e000      	b.n	800200c <HAL_ADC_ConfigChannel+0x5a8>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 800200a:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	2200      	movs	r2, #0
 8002010:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8002014:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
}
 8002018:	4618      	mov	r0, r3
 800201a:	376c      	adds	r7, #108	@ 0x6c
 800201c:	46bd      	mov	sp, r7
 800201e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002022:	4770      	bx	lr
 8002024:	50000100 	.word	0x50000100
 8002028:	50000400 	.word	0x50000400
 800202c:	50000500 	.word	0x50000500
 8002030:	20000038 	.word	0x20000038
 8002034:	431bde83 	.word	0x431bde83

08002038 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param  hadc ADC handle
  * @param  multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef* hadc, ADC_MultiModeTypeDef* multimode)
{
 8002038:	b480      	push	{r7}
 800203a:	b099      	sub	sp, #100	@ 0x64
 800203c:	af00      	add	r7, sp, #0
 800203e:	6078      	str	r0, [r7, #4]
 8002040:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002042:	2300      	movs	r3, #0
 8002044:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
    assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }
  
  /* Set handle of the other ADC sharing the same common register             */
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002050:	d102      	bne.n	8002058 <HAL_ADCEx_MultiModeConfigChannel+0x20>
 8002052:	4b6d      	ldr	r3, [pc, #436]	@ (8002208 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8002054:	60bb      	str	r3, [r7, #8]
 8002056:	e01a      	b.n	800208e <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	4a6a      	ldr	r2, [pc, #424]	@ (8002208 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 800205e:	4293      	cmp	r3, r2
 8002060:	d103      	bne.n	800206a <HAL_ADCEx_MultiModeConfigChannel+0x32>
 8002062:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8002066:	60bb      	str	r3, [r7, #8]
 8002068:	e011      	b.n	800208e <HAL_ADCEx_MultiModeConfigChannel+0x56>
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	4a67      	ldr	r2, [pc, #412]	@ (800220c <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 8002070:	4293      	cmp	r3, r2
 8002072:	d102      	bne.n	800207a <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8002074:	4b66      	ldr	r3, [pc, #408]	@ (8002210 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 8002076:	60bb      	str	r3, [r7, #8]
 8002078:	e009      	b.n	800208e <HAL_ADCEx_MultiModeConfigChannel+0x56>
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	4a64      	ldr	r2, [pc, #400]	@ (8002210 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 8002080:	4293      	cmp	r3, r2
 8002082:	d102      	bne.n	800208a <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8002084:	4b61      	ldr	r3, [pc, #388]	@ (800220c <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 8002086:	60bb      	str	r3, [r7, #8]
 8002088:	e001      	b.n	800208e <HAL_ADCEx_MultiModeConfigChannel+0x56>
 800208a:	2300      	movs	r3, #0
 800208c:	60bb      	str	r3, [r7, #8]
  if (tmphadcSharingSameCommonRegister.Instance == NULL)
 800208e:	68bb      	ldr	r3, [r7, #8]
 8002090:	2b00      	cmp	r3, #0
 8002092:	d101      	bne.n	8002098 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Return function status */
    return HAL_ERROR;
 8002094:	2301      	movs	r3, #1
 8002096:	e0b0      	b.n	80021fa <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800209e:	2b01      	cmp	r3, #1
 80020a0:	d101      	bne.n	80020a6 <HAL_ADCEx_MultiModeConfigChannel+0x6e>
 80020a2:	2302      	movs	r3, #2
 80020a4:	e0a9      	b.n	80021fa <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	2201      	movs	r2, #1
 80020aa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  if ( (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET) 
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	689b      	ldr	r3, [r3, #8]
 80020b4:	f003 0304 	and.w	r3, r3, #4
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	f040 808d 	bne.w	80021d8 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
    && (ADC_IS_CONVERSION_ONGOING_REGULAR(&tmphadcSharingSameCommonRegister) == RESET) )
 80020be:	68bb      	ldr	r3, [r7, #8]
 80020c0:	689b      	ldr	r3, [r3, #8]
 80020c2:	f003 0304 	and.w	r3, r3, #4
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	f040 8086 	bne.w	80021d8 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
  {
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80020d4:	d004      	beq.n	80020e0 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	4a4b      	ldr	r2, [pc, #300]	@ (8002208 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 80020dc:	4293      	cmp	r3, r2
 80020de:	d101      	bne.n	80020e4 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 80020e0:	4b4c      	ldr	r3, [pc, #304]	@ (8002214 <HAL_ADCEx_MultiModeConfigChannel+0x1dc>)
 80020e2:	e000      	b.n	80020e6 <HAL_ADCEx_MultiModeConfigChannel+0xae>
 80020e4:	4b4c      	ldr	r3, [pc, #304]	@ (8002218 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>)
 80020e6:	65bb      	str	r3, [r7, #88]	@ 0x58
    
    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 80020e8:	683b      	ldr	r3, [r7, #0]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d040      	beq.n	8002172 <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    {
      /* Configuration of ADC common group ADC1&ADC2, ADC3&ADC4 if available    */
      /* (ADC2, ADC3, ADC4 availability depends on STM32 product)               */
      /*  - DMA access mode                                                     */
      MODIFY_REG(tmpADC_Common->CCR                                          ,
 80020f0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80020f2:	689b      	ldr	r3, [r3, #8]
 80020f4:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80020f8:	683b      	ldr	r3, [r7, #0]
 80020fa:	6859      	ldr	r1, [r3, #4]
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8002102:	035b      	lsls	r3, r3, #13
 8002104:	430b      	orrs	r3, r1
 8002106:	431a      	orrs	r2, r3
 8002108:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800210a:	609a      	str	r2, [r3, #8]
      /*       parameters, their setting is bypassed without error reporting    */
      /*       (as it can be the expected behaviour in case of intended action  */
      /*       to update parameter above (which fulfills the ADC state          */
      /*       condition: no conversion on going on group regular)              */
      /*       on the fly).                                                     */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	689b      	ldr	r3, [r3, #8]
 8002112:	f003 0303 	and.w	r3, r3, #3
 8002116:	2b01      	cmp	r3, #1
 8002118:	d108      	bne.n	800212c <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	f003 0301 	and.w	r3, r3, #1
 8002124:	2b01      	cmp	r3, #1
 8002126:	d101      	bne.n	800212c <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 8002128:	2301      	movs	r3, #1
 800212a:	e000      	b.n	800212e <HAL_ADCEx_MultiModeConfigChannel+0xf6>
 800212c:	2300      	movs	r3, #0
 800212e:	2b00      	cmp	r3, #0
 8002130:	d15c      	bne.n	80021ec <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8002132:	68bb      	ldr	r3, [r7, #8]
 8002134:	689b      	ldr	r3, [r3, #8]
 8002136:	f003 0303 	and.w	r3, r3, #3
 800213a:	2b01      	cmp	r3, #1
 800213c:	d107      	bne.n	800214e <HAL_ADCEx_MultiModeConfigChannel+0x116>
 800213e:	68bb      	ldr	r3, [r7, #8]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	f003 0301 	and.w	r3, r3, #1
 8002146:	2b01      	cmp	r3, #1
 8002148:	d101      	bne.n	800214e <HAL_ADCEx_MultiModeConfigChannel+0x116>
 800214a:	2301      	movs	r3, #1
 800214c:	e000      	b.n	8002150 <HAL_ADCEx_MultiModeConfigChannel+0x118>
 800214e:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8002150:	2b00      	cmp	r3, #0
 8002152:	d14b      	bne.n	80021ec <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        MODIFY_REG(tmpADC_Common->CCR                                          ,
 8002154:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002156:	689b      	ldr	r3, [r3, #8]
 8002158:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 800215c:	f023 030f 	bic.w	r3, r3, #15
 8002160:	683a      	ldr	r2, [r7, #0]
 8002162:	6811      	ldr	r1, [r2, #0]
 8002164:	683a      	ldr	r2, [r7, #0]
 8002166:	6892      	ldr	r2, [r2, #8]
 8002168:	430a      	orrs	r2, r1
 800216a:	431a      	orrs	r2, r3
 800216c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800216e:	609a      	str	r2, [r3, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8002170:	e03c      	b.n	80021ec <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
                   multimode->TwoSamplingDelay                                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8002172:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002174:	689b      	ldr	r3, [r3, #8]
 8002176:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800217a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800217c:	609a      	str	r2, [r3, #8]
      
      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	689b      	ldr	r3, [r3, #8]
 8002184:	f003 0303 	and.w	r3, r3, #3
 8002188:	2b01      	cmp	r3, #1
 800218a:	d108      	bne.n	800219e <HAL_ADCEx_MultiModeConfigChannel+0x166>
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	f003 0301 	and.w	r3, r3, #1
 8002196:	2b01      	cmp	r3, #1
 8002198:	d101      	bne.n	800219e <HAL_ADCEx_MultiModeConfigChannel+0x166>
 800219a:	2301      	movs	r3, #1
 800219c:	e000      	b.n	80021a0 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 800219e:	2300      	movs	r3, #0
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d123      	bne.n	80021ec <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 80021a4:	68bb      	ldr	r3, [r7, #8]
 80021a6:	689b      	ldr	r3, [r3, #8]
 80021a8:	f003 0303 	and.w	r3, r3, #3
 80021ac:	2b01      	cmp	r3, #1
 80021ae:	d107      	bne.n	80021c0 <HAL_ADCEx_MultiModeConfigChannel+0x188>
 80021b0:	68bb      	ldr	r3, [r7, #8]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	f003 0301 	and.w	r3, r3, #1
 80021b8:	2b01      	cmp	r3, #1
 80021ba:	d101      	bne.n	80021c0 <HAL_ADCEx_MultiModeConfigChannel+0x188>
 80021bc:	2301      	movs	r3, #1
 80021be:	e000      	b.n	80021c2 <HAL_ADCEx_MultiModeConfigChannel+0x18a>
 80021c0:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d112      	bne.n	80021ec <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI | ADC_CCR_DELAY);
 80021c6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80021c8:	689b      	ldr	r3, [r3, #8]
 80021ca:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 80021ce:	f023 030f 	bic.w	r3, r3, #15
 80021d2:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80021d4:	6093      	str	r3, [r2, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 80021d6:	e009      	b.n	80021ec <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021dc:	f043 0220 	orr.w	r2, r3, #32
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	641a      	str	r2, [r3, #64]	@ 0x40
    
    tmp_hal_status = HAL_ERROR;
 80021e4:	2301      	movs	r3, #1
 80021e6:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 80021ea:	e000      	b.n	80021ee <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 80021ec:	bf00      	nop
  }
    
    
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	2200      	movs	r2, #0
 80021f2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 80021f6:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
} 
 80021fa:	4618      	mov	r0, r3
 80021fc:	3764      	adds	r7, #100	@ 0x64
 80021fe:	46bd      	mov	sp, r7
 8002200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002204:	4770      	bx	lr
 8002206:	bf00      	nop
 8002208:	50000100 	.word	0x50000100
 800220c:	50000400 	.word	0x50000400
 8002210:	50000500 	.word	0x50000500
 8002214:	50000300 	.word	0x50000300
 8002218:	50000700 	.word	0x50000700

0800221c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 800221c:	b580      	push	{r7, lr}
 800221e:	b084      	sub	sp, #16
 8002220:	af00      	add	r7, sp, #0
 8002222:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002224:	2300      	movs	r3, #0
 8002226:	60fb      	str	r3, [r7, #12]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	689b      	ldr	r3, [r3, #8]
 800222e:	f003 0303 	and.w	r3, r3, #3
 8002232:	2b01      	cmp	r3, #1
 8002234:	d108      	bne.n	8002248 <ADC_Enable+0x2c>
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	f003 0301 	and.w	r3, r3, #1
 8002240:	2b01      	cmp	r3, #1
 8002242:	d101      	bne.n	8002248 <ADC_Enable+0x2c>
 8002244:	2301      	movs	r3, #1
 8002246:	e000      	b.n	800224a <ADC_Enable+0x2e>
 8002248:	2300      	movs	r3, #0
 800224a:	2b00      	cmp	r3, #0
 800224c:	d143      	bne.n	80022d6 <ADC_Enable+0xba>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	689a      	ldr	r2, [r3, #8]
 8002254:	4b22      	ldr	r3, [pc, #136]	@ (80022e0 <ADC_Enable+0xc4>)
 8002256:	4013      	ands	r3, r2
 8002258:	2b00      	cmp	r3, #0
 800225a:	d00d      	beq.n	8002278 <ADC_Enable+0x5c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002260:	f043 0210 	orr.w	r2, r3, #16
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	641a      	str	r2, [r3, #64]	@ 0x40
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800226c:	f043 0201 	orr.w	r2, r3, #1
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	645a      	str	r2, [r3, #68]	@ 0x44
      
      return HAL_ERROR;
 8002274:	2301      	movs	r3, #1
 8002276:	e02f      	b.n	80022d8 <ADC_Enable+0xbc>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	689a      	ldr	r2, [r3, #8]
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	f042 0201 	orr.w	r2, r2, #1
 8002286:	609a      	str	r2, [r3, #8]
    
    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();  
 8002288:	f7fe ffb6 	bl	80011f8 <HAL_GetTick>
 800228c:	60f8      	str	r0, [r7, #12]
    
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800228e:	e01b      	b.n	80022c8 <ADC_Enable+0xac>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002290:	f7fe ffb2 	bl	80011f8 <HAL_GetTick>
 8002294:	4602      	mov	r2, r0
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	1ad3      	subs	r3, r2, r3
 800229a:	2b02      	cmp	r3, #2
 800229c:	d914      	bls.n	80022c8 <ADC_Enable+0xac>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	f003 0301 	and.w	r3, r3, #1
 80022a8:	2b01      	cmp	r3, #1
 80022aa:	d00d      	beq.n	80022c8 <ADC_Enable+0xac>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022b0:	f043 0210 	orr.w	r2, r3, #16
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80022bc:	f043 0201 	orr.w	r2, r3, #1
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	645a      	str	r2, [r3, #68]	@ 0x44

          return HAL_ERROR;
 80022c4:	2301      	movs	r3, #1
 80022c6:	e007      	b.n	80022d8 <ADC_Enable+0xbc>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	f003 0301 	and.w	r3, r3, #1
 80022d2:	2b01      	cmp	r3, #1
 80022d4:	d1dc      	bne.n	8002290 <ADC_Enable+0x74>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80022d6:	2300      	movs	r3, #0
}
 80022d8:	4618      	mov	r0, r3
 80022da:	3710      	adds	r7, #16
 80022dc:	46bd      	mov	sp, r7
 80022de:	bd80      	pop	{r7, pc}
 80022e0:	8000003f 	.word	0x8000003f

080022e4 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 80022e4:	b580      	push	{r7, lr}
 80022e6:	b084      	sub	sp, #16
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80022ec:	2300      	movs	r3, #0
 80022ee:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	689b      	ldr	r3, [r3, #8]
 80022f6:	f003 0303 	and.w	r3, r3, #3
 80022fa:	2b01      	cmp	r3, #1
 80022fc:	d108      	bne.n	8002310 <ADC_Disable+0x2c>
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	f003 0301 	and.w	r3, r3, #1
 8002308:	2b01      	cmp	r3, #1
 800230a:	d101      	bne.n	8002310 <ADC_Disable+0x2c>
 800230c:	2301      	movs	r3, #1
 800230e:	e000      	b.n	8002312 <ADC_Disable+0x2e>
 8002310:	2300      	movs	r3, #0
 8002312:	2b00      	cmp	r3, #0
 8002314:	d047      	beq.n	80023a6 <ADC_Disable+0xc2>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	689b      	ldr	r3, [r3, #8]
 800231c:	f003 030d 	and.w	r3, r3, #13
 8002320:	2b01      	cmp	r3, #1
 8002322:	d10f      	bne.n	8002344 <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	689a      	ldr	r2, [r3, #8]
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	f042 0202 	orr.w	r2, r2, #2
 8002332:	609a      	str	r2, [r3, #8]
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	2203      	movs	r2, #3
 800233a:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 800233c:	f7fe ff5c 	bl	80011f8 <HAL_GetTick>
 8002340:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8002342:	e029      	b.n	8002398 <ADC_Disable+0xb4>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002348:	f043 0210 	orr.w	r2, r3, #16
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	641a      	str	r2, [r3, #64]	@ 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002354:	f043 0201 	orr.w	r2, r3, #1
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	645a      	str	r2, [r3, #68]	@ 0x44
      return HAL_ERROR;
 800235c:	2301      	movs	r3, #1
 800235e:	e023      	b.n	80023a8 <ADC_Disable+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002360:	f7fe ff4a 	bl	80011f8 <HAL_GetTick>
 8002364:	4602      	mov	r2, r0
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	1ad3      	subs	r3, r2, r3
 800236a:	2b02      	cmp	r3, #2
 800236c:	d914      	bls.n	8002398 <ADC_Disable+0xb4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	689b      	ldr	r3, [r3, #8]
 8002374:	f003 0301 	and.w	r3, r3, #1
 8002378:	2b01      	cmp	r3, #1
 800237a:	d10d      	bne.n	8002398 <ADC_Disable+0xb4>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002380:	f043 0210 	orr.w	r2, r3, #16
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800238c:	f043 0201 	orr.w	r2, r3, #1
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	645a      	str	r2, [r3, #68]	@ 0x44

          return HAL_ERROR;
 8002394:	2301      	movs	r3, #1
 8002396:	e007      	b.n	80023a8 <ADC_Disable+0xc4>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	689b      	ldr	r3, [r3, #8]
 800239e:	f003 0301 	and.w	r3, r3, #1
 80023a2:	2b01      	cmp	r3, #1
 80023a4:	d0dc      	beq.n	8002360 <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80023a6:	2300      	movs	r3, #0
}
 80023a8:	4618      	mov	r0, r3
 80023aa:	3710      	adds	r7, #16
 80023ac:	46bd      	mov	sp, r7
 80023ae:	bd80      	pop	{r7, pc}

080023b0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80023b0:	b480      	push	{r7}
 80023b2:	b085      	sub	sp, #20
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	f003 0307 	and.w	r3, r3, #7
 80023be:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80023c0:	4b0c      	ldr	r3, [pc, #48]	@ (80023f4 <__NVIC_SetPriorityGrouping+0x44>)
 80023c2:	68db      	ldr	r3, [r3, #12]
 80023c4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80023c6:	68ba      	ldr	r2, [r7, #8]
 80023c8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80023cc:	4013      	ands	r3, r2
 80023ce:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80023d4:	68bb      	ldr	r3, [r7, #8]
 80023d6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80023d8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80023dc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80023e0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80023e2:	4a04      	ldr	r2, [pc, #16]	@ (80023f4 <__NVIC_SetPriorityGrouping+0x44>)
 80023e4:	68bb      	ldr	r3, [r7, #8]
 80023e6:	60d3      	str	r3, [r2, #12]
}
 80023e8:	bf00      	nop
 80023ea:	3714      	adds	r7, #20
 80023ec:	46bd      	mov	sp, r7
 80023ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f2:	4770      	bx	lr
 80023f4:	e000ed00 	.word	0xe000ed00

080023f8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80023f8:	b480      	push	{r7}
 80023fa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80023fc:	4b04      	ldr	r3, [pc, #16]	@ (8002410 <__NVIC_GetPriorityGrouping+0x18>)
 80023fe:	68db      	ldr	r3, [r3, #12]
 8002400:	0a1b      	lsrs	r3, r3, #8
 8002402:	f003 0307 	and.w	r3, r3, #7
}
 8002406:	4618      	mov	r0, r3
 8002408:	46bd      	mov	sp, r7
 800240a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800240e:	4770      	bx	lr
 8002410:	e000ed00 	.word	0xe000ed00

08002414 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002414:	b480      	push	{r7}
 8002416:	b083      	sub	sp, #12
 8002418:	af00      	add	r7, sp, #0
 800241a:	4603      	mov	r3, r0
 800241c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800241e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002422:	2b00      	cmp	r3, #0
 8002424:	db0b      	blt.n	800243e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002426:	79fb      	ldrb	r3, [r7, #7]
 8002428:	f003 021f 	and.w	r2, r3, #31
 800242c:	4907      	ldr	r1, [pc, #28]	@ (800244c <__NVIC_EnableIRQ+0x38>)
 800242e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002432:	095b      	lsrs	r3, r3, #5
 8002434:	2001      	movs	r0, #1
 8002436:	fa00 f202 	lsl.w	r2, r0, r2
 800243a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800243e:	bf00      	nop
 8002440:	370c      	adds	r7, #12
 8002442:	46bd      	mov	sp, r7
 8002444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002448:	4770      	bx	lr
 800244a:	bf00      	nop
 800244c:	e000e100 	.word	0xe000e100

08002450 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002450:	b480      	push	{r7}
 8002452:	b083      	sub	sp, #12
 8002454:	af00      	add	r7, sp, #0
 8002456:	4603      	mov	r3, r0
 8002458:	6039      	str	r1, [r7, #0]
 800245a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800245c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002460:	2b00      	cmp	r3, #0
 8002462:	db0a      	blt.n	800247a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002464:	683b      	ldr	r3, [r7, #0]
 8002466:	b2da      	uxtb	r2, r3
 8002468:	490c      	ldr	r1, [pc, #48]	@ (800249c <__NVIC_SetPriority+0x4c>)
 800246a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800246e:	0112      	lsls	r2, r2, #4
 8002470:	b2d2      	uxtb	r2, r2
 8002472:	440b      	add	r3, r1
 8002474:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002478:	e00a      	b.n	8002490 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800247a:	683b      	ldr	r3, [r7, #0]
 800247c:	b2da      	uxtb	r2, r3
 800247e:	4908      	ldr	r1, [pc, #32]	@ (80024a0 <__NVIC_SetPriority+0x50>)
 8002480:	79fb      	ldrb	r3, [r7, #7]
 8002482:	f003 030f 	and.w	r3, r3, #15
 8002486:	3b04      	subs	r3, #4
 8002488:	0112      	lsls	r2, r2, #4
 800248a:	b2d2      	uxtb	r2, r2
 800248c:	440b      	add	r3, r1
 800248e:	761a      	strb	r2, [r3, #24]
}
 8002490:	bf00      	nop
 8002492:	370c      	adds	r7, #12
 8002494:	46bd      	mov	sp, r7
 8002496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800249a:	4770      	bx	lr
 800249c:	e000e100 	.word	0xe000e100
 80024a0:	e000ed00 	.word	0xe000ed00

080024a4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80024a4:	b480      	push	{r7}
 80024a6:	b089      	sub	sp, #36	@ 0x24
 80024a8:	af00      	add	r7, sp, #0
 80024aa:	60f8      	str	r0, [r7, #12]
 80024ac:	60b9      	str	r1, [r7, #8]
 80024ae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	f003 0307 	and.w	r3, r3, #7
 80024b6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80024b8:	69fb      	ldr	r3, [r7, #28]
 80024ba:	f1c3 0307 	rsb	r3, r3, #7
 80024be:	2b04      	cmp	r3, #4
 80024c0:	bf28      	it	cs
 80024c2:	2304      	movcs	r3, #4
 80024c4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80024c6:	69fb      	ldr	r3, [r7, #28]
 80024c8:	3304      	adds	r3, #4
 80024ca:	2b06      	cmp	r3, #6
 80024cc:	d902      	bls.n	80024d4 <NVIC_EncodePriority+0x30>
 80024ce:	69fb      	ldr	r3, [r7, #28]
 80024d0:	3b03      	subs	r3, #3
 80024d2:	e000      	b.n	80024d6 <NVIC_EncodePriority+0x32>
 80024d4:	2300      	movs	r3, #0
 80024d6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80024d8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80024dc:	69bb      	ldr	r3, [r7, #24]
 80024de:	fa02 f303 	lsl.w	r3, r2, r3
 80024e2:	43da      	mvns	r2, r3
 80024e4:	68bb      	ldr	r3, [r7, #8]
 80024e6:	401a      	ands	r2, r3
 80024e8:	697b      	ldr	r3, [r7, #20]
 80024ea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80024ec:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80024f0:	697b      	ldr	r3, [r7, #20]
 80024f2:	fa01 f303 	lsl.w	r3, r1, r3
 80024f6:	43d9      	mvns	r1, r3
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80024fc:	4313      	orrs	r3, r2
         );
}
 80024fe:	4618      	mov	r0, r3
 8002500:	3724      	adds	r7, #36	@ 0x24
 8002502:	46bd      	mov	sp, r7
 8002504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002508:	4770      	bx	lr
	...

0800250c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800250c:	b580      	push	{r7, lr}
 800250e:	b082      	sub	sp, #8
 8002510:	af00      	add	r7, sp, #0
 8002512:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	3b01      	subs	r3, #1
 8002518:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800251c:	d301      	bcc.n	8002522 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800251e:	2301      	movs	r3, #1
 8002520:	e00f      	b.n	8002542 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002522:	4a0a      	ldr	r2, [pc, #40]	@ (800254c <SysTick_Config+0x40>)
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	3b01      	subs	r3, #1
 8002528:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800252a:	210f      	movs	r1, #15
 800252c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002530:	f7ff ff8e 	bl	8002450 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002534:	4b05      	ldr	r3, [pc, #20]	@ (800254c <SysTick_Config+0x40>)
 8002536:	2200      	movs	r2, #0
 8002538:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800253a:	4b04      	ldr	r3, [pc, #16]	@ (800254c <SysTick_Config+0x40>)
 800253c:	2207      	movs	r2, #7
 800253e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002540:	2300      	movs	r3, #0
}
 8002542:	4618      	mov	r0, r3
 8002544:	3708      	adds	r7, #8
 8002546:	46bd      	mov	sp, r7
 8002548:	bd80      	pop	{r7, pc}
 800254a:	bf00      	nop
 800254c:	e000e010 	.word	0xe000e010

08002550 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002550:	b580      	push	{r7, lr}
 8002552:	b082      	sub	sp, #8
 8002554:	af00      	add	r7, sp, #0
 8002556:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002558:	6878      	ldr	r0, [r7, #4]
 800255a:	f7ff ff29 	bl	80023b0 <__NVIC_SetPriorityGrouping>
}
 800255e:	bf00      	nop
 8002560:	3708      	adds	r7, #8
 8002562:	46bd      	mov	sp, r7
 8002564:	bd80      	pop	{r7, pc}

08002566 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002566:	b580      	push	{r7, lr}
 8002568:	b086      	sub	sp, #24
 800256a:	af00      	add	r7, sp, #0
 800256c:	4603      	mov	r3, r0
 800256e:	60b9      	str	r1, [r7, #8]
 8002570:	607a      	str	r2, [r7, #4]
 8002572:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002574:	2300      	movs	r3, #0
 8002576:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002578:	f7ff ff3e 	bl	80023f8 <__NVIC_GetPriorityGrouping>
 800257c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800257e:	687a      	ldr	r2, [r7, #4]
 8002580:	68b9      	ldr	r1, [r7, #8]
 8002582:	6978      	ldr	r0, [r7, #20]
 8002584:	f7ff ff8e 	bl	80024a4 <NVIC_EncodePriority>
 8002588:	4602      	mov	r2, r0
 800258a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800258e:	4611      	mov	r1, r2
 8002590:	4618      	mov	r0, r3
 8002592:	f7ff ff5d 	bl	8002450 <__NVIC_SetPriority>
}
 8002596:	bf00      	nop
 8002598:	3718      	adds	r7, #24
 800259a:	46bd      	mov	sp, r7
 800259c:	bd80      	pop	{r7, pc}

0800259e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800259e:	b580      	push	{r7, lr}
 80025a0:	b082      	sub	sp, #8
 80025a2:	af00      	add	r7, sp, #0
 80025a4:	4603      	mov	r3, r0
 80025a6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80025a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025ac:	4618      	mov	r0, r3
 80025ae:	f7ff ff31 	bl	8002414 <__NVIC_EnableIRQ>
}
 80025b2:	bf00      	nop
 80025b4:	3708      	adds	r7, #8
 80025b6:	46bd      	mov	sp, r7
 80025b8:	bd80      	pop	{r7, pc}

080025ba <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80025ba:	b580      	push	{r7, lr}
 80025bc:	b082      	sub	sp, #8
 80025be:	af00      	add	r7, sp, #0
 80025c0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80025c2:	6878      	ldr	r0, [r7, #4]
 80025c4:	f7ff ffa2 	bl	800250c <SysTick_Config>
 80025c8:	4603      	mov	r3, r0
}
 80025ca:	4618      	mov	r0, r3
 80025cc:	3708      	adds	r7, #8
 80025ce:	46bd      	mov	sp, r7
 80025d0:	bd80      	pop	{r7, pc}
	...

080025d4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80025d4:	b480      	push	{r7}
 80025d6:	b087      	sub	sp, #28
 80025d8:	af00      	add	r7, sp, #0
 80025da:	6078      	str	r0, [r7, #4]
 80025dc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80025de:	2300      	movs	r3, #0
 80025e0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80025e2:	e154      	b.n	800288e <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80025e4:	683b      	ldr	r3, [r7, #0]
 80025e6:	681a      	ldr	r2, [r3, #0]
 80025e8:	2101      	movs	r1, #1
 80025ea:	697b      	ldr	r3, [r7, #20]
 80025ec:	fa01 f303 	lsl.w	r3, r1, r3
 80025f0:	4013      	ands	r3, r2
 80025f2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	f000 8146 	beq.w	8002888 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80025fc:	683b      	ldr	r3, [r7, #0]
 80025fe:	685b      	ldr	r3, [r3, #4]
 8002600:	f003 0303 	and.w	r3, r3, #3
 8002604:	2b01      	cmp	r3, #1
 8002606:	d005      	beq.n	8002614 <HAL_GPIO_Init+0x40>
 8002608:	683b      	ldr	r3, [r7, #0]
 800260a:	685b      	ldr	r3, [r3, #4]
 800260c:	f003 0303 	and.w	r3, r3, #3
 8002610:	2b02      	cmp	r3, #2
 8002612:	d130      	bne.n	8002676 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	689b      	ldr	r3, [r3, #8]
 8002618:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800261a:	697b      	ldr	r3, [r7, #20]
 800261c:	005b      	lsls	r3, r3, #1
 800261e:	2203      	movs	r2, #3
 8002620:	fa02 f303 	lsl.w	r3, r2, r3
 8002624:	43db      	mvns	r3, r3
 8002626:	693a      	ldr	r2, [r7, #16]
 8002628:	4013      	ands	r3, r2
 800262a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800262c:	683b      	ldr	r3, [r7, #0]
 800262e:	68da      	ldr	r2, [r3, #12]
 8002630:	697b      	ldr	r3, [r7, #20]
 8002632:	005b      	lsls	r3, r3, #1
 8002634:	fa02 f303 	lsl.w	r3, r2, r3
 8002638:	693a      	ldr	r2, [r7, #16]
 800263a:	4313      	orrs	r3, r2
 800263c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	693a      	ldr	r2, [r7, #16]
 8002642:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	685b      	ldr	r3, [r3, #4]
 8002648:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800264a:	2201      	movs	r2, #1
 800264c:	697b      	ldr	r3, [r7, #20]
 800264e:	fa02 f303 	lsl.w	r3, r2, r3
 8002652:	43db      	mvns	r3, r3
 8002654:	693a      	ldr	r2, [r7, #16]
 8002656:	4013      	ands	r3, r2
 8002658:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800265a:	683b      	ldr	r3, [r7, #0]
 800265c:	685b      	ldr	r3, [r3, #4]
 800265e:	091b      	lsrs	r3, r3, #4
 8002660:	f003 0201 	and.w	r2, r3, #1
 8002664:	697b      	ldr	r3, [r7, #20]
 8002666:	fa02 f303 	lsl.w	r3, r2, r3
 800266a:	693a      	ldr	r2, [r7, #16]
 800266c:	4313      	orrs	r3, r2
 800266e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	693a      	ldr	r2, [r7, #16]
 8002674:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002676:	683b      	ldr	r3, [r7, #0]
 8002678:	685b      	ldr	r3, [r3, #4]
 800267a:	f003 0303 	and.w	r3, r3, #3
 800267e:	2b03      	cmp	r3, #3
 8002680:	d017      	beq.n	80026b2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	68db      	ldr	r3, [r3, #12]
 8002686:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8002688:	697b      	ldr	r3, [r7, #20]
 800268a:	005b      	lsls	r3, r3, #1
 800268c:	2203      	movs	r2, #3
 800268e:	fa02 f303 	lsl.w	r3, r2, r3
 8002692:	43db      	mvns	r3, r3
 8002694:	693a      	ldr	r2, [r7, #16]
 8002696:	4013      	ands	r3, r2
 8002698:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800269a:	683b      	ldr	r3, [r7, #0]
 800269c:	689a      	ldr	r2, [r3, #8]
 800269e:	697b      	ldr	r3, [r7, #20]
 80026a0:	005b      	lsls	r3, r3, #1
 80026a2:	fa02 f303 	lsl.w	r3, r2, r3
 80026a6:	693a      	ldr	r2, [r7, #16]
 80026a8:	4313      	orrs	r3, r2
 80026aa:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	693a      	ldr	r2, [r7, #16]
 80026b0:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80026b2:	683b      	ldr	r3, [r7, #0]
 80026b4:	685b      	ldr	r3, [r3, #4]
 80026b6:	f003 0303 	and.w	r3, r3, #3
 80026ba:	2b02      	cmp	r3, #2
 80026bc:	d123      	bne.n	8002706 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80026be:	697b      	ldr	r3, [r7, #20]
 80026c0:	08da      	lsrs	r2, r3, #3
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	3208      	adds	r2, #8
 80026c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80026ca:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80026cc:	697b      	ldr	r3, [r7, #20]
 80026ce:	f003 0307 	and.w	r3, r3, #7
 80026d2:	009b      	lsls	r3, r3, #2
 80026d4:	220f      	movs	r2, #15
 80026d6:	fa02 f303 	lsl.w	r3, r2, r3
 80026da:	43db      	mvns	r3, r3
 80026dc:	693a      	ldr	r2, [r7, #16]
 80026de:	4013      	ands	r3, r2
 80026e0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80026e2:	683b      	ldr	r3, [r7, #0]
 80026e4:	691a      	ldr	r2, [r3, #16]
 80026e6:	697b      	ldr	r3, [r7, #20]
 80026e8:	f003 0307 	and.w	r3, r3, #7
 80026ec:	009b      	lsls	r3, r3, #2
 80026ee:	fa02 f303 	lsl.w	r3, r2, r3
 80026f2:	693a      	ldr	r2, [r7, #16]
 80026f4:	4313      	orrs	r3, r2
 80026f6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80026f8:	697b      	ldr	r3, [r7, #20]
 80026fa:	08da      	lsrs	r2, r3, #3
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	3208      	adds	r2, #8
 8002700:	6939      	ldr	r1, [r7, #16]
 8002702:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 800270c:	697b      	ldr	r3, [r7, #20]
 800270e:	005b      	lsls	r3, r3, #1
 8002710:	2203      	movs	r2, #3
 8002712:	fa02 f303 	lsl.w	r3, r2, r3
 8002716:	43db      	mvns	r3, r3
 8002718:	693a      	ldr	r2, [r7, #16]
 800271a:	4013      	ands	r3, r2
 800271c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800271e:	683b      	ldr	r3, [r7, #0]
 8002720:	685b      	ldr	r3, [r3, #4]
 8002722:	f003 0203 	and.w	r2, r3, #3
 8002726:	697b      	ldr	r3, [r7, #20]
 8002728:	005b      	lsls	r3, r3, #1
 800272a:	fa02 f303 	lsl.w	r3, r2, r3
 800272e:	693a      	ldr	r2, [r7, #16]
 8002730:	4313      	orrs	r3, r2
 8002732:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	693a      	ldr	r2, [r7, #16]
 8002738:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800273a:	683b      	ldr	r3, [r7, #0]
 800273c:	685b      	ldr	r3, [r3, #4]
 800273e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002742:	2b00      	cmp	r3, #0
 8002744:	f000 80a0 	beq.w	8002888 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002748:	4b58      	ldr	r3, [pc, #352]	@ (80028ac <HAL_GPIO_Init+0x2d8>)
 800274a:	699b      	ldr	r3, [r3, #24]
 800274c:	4a57      	ldr	r2, [pc, #348]	@ (80028ac <HAL_GPIO_Init+0x2d8>)
 800274e:	f043 0301 	orr.w	r3, r3, #1
 8002752:	6193      	str	r3, [r2, #24]
 8002754:	4b55      	ldr	r3, [pc, #340]	@ (80028ac <HAL_GPIO_Init+0x2d8>)
 8002756:	699b      	ldr	r3, [r3, #24]
 8002758:	f003 0301 	and.w	r3, r3, #1
 800275c:	60bb      	str	r3, [r7, #8]
 800275e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002760:	4a53      	ldr	r2, [pc, #332]	@ (80028b0 <HAL_GPIO_Init+0x2dc>)
 8002762:	697b      	ldr	r3, [r7, #20]
 8002764:	089b      	lsrs	r3, r3, #2
 8002766:	3302      	adds	r3, #2
 8002768:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800276c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800276e:	697b      	ldr	r3, [r7, #20]
 8002770:	f003 0303 	and.w	r3, r3, #3
 8002774:	009b      	lsls	r3, r3, #2
 8002776:	220f      	movs	r2, #15
 8002778:	fa02 f303 	lsl.w	r3, r2, r3
 800277c:	43db      	mvns	r3, r3
 800277e:	693a      	ldr	r2, [r7, #16]
 8002780:	4013      	ands	r3, r2
 8002782:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800278a:	d019      	beq.n	80027c0 <HAL_GPIO_Init+0x1ec>
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	4a49      	ldr	r2, [pc, #292]	@ (80028b4 <HAL_GPIO_Init+0x2e0>)
 8002790:	4293      	cmp	r3, r2
 8002792:	d013      	beq.n	80027bc <HAL_GPIO_Init+0x1e8>
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	4a48      	ldr	r2, [pc, #288]	@ (80028b8 <HAL_GPIO_Init+0x2e4>)
 8002798:	4293      	cmp	r3, r2
 800279a:	d00d      	beq.n	80027b8 <HAL_GPIO_Init+0x1e4>
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	4a47      	ldr	r2, [pc, #284]	@ (80028bc <HAL_GPIO_Init+0x2e8>)
 80027a0:	4293      	cmp	r3, r2
 80027a2:	d007      	beq.n	80027b4 <HAL_GPIO_Init+0x1e0>
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	4a46      	ldr	r2, [pc, #280]	@ (80028c0 <HAL_GPIO_Init+0x2ec>)
 80027a8:	4293      	cmp	r3, r2
 80027aa:	d101      	bne.n	80027b0 <HAL_GPIO_Init+0x1dc>
 80027ac:	2304      	movs	r3, #4
 80027ae:	e008      	b.n	80027c2 <HAL_GPIO_Init+0x1ee>
 80027b0:	2305      	movs	r3, #5
 80027b2:	e006      	b.n	80027c2 <HAL_GPIO_Init+0x1ee>
 80027b4:	2303      	movs	r3, #3
 80027b6:	e004      	b.n	80027c2 <HAL_GPIO_Init+0x1ee>
 80027b8:	2302      	movs	r3, #2
 80027ba:	e002      	b.n	80027c2 <HAL_GPIO_Init+0x1ee>
 80027bc:	2301      	movs	r3, #1
 80027be:	e000      	b.n	80027c2 <HAL_GPIO_Init+0x1ee>
 80027c0:	2300      	movs	r3, #0
 80027c2:	697a      	ldr	r2, [r7, #20]
 80027c4:	f002 0203 	and.w	r2, r2, #3
 80027c8:	0092      	lsls	r2, r2, #2
 80027ca:	4093      	lsls	r3, r2
 80027cc:	693a      	ldr	r2, [r7, #16]
 80027ce:	4313      	orrs	r3, r2
 80027d0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80027d2:	4937      	ldr	r1, [pc, #220]	@ (80028b0 <HAL_GPIO_Init+0x2dc>)
 80027d4:	697b      	ldr	r3, [r7, #20]
 80027d6:	089b      	lsrs	r3, r3, #2
 80027d8:	3302      	adds	r3, #2
 80027da:	693a      	ldr	r2, [r7, #16]
 80027dc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80027e0:	4b38      	ldr	r3, [pc, #224]	@ (80028c4 <HAL_GPIO_Init+0x2f0>)
 80027e2:	689b      	ldr	r3, [r3, #8]
 80027e4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	43db      	mvns	r3, r3
 80027ea:	693a      	ldr	r2, [r7, #16]
 80027ec:	4013      	ands	r3, r2
 80027ee:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80027f0:	683b      	ldr	r3, [r7, #0]
 80027f2:	685b      	ldr	r3, [r3, #4]
 80027f4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d003      	beq.n	8002804 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 80027fc:	693a      	ldr	r2, [r7, #16]
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	4313      	orrs	r3, r2
 8002802:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002804:	4a2f      	ldr	r2, [pc, #188]	@ (80028c4 <HAL_GPIO_Init+0x2f0>)
 8002806:	693b      	ldr	r3, [r7, #16]
 8002808:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800280a:	4b2e      	ldr	r3, [pc, #184]	@ (80028c4 <HAL_GPIO_Init+0x2f0>)
 800280c:	68db      	ldr	r3, [r3, #12]
 800280e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	43db      	mvns	r3, r3
 8002814:	693a      	ldr	r2, [r7, #16]
 8002816:	4013      	ands	r3, r2
 8002818:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800281a:	683b      	ldr	r3, [r7, #0]
 800281c:	685b      	ldr	r3, [r3, #4]
 800281e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002822:	2b00      	cmp	r3, #0
 8002824:	d003      	beq.n	800282e <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8002826:	693a      	ldr	r2, [r7, #16]
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	4313      	orrs	r3, r2
 800282c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800282e:	4a25      	ldr	r2, [pc, #148]	@ (80028c4 <HAL_GPIO_Init+0x2f0>)
 8002830:	693b      	ldr	r3, [r7, #16]
 8002832:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002834:	4b23      	ldr	r3, [pc, #140]	@ (80028c4 <HAL_GPIO_Init+0x2f0>)
 8002836:	685b      	ldr	r3, [r3, #4]
 8002838:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	43db      	mvns	r3, r3
 800283e:	693a      	ldr	r2, [r7, #16]
 8002840:	4013      	ands	r3, r2
 8002842:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002844:	683b      	ldr	r3, [r7, #0]
 8002846:	685b      	ldr	r3, [r3, #4]
 8002848:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800284c:	2b00      	cmp	r3, #0
 800284e:	d003      	beq.n	8002858 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8002850:	693a      	ldr	r2, [r7, #16]
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	4313      	orrs	r3, r2
 8002856:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002858:	4a1a      	ldr	r2, [pc, #104]	@ (80028c4 <HAL_GPIO_Init+0x2f0>)
 800285a:	693b      	ldr	r3, [r7, #16]
 800285c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800285e:	4b19      	ldr	r3, [pc, #100]	@ (80028c4 <HAL_GPIO_Init+0x2f0>)
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	43db      	mvns	r3, r3
 8002868:	693a      	ldr	r2, [r7, #16]
 800286a:	4013      	ands	r3, r2
 800286c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800286e:	683b      	ldr	r3, [r7, #0]
 8002870:	685b      	ldr	r3, [r3, #4]
 8002872:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002876:	2b00      	cmp	r3, #0
 8002878:	d003      	beq.n	8002882 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800287a:	693a      	ldr	r2, [r7, #16]
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	4313      	orrs	r3, r2
 8002880:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002882:	4a10      	ldr	r2, [pc, #64]	@ (80028c4 <HAL_GPIO_Init+0x2f0>)
 8002884:	693b      	ldr	r3, [r7, #16]
 8002886:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002888:	697b      	ldr	r3, [r7, #20]
 800288a:	3301      	adds	r3, #1
 800288c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800288e:	683b      	ldr	r3, [r7, #0]
 8002890:	681a      	ldr	r2, [r3, #0]
 8002892:	697b      	ldr	r3, [r7, #20]
 8002894:	fa22 f303 	lsr.w	r3, r2, r3
 8002898:	2b00      	cmp	r3, #0
 800289a:	f47f aea3 	bne.w	80025e4 <HAL_GPIO_Init+0x10>
  }
}
 800289e:	bf00      	nop
 80028a0:	bf00      	nop
 80028a2:	371c      	adds	r7, #28
 80028a4:	46bd      	mov	sp, r7
 80028a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028aa:	4770      	bx	lr
 80028ac:	40021000 	.word	0x40021000
 80028b0:	40010000 	.word	0x40010000
 80028b4:	48000400 	.word	0x48000400
 80028b8:	48000800 	.word	0x48000800
 80028bc:	48000c00 	.word	0x48000c00
 80028c0:	48001000 	.word	0x48001000
 80028c4:	40010400 	.word	0x40010400

080028c8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80028c8:	b480      	push	{r7}
 80028ca:	b085      	sub	sp, #20
 80028cc:	af00      	add	r7, sp, #0
 80028ce:	6078      	str	r0, [r7, #4]
 80028d0:	460b      	mov	r3, r1
 80028d2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	691a      	ldr	r2, [r3, #16]
 80028d8:	887b      	ldrh	r3, [r7, #2]
 80028da:	4013      	ands	r3, r2
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d002      	beq.n	80028e6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80028e0:	2301      	movs	r3, #1
 80028e2:	73fb      	strb	r3, [r7, #15]
 80028e4:	e001      	b.n	80028ea <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80028e6:	2300      	movs	r3, #0
 80028e8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80028ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80028ec:	4618      	mov	r0, r3
 80028ee:	3714      	adds	r7, #20
 80028f0:	46bd      	mov	sp, r7
 80028f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f6:	4770      	bx	lr

080028f8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80028f8:	b480      	push	{r7}
 80028fa:	b083      	sub	sp, #12
 80028fc:	af00      	add	r7, sp, #0
 80028fe:	6078      	str	r0, [r7, #4]
 8002900:	460b      	mov	r3, r1
 8002902:	807b      	strh	r3, [r7, #2]
 8002904:	4613      	mov	r3, r2
 8002906:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002908:	787b      	ldrb	r3, [r7, #1]
 800290a:	2b00      	cmp	r3, #0
 800290c:	d003      	beq.n	8002916 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800290e:	887a      	ldrh	r2, [r7, #2]
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002914:	e002      	b.n	800291c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002916:	887a      	ldrh	r2, [r7, #2]
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800291c:	bf00      	nop
 800291e:	370c      	adds	r7, #12
 8002920:	46bd      	mov	sp, r7
 8002922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002926:	4770      	bx	lr

08002928 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002928:	b580      	push	{r7, lr}
 800292a:	b082      	sub	sp, #8
 800292c:	af00      	add	r7, sp, #0
 800292e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	2b00      	cmp	r3, #0
 8002934:	d101      	bne.n	800293a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002936:	2301      	movs	r3, #1
 8002938:	e08d      	b.n	8002a56 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002940:	b2db      	uxtb	r3, r3
 8002942:	2b00      	cmp	r3, #0
 8002944:	d106      	bne.n	8002954 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	2200      	movs	r2, #0
 800294a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800294e:	6878      	ldr	r0, [r7, #4]
 8002950:	f7fe fa08 	bl	8000d64 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	2224      	movs	r2, #36	@ 0x24
 8002958:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	681a      	ldr	r2, [r3, #0]
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	f022 0201 	bic.w	r2, r2, #1
 800296a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	685a      	ldr	r2, [r3, #4]
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002978:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	689a      	ldr	r2, [r3, #8]
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002988:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	68db      	ldr	r3, [r3, #12]
 800298e:	2b01      	cmp	r3, #1
 8002990:	d107      	bne.n	80029a2 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	689a      	ldr	r2, [r3, #8]
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800299e:	609a      	str	r2, [r3, #8]
 80029a0:	e006      	b.n	80029b0 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	689a      	ldr	r2, [r3, #8]
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 80029ae:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	68db      	ldr	r3, [r3, #12]
 80029b4:	2b02      	cmp	r3, #2
 80029b6:	d108      	bne.n	80029ca <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	685a      	ldr	r2, [r3, #4]
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80029c6:	605a      	str	r2, [r3, #4]
 80029c8:	e007      	b.n	80029da <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	685a      	ldr	r2, [r3, #4]
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80029d8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	685b      	ldr	r3, [r3, #4]
 80029e0:	687a      	ldr	r2, [r7, #4]
 80029e2:	6812      	ldr	r2, [r2, #0]
 80029e4:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80029e8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80029ec:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	68da      	ldr	r2, [r3, #12]
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80029fc:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	691a      	ldr	r2, [r3, #16]
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	695b      	ldr	r3, [r3, #20]
 8002a06:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	699b      	ldr	r3, [r3, #24]
 8002a0e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	430a      	orrs	r2, r1
 8002a16:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	69d9      	ldr	r1, [r3, #28]
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	6a1a      	ldr	r2, [r3, #32]
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	430a      	orrs	r2, r1
 8002a26:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	681a      	ldr	r2, [r3, #0]
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	f042 0201 	orr.w	r2, r2, #1
 8002a36:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	2200      	movs	r2, #0
 8002a3c:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	2220      	movs	r2, #32
 8002a42:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	2200      	movs	r2, #0
 8002a4a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	2200      	movs	r2, #0
 8002a50:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8002a54:	2300      	movs	r3, #0
}
 8002a56:	4618      	mov	r0, r3
 8002a58:	3708      	adds	r7, #8
 8002a5a:	46bd      	mov	sp, r7
 8002a5c:	bd80      	pop	{r7, pc}
	...

08002a60 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002a60:	b580      	push	{r7, lr}
 8002a62:	b088      	sub	sp, #32
 8002a64:	af02      	add	r7, sp, #8
 8002a66:	60f8      	str	r0, [r7, #12]
 8002a68:	4608      	mov	r0, r1
 8002a6a:	4611      	mov	r1, r2
 8002a6c:	461a      	mov	r2, r3
 8002a6e:	4603      	mov	r3, r0
 8002a70:	817b      	strh	r3, [r7, #10]
 8002a72:	460b      	mov	r3, r1
 8002a74:	813b      	strh	r3, [r7, #8]
 8002a76:	4613      	mov	r3, r2
 8002a78:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002a80:	b2db      	uxtb	r3, r3
 8002a82:	2b20      	cmp	r3, #32
 8002a84:	f040 80f9 	bne.w	8002c7a <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002a88:	6a3b      	ldr	r3, [r7, #32]
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d002      	beq.n	8002a94 <HAL_I2C_Mem_Write+0x34>
 8002a8e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d105      	bne.n	8002aa0 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002a9a:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8002a9c:	2301      	movs	r3, #1
 8002a9e:	e0ed      	b.n	8002c7c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002aa6:	2b01      	cmp	r3, #1
 8002aa8:	d101      	bne.n	8002aae <HAL_I2C_Mem_Write+0x4e>
 8002aaa:	2302      	movs	r3, #2
 8002aac:	e0e6      	b.n	8002c7c <HAL_I2C_Mem_Write+0x21c>
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	2201      	movs	r2, #1
 8002ab2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002ab6:	f7fe fb9f 	bl	80011f8 <HAL_GetTick>
 8002aba:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002abc:	697b      	ldr	r3, [r7, #20]
 8002abe:	9300      	str	r3, [sp, #0]
 8002ac0:	2319      	movs	r3, #25
 8002ac2:	2201      	movs	r2, #1
 8002ac4:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002ac8:	68f8      	ldr	r0, [r7, #12]
 8002aca:	f000 f955 	bl	8002d78 <I2C_WaitOnFlagUntilTimeout>
 8002ace:	4603      	mov	r3, r0
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d001      	beq.n	8002ad8 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8002ad4:	2301      	movs	r3, #1
 8002ad6:	e0d1      	b.n	8002c7c <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	2221      	movs	r2, #33	@ 0x21
 8002adc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	2240      	movs	r2, #64	@ 0x40
 8002ae4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	2200      	movs	r2, #0
 8002aec:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	6a3a      	ldr	r2, [r7, #32]
 8002af2:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8002af8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	2200      	movs	r2, #0
 8002afe:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002b00:	88f8      	ldrh	r0, [r7, #6]
 8002b02:	893a      	ldrh	r2, [r7, #8]
 8002b04:	8979      	ldrh	r1, [r7, #10]
 8002b06:	697b      	ldr	r3, [r7, #20]
 8002b08:	9301      	str	r3, [sp, #4]
 8002b0a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002b0c:	9300      	str	r3, [sp, #0]
 8002b0e:	4603      	mov	r3, r0
 8002b10:	68f8      	ldr	r0, [r7, #12]
 8002b12:	f000 f8b9 	bl	8002c88 <I2C_RequestMemoryWrite>
 8002b16:	4603      	mov	r3, r0
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d005      	beq.n	8002b28 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	2200      	movs	r2, #0
 8002b20:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8002b24:	2301      	movs	r3, #1
 8002b26:	e0a9      	b.n	8002c7c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002b2c:	b29b      	uxth	r3, r3
 8002b2e:	2bff      	cmp	r3, #255	@ 0xff
 8002b30:	d90e      	bls.n	8002b50 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	22ff      	movs	r2, #255	@ 0xff
 8002b36:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002b3c:	b2da      	uxtb	r2, r3
 8002b3e:	8979      	ldrh	r1, [r7, #10]
 8002b40:	2300      	movs	r3, #0
 8002b42:	9300      	str	r3, [sp, #0]
 8002b44:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002b48:	68f8      	ldr	r0, [r7, #12]
 8002b4a:	f000 fad9 	bl	8003100 <I2C_TransferConfig>
 8002b4e:	e00f      	b.n	8002b70 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002b54:	b29a      	uxth	r2, r3
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002b5e:	b2da      	uxtb	r2, r3
 8002b60:	8979      	ldrh	r1, [r7, #10]
 8002b62:	2300      	movs	r3, #0
 8002b64:	9300      	str	r3, [sp, #0]
 8002b66:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002b6a:	68f8      	ldr	r0, [r7, #12]
 8002b6c:	f000 fac8 	bl	8003100 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002b70:	697a      	ldr	r2, [r7, #20]
 8002b72:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002b74:	68f8      	ldr	r0, [r7, #12]
 8002b76:	f000 f958 	bl	8002e2a <I2C_WaitOnTXISFlagUntilTimeout>
 8002b7a:	4603      	mov	r3, r0
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d001      	beq.n	8002b84 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8002b80:	2301      	movs	r3, #1
 8002b82:	e07b      	b.n	8002c7c <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b88:	781a      	ldrb	r2, [r3, #0]
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b94:	1c5a      	adds	r2, r3, #1
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002b9e:	b29b      	uxth	r3, r3
 8002ba0:	3b01      	subs	r3, #1
 8002ba2:	b29a      	uxth	r2, r3
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002bac:	3b01      	subs	r3, #1
 8002bae:	b29a      	uxth	r2, r3
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002bb8:	b29b      	uxth	r3, r3
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d034      	beq.n	8002c28 <HAL_I2C_Mem_Write+0x1c8>
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d130      	bne.n	8002c28 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002bc6:	697b      	ldr	r3, [r7, #20]
 8002bc8:	9300      	str	r3, [sp, #0]
 8002bca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002bcc:	2200      	movs	r2, #0
 8002bce:	2180      	movs	r1, #128	@ 0x80
 8002bd0:	68f8      	ldr	r0, [r7, #12]
 8002bd2:	f000 f8d1 	bl	8002d78 <I2C_WaitOnFlagUntilTimeout>
 8002bd6:	4603      	mov	r3, r0
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d001      	beq.n	8002be0 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8002bdc:	2301      	movs	r3, #1
 8002bde:	e04d      	b.n	8002c7c <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002be4:	b29b      	uxth	r3, r3
 8002be6:	2bff      	cmp	r3, #255	@ 0xff
 8002be8:	d90e      	bls.n	8002c08 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	22ff      	movs	r2, #255	@ 0xff
 8002bee:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002bf4:	b2da      	uxtb	r2, r3
 8002bf6:	8979      	ldrh	r1, [r7, #10]
 8002bf8:	2300      	movs	r3, #0
 8002bfa:	9300      	str	r3, [sp, #0]
 8002bfc:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002c00:	68f8      	ldr	r0, [r7, #12]
 8002c02:	f000 fa7d 	bl	8003100 <I2C_TransferConfig>
 8002c06:	e00f      	b.n	8002c28 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002c0c:	b29a      	uxth	r2, r3
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002c16:	b2da      	uxtb	r2, r3
 8002c18:	8979      	ldrh	r1, [r7, #10]
 8002c1a:	2300      	movs	r3, #0
 8002c1c:	9300      	str	r3, [sp, #0]
 8002c1e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002c22:	68f8      	ldr	r0, [r7, #12]
 8002c24:	f000 fa6c 	bl	8003100 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002c2c:	b29b      	uxth	r3, r3
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d19e      	bne.n	8002b70 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002c32:	697a      	ldr	r2, [r7, #20]
 8002c34:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002c36:	68f8      	ldr	r0, [r7, #12]
 8002c38:	f000 f93e 	bl	8002eb8 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002c3c:	4603      	mov	r3, r0
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d001      	beq.n	8002c46 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8002c42:	2301      	movs	r3, #1
 8002c44:	e01a      	b.n	8002c7c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	2220      	movs	r2, #32
 8002c4c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	6859      	ldr	r1, [r3, #4]
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	681a      	ldr	r2, [r3, #0]
 8002c58:	4b0a      	ldr	r3, [pc, #40]	@ (8002c84 <HAL_I2C_Mem_Write+0x224>)
 8002c5a:	400b      	ands	r3, r1
 8002c5c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	2220      	movs	r2, #32
 8002c62:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	2200      	movs	r2, #0
 8002c6a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	2200      	movs	r2, #0
 8002c72:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002c76:	2300      	movs	r3, #0
 8002c78:	e000      	b.n	8002c7c <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8002c7a:	2302      	movs	r3, #2
  }
}
 8002c7c:	4618      	mov	r0, r3
 8002c7e:	3718      	adds	r7, #24
 8002c80:	46bd      	mov	sp, r7
 8002c82:	bd80      	pop	{r7, pc}
 8002c84:	fe00e800 	.word	0xfe00e800

08002c88 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8002c88:	b580      	push	{r7, lr}
 8002c8a:	b086      	sub	sp, #24
 8002c8c:	af02      	add	r7, sp, #8
 8002c8e:	60f8      	str	r0, [r7, #12]
 8002c90:	4608      	mov	r0, r1
 8002c92:	4611      	mov	r1, r2
 8002c94:	461a      	mov	r2, r3
 8002c96:	4603      	mov	r3, r0
 8002c98:	817b      	strh	r3, [r7, #10]
 8002c9a:	460b      	mov	r3, r1
 8002c9c:	813b      	strh	r3, [r7, #8]
 8002c9e:	4613      	mov	r3, r2
 8002ca0:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8002ca2:	88fb      	ldrh	r3, [r7, #6]
 8002ca4:	b2da      	uxtb	r2, r3
 8002ca6:	8979      	ldrh	r1, [r7, #10]
 8002ca8:	4b20      	ldr	r3, [pc, #128]	@ (8002d2c <I2C_RequestMemoryWrite+0xa4>)
 8002caa:	9300      	str	r3, [sp, #0]
 8002cac:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002cb0:	68f8      	ldr	r0, [r7, #12]
 8002cb2:	f000 fa25 	bl	8003100 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002cb6:	69fa      	ldr	r2, [r7, #28]
 8002cb8:	69b9      	ldr	r1, [r7, #24]
 8002cba:	68f8      	ldr	r0, [r7, #12]
 8002cbc:	f000 f8b5 	bl	8002e2a <I2C_WaitOnTXISFlagUntilTimeout>
 8002cc0:	4603      	mov	r3, r0
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d001      	beq.n	8002cca <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8002cc6:	2301      	movs	r3, #1
 8002cc8:	e02c      	b.n	8002d24 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002cca:	88fb      	ldrh	r3, [r7, #6]
 8002ccc:	2b01      	cmp	r3, #1
 8002cce:	d105      	bne.n	8002cdc <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002cd0:	893b      	ldrh	r3, [r7, #8]
 8002cd2:	b2da      	uxtb	r2, r3
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	629a      	str	r2, [r3, #40]	@ 0x28
 8002cda:	e015      	b.n	8002d08 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002cdc:	893b      	ldrh	r3, [r7, #8]
 8002cde:	0a1b      	lsrs	r3, r3, #8
 8002ce0:	b29b      	uxth	r3, r3
 8002ce2:	b2da      	uxtb	r2, r3
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002cea:	69fa      	ldr	r2, [r7, #28]
 8002cec:	69b9      	ldr	r1, [r7, #24]
 8002cee:	68f8      	ldr	r0, [r7, #12]
 8002cf0:	f000 f89b 	bl	8002e2a <I2C_WaitOnTXISFlagUntilTimeout>
 8002cf4:	4603      	mov	r3, r0
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d001      	beq.n	8002cfe <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8002cfa:	2301      	movs	r3, #1
 8002cfc:	e012      	b.n	8002d24 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002cfe:	893b      	ldrh	r3, [r7, #8]
 8002d00:	b2da      	uxtb	r2, r3
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8002d08:	69fb      	ldr	r3, [r7, #28]
 8002d0a:	9300      	str	r3, [sp, #0]
 8002d0c:	69bb      	ldr	r3, [r7, #24]
 8002d0e:	2200      	movs	r2, #0
 8002d10:	2180      	movs	r1, #128	@ 0x80
 8002d12:	68f8      	ldr	r0, [r7, #12]
 8002d14:	f000 f830 	bl	8002d78 <I2C_WaitOnFlagUntilTimeout>
 8002d18:	4603      	mov	r3, r0
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d001      	beq.n	8002d22 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8002d1e:	2301      	movs	r3, #1
 8002d20:	e000      	b.n	8002d24 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8002d22:	2300      	movs	r3, #0
}
 8002d24:	4618      	mov	r0, r3
 8002d26:	3710      	adds	r7, #16
 8002d28:	46bd      	mov	sp, r7
 8002d2a:	bd80      	pop	{r7, pc}
 8002d2c:	80002000 	.word	0x80002000

08002d30 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002d30:	b480      	push	{r7}
 8002d32:	b083      	sub	sp, #12
 8002d34:	af00      	add	r7, sp, #0
 8002d36:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	699b      	ldr	r3, [r3, #24]
 8002d3e:	f003 0302 	and.w	r3, r3, #2
 8002d42:	2b02      	cmp	r3, #2
 8002d44:	d103      	bne.n	8002d4e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	2200      	movs	r2, #0
 8002d4c:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	699b      	ldr	r3, [r3, #24]
 8002d54:	f003 0301 	and.w	r3, r3, #1
 8002d58:	2b01      	cmp	r3, #1
 8002d5a:	d007      	beq.n	8002d6c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	699a      	ldr	r2, [r3, #24]
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	f042 0201 	orr.w	r2, r2, #1
 8002d6a:	619a      	str	r2, [r3, #24]
  }
}
 8002d6c:	bf00      	nop
 8002d6e:	370c      	adds	r7, #12
 8002d70:	46bd      	mov	sp, r7
 8002d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d76:	4770      	bx	lr

08002d78 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002d78:	b580      	push	{r7, lr}
 8002d7a:	b084      	sub	sp, #16
 8002d7c:	af00      	add	r7, sp, #0
 8002d7e:	60f8      	str	r0, [r7, #12]
 8002d80:	60b9      	str	r1, [r7, #8]
 8002d82:	603b      	str	r3, [r7, #0]
 8002d84:	4613      	mov	r3, r2
 8002d86:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002d88:	e03b      	b.n	8002e02 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002d8a:	69ba      	ldr	r2, [r7, #24]
 8002d8c:	6839      	ldr	r1, [r7, #0]
 8002d8e:	68f8      	ldr	r0, [r7, #12]
 8002d90:	f000 f8d6 	bl	8002f40 <I2C_IsErrorOccurred>
 8002d94:	4603      	mov	r3, r0
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d001      	beq.n	8002d9e <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8002d9a:	2301      	movs	r3, #1
 8002d9c:	e041      	b.n	8002e22 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002d9e:	683b      	ldr	r3, [r7, #0]
 8002da0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002da4:	d02d      	beq.n	8002e02 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002da6:	f7fe fa27 	bl	80011f8 <HAL_GetTick>
 8002daa:	4602      	mov	r2, r0
 8002dac:	69bb      	ldr	r3, [r7, #24]
 8002dae:	1ad3      	subs	r3, r2, r3
 8002db0:	683a      	ldr	r2, [r7, #0]
 8002db2:	429a      	cmp	r2, r3
 8002db4:	d302      	bcc.n	8002dbc <I2C_WaitOnFlagUntilTimeout+0x44>
 8002db6:	683b      	ldr	r3, [r7, #0]
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d122      	bne.n	8002e02 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	699a      	ldr	r2, [r3, #24]
 8002dc2:	68bb      	ldr	r3, [r7, #8]
 8002dc4:	4013      	ands	r3, r2
 8002dc6:	68ba      	ldr	r2, [r7, #8]
 8002dc8:	429a      	cmp	r2, r3
 8002dca:	bf0c      	ite	eq
 8002dcc:	2301      	moveq	r3, #1
 8002dce:	2300      	movne	r3, #0
 8002dd0:	b2db      	uxtb	r3, r3
 8002dd2:	461a      	mov	r2, r3
 8002dd4:	79fb      	ldrb	r3, [r7, #7]
 8002dd6:	429a      	cmp	r2, r3
 8002dd8:	d113      	bne.n	8002e02 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002dde:	f043 0220 	orr.w	r2, r3, #32
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	2220      	movs	r2, #32
 8002dea:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	2200      	movs	r2, #0
 8002df2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	2200      	movs	r2, #0
 8002dfa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8002dfe:	2301      	movs	r3, #1
 8002e00:	e00f      	b.n	8002e22 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	699a      	ldr	r2, [r3, #24]
 8002e08:	68bb      	ldr	r3, [r7, #8]
 8002e0a:	4013      	ands	r3, r2
 8002e0c:	68ba      	ldr	r2, [r7, #8]
 8002e0e:	429a      	cmp	r2, r3
 8002e10:	bf0c      	ite	eq
 8002e12:	2301      	moveq	r3, #1
 8002e14:	2300      	movne	r3, #0
 8002e16:	b2db      	uxtb	r3, r3
 8002e18:	461a      	mov	r2, r3
 8002e1a:	79fb      	ldrb	r3, [r7, #7]
 8002e1c:	429a      	cmp	r2, r3
 8002e1e:	d0b4      	beq.n	8002d8a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002e20:	2300      	movs	r3, #0
}
 8002e22:	4618      	mov	r0, r3
 8002e24:	3710      	adds	r7, #16
 8002e26:	46bd      	mov	sp, r7
 8002e28:	bd80      	pop	{r7, pc}

08002e2a <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002e2a:	b580      	push	{r7, lr}
 8002e2c:	b084      	sub	sp, #16
 8002e2e:	af00      	add	r7, sp, #0
 8002e30:	60f8      	str	r0, [r7, #12]
 8002e32:	60b9      	str	r1, [r7, #8]
 8002e34:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002e36:	e033      	b.n	8002ea0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002e38:	687a      	ldr	r2, [r7, #4]
 8002e3a:	68b9      	ldr	r1, [r7, #8]
 8002e3c:	68f8      	ldr	r0, [r7, #12]
 8002e3e:	f000 f87f 	bl	8002f40 <I2C_IsErrorOccurred>
 8002e42:	4603      	mov	r3, r0
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d001      	beq.n	8002e4c <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002e48:	2301      	movs	r3, #1
 8002e4a:	e031      	b.n	8002eb0 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002e4c:	68bb      	ldr	r3, [r7, #8]
 8002e4e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002e52:	d025      	beq.n	8002ea0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002e54:	f7fe f9d0 	bl	80011f8 <HAL_GetTick>
 8002e58:	4602      	mov	r2, r0
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	1ad3      	subs	r3, r2, r3
 8002e5e:	68ba      	ldr	r2, [r7, #8]
 8002e60:	429a      	cmp	r2, r3
 8002e62:	d302      	bcc.n	8002e6a <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8002e64:	68bb      	ldr	r3, [r7, #8]
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d11a      	bne.n	8002ea0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	699b      	ldr	r3, [r3, #24]
 8002e70:	f003 0302 	and.w	r3, r3, #2
 8002e74:	2b02      	cmp	r3, #2
 8002e76:	d013      	beq.n	8002ea0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e7c:	f043 0220 	orr.w	r2, r3, #32
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	2220      	movs	r2, #32
 8002e88:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	2200      	movs	r2, #0
 8002e90:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	2200      	movs	r2, #0
 8002e98:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8002e9c:	2301      	movs	r3, #1
 8002e9e:	e007      	b.n	8002eb0 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	699b      	ldr	r3, [r3, #24]
 8002ea6:	f003 0302 	and.w	r3, r3, #2
 8002eaa:	2b02      	cmp	r3, #2
 8002eac:	d1c4      	bne.n	8002e38 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002eae:	2300      	movs	r3, #0
}
 8002eb0:	4618      	mov	r0, r3
 8002eb2:	3710      	adds	r7, #16
 8002eb4:	46bd      	mov	sp, r7
 8002eb6:	bd80      	pop	{r7, pc}

08002eb8 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002eb8:	b580      	push	{r7, lr}
 8002eba:	b084      	sub	sp, #16
 8002ebc:	af00      	add	r7, sp, #0
 8002ebe:	60f8      	str	r0, [r7, #12]
 8002ec0:	60b9      	str	r1, [r7, #8]
 8002ec2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002ec4:	e02f      	b.n	8002f26 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002ec6:	687a      	ldr	r2, [r7, #4]
 8002ec8:	68b9      	ldr	r1, [r7, #8]
 8002eca:	68f8      	ldr	r0, [r7, #12]
 8002ecc:	f000 f838 	bl	8002f40 <I2C_IsErrorOccurred>
 8002ed0:	4603      	mov	r3, r0
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d001      	beq.n	8002eda <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002ed6:	2301      	movs	r3, #1
 8002ed8:	e02d      	b.n	8002f36 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002eda:	f7fe f98d 	bl	80011f8 <HAL_GetTick>
 8002ede:	4602      	mov	r2, r0
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	1ad3      	subs	r3, r2, r3
 8002ee4:	68ba      	ldr	r2, [r7, #8]
 8002ee6:	429a      	cmp	r2, r3
 8002ee8:	d302      	bcc.n	8002ef0 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8002eea:	68bb      	ldr	r3, [r7, #8]
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d11a      	bne.n	8002f26 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	699b      	ldr	r3, [r3, #24]
 8002ef6:	f003 0320 	and.w	r3, r3, #32
 8002efa:	2b20      	cmp	r3, #32
 8002efc:	d013      	beq.n	8002f26 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f02:	f043 0220 	orr.w	r2, r3, #32
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	2220      	movs	r2, #32
 8002f0e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	2200      	movs	r2, #0
 8002f16:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	2200      	movs	r2, #0
 8002f1e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8002f22:	2301      	movs	r3, #1
 8002f24:	e007      	b.n	8002f36 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	699b      	ldr	r3, [r3, #24]
 8002f2c:	f003 0320 	and.w	r3, r3, #32
 8002f30:	2b20      	cmp	r3, #32
 8002f32:	d1c8      	bne.n	8002ec6 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002f34:	2300      	movs	r3, #0
}
 8002f36:	4618      	mov	r0, r3
 8002f38:	3710      	adds	r7, #16
 8002f3a:	46bd      	mov	sp, r7
 8002f3c:	bd80      	pop	{r7, pc}
	...

08002f40 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002f40:	b580      	push	{r7, lr}
 8002f42:	b08a      	sub	sp, #40	@ 0x28
 8002f44:	af00      	add	r7, sp, #0
 8002f46:	60f8      	str	r0, [r7, #12]
 8002f48:	60b9      	str	r1, [r7, #8]
 8002f4a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002f4c:	2300      	movs	r3, #0
 8002f4e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	699b      	ldr	r3, [r3, #24]
 8002f58:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8002f5a:	2300      	movs	r3, #0
 8002f5c:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8002f62:	69bb      	ldr	r3, [r7, #24]
 8002f64:	f003 0310 	and.w	r3, r3, #16
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d068      	beq.n	800303e <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	2210      	movs	r2, #16
 8002f72:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002f74:	e049      	b.n	800300a <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002f76:	68bb      	ldr	r3, [r7, #8]
 8002f78:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002f7c:	d045      	beq.n	800300a <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002f7e:	f7fe f93b 	bl	80011f8 <HAL_GetTick>
 8002f82:	4602      	mov	r2, r0
 8002f84:	69fb      	ldr	r3, [r7, #28]
 8002f86:	1ad3      	subs	r3, r2, r3
 8002f88:	68ba      	ldr	r2, [r7, #8]
 8002f8a:	429a      	cmp	r2, r3
 8002f8c:	d302      	bcc.n	8002f94 <I2C_IsErrorOccurred+0x54>
 8002f8e:	68bb      	ldr	r3, [r7, #8]
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d13a      	bne.n	800300a <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	685b      	ldr	r3, [r3, #4]
 8002f9a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002f9e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002fa6:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	699b      	ldr	r3, [r3, #24]
 8002fae:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002fb2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002fb6:	d121      	bne.n	8002ffc <I2C_IsErrorOccurred+0xbc>
 8002fb8:	697b      	ldr	r3, [r7, #20]
 8002fba:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002fbe:	d01d      	beq.n	8002ffc <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8002fc0:	7cfb      	ldrb	r3, [r7, #19]
 8002fc2:	2b20      	cmp	r3, #32
 8002fc4:	d01a      	beq.n	8002ffc <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	685a      	ldr	r2, [r3, #4]
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002fd4:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8002fd6:	f7fe f90f 	bl	80011f8 <HAL_GetTick>
 8002fda:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002fdc:	e00e      	b.n	8002ffc <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8002fde:	f7fe f90b 	bl	80011f8 <HAL_GetTick>
 8002fe2:	4602      	mov	r2, r0
 8002fe4:	69fb      	ldr	r3, [r7, #28]
 8002fe6:	1ad3      	subs	r3, r2, r3
 8002fe8:	2b19      	cmp	r3, #25
 8002fea:	d907      	bls.n	8002ffc <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8002fec:	6a3b      	ldr	r3, [r7, #32]
 8002fee:	f043 0320 	orr.w	r3, r3, #32
 8002ff2:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8002ff4:	2301      	movs	r3, #1
 8002ff6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8002ffa:	e006      	b.n	800300a <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	699b      	ldr	r3, [r3, #24]
 8003002:	f003 0320 	and.w	r3, r3, #32
 8003006:	2b20      	cmp	r3, #32
 8003008:	d1e9      	bne.n	8002fde <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	699b      	ldr	r3, [r3, #24]
 8003010:	f003 0320 	and.w	r3, r3, #32
 8003014:	2b20      	cmp	r3, #32
 8003016:	d003      	beq.n	8003020 <I2C_IsErrorOccurred+0xe0>
 8003018:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800301c:	2b00      	cmp	r3, #0
 800301e:	d0aa      	beq.n	8002f76 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8003020:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003024:	2b00      	cmp	r3, #0
 8003026:	d103      	bne.n	8003030 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	2220      	movs	r2, #32
 800302e:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8003030:	6a3b      	ldr	r3, [r7, #32]
 8003032:	f043 0304 	orr.w	r3, r3, #4
 8003036:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8003038:	2301      	movs	r3, #1
 800303a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	699b      	ldr	r3, [r3, #24]
 8003044:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8003046:	69bb      	ldr	r3, [r7, #24]
 8003048:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800304c:	2b00      	cmp	r3, #0
 800304e:	d00b      	beq.n	8003068 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8003050:	6a3b      	ldr	r3, [r7, #32]
 8003052:	f043 0301 	orr.w	r3, r3, #1
 8003056:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003060:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003062:	2301      	movs	r3, #1
 8003064:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8003068:	69bb      	ldr	r3, [r7, #24]
 800306a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800306e:	2b00      	cmp	r3, #0
 8003070:	d00b      	beq.n	800308a <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8003072:	6a3b      	ldr	r3, [r7, #32]
 8003074:	f043 0308 	orr.w	r3, r3, #8
 8003078:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003082:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003084:	2301      	movs	r3, #1
 8003086:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800308a:	69bb      	ldr	r3, [r7, #24]
 800308c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003090:	2b00      	cmp	r3, #0
 8003092:	d00b      	beq.n	80030ac <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8003094:	6a3b      	ldr	r3, [r7, #32]
 8003096:	f043 0302 	orr.w	r3, r3, #2
 800309a:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80030a4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80030a6:	2301      	movs	r3, #1
 80030a8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 80030ac:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d01c      	beq.n	80030ee <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80030b4:	68f8      	ldr	r0, [r7, #12]
 80030b6:	f7ff fe3b 	bl	8002d30 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	6859      	ldr	r1, [r3, #4]
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	681a      	ldr	r2, [r3, #0]
 80030c4:	4b0d      	ldr	r3, [pc, #52]	@ (80030fc <I2C_IsErrorOccurred+0x1bc>)
 80030c6:	400b      	ands	r3, r1
 80030c8:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80030ce:	6a3b      	ldr	r3, [r7, #32]
 80030d0:	431a      	orrs	r2, r3
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	2220      	movs	r2, #32
 80030da:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	2200      	movs	r2, #0
 80030e2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	2200      	movs	r2, #0
 80030ea:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 80030ee:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 80030f2:	4618      	mov	r0, r3
 80030f4:	3728      	adds	r7, #40	@ 0x28
 80030f6:	46bd      	mov	sp, r7
 80030f8:	bd80      	pop	{r7, pc}
 80030fa:	bf00      	nop
 80030fc:	fe00e800 	.word	0xfe00e800

08003100 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003100:	b480      	push	{r7}
 8003102:	b087      	sub	sp, #28
 8003104:	af00      	add	r7, sp, #0
 8003106:	60f8      	str	r0, [r7, #12]
 8003108:	607b      	str	r3, [r7, #4]
 800310a:	460b      	mov	r3, r1
 800310c:	817b      	strh	r3, [r7, #10]
 800310e:	4613      	mov	r3, r2
 8003110:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003112:	897b      	ldrh	r3, [r7, #10]
 8003114:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003118:	7a7b      	ldrb	r3, [r7, #9]
 800311a:	041b      	lsls	r3, r3, #16
 800311c:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003120:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003126:	6a3b      	ldr	r3, [r7, #32]
 8003128:	4313      	orrs	r3, r2
 800312a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800312e:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	685a      	ldr	r2, [r3, #4]
 8003136:	6a3b      	ldr	r3, [r7, #32]
 8003138:	0d5b      	lsrs	r3, r3, #21
 800313a:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 800313e:	4b08      	ldr	r3, [pc, #32]	@ (8003160 <I2C_TransferConfig+0x60>)
 8003140:	430b      	orrs	r3, r1
 8003142:	43db      	mvns	r3, r3
 8003144:	ea02 0103 	and.w	r1, r2, r3
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	697a      	ldr	r2, [r7, #20]
 800314e:	430a      	orrs	r2, r1
 8003150:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8003152:	bf00      	nop
 8003154:	371c      	adds	r7, #28
 8003156:	46bd      	mov	sp, r7
 8003158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800315c:	4770      	bx	lr
 800315e:	bf00      	nop
 8003160:	03ff63ff 	.word	0x03ff63ff

08003164 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003164:	b480      	push	{r7}
 8003166:	b083      	sub	sp, #12
 8003168:	af00      	add	r7, sp, #0
 800316a:	6078      	str	r0, [r7, #4]
 800316c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003174:	b2db      	uxtb	r3, r3
 8003176:	2b20      	cmp	r3, #32
 8003178:	d138      	bne.n	80031ec <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003180:	2b01      	cmp	r3, #1
 8003182:	d101      	bne.n	8003188 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003184:	2302      	movs	r3, #2
 8003186:	e032      	b.n	80031ee <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	2201      	movs	r2, #1
 800318c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	2224      	movs	r2, #36	@ 0x24
 8003194:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	681a      	ldr	r2, [r3, #0]
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	f022 0201 	bic.w	r2, r2, #1
 80031a6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	681a      	ldr	r2, [r3, #0]
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80031b6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	6819      	ldr	r1, [r3, #0]
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	683a      	ldr	r2, [r7, #0]
 80031c4:	430a      	orrs	r2, r1
 80031c6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	681a      	ldr	r2, [r3, #0]
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	f042 0201 	orr.w	r2, r2, #1
 80031d6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	2220      	movs	r2, #32
 80031dc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	2200      	movs	r2, #0
 80031e4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80031e8:	2300      	movs	r3, #0
 80031ea:	e000      	b.n	80031ee <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80031ec:	2302      	movs	r3, #2
  }
}
 80031ee:	4618      	mov	r0, r3
 80031f0:	370c      	adds	r7, #12
 80031f2:	46bd      	mov	sp, r7
 80031f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f8:	4770      	bx	lr

080031fa <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80031fa:	b480      	push	{r7}
 80031fc:	b085      	sub	sp, #20
 80031fe:	af00      	add	r7, sp, #0
 8003200:	6078      	str	r0, [r7, #4]
 8003202:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800320a:	b2db      	uxtb	r3, r3
 800320c:	2b20      	cmp	r3, #32
 800320e:	d139      	bne.n	8003284 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003216:	2b01      	cmp	r3, #1
 8003218:	d101      	bne.n	800321e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800321a:	2302      	movs	r3, #2
 800321c:	e033      	b.n	8003286 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	2201      	movs	r2, #1
 8003222:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	2224      	movs	r2, #36	@ 0x24
 800322a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	681a      	ldr	r2, [r3, #0]
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	f022 0201 	bic.w	r2, r2, #1
 800323c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800324c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800324e:	683b      	ldr	r3, [r7, #0]
 8003250:	021b      	lsls	r3, r3, #8
 8003252:	68fa      	ldr	r2, [r7, #12]
 8003254:	4313      	orrs	r3, r2
 8003256:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	68fa      	ldr	r2, [r7, #12]
 800325e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	681a      	ldr	r2, [r3, #0]
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	f042 0201 	orr.w	r2, r2, #1
 800326e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	2220      	movs	r2, #32
 8003274:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	2200      	movs	r2, #0
 800327c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003280:	2300      	movs	r3, #0
 8003282:	e000      	b.n	8003286 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003284:	2302      	movs	r3, #2
  }
}
 8003286:	4618      	mov	r0, r3
 8003288:	3714      	adds	r7, #20
 800328a:	46bd      	mov	sp, r7
 800328c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003290:	4770      	bx	lr

08003292 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003292:	b580      	push	{r7, lr}
 8003294:	b084      	sub	sp, #16
 8003296:	af00      	add	r7, sp, #0
 8003298:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	2b00      	cmp	r3, #0
 800329e:	d101      	bne.n	80032a4 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80032a0:	2301      	movs	r3, #1
 80032a2:	e0b9      	b.n	8003418 <HAL_PCD_Init+0x186>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	f893 3291 	ldrb.w	r3, [r3, #657]	@ 0x291
 80032aa:	b2db      	uxtb	r3, r3
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d106      	bne.n	80032be <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	2200      	movs	r2, #0
 80032b4:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80032b8:	6878      	ldr	r0, [r7, #4]
 80032ba:	f7fd fe7f 	bl	8000fbc <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	2203      	movs	r2, #3
 80032c2:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	4618      	mov	r0, r3
 80032cc:	f003 f9fa 	bl	80066c4 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80032d0:	2300      	movs	r3, #0
 80032d2:	73fb      	strb	r3, [r7, #15]
 80032d4:	e03e      	b.n	8003354 <HAL_PCD_Init+0xc2>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80032d6:	7bfa      	ldrb	r2, [r7, #15]
 80032d8:	6879      	ldr	r1, [r7, #4]
 80032da:	4613      	mov	r3, r2
 80032dc:	009b      	lsls	r3, r3, #2
 80032de:	4413      	add	r3, r2
 80032e0:	00db      	lsls	r3, r3, #3
 80032e2:	440b      	add	r3, r1
 80032e4:	3311      	adds	r3, #17
 80032e6:	2201      	movs	r2, #1
 80032e8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80032ea:	7bfa      	ldrb	r2, [r7, #15]
 80032ec:	6879      	ldr	r1, [r7, #4]
 80032ee:	4613      	mov	r3, r2
 80032f0:	009b      	lsls	r3, r3, #2
 80032f2:	4413      	add	r3, r2
 80032f4:	00db      	lsls	r3, r3, #3
 80032f6:	440b      	add	r3, r1
 80032f8:	3310      	adds	r3, #16
 80032fa:	7bfa      	ldrb	r2, [r7, #15]
 80032fc:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80032fe:	7bfa      	ldrb	r2, [r7, #15]
 8003300:	6879      	ldr	r1, [r7, #4]
 8003302:	4613      	mov	r3, r2
 8003304:	009b      	lsls	r3, r3, #2
 8003306:	4413      	add	r3, r2
 8003308:	00db      	lsls	r3, r3, #3
 800330a:	440b      	add	r3, r1
 800330c:	3313      	adds	r3, #19
 800330e:	2200      	movs	r2, #0
 8003310:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003312:	7bfa      	ldrb	r2, [r7, #15]
 8003314:	6879      	ldr	r1, [r7, #4]
 8003316:	4613      	mov	r3, r2
 8003318:	009b      	lsls	r3, r3, #2
 800331a:	4413      	add	r3, r2
 800331c:	00db      	lsls	r3, r3, #3
 800331e:	440b      	add	r3, r1
 8003320:	3320      	adds	r3, #32
 8003322:	2200      	movs	r2, #0
 8003324:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003326:	7bfa      	ldrb	r2, [r7, #15]
 8003328:	6879      	ldr	r1, [r7, #4]
 800332a:	4613      	mov	r3, r2
 800332c:	009b      	lsls	r3, r3, #2
 800332e:	4413      	add	r3, r2
 8003330:	00db      	lsls	r3, r3, #3
 8003332:	440b      	add	r3, r1
 8003334:	3324      	adds	r3, #36	@ 0x24
 8003336:	2200      	movs	r2, #0
 8003338:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800333a:	7bfb      	ldrb	r3, [r7, #15]
 800333c:	6879      	ldr	r1, [r7, #4]
 800333e:	1c5a      	adds	r2, r3, #1
 8003340:	4613      	mov	r3, r2
 8003342:	009b      	lsls	r3, r3, #2
 8003344:	4413      	add	r3, r2
 8003346:	00db      	lsls	r3, r3, #3
 8003348:	440b      	add	r3, r1
 800334a:	2200      	movs	r2, #0
 800334c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800334e:	7bfb      	ldrb	r3, [r7, #15]
 8003350:	3301      	adds	r3, #1
 8003352:	73fb      	strb	r3, [r7, #15]
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	791b      	ldrb	r3, [r3, #4]
 8003358:	7bfa      	ldrb	r2, [r7, #15]
 800335a:	429a      	cmp	r2, r3
 800335c:	d3bb      	bcc.n	80032d6 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800335e:	2300      	movs	r3, #0
 8003360:	73fb      	strb	r3, [r7, #15]
 8003362:	e044      	b.n	80033ee <HAL_PCD_Init+0x15c>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003364:	7bfa      	ldrb	r2, [r7, #15]
 8003366:	6879      	ldr	r1, [r7, #4]
 8003368:	4613      	mov	r3, r2
 800336a:	009b      	lsls	r3, r3, #2
 800336c:	4413      	add	r3, r2
 800336e:	00db      	lsls	r3, r3, #3
 8003370:	440b      	add	r3, r1
 8003372:	f203 1351 	addw	r3, r3, #337	@ 0x151
 8003376:	2200      	movs	r2, #0
 8003378:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800337a:	7bfa      	ldrb	r2, [r7, #15]
 800337c:	6879      	ldr	r1, [r7, #4]
 800337e:	4613      	mov	r3, r2
 8003380:	009b      	lsls	r3, r3, #2
 8003382:	4413      	add	r3, r2
 8003384:	00db      	lsls	r3, r3, #3
 8003386:	440b      	add	r3, r1
 8003388:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800338c:	7bfa      	ldrb	r2, [r7, #15]
 800338e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003390:	7bfa      	ldrb	r2, [r7, #15]
 8003392:	6879      	ldr	r1, [r7, #4]
 8003394:	4613      	mov	r3, r2
 8003396:	009b      	lsls	r3, r3, #2
 8003398:	4413      	add	r3, r2
 800339a:	00db      	lsls	r3, r3, #3
 800339c:	440b      	add	r3, r1
 800339e:	f203 1353 	addw	r3, r3, #339	@ 0x153
 80033a2:	2200      	movs	r2, #0
 80033a4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80033a6:	7bfa      	ldrb	r2, [r7, #15]
 80033a8:	6879      	ldr	r1, [r7, #4]
 80033aa:	4613      	mov	r3, r2
 80033ac:	009b      	lsls	r3, r3, #2
 80033ae:	4413      	add	r3, r2
 80033b0:	00db      	lsls	r3, r3, #3
 80033b2:	440b      	add	r3, r1
 80033b4:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 80033b8:	2200      	movs	r2, #0
 80033ba:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80033bc:	7bfa      	ldrb	r2, [r7, #15]
 80033be:	6879      	ldr	r1, [r7, #4]
 80033c0:	4613      	mov	r3, r2
 80033c2:	009b      	lsls	r3, r3, #2
 80033c4:	4413      	add	r3, r2
 80033c6:	00db      	lsls	r3, r3, #3
 80033c8:	440b      	add	r3, r1
 80033ca:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80033ce:	2200      	movs	r2, #0
 80033d0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80033d2:	7bfa      	ldrb	r2, [r7, #15]
 80033d4:	6879      	ldr	r1, [r7, #4]
 80033d6:	4613      	mov	r3, r2
 80033d8:	009b      	lsls	r3, r3, #2
 80033da:	4413      	add	r3, r2
 80033dc:	00db      	lsls	r3, r3, #3
 80033de:	440b      	add	r3, r1
 80033e0:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 80033e4:	2200      	movs	r2, #0
 80033e6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80033e8:	7bfb      	ldrb	r3, [r7, #15]
 80033ea:	3301      	adds	r3, #1
 80033ec:	73fb      	strb	r3, [r7, #15]
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	791b      	ldrb	r3, [r3, #4]
 80033f2:	7bfa      	ldrb	r2, [r7, #15]
 80033f4:	429a      	cmp	r2, r3
 80033f6:	d3b5      	bcc.n	8003364 <HAL_PCD_Init+0xd2>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	6818      	ldr	r0, [r3, #0]
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	3304      	adds	r3, #4
 8003400:	e893 0006 	ldmia.w	r3, {r1, r2}
 8003404:	f003 f979 	bl	80066fa <USB_DevInit>

  hpcd->USB_Address = 0U;
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	2200      	movs	r2, #0
 800340c:	731a      	strb	r2, [r3, #12]
  hpcd->State = HAL_PCD_STATE_READY;
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	2201      	movs	r2, #1
 8003412:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
  return HAL_OK;
 8003416:	2300      	movs	r3, #0
}
 8003418:	4618      	mov	r0, r3
 800341a:	3710      	adds	r7, #16
 800341c:	46bd      	mov	sp, r7
 800341e:	bd80      	pop	{r7, pc}

08003420 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003420:	b580      	push	{r7, lr}
 8003422:	f5ad 7d00 	sub.w	sp, sp, #512	@ 0x200
 8003426:	af00      	add	r7, sp, #0
 8003428:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800342c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003430:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003432:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003436:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	2b00      	cmp	r3, #0
 800343e:	d102      	bne.n	8003446 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8003440:	2301      	movs	r3, #1
 8003442:	f000 bff4 	b.w	800442e <HAL_RCC_OscConfig+0x100e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003446:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800344a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	f003 0301 	and.w	r3, r3, #1
 8003456:	2b00      	cmp	r3, #0
 8003458:	f000 816d 	beq.w	8003736 <HAL_RCC_OscConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800345c:	4bb4      	ldr	r3, [pc, #720]	@ (8003730 <HAL_RCC_OscConfig+0x310>)
 800345e:	685b      	ldr	r3, [r3, #4]
 8003460:	f003 030c 	and.w	r3, r3, #12
 8003464:	2b04      	cmp	r3, #4
 8003466:	d00c      	beq.n	8003482 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003468:	4bb1      	ldr	r3, [pc, #708]	@ (8003730 <HAL_RCC_OscConfig+0x310>)
 800346a:	685b      	ldr	r3, [r3, #4]
 800346c:	f003 030c 	and.w	r3, r3, #12
 8003470:	2b08      	cmp	r3, #8
 8003472:	d157      	bne.n	8003524 <HAL_RCC_OscConfig+0x104>
 8003474:	4bae      	ldr	r3, [pc, #696]	@ (8003730 <HAL_RCC_OscConfig+0x310>)
 8003476:	685b      	ldr	r3, [r3, #4]
 8003478:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800347c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003480:	d150      	bne.n	8003524 <HAL_RCC_OscConfig+0x104>
 8003482:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003486:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800348a:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
 800348e:	fa93 f3a3 	rbit	r3, r3
 8003492:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003496:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800349a:	fab3 f383 	clz	r3, r3
 800349e:	b2db      	uxtb	r3, r3
 80034a0:	2b3f      	cmp	r3, #63	@ 0x3f
 80034a2:	d802      	bhi.n	80034aa <HAL_RCC_OscConfig+0x8a>
 80034a4:	4ba2      	ldr	r3, [pc, #648]	@ (8003730 <HAL_RCC_OscConfig+0x310>)
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	e015      	b.n	80034d6 <HAL_RCC_OscConfig+0xb6>
 80034aa:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80034ae:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034b2:	f8d7 31e8 	ldr.w	r3, [r7, #488]	@ 0x1e8
 80034b6:	fa93 f3a3 	rbit	r3, r3
 80034ba:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
 80034be:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80034c2:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 80034c6:	f8d7 31e0 	ldr.w	r3, [r7, #480]	@ 0x1e0
 80034ca:	fa93 f3a3 	rbit	r3, r3
 80034ce:	f8c7 31dc 	str.w	r3, [r7, #476]	@ 0x1dc
 80034d2:	4b97      	ldr	r3, [pc, #604]	@ (8003730 <HAL_RCC_OscConfig+0x310>)
 80034d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034d6:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80034da:	f8c7 21d8 	str.w	r2, [r7, #472]	@ 0x1d8
 80034de:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 80034e2:	fa92 f2a2 	rbit	r2, r2
 80034e6:	f8c7 21d4 	str.w	r2, [r7, #468]	@ 0x1d4
  return result;
 80034ea:	f8d7 21d4 	ldr.w	r2, [r7, #468]	@ 0x1d4
 80034ee:	fab2 f282 	clz	r2, r2
 80034f2:	b2d2      	uxtb	r2, r2
 80034f4:	f042 0220 	orr.w	r2, r2, #32
 80034f8:	b2d2      	uxtb	r2, r2
 80034fa:	f002 021f 	and.w	r2, r2, #31
 80034fe:	2101      	movs	r1, #1
 8003500:	fa01 f202 	lsl.w	r2, r1, r2
 8003504:	4013      	ands	r3, r2
 8003506:	2b00      	cmp	r3, #0
 8003508:	f000 8114 	beq.w	8003734 <HAL_RCC_OscConfig+0x314>
 800350c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003510:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	685b      	ldr	r3, [r3, #4]
 8003518:	2b00      	cmp	r3, #0
 800351a:	f040 810b 	bne.w	8003734 <HAL_RCC_OscConfig+0x314>
      {
        return HAL_ERROR;
 800351e:	2301      	movs	r3, #1
 8003520:	f000 bf85 	b.w	800442e <HAL_RCC_OscConfig+0x100e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003524:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003528:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	685b      	ldr	r3, [r3, #4]
 8003530:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003534:	d106      	bne.n	8003544 <HAL_RCC_OscConfig+0x124>
 8003536:	4b7e      	ldr	r3, [pc, #504]	@ (8003730 <HAL_RCC_OscConfig+0x310>)
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	4a7d      	ldr	r2, [pc, #500]	@ (8003730 <HAL_RCC_OscConfig+0x310>)
 800353c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003540:	6013      	str	r3, [r2, #0]
 8003542:	e036      	b.n	80035b2 <HAL_RCC_OscConfig+0x192>
 8003544:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003548:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	685b      	ldr	r3, [r3, #4]
 8003550:	2b00      	cmp	r3, #0
 8003552:	d10c      	bne.n	800356e <HAL_RCC_OscConfig+0x14e>
 8003554:	4b76      	ldr	r3, [pc, #472]	@ (8003730 <HAL_RCC_OscConfig+0x310>)
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	4a75      	ldr	r2, [pc, #468]	@ (8003730 <HAL_RCC_OscConfig+0x310>)
 800355a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800355e:	6013      	str	r3, [r2, #0]
 8003560:	4b73      	ldr	r3, [pc, #460]	@ (8003730 <HAL_RCC_OscConfig+0x310>)
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	4a72      	ldr	r2, [pc, #456]	@ (8003730 <HAL_RCC_OscConfig+0x310>)
 8003566:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800356a:	6013      	str	r3, [r2, #0]
 800356c:	e021      	b.n	80035b2 <HAL_RCC_OscConfig+0x192>
 800356e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003572:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	685b      	ldr	r3, [r3, #4]
 800357a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800357e:	d10c      	bne.n	800359a <HAL_RCC_OscConfig+0x17a>
 8003580:	4b6b      	ldr	r3, [pc, #428]	@ (8003730 <HAL_RCC_OscConfig+0x310>)
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	4a6a      	ldr	r2, [pc, #424]	@ (8003730 <HAL_RCC_OscConfig+0x310>)
 8003586:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800358a:	6013      	str	r3, [r2, #0]
 800358c:	4b68      	ldr	r3, [pc, #416]	@ (8003730 <HAL_RCC_OscConfig+0x310>)
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	4a67      	ldr	r2, [pc, #412]	@ (8003730 <HAL_RCC_OscConfig+0x310>)
 8003592:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003596:	6013      	str	r3, [r2, #0]
 8003598:	e00b      	b.n	80035b2 <HAL_RCC_OscConfig+0x192>
 800359a:	4b65      	ldr	r3, [pc, #404]	@ (8003730 <HAL_RCC_OscConfig+0x310>)
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	4a64      	ldr	r2, [pc, #400]	@ (8003730 <HAL_RCC_OscConfig+0x310>)
 80035a0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80035a4:	6013      	str	r3, [r2, #0]
 80035a6:	4b62      	ldr	r3, [pc, #392]	@ (8003730 <HAL_RCC_OscConfig+0x310>)
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	4a61      	ldr	r2, [pc, #388]	@ (8003730 <HAL_RCC_OscConfig+0x310>)
 80035ac:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80035b0:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80035b2:	4b5f      	ldr	r3, [pc, #380]	@ (8003730 <HAL_RCC_OscConfig+0x310>)
 80035b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80035b6:	f023 020f 	bic.w	r2, r3, #15
 80035ba:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80035be:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	689b      	ldr	r3, [r3, #8]
 80035c6:	495a      	ldr	r1, [pc, #360]	@ (8003730 <HAL_RCC_OscConfig+0x310>)
 80035c8:	4313      	orrs	r3, r2
 80035ca:	62cb      	str	r3, [r1, #44]	@ 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80035cc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80035d0:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	685b      	ldr	r3, [r3, #4]
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d054      	beq.n	8003686 <HAL_RCC_OscConfig+0x266>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035dc:	f7fd fe0c 	bl	80011f8 <HAL_GetTick>
 80035e0:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80035e4:	e00a      	b.n	80035fc <HAL_RCC_OscConfig+0x1dc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80035e6:	f7fd fe07 	bl	80011f8 <HAL_GetTick>
 80035ea:	4602      	mov	r2, r0
 80035ec:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80035f0:	1ad3      	subs	r3, r2, r3
 80035f2:	2b64      	cmp	r3, #100	@ 0x64
 80035f4:	d902      	bls.n	80035fc <HAL_RCC_OscConfig+0x1dc>
          {
            return HAL_TIMEOUT;
 80035f6:	2303      	movs	r3, #3
 80035f8:	f000 bf19 	b.w	800442e <HAL_RCC_OscConfig+0x100e>
 80035fc:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003600:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003604:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 8003608:	fa93 f3a3 	rbit	r3, r3
 800360c:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
  return result;
 8003610:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003614:	fab3 f383 	clz	r3, r3
 8003618:	b2db      	uxtb	r3, r3
 800361a:	2b3f      	cmp	r3, #63	@ 0x3f
 800361c:	d802      	bhi.n	8003624 <HAL_RCC_OscConfig+0x204>
 800361e:	4b44      	ldr	r3, [pc, #272]	@ (8003730 <HAL_RCC_OscConfig+0x310>)
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	e015      	b.n	8003650 <HAL_RCC_OscConfig+0x230>
 8003624:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003628:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800362c:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 8003630:	fa93 f3a3 	rbit	r3, r3
 8003634:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 8003638:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800363c:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 8003640:	f8d7 31c0 	ldr.w	r3, [r7, #448]	@ 0x1c0
 8003644:	fa93 f3a3 	rbit	r3, r3
 8003648:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
 800364c:	4b38      	ldr	r3, [pc, #224]	@ (8003730 <HAL_RCC_OscConfig+0x310>)
 800364e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003650:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8003654:	f8c7 21b8 	str.w	r2, [r7, #440]	@ 0x1b8
 8003658:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 800365c:	fa92 f2a2 	rbit	r2, r2
 8003660:	f8c7 21b4 	str.w	r2, [r7, #436]	@ 0x1b4
  return result;
 8003664:	f8d7 21b4 	ldr.w	r2, [r7, #436]	@ 0x1b4
 8003668:	fab2 f282 	clz	r2, r2
 800366c:	b2d2      	uxtb	r2, r2
 800366e:	f042 0220 	orr.w	r2, r2, #32
 8003672:	b2d2      	uxtb	r2, r2
 8003674:	f002 021f 	and.w	r2, r2, #31
 8003678:	2101      	movs	r1, #1
 800367a:	fa01 f202 	lsl.w	r2, r1, r2
 800367e:	4013      	ands	r3, r2
 8003680:	2b00      	cmp	r3, #0
 8003682:	d0b0      	beq.n	80035e6 <HAL_RCC_OscConfig+0x1c6>
 8003684:	e057      	b.n	8003736 <HAL_RCC_OscConfig+0x316>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003686:	f7fd fdb7 	bl	80011f8 <HAL_GetTick>
 800368a:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800368e:	e00a      	b.n	80036a6 <HAL_RCC_OscConfig+0x286>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003690:	f7fd fdb2 	bl	80011f8 <HAL_GetTick>
 8003694:	4602      	mov	r2, r0
 8003696:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800369a:	1ad3      	subs	r3, r2, r3
 800369c:	2b64      	cmp	r3, #100	@ 0x64
 800369e:	d902      	bls.n	80036a6 <HAL_RCC_OscConfig+0x286>
          {
            return HAL_TIMEOUT;
 80036a0:	2303      	movs	r3, #3
 80036a2:	f000 bec4 	b.w	800442e <HAL_RCC_OscConfig+0x100e>
 80036a6:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80036aa:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036ae:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
 80036b2:	fa93 f3a3 	rbit	r3, r3
 80036b6:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
  return result;
 80036ba:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80036be:	fab3 f383 	clz	r3, r3
 80036c2:	b2db      	uxtb	r3, r3
 80036c4:	2b3f      	cmp	r3, #63	@ 0x3f
 80036c6:	d802      	bhi.n	80036ce <HAL_RCC_OscConfig+0x2ae>
 80036c8:	4b19      	ldr	r3, [pc, #100]	@ (8003730 <HAL_RCC_OscConfig+0x310>)
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	e015      	b.n	80036fa <HAL_RCC_OscConfig+0x2da>
 80036ce:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80036d2:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036d6:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 80036da:	fa93 f3a3 	rbit	r3, r3
 80036de:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 80036e2:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80036e6:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 80036ea:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 80036ee:	fa93 f3a3 	rbit	r3, r3
 80036f2:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
 80036f6:	4b0e      	ldr	r3, [pc, #56]	@ (8003730 <HAL_RCC_OscConfig+0x310>)
 80036f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036fa:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80036fe:	f8c7 2198 	str.w	r2, [r7, #408]	@ 0x198
 8003702:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 8003706:	fa92 f2a2 	rbit	r2, r2
 800370a:	f8c7 2194 	str.w	r2, [r7, #404]	@ 0x194
  return result;
 800370e:	f8d7 2194 	ldr.w	r2, [r7, #404]	@ 0x194
 8003712:	fab2 f282 	clz	r2, r2
 8003716:	b2d2      	uxtb	r2, r2
 8003718:	f042 0220 	orr.w	r2, r2, #32
 800371c:	b2d2      	uxtb	r2, r2
 800371e:	f002 021f 	and.w	r2, r2, #31
 8003722:	2101      	movs	r1, #1
 8003724:	fa01 f202 	lsl.w	r2, r1, r2
 8003728:	4013      	ands	r3, r2
 800372a:	2b00      	cmp	r3, #0
 800372c:	d1b0      	bne.n	8003690 <HAL_RCC_OscConfig+0x270>
 800372e:	e002      	b.n	8003736 <HAL_RCC_OscConfig+0x316>
 8003730:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003734:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003736:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800373a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	f003 0302 	and.w	r3, r3, #2
 8003746:	2b00      	cmp	r3, #0
 8003748:	f000 816c 	beq.w	8003a24 <HAL_RCC_OscConfig+0x604>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800374c:	4bcc      	ldr	r3, [pc, #816]	@ (8003a80 <HAL_RCC_OscConfig+0x660>)
 800374e:	685b      	ldr	r3, [r3, #4]
 8003750:	f003 030c 	and.w	r3, r3, #12
 8003754:	2b00      	cmp	r3, #0
 8003756:	d00b      	beq.n	8003770 <HAL_RCC_OscConfig+0x350>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8003758:	4bc9      	ldr	r3, [pc, #804]	@ (8003a80 <HAL_RCC_OscConfig+0x660>)
 800375a:	685b      	ldr	r3, [r3, #4]
 800375c:	f003 030c 	and.w	r3, r3, #12
 8003760:	2b08      	cmp	r3, #8
 8003762:	d16d      	bne.n	8003840 <HAL_RCC_OscConfig+0x420>
 8003764:	4bc6      	ldr	r3, [pc, #792]	@ (8003a80 <HAL_RCC_OscConfig+0x660>)
 8003766:	685b      	ldr	r3, [r3, #4]
 8003768:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800376c:	2b00      	cmp	r3, #0
 800376e:	d167      	bne.n	8003840 <HAL_RCC_OscConfig+0x420>
 8003770:	2302      	movs	r3, #2
 8003772:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003776:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 800377a:	fa93 f3a3 	rbit	r3, r3
 800377e:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
  return result;
 8003782:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003786:	fab3 f383 	clz	r3, r3
 800378a:	b2db      	uxtb	r3, r3
 800378c:	2b3f      	cmp	r3, #63	@ 0x3f
 800378e:	d802      	bhi.n	8003796 <HAL_RCC_OscConfig+0x376>
 8003790:	4bbb      	ldr	r3, [pc, #748]	@ (8003a80 <HAL_RCC_OscConfig+0x660>)
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	e013      	b.n	80037be <HAL_RCC_OscConfig+0x39e>
 8003796:	2302      	movs	r3, #2
 8003798:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800379c:	f8d7 3188 	ldr.w	r3, [r7, #392]	@ 0x188
 80037a0:	fa93 f3a3 	rbit	r3, r3
 80037a4:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 80037a8:	2302      	movs	r3, #2
 80037aa:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 80037ae:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 80037b2:	fa93 f3a3 	rbit	r3, r3
 80037b6:	f8c7 317c 	str.w	r3, [r7, #380]	@ 0x17c
 80037ba:	4bb1      	ldr	r3, [pc, #708]	@ (8003a80 <HAL_RCC_OscConfig+0x660>)
 80037bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037be:	2202      	movs	r2, #2
 80037c0:	f8c7 2178 	str.w	r2, [r7, #376]	@ 0x178
 80037c4:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 80037c8:	fa92 f2a2 	rbit	r2, r2
 80037cc:	f8c7 2174 	str.w	r2, [r7, #372]	@ 0x174
  return result;
 80037d0:	f8d7 2174 	ldr.w	r2, [r7, #372]	@ 0x174
 80037d4:	fab2 f282 	clz	r2, r2
 80037d8:	b2d2      	uxtb	r2, r2
 80037da:	f042 0220 	orr.w	r2, r2, #32
 80037de:	b2d2      	uxtb	r2, r2
 80037e0:	f002 021f 	and.w	r2, r2, #31
 80037e4:	2101      	movs	r1, #1
 80037e6:	fa01 f202 	lsl.w	r2, r1, r2
 80037ea:	4013      	ands	r3, r2
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d00a      	beq.n	8003806 <HAL_RCC_OscConfig+0x3e6>
 80037f0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80037f4:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	691b      	ldr	r3, [r3, #16]
 80037fc:	2b01      	cmp	r3, #1
 80037fe:	d002      	beq.n	8003806 <HAL_RCC_OscConfig+0x3e6>
      {
        return HAL_ERROR;
 8003800:	2301      	movs	r3, #1
 8003802:	f000 be14 	b.w	800442e <HAL_RCC_OscConfig+0x100e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003806:	4b9e      	ldr	r3, [pc, #632]	@ (8003a80 <HAL_RCC_OscConfig+0x660>)
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800380e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003812:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	695b      	ldr	r3, [r3, #20]
 800381a:	21f8      	movs	r1, #248	@ 0xf8
 800381c:	f8c7 1170 	str.w	r1, [r7, #368]	@ 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003820:	f8d7 1170 	ldr.w	r1, [r7, #368]	@ 0x170
 8003824:	fa91 f1a1 	rbit	r1, r1
 8003828:	f8c7 116c 	str.w	r1, [r7, #364]	@ 0x16c
  return result;
 800382c:	f8d7 116c 	ldr.w	r1, [r7, #364]	@ 0x16c
 8003830:	fab1 f181 	clz	r1, r1
 8003834:	b2c9      	uxtb	r1, r1
 8003836:	408b      	lsls	r3, r1
 8003838:	4991      	ldr	r1, [pc, #580]	@ (8003a80 <HAL_RCC_OscConfig+0x660>)
 800383a:	4313      	orrs	r3, r2
 800383c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800383e:	e0f1      	b.n	8003a24 <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003840:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003844:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	691b      	ldr	r3, [r3, #16]
 800384c:	2b00      	cmp	r3, #0
 800384e:	f000 8083 	beq.w	8003958 <HAL_RCC_OscConfig+0x538>
 8003852:	2301      	movs	r3, #1
 8003854:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003858:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
 800385c:	fa93 f3a3 	rbit	r3, r3
 8003860:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
  return result;
 8003864:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003868:	fab3 f383 	clz	r3, r3
 800386c:	b2db      	uxtb	r3, r3
 800386e:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8003872:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8003876:	009b      	lsls	r3, r3, #2
 8003878:	461a      	mov	r2, r3
 800387a:	2301      	movs	r3, #1
 800387c:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800387e:	f7fd fcbb 	bl	80011f8 <HAL_GetTick>
 8003882:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003886:	e00a      	b.n	800389e <HAL_RCC_OscConfig+0x47e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003888:	f7fd fcb6 	bl	80011f8 <HAL_GetTick>
 800388c:	4602      	mov	r2, r0
 800388e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8003892:	1ad3      	subs	r3, r2, r3
 8003894:	2b02      	cmp	r3, #2
 8003896:	d902      	bls.n	800389e <HAL_RCC_OscConfig+0x47e>
          {
            return HAL_TIMEOUT;
 8003898:	2303      	movs	r3, #3
 800389a:	f000 bdc8 	b.w	800442e <HAL_RCC_OscConfig+0x100e>
 800389e:	2302      	movs	r3, #2
 80038a0:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038a4:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 80038a8:	fa93 f3a3 	rbit	r3, r3
 80038ac:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
  return result;
 80038b0:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80038b4:	fab3 f383 	clz	r3, r3
 80038b8:	b2db      	uxtb	r3, r3
 80038ba:	2b3f      	cmp	r3, #63	@ 0x3f
 80038bc:	d802      	bhi.n	80038c4 <HAL_RCC_OscConfig+0x4a4>
 80038be:	4b70      	ldr	r3, [pc, #448]	@ (8003a80 <HAL_RCC_OscConfig+0x660>)
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	e013      	b.n	80038ec <HAL_RCC_OscConfig+0x4cc>
 80038c4:	2302      	movs	r3, #2
 80038c6:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038ca:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 80038ce:	fa93 f3a3 	rbit	r3, r3
 80038d2:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 80038d6:	2302      	movs	r3, #2
 80038d8:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 80038dc:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 80038e0:	fa93 f3a3 	rbit	r3, r3
 80038e4:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
 80038e8:	4b65      	ldr	r3, [pc, #404]	@ (8003a80 <HAL_RCC_OscConfig+0x660>)
 80038ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038ec:	2202      	movs	r2, #2
 80038ee:	f8c7 2148 	str.w	r2, [r7, #328]	@ 0x148
 80038f2:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 80038f6:	fa92 f2a2 	rbit	r2, r2
 80038fa:	f8c7 2144 	str.w	r2, [r7, #324]	@ 0x144
  return result;
 80038fe:	f8d7 2144 	ldr.w	r2, [r7, #324]	@ 0x144
 8003902:	fab2 f282 	clz	r2, r2
 8003906:	b2d2      	uxtb	r2, r2
 8003908:	f042 0220 	orr.w	r2, r2, #32
 800390c:	b2d2      	uxtb	r2, r2
 800390e:	f002 021f 	and.w	r2, r2, #31
 8003912:	2101      	movs	r1, #1
 8003914:	fa01 f202 	lsl.w	r2, r1, r2
 8003918:	4013      	ands	r3, r2
 800391a:	2b00      	cmp	r3, #0
 800391c:	d0b4      	beq.n	8003888 <HAL_RCC_OscConfig+0x468>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800391e:	4b58      	ldr	r3, [pc, #352]	@ (8003a80 <HAL_RCC_OscConfig+0x660>)
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003926:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800392a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	695b      	ldr	r3, [r3, #20]
 8003932:	21f8      	movs	r1, #248	@ 0xf8
 8003934:	f8c7 1140 	str.w	r1, [r7, #320]	@ 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003938:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 800393c:	fa91 f1a1 	rbit	r1, r1
 8003940:	f8c7 113c 	str.w	r1, [r7, #316]	@ 0x13c
  return result;
 8003944:	f8d7 113c 	ldr.w	r1, [r7, #316]	@ 0x13c
 8003948:	fab1 f181 	clz	r1, r1
 800394c:	b2c9      	uxtb	r1, r1
 800394e:	408b      	lsls	r3, r1
 8003950:	494b      	ldr	r1, [pc, #300]	@ (8003a80 <HAL_RCC_OscConfig+0x660>)
 8003952:	4313      	orrs	r3, r2
 8003954:	600b      	str	r3, [r1, #0]
 8003956:	e065      	b.n	8003a24 <HAL_RCC_OscConfig+0x604>
 8003958:	2301      	movs	r3, #1
 800395a:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800395e:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8003962:	fa93 f3a3 	rbit	r3, r3
 8003966:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  return result;
 800396a:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800396e:	fab3 f383 	clz	r3, r3
 8003972:	b2db      	uxtb	r3, r3
 8003974:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8003978:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 800397c:	009b      	lsls	r3, r3, #2
 800397e:	461a      	mov	r2, r3
 8003980:	2300      	movs	r3, #0
 8003982:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003984:	f7fd fc38 	bl	80011f8 <HAL_GetTick>
 8003988:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800398c:	e00a      	b.n	80039a4 <HAL_RCC_OscConfig+0x584>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800398e:	f7fd fc33 	bl	80011f8 <HAL_GetTick>
 8003992:	4602      	mov	r2, r0
 8003994:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8003998:	1ad3      	subs	r3, r2, r3
 800399a:	2b02      	cmp	r3, #2
 800399c:	d902      	bls.n	80039a4 <HAL_RCC_OscConfig+0x584>
          {
            return HAL_TIMEOUT;
 800399e:	2303      	movs	r3, #3
 80039a0:	f000 bd45 	b.w	800442e <HAL_RCC_OscConfig+0x100e>
 80039a4:	2302      	movs	r3, #2
 80039a6:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039aa:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 80039ae:	fa93 f3a3 	rbit	r3, r3
 80039b2:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  return result;
 80039b6:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80039ba:	fab3 f383 	clz	r3, r3
 80039be:	b2db      	uxtb	r3, r3
 80039c0:	2b3f      	cmp	r3, #63	@ 0x3f
 80039c2:	d802      	bhi.n	80039ca <HAL_RCC_OscConfig+0x5aa>
 80039c4:	4b2e      	ldr	r3, [pc, #184]	@ (8003a80 <HAL_RCC_OscConfig+0x660>)
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	e013      	b.n	80039f2 <HAL_RCC_OscConfig+0x5d2>
 80039ca:	2302      	movs	r3, #2
 80039cc:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039d0:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80039d4:	fa93 f3a3 	rbit	r3, r3
 80039d8:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 80039dc:	2302      	movs	r3, #2
 80039de:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 80039e2:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80039e6:	fa93 f3a3 	rbit	r3, r3
 80039ea:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 80039ee:	4b24      	ldr	r3, [pc, #144]	@ (8003a80 <HAL_RCC_OscConfig+0x660>)
 80039f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039f2:	2202      	movs	r2, #2
 80039f4:	f8c7 2118 	str.w	r2, [r7, #280]	@ 0x118
 80039f8:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 80039fc:	fa92 f2a2 	rbit	r2, r2
 8003a00:	f8c7 2114 	str.w	r2, [r7, #276]	@ 0x114
  return result;
 8003a04:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 8003a08:	fab2 f282 	clz	r2, r2
 8003a0c:	b2d2      	uxtb	r2, r2
 8003a0e:	f042 0220 	orr.w	r2, r2, #32
 8003a12:	b2d2      	uxtb	r2, r2
 8003a14:	f002 021f 	and.w	r2, r2, #31
 8003a18:	2101      	movs	r1, #1
 8003a1a:	fa01 f202 	lsl.w	r2, r1, r2
 8003a1e:	4013      	ands	r3, r2
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d1b4      	bne.n	800398e <HAL_RCC_OscConfig+0x56e>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003a24:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003a28:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	f003 0308 	and.w	r3, r3, #8
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	f000 8115 	beq.w	8003c64 <HAL_RCC_OscConfig+0x844>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003a3a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003a3e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	699b      	ldr	r3, [r3, #24]
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d07e      	beq.n	8003b48 <HAL_RCC_OscConfig+0x728>
 8003a4a:	2301      	movs	r3, #1
 8003a4c:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a50:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8003a54:	fa93 f3a3 	rbit	r3, r3
 8003a58:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
  return result;
 8003a5c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003a60:	fab3 f383 	clz	r3, r3
 8003a64:	b2db      	uxtb	r3, r3
 8003a66:	461a      	mov	r2, r3
 8003a68:	4b06      	ldr	r3, [pc, #24]	@ (8003a84 <HAL_RCC_OscConfig+0x664>)
 8003a6a:	4413      	add	r3, r2
 8003a6c:	009b      	lsls	r3, r3, #2
 8003a6e:	461a      	mov	r2, r3
 8003a70:	2301      	movs	r3, #1
 8003a72:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003a74:	f7fd fbc0 	bl	80011f8 <HAL_GetTick>
 8003a78:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003a7c:	e00f      	b.n	8003a9e <HAL_RCC_OscConfig+0x67e>
 8003a7e:	bf00      	nop
 8003a80:	40021000 	.word	0x40021000
 8003a84:	10908120 	.word	0x10908120
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003a88:	f7fd fbb6 	bl	80011f8 <HAL_GetTick>
 8003a8c:	4602      	mov	r2, r0
 8003a8e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8003a92:	1ad3      	subs	r3, r2, r3
 8003a94:	2b02      	cmp	r3, #2
 8003a96:	d902      	bls.n	8003a9e <HAL_RCC_OscConfig+0x67e>
        {
          return HAL_TIMEOUT;
 8003a98:	2303      	movs	r3, #3
 8003a9a:	f000 bcc8 	b.w	800442e <HAL_RCC_OscConfig+0x100e>
 8003a9e:	2302      	movs	r3, #2
 8003aa0:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003aa4:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8003aa8:	fa93 f3a3 	rbit	r3, r3
 8003aac:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8003ab0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003ab4:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8003ab8:	2202      	movs	r2, #2
 8003aba:	601a      	str	r2, [r3, #0]
 8003abc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003ac0:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	fa93 f2a3 	rbit	r2, r3
 8003aca:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003ace:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8003ad2:	601a      	str	r2, [r3, #0]
 8003ad4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003ad8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003adc:	2202      	movs	r2, #2
 8003ade:	601a      	str	r2, [r3, #0]
 8003ae0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003ae4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	fa93 f2a3 	rbit	r2, r3
 8003aee:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003af2:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8003af6:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003af8:	4bb0      	ldr	r3, [pc, #704]	@ (8003dbc <HAL_RCC_OscConfig+0x99c>)
 8003afa:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003afc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003b00:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8003b04:	2102      	movs	r1, #2
 8003b06:	6019      	str	r1, [r3, #0]
 8003b08:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003b0c:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	fa93 f1a3 	rbit	r1, r3
 8003b16:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003b1a:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8003b1e:	6019      	str	r1, [r3, #0]
  return result;
 8003b20:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003b24:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	fab3 f383 	clz	r3, r3
 8003b2e:	b2db      	uxtb	r3, r3
 8003b30:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8003b34:	b2db      	uxtb	r3, r3
 8003b36:	f003 031f 	and.w	r3, r3, #31
 8003b3a:	2101      	movs	r1, #1
 8003b3c:	fa01 f303 	lsl.w	r3, r1, r3
 8003b40:	4013      	ands	r3, r2
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d0a0      	beq.n	8003a88 <HAL_RCC_OscConfig+0x668>
 8003b46:	e08d      	b.n	8003c64 <HAL_RCC_OscConfig+0x844>
 8003b48:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003b4c:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8003b50:	2201      	movs	r2, #1
 8003b52:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b54:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003b58:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	fa93 f2a3 	rbit	r2, r3
 8003b62:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003b66:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8003b6a:	601a      	str	r2, [r3, #0]
  return result;
 8003b6c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003b70:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8003b74:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003b76:	fab3 f383 	clz	r3, r3
 8003b7a:	b2db      	uxtb	r3, r3
 8003b7c:	461a      	mov	r2, r3
 8003b7e:	4b90      	ldr	r3, [pc, #576]	@ (8003dc0 <HAL_RCC_OscConfig+0x9a0>)
 8003b80:	4413      	add	r3, r2
 8003b82:	009b      	lsls	r3, r3, #2
 8003b84:	461a      	mov	r2, r3
 8003b86:	2300      	movs	r3, #0
 8003b88:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003b8a:	f7fd fb35 	bl	80011f8 <HAL_GetTick>
 8003b8e:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003b92:	e00a      	b.n	8003baa <HAL_RCC_OscConfig+0x78a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003b94:	f7fd fb30 	bl	80011f8 <HAL_GetTick>
 8003b98:	4602      	mov	r2, r0
 8003b9a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8003b9e:	1ad3      	subs	r3, r2, r3
 8003ba0:	2b02      	cmp	r3, #2
 8003ba2:	d902      	bls.n	8003baa <HAL_RCC_OscConfig+0x78a>
        {
          return HAL_TIMEOUT;
 8003ba4:	2303      	movs	r3, #3
 8003ba6:	f000 bc42 	b.w	800442e <HAL_RCC_OscConfig+0x100e>
 8003baa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003bae:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8003bb2:	2202      	movs	r2, #2
 8003bb4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003bb6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003bba:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	fa93 f2a3 	rbit	r2, r3
 8003bc4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003bc8:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8003bcc:	601a      	str	r2, [r3, #0]
 8003bce:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003bd2:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8003bd6:	2202      	movs	r2, #2
 8003bd8:	601a      	str	r2, [r3, #0]
 8003bda:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003bde:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	fa93 f2a3 	rbit	r2, r3
 8003be8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003bec:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8003bf0:	601a      	str	r2, [r3, #0]
 8003bf2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003bf6:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8003bfa:	2202      	movs	r2, #2
 8003bfc:	601a      	str	r2, [r3, #0]
 8003bfe:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003c02:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	fa93 f2a3 	rbit	r2, r3
 8003c0c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003c10:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8003c14:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003c16:	4b69      	ldr	r3, [pc, #420]	@ (8003dbc <HAL_RCC_OscConfig+0x99c>)
 8003c18:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003c1a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003c1e:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8003c22:	2102      	movs	r1, #2
 8003c24:	6019      	str	r1, [r3, #0]
 8003c26:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003c2a:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	fa93 f1a3 	rbit	r1, r3
 8003c34:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003c38:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8003c3c:	6019      	str	r1, [r3, #0]
  return result;
 8003c3e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003c42:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	fab3 f383 	clz	r3, r3
 8003c4c:	b2db      	uxtb	r3, r3
 8003c4e:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8003c52:	b2db      	uxtb	r3, r3
 8003c54:	f003 031f 	and.w	r3, r3, #31
 8003c58:	2101      	movs	r1, #1
 8003c5a:	fa01 f303 	lsl.w	r3, r1, r3
 8003c5e:	4013      	ands	r3, r2
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d197      	bne.n	8003b94 <HAL_RCC_OscConfig+0x774>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003c64:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003c68:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	f003 0304 	and.w	r3, r3, #4
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	f000 819e 	beq.w	8003fb6 <HAL_RCC_OscConfig+0xb96>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003c7a:	2300      	movs	r3, #0
 8003c7c:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003c80:	4b4e      	ldr	r3, [pc, #312]	@ (8003dbc <HAL_RCC_OscConfig+0x99c>)
 8003c82:	69db      	ldr	r3, [r3, #28]
 8003c84:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d116      	bne.n	8003cba <HAL_RCC_OscConfig+0x89a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003c8c:	4b4b      	ldr	r3, [pc, #300]	@ (8003dbc <HAL_RCC_OscConfig+0x99c>)
 8003c8e:	69db      	ldr	r3, [r3, #28]
 8003c90:	4a4a      	ldr	r2, [pc, #296]	@ (8003dbc <HAL_RCC_OscConfig+0x99c>)
 8003c92:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003c96:	61d3      	str	r3, [r2, #28]
 8003c98:	4b48      	ldr	r3, [pc, #288]	@ (8003dbc <HAL_RCC_OscConfig+0x99c>)
 8003c9a:	69db      	ldr	r3, [r3, #28]
 8003c9c:	f003 5280 	and.w	r2, r3, #268435456	@ 0x10000000
 8003ca0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003ca4:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 8003ca8:	601a      	str	r2, [r3, #0]
 8003caa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003cae:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 8003cb2:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8003cb4:	2301      	movs	r3, #1
 8003cb6:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003cba:	4b42      	ldr	r3, [pc, #264]	@ (8003dc4 <HAL_RCC_OscConfig+0x9a4>)
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d11a      	bne.n	8003cfc <HAL_RCC_OscConfig+0x8dc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003cc6:	4b3f      	ldr	r3, [pc, #252]	@ (8003dc4 <HAL_RCC_OscConfig+0x9a4>)
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	4a3e      	ldr	r2, [pc, #248]	@ (8003dc4 <HAL_RCC_OscConfig+0x9a4>)
 8003ccc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003cd0:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003cd2:	f7fd fa91 	bl	80011f8 <HAL_GetTick>
 8003cd6:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003cda:	e009      	b.n	8003cf0 <HAL_RCC_OscConfig+0x8d0>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003cdc:	f7fd fa8c 	bl	80011f8 <HAL_GetTick>
 8003ce0:	4602      	mov	r2, r0
 8003ce2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8003ce6:	1ad3      	subs	r3, r2, r3
 8003ce8:	2b64      	cmp	r3, #100	@ 0x64
 8003cea:	d901      	bls.n	8003cf0 <HAL_RCC_OscConfig+0x8d0>
        {
          return HAL_TIMEOUT;
 8003cec:	2303      	movs	r3, #3
 8003cee:	e39e      	b.n	800442e <HAL_RCC_OscConfig+0x100e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003cf0:	4b34      	ldr	r3, [pc, #208]	@ (8003dc4 <HAL_RCC_OscConfig+0x9a4>)
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d0ef      	beq.n	8003cdc <HAL_RCC_OscConfig+0x8bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003cfc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003d00:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	68db      	ldr	r3, [r3, #12]
 8003d08:	2b01      	cmp	r3, #1
 8003d0a:	d106      	bne.n	8003d1a <HAL_RCC_OscConfig+0x8fa>
 8003d0c:	4b2b      	ldr	r3, [pc, #172]	@ (8003dbc <HAL_RCC_OscConfig+0x99c>)
 8003d0e:	6a1b      	ldr	r3, [r3, #32]
 8003d10:	4a2a      	ldr	r2, [pc, #168]	@ (8003dbc <HAL_RCC_OscConfig+0x99c>)
 8003d12:	f043 0301 	orr.w	r3, r3, #1
 8003d16:	6213      	str	r3, [r2, #32]
 8003d18:	e035      	b.n	8003d86 <HAL_RCC_OscConfig+0x966>
 8003d1a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003d1e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	68db      	ldr	r3, [r3, #12]
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d10c      	bne.n	8003d44 <HAL_RCC_OscConfig+0x924>
 8003d2a:	4b24      	ldr	r3, [pc, #144]	@ (8003dbc <HAL_RCC_OscConfig+0x99c>)
 8003d2c:	6a1b      	ldr	r3, [r3, #32]
 8003d2e:	4a23      	ldr	r2, [pc, #140]	@ (8003dbc <HAL_RCC_OscConfig+0x99c>)
 8003d30:	f023 0301 	bic.w	r3, r3, #1
 8003d34:	6213      	str	r3, [r2, #32]
 8003d36:	4b21      	ldr	r3, [pc, #132]	@ (8003dbc <HAL_RCC_OscConfig+0x99c>)
 8003d38:	6a1b      	ldr	r3, [r3, #32]
 8003d3a:	4a20      	ldr	r2, [pc, #128]	@ (8003dbc <HAL_RCC_OscConfig+0x99c>)
 8003d3c:	f023 0304 	bic.w	r3, r3, #4
 8003d40:	6213      	str	r3, [r2, #32]
 8003d42:	e020      	b.n	8003d86 <HAL_RCC_OscConfig+0x966>
 8003d44:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003d48:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	68db      	ldr	r3, [r3, #12]
 8003d50:	2b05      	cmp	r3, #5
 8003d52:	d10c      	bne.n	8003d6e <HAL_RCC_OscConfig+0x94e>
 8003d54:	4b19      	ldr	r3, [pc, #100]	@ (8003dbc <HAL_RCC_OscConfig+0x99c>)
 8003d56:	6a1b      	ldr	r3, [r3, #32]
 8003d58:	4a18      	ldr	r2, [pc, #96]	@ (8003dbc <HAL_RCC_OscConfig+0x99c>)
 8003d5a:	f043 0304 	orr.w	r3, r3, #4
 8003d5e:	6213      	str	r3, [r2, #32]
 8003d60:	4b16      	ldr	r3, [pc, #88]	@ (8003dbc <HAL_RCC_OscConfig+0x99c>)
 8003d62:	6a1b      	ldr	r3, [r3, #32]
 8003d64:	4a15      	ldr	r2, [pc, #84]	@ (8003dbc <HAL_RCC_OscConfig+0x99c>)
 8003d66:	f043 0301 	orr.w	r3, r3, #1
 8003d6a:	6213      	str	r3, [r2, #32]
 8003d6c:	e00b      	b.n	8003d86 <HAL_RCC_OscConfig+0x966>
 8003d6e:	4b13      	ldr	r3, [pc, #76]	@ (8003dbc <HAL_RCC_OscConfig+0x99c>)
 8003d70:	6a1b      	ldr	r3, [r3, #32]
 8003d72:	4a12      	ldr	r2, [pc, #72]	@ (8003dbc <HAL_RCC_OscConfig+0x99c>)
 8003d74:	f023 0301 	bic.w	r3, r3, #1
 8003d78:	6213      	str	r3, [r2, #32]
 8003d7a:	4b10      	ldr	r3, [pc, #64]	@ (8003dbc <HAL_RCC_OscConfig+0x99c>)
 8003d7c:	6a1b      	ldr	r3, [r3, #32]
 8003d7e:	4a0f      	ldr	r2, [pc, #60]	@ (8003dbc <HAL_RCC_OscConfig+0x99c>)
 8003d80:	f023 0304 	bic.w	r3, r3, #4
 8003d84:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003d86:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003d8a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	68db      	ldr	r3, [r3, #12]
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	f000 8087 	beq.w	8003ea6 <HAL_RCC_OscConfig+0xa86>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003d98:	f7fd fa2e 	bl	80011f8 <HAL_GetTick>
 8003d9c:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003da0:	e012      	b.n	8003dc8 <HAL_RCC_OscConfig+0x9a8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003da2:	f7fd fa29 	bl	80011f8 <HAL_GetTick>
 8003da6:	4602      	mov	r2, r0
 8003da8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8003dac:	1ad3      	subs	r3, r2, r3
 8003dae:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003db2:	4293      	cmp	r3, r2
 8003db4:	d908      	bls.n	8003dc8 <HAL_RCC_OscConfig+0x9a8>
        {
          return HAL_TIMEOUT;
 8003db6:	2303      	movs	r3, #3
 8003db8:	e339      	b.n	800442e <HAL_RCC_OscConfig+0x100e>
 8003dba:	bf00      	nop
 8003dbc:	40021000 	.word	0x40021000
 8003dc0:	10908120 	.word	0x10908120
 8003dc4:	40007000 	.word	0x40007000
 8003dc8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003dcc:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8003dd0:	2202      	movs	r2, #2
 8003dd2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003dd4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003dd8:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	fa93 f2a3 	rbit	r2, r3
 8003de2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003de6:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8003dea:	601a      	str	r2, [r3, #0]
 8003dec:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003df0:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8003df4:	2202      	movs	r2, #2
 8003df6:	601a      	str	r2, [r3, #0]
 8003df8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003dfc:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	fa93 f2a3 	rbit	r2, r3
 8003e06:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003e0a:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8003e0e:	601a      	str	r2, [r3, #0]
  return result;
 8003e10:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003e14:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8003e18:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e1a:	fab3 f383 	clz	r3, r3
 8003e1e:	b2db      	uxtb	r3, r3
 8003e20:	f023 035f 	bic.w	r3, r3, #95	@ 0x5f
 8003e24:	b2db      	uxtb	r3, r3
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d102      	bne.n	8003e30 <HAL_RCC_OscConfig+0xa10>
 8003e2a:	4b98      	ldr	r3, [pc, #608]	@ (800408c <HAL_RCC_OscConfig+0xc6c>)
 8003e2c:	6a1b      	ldr	r3, [r3, #32]
 8003e2e:	e013      	b.n	8003e58 <HAL_RCC_OscConfig+0xa38>
 8003e30:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003e34:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8003e38:	2202      	movs	r2, #2
 8003e3a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e3c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003e40:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	fa93 f2a3 	rbit	r2, r3
 8003e4a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003e4e:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8003e52:	601a      	str	r2, [r3, #0]
 8003e54:	4b8d      	ldr	r3, [pc, #564]	@ (800408c <HAL_RCC_OscConfig+0xc6c>)
 8003e56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e58:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003e5c:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 8003e60:	2102      	movs	r1, #2
 8003e62:	6011      	str	r1, [r2, #0]
 8003e64:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003e68:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 8003e6c:	6812      	ldr	r2, [r2, #0]
 8003e6e:	fa92 f1a2 	rbit	r1, r2
 8003e72:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003e76:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8003e7a:	6011      	str	r1, [r2, #0]
  return result;
 8003e7c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003e80:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8003e84:	6812      	ldr	r2, [r2, #0]
 8003e86:	fab2 f282 	clz	r2, r2
 8003e8a:	b2d2      	uxtb	r2, r2
 8003e8c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003e90:	b2d2      	uxtb	r2, r2
 8003e92:	f002 021f 	and.w	r2, r2, #31
 8003e96:	2101      	movs	r1, #1
 8003e98:	fa01 f202 	lsl.w	r2, r1, r2
 8003e9c:	4013      	ands	r3, r2
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	f43f af7f 	beq.w	8003da2 <HAL_RCC_OscConfig+0x982>
 8003ea4:	e07d      	b.n	8003fa2 <HAL_RCC_OscConfig+0xb82>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003ea6:	f7fd f9a7 	bl	80011f8 <HAL_GetTick>
 8003eaa:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003eae:	e00b      	b.n	8003ec8 <HAL_RCC_OscConfig+0xaa8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003eb0:	f7fd f9a2 	bl	80011f8 <HAL_GetTick>
 8003eb4:	4602      	mov	r2, r0
 8003eb6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8003eba:	1ad3      	subs	r3, r2, r3
 8003ebc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003ec0:	4293      	cmp	r3, r2
 8003ec2:	d901      	bls.n	8003ec8 <HAL_RCC_OscConfig+0xaa8>
        {
          return HAL_TIMEOUT;
 8003ec4:	2303      	movs	r3, #3
 8003ec6:	e2b2      	b.n	800442e <HAL_RCC_OscConfig+0x100e>
 8003ec8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003ecc:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8003ed0:	2202      	movs	r2, #2
 8003ed2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ed4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003ed8:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	fa93 f2a3 	rbit	r2, r3
 8003ee2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003ee6:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 8003eea:	601a      	str	r2, [r3, #0]
 8003eec:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003ef0:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8003ef4:	2202      	movs	r2, #2
 8003ef6:	601a      	str	r2, [r3, #0]
 8003ef8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003efc:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	fa93 f2a3 	rbit	r2, r3
 8003f06:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003f0a:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8003f0e:	601a      	str	r2, [r3, #0]
  return result;
 8003f10:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003f14:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8003f18:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003f1a:	fab3 f383 	clz	r3, r3
 8003f1e:	b2db      	uxtb	r3, r3
 8003f20:	f023 035f 	bic.w	r3, r3, #95	@ 0x5f
 8003f24:	b2db      	uxtb	r3, r3
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d102      	bne.n	8003f30 <HAL_RCC_OscConfig+0xb10>
 8003f2a:	4b58      	ldr	r3, [pc, #352]	@ (800408c <HAL_RCC_OscConfig+0xc6c>)
 8003f2c:	6a1b      	ldr	r3, [r3, #32]
 8003f2e:	e013      	b.n	8003f58 <HAL_RCC_OscConfig+0xb38>
 8003f30:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003f34:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8003f38:	2202      	movs	r2, #2
 8003f3a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f3c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003f40:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	fa93 f2a3 	rbit	r2, r3
 8003f4a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003f4e:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 8003f52:	601a      	str	r2, [r3, #0]
 8003f54:	4b4d      	ldr	r3, [pc, #308]	@ (800408c <HAL_RCC_OscConfig+0xc6c>)
 8003f56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f58:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003f5c:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 8003f60:	2102      	movs	r1, #2
 8003f62:	6011      	str	r1, [r2, #0]
 8003f64:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003f68:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 8003f6c:	6812      	ldr	r2, [r2, #0]
 8003f6e:	fa92 f1a2 	rbit	r1, r2
 8003f72:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003f76:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8003f7a:	6011      	str	r1, [r2, #0]
  return result;
 8003f7c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003f80:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8003f84:	6812      	ldr	r2, [r2, #0]
 8003f86:	fab2 f282 	clz	r2, r2
 8003f8a:	b2d2      	uxtb	r2, r2
 8003f8c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003f90:	b2d2      	uxtb	r2, r2
 8003f92:	f002 021f 	and.w	r2, r2, #31
 8003f96:	2101      	movs	r1, #1
 8003f98:	fa01 f202 	lsl.w	r2, r1, r2
 8003f9c:	4013      	ands	r3, r2
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d186      	bne.n	8003eb0 <HAL_RCC_OscConfig+0xa90>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003fa2:	f897 31ff 	ldrb.w	r3, [r7, #511]	@ 0x1ff
 8003fa6:	2b01      	cmp	r3, #1
 8003fa8:	d105      	bne.n	8003fb6 <HAL_RCC_OscConfig+0xb96>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003faa:	4b38      	ldr	r3, [pc, #224]	@ (800408c <HAL_RCC_OscConfig+0xc6c>)
 8003fac:	69db      	ldr	r3, [r3, #28]
 8003fae:	4a37      	ldr	r2, [pc, #220]	@ (800408c <HAL_RCC_OscConfig+0xc6c>)
 8003fb0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003fb4:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003fb6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003fba:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	69db      	ldr	r3, [r3, #28]
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	f000 8232 	beq.w	800442c <HAL_RCC_OscConfig+0x100c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003fc8:	4b30      	ldr	r3, [pc, #192]	@ (800408c <HAL_RCC_OscConfig+0xc6c>)
 8003fca:	685b      	ldr	r3, [r3, #4]
 8003fcc:	f003 030c 	and.w	r3, r3, #12
 8003fd0:	2b08      	cmp	r3, #8
 8003fd2:	f000 8201 	beq.w	80043d8 <HAL_RCC_OscConfig+0xfb8>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003fd6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003fda:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	69db      	ldr	r3, [r3, #28]
 8003fe2:	2b02      	cmp	r3, #2
 8003fe4:	f040 8157 	bne.w	8004296 <HAL_RCC_OscConfig+0xe76>
 8003fe8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003fec:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 8003ff0:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8003ff4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ff6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003ffa:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	fa93 f2a3 	rbit	r2, r3
 8004004:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004008:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 800400c:	601a      	str	r2, [r3, #0]
  return result;
 800400e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004012:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8004016:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004018:	fab3 f383 	clz	r3, r3
 800401c:	b2db      	uxtb	r3, r3
 800401e:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8004022:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8004026:	009b      	lsls	r3, r3, #2
 8004028:	461a      	mov	r2, r3
 800402a:	2300      	movs	r3, #0
 800402c:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800402e:	f7fd f8e3 	bl	80011f8 <HAL_GetTick>
 8004032:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004036:	e009      	b.n	800404c <HAL_RCC_OscConfig+0xc2c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004038:	f7fd f8de 	bl	80011f8 <HAL_GetTick>
 800403c:	4602      	mov	r2, r0
 800403e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8004042:	1ad3      	subs	r3, r2, r3
 8004044:	2b02      	cmp	r3, #2
 8004046:	d901      	bls.n	800404c <HAL_RCC_OscConfig+0xc2c>
          {
            return HAL_TIMEOUT;
 8004048:	2303      	movs	r3, #3
 800404a:	e1f0      	b.n	800442e <HAL_RCC_OscConfig+0x100e>
 800404c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004050:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8004054:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004058:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800405a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800405e:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	fa93 f2a3 	rbit	r2, r3
 8004068:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800406c:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8004070:	601a      	str	r2, [r3, #0]
  return result;
 8004072:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004076:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 800407a:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800407c:	fab3 f383 	clz	r3, r3
 8004080:	b2db      	uxtb	r3, r3
 8004082:	2b3f      	cmp	r3, #63	@ 0x3f
 8004084:	d804      	bhi.n	8004090 <HAL_RCC_OscConfig+0xc70>
 8004086:	4b01      	ldr	r3, [pc, #4]	@ (800408c <HAL_RCC_OscConfig+0xc6c>)
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	e029      	b.n	80040e0 <HAL_RCC_OscConfig+0xcc0>
 800408c:	40021000 	.word	0x40021000
 8004090:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004094:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8004098:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800409c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800409e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80040a2:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	fa93 f2a3 	rbit	r2, r3
 80040ac:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80040b0:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 80040b4:	601a      	str	r2, [r3, #0]
 80040b6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80040ba:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 80040be:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80040c2:	601a      	str	r2, [r3, #0]
 80040c4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80040c8:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	fa93 f2a3 	rbit	r2, r3
 80040d2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80040d6:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 80040da:	601a      	str	r2, [r3, #0]
 80040dc:	4bc3      	ldr	r3, [pc, #780]	@ (80043ec <HAL_RCC_OscConfig+0xfcc>)
 80040de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040e0:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80040e4:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 80040e8:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 80040ec:	6011      	str	r1, [r2, #0]
 80040ee:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80040f2:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 80040f6:	6812      	ldr	r2, [r2, #0]
 80040f8:	fa92 f1a2 	rbit	r1, r2
 80040fc:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004100:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8004104:	6011      	str	r1, [r2, #0]
  return result;
 8004106:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800410a:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 800410e:	6812      	ldr	r2, [r2, #0]
 8004110:	fab2 f282 	clz	r2, r2
 8004114:	b2d2      	uxtb	r2, r2
 8004116:	f042 0220 	orr.w	r2, r2, #32
 800411a:	b2d2      	uxtb	r2, r2
 800411c:	f002 021f 	and.w	r2, r2, #31
 8004120:	2101      	movs	r1, #1
 8004122:	fa01 f202 	lsl.w	r2, r1, r2
 8004126:	4013      	ands	r3, r2
 8004128:	2b00      	cmp	r3, #0
 800412a:	d185      	bne.n	8004038 <HAL_RCC_OscConfig+0xc18>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800412c:	4baf      	ldr	r3, [pc, #700]	@ (80043ec <HAL_RCC_OscConfig+0xfcc>)
 800412e:	685b      	ldr	r3, [r3, #4]
 8004130:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8004134:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004138:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8004140:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004144:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	6a1b      	ldr	r3, [r3, #32]
 800414c:	430b      	orrs	r3, r1
 800414e:	49a7      	ldr	r1, [pc, #668]	@ (80043ec <HAL_RCC_OscConfig+0xfcc>)
 8004150:	4313      	orrs	r3, r2
 8004152:	604b      	str	r3, [r1, #4]
 8004154:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004158:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 800415c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8004160:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004162:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004166:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	fa93 f2a3 	rbit	r2, r3
 8004170:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004174:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8004178:	601a      	str	r2, [r3, #0]
  return result;
 800417a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800417e:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8004182:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004184:	fab3 f383 	clz	r3, r3
 8004188:	b2db      	uxtb	r3, r3
 800418a:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 800418e:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8004192:	009b      	lsls	r3, r3, #2
 8004194:	461a      	mov	r2, r3
 8004196:	2301      	movs	r3, #1
 8004198:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800419a:	f7fd f82d 	bl	80011f8 <HAL_GetTick>
 800419e:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80041a2:	e009      	b.n	80041b8 <HAL_RCC_OscConfig+0xd98>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80041a4:	f7fd f828 	bl	80011f8 <HAL_GetTick>
 80041a8:	4602      	mov	r2, r0
 80041aa:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80041ae:	1ad3      	subs	r3, r2, r3
 80041b0:	2b02      	cmp	r3, #2
 80041b2:	d901      	bls.n	80041b8 <HAL_RCC_OscConfig+0xd98>
          {
            return HAL_TIMEOUT;
 80041b4:	2303      	movs	r3, #3
 80041b6:	e13a      	b.n	800442e <HAL_RCC_OscConfig+0x100e>
 80041b8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80041bc:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 80041c0:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80041c4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041c6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80041ca:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	fa93 f2a3 	rbit	r2, r3
 80041d4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80041d8:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 80041dc:	601a      	str	r2, [r3, #0]
  return result;
 80041de:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80041e2:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 80041e6:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80041e8:	fab3 f383 	clz	r3, r3
 80041ec:	b2db      	uxtb	r3, r3
 80041ee:	2b3f      	cmp	r3, #63	@ 0x3f
 80041f0:	d802      	bhi.n	80041f8 <HAL_RCC_OscConfig+0xdd8>
 80041f2:	4b7e      	ldr	r3, [pc, #504]	@ (80043ec <HAL_RCC_OscConfig+0xfcc>)
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	e027      	b.n	8004248 <HAL_RCC_OscConfig+0xe28>
 80041f8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80041fc:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8004200:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004204:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004206:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800420a:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	fa93 f2a3 	rbit	r2, r3
 8004214:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004218:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 800421c:	601a      	str	r2, [r3, #0]
 800421e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004222:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8004226:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800422a:	601a      	str	r2, [r3, #0]
 800422c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004230:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	fa93 f2a3 	rbit	r2, r3
 800423a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800423e:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8004242:	601a      	str	r2, [r3, #0]
 8004244:	4b69      	ldr	r3, [pc, #420]	@ (80043ec <HAL_RCC_OscConfig+0xfcc>)
 8004246:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004248:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800424c:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 8004250:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8004254:	6011      	str	r1, [r2, #0]
 8004256:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800425a:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 800425e:	6812      	ldr	r2, [r2, #0]
 8004260:	fa92 f1a2 	rbit	r1, r2
 8004264:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004268:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 800426c:	6011      	str	r1, [r2, #0]
  return result;
 800426e:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004272:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8004276:	6812      	ldr	r2, [r2, #0]
 8004278:	fab2 f282 	clz	r2, r2
 800427c:	b2d2      	uxtb	r2, r2
 800427e:	f042 0220 	orr.w	r2, r2, #32
 8004282:	b2d2      	uxtb	r2, r2
 8004284:	f002 021f 	and.w	r2, r2, #31
 8004288:	2101      	movs	r1, #1
 800428a:	fa01 f202 	lsl.w	r2, r1, r2
 800428e:	4013      	ands	r3, r2
 8004290:	2b00      	cmp	r3, #0
 8004292:	d087      	beq.n	80041a4 <HAL_RCC_OscConfig+0xd84>
 8004294:	e0ca      	b.n	800442c <HAL_RCC_OscConfig+0x100c>
 8004296:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800429a:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 800429e:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80042a2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042a4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80042a8:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	fa93 f2a3 	rbit	r2, r3
 80042b2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80042b6:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 80042ba:	601a      	str	r2, [r3, #0]
  return result;
 80042bc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80042c0:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 80042c4:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80042c6:	fab3 f383 	clz	r3, r3
 80042ca:	b2db      	uxtb	r3, r3
 80042cc:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80042d0:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80042d4:	009b      	lsls	r3, r3, #2
 80042d6:	461a      	mov	r2, r3
 80042d8:	2300      	movs	r3, #0
 80042da:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80042dc:	f7fc ff8c 	bl	80011f8 <HAL_GetTick>
 80042e0:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80042e4:	e009      	b.n	80042fa <HAL_RCC_OscConfig+0xeda>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80042e6:	f7fc ff87 	bl	80011f8 <HAL_GetTick>
 80042ea:	4602      	mov	r2, r0
 80042ec:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80042f0:	1ad3      	subs	r3, r2, r3
 80042f2:	2b02      	cmp	r3, #2
 80042f4:	d901      	bls.n	80042fa <HAL_RCC_OscConfig+0xeda>
          {
            return HAL_TIMEOUT;
 80042f6:	2303      	movs	r3, #3
 80042f8:	e099      	b.n	800442e <HAL_RCC_OscConfig+0x100e>
 80042fa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80042fe:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8004302:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004306:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004308:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800430c:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	fa93 f2a3 	rbit	r2, r3
 8004316:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800431a:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 800431e:	601a      	str	r2, [r3, #0]
  return result;
 8004320:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004324:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8004328:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800432a:	fab3 f383 	clz	r3, r3
 800432e:	b2db      	uxtb	r3, r3
 8004330:	2b3f      	cmp	r3, #63	@ 0x3f
 8004332:	d802      	bhi.n	800433a <HAL_RCC_OscConfig+0xf1a>
 8004334:	4b2d      	ldr	r3, [pc, #180]	@ (80043ec <HAL_RCC_OscConfig+0xfcc>)
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	e027      	b.n	800438a <HAL_RCC_OscConfig+0xf6a>
 800433a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800433e:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8004342:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004346:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004348:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800434c:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	fa93 f2a3 	rbit	r2, r3
 8004356:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800435a:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 800435e:	601a      	str	r2, [r3, #0]
 8004360:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004364:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8004368:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800436c:	601a      	str	r2, [r3, #0]
 800436e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004372:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	fa93 f2a3 	rbit	r2, r3
 800437c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004380:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 8004384:	601a      	str	r2, [r3, #0]
 8004386:	4b19      	ldr	r3, [pc, #100]	@ (80043ec <HAL_RCC_OscConfig+0xfcc>)
 8004388:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800438a:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800438e:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 8004392:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8004396:	6011      	str	r1, [r2, #0]
 8004398:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800439c:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 80043a0:	6812      	ldr	r2, [r2, #0]
 80043a2:	fa92 f1a2 	rbit	r1, r2
 80043a6:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80043aa:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 80043ae:	6011      	str	r1, [r2, #0]
  return result;
 80043b0:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80043b4:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 80043b8:	6812      	ldr	r2, [r2, #0]
 80043ba:	fab2 f282 	clz	r2, r2
 80043be:	b2d2      	uxtb	r2, r2
 80043c0:	f042 0220 	orr.w	r2, r2, #32
 80043c4:	b2d2      	uxtb	r2, r2
 80043c6:	f002 021f 	and.w	r2, r2, #31
 80043ca:	2101      	movs	r1, #1
 80043cc:	fa01 f202 	lsl.w	r2, r1, r2
 80043d0:	4013      	ands	r3, r2
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d187      	bne.n	80042e6 <HAL_RCC_OscConfig+0xec6>
 80043d6:	e029      	b.n	800442c <HAL_RCC_OscConfig+0x100c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80043d8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80043dc:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	69db      	ldr	r3, [r3, #28]
 80043e4:	2b01      	cmp	r3, #1
 80043e6:	d103      	bne.n	80043f0 <HAL_RCC_OscConfig+0xfd0>
      {
        return HAL_ERROR;
 80043e8:	2301      	movs	r3, #1
 80043ea:	e020      	b.n	800442e <HAL_RCC_OscConfig+0x100e>
 80043ec:	40021000 	.word	0x40021000
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80043f0:	4b11      	ldr	r3, [pc, #68]	@ (8004438 <HAL_RCC_OscConfig+0x1018>)
 80043f2:	685b      	ldr	r3, [r3, #4]
 80043f4:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80043f8:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 80043fc:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8004400:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004404:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	6a1b      	ldr	r3, [r3, #32]
 800440c:	429a      	cmp	r2, r3
 800440e:	d10b      	bne.n	8004428 <HAL_RCC_OscConfig+0x1008>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8004410:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8004414:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8004418:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800441c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8004424:	429a      	cmp	r2, r3
 8004426:	d001      	beq.n	800442c <HAL_RCC_OscConfig+0x100c>
#endif
        {
          return HAL_ERROR;
 8004428:	2301      	movs	r3, #1
 800442a:	e000      	b.n	800442e <HAL_RCC_OscConfig+0x100e>
        }
      }
    }
  }

  return HAL_OK;
 800442c:	2300      	movs	r3, #0
}
 800442e:	4618      	mov	r0, r3
 8004430:	f507 7700 	add.w	r7, r7, #512	@ 0x200
 8004434:	46bd      	mov	sp, r7
 8004436:	bd80      	pop	{r7, pc}
 8004438:	40021000 	.word	0x40021000

0800443c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800443c:	b580      	push	{r7, lr}
 800443e:	b09e      	sub	sp, #120	@ 0x78
 8004440:	af00      	add	r7, sp, #0
 8004442:	6078      	str	r0, [r7, #4]
 8004444:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8004446:	2300      	movs	r3, #0
 8004448:	677b      	str	r3, [r7, #116]	@ 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	2b00      	cmp	r3, #0
 800444e:	d101      	bne.n	8004454 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004450:	2301      	movs	r3, #1
 8004452:	e154      	b.n	80046fe <HAL_RCC_ClockConfig+0x2c2>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004454:	4b89      	ldr	r3, [pc, #548]	@ (800467c <HAL_RCC_ClockConfig+0x240>)
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	f003 0307 	and.w	r3, r3, #7
 800445c:	683a      	ldr	r2, [r7, #0]
 800445e:	429a      	cmp	r2, r3
 8004460:	d910      	bls.n	8004484 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004462:	4b86      	ldr	r3, [pc, #536]	@ (800467c <HAL_RCC_ClockConfig+0x240>)
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	f023 0207 	bic.w	r2, r3, #7
 800446a:	4984      	ldr	r1, [pc, #528]	@ (800467c <HAL_RCC_ClockConfig+0x240>)
 800446c:	683b      	ldr	r3, [r7, #0]
 800446e:	4313      	orrs	r3, r2
 8004470:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004472:	4b82      	ldr	r3, [pc, #520]	@ (800467c <HAL_RCC_ClockConfig+0x240>)
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	f003 0307 	and.w	r3, r3, #7
 800447a:	683a      	ldr	r2, [r7, #0]
 800447c:	429a      	cmp	r2, r3
 800447e:	d001      	beq.n	8004484 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004480:	2301      	movs	r3, #1
 8004482:	e13c      	b.n	80046fe <HAL_RCC_ClockConfig+0x2c2>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	f003 0302 	and.w	r3, r3, #2
 800448c:	2b00      	cmp	r3, #0
 800448e:	d008      	beq.n	80044a2 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004490:	4b7b      	ldr	r3, [pc, #492]	@ (8004680 <HAL_RCC_ClockConfig+0x244>)
 8004492:	685b      	ldr	r3, [r3, #4]
 8004494:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	689b      	ldr	r3, [r3, #8]
 800449c:	4978      	ldr	r1, [pc, #480]	@ (8004680 <HAL_RCC_ClockConfig+0x244>)
 800449e:	4313      	orrs	r3, r2
 80044a0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	f003 0301 	and.w	r3, r3, #1
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	f000 80cd 	beq.w	800464a <HAL_RCC_ClockConfig+0x20e>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	685b      	ldr	r3, [r3, #4]
 80044b4:	2b01      	cmp	r3, #1
 80044b6:	d137      	bne.n	8004528 <HAL_RCC_ClockConfig+0xec>
 80044b8:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80044bc:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80044be:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80044c0:	fa93 f3a3 	rbit	r3, r3
 80044c4:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 80044c6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80044c8:	fab3 f383 	clz	r3, r3
 80044cc:	b2db      	uxtb	r3, r3
 80044ce:	2b3f      	cmp	r3, #63	@ 0x3f
 80044d0:	d802      	bhi.n	80044d8 <HAL_RCC_ClockConfig+0x9c>
 80044d2:	4b6b      	ldr	r3, [pc, #428]	@ (8004680 <HAL_RCC_ClockConfig+0x244>)
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	e00f      	b.n	80044f8 <HAL_RCC_ClockConfig+0xbc>
 80044d8:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80044dc:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80044de:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80044e0:	fa93 f3a3 	rbit	r3, r3
 80044e4:	667b      	str	r3, [r7, #100]	@ 0x64
 80044e6:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80044ea:	663b      	str	r3, [r7, #96]	@ 0x60
 80044ec:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80044ee:	fa93 f3a3 	rbit	r3, r3
 80044f2:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80044f4:	4b62      	ldr	r3, [pc, #392]	@ (8004680 <HAL_RCC_ClockConfig+0x244>)
 80044f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044f8:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80044fc:	65ba      	str	r2, [r7, #88]	@ 0x58
 80044fe:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004500:	fa92 f2a2 	rbit	r2, r2
 8004504:	657a      	str	r2, [r7, #84]	@ 0x54
  return result;
 8004506:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8004508:	fab2 f282 	clz	r2, r2
 800450c:	b2d2      	uxtb	r2, r2
 800450e:	f042 0220 	orr.w	r2, r2, #32
 8004512:	b2d2      	uxtb	r2, r2
 8004514:	f002 021f 	and.w	r2, r2, #31
 8004518:	2101      	movs	r1, #1
 800451a:	fa01 f202 	lsl.w	r2, r1, r2
 800451e:	4013      	ands	r3, r2
 8004520:	2b00      	cmp	r3, #0
 8004522:	d171      	bne.n	8004608 <HAL_RCC_ClockConfig+0x1cc>
      {
        return HAL_ERROR;
 8004524:	2301      	movs	r3, #1
 8004526:	e0ea      	b.n	80046fe <HAL_RCC_ClockConfig+0x2c2>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	685b      	ldr	r3, [r3, #4]
 800452c:	2b02      	cmp	r3, #2
 800452e:	d137      	bne.n	80045a0 <HAL_RCC_ClockConfig+0x164>
 8004530:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004534:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004536:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004538:	fa93 f3a3 	rbit	r3, r3
 800453c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 800453e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004540:	fab3 f383 	clz	r3, r3
 8004544:	b2db      	uxtb	r3, r3
 8004546:	2b3f      	cmp	r3, #63	@ 0x3f
 8004548:	d802      	bhi.n	8004550 <HAL_RCC_ClockConfig+0x114>
 800454a:	4b4d      	ldr	r3, [pc, #308]	@ (8004680 <HAL_RCC_ClockConfig+0x244>)
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	e00f      	b.n	8004570 <HAL_RCC_ClockConfig+0x134>
 8004550:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004554:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004556:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004558:	fa93 f3a3 	rbit	r3, r3
 800455c:	647b      	str	r3, [r7, #68]	@ 0x44
 800455e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004562:	643b      	str	r3, [r7, #64]	@ 0x40
 8004564:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004566:	fa93 f3a3 	rbit	r3, r3
 800456a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800456c:	4b44      	ldr	r3, [pc, #272]	@ (8004680 <HAL_RCC_ClockConfig+0x244>)
 800456e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004570:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004574:	63ba      	str	r2, [r7, #56]	@ 0x38
 8004576:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8004578:	fa92 f2a2 	rbit	r2, r2
 800457c:	637a      	str	r2, [r7, #52]	@ 0x34
  return result;
 800457e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004580:	fab2 f282 	clz	r2, r2
 8004584:	b2d2      	uxtb	r2, r2
 8004586:	f042 0220 	orr.w	r2, r2, #32
 800458a:	b2d2      	uxtb	r2, r2
 800458c:	f002 021f 	and.w	r2, r2, #31
 8004590:	2101      	movs	r1, #1
 8004592:	fa01 f202 	lsl.w	r2, r1, r2
 8004596:	4013      	ands	r3, r2
 8004598:	2b00      	cmp	r3, #0
 800459a:	d135      	bne.n	8004608 <HAL_RCC_ClockConfig+0x1cc>
      {
        return HAL_ERROR;
 800459c:	2301      	movs	r3, #1
 800459e:	e0ae      	b.n	80046fe <HAL_RCC_ClockConfig+0x2c2>
 80045a0:	2302      	movs	r3, #2
 80045a2:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80045a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80045a6:	fa93 f3a3 	rbit	r3, r3
 80045aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 80045ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80045ae:	fab3 f383 	clz	r3, r3
 80045b2:	b2db      	uxtb	r3, r3
 80045b4:	2b3f      	cmp	r3, #63	@ 0x3f
 80045b6:	d802      	bhi.n	80045be <HAL_RCC_ClockConfig+0x182>
 80045b8:	4b31      	ldr	r3, [pc, #196]	@ (8004680 <HAL_RCC_ClockConfig+0x244>)
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	e00d      	b.n	80045da <HAL_RCC_ClockConfig+0x19e>
 80045be:	2302      	movs	r3, #2
 80045c0:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80045c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80045c4:	fa93 f3a3 	rbit	r3, r3
 80045c8:	627b      	str	r3, [r7, #36]	@ 0x24
 80045ca:	2302      	movs	r3, #2
 80045cc:	623b      	str	r3, [r7, #32]
 80045ce:	6a3b      	ldr	r3, [r7, #32]
 80045d0:	fa93 f3a3 	rbit	r3, r3
 80045d4:	61fb      	str	r3, [r7, #28]
 80045d6:	4b2a      	ldr	r3, [pc, #168]	@ (8004680 <HAL_RCC_ClockConfig+0x244>)
 80045d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045da:	2202      	movs	r2, #2
 80045dc:	61ba      	str	r2, [r7, #24]
 80045de:	69ba      	ldr	r2, [r7, #24]
 80045e0:	fa92 f2a2 	rbit	r2, r2
 80045e4:	617a      	str	r2, [r7, #20]
  return result;
 80045e6:	697a      	ldr	r2, [r7, #20]
 80045e8:	fab2 f282 	clz	r2, r2
 80045ec:	b2d2      	uxtb	r2, r2
 80045ee:	f042 0220 	orr.w	r2, r2, #32
 80045f2:	b2d2      	uxtb	r2, r2
 80045f4:	f002 021f 	and.w	r2, r2, #31
 80045f8:	2101      	movs	r1, #1
 80045fa:	fa01 f202 	lsl.w	r2, r1, r2
 80045fe:	4013      	ands	r3, r2
 8004600:	2b00      	cmp	r3, #0
 8004602:	d101      	bne.n	8004608 <HAL_RCC_ClockConfig+0x1cc>
      {
        return HAL_ERROR;
 8004604:	2301      	movs	r3, #1
 8004606:	e07a      	b.n	80046fe <HAL_RCC_ClockConfig+0x2c2>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004608:	4b1d      	ldr	r3, [pc, #116]	@ (8004680 <HAL_RCC_ClockConfig+0x244>)
 800460a:	685b      	ldr	r3, [r3, #4]
 800460c:	f023 0203 	bic.w	r2, r3, #3
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	685b      	ldr	r3, [r3, #4]
 8004614:	491a      	ldr	r1, [pc, #104]	@ (8004680 <HAL_RCC_ClockConfig+0x244>)
 8004616:	4313      	orrs	r3, r2
 8004618:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800461a:	f7fc fded 	bl	80011f8 <HAL_GetTick>
 800461e:	6778      	str	r0, [r7, #116]	@ 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004620:	e00a      	b.n	8004638 <HAL_RCC_ClockConfig+0x1fc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004622:	f7fc fde9 	bl	80011f8 <HAL_GetTick>
 8004626:	4602      	mov	r2, r0
 8004628:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800462a:	1ad3      	subs	r3, r2, r3
 800462c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004630:	4293      	cmp	r3, r2
 8004632:	d901      	bls.n	8004638 <HAL_RCC_ClockConfig+0x1fc>
      {
        return HAL_TIMEOUT;
 8004634:	2303      	movs	r3, #3
 8004636:	e062      	b.n	80046fe <HAL_RCC_ClockConfig+0x2c2>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004638:	4b11      	ldr	r3, [pc, #68]	@ (8004680 <HAL_RCC_ClockConfig+0x244>)
 800463a:	685b      	ldr	r3, [r3, #4]
 800463c:	f003 020c 	and.w	r2, r3, #12
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	685b      	ldr	r3, [r3, #4]
 8004644:	009b      	lsls	r3, r3, #2
 8004646:	429a      	cmp	r2, r3
 8004648:	d1eb      	bne.n	8004622 <HAL_RCC_ClockConfig+0x1e6>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800464a:	4b0c      	ldr	r3, [pc, #48]	@ (800467c <HAL_RCC_ClockConfig+0x240>)
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	f003 0307 	and.w	r3, r3, #7
 8004652:	683a      	ldr	r2, [r7, #0]
 8004654:	429a      	cmp	r2, r3
 8004656:	d215      	bcs.n	8004684 <HAL_RCC_ClockConfig+0x248>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004658:	4b08      	ldr	r3, [pc, #32]	@ (800467c <HAL_RCC_ClockConfig+0x240>)
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	f023 0207 	bic.w	r2, r3, #7
 8004660:	4906      	ldr	r1, [pc, #24]	@ (800467c <HAL_RCC_ClockConfig+0x240>)
 8004662:	683b      	ldr	r3, [r7, #0]
 8004664:	4313      	orrs	r3, r2
 8004666:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004668:	4b04      	ldr	r3, [pc, #16]	@ (800467c <HAL_RCC_ClockConfig+0x240>)
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	f003 0307 	and.w	r3, r3, #7
 8004670:	683a      	ldr	r2, [r7, #0]
 8004672:	429a      	cmp	r2, r3
 8004674:	d006      	beq.n	8004684 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8004676:	2301      	movs	r3, #1
 8004678:	e041      	b.n	80046fe <HAL_RCC_ClockConfig+0x2c2>
 800467a:	bf00      	nop
 800467c:	40022000 	.word	0x40022000
 8004680:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	f003 0304 	and.w	r3, r3, #4
 800468c:	2b00      	cmp	r3, #0
 800468e:	d008      	beq.n	80046a2 <HAL_RCC_ClockConfig+0x266>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004690:	4b1d      	ldr	r3, [pc, #116]	@ (8004708 <HAL_RCC_ClockConfig+0x2cc>)
 8004692:	685b      	ldr	r3, [r3, #4]
 8004694:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	68db      	ldr	r3, [r3, #12]
 800469c:	491a      	ldr	r1, [pc, #104]	@ (8004708 <HAL_RCC_ClockConfig+0x2cc>)
 800469e:	4313      	orrs	r3, r2
 80046a0:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	f003 0308 	and.w	r3, r3, #8
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d009      	beq.n	80046c2 <HAL_RCC_ClockConfig+0x286>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80046ae:	4b16      	ldr	r3, [pc, #88]	@ (8004708 <HAL_RCC_ClockConfig+0x2cc>)
 80046b0:	685b      	ldr	r3, [r3, #4]
 80046b2:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	691b      	ldr	r3, [r3, #16]
 80046ba:	00db      	lsls	r3, r3, #3
 80046bc:	4912      	ldr	r1, [pc, #72]	@ (8004708 <HAL_RCC_ClockConfig+0x2cc>)
 80046be:	4313      	orrs	r3, r2
 80046c0:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80046c2:	f000 f829 	bl	8004718 <HAL_RCC_GetSysClockFreq>
 80046c6:	4601      	mov	r1, r0
 80046c8:	4b0f      	ldr	r3, [pc, #60]	@ (8004708 <HAL_RCC_ClockConfig+0x2cc>)
 80046ca:	685b      	ldr	r3, [r3, #4]
 80046cc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80046d0:	22f0      	movs	r2, #240	@ 0xf0
 80046d2:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80046d4:	693a      	ldr	r2, [r7, #16]
 80046d6:	fa92 f2a2 	rbit	r2, r2
 80046da:	60fa      	str	r2, [r7, #12]
  return result;
 80046dc:	68fa      	ldr	r2, [r7, #12]
 80046de:	fab2 f282 	clz	r2, r2
 80046e2:	b2d2      	uxtb	r2, r2
 80046e4:	40d3      	lsrs	r3, r2
 80046e6:	4a09      	ldr	r2, [pc, #36]	@ (800470c <HAL_RCC_ClockConfig+0x2d0>)
 80046e8:	5cd3      	ldrb	r3, [r2, r3]
 80046ea:	fa21 f303 	lsr.w	r3, r1, r3
 80046ee:	4a08      	ldr	r2, [pc, #32]	@ (8004710 <HAL_RCC_ClockConfig+0x2d4>)
 80046f0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 80046f2:	4b08      	ldr	r3, [pc, #32]	@ (8004714 <HAL_RCC_ClockConfig+0x2d8>)
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	4618      	mov	r0, r3
 80046f8:	f7fc fd3a 	bl	8001170 <HAL_InitTick>
  
  return HAL_OK;
 80046fc:	2300      	movs	r3, #0
}
 80046fe:	4618      	mov	r0, r3
 8004700:	3778      	adds	r7, #120	@ 0x78
 8004702:	46bd      	mov	sp, r7
 8004704:	bd80      	pop	{r7, pc}
 8004706:	bf00      	nop
 8004708:	40021000 	.word	0x40021000
 800470c:	080067c0 	.word	0x080067c0
 8004710:	20000038 	.word	0x20000038
 8004714:	2000003c 	.word	0x2000003c

08004718 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004718:	b480      	push	{r7}
 800471a:	b087      	sub	sp, #28
 800471c:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800471e:	2300      	movs	r3, #0
 8004720:	60fb      	str	r3, [r7, #12]
 8004722:	2300      	movs	r3, #0
 8004724:	60bb      	str	r3, [r7, #8]
 8004726:	2300      	movs	r3, #0
 8004728:	617b      	str	r3, [r7, #20]
 800472a:	2300      	movs	r3, #0
 800472c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800472e:	2300      	movs	r3, #0
 8004730:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8004732:	4b1e      	ldr	r3, [pc, #120]	@ (80047ac <HAL_RCC_GetSysClockFreq+0x94>)
 8004734:	685b      	ldr	r3, [r3, #4]
 8004736:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	f003 030c 	and.w	r3, r3, #12
 800473e:	2b04      	cmp	r3, #4
 8004740:	d002      	beq.n	8004748 <HAL_RCC_GetSysClockFreq+0x30>
 8004742:	2b08      	cmp	r3, #8
 8004744:	d003      	beq.n	800474e <HAL_RCC_GetSysClockFreq+0x36>
 8004746:	e026      	b.n	8004796 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004748:	4b19      	ldr	r3, [pc, #100]	@ (80047b0 <HAL_RCC_GetSysClockFreq+0x98>)
 800474a:	613b      	str	r3, [r7, #16]
      break;
 800474c:	e026      	b.n	800479c <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	0c9b      	lsrs	r3, r3, #18
 8004752:	f003 030f 	and.w	r3, r3, #15
 8004756:	4a17      	ldr	r2, [pc, #92]	@ (80047b4 <HAL_RCC_GetSysClockFreq+0x9c>)
 8004758:	5cd3      	ldrb	r3, [r2, r3]
 800475a:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_Pos];
 800475c:	4b13      	ldr	r3, [pc, #76]	@ (80047ac <HAL_RCC_GetSysClockFreq+0x94>)
 800475e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004760:	f003 030f 	and.w	r3, r3, #15
 8004764:	4a14      	ldr	r2, [pc, #80]	@ (80047b8 <HAL_RCC_GetSysClockFreq+0xa0>)
 8004766:	5cd3      	ldrb	r3, [r2, r3]
 8004768:	60bb      	str	r3, [r7, #8]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004770:	2b00      	cmp	r3, #0
 8004772:	d008      	beq.n	8004786 <HAL_RCC_GetSysClockFreq+0x6e>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8004774:	4a0e      	ldr	r2, [pc, #56]	@ (80047b0 <HAL_RCC_GetSysClockFreq+0x98>)
 8004776:	68bb      	ldr	r3, [r7, #8]
 8004778:	fbb2 f2f3 	udiv	r2, r2, r3
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	fb02 f303 	mul.w	r3, r2, r3
 8004782:	617b      	str	r3, [r7, #20]
 8004784:	e004      	b.n	8004790 <HAL_RCC_GetSysClockFreq+0x78>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	4a0c      	ldr	r2, [pc, #48]	@ (80047bc <HAL_RCC_GetSysClockFreq+0xa4>)
 800478a:	fb02 f303 	mul.w	r3, r2, r3
 800478e:	617b      	str	r3, [r7, #20]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8004790:	697b      	ldr	r3, [r7, #20]
 8004792:	613b      	str	r3, [r7, #16]
      break;
 8004794:	e002      	b.n	800479c <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004796:	4b06      	ldr	r3, [pc, #24]	@ (80047b0 <HAL_RCC_GetSysClockFreq+0x98>)
 8004798:	613b      	str	r3, [r7, #16]
      break;
 800479a:	bf00      	nop
    }
  }
  return sysclockfreq;
 800479c:	693b      	ldr	r3, [r7, #16]
}
 800479e:	4618      	mov	r0, r3
 80047a0:	371c      	adds	r7, #28
 80047a2:	46bd      	mov	sp, r7
 80047a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047a8:	4770      	bx	lr
 80047aa:	bf00      	nop
 80047ac:	40021000 	.word	0x40021000
 80047b0:	007a1200 	.word	0x007a1200
 80047b4:	080067d0 	.word	0x080067d0
 80047b8:	080067e0 	.word	0x080067e0
 80047bc:	003d0900 	.word	0x003d0900

080047c0 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80047c0:	b580      	push	{r7, lr}
 80047c2:	b092      	sub	sp, #72	@ 0x48
 80047c4:	af00      	add	r7, sp, #0
 80047c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80047c8:	2300      	movs	r3, #0
 80047ca:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t temp_reg = 0U;
 80047cc:	2300      	movs	r3, #0
 80047ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
  FlagStatus       pwrclkchanged = RESET;
 80047d0:	2300      	movs	r3, #0
 80047d2:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80047de:	2b00      	cmp	r3, #0
 80047e0:	f000 80d2 	beq.w	8004988 <HAL_RCCEx_PeriphCLKConfig+0x1c8>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80047e4:	4b4d      	ldr	r3, [pc, #308]	@ (800491c <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 80047e6:	69db      	ldr	r3, [r3, #28]
 80047e8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d10e      	bne.n	800480e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80047f0:	4b4a      	ldr	r3, [pc, #296]	@ (800491c <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 80047f2:	69db      	ldr	r3, [r3, #28]
 80047f4:	4a49      	ldr	r2, [pc, #292]	@ (800491c <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 80047f6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80047fa:	61d3      	str	r3, [r2, #28]
 80047fc:	4b47      	ldr	r3, [pc, #284]	@ (800491c <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 80047fe:	69db      	ldr	r3, [r3, #28]
 8004800:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004804:	60bb      	str	r3, [r7, #8]
 8004806:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004808:	2301      	movs	r3, #1
 800480a:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800480e:	4b44      	ldr	r3, [pc, #272]	@ (8004920 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004816:	2b00      	cmp	r3, #0
 8004818:	d118      	bne.n	800484c <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800481a:	4b41      	ldr	r3, [pc, #260]	@ (8004920 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	4a40      	ldr	r2, [pc, #256]	@ (8004920 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004820:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004824:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004826:	f7fc fce7 	bl	80011f8 <HAL_GetTick>
 800482a:	6438      	str	r0, [r7, #64]	@ 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800482c:	e008      	b.n	8004840 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800482e:	f7fc fce3 	bl	80011f8 <HAL_GetTick>
 8004832:	4602      	mov	r2, r0
 8004834:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004836:	1ad3      	subs	r3, r2, r3
 8004838:	2b64      	cmp	r3, #100	@ 0x64
 800483a:	d901      	bls.n	8004840 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 800483c:	2303      	movs	r3, #3
 800483e:	e167      	b.n	8004b10 <HAL_RCCEx_PeriphCLKConfig+0x350>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004840:	4b37      	ldr	r3, [pc, #220]	@ (8004920 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004848:	2b00      	cmp	r3, #0
 800484a:	d0f0      	beq.n	800482e <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800484c:	4b33      	ldr	r3, [pc, #204]	@ (800491c <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 800484e:	6a1b      	ldr	r3, [r3, #32]
 8004850:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004854:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004856:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004858:	2b00      	cmp	r3, #0
 800485a:	f000 8082 	beq.w	8004962 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	685b      	ldr	r3, [r3, #4]
 8004862:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004866:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8004868:	429a      	cmp	r2, r3
 800486a:	d07a      	beq.n	8004962 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800486c:	4b2b      	ldr	r3, [pc, #172]	@ (800491c <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 800486e:	6a1b      	ldr	r3, [r3, #32]
 8004870:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004874:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004876:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800487a:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800487c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800487e:	fa93 f3a3 	rbit	r3, r3
 8004882:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8004884:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004886:	fab3 f383 	clz	r3, r3
 800488a:	b2db      	uxtb	r3, r3
 800488c:	461a      	mov	r2, r3
 800488e:	4b25      	ldr	r3, [pc, #148]	@ (8004924 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004890:	4413      	add	r3, r2
 8004892:	009b      	lsls	r3, r3, #2
 8004894:	461a      	mov	r2, r3
 8004896:	2301      	movs	r3, #1
 8004898:	6013      	str	r3, [r2, #0]
 800489a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800489e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80048a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80048a2:	fa93 f3a3 	rbit	r3, r3
 80048a6:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 80048a8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 80048aa:	fab3 f383 	clz	r3, r3
 80048ae:	b2db      	uxtb	r3, r3
 80048b0:	461a      	mov	r2, r3
 80048b2:	4b1c      	ldr	r3, [pc, #112]	@ (8004924 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80048b4:	4413      	add	r3, r2
 80048b6:	009b      	lsls	r3, r3, #2
 80048b8:	461a      	mov	r2, r3
 80048ba:	2300      	movs	r3, #0
 80048bc:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80048be:	4a17      	ldr	r2, [pc, #92]	@ (800491c <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 80048c0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80048c2:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80048c4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80048c6:	f003 0301 	and.w	r3, r3, #1
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d049      	beq.n	8004962 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80048ce:	f7fc fc93 	bl	80011f8 <HAL_GetTick>
 80048d2:	6438      	str	r0, [r7, #64]	@ 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80048d4:	e00a      	b.n	80048ec <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80048d6:	f7fc fc8f 	bl	80011f8 <HAL_GetTick>
 80048da:	4602      	mov	r2, r0
 80048dc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80048de:	1ad3      	subs	r3, r2, r3
 80048e0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80048e4:	4293      	cmp	r3, r2
 80048e6:	d901      	bls.n	80048ec <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 80048e8:	2303      	movs	r3, #3
 80048ea:	e111      	b.n	8004b10 <HAL_RCCEx_PeriphCLKConfig+0x350>
 80048ec:	2302      	movs	r3, #2
 80048ee:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80048f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80048f2:	fa93 f3a3 	rbit	r3, r3
 80048f6:	627b      	str	r3, [r7, #36]	@ 0x24
 80048f8:	2302      	movs	r3, #2
 80048fa:	623b      	str	r3, [r7, #32]
 80048fc:	6a3b      	ldr	r3, [r7, #32]
 80048fe:	fa93 f3a3 	rbit	r3, r3
 8004902:	61fb      	str	r3, [r7, #28]
  return result;
 8004904:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004906:	fab3 f383 	clz	r3, r3
 800490a:	b2db      	uxtb	r3, r3
 800490c:	f023 035f 	bic.w	r3, r3, #95	@ 0x5f
 8004910:	b2db      	uxtb	r3, r3
 8004912:	2b00      	cmp	r3, #0
 8004914:	d108      	bne.n	8004928 <HAL_RCCEx_PeriphCLKConfig+0x168>
 8004916:	4b01      	ldr	r3, [pc, #4]	@ (800491c <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8004918:	6a1b      	ldr	r3, [r3, #32]
 800491a:	e00d      	b.n	8004938 <HAL_RCCEx_PeriphCLKConfig+0x178>
 800491c:	40021000 	.word	0x40021000
 8004920:	40007000 	.word	0x40007000
 8004924:	10908100 	.word	0x10908100
 8004928:	2302      	movs	r3, #2
 800492a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800492c:	69bb      	ldr	r3, [r7, #24]
 800492e:	fa93 f3a3 	rbit	r3, r3
 8004932:	617b      	str	r3, [r7, #20]
 8004934:	4b78      	ldr	r3, [pc, #480]	@ (8004b18 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004936:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004938:	2202      	movs	r2, #2
 800493a:	613a      	str	r2, [r7, #16]
 800493c:	693a      	ldr	r2, [r7, #16]
 800493e:	fa92 f2a2 	rbit	r2, r2
 8004942:	60fa      	str	r2, [r7, #12]
  return result;
 8004944:	68fa      	ldr	r2, [r7, #12]
 8004946:	fab2 f282 	clz	r2, r2
 800494a:	b2d2      	uxtb	r2, r2
 800494c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004950:	b2d2      	uxtb	r2, r2
 8004952:	f002 021f 	and.w	r2, r2, #31
 8004956:	2101      	movs	r1, #1
 8004958:	fa01 f202 	lsl.w	r2, r1, r2
 800495c:	4013      	ands	r3, r2
 800495e:	2b00      	cmp	r3, #0
 8004960:	d0b9      	beq.n	80048d6 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8004962:	4b6d      	ldr	r3, [pc, #436]	@ (8004b18 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004964:	6a1b      	ldr	r3, [r3, #32]
 8004966:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	685b      	ldr	r3, [r3, #4]
 800496e:	496a      	ldr	r1, [pc, #424]	@ (8004b18 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004970:	4313      	orrs	r3, r2
 8004972:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004974:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8004978:	2b01      	cmp	r3, #1
 800497a:	d105      	bne.n	8004988 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800497c:	4b66      	ldr	r3, [pc, #408]	@ (8004b18 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 800497e:	69db      	ldr	r3, [r3, #28]
 8004980:	4a65      	ldr	r2, [pc, #404]	@ (8004b18 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004982:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004986:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	f003 0301 	and.w	r3, r3, #1
 8004990:	2b00      	cmp	r3, #0
 8004992:	d008      	beq.n	80049a6 <HAL_RCCEx_PeriphCLKConfig+0x1e6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004994:	4b60      	ldr	r3, [pc, #384]	@ (8004b18 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004996:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004998:	f023 0203 	bic.w	r2, r3, #3
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	689b      	ldr	r3, [r3, #8]
 80049a0:	495d      	ldr	r1, [pc, #372]	@ (8004b18 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80049a2:	4313      	orrs	r3, r2
 80049a4:	630b      	str	r3, [r1, #48]	@ 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	f003 0302 	and.w	r3, r3, #2
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d008      	beq.n	80049c4 <HAL_RCCEx_PeriphCLKConfig+0x204>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80049b2:	4b59      	ldr	r3, [pc, #356]	@ (8004b18 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80049b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80049b6:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	68db      	ldr	r3, [r3, #12]
 80049be:	4956      	ldr	r1, [pc, #344]	@ (8004b18 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80049c0:	4313      	orrs	r3, r2
 80049c2:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	f003 0304 	and.w	r3, r3, #4
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d008      	beq.n	80049e2 <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80049d0:	4b51      	ldr	r3, [pc, #324]	@ (8004b18 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80049d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80049d4:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	691b      	ldr	r3, [r3, #16]
 80049dc:	494e      	ldr	r1, [pc, #312]	@ (8004b18 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80049de:	4313      	orrs	r3, r2
 80049e0:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	f003 0320 	and.w	r3, r3, #32
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d008      	beq.n	8004a00 <HAL_RCCEx_PeriphCLKConfig+0x240>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80049ee:	4b4a      	ldr	r3, [pc, #296]	@ (8004b18 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80049f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80049f2:	f023 0210 	bic.w	r2, r3, #16
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	69db      	ldr	r3, [r3, #28]
 80049fa:	4947      	ldr	r1, [pc, #284]	@ (8004b18 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80049fc:	4313      	orrs	r3, r2
 80049fe:	630b      	str	r3, [r1, #48]	@ 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d008      	beq.n	8004a1e <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8004a0c:	4b42      	ldr	r3, [pc, #264]	@ (8004b18 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004a0e:	685b      	ldr	r3, [r3, #4]
 8004a10:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a18:	493f      	ldr	r1, [pc, #252]	@ (8004b18 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004a1a:	4313      	orrs	r3, r2
 8004a1c:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d008      	beq.n	8004a3c <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004a2a:	4b3b      	ldr	r3, [pc, #236]	@ (8004b18 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004a2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a2e:	f023 0220 	bic.w	r2, r3, #32
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	6a1b      	ldr	r3, [r3, #32]
 8004a36:	4938      	ldr	r1, [pc, #224]	@ (8004b18 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004a38:	4313      	orrs	r3, r2
 8004a3a:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	f003 0308 	and.w	r3, r3, #8
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d008      	beq.n	8004a5a <HAL_RCCEx_PeriphCLKConfig+0x29a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004a48:	4b33      	ldr	r3, [pc, #204]	@ (8004b18 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004a4a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a4c:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	695b      	ldr	r3, [r3, #20]
 8004a54:	4930      	ldr	r1, [pc, #192]	@ (8004b18 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004a56:	4313      	orrs	r3, r2
 8004a58:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	f003 0310 	and.w	r3, r3, #16
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d008      	beq.n	8004a78 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004a66:	4b2c      	ldr	r3, [pc, #176]	@ (8004b18 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004a68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a6a:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	699b      	ldr	r3, [r3, #24]
 8004a72:	4929      	ldr	r1, [pc, #164]	@ (8004b18 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004a74:	4313      	orrs	r3, r2
 8004a76:	630b      	str	r3, [r1, #48]	@ 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d008      	beq.n	8004a96 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004a84:	4b24      	ldr	r3, [pc, #144]	@ (8004b18 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004a86:	685b      	ldr	r3, [r3, #4]
 8004a88:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a90:	4921      	ldr	r1, [pc, #132]	@ (8004b18 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004a92:	4313      	orrs	r3, r2
 8004a94:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d008      	beq.n	8004ab4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8004aa2:	4b1d      	ldr	r3, [pc, #116]	@ (8004b18 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004aa4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004aa6:	f423 72f8 	bic.w	r2, r3, #496	@ 0x1f0
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004aae:	491a      	ldr	r1, [pc, #104]	@ (8004b18 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004ab0:	4313      	orrs	r3, r2
 8004ab2:	62cb      	str	r3, [r1, #44]	@ 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d008      	beq.n	8004ad2 <HAL_RCCEx_PeriphCLKConfig+0x312>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8004ac0:	4b15      	ldr	r3, [pc, #84]	@ (8004b18 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004ac2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ac4:	f423 5278 	bic.w	r2, r3, #15872	@ 0x3e00
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004acc:	4912      	ldr	r1, [pc, #72]	@ (8004b18 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004ace:	4313      	orrs	r3, r2
 8004ad0:	62cb      	str	r3, [r1, #44]	@ 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d008      	beq.n	8004af0 <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8004ade:	4b0e      	ldr	r3, [pc, #56]	@ (8004b18 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004ae0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ae2:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004aea:	490b      	ldr	r1, [pc, #44]	@ (8004b18 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004aec:	4313      	orrs	r3, r2
 8004aee:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d008      	beq.n	8004b0e <HAL_RCCEx_PeriphCLKConfig+0x34e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8004afc:	4b06      	ldr	r3, [pc, #24]	@ (8004b18 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004afe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b00:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004b08:	4903      	ldr	r1, [pc, #12]	@ (8004b18 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004b0a:	4313      	orrs	r3, r2
 8004b0c:	630b      	str	r3, [r1, #48]	@ 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8004b0e:	2300      	movs	r3, #0
}
 8004b10:	4618      	mov	r0, r3
 8004b12:	3748      	adds	r7, #72	@ 0x48
 8004b14:	46bd      	mov	sp, r7
 8004b16:	bd80      	pop	{r7, pc}
 8004b18:	40021000 	.word	0x40021000

08004b1c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004b1c:	b580      	push	{r7, lr}
 8004b1e:	b084      	sub	sp, #16
 8004b20:	af00      	add	r7, sp, #0
 8004b22:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d101      	bne.n	8004b2e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004b2a:	2301      	movs	r3, #1
 8004b2c:	e09d      	b.n	8004c6a <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d108      	bne.n	8004b48 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	685b      	ldr	r3, [r3, #4]
 8004b3a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004b3e:	d009      	beq.n	8004b54 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	2200      	movs	r2, #0
 8004b44:	61da      	str	r2, [r3, #28]
 8004b46:	e005      	b.n	8004b54 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	2200      	movs	r2, #0
 8004b4c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	2200      	movs	r2, #0
 8004b52:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	2200      	movs	r2, #0
 8004b58:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8004b60:	b2db      	uxtb	r3, r3
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d106      	bne.n	8004b74 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	2200      	movs	r2, #0
 8004b6a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004b6e:	6878      	ldr	r0, [r7, #4]
 8004b70:	f7fc f93c 	bl	8000dec <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	2202      	movs	r2, #2
 8004b78:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	681a      	ldr	r2, [r3, #0]
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004b8a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	68db      	ldr	r3, [r3, #12]
 8004b90:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8004b94:	d902      	bls.n	8004b9c <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8004b96:	2300      	movs	r3, #0
 8004b98:	60fb      	str	r3, [r7, #12]
 8004b9a:	e002      	b.n	8004ba2 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004b9c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004ba0:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	68db      	ldr	r3, [r3, #12]
 8004ba6:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8004baa:	d007      	beq.n	8004bbc <HAL_SPI_Init+0xa0>
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	68db      	ldr	r3, [r3, #12]
 8004bb0:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8004bb4:	d002      	beq.n	8004bbc <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	2200      	movs	r2, #0
 8004bba:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	685b      	ldr	r3, [r3, #4]
 8004bc0:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	689b      	ldr	r3, [r3, #8]
 8004bc8:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8004bcc:	431a      	orrs	r2, r3
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	691b      	ldr	r3, [r3, #16]
 8004bd2:	f003 0302 	and.w	r3, r3, #2
 8004bd6:	431a      	orrs	r2, r3
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	695b      	ldr	r3, [r3, #20]
 8004bdc:	f003 0301 	and.w	r3, r3, #1
 8004be0:	431a      	orrs	r2, r3
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	699b      	ldr	r3, [r3, #24]
 8004be6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004bea:	431a      	orrs	r2, r3
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	69db      	ldr	r3, [r3, #28]
 8004bf0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004bf4:	431a      	orrs	r2, r3
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	6a1b      	ldr	r3, [r3, #32]
 8004bfa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004bfe:	ea42 0103 	orr.w	r1, r2, r3
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c06:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	430a      	orrs	r2, r1
 8004c10:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	699b      	ldr	r3, [r3, #24]
 8004c16:	0c1b      	lsrs	r3, r3, #16
 8004c18:	f003 0204 	and.w	r2, r3, #4
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c20:	f003 0310 	and.w	r3, r3, #16
 8004c24:	431a      	orrs	r2, r3
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004c2a:	f003 0308 	and.w	r3, r3, #8
 8004c2e:	431a      	orrs	r2, r3
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	68db      	ldr	r3, [r3, #12]
 8004c34:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8004c38:	ea42 0103 	orr.w	r1, r2, r3
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	430a      	orrs	r2, r1
 8004c48:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	69da      	ldr	r2, [r3, #28]
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004c58:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	2200      	movs	r2, #0
 8004c5e:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	2201      	movs	r2, #1
 8004c64:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8004c68:	2300      	movs	r3, #0
}
 8004c6a:	4618      	mov	r0, r3
 8004c6c:	3710      	adds	r7, #16
 8004c6e:	46bd      	mov	sp, r7
 8004c70:	bd80      	pop	{r7, pc}

08004c72 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004c72:	b580      	push	{r7, lr}
 8004c74:	b082      	sub	sp, #8
 8004c76:	af00      	add	r7, sp, #0
 8004c78:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d101      	bne.n	8004c84 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004c80:	2301      	movs	r3, #1
 8004c82:	e049      	b.n	8004d18 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004c8a:	b2db      	uxtb	r3, r3
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d106      	bne.n	8004c9e <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	2200      	movs	r2, #0
 8004c94:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004c98:	6878      	ldr	r0, [r7, #4]
 8004c9a:	f7fc f8e9 	bl	8000e70 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	2202      	movs	r2, #2
 8004ca2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	681a      	ldr	r2, [r3, #0]
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	3304      	adds	r3, #4
 8004cae:	4619      	mov	r1, r3
 8004cb0:	4610      	mov	r0, r2
 8004cb2:	f000 ff19 	bl	8005ae8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	2201      	movs	r2, #1
 8004cba:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	2201      	movs	r2, #1
 8004cc2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	2201      	movs	r2, #1
 8004cca:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	2201      	movs	r2, #1
 8004cd2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	2201      	movs	r2, #1
 8004cda:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	2201      	movs	r2, #1
 8004ce2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	2201      	movs	r2, #1
 8004cea:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	2201      	movs	r2, #1
 8004cf2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	2201      	movs	r2, #1
 8004cfa:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	2201      	movs	r2, #1
 8004d02:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	2201      	movs	r2, #1
 8004d0a:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	2201      	movs	r2, #1
 8004d12:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004d16:	2300      	movs	r3, #0
}
 8004d18:	4618      	mov	r0, r3
 8004d1a:	3708      	adds	r7, #8
 8004d1c:	46bd      	mov	sp, r7
 8004d1e:	bd80      	pop	{r7, pc}

08004d20 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004d20:	b580      	push	{r7, lr}
 8004d22:	b082      	sub	sp, #8
 8004d24:	af00      	add	r7, sp, #0
 8004d26:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d101      	bne.n	8004d32 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004d2e:	2301      	movs	r3, #1
 8004d30:	e049      	b.n	8004dc6 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004d38:	b2db      	uxtb	r3, r3
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d106      	bne.n	8004d4c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	2200      	movs	r2, #0
 8004d42:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004d46:	6878      	ldr	r0, [r7, #4]
 8004d48:	f7fc f8de 	bl	8000f08 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	2202      	movs	r2, #2
 8004d50:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681a      	ldr	r2, [r3, #0]
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	3304      	adds	r3, #4
 8004d5c:	4619      	mov	r1, r3
 8004d5e:	4610      	mov	r0, r2
 8004d60:	f000 fec2 	bl	8005ae8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	2201      	movs	r2, #1
 8004d68:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	2201      	movs	r2, #1
 8004d70:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	2201      	movs	r2, #1
 8004d78:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	2201      	movs	r2, #1
 8004d80:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	2201      	movs	r2, #1
 8004d88:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	2201      	movs	r2, #1
 8004d90:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	2201      	movs	r2, #1
 8004d98:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	2201      	movs	r2, #1
 8004da0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	2201      	movs	r2, #1
 8004da8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	2201      	movs	r2, #1
 8004db0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	2201      	movs	r2, #1
 8004db8:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	2201      	movs	r2, #1
 8004dc0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004dc4:	2300      	movs	r3, #0
}
 8004dc6:	4618      	mov	r0, r3
 8004dc8:	3708      	adds	r7, #8
 8004dca:	46bd      	mov	sp, r7
 8004dcc:	bd80      	pop	{r7, pc}
	...

08004dd0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004dd0:	b580      	push	{r7, lr}
 8004dd2:	b084      	sub	sp, #16
 8004dd4:	af00      	add	r7, sp, #0
 8004dd6:	6078      	str	r0, [r7, #4]
 8004dd8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004dda:	683b      	ldr	r3, [r7, #0]
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d109      	bne.n	8004df4 <HAL_TIM_PWM_Start+0x24>
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004de6:	b2db      	uxtb	r3, r3
 8004de8:	2b01      	cmp	r3, #1
 8004dea:	bf14      	ite	ne
 8004dec:	2301      	movne	r3, #1
 8004dee:	2300      	moveq	r3, #0
 8004df0:	b2db      	uxtb	r3, r3
 8004df2:	e03c      	b.n	8004e6e <HAL_TIM_PWM_Start+0x9e>
 8004df4:	683b      	ldr	r3, [r7, #0]
 8004df6:	2b04      	cmp	r3, #4
 8004df8:	d109      	bne.n	8004e0e <HAL_TIM_PWM_Start+0x3e>
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8004e00:	b2db      	uxtb	r3, r3
 8004e02:	2b01      	cmp	r3, #1
 8004e04:	bf14      	ite	ne
 8004e06:	2301      	movne	r3, #1
 8004e08:	2300      	moveq	r3, #0
 8004e0a:	b2db      	uxtb	r3, r3
 8004e0c:	e02f      	b.n	8004e6e <HAL_TIM_PWM_Start+0x9e>
 8004e0e:	683b      	ldr	r3, [r7, #0]
 8004e10:	2b08      	cmp	r3, #8
 8004e12:	d109      	bne.n	8004e28 <HAL_TIM_PWM_Start+0x58>
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004e1a:	b2db      	uxtb	r3, r3
 8004e1c:	2b01      	cmp	r3, #1
 8004e1e:	bf14      	ite	ne
 8004e20:	2301      	movne	r3, #1
 8004e22:	2300      	moveq	r3, #0
 8004e24:	b2db      	uxtb	r3, r3
 8004e26:	e022      	b.n	8004e6e <HAL_TIM_PWM_Start+0x9e>
 8004e28:	683b      	ldr	r3, [r7, #0]
 8004e2a:	2b0c      	cmp	r3, #12
 8004e2c:	d109      	bne.n	8004e42 <HAL_TIM_PWM_Start+0x72>
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004e34:	b2db      	uxtb	r3, r3
 8004e36:	2b01      	cmp	r3, #1
 8004e38:	bf14      	ite	ne
 8004e3a:	2301      	movne	r3, #1
 8004e3c:	2300      	moveq	r3, #0
 8004e3e:	b2db      	uxtb	r3, r3
 8004e40:	e015      	b.n	8004e6e <HAL_TIM_PWM_Start+0x9e>
 8004e42:	683b      	ldr	r3, [r7, #0]
 8004e44:	2b10      	cmp	r3, #16
 8004e46:	d109      	bne.n	8004e5c <HAL_TIM_PWM_Start+0x8c>
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004e4e:	b2db      	uxtb	r3, r3
 8004e50:	2b01      	cmp	r3, #1
 8004e52:	bf14      	ite	ne
 8004e54:	2301      	movne	r3, #1
 8004e56:	2300      	moveq	r3, #0
 8004e58:	b2db      	uxtb	r3, r3
 8004e5a:	e008      	b.n	8004e6e <HAL_TIM_PWM_Start+0x9e>
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8004e62:	b2db      	uxtb	r3, r3
 8004e64:	2b01      	cmp	r3, #1
 8004e66:	bf14      	ite	ne
 8004e68:	2301      	movne	r3, #1
 8004e6a:	2300      	moveq	r3, #0
 8004e6c:	b2db      	uxtb	r3, r3
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d001      	beq.n	8004e76 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8004e72:	2301      	movs	r3, #1
 8004e74:	e097      	b.n	8004fa6 <HAL_TIM_PWM_Start+0x1d6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004e76:	683b      	ldr	r3, [r7, #0]
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d104      	bne.n	8004e86 <HAL_TIM_PWM_Start+0xb6>
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	2202      	movs	r2, #2
 8004e80:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004e84:	e023      	b.n	8004ece <HAL_TIM_PWM_Start+0xfe>
 8004e86:	683b      	ldr	r3, [r7, #0]
 8004e88:	2b04      	cmp	r3, #4
 8004e8a:	d104      	bne.n	8004e96 <HAL_TIM_PWM_Start+0xc6>
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	2202      	movs	r2, #2
 8004e90:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004e94:	e01b      	b.n	8004ece <HAL_TIM_PWM_Start+0xfe>
 8004e96:	683b      	ldr	r3, [r7, #0]
 8004e98:	2b08      	cmp	r3, #8
 8004e9a:	d104      	bne.n	8004ea6 <HAL_TIM_PWM_Start+0xd6>
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	2202      	movs	r2, #2
 8004ea0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004ea4:	e013      	b.n	8004ece <HAL_TIM_PWM_Start+0xfe>
 8004ea6:	683b      	ldr	r3, [r7, #0]
 8004ea8:	2b0c      	cmp	r3, #12
 8004eaa:	d104      	bne.n	8004eb6 <HAL_TIM_PWM_Start+0xe6>
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	2202      	movs	r2, #2
 8004eb0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004eb4:	e00b      	b.n	8004ece <HAL_TIM_PWM_Start+0xfe>
 8004eb6:	683b      	ldr	r3, [r7, #0]
 8004eb8:	2b10      	cmp	r3, #16
 8004eba:	d104      	bne.n	8004ec6 <HAL_TIM_PWM_Start+0xf6>
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	2202      	movs	r2, #2
 8004ec0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004ec4:	e003      	b.n	8004ece <HAL_TIM_PWM_Start+0xfe>
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	2202      	movs	r2, #2
 8004eca:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	2201      	movs	r2, #1
 8004ed4:	6839      	ldr	r1, [r7, #0]
 8004ed6:	4618      	mov	r0, r3
 8004ed8:	f001 fb30 	bl	800653c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	4a33      	ldr	r2, [pc, #204]	@ (8004fb0 <HAL_TIM_PWM_Start+0x1e0>)
 8004ee2:	4293      	cmp	r3, r2
 8004ee4:	d013      	beq.n	8004f0e <HAL_TIM_PWM_Start+0x13e>
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	4a32      	ldr	r2, [pc, #200]	@ (8004fb4 <HAL_TIM_PWM_Start+0x1e4>)
 8004eec:	4293      	cmp	r3, r2
 8004eee:	d00e      	beq.n	8004f0e <HAL_TIM_PWM_Start+0x13e>
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	4a30      	ldr	r2, [pc, #192]	@ (8004fb8 <HAL_TIM_PWM_Start+0x1e8>)
 8004ef6:	4293      	cmp	r3, r2
 8004ef8:	d009      	beq.n	8004f0e <HAL_TIM_PWM_Start+0x13e>
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	4a2f      	ldr	r2, [pc, #188]	@ (8004fbc <HAL_TIM_PWM_Start+0x1ec>)
 8004f00:	4293      	cmp	r3, r2
 8004f02:	d004      	beq.n	8004f0e <HAL_TIM_PWM_Start+0x13e>
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	4a2d      	ldr	r2, [pc, #180]	@ (8004fc0 <HAL_TIM_PWM_Start+0x1f0>)
 8004f0a:	4293      	cmp	r3, r2
 8004f0c:	d101      	bne.n	8004f12 <HAL_TIM_PWM_Start+0x142>
 8004f0e:	2301      	movs	r3, #1
 8004f10:	e000      	b.n	8004f14 <HAL_TIM_PWM_Start+0x144>
 8004f12:	2300      	movs	r3, #0
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d007      	beq.n	8004f28 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004f26:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	4a20      	ldr	r2, [pc, #128]	@ (8004fb0 <HAL_TIM_PWM_Start+0x1e0>)
 8004f2e:	4293      	cmp	r3, r2
 8004f30:	d018      	beq.n	8004f64 <HAL_TIM_PWM_Start+0x194>
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004f3a:	d013      	beq.n	8004f64 <HAL_TIM_PWM_Start+0x194>
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	4a20      	ldr	r2, [pc, #128]	@ (8004fc4 <HAL_TIM_PWM_Start+0x1f4>)
 8004f42:	4293      	cmp	r3, r2
 8004f44:	d00e      	beq.n	8004f64 <HAL_TIM_PWM_Start+0x194>
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	4a1f      	ldr	r2, [pc, #124]	@ (8004fc8 <HAL_TIM_PWM_Start+0x1f8>)
 8004f4c:	4293      	cmp	r3, r2
 8004f4e:	d009      	beq.n	8004f64 <HAL_TIM_PWM_Start+0x194>
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	4a17      	ldr	r2, [pc, #92]	@ (8004fb4 <HAL_TIM_PWM_Start+0x1e4>)
 8004f56:	4293      	cmp	r3, r2
 8004f58:	d004      	beq.n	8004f64 <HAL_TIM_PWM_Start+0x194>
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	4a16      	ldr	r2, [pc, #88]	@ (8004fb8 <HAL_TIM_PWM_Start+0x1e8>)
 8004f60:	4293      	cmp	r3, r2
 8004f62:	d115      	bne.n	8004f90 <HAL_TIM_PWM_Start+0x1c0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	689a      	ldr	r2, [r3, #8]
 8004f6a:	4b18      	ldr	r3, [pc, #96]	@ (8004fcc <HAL_TIM_PWM_Start+0x1fc>)
 8004f6c:	4013      	ands	r3, r2
 8004f6e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	2b06      	cmp	r3, #6
 8004f74:	d015      	beq.n	8004fa2 <HAL_TIM_PWM_Start+0x1d2>
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004f7c:	d011      	beq.n	8004fa2 <HAL_TIM_PWM_Start+0x1d2>
    {
      __HAL_TIM_ENABLE(htim);
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	681a      	ldr	r2, [r3, #0]
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	f042 0201 	orr.w	r2, r2, #1
 8004f8c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004f8e:	e008      	b.n	8004fa2 <HAL_TIM_PWM_Start+0x1d2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	681a      	ldr	r2, [r3, #0]
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	f042 0201 	orr.w	r2, r2, #1
 8004f9e:	601a      	str	r2, [r3, #0]
 8004fa0:	e000      	b.n	8004fa4 <HAL_TIM_PWM_Start+0x1d4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004fa2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004fa4:	2300      	movs	r3, #0
}
 8004fa6:	4618      	mov	r0, r3
 8004fa8:	3710      	adds	r7, #16
 8004faa:	46bd      	mov	sp, r7
 8004fac:	bd80      	pop	{r7, pc}
 8004fae:	bf00      	nop
 8004fb0:	40012c00 	.word	0x40012c00
 8004fb4:	40013400 	.word	0x40013400
 8004fb8:	40014000 	.word	0x40014000
 8004fbc:	40014400 	.word	0x40014400
 8004fc0:	40014800 	.word	0x40014800
 8004fc4:	40000400 	.word	0x40000400
 8004fc8:	40000800 	.word	0x40000800
 8004fcc:	00010007 	.word	0x00010007

08004fd0 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8004fd0:	b580      	push	{r7, lr}
 8004fd2:	b082      	sub	sp, #8
 8004fd4:	af00      	add	r7, sp, #0
 8004fd6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d101      	bne.n	8004fe2 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8004fde:	2301      	movs	r3, #1
 8004fe0:	e049      	b.n	8005076 <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004fe8:	b2db      	uxtb	r3, r3
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d106      	bne.n	8004ffc <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	2200      	movs	r2, #0
 8004ff2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8004ff6:	6878      	ldr	r0, [r7, #4]
 8004ff8:	f000 f841 	bl	800507e <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	2202      	movs	r2, #2
 8005000:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681a      	ldr	r2, [r3, #0]
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	3304      	adds	r3, #4
 800500c:	4619      	mov	r1, r3
 800500e:	4610      	mov	r0, r2
 8005010:	f000 fd6a 	bl	8005ae8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	2201      	movs	r2, #1
 8005018:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	2201      	movs	r2, #1
 8005020:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	2201      	movs	r2, #1
 8005028:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	2201      	movs	r2, #1
 8005030:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	2201      	movs	r2, #1
 8005038:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	2201      	movs	r2, #1
 8005040:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	2201      	movs	r2, #1
 8005048:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	2201      	movs	r2, #1
 8005050:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	2201      	movs	r2, #1
 8005058:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	2201      	movs	r2, #1
 8005060:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	2201      	movs	r2, #1
 8005068:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	2201      	movs	r2, #1
 8005070:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005074:	2300      	movs	r3, #0
}
 8005076:	4618      	mov	r0, r3
 8005078:	3708      	adds	r7, #8
 800507a:	46bd      	mov	sp, r7
 800507c:	bd80      	pop	{r7, pc}

0800507e <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 800507e:	b480      	push	{r7}
 8005080:	b083      	sub	sp, #12
 8005082:	af00      	add	r7, sp, #0
 8005084:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8005086:	bf00      	nop
 8005088:	370c      	adds	r7, #12
 800508a:	46bd      	mov	sp, r7
 800508c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005090:	4770      	bx	lr
	...

08005094 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005094:	b580      	push	{r7, lr}
 8005096:	b084      	sub	sp, #16
 8005098:	af00      	add	r7, sp, #0
 800509a:	6078      	str	r0, [r7, #4]
 800509c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800509e:	2300      	movs	r3, #0
 80050a0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 80050a2:	683b      	ldr	r3, [r7, #0]
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d104      	bne.n	80050b2 <HAL_TIM_IC_Start_IT+0x1e>
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80050ae:	b2db      	uxtb	r3, r3
 80050b0:	e023      	b.n	80050fa <HAL_TIM_IC_Start_IT+0x66>
 80050b2:	683b      	ldr	r3, [r7, #0]
 80050b4:	2b04      	cmp	r3, #4
 80050b6:	d104      	bne.n	80050c2 <HAL_TIM_IC_Start_IT+0x2e>
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80050be:	b2db      	uxtb	r3, r3
 80050c0:	e01b      	b.n	80050fa <HAL_TIM_IC_Start_IT+0x66>
 80050c2:	683b      	ldr	r3, [r7, #0]
 80050c4:	2b08      	cmp	r3, #8
 80050c6:	d104      	bne.n	80050d2 <HAL_TIM_IC_Start_IT+0x3e>
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80050ce:	b2db      	uxtb	r3, r3
 80050d0:	e013      	b.n	80050fa <HAL_TIM_IC_Start_IT+0x66>
 80050d2:	683b      	ldr	r3, [r7, #0]
 80050d4:	2b0c      	cmp	r3, #12
 80050d6:	d104      	bne.n	80050e2 <HAL_TIM_IC_Start_IT+0x4e>
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80050de:	b2db      	uxtb	r3, r3
 80050e0:	e00b      	b.n	80050fa <HAL_TIM_IC_Start_IT+0x66>
 80050e2:	683b      	ldr	r3, [r7, #0]
 80050e4:	2b10      	cmp	r3, #16
 80050e6:	d104      	bne.n	80050f2 <HAL_TIM_IC_Start_IT+0x5e>
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80050ee:	b2db      	uxtb	r3, r3
 80050f0:	e003      	b.n	80050fa <HAL_TIM_IC_Start_IT+0x66>
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80050f8:	b2db      	uxtb	r3, r3
 80050fa:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 80050fc:	683b      	ldr	r3, [r7, #0]
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d104      	bne.n	800510c <HAL_TIM_IC_Start_IT+0x78>
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005108:	b2db      	uxtb	r3, r3
 800510a:	e013      	b.n	8005134 <HAL_TIM_IC_Start_IT+0xa0>
 800510c:	683b      	ldr	r3, [r7, #0]
 800510e:	2b04      	cmp	r3, #4
 8005110:	d104      	bne.n	800511c <HAL_TIM_IC_Start_IT+0x88>
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005118:	b2db      	uxtb	r3, r3
 800511a:	e00b      	b.n	8005134 <HAL_TIM_IC_Start_IT+0xa0>
 800511c:	683b      	ldr	r3, [r7, #0]
 800511e:	2b08      	cmp	r3, #8
 8005120:	d104      	bne.n	800512c <HAL_TIM_IC_Start_IT+0x98>
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 8005128:	b2db      	uxtb	r3, r3
 800512a:	e003      	b.n	8005134 <HAL_TIM_IC_Start_IT+0xa0>
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	f893 3047 	ldrb.w	r3, [r3, #71]	@ 0x47
 8005132:	b2db      	uxtb	r3, r3
 8005134:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8005136:	7bbb      	ldrb	r3, [r7, #14]
 8005138:	2b01      	cmp	r3, #1
 800513a:	d102      	bne.n	8005142 <HAL_TIM_IC_Start_IT+0xae>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 800513c:	7b7b      	ldrb	r3, [r7, #13]
 800513e:	2b01      	cmp	r3, #1
 8005140:	d001      	beq.n	8005146 <HAL_TIM_IC_Start_IT+0xb2>
  {
    return HAL_ERROR;
 8005142:	2301      	movs	r3, #1
 8005144:	e0d8      	b.n	80052f8 <HAL_TIM_IC_Start_IT+0x264>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005146:	683b      	ldr	r3, [r7, #0]
 8005148:	2b00      	cmp	r3, #0
 800514a:	d104      	bne.n	8005156 <HAL_TIM_IC_Start_IT+0xc2>
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	2202      	movs	r2, #2
 8005150:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005154:	e023      	b.n	800519e <HAL_TIM_IC_Start_IT+0x10a>
 8005156:	683b      	ldr	r3, [r7, #0]
 8005158:	2b04      	cmp	r3, #4
 800515a:	d104      	bne.n	8005166 <HAL_TIM_IC_Start_IT+0xd2>
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	2202      	movs	r2, #2
 8005160:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005164:	e01b      	b.n	800519e <HAL_TIM_IC_Start_IT+0x10a>
 8005166:	683b      	ldr	r3, [r7, #0]
 8005168:	2b08      	cmp	r3, #8
 800516a:	d104      	bne.n	8005176 <HAL_TIM_IC_Start_IT+0xe2>
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	2202      	movs	r2, #2
 8005170:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005174:	e013      	b.n	800519e <HAL_TIM_IC_Start_IT+0x10a>
 8005176:	683b      	ldr	r3, [r7, #0]
 8005178:	2b0c      	cmp	r3, #12
 800517a:	d104      	bne.n	8005186 <HAL_TIM_IC_Start_IT+0xf2>
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	2202      	movs	r2, #2
 8005180:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005184:	e00b      	b.n	800519e <HAL_TIM_IC_Start_IT+0x10a>
 8005186:	683b      	ldr	r3, [r7, #0]
 8005188:	2b10      	cmp	r3, #16
 800518a:	d104      	bne.n	8005196 <HAL_TIM_IC_Start_IT+0x102>
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	2202      	movs	r2, #2
 8005190:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005194:	e003      	b.n	800519e <HAL_TIM_IC_Start_IT+0x10a>
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	2202      	movs	r2, #2
 800519a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800519e:	683b      	ldr	r3, [r7, #0]
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d104      	bne.n	80051ae <HAL_TIM_IC_Start_IT+0x11a>
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	2202      	movs	r2, #2
 80051a8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80051ac:	e013      	b.n	80051d6 <HAL_TIM_IC_Start_IT+0x142>
 80051ae:	683b      	ldr	r3, [r7, #0]
 80051b0:	2b04      	cmp	r3, #4
 80051b2:	d104      	bne.n	80051be <HAL_TIM_IC_Start_IT+0x12a>
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	2202      	movs	r2, #2
 80051b8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80051bc:	e00b      	b.n	80051d6 <HAL_TIM_IC_Start_IT+0x142>
 80051be:	683b      	ldr	r3, [r7, #0]
 80051c0:	2b08      	cmp	r3, #8
 80051c2:	d104      	bne.n	80051ce <HAL_TIM_IC_Start_IT+0x13a>
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	2202      	movs	r2, #2
 80051c8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80051cc:	e003      	b.n	80051d6 <HAL_TIM_IC_Start_IT+0x142>
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	2202      	movs	r2, #2
 80051d2:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  switch (Channel)
 80051d6:	683b      	ldr	r3, [r7, #0]
 80051d8:	2b0c      	cmp	r3, #12
 80051da:	d841      	bhi.n	8005260 <HAL_TIM_IC_Start_IT+0x1cc>
 80051dc:	a201      	add	r2, pc, #4	@ (adr r2, 80051e4 <HAL_TIM_IC_Start_IT+0x150>)
 80051de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051e2:	bf00      	nop
 80051e4:	08005219 	.word	0x08005219
 80051e8:	08005261 	.word	0x08005261
 80051ec:	08005261 	.word	0x08005261
 80051f0:	08005261 	.word	0x08005261
 80051f4:	0800522b 	.word	0x0800522b
 80051f8:	08005261 	.word	0x08005261
 80051fc:	08005261 	.word	0x08005261
 8005200:	08005261 	.word	0x08005261
 8005204:	0800523d 	.word	0x0800523d
 8005208:	08005261 	.word	0x08005261
 800520c:	08005261 	.word	0x08005261
 8005210:	08005261 	.word	0x08005261
 8005214:	0800524f 	.word	0x0800524f
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	68da      	ldr	r2, [r3, #12]
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	f042 0202 	orr.w	r2, r2, #2
 8005226:	60da      	str	r2, [r3, #12]
      break;
 8005228:	e01d      	b.n	8005266 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	68da      	ldr	r2, [r3, #12]
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	f042 0204 	orr.w	r2, r2, #4
 8005238:	60da      	str	r2, [r3, #12]
      break;
 800523a:	e014      	b.n	8005266 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	68da      	ldr	r2, [r3, #12]
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	f042 0208 	orr.w	r2, r2, #8
 800524a:	60da      	str	r2, [r3, #12]
      break;
 800524c:	e00b      	b.n	8005266 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	68da      	ldr	r2, [r3, #12]
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	f042 0210 	orr.w	r2, r2, #16
 800525c:	60da      	str	r2, [r3, #12]
      break;
 800525e:	e002      	b.n	8005266 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    default:
      status = HAL_ERROR;
 8005260:	2301      	movs	r3, #1
 8005262:	73fb      	strb	r3, [r7, #15]
      break;
 8005264:	bf00      	nop
  }

  if (status == HAL_OK)
 8005266:	7bfb      	ldrb	r3, [r7, #15]
 8005268:	2b00      	cmp	r3, #0
 800526a:	d144      	bne.n	80052f6 <HAL_TIM_IC_Start_IT+0x262>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	2201      	movs	r2, #1
 8005272:	6839      	ldr	r1, [r7, #0]
 8005274:	4618      	mov	r0, r3
 8005276:	f001 f961 	bl	800653c <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	4a20      	ldr	r2, [pc, #128]	@ (8005300 <HAL_TIM_IC_Start_IT+0x26c>)
 8005280:	4293      	cmp	r3, r2
 8005282:	d018      	beq.n	80052b6 <HAL_TIM_IC_Start_IT+0x222>
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800528c:	d013      	beq.n	80052b6 <HAL_TIM_IC_Start_IT+0x222>
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	4a1c      	ldr	r2, [pc, #112]	@ (8005304 <HAL_TIM_IC_Start_IT+0x270>)
 8005294:	4293      	cmp	r3, r2
 8005296:	d00e      	beq.n	80052b6 <HAL_TIM_IC_Start_IT+0x222>
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	4a1a      	ldr	r2, [pc, #104]	@ (8005308 <HAL_TIM_IC_Start_IT+0x274>)
 800529e:	4293      	cmp	r3, r2
 80052a0:	d009      	beq.n	80052b6 <HAL_TIM_IC_Start_IT+0x222>
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	4a19      	ldr	r2, [pc, #100]	@ (800530c <HAL_TIM_IC_Start_IT+0x278>)
 80052a8:	4293      	cmp	r3, r2
 80052aa:	d004      	beq.n	80052b6 <HAL_TIM_IC_Start_IT+0x222>
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	4a17      	ldr	r2, [pc, #92]	@ (8005310 <HAL_TIM_IC_Start_IT+0x27c>)
 80052b2:	4293      	cmp	r3, r2
 80052b4:	d115      	bne.n	80052e2 <HAL_TIM_IC_Start_IT+0x24e>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	689a      	ldr	r2, [r3, #8]
 80052bc:	4b15      	ldr	r3, [pc, #84]	@ (8005314 <HAL_TIM_IC_Start_IT+0x280>)
 80052be:	4013      	ands	r3, r2
 80052c0:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80052c2:	68bb      	ldr	r3, [r7, #8]
 80052c4:	2b06      	cmp	r3, #6
 80052c6:	d015      	beq.n	80052f4 <HAL_TIM_IC_Start_IT+0x260>
 80052c8:	68bb      	ldr	r3, [r7, #8]
 80052ca:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80052ce:	d011      	beq.n	80052f4 <HAL_TIM_IC_Start_IT+0x260>
      {
        __HAL_TIM_ENABLE(htim);
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	681a      	ldr	r2, [r3, #0]
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	f042 0201 	orr.w	r2, r2, #1
 80052de:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80052e0:	e008      	b.n	80052f4 <HAL_TIM_IC_Start_IT+0x260>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	681a      	ldr	r2, [r3, #0]
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	f042 0201 	orr.w	r2, r2, #1
 80052f0:	601a      	str	r2, [r3, #0]
 80052f2:	e000      	b.n	80052f6 <HAL_TIM_IC_Start_IT+0x262>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80052f4:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 80052f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80052f8:	4618      	mov	r0, r3
 80052fa:	3710      	adds	r7, #16
 80052fc:	46bd      	mov	sp, r7
 80052fe:	bd80      	pop	{r7, pc}
 8005300:	40012c00 	.word	0x40012c00
 8005304:	40000400 	.word	0x40000400
 8005308:	40000800 	.word	0x40000800
 800530c:	40013400 	.word	0x40013400
 8005310:	40014000 	.word	0x40014000
 8005314:	00010007 	.word	0x00010007

08005318 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005318:	b580      	push	{r7, lr}
 800531a:	b084      	sub	sp, #16
 800531c:	af00      	add	r7, sp, #0
 800531e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	68db      	ldr	r3, [r3, #12]
 8005326:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	691b      	ldr	r3, [r3, #16]
 800532e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005330:	68bb      	ldr	r3, [r7, #8]
 8005332:	f003 0302 	and.w	r3, r3, #2
 8005336:	2b00      	cmp	r3, #0
 8005338:	d020      	beq.n	800537c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	f003 0302 	and.w	r3, r3, #2
 8005340:	2b00      	cmp	r3, #0
 8005342:	d01b      	beq.n	800537c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	f06f 0202 	mvn.w	r2, #2
 800534c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	2201      	movs	r2, #1
 8005352:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	699b      	ldr	r3, [r3, #24]
 800535a:	f003 0303 	and.w	r3, r3, #3
 800535e:	2b00      	cmp	r3, #0
 8005360:	d003      	beq.n	800536a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005362:	6878      	ldr	r0, [r7, #4]
 8005364:	f7fa ff6e 	bl	8000244 <HAL_TIM_IC_CaptureCallback>
 8005368:	e005      	b.n	8005376 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800536a:	6878      	ldr	r0, [r7, #4]
 800536c:	f000 fb9e 	bl	8005aac <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005370:	6878      	ldr	r0, [r7, #4]
 8005372:	f000 fba5 	bl	8005ac0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	2200      	movs	r2, #0
 800537a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800537c:	68bb      	ldr	r3, [r7, #8]
 800537e:	f003 0304 	and.w	r3, r3, #4
 8005382:	2b00      	cmp	r3, #0
 8005384:	d020      	beq.n	80053c8 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	f003 0304 	and.w	r3, r3, #4
 800538c:	2b00      	cmp	r3, #0
 800538e:	d01b      	beq.n	80053c8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	f06f 0204 	mvn.w	r2, #4
 8005398:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	2202      	movs	r2, #2
 800539e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	699b      	ldr	r3, [r3, #24]
 80053a6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d003      	beq.n	80053b6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80053ae:	6878      	ldr	r0, [r7, #4]
 80053b0:	f7fa ff48 	bl	8000244 <HAL_TIM_IC_CaptureCallback>
 80053b4:	e005      	b.n	80053c2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80053b6:	6878      	ldr	r0, [r7, #4]
 80053b8:	f000 fb78 	bl	8005aac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80053bc:	6878      	ldr	r0, [r7, #4]
 80053be:	f000 fb7f 	bl	8005ac0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	2200      	movs	r2, #0
 80053c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80053c8:	68bb      	ldr	r3, [r7, #8]
 80053ca:	f003 0308 	and.w	r3, r3, #8
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d020      	beq.n	8005414 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	f003 0308 	and.w	r3, r3, #8
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d01b      	beq.n	8005414 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	f06f 0208 	mvn.w	r2, #8
 80053e4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	2204      	movs	r2, #4
 80053ea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	69db      	ldr	r3, [r3, #28]
 80053f2:	f003 0303 	and.w	r3, r3, #3
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d003      	beq.n	8005402 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80053fa:	6878      	ldr	r0, [r7, #4]
 80053fc:	f7fa ff22 	bl	8000244 <HAL_TIM_IC_CaptureCallback>
 8005400:	e005      	b.n	800540e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005402:	6878      	ldr	r0, [r7, #4]
 8005404:	f000 fb52 	bl	8005aac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005408:	6878      	ldr	r0, [r7, #4]
 800540a:	f000 fb59 	bl	8005ac0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	2200      	movs	r2, #0
 8005412:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005414:	68bb      	ldr	r3, [r7, #8]
 8005416:	f003 0310 	and.w	r3, r3, #16
 800541a:	2b00      	cmp	r3, #0
 800541c:	d020      	beq.n	8005460 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	f003 0310 	and.w	r3, r3, #16
 8005424:	2b00      	cmp	r3, #0
 8005426:	d01b      	beq.n	8005460 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	f06f 0210 	mvn.w	r2, #16
 8005430:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	2208      	movs	r2, #8
 8005436:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	69db      	ldr	r3, [r3, #28]
 800543e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005442:	2b00      	cmp	r3, #0
 8005444:	d003      	beq.n	800544e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005446:	6878      	ldr	r0, [r7, #4]
 8005448:	f7fa fefc 	bl	8000244 <HAL_TIM_IC_CaptureCallback>
 800544c:	e005      	b.n	800545a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800544e:	6878      	ldr	r0, [r7, #4]
 8005450:	f000 fb2c 	bl	8005aac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005454:	6878      	ldr	r0, [r7, #4]
 8005456:	f000 fb33 	bl	8005ac0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	2200      	movs	r2, #0
 800545e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005460:	68bb      	ldr	r3, [r7, #8]
 8005462:	f003 0301 	and.w	r3, r3, #1
 8005466:	2b00      	cmp	r3, #0
 8005468:	d00c      	beq.n	8005484 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	f003 0301 	and.w	r3, r3, #1
 8005470:	2b00      	cmp	r3, #0
 8005472:	d007      	beq.n	8005484 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	f06f 0201 	mvn.w	r2, #1
 800547c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800547e:	6878      	ldr	r0, [r7, #4]
 8005480:	f000 fb0a 	bl	8005a98 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8005484:	68bb      	ldr	r3, [r7, #8]
 8005486:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800548a:	2b00      	cmp	r3, #0
 800548c:	d00c      	beq.n	80054a8 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005494:	2b00      	cmp	r3, #0
 8005496:	d007      	beq.n	80054a8 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80054a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80054a2:	6878      	ldr	r0, [r7, #4]
 80054a4:	f001 f8fa 	bl	800669c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80054a8:	68bb      	ldr	r3, [r7, #8]
 80054aa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d00c      	beq.n	80054cc <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d007      	beq.n	80054cc <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80054c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80054c6:	6878      	ldr	r0, [r7, #4]
 80054c8:	f001 f8f2 	bl	80066b0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80054cc:	68bb      	ldr	r3, [r7, #8]
 80054ce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d00c      	beq.n	80054f0 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80054dc:	2b00      	cmp	r3, #0
 80054de:	d007      	beq.n	80054f0 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80054e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80054ea:	6878      	ldr	r0, [r7, #4]
 80054ec:	f000 faf2 	bl	8005ad4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80054f0:	68bb      	ldr	r3, [r7, #8]
 80054f2:	f003 0320 	and.w	r3, r3, #32
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d00c      	beq.n	8005514 <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	f003 0320 	and.w	r3, r3, #32
 8005500:	2b00      	cmp	r3, #0
 8005502:	d007      	beq.n	8005514 <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	f06f 0220 	mvn.w	r2, #32
 800550c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800550e:	6878      	ldr	r0, [r7, #4]
 8005510:	f001 f8ba 	bl	8006688 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005514:	bf00      	nop
 8005516:	3710      	adds	r7, #16
 8005518:	46bd      	mov	sp, r7
 800551a:	bd80      	pop	{r7, pc}

0800551c <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 800551c:	b580      	push	{r7, lr}
 800551e:	b086      	sub	sp, #24
 8005520:	af00      	add	r7, sp, #0
 8005522:	60f8      	str	r0, [r7, #12]
 8005524:	60b9      	str	r1, [r7, #8]
 8005526:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005528:	2300      	movs	r3, #0
 800552a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005532:	2b01      	cmp	r3, #1
 8005534:	d101      	bne.n	800553a <HAL_TIM_IC_ConfigChannel+0x1e>
 8005536:	2302      	movs	r3, #2
 8005538:	e088      	b.n	800564c <HAL_TIM_IC_ConfigChannel+0x130>
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	2201      	movs	r2, #1
 800553e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	2b00      	cmp	r3, #0
 8005546:	d11b      	bne.n	8005580 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800554c:	68bb      	ldr	r3, [r7, #8]
 800554e:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8005550:	68bb      	ldr	r3, [r7, #8]
 8005552:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8005554:	68bb      	ldr	r3, [r7, #8]
 8005556:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 8005558:	f000 fe38 	bl	80061cc <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	699a      	ldr	r2, [r3, #24]
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	f022 020c 	bic.w	r2, r2, #12
 800556a:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	6999      	ldr	r1, [r3, #24]
 8005572:	68bb      	ldr	r3, [r7, #8]
 8005574:	689a      	ldr	r2, [r3, #8]
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	430a      	orrs	r2, r1
 800557c:	619a      	str	r2, [r3, #24]
 800557e:	e060      	b.n	8005642 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	2b04      	cmp	r3, #4
 8005584:	d11c      	bne.n	80055c0 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800558a:	68bb      	ldr	r3, [r7, #8]
 800558c:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800558e:	68bb      	ldr	r3, [r7, #8]
 8005590:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8005592:	68bb      	ldr	r3, [r7, #8]
 8005594:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 8005596:	f000 feb0 	bl	80062fa <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	699a      	ldr	r2, [r3, #24]
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 80055a8:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	6999      	ldr	r1, [r3, #24]
 80055b0:	68bb      	ldr	r3, [r7, #8]
 80055b2:	689b      	ldr	r3, [r3, #8]
 80055b4:	021a      	lsls	r2, r3, #8
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	430a      	orrs	r2, r1
 80055bc:	619a      	str	r2, [r3, #24]
 80055be:	e040      	b.n	8005642 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	2b08      	cmp	r3, #8
 80055c4:	d11b      	bne.n	80055fe <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80055ca:	68bb      	ldr	r3, [r7, #8]
 80055cc:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80055ce:	68bb      	ldr	r3, [r7, #8]
 80055d0:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80055d2:	68bb      	ldr	r3, [r7, #8]
 80055d4:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 80055d6:	f000 fefd 	bl	80063d4 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	69da      	ldr	r2, [r3, #28]
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	f022 020c 	bic.w	r2, r2, #12
 80055e8:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	69d9      	ldr	r1, [r3, #28]
 80055f0:	68bb      	ldr	r3, [r7, #8]
 80055f2:	689a      	ldr	r2, [r3, #8]
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	430a      	orrs	r2, r1
 80055fa:	61da      	str	r2, [r3, #28]
 80055fc:	e021      	b.n	8005642 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	2b0c      	cmp	r3, #12
 8005602:	d11c      	bne.n	800563e <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8005608:	68bb      	ldr	r3, [r7, #8]
 800560a:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800560c:	68bb      	ldr	r3, [r7, #8]
 800560e:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8005610:	68bb      	ldr	r3, [r7, #8]
 8005612:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 8005614:	f000 ff1a 	bl	800644c <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	69da      	ldr	r2, [r3, #28]
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8005626:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	69d9      	ldr	r1, [r3, #28]
 800562e:	68bb      	ldr	r3, [r7, #8]
 8005630:	689b      	ldr	r3, [r3, #8]
 8005632:	021a      	lsls	r2, r3, #8
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	430a      	orrs	r2, r1
 800563a:	61da      	str	r2, [r3, #28]
 800563c:	e001      	b.n	8005642 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 800563e:	2301      	movs	r3, #1
 8005640:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	2200      	movs	r2, #0
 8005646:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800564a:	7dfb      	ldrb	r3, [r7, #23]
}
 800564c:	4618      	mov	r0, r3
 800564e:	3718      	adds	r7, #24
 8005650:	46bd      	mov	sp, r7
 8005652:	bd80      	pop	{r7, pc}

08005654 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005654:	b580      	push	{r7, lr}
 8005656:	b086      	sub	sp, #24
 8005658:	af00      	add	r7, sp, #0
 800565a:	60f8      	str	r0, [r7, #12]
 800565c:	60b9      	str	r1, [r7, #8]
 800565e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005660:	2300      	movs	r3, #0
 8005662:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800566a:	2b01      	cmp	r3, #1
 800566c:	d101      	bne.n	8005672 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800566e:	2302      	movs	r3, #2
 8005670:	e0ff      	b.n	8005872 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	2201      	movs	r2, #1
 8005676:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	2b14      	cmp	r3, #20
 800567e:	f200 80f0 	bhi.w	8005862 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8005682:	a201      	add	r2, pc, #4	@ (adr r2, 8005688 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005684:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005688:	080056dd 	.word	0x080056dd
 800568c:	08005863 	.word	0x08005863
 8005690:	08005863 	.word	0x08005863
 8005694:	08005863 	.word	0x08005863
 8005698:	0800571d 	.word	0x0800571d
 800569c:	08005863 	.word	0x08005863
 80056a0:	08005863 	.word	0x08005863
 80056a4:	08005863 	.word	0x08005863
 80056a8:	0800575f 	.word	0x0800575f
 80056ac:	08005863 	.word	0x08005863
 80056b0:	08005863 	.word	0x08005863
 80056b4:	08005863 	.word	0x08005863
 80056b8:	0800579f 	.word	0x0800579f
 80056bc:	08005863 	.word	0x08005863
 80056c0:	08005863 	.word	0x08005863
 80056c4:	08005863 	.word	0x08005863
 80056c8:	080057e1 	.word	0x080057e1
 80056cc:	08005863 	.word	0x08005863
 80056d0:	08005863 	.word	0x08005863
 80056d4:	08005863 	.word	0x08005863
 80056d8:	08005821 	.word	0x08005821
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	68b9      	ldr	r1, [r7, #8]
 80056e2:	4618      	mov	r0, r3
 80056e4:	f000 fa9c 	bl	8005c20 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	699a      	ldr	r2, [r3, #24]
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	f042 0208 	orr.w	r2, r2, #8
 80056f6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	699a      	ldr	r2, [r3, #24]
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	f022 0204 	bic.w	r2, r2, #4
 8005706:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	6999      	ldr	r1, [r3, #24]
 800570e:	68bb      	ldr	r3, [r7, #8]
 8005710:	691a      	ldr	r2, [r3, #16]
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	430a      	orrs	r2, r1
 8005718:	619a      	str	r2, [r3, #24]
      break;
 800571a:	e0a5      	b.n	8005868 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	68b9      	ldr	r1, [r7, #8]
 8005722:	4618      	mov	r0, r3
 8005724:	f000 fb0c 	bl	8005d40 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	699a      	ldr	r2, [r3, #24]
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005736:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	699a      	ldr	r2, [r3, #24]
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005746:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	6999      	ldr	r1, [r3, #24]
 800574e:	68bb      	ldr	r3, [r7, #8]
 8005750:	691b      	ldr	r3, [r3, #16]
 8005752:	021a      	lsls	r2, r3, #8
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	430a      	orrs	r2, r1
 800575a:	619a      	str	r2, [r3, #24]
      break;
 800575c:	e084      	b.n	8005868 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	68b9      	ldr	r1, [r7, #8]
 8005764:	4618      	mov	r0, r3
 8005766:	f000 fb75 	bl	8005e54 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	69da      	ldr	r2, [r3, #28]
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	f042 0208 	orr.w	r2, r2, #8
 8005778:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	69da      	ldr	r2, [r3, #28]
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	f022 0204 	bic.w	r2, r2, #4
 8005788:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	69d9      	ldr	r1, [r3, #28]
 8005790:	68bb      	ldr	r3, [r7, #8]
 8005792:	691a      	ldr	r2, [r3, #16]
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	430a      	orrs	r2, r1
 800579a:	61da      	str	r2, [r3, #28]
      break;
 800579c:	e064      	b.n	8005868 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	68b9      	ldr	r1, [r7, #8]
 80057a4:	4618      	mov	r0, r3
 80057a6:	f000 fbdd 	bl	8005f64 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	69da      	ldr	r2, [r3, #28]
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80057b8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	69da      	ldr	r2, [r3, #28]
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80057c8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	69d9      	ldr	r1, [r3, #28]
 80057d0:	68bb      	ldr	r3, [r7, #8]
 80057d2:	691b      	ldr	r3, [r3, #16]
 80057d4:	021a      	lsls	r2, r3, #8
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	430a      	orrs	r2, r1
 80057dc:	61da      	str	r2, [r3, #28]
      break;
 80057de:	e043      	b.n	8005868 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	68b9      	ldr	r1, [r7, #8]
 80057e6:	4618      	mov	r0, r3
 80057e8:	f000 fc26 	bl	8006038 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	f042 0208 	orr.w	r2, r2, #8
 80057fa:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	f022 0204 	bic.w	r2, r2, #4
 800580a:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8005812:	68bb      	ldr	r3, [r7, #8]
 8005814:	691a      	ldr	r2, [r3, #16]
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	430a      	orrs	r2, r1
 800581c:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800581e:	e023      	b.n	8005868 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	68b9      	ldr	r1, [r7, #8]
 8005826:	4618      	mov	r0, r3
 8005828:	f000 fc6a 	bl	8006100 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800583a:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800584a:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8005852:	68bb      	ldr	r3, [r7, #8]
 8005854:	691b      	ldr	r3, [r3, #16]
 8005856:	021a      	lsls	r2, r3, #8
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	430a      	orrs	r2, r1
 800585e:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8005860:	e002      	b.n	8005868 <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 8005862:	2301      	movs	r3, #1
 8005864:	75fb      	strb	r3, [r7, #23]
      break;
 8005866:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	2200      	movs	r2, #0
 800586c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005870:	7dfb      	ldrb	r3, [r7, #23]
}
 8005872:	4618      	mov	r0, r3
 8005874:	3718      	adds	r7, #24
 8005876:	46bd      	mov	sp, r7
 8005878:	bd80      	pop	{r7, pc}
 800587a:	bf00      	nop

0800587c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800587c:	b580      	push	{r7, lr}
 800587e:	b084      	sub	sp, #16
 8005880:	af00      	add	r7, sp, #0
 8005882:	6078      	str	r0, [r7, #4]
 8005884:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005886:	2300      	movs	r3, #0
 8005888:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005890:	2b01      	cmp	r3, #1
 8005892:	d101      	bne.n	8005898 <HAL_TIM_ConfigClockSource+0x1c>
 8005894:	2302      	movs	r3, #2
 8005896:	e0b6      	b.n	8005a06 <HAL_TIM_ConfigClockSource+0x18a>
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	2201      	movs	r2, #1
 800589c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	2202      	movs	r2, #2
 80058a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	689b      	ldr	r3, [r3, #8]
 80058ae:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80058b0:	68bb      	ldr	r3, [r7, #8]
 80058b2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80058b6:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80058ba:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80058bc:	68bb      	ldr	r3, [r7, #8]
 80058be:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80058c2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	68ba      	ldr	r2, [r7, #8]
 80058ca:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80058cc:	683b      	ldr	r3, [r7, #0]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80058d4:	d03e      	beq.n	8005954 <HAL_TIM_ConfigClockSource+0xd8>
 80058d6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80058da:	f200 8087 	bhi.w	80059ec <HAL_TIM_ConfigClockSource+0x170>
 80058de:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80058e2:	f000 8086 	beq.w	80059f2 <HAL_TIM_ConfigClockSource+0x176>
 80058e6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80058ea:	d87f      	bhi.n	80059ec <HAL_TIM_ConfigClockSource+0x170>
 80058ec:	2b70      	cmp	r3, #112	@ 0x70
 80058ee:	d01a      	beq.n	8005926 <HAL_TIM_ConfigClockSource+0xaa>
 80058f0:	2b70      	cmp	r3, #112	@ 0x70
 80058f2:	d87b      	bhi.n	80059ec <HAL_TIM_ConfigClockSource+0x170>
 80058f4:	2b60      	cmp	r3, #96	@ 0x60
 80058f6:	d050      	beq.n	800599a <HAL_TIM_ConfigClockSource+0x11e>
 80058f8:	2b60      	cmp	r3, #96	@ 0x60
 80058fa:	d877      	bhi.n	80059ec <HAL_TIM_ConfigClockSource+0x170>
 80058fc:	2b50      	cmp	r3, #80	@ 0x50
 80058fe:	d03c      	beq.n	800597a <HAL_TIM_ConfigClockSource+0xfe>
 8005900:	2b50      	cmp	r3, #80	@ 0x50
 8005902:	d873      	bhi.n	80059ec <HAL_TIM_ConfigClockSource+0x170>
 8005904:	2b40      	cmp	r3, #64	@ 0x40
 8005906:	d058      	beq.n	80059ba <HAL_TIM_ConfigClockSource+0x13e>
 8005908:	2b40      	cmp	r3, #64	@ 0x40
 800590a:	d86f      	bhi.n	80059ec <HAL_TIM_ConfigClockSource+0x170>
 800590c:	2b30      	cmp	r3, #48	@ 0x30
 800590e:	d064      	beq.n	80059da <HAL_TIM_ConfigClockSource+0x15e>
 8005910:	2b30      	cmp	r3, #48	@ 0x30
 8005912:	d86b      	bhi.n	80059ec <HAL_TIM_ConfigClockSource+0x170>
 8005914:	2b20      	cmp	r3, #32
 8005916:	d060      	beq.n	80059da <HAL_TIM_ConfigClockSource+0x15e>
 8005918:	2b20      	cmp	r3, #32
 800591a:	d867      	bhi.n	80059ec <HAL_TIM_ConfigClockSource+0x170>
 800591c:	2b00      	cmp	r3, #0
 800591e:	d05c      	beq.n	80059da <HAL_TIM_ConfigClockSource+0x15e>
 8005920:	2b10      	cmp	r3, #16
 8005922:	d05a      	beq.n	80059da <HAL_TIM_ConfigClockSource+0x15e>
 8005924:	e062      	b.n	80059ec <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800592a:	683b      	ldr	r3, [r7, #0]
 800592c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800592e:	683b      	ldr	r3, [r7, #0]
 8005930:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005932:	683b      	ldr	r3, [r7, #0]
 8005934:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005936:	f000 fde1 	bl	80064fc <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	689b      	ldr	r3, [r3, #8]
 8005940:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005942:	68bb      	ldr	r3, [r7, #8]
 8005944:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8005948:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	68ba      	ldr	r2, [r7, #8]
 8005950:	609a      	str	r2, [r3, #8]
      break;
 8005952:	e04f      	b.n	80059f4 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005958:	683b      	ldr	r3, [r7, #0]
 800595a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800595c:	683b      	ldr	r3, [r7, #0]
 800595e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005960:	683b      	ldr	r3, [r7, #0]
 8005962:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005964:	f000 fdca 	bl	80064fc <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	689a      	ldr	r2, [r3, #8]
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005976:	609a      	str	r2, [r3, #8]
      break;
 8005978:	e03c      	b.n	80059f4 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800597e:	683b      	ldr	r3, [r7, #0]
 8005980:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005982:	683b      	ldr	r3, [r7, #0]
 8005984:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005986:	461a      	mov	r2, r3
 8005988:	f000 fc88 	bl	800629c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	2150      	movs	r1, #80	@ 0x50
 8005992:	4618      	mov	r0, r3
 8005994:	f000 fd97 	bl	80064c6 <TIM_ITRx_SetConfig>
      break;
 8005998:	e02c      	b.n	80059f4 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800599e:	683b      	ldr	r3, [r7, #0]
 80059a0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80059a2:	683b      	ldr	r3, [r7, #0]
 80059a4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80059a6:	461a      	mov	r2, r3
 80059a8:	f000 fce4 	bl	8006374 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	2160      	movs	r1, #96	@ 0x60
 80059b2:	4618      	mov	r0, r3
 80059b4:	f000 fd87 	bl	80064c6 <TIM_ITRx_SetConfig>
      break;
 80059b8:	e01c      	b.n	80059f4 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80059be:	683b      	ldr	r3, [r7, #0]
 80059c0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80059c2:	683b      	ldr	r3, [r7, #0]
 80059c4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80059c6:	461a      	mov	r2, r3
 80059c8:	f000 fc68 	bl	800629c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	2140      	movs	r1, #64	@ 0x40
 80059d2:	4618      	mov	r0, r3
 80059d4:	f000 fd77 	bl	80064c6 <TIM_ITRx_SetConfig>
      break;
 80059d8:	e00c      	b.n	80059f4 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	681a      	ldr	r2, [r3, #0]
 80059de:	683b      	ldr	r3, [r7, #0]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	4619      	mov	r1, r3
 80059e4:	4610      	mov	r0, r2
 80059e6:	f000 fd6e 	bl	80064c6 <TIM_ITRx_SetConfig>
      break;
 80059ea:	e003      	b.n	80059f4 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 80059ec:	2301      	movs	r3, #1
 80059ee:	73fb      	strb	r3, [r7, #15]
      break;
 80059f0:	e000      	b.n	80059f4 <HAL_TIM_ConfigClockSource+0x178>
      break;
 80059f2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	2201      	movs	r2, #1
 80059f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	2200      	movs	r2, #0
 8005a00:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005a04:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a06:	4618      	mov	r0, r3
 8005a08:	3710      	adds	r7, #16
 8005a0a:	46bd      	mov	sp, r7
 8005a0c:	bd80      	pop	{r7, pc}
	...

08005a10 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005a10:	b480      	push	{r7}
 8005a12:	b085      	sub	sp, #20
 8005a14:	af00      	add	r7, sp, #0
 8005a16:	6078      	str	r0, [r7, #4]
 8005a18:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8005a1a:	2300      	movs	r3, #0
 8005a1c:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8005a1e:	683b      	ldr	r3, [r7, #0]
 8005a20:	2b0c      	cmp	r3, #12
 8005a22:	d831      	bhi.n	8005a88 <HAL_TIM_ReadCapturedValue+0x78>
 8005a24:	a201      	add	r2, pc, #4	@ (adr r2, 8005a2c <HAL_TIM_ReadCapturedValue+0x1c>)
 8005a26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a2a:	bf00      	nop
 8005a2c:	08005a61 	.word	0x08005a61
 8005a30:	08005a89 	.word	0x08005a89
 8005a34:	08005a89 	.word	0x08005a89
 8005a38:	08005a89 	.word	0x08005a89
 8005a3c:	08005a6b 	.word	0x08005a6b
 8005a40:	08005a89 	.word	0x08005a89
 8005a44:	08005a89 	.word	0x08005a89
 8005a48:	08005a89 	.word	0x08005a89
 8005a4c:	08005a75 	.word	0x08005a75
 8005a50:	08005a89 	.word	0x08005a89
 8005a54:	08005a89 	.word	0x08005a89
 8005a58:	08005a89 	.word	0x08005a89
 8005a5c:	08005a7f 	.word	0x08005a7f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005a66:	60fb      	str	r3, [r7, #12]

      break;
 8005a68:	e00f      	b.n	8005a8a <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005a70:	60fb      	str	r3, [r7, #12]

      break;
 8005a72:	e00a      	b.n	8005a8a <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005a7a:	60fb      	str	r3, [r7, #12]

      break;
 8005a7c:	e005      	b.n	8005a8a <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a84:	60fb      	str	r3, [r7, #12]

      break;
 8005a86:	e000      	b.n	8005a8a <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8005a88:	bf00      	nop
  }

  return tmpreg;
 8005a8a:	68fb      	ldr	r3, [r7, #12]
}
 8005a8c:	4618      	mov	r0, r3
 8005a8e:	3714      	adds	r7, #20
 8005a90:	46bd      	mov	sp, r7
 8005a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a96:	4770      	bx	lr

08005a98 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005a98:	b480      	push	{r7}
 8005a9a:	b083      	sub	sp, #12
 8005a9c:	af00      	add	r7, sp, #0
 8005a9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8005aa0:	bf00      	nop
 8005aa2:	370c      	adds	r7, #12
 8005aa4:	46bd      	mov	sp, r7
 8005aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aaa:	4770      	bx	lr

08005aac <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005aac:	b480      	push	{r7}
 8005aae:	b083      	sub	sp, #12
 8005ab0:	af00      	add	r7, sp, #0
 8005ab2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005ab4:	bf00      	nop
 8005ab6:	370c      	adds	r7, #12
 8005ab8:	46bd      	mov	sp, r7
 8005aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005abe:	4770      	bx	lr

08005ac0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005ac0:	b480      	push	{r7}
 8005ac2:	b083      	sub	sp, #12
 8005ac4:	af00      	add	r7, sp, #0
 8005ac6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005ac8:	bf00      	nop
 8005aca:	370c      	adds	r7, #12
 8005acc:	46bd      	mov	sp, r7
 8005ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ad2:	4770      	bx	lr

08005ad4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005ad4:	b480      	push	{r7}
 8005ad6:	b083      	sub	sp, #12
 8005ad8:	af00      	add	r7, sp, #0
 8005ada:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005adc:	bf00      	nop
 8005ade:	370c      	adds	r7, #12
 8005ae0:	46bd      	mov	sp, r7
 8005ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ae6:	4770      	bx	lr

08005ae8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005ae8:	b480      	push	{r7}
 8005aea:	b085      	sub	sp, #20
 8005aec:	af00      	add	r7, sp, #0
 8005aee:	6078      	str	r0, [r7, #4]
 8005af0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	4a42      	ldr	r2, [pc, #264]	@ (8005c04 <TIM_Base_SetConfig+0x11c>)
 8005afc:	4293      	cmp	r3, r2
 8005afe:	d00f      	beq.n	8005b20 <TIM_Base_SetConfig+0x38>
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005b06:	d00b      	beq.n	8005b20 <TIM_Base_SetConfig+0x38>
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	4a3f      	ldr	r2, [pc, #252]	@ (8005c08 <TIM_Base_SetConfig+0x120>)
 8005b0c:	4293      	cmp	r3, r2
 8005b0e:	d007      	beq.n	8005b20 <TIM_Base_SetConfig+0x38>
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	4a3e      	ldr	r2, [pc, #248]	@ (8005c0c <TIM_Base_SetConfig+0x124>)
 8005b14:	4293      	cmp	r3, r2
 8005b16:	d003      	beq.n	8005b20 <TIM_Base_SetConfig+0x38>
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	4a3d      	ldr	r2, [pc, #244]	@ (8005c10 <TIM_Base_SetConfig+0x128>)
 8005b1c:	4293      	cmp	r3, r2
 8005b1e:	d108      	bne.n	8005b32 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005b26:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005b28:	683b      	ldr	r3, [r7, #0]
 8005b2a:	685b      	ldr	r3, [r3, #4]
 8005b2c:	68fa      	ldr	r2, [r7, #12]
 8005b2e:	4313      	orrs	r3, r2
 8005b30:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	4a33      	ldr	r2, [pc, #204]	@ (8005c04 <TIM_Base_SetConfig+0x11c>)
 8005b36:	4293      	cmp	r3, r2
 8005b38:	d01b      	beq.n	8005b72 <TIM_Base_SetConfig+0x8a>
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005b40:	d017      	beq.n	8005b72 <TIM_Base_SetConfig+0x8a>
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	4a30      	ldr	r2, [pc, #192]	@ (8005c08 <TIM_Base_SetConfig+0x120>)
 8005b46:	4293      	cmp	r3, r2
 8005b48:	d013      	beq.n	8005b72 <TIM_Base_SetConfig+0x8a>
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	4a2f      	ldr	r2, [pc, #188]	@ (8005c0c <TIM_Base_SetConfig+0x124>)
 8005b4e:	4293      	cmp	r3, r2
 8005b50:	d00f      	beq.n	8005b72 <TIM_Base_SetConfig+0x8a>
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	4a2e      	ldr	r2, [pc, #184]	@ (8005c10 <TIM_Base_SetConfig+0x128>)
 8005b56:	4293      	cmp	r3, r2
 8005b58:	d00b      	beq.n	8005b72 <TIM_Base_SetConfig+0x8a>
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	4a2d      	ldr	r2, [pc, #180]	@ (8005c14 <TIM_Base_SetConfig+0x12c>)
 8005b5e:	4293      	cmp	r3, r2
 8005b60:	d007      	beq.n	8005b72 <TIM_Base_SetConfig+0x8a>
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	4a2c      	ldr	r2, [pc, #176]	@ (8005c18 <TIM_Base_SetConfig+0x130>)
 8005b66:	4293      	cmp	r3, r2
 8005b68:	d003      	beq.n	8005b72 <TIM_Base_SetConfig+0x8a>
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	4a2b      	ldr	r2, [pc, #172]	@ (8005c1c <TIM_Base_SetConfig+0x134>)
 8005b6e:	4293      	cmp	r3, r2
 8005b70:	d108      	bne.n	8005b84 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005b78:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005b7a:	683b      	ldr	r3, [r7, #0]
 8005b7c:	68db      	ldr	r3, [r3, #12]
 8005b7e:	68fa      	ldr	r2, [r7, #12]
 8005b80:	4313      	orrs	r3, r2
 8005b82:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005b8a:	683b      	ldr	r3, [r7, #0]
 8005b8c:	695b      	ldr	r3, [r3, #20]
 8005b8e:	4313      	orrs	r3, r2
 8005b90:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	68fa      	ldr	r2, [r7, #12]
 8005b96:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005b98:	683b      	ldr	r3, [r7, #0]
 8005b9a:	689a      	ldr	r2, [r3, #8]
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005ba0:	683b      	ldr	r3, [r7, #0]
 8005ba2:	681a      	ldr	r2, [r3, #0]
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	4a16      	ldr	r2, [pc, #88]	@ (8005c04 <TIM_Base_SetConfig+0x11c>)
 8005bac:	4293      	cmp	r3, r2
 8005bae:	d00f      	beq.n	8005bd0 <TIM_Base_SetConfig+0xe8>
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	4a17      	ldr	r2, [pc, #92]	@ (8005c10 <TIM_Base_SetConfig+0x128>)
 8005bb4:	4293      	cmp	r3, r2
 8005bb6:	d00b      	beq.n	8005bd0 <TIM_Base_SetConfig+0xe8>
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	4a16      	ldr	r2, [pc, #88]	@ (8005c14 <TIM_Base_SetConfig+0x12c>)
 8005bbc:	4293      	cmp	r3, r2
 8005bbe:	d007      	beq.n	8005bd0 <TIM_Base_SetConfig+0xe8>
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	4a15      	ldr	r2, [pc, #84]	@ (8005c18 <TIM_Base_SetConfig+0x130>)
 8005bc4:	4293      	cmp	r3, r2
 8005bc6:	d003      	beq.n	8005bd0 <TIM_Base_SetConfig+0xe8>
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	4a14      	ldr	r2, [pc, #80]	@ (8005c1c <TIM_Base_SetConfig+0x134>)
 8005bcc:	4293      	cmp	r3, r2
 8005bce:	d103      	bne.n	8005bd8 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005bd0:	683b      	ldr	r3, [r7, #0]
 8005bd2:	691a      	ldr	r2, [r3, #16]
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	2201      	movs	r2, #1
 8005bdc:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	691b      	ldr	r3, [r3, #16]
 8005be2:	f003 0301 	and.w	r3, r3, #1
 8005be6:	2b01      	cmp	r3, #1
 8005be8:	d105      	bne.n	8005bf6 <TIM_Base_SetConfig+0x10e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	691b      	ldr	r3, [r3, #16]
 8005bee:	f023 0201 	bic.w	r2, r3, #1
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	611a      	str	r2, [r3, #16]
  }
}
 8005bf6:	bf00      	nop
 8005bf8:	3714      	adds	r7, #20
 8005bfa:	46bd      	mov	sp, r7
 8005bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c00:	4770      	bx	lr
 8005c02:	bf00      	nop
 8005c04:	40012c00 	.word	0x40012c00
 8005c08:	40000400 	.word	0x40000400
 8005c0c:	40000800 	.word	0x40000800
 8005c10:	40013400 	.word	0x40013400
 8005c14:	40014000 	.word	0x40014000
 8005c18:	40014400 	.word	0x40014400
 8005c1c:	40014800 	.word	0x40014800

08005c20 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005c20:	b480      	push	{r7}
 8005c22:	b087      	sub	sp, #28
 8005c24:	af00      	add	r7, sp, #0
 8005c26:	6078      	str	r0, [r7, #4]
 8005c28:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	6a1b      	ldr	r3, [r3, #32]
 8005c2e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	6a1b      	ldr	r3, [r3, #32]
 8005c34:	f023 0201 	bic.w	r2, r3, #1
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	685b      	ldr	r3, [r3, #4]
 8005c40:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	699b      	ldr	r3, [r3, #24]
 8005c46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005c4e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005c52:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	f023 0303 	bic.w	r3, r3, #3
 8005c5a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005c5c:	683b      	ldr	r3, [r7, #0]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	68fa      	ldr	r2, [r7, #12]
 8005c62:	4313      	orrs	r3, r2
 8005c64:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005c66:	697b      	ldr	r3, [r7, #20]
 8005c68:	f023 0302 	bic.w	r3, r3, #2
 8005c6c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005c6e:	683b      	ldr	r3, [r7, #0]
 8005c70:	689b      	ldr	r3, [r3, #8]
 8005c72:	697a      	ldr	r2, [r7, #20]
 8005c74:	4313      	orrs	r3, r2
 8005c76:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	4a2c      	ldr	r2, [pc, #176]	@ (8005d2c <TIM_OC1_SetConfig+0x10c>)
 8005c7c:	4293      	cmp	r3, r2
 8005c7e:	d00f      	beq.n	8005ca0 <TIM_OC1_SetConfig+0x80>
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	4a2b      	ldr	r2, [pc, #172]	@ (8005d30 <TIM_OC1_SetConfig+0x110>)
 8005c84:	4293      	cmp	r3, r2
 8005c86:	d00b      	beq.n	8005ca0 <TIM_OC1_SetConfig+0x80>
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	4a2a      	ldr	r2, [pc, #168]	@ (8005d34 <TIM_OC1_SetConfig+0x114>)
 8005c8c:	4293      	cmp	r3, r2
 8005c8e:	d007      	beq.n	8005ca0 <TIM_OC1_SetConfig+0x80>
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	4a29      	ldr	r2, [pc, #164]	@ (8005d38 <TIM_OC1_SetConfig+0x118>)
 8005c94:	4293      	cmp	r3, r2
 8005c96:	d003      	beq.n	8005ca0 <TIM_OC1_SetConfig+0x80>
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	4a28      	ldr	r2, [pc, #160]	@ (8005d3c <TIM_OC1_SetConfig+0x11c>)
 8005c9c:	4293      	cmp	r3, r2
 8005c9e:	d10c      	bne.n	8005cba <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005ca0:	697b      	ldr	r3, [r7, #20]
 8005ca2:	f023 0308 	bic.w	r3, r3, #8
 8005ca6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005ca8:	683b      	ldr	r3, [r7, #0]
 8005caa:	68db      	ldr	r3, [r3, #12]
 8005cac:	697a      	ldr	r2, [r7, #20]
 8005cae:	4313      	orrs	r3, r2
 8005cb0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005cb2:	697b      	ldr	r3, [r7, #20]
 8005cb4:	f023 0304 	bic.w	r3, r3, #4
 8005cb8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	4a1b      	ldr	r2, [pc, #108]	@ (8005d2c <TIM_OC1_SetConfig+0x10c>)
 8005cbe:	4293      	cmp	r3, r2
 8005cc0:	d00f      	beq.n	8005ce2 <TIM_OC1_SetConfig+0xc2>
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	4a1a      	ldr	r2, [pc, #104]	@ (8005d30 <TIM_OC1_SetConfig+0x110>)
 8005cc6:	4293      	cmp	r3, r2
 8005cc8:	d00b      	beq.n	8005ce2 <TIM_OC1_SetConfig+0xc2>
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	4a19      	ldr	r2, [pc, #100]	@ (8005d34 <TIM_OC1_SetConfig+0x114>)
 8005cce:	4293      	cmp	r3, r2
 8005cd0:	d007      	beq.n	8005ce2 <TIM_OC1_SetConfig+0xc2>
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	4a18      	ldr	r2, [pc, #96]	@ (8005d38 <TIM_OC1_SetConfig+0x118>)
 8005cd6:	4293      	cmp	r3, r2
 8005cd8:	d003      	beq.n	8005ce2 <TIM_OC1_SetConfig+0xc2>
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	4a17      	ldr	r2, [pc, #92]	@ (8005d3c <TIM_OC1_SetConfig+0x11c>)
 8005cde:	4293      	cmp	r3, r2
 8005ce0:	d111      	bne.n	8005d06 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005ce2:	693b      	ldr	r3, [r7, #16]
 8005ce4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005ce8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005cea:	693b      	ldr	r3, [r7, #16]
 8005cec:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005cf0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005cf2:	683b      	ldr	r3, [r7, #0]
 8005cf4:	695b      	ldr	r3, [r3, #20]
 8005cf6:	693a      	ldr	r2, [r7, #16]
 8005cf8:	4313      	orrs	r3, r2
 8005cfa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005cfc:	683b      	ldr	r3, [r7, #0]
 8005cfe:	699b      	ldr	r3, [r3, #24]
 8005d00:	693a      	ldr	r2, [r7, #16]
 8005d02:	4313      	orrs	r3, r2
 8005d04:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	693a      	ldr	r2, [r7, #16]
 8005d0a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	68fa      	ldr	r2, [r7, #12]
 8005d10:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005d12:	683b      	ldr	r3, [r7, #0]
 8005d14:	685a      	ldr	r2, [r3, #4]
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	697a      	ldr	r2, [r7, #20]
 8005d1e:	621a      	str	r2, [r3, #32]
}
 8005d20:	bf00      	nop
 8005d22:	371c      	adds	r7, #28
 8005d24:	46bd      	mov	sp, r7
 8005d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d2a:	4770      	bx	lr
 8005d2c:	40012c00 	.word	0x40012c00
 8005d30:	40013400 	.word	0x40013400
 8005d34:	40014000 	.word	0x40014000
 8005d38:	40014400 	.word	0x40014400
 8005d3c:	40014800 	.word	0x40014800

08005d40 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005d40:	b480      	push	{r7}
 8005d42:	b087      	sub	sp, #28
 8005d44:	af00      	add	r7, sp, #0
 8005d46:	6078      	str	r0, [r7, #4]
 8005d48:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	6a1b      	ldr	r3, [r3, #32]
 8005d4e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	6a1b      	ldr	r3, [r3, #32]
 8005d54:	f023 0210 	bic.w	r2, r3, #16
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	685b      	ldr	r3, [r3, #4]
 8005d60:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	699b      	ldr	r3, [r3, #24]
 8005d66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005d6e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005d72:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005d7a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005d7c:	683b      	ldr	r3, [r7, #0]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	021b      	lsls	r3, r3, #8
 8005d82:	68fa      	ldr	r2, [r7, #12]
 8005d84:	4313      	orrs	r3, r2
 8005d86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005d88:	697b      	ldr	r3, [r7, #20]
 8005d8a:	f023 0320 	bic.w	r3, r3, #32
 8005d8e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005d90:	683b      	ldr	r3, [r7, #0]
 8005d92:	689b      	ldr	r3, [r3, #8]
 8005d94:	011b      	lsls	r3, r3, #4
 8005d96:	697a      	ldr	r2, [r7, #20]
 8005d98:	4313      	orrs	r3, r2
 8005d9a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	4a28      	ldr	r2, [pc, #160]	@ (8005e40 <TIM_OC2_SetConfig+0x100>)
 8005da0:	4293      	cmp	r3, r2
 8005da2:	d003      	beq.n	8005dac <TIM_OC2_SetConfig+0x6c>
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	4a27      	ldr	r2, [pc, #156]	@ (8005e44 <TIM_OC2_SetConfig+0x104>)
 8005da8:	4293      	cmp	r3, r2
 8005daa:	d10d      	bne.n	8005dc8 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005dac:	697b      	ldr	r3, [r7, #20]
 8005dae:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005db2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005db4:	683b      	ldr	r3, [r7, #0]
 8005db6:	68db      	ldr	r3, [r3, #12]
 8005db8:	011b      	lsls	r3, r3, #4
 8005dba:	697a      	ldr	r2, [r7, #20]
 8005dbc:	4313      	orrs	r3, r2
 8005dbe:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005dc0:	697b      	ldr	r3, [r7, #20]
 8005dc2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005dc6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	4a1d      	ldr	r2, [pc, #116]	@ (8005e40 <TIM_OC2_SetConfig+0x100>)
 8005dcc:	4293      	cmp	r3, r2
 8005dce:	d00f      	beq.n	8005df0 <TIM_OC2_SetConfig+0xb0>
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	4a1c      	ldr	r2, [pc, #112]	@ (8005e44 <TIM_OC2_SetConfig+0x104>)
 8005dd4:	4293      	cmp	r3, r2
 8005dd6:	d00b      	beq.n	8005df0 <TIM_OC2_SetConfig+0xb0>
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	4a1b      	ldr	r2, [pc, #108]	@ (8005e48 <TIM_OC2_SetConfig+0x108>)
 8005ddc:	4293      	cmp	r3, r2
 8005dde:	d007      	beq.n	8005df0 <TIM_OC2_SetConfig+0xb0>
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	4a1a      	ldr	r2, [pc, #104]	@ (8005e4c <TIM_OC2_SetConfig+0x10c>)
 8005de4:	4293      	cmp	r3, r2
 8005de6:	d003      	beq.n	8005df0 <TIM_OC2_SetConfig+0xb0>
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	4a19      	ldr	r2, [pc, #100]	@ (8005e50 <TIM_OC2_SetConfig+0x110>)
 8005dec:	4293      	cmp	r3, r2
 8005dee:	d113      	bne.n	8005e18 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005df0:	693b      	ldr	r3, [r7, #16]
 8005df2:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005df6:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005df8:	693b      	ldr	r3, [r7, #16]
 8005dfa:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005dfe:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005e00:	683b      	ldr	r3, [r7, #0]
 8005e02:	695b      	ldr	r3, [r3, #20]
 8005e04:	009b      	lsls	r3, r3, #2
 8005e06:	693a      	ldr	r2, [r7, #16]
 8005e08:	4313      	orrs	r3, r2
 8005e0a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005e0c:	683b      	ldr	r3, [r7, #0]
 8005e0e:	699b      	ldr	r3, [r3, #24]
 8005e10:	009b      	lsls	r3, r3, #2
 8005e12:	693a      	ldr	r2, [r7, #16]
 8005e14:	4313      	orrs	r3, r2
 8005e16:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	693a      	ldr	r2, [r7, #16]
 8005e1c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	68fa      	ldr	r2, [r7, #12]
 8005e22:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005e24:	683b      	ldr	r3, [r7, #0]
 8005e26:	685a      	ldr	r2, [r3, #4]
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	697a      	ldr	r2, [r7, #20]
 8005e30:	621a      	str	r2, [r3, #32]
}
 8005e32:	bf00      	nop
 8005e34:	371c      	adds	r7, #28
 8005e36:	46bd      	mov	sp, r7
 8005e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e3c:	4770      	bx	lr
 8005e3e:	bf00      	nop
 8005e40:	40012c00 	.word	0x40012c00
 8005e44:	40013400 	.word	0x40013400
 8005e48:	40014000 	.word	0x40014000
 8005e4c:	40014400 	.word	0x40014400
 8005e50:	40014800 	.word	0x40014800

08005e54 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005e54:	b480      	push	{r7}
 8005e56:	b087      	sub	sp, #28
 8005e58:	af00      	add	r7, sp, #0
 8005e5a:	6078      	str	r0, [r7, #4]
 8005e5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	6a1b      	ldr	r3, [r3, #32]
 8005e62:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	6a1b      	ldr	r3, [r3, #32]
 8005e68:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	685b      	ldr	r3, [r3, #4]
 8005e74:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	69db      	ldr	r3, [r3, #28]
 8005e7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005e82:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005e86:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	f023 0303 	bic.w	r3, r3, #3
 8005e8e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005e90:	683b      	ldr	r3, [r7, #0]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	68fa      	ldr	r2, [r7, #12]
 8005e96:	4313      	orrs	r3, r2
 8005e98:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005e9a:	697b      	ldr	r3, [r7, #20]
 8005e9c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005ea0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005ea2:	683b      	ldr	r3, [r7, #0]
 8005ea4:	689b      	ldr	r3, [r3, #8]
 8005ea6:	021b      	lsls	r3, r3, #8
 8005ea8:	697a      	ldr	r2, [r7, #20]
 8005eaa:	4313      	orrs	r3, r2
 8005eac:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	4a27      	ldr	r2, [pc, #156]	@ (8005f50 <TIM_OC3_SetConfig+0xfc>)
 8005eb2:	4293      	cmp	r3, r2
 8005eb4:	d003      	beq.n	8005ebe <TIM_OC3_SetConfig+0x6a>
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	4a26      	ldr	r2, [pc, #152]	@ (8005f54 <TIM_OC3_SetConfig+0x100>)
 8005eba:	4293      	cmp	r3, r2
 8005ebc:	d10d      	bne.n	8005eda <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005ebe:	697b      	ldr	r3, [r7, #20]
 8005ec0:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005ec4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005ec6:	683b      	ldr	r3, [r7, #0]
 8005ec8:	68db      	ldr	r3, [r3, #12]
 8005eca:	021b      	lsls	r3, r3, #8
 8005ecc:	697a      	ldr	r2, [r7, #20]
 8005ece:	4313      	orrs	r3, r2
 8005ed0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005ed2:	697b      	ldr	r3, [r7, #20]
 8005ed4:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005ed8:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	4a1c      	ldr	r2, [pc, #112]	@ (8005f50 <TIM_OC3_SetConfig+0xfc>)
 8005ede:	4293      	cmp	r3, r2
 8005ee0:	d00f      	beq.n	8005f02 <TIM_OC3_SetConfig+0xae>
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	4a1b      	ldr	r2, [pc, #108]	@ (8005f54 <TIM_OC3_SetConfig+0x100>)
 8005ee6:	4293      	cmp	r3, r2
 8005ee8:	d00b      	beq.n	8005f02 <TIM_OC3_SetConfig+0xae>
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	4a1a      	ldr	r2, [pc, #104]	@ (8005f58 <TIM_OC3_SetConfig+0x104>)
 8005eee:	4293      	cmp	r3, r2
 8005ef0:	d007      	beq.n	8005f02 <TIM_OC3_SetConfig+0xae>
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	4a19      	ldr	r2, [pc, #100]	@ (8005f5c <TIM_OC3_SetConfig+0x108>)
 8005ef6:	4293      	cmp	r3, r2
 8005ef8:	d003      	beq.n	8005f02 <TIM_OC3_SetConfig+0xae>
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	4a18      	ldr	r2, [pc, #96]	@ (8005f60 <TIM_OC3_SetConfig+0x10c>)
 8005efe:	4293      	cmp	r3, r2
 8005f00:	d113      	bne.n	8005f2a <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005f02:	693b      	ldr	r3, [r7, #16]
 8005f04:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005f08:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005f0a:	693b      	ldr	r3, [r7, #16]
 8005f0c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005f10:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005f12:	683b      	ldr	r3, [r7, #0]
 8005f14:	695b      	ldr	r3, [r3, #20]
 8005f16:	011b      	lsls	r3, r3, #4
 8005f18:	693a      	ldr	r2, [r7, #16]
 8005f1a:	4313      	orrs	r3, r2
 8005f1c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005f1e:	683b      	ldr	r3, [r7, #0]
 8005f20:	699b      	ldr	r3, [r3, #24]
 8005f22:	011b      	lsls	r3, r3, #4
 8005f24:	693a      	ldr	r2, [r7, #16]
 8005f26:	4313      	orrs	r3, r2
 8005f28:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	693a      	ldr	r2, [r7, #16]
 8005f2e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	68fa      	ldr	r2, [r7, #12]
 8005f34:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005f36:	683b      	ldr	r3, [r7, #0]
 8005f38:	685a      	ldr	r2, [r3, #4]
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	697a      	ldr	r2, [r7, #20]
 8005f42:	621a      	str	r2, [r3, #32]
}
 8005f44:	bf00      	nop
 8005f46:	371c      	adds	r7, #28
 8005f48:	46bd      	mov	sp, r7
 8005f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f4e:	4770      	bx	lr
 8005f50:	40012c00 	.word	0x40012c00
 8005f54:	40013400 	.word	0x40013400
 8005f58:	40014000 	.word	0x40014000
 8005f5c:	40014400 	.word	0x40014400
 8005f60:	40014800 	.word	0x40014800

08005f64 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005f64:	b480      	push	{r7}
 8005f66:	b087      	sub	sp, #28
 8005f68:	af00      	add	r7, sp, #0
 8005f6a:	6078      	str	r0, [r7, #4]
 8005f6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	6a1b      	ldr	r3, [r3, #32]
 8005f72:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	6a1b      	ldr	r3, [r3, #32]
 8005f78:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	685b      	ldr	r3, [r3, #4]
 8005f84:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	69db      	ldr	r3, [r3, #28]
 8005f8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005f92:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005f96:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005f9e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005fa0:	683b      	ldr	r3, [r7, #0]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	021b      	lsls	r3, r3, #8
 8005fa6:	68fa      	ldr	r2, [r7, #12]
 8005fa8:	4313      	orrs	r3, r2
 8005faa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005fac:	693b      	ldr	r3, [r7, #16]
 8005fae:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005fb2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005fb4:	683b      	ldr	r3, [r7, #0]
 8005fb6:	689b      	ldr	r3, [r3, #8]
 8005fb8:	031b      	lsls	r3, r3, #12
 8005fba:	693a      	ldr	r2, [r7, #16]
 8005fbc:	4313      	orrs	r3, r2
 8005fbe:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	4a18      	ldr	r2, [pc, #96]	@ (8006024 <TIM_OC4_SetConfig+0xc0>)
 8005fc4:	4293      	cmp	r3, r2
 8005fc6:	d00f      	beq.n	8005fe8 <TIM_OC4_SetConfig+0x84>
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	4a17      	ldr	r2, [pc, #92]	@ (8006028 <TIM_OC4_SetConfig+0xc4>)
 8005fcc:	4293      	cmp	r3, r2
 8005fce:	d00b      	beq.n	8005fe8 <TIM_OC4_SetConfig+0x84>
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	4a16      	ldr	r2, [pc, #88]	@ (800602c <TIM_OC4_SetConfig+0xc8>)
 8005fd4:	4293      	cmp	r3, r2
 8005fd6:	d007      	beq.n	8005fe8 <TIM_OC4_SetConfig+0x84>
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	4a15      	ldr	r2, [pc, #84]	@ (8006030 <TIM_OC4_SetConfig+0xcc>)
 8005fdc:	4293      	cmp	r3, r2
 8005fde:	d003      	beq.n	8005fe8 <TIM_OC4_SetConfig+0x84>
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	4a14      	ldr	r2, [pc, #80]	@ (8006034 <TIM_OC4_SetConfig+0xd0>)
 8005fe4:	4293      	cmp	r3, r2
 8005fe6:	d109      	bne.n	8005ffc <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005fe8:	697b      	ldr	r3, [r7, #20]
 8005fea:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005fee:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005ff0:	683b      	ldr	r3, [r7, #0]
 8005ff2:	695b      	ldr	r3, [r3, #20]
 8005ff4:	019b      	lsls	r3, r3, #6
 8005ff6:	697a      	ldr	r2, [r7, #20]
 8005ff8:	4313      	orrs	r3, r2
 8005ffa:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	697a      	ldr	r2, [r7, #20]
 8006000:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	68fa      	ldr	r2, [r7, #12]
 8006006:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006008:	683b      	ldr	r3, [r7, #0]
 800600a:	685a      	ldr	r2, [r3, #4]
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	693a      	ldr	r2, [r7, #16]
 8006014:	621a      	str	r2, [r3, #32]
}
 8006016:	bf00      	nop
 8006018:	371c      	adds	r7, #28
 800601a:	46bd      	mov	sp, r7
 800601c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006020:	4770      	bx	lr
 8006022:	bf00      	nop
 8006024:	40012c00 	.word	0x40012c00
 8006028:	40013400 	.word	0x40013400
 800602c:	40014000 	.word	0x40014000
 8006030:	40014400 	.word	0x40014400
 8006034:	40014800 	.word	0x40014800

08006038 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006038:	b480      	push	{r7}
 800603a:	b087      	sub	sp, #28
 800603c:	af00      	add	r7, sp, #0
 800603e:	6078      	str	r0, [r7, #4]
 8006040:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	6a1b      	ldr	r3, [r3, #32]
 8006046:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	6a1b      	ldr	r3, [r3, #32]
 800604c:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	685b      	ldr	r3, [r3, #4]
 8006058:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800605e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006066:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800606a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800606c:	683b      	ldr	r3, [r7, #0]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	68fa      	ldr	r2, [r7, #12]
 8006072:	4313      	orrs	r3, r2
 8006074:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8006076:	693b      	ldr	r3, [r7, #16]
 8006078:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800607c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800607e:	683b      	ldr	r3, [r7, #0]
 8006080:	689b      	ldr	r3, [r3, #8]
 8006082:	041b      	lsls	r3, r3, #16
 8006084:	693a      	ldr	r2, [r7, #16]
 8006086:	4313      	orrs	r3, r2
 8006088:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	4a17      	ldr	r2, [pc, #92]	@ (80060ec <TIM_OC5_SetConfig+0xb4>)
 800608e:	4293      	cmp	r3, r2
 8006090:	d00f      	beq.n	80060b2 <TIM_OC5_SetConfig+0x7a>
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	4a16      	ldr	r2, [pc, #88]	@ (80060f0 <TIM_OC5_SetConfig+0xb8>)
 8006096:	4293      	cmp	r3, r2
 8006098:	d00b      	beq.n	80060b2 <TIM_OC5_SetConfig+0x7a>
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	4a15      	ldr	r2, [pc, #84]	@ (80060f4 <TIM_OC5_SetConfig+0xbc>)
 800609e:	4293      	cmp	r3, r2
 80060a0:	d007      	beq.n	80060b2 <TIM_OC5_SetConfig+0x7a>
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	4a14      	ldr	r2, [pc, #80]	@ (80060f8 <TIM_OC5_SetConfig+0xc0>)
 80060a6:	4293      	cmp	r3, r2
 80060a8:	d003      	beq.n	80060b2 <TIM_OC5_SetConfig+0x7a>
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	4a13      	ldr	r2, [pc, #76]	@ (80060fc <TIM_OC5_SetConfig+0xc4>)
 80060ae:	4293      	cmp	r3, r2
 80060b0:	d109      	bne.n	80060c6 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80060b2:	697b      	ldr	r3, [r7, #20]
 80060b4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80060b8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80060ba:	683b      	ldr	r3, [r7, #0]
 80060bc:	695b      	ldr	r3, [r3, #20]
 80060be:	021b      	lsls	r3, r3, #8
 80060c0:	697a      	ldr	r2, [r7, #20]
 80060c2:	4313      	orrs	r3, r2
 80060c4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	697a      	ldr	r2, [r7, #20]
 80060ca:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	68fa      	ldr	r2, [r7, #12]
 80060d0:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80060d2:	683b      	ldr	r3, [r7, #0]
 80060d4:	685a      	ldr	r2, [r3, #4]
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	693a      	ldr	r2, [r7, #16]
 80060de:	621a      	str	r2, [r3, #32]
}
 80060e0:	bf00      	nop
 80060e2:	371c      	adds	r7, #28
 80060e4:	46bd      	mov	sp, r7
 80060e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ea:	4770      	bx	lr
 80060ec:	40012c00 	.word	0x40012c00
 80060f0:	40013400 	.word	0x40013400
 80060f4:	40014000 	.word	0x40014000
 80060f8:	40014400 	.word	0x40014400
 80060fc:	40014800 	.word	0x40014800

08006100 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006100:	b480      	push	{r7}
 8006102:	b087      	sub	sp, #28
 8006104:	af00      	add	r7, sp, #0
 8006106:	6078      	str	r0, [r7, #4]
 8006108:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	6a1b      	ldr	r3, [r3, #32]
 800610e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	6a1b      	ldr	r3, [r3, #32]
 8006114:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	685b      	ldr	r3, [r3, #4]
 8006120:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006126:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800612e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006132:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006134:	683b      	ldr	r3, [r7, #0]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	021b      	lsls	r3, r3, #8
 800613a:	68fa      	ldr	r2, [r7, #12]
 800613c:	4313      	orrs	r3, r2
 800613e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8006140:	693b      	ldr	r3, [r7, #16]
 8006142:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8006146:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8006148:	683b      	ldr	r3, [r7, #0]
 800614a:	689b      	ldr	r3, [r3, #8]
 800614c:	051b      	lsls	r3, r3, #20
 800614e:	693a      	ldr	r2, [r7, #16]
 8006150:	4313      	orrs	r3, r2
 8006152:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	4a18      	ldr	r2, [pc, #96]	@ (80061b8 <TIM_OC6_SetConfig+0xb8>)
 8006158:	4293      	cmp	r3, r2
 800615a:	d00f      	beq.n	800617c <TIM_OC6_SetConfig+0x7c>
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	4a17      	ldr	r2, [pc, #92]	@ (80061bc <TIM_OC6_SetConfig+0xbc>)
 8006160:	4293      	cmp	r3, r2
 8006162:	d00b      	beq.n	800617c <TIM_OC6_SetConfig+0x7c>
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	4a16      	ldr	r2, [pc, #88]	@ (80061c0 <TIM_OC6_SetConfig+0xc0>)
 8006168:	4293      	cmp	r3, r2
 800616a:	d007      	beq.n	800617c <TIM_OC6_SetConfig+0x7c>
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	4a15      	ldr	r2, [pc, #84]	@ (80061c4 <TIM_OC6_SetConfig+0xc4>)
 8006170:	4293      	cmp	r3, r2
 8006172:	d003      	beq.n	800617c <TIM_OC6_SetConfig+0x7c>
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	4a14      	ldr	r2, [pc, #80]	@ (80061c8 <TIM_OC6_SetConfig+0xc8>)
 8006178:	4293      	cmp	r3, r2
 800617a:	d109      	bne.n	8006190 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800617c:	697b      	ldr	r3, [r7, #20]
 800617e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006182:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006184:	683b      	ldr	r3, [r7, #0]
 8006186:	695b      	ldr	r3, [r3, #20]
 8006188:	029b      	lsls	r3, r3, #10
 800618a:	697a      	ldr	r2, [r7, #20]
 800618c:	4313      	orrs	r3, r2
 800618e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	697a      	ldr	r2, [r7, #20]
 8006194:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	68fa      	ldr	r2, [r7, #12]
 800619a:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800619c:	683b      	ldr	r3, [r7, #0]
 800619e:	685a      	ldr	r2, [r3, #4]
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	693a      	ldr	r2, [r7, #16]
 80061a8:	621a      	str	r2, [r3, #32]
}
 80061aa:	bf00      	nop
 80061ac:	371c      	adds	r7, #28
 80061ae:	46bd      	mov	sp, r7
 80061b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061b4:	4770      	bx	lr
 80061b6:	bf00      	nop
 80061b8:	40012c00 	.word	0x40012c00
 80061bc:	40013400 	.word	0x40013400
 80061c0:	40014000 	.word	0x40014000
 80061c4:	40014400 	.word	0x40014400
 80061c8:	40014800 	.word	0x40014800

080061cc <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 80061cc:	b480      	push	{r7}
 80061ce:	b087      	sub	sp, #28
 80061d0:	af00      	add	r7, sp, #0
 80061d2:	60f8      	str	r0, [r7, #12]
 80061d4:	60b9      	str	r1, [r7, #8]
 80061d6:	607a      	str	r2, [r7, #4]
 80061d8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	6a1b      	ldr	r3, [r3, #32]
 80061de:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	6a1b      	ldr	r3, [r3, #32]
 80061e4:	f023 0201 	bic.w	r2, r3, #1
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	699b      	ldr	r3, [r3, #24]
 80061f0:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	4a24      	ldr	r2, [pc, #144]	@ (8006288 <TIM_TI1_SetConfig+0xbc>)
 80061f6:	4293      	cmp	r3, r2
 80061f8:	d013      	beq.n	8006222 <TIM_TI1_SetConfig+0x56>
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006200:	d00f      	beq.n	8006222 <TIM_TI1_SetConfig+0x56>
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	4a21      	ldr	r2, [pc, #132]	@ (800628c <TIM_TI1_SetConfig+0xc0>)
 8006206:	4293      	cmp	r3, r2
 8006208:	d00b      	beq.n	8006222 <TIM_TI1_SetConfig+0x56>
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	4a20      	ldr	r2, [pc, #128]	@ (8006290 <TIM_TI1_SetConfig+0xc4>)
 800620e:	4293      	cmp	r3, r2
 8006210:	d007      	beq.n	8006222 <TIM_TI1_SetConfig+0x56>
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	4a1f      	ldr	r2, [pc, #124]	@ (8006294 <TIM_TI1_SetConfig+0xc8>)
 8006216:	4293      	cmp	r3, r2
 8006218:	d003      	beq.n	8006222 <TIM_TI1_SetConfig+0x56>
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	4a1e      	ldr	r2, [pc, #120]	@ (8006298 <TIM_TI1_SetConfig+0xcc>)
 800621e:	4293      	cmp	r3, r2
 8006220:	d101      	bne.n	8006226 <TIM_TI1_SetConfig+0x5a>
 8006222:	2301      	movs	r3, #1
 8006224:	e000      	b.n	8006228 <TIM_TI1_SetConfig+0x5c>
 8006226:	2300      	movs	r3, #0
 8006228:	2b00      	cmp	r3, #0
 800622a:	d008      	beq.n	800623e <TIM_TI1_SetConfig+0x72>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 800622c:	697b      	ldr	r3, [r7, #20]
 800622e:	f023 0303 	bic.w	r3, r3, #3
 8006232:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8006234:	697a      	ldr	r2, [r7, #20]
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	4313      	orrs	r3, r2
 800623a:	617b      	str	r3, [r7, #20]
 800623c:	e003      	b.n	8006246 <TIM_TI1_SetConfig+0x7a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800623e:	697b      	ldr	r3, [r7, #20]
 8006240:	f043 0301 	orr.w	r3, r3, #1
 8006244:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006246:	697b      	ldr	r3, [r7, #20]
 8006248:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800624c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800624e:	683b      	ldr	r3, [r7, #0]
 8006250:	011b      	lsls	r3, r3, #4
 8006252:	b2db      	uxtb	r3, r3
 8006254:	697a      	ldr	r2, [r7, #20]
 8006256:	4313      	orrs	r3, r2
 8006258:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800625a:	693b      	ldr	r3, [r7, #16]
 800625c:	f023 030a 	bic.w	r3, r3, #10
 8006260:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8006262:	68bb      	ldr	r3, [r7, #8]
 8006264:	f003 030a 	and.w	r3, r3, #10
 8006268:	693a      	ldr	r2, [r7, #16]
 800626a:	4313      	orrs	r3, r2
 800626c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	697a      	ldr	r2, [r7, #20]
 8006272:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	693a      	ldr	r2, [r7, #16]
 8006278:	621a      	str	r2, [r3, #32]
}
 800627a:	bf00      	nop
 800627c:	371c      	adds	r7, #28
 800627e:	46bd      	mov	sp, r7
 8006280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006284:	4770      	bx	lr
 8006286:	bf00      	nop
 8006288:	40012c00 	.word	0x40012c00
 800628c:	40000400 	.word	0x40000400
 8006290:	40000800 	.word	0x40000800
 8006294:	40013400 	.word	0x40013400
 8006298:	40014000 	.word	0x40014000

0800629c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800629c:	b480      	push	{r7}
 800629e:	b087      	sub	sp, #28
 80062a0:	af00      	add	r7, sp, #0
 80062a2:	60f8      	str	r0, [r7, #12]
 80062a4:	60b9      	str	r1, [r7, #8]
 80062a6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	6a1b      	ldr	r3, [r3, #32]
 80062ac:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	6a1b      	ldr	r3, [r3, #32]
 80062b2:	f023 0201 	bic.w	r2, r3, #1
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	699b      	ldr	r3, [r3, #24]
 80062be:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80062c0:	693b      	ldr	r3, [r7, #16]
 80062c2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80062c6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	011b      	lsls	r3, r3, #4
 80062cc:	693a      	ldr	r2, [r7, #16]
 80062ce:	4313      	orrs	r3, r2
 80062d0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80062d2:	697b      	ldr	r3, [r7, #20]
 80062d4:	f023 030a 	bic.w	r3, r3, #10
 80062d8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80062da:	697a      	ldr	r2, [r7, #20]
 80062dc:	68bb      	ldr	r3, [r7, #8]
 80062de:	4313      	orrs	r3, r2
 80062e0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	693a      	ldr	r2, [r7, #16]
 80062e6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	697a      	ldr	r2, [r7, #20]
 80062ec:	621a      	str	r2, [r3, #32]
}
 80062ee:	bf00      	nop
 80062f0:	371c      	adds	r7, #28
 80062f2:	46bd      	mov	sp, r7
 80062f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062f8:	4770      	bx	lr

080062fa <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80062fa:	b480      	push	{r7}
 80062fc:	b087      	sub	sp, #28
 80062fe:	af00      	add	r7, sp, #0
 8006300:	60f8      	str	r0, [r7, #12]
 8006302:	60b9      	str	r1, [r7, #8]
 8006304:	607a      	str	r2, [r7, #4]
 8006306:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	6a1b      	ldr	r3, [r3, #32]
 800630c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	6a1b      	ldr	r3, [r3, #32]
 8006312:	f023 0210 	bic.w	r2, r3, #16
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	699b      	ldr	r3, [r3, #24]
 800631e:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8006320:	693b      	ldr	r3, [r7, #16]
 8006322:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006326:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	021b      	lsls	r3, r3, #8
 800632c:	693a      	ldr	r2, [r7, #16]
 800632e:	4313      	orrs	r3, r2
 8006330:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006332:	693b      	ldr	r3, [r7, #16]
 8006334:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006338:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800633a:	683b      	ldr	r3, [r7, #0]
 800633c:	031b      	lsls	r3, r3, #12
 800633e:	b29b      	uxth	r3, r3
 8006340:	693a      	ldr	r2, [r7, #16]
 8006342:	4313      	orrs	r3, r2
 8006344:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006346:	697b      	ldr	r3, [r7, #20]
 8006348:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800634c:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800634e:	68bb      	ldr	r3, [r7, #8]
 8006350:	011b      	lsls	r3, r3, #4
 8006352:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 8006356:	697a      	ldr	r2, [r7, #20]
 8006358:	4313      	orrs	r3, r2
 800635a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	693a      	ldr	r2, [r7, #16]
 8006360:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	697a      	ldr	r2, [r7, #20]
 8006366:	621a      	str	r2, [r3, #32]
}
 8006368:	bf00      	nop
 800636a:	371c      	adds	r7, #28
 800636c:	46bd      	mov	sp, r7
 800636e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006372:	4770      	bx	lr

08006374 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006374:	b480      	push	{r7}
 8006376:	b087      	sub	sp, #28
 8006378:	af00      	add	r7, sp, #0
 800637a:	60f8      	str	r0, [r7, #12]
 800637c:	60b9      	str	r1, [r7, #8]
 800637e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	6a1b      	ldr	r3, [r3, #32]
 8006384:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	6a1b      	ldr	r3, [r3, #32]
 800638a:	f023 0210 	bic.w	r2, r3, #16
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	699b      	ldr	r3, [r3, #24]
 8006396:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006398:	693b      	ldr	r3, [r7, #16]
 800639a:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800639e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	031b      	lsls	r3, r3, #12
 80063a4:	693a      	ldr	r2, [r7, #16]
 80063a6:	4313      	orrs	r3, r2
 80063a8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80063aa:	697b      	ldr	r3, [r7, #20]
 80063ac:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80063b0:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80063b2:	68bb      	ldr	r3, [r7, #8]
 80063b4:	011b      	lsls	r3, r3, #4
 80063b6:	697a      	ldr	r2, [r7, #20]
 80063b8:	4313      	orrs	r3, r2
 80063ba:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	693a      	ldr	r2, [r7, #16]
 80063c0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	697a      	ldr	r2, [r7, #20]
 80063c6:	621a      	str	r2, [r3, #32]
}
 80063c8:	bf00      	nop
 80063ca:	371c      	adds	r7, #28
 80063cc:	46bd      	mov	sp, r7
 80063ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063d2:	4770      	bx	lr

080063d4 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80063d4:	b480      	push	{r7}
 80063d6:	b087      	sub	sp, #28
 80063d8:	af00      	add	r7, sp, #0
 80063da:	60f8      	str	r0, [r7, #12]
 80063dc:	60b9      	str	r1, [r7, #8]
 80063de:	607a      	str	r2, [r7, #4]
 80063e0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	6a1b      	ldr	r3, [r3, #32]
 80063e6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	6a1b      	ldr	r3, [r3, #32]
 80063ec:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	69db      	ldr	r3, [r3, #28]
 80063f8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 80063fa:	693b      	ldr	r3, [r7, #16]
 80063fc:	f023 0303 	bic.w	r3, r3, #3
 8006400:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 8006402:	693a      	ldr	r2, [r7, #16]
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	4313      	orrs	r3, r2
 8006408:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800640a:	693b      	ldr	r3, [r7, #16]
 800640c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006410:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8006412:	683b      	ldr	r3, [r7, #0]
 8006414:	011b      	lsls	r3, r3, #4
 8006416:	b2db      	uxtb	r3, r3
 8006418:	693a      	ldr	r2, [r7, #16]
 800641a:	4313      	orrs	r3, r2
 800641c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800641e:	697b      	ldr	r3, [r7, #20]
 8006420:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 8006424:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8006426:	68bb      	ldr	r3, [r7, #8]
 8006428:	021b      	lsls	r3, r3, #8
 800642a:	f403 6320 	and.w	r3, r3, #2560	@ 0xa00
 800642e:	697a      	ldr	r2, [r7, #20]
 8006430:	4313      	orrs	r3, r2
 8006432:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	693a      	ldr	r2, [r7, #16]
 8006438:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	697a      	ldr	r2, [r7, #20]
 800643e:	621a      	str	r2, [r3, #32]
}
 8006440:	bf00      	nop
 8006442:	371c      	adds	r7, #28
 8006444:	46bd      	mov	sp, r7
 8006446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800644a:	4770      	bx	lr

0800644c <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800644c:	b480      	push	{r7}
 800644e:	b087      	sub	sp, #28
 8006450:	af00      	add	r7, sp, #0
 8006452:	60f8      	str	r0, [r7, #12]
 8006454:	60b9      	str	r1, [r7, #8]
 8006456:	607a      	str	r2, [r7, #4]
 8006458:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	6a1b      	ldr	r3, [r3, #32]
 800645e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	6a1b      	ldr	r3, [r3, #32]
 8006464:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	69db      	ldr	r3, [r3, #28]
 8006470:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8006472:	693b      	ldr	r3, [r7, #16]
 8006474:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006478:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	021b      	lsls	r3, r3, #8
 800647e:	693a      	ldr	r2, [r7, #16]
 8006480:	4313      	orrs	r3, r2
 8006482:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8006484:	693b      	ldr	r3, [r7, #16]
 8006486:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800648a:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800648c:	683b      	ldr	r3, [r7, #0]
 800648e:	031b      	lsls	r3, r3, #12
 8006490:	b29b      	uxth	r3, r3
 8006492:	693a      	ldr	r2, [r7, #16]
 8006494:	4313      	orrs	r3, r2
 8006496:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8006498:	697b      	ldr	r3, [r7, #20]
 800649a:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 800649e:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 80064a0:	68bb      	ldr	r3, [r7, #8]
 80064a2:	031b      	lsls	r3, r3, #12
 80064a4:	f403 4320 	and.w	r3, r3, #40960	@ 0xa000
 80064a8:	697a      	ldr	r2, [r7, #20]
 80064aa:	4313      	orrs	r3, r2
 80064ac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	693a      	ldr	r2, [r7, #16]
 80064b2:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	697a      	ldr	r2, [r7, #20]
 80064b8:	621a      	str	r2, [r3, #32]
}
 80064ba:	bf00      	nop
 80064bc:	371c      	adds	r7, #28
 80064be:	46bd      	mov	sp, r7
 80064c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064c4:	4770      	bx	lr

080064c6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80064c6:	b480      	push	{r7}
 80064c8:	b085      	sub	sp, #20
 80064ca:	af00      	add	r7, sp, #0
 80064cc:	6078      	str	r0, [r7, #4]
 80064ce:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	689b      	ldr	r3, [r3, #8]
 80064d4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80064dc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80064de:	683a      	ldr	r2, [r7, #0]
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	4313      	orrs	r3, r2
 80064e4:	f043 0307 	orr.w	r3, r3, #7
 80064e8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	68fa      	ldr	r2, [r7, #12]
 80064ee:	609a      	str	r2, [r3, #8]
}
 80064f0:	bf00      	nop
 80064f2:	3714      	adds	r7, #20
 80064f4:	46bd      	mov	sp, r7
 80064f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064fa:	4770      	bx	lr

080064fc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80064fc:	b480      	push	{r7}
 80064fe:	b087      	sub	sp, #28
 8006500:	af00      	add	r7, sp, #0
 8006502:	60f8      	str	r0, [r7, #12]
 8006504:	60b9      	str	r1, [r7, #8]
 8006506:	607a      	str	r2, [r7, #4]
 8006508:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	689b      	ldr	r3, [r3, #8]
 800650e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006510:	697b      	ldr	r3, [r7, #20]
 8006512:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006516:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006518:	683b      	ldr	r3, [r7, #0]
 800651a:	021a      	lsls	r2, r3, #8
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	431a      	orrs	r2, r3
 8006520:	68bb      	ldr	r3, [r7, #8]
 8006522:	4313      	orrs	r3, r2
 8006524:	697a      	ldr	r2, [r7, #20]
 8006526:	4313      	orrs	r3, r2
 8006528:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	697a      	ldr	r2, [r7, #20]
 800652e:	609a      	str	r2, [r3, #8]
}
 8006530:	bf00      	nop
 8006532:	371c      	adds	r7, #28
 8006534:	46bd      	mov	sp, r7
 8006536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800653a:	4770      	bx	lr

0800653c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800653c:	b480      	push	{r7}
 800653e:	b087      	sub	sp, #28
 8006540:	af00      	add	r7, sp, #0
 8006542:	60f8      	str	r0, [r7, #12]
 8006544:	60b9      	str	r1, [r7, #8]
 8006546:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006548:	68bb      	ldr	r3, [r7, #8]
 800654a:	f003 031f 	and.w	r3, r3, #31
 800654e:	2201      	movs	r2, #1
 8006550:	fa02 f303 	lsl.w	r3, r2, r3
 8006554:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	6a1a      	ldr	r2, [r3, #32]
 800655a:	697b      	ldr	r3, [r7, #20]
 800655c:	43db      	mvns	r3, r3
 800655e:	401a      	ands	r2, r3
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	6a1a      	ldr	r2, [r3, #32]
 8006568:	68bb      	ldr	r3, [r7, #8]
 800656a:	f003 031f 	and.w	r3, r3, #31
 800656e:	6879      	ldr	r1, [r7, #4]
 8006570:	fa01 f303 	lsl.w	r3, r1, r3
 8006574:	431a      	orrs	r2, r3
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	621a      	str	r2, [r3, #32]
}
 800657a:	bf00      	nop
 800657c:	371c      	adds	r7, #28
 800657e:	46bd      	mov	sp, r7
 8006580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006584:	4770      	bx	lr
	...

08006588 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006588:	b480      	push	{r7}
 800658a:	b085      	sub	sp, #20
 800658c:	af00      	add	r7, sp, #0
 800658e:	6078      	str	r0, [r7, #4]
 8006590:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006598:	2b01      	cmp	r3, #1
 800659a:	d101      	bne.n	80065a0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800659c:	2302      	movs	r3, #2
 800659e:	e063      	b.n	8006668 <HAL_TIMEx_MasterConfigSynchronization+0xe0>
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	2201      	movs	r2, #1
 80065a4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	2202      	movs	r2, #2
 80065ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	685b      	ldr	r3, [r3, #4]
 80065b6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	689b      	ldr	r3, [r3, #8]
 80065be:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	4a2b      	ldr	r2, [pc, #172]	@ (8006674 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80065c6:	4293      	cmp	r3, r2
 80065c8:	d004      	beq.n	80065d4 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	4a2a      	ldr	r2, [pc, #168]	@ (8006678 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80065d0:	4293      	cmp	r3, r2
 80065d2:	d108      	bne.n	80065e6 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80065da:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80065dc:	683b      	ldr	r3, [r7, #0]
 80065de:	685b      	ldr	r3, [r3, #4]
 80065e0:	68fa      	ldr	r2, [r7, #12]
 80065e2:	4313      	orrs	r3, r2
 80065e4:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80065ec:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80065ee:	683b      	ldr	r3, [r7, #0]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	68fa      	ldr	r2, [r7, #12]
 80065f4:	4313      	orrs	r3, r2
 80065f6:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	68fa      	ldr	r2, [r7, #12]
 80065fe:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	4a1b      	ldr	r2, [pc, #108]	@ (8006674 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8006606:	4293      	cmp	r3, r2
 8006608:	d018      	beq.n	800663c <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006612:	d013      	beq.n	800663c <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	4a18      	ldr	r2, [pc, #96]	@ (800667c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800661a:	4293      	cmp	r3, r2
 800661c:	d00e      	beq.n	800663c <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	4a17      	ldr	r2, [pc, #92]	@ (8006680 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8006624:	4293      	cmp	r3, r2
 8006626:	d009      	beq.n	800663c <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	4a12      	ldr	r2, [pc, #72]	@ (8006678 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800662e:	4293      	cmp	r3, r2
 8006630:	d004      	beq.n	800663c <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	4a13      	ldr	r2, [pc, #76]	@ (8006684 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8006638:	4293      	cmp	r3, r2
 800663a:	d10c      	bne.n	8006656 <HAL_TIMEx_MasterConfigSynchronization+0xce>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800663c:	68bb      	ldr	r3, [r7, #8]
 800663e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006642:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006644:	683b      	ldr	r3, [r7, #0]
 8006646:	689b      	ldr	r3, [r3, #8]
 8006648:	68ba      	ldr	r2, [r7, #8]
 800664a:	4313      	orrs	r3, r2
 800664c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	68ba      	ldr	r2, [r7, #8]
 8006654:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	2201      	movs	r2, #1
 800665a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	2200      	movs	r2, #0
 8006662:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006666:	2300      	movs	r3, #0
}
 8006668:	4618      	mov	r0, r3
 800666a:	3714      	adds	r7, #20
 800666c:	46bd      	mov	sp, r7
 800666e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006672:	4770      	bx	lr
 8006674:	40012c00 	.word	0x40012c00
 8006678:	40013400 	.word	0x40013400
 800667c:	40000400 	.word	0x40000400
 8006680:	40000800 	.word	0x40000800
 8006684:	40014000 	.word	0x40014000

08006688 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006688:	b480      	push	{r7}
 800668a:	b083      	sub	sp, #12
 800668c:	af00      	add	r7, sp, #0
 800668e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006690:	bf00      	nop
 8006692:	370c      	adds	r7, #12
 8006694:	46bd      	mov	sp, r7
 8006696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800669a:	4770      	bx	lr

0800669c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800669c:	b480      	push	{r7}
 800669e:	b083      	sub	sp, #12
 80066a0:	af00      	add	r7, sp, #0
 80066a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80066a4:	bf00      	nop
 80066a6:	370c      	adds	r7, #12
 80066a8:	46bd      	mov	sp, r7
 80066aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ae:	4770      	bx	lr

080066b0 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80066b0:	b480      	push	{r7}
 80066b2:	b083      	sub	sp, #12
 80066b4:	af00      	add	r7, sp, #0
 80066b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80066b8:	bf00      	nop
 80066ba:	370c      	adds	r7, #12
 80066bc:	46bd      	mov	sp, r7
 80066be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066c2:	4770      	bx	lr

080066c4 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 80066c4:	b480      	push	{r7}
 80066c6:	b085      	sub	sp, #20
 80066c8:	af00      	add	r7, sp, #0
 80066ca:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80066cc:	f44f 433f 	mov.w	r3, #48896	@ 0xbf00
 80066d0:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80066d8:	b29a      	uxth	r2, r3
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	b29b      	uxth	r3, r3
 80066de:	43db      	mvns	r3, r3
 80066e0:	b29b      	uxth	r3, r3
 80066e2:	4013      	ands	r3, r2
 80066e4:	b29a      	uxth	r2, r3
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 80066ec:	2300      	movs	r3, #0
}
 80066ee:	4618      	mov	r0, r3
 80066f0:	3714      	adds	r7, #20
 80066f2:	46bd      	mov	sp, r7
 80066f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066f8:	4770      	bx	lr

080066fa <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80066fa:	b480      	push	{r7}
 80066fc:	b085      	sub	sp, #20
 80066fe:	af00      	add	r7, sp, #0
 8006700:	60f8      	str	r0, [r7, #12]
 8006702:	1d3b      	adds	r3, r7, #4
 8006704:	e883 0006 	stmia.w	r3, {r1, r2}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	2201      	movs	r2, #1
 800670c:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	2200      	movs	r2, #0
 8006714:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	2200      	movs	r2, #0
 800671c:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	2200      	movs	r2, #0
 8006724:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 8006728:	2300      	movs	r3, #0
}
 800672a:	4618      	mov	r0, r3
 800672c:	3714      	adds	r7, #20
 800672e:	46bd      	mov	sp, r7
 8006730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006734:	4770      	bx	lr

08006736 <memset>:
 8006736:	4402      	add	r2, r0
 8006738:	4603      	mov	r3, r0
 800673a:	4293      	cmp	r3, r2
 800673c:	d100      	bne.n	8006740 <memset+0xa>
 800673e:	4770      	bx	lr
 8006740:	f803 1b01 	strb.w	r1, [r3], #1
 8006744:	e7f9      	b.n	800673a <memset+0x4>
	...

08006748 <__libc_init_array>:
 8006748:	b570      	push	{r4, r5, r6, lr}
 800674a:	4d0d      	ldr	r5, [pc, #52]	@ (8006780 <__libc_init_array+0x38>)
 800674c:	4c0d      	ldr	r4, [pc, #52]	@ (8006784 <__libc_init_array+0x3c>)
 800674e:	1b64      	subs	r4, r4, r5
 8006750:	10a4      	asrs	r4, r4, #2
 8006752:	2600      	movs	r6, #0
 8006754:	42a6      	cmp	r6, r4
 8006756:	d109      	bne.n	800676c <__libc_init_array+0x24>
 8006758:	4d0b      	ldr	r5, [pc, #44]	@ (8006788 <__libc_init_array+0x40>)
 800675a:	4c0c      	ldr	r4, [pc, #48]	@ (800678c <__libc_init_array+0x44>)
 800675c:	f000 f818 	bl	8006790 <_init>
 8006760:	1b64      	subs	r4, r4, r5
 8006762:	10a4      	asrs	r4, r4, #2
 8006764:	2600      	movs	r6, #0
 8006766:	42a6      	cmp	r6, r4
 8006768:	d105      	bne.n	8006776 <__libc_init_array+0x2e>
 800676a:	bd70      	pop	{r4, r5, r6, pc}
 800676c:	f855 3b04 	ldr.w	r3, [r5], #4
 8006770:	4798      	blx	r3
 8006772:	3601      	adds	r6, #1
 8006774:	e7ee      	b.n	8006754 <__libc_init_array+0xc>
 8006776:	f855 3b04 	ldr.w	r3, [r5], #4
 800677a:	4798      	blx	r3
 800677c:	3601      	adds	r6, #1
 800677e:	e7f2      	b.n	8006766 <__libc_init_array+0x1e>
 8006780:	080067f0 	.word	0x080067f0
 8006784:	080067f0 	.word	0x080067f0
 8006788:	080067f0 	.word	0x080067f0
 800678c:	080067f4 	.word	0x080067f4

08006790 <_init>:
 8006790:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006792:	bf00      	nop
 8006794:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006796:	bc08      	pop	{r3}
 8006798:	469e      	mov	lr, r3
 800679a:	4770      	bx	lr

0800679c <_fini>:
 800679c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800679e:	bf00      	nop
 80067a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80067a2:	bc08      	pop	{r3}
 80067a4:	469e      	mov	lr, r3
 80067a6:	4770      	bx	lr
