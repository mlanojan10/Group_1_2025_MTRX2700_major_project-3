
Riddles_1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001984  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000550  08001b24  08001b24  00002b24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002074  08002074  000040b4  2**0
                  CONTENTS
  4 .ARM          00000008  08002074  08002074  00003074  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800207c  0800207c  000040b4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800207c  0800207c  0000307c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08002080  08002080  00003080  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000000b4  20000000  08002084  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000040b4  2**0
                  CONTENTS
 10 .bss          00000248  200000b4  200000b4  000040b4  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200002fc  200002fc  000040b4  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000040b4  2**0
                  CONTENTS, READONLY
 13 .debug_info   00001719  00000000  00000000  000040e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000704  00000000  00000000  000057fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000001a8  00000000  00000000  00005f08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000138  00000000  00000000  000060b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00016d67  00000000  00000000  000061e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00001eee  00000000  00000000  0001cf4f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00078c61  00000000  00000000  0001ee3d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00097a9e  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000100c  00000000  00000000  00097ae4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000068  00000000  00000000  00098af0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200000b4 	.word	0x200000b4
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08001b0c 	.word	0x08001b0c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200000b8 	.word	0x200000b8
 80001dc:	08001b0c 	.word	0x08001b0c

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__io_putchar>:
#include <stdint.h>
#include <stdio.h>
#include "stm32f303xc.h"
#include "riddles.h"

int __io_putchar(int ch) {
 80002a0:	b580      	push	{r7, lr}
 80002a2:	b082      	sub	sp, #8
 80002a4:	af00      	add	r7, sp, #0
 80002a6:	6078      	str	r0, [r7, #4]
    SerialOutputChar((uint8_t)ch, &USART1_PORT);
 80002a8:	687b      	ldr	r3, [r7, #4]
 80002aa:	b2db      	uxtb	r3, r3
 80002ac:	4904      	ldr	r1, [pc, #16]	@ (80002c0 <__io_putchar+0x20>)
 80002ae:	4618      	mov	r0, r3
 80002b0:	f000 fa1e 	bl	80006f0 <SerialOutputChar>
    return ch;
 80002b4:	687b      	ldr	r3, [r7, #4]
}
 80002b6:	4618      	mov	r0, r3
 80002b8:	3708      	adds	r7, #8
 80002ba:	46bd      	mov	sp, r7
 80002bc:	bd80      	pop	{r7, pc}
 80002be:	bf00      	nop
 80002c0:	2000002c 	.word	0x2000002c

080002c4 <InitialisePA1AsInput>:

static uint8_t riddleAsked = 0;
static uint8_t completedMessageShown = 0;
static uint8_t prevPA3State = 0;  // For edge detection on PA3

void InitialisePA1AsInput(void) {
 80002c4:	b480      	push	{r7}
 80002c6:	af00      	add	r7, sp, #0
    RCC->AHBENR |= RCC_AHBENR_GPIOAEN;
 80002c8:	4b0d      	ldr	r3, [pc, #52]	@ (8000300 <InitialisePA1AsInput+0x3c>)
 80002ca:	695b      	ldr	r3, [r3, #20]
 80002cc:	4a0c      	ldr	r2, [pc, #48]	@ (8000300 <InitialisePA1AsInput+0x3c>)
 80002ce:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80002d2:	6153      	str	r3, [r2, #20]
    GPIOA->MODER &= ~(3U << (1 * 2));
 80002d4:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80002d8:	681b      	ldr	r3, [r3, #0]
 80002da:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 80002de:	f023 030c 	bic.w	r3, r3, #12
 80002e2:	6013      	str	r3, [r2, #0]
    GPIOA->PUPDR &= ~(3U << (1 * 2));
 80002e4:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80002e8:	68db      	ldr	r3, [r3, #12]
 80002ea:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 80002ee:	f023 030c 	bic.w	r3, r3, #12
 80002f2:	60d3      	str	r3, [r2, #12]
}
 80002f4:	bf00      	nop
 80002f6:	46bd      	mov	sp, r7
 80002f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002fc:	4770      	bx	lr
 80002fe:	bf00      	nop
 8000300:	40021000 	.word	0x40021000

08000304 <InitialisePA3AsInput>:

void InitialisePA3AsInput(void) {
 8000304:	b480      	push	{r7}
 8000306:	af00      	add	r7, sp, #0
    RCC->AHBENR |= RCC_AHBENR_GPIOAEN;
 8000308:	4b0d      	ldr	r3, [pc, #52]	@ (8000340 <InitialisePA3AsInput+0x3c>)
 800030a:	695b      	ldr	r3, [r3, #20]
 800030c:	4a0c      	ldr	r2, [pc, #48]	@ (8000340 <InitialisePA3AsInput+0x3c>)
 800030e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000312:	6153      	str	r3, [r2, #20]
    GPIOA->MODER &= ~(3U << (3 * 2));
 8000314:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000318:	681b      	ldr	r3, [r3, #0]
 800031a:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 800031e:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8000322:	6013      	str	r3, [r2, #0]
    GPIOA->PUPDR &= ~(3U << (3 * 2));
 8000324:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000328:	68db      	ldr	r3, [r3, #12]
 800032a:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 800032e:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8000332:	60d3      	str	r3, [r2, #12]
}
 8000334:	bf00      	nop
 8000336:	46bd      	mov	sp, r7
 8000338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800033c:	4770      	bx	lr
 800033e:	bf00      	nop
 8000340:	40021000 	.word	0x40021000

08000344 <main>:

int main(void) {
 8000344:	b580      	push	{r7, lr}
 8000346:	b082      	sub	sp, #8
 8000348:	af00      	add	r7, sp, #0
    InitialisePA1AsInput();
 800034a:	f7ff ffbb 	bl	80002c4 <InitialisePA1AsInput>
    InitialisePA3AsInput();
 800034e:	f7ff ffd9 	bl	8000304 <InitialisePA3AsInput>
    SerialInitialise(BAUD_115200, &USART1_PORT, NULL);
 8000352:	2200      	movs	r2, #0
 8000354:	4931      	ldr	r1, [pc, #196]	@ (800041c <main+0xd8>)
 8000356:	2004      	movs	r0, #4
 8000358:	f000 f964 	bl	8000624 <SerialInitialise>
    SerialSetReceiveCallback(&USART1_PORT, OnLineReceived);
 800035c:	4930      	ldr	r1, [pc, #192]	@ (8000420 <main+0xdc>)
 800035e:	482f      	ldr	r0, [pc, #188]	@ (800041c <main+0xd8>)
 8000360:	f000 f9df 	bl	8000722 <SerialSetReceiveCallback>

    while (1) {
        // Handle PA1: Riddle module trigger
        if ((GPIOA->IDR & (1 << 1)) && isMinigame1Completed() && !isMinigame2Completed() && !riddleAsked) {
 8000364:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000368:	691b      	ldr	r3, [r3, #16]
 800036a:	f003 0302 	and.w	r3, r3, #2
 800036e:	2b00      	cmp	r3, #0
 8000370:	d013      	beq.n	800039a <main+0x56>
 8000372:	f000 f933 	bl	80005dc <isMinigame1Completed>
 8000376:	4603      	mov	r3, r0
 8000378:	2b00      	cmp	r3, #0
 800037a:	d00e      	beq.n	800039a <main+0x56>
 800037c:	f000 f940 	bl	8000600 <isMinigame2Completed>
 8000380:	4603      	mov	r3, r0
 8000382:	2b00      	cmp	r3, #0
 8000384:	d109      	bne.n	800039a <main+0x56>
 8000386:	4b27      	ldr	r3, [pc, #156]	@ (8000424 <main+0xe0>)
 8000388:	781b      	ldrb	r3, [r3, #0]
 800038a:	2b00      	cmp	r3, #0
 800038c:	d105      	bne.n	800039a <main+0x56>
            AskNewRiddle();
 800038e:	f000 f899 	bl	80004c4 <AskNewRiddle>
            riddleAsked = 1;
 8000392:	4b24      	ldr	r3, [pc, #144]	@ (8000424 <main+0xe0>)
 8000394:	2201      	movs	r2, #1
 8000396:	701a      	strb	r2, [r3, #0]
        if ((GPIOA->IDR & (1 << 1)) && isMinigame1Completed() && !isMinigame2Completed() && !riddleAsked) {
 8000398:	e015      	b.n	80003c6 <main+0x82>
        } else if ((GPIOA->IDR & (1 << 1)) && isMinigame2Completed() && !completedMessageShown) {
 800039a:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800039e:	691b      	ldr	r3, [r3, #16]
 80003a0:	f003 0302 	and.w	r3, r3, #2
 80003a4:	2b00      	cmp	r3, #0
 80003a6:	d00e      	beq.n	80003c6 <main+0x82>
 80003a8:	f000 f92a 	bl	8000600 <isMinigame2Completed>
 80003ac:	4603      	mov	r3, r0
 80003ae:	2b00      	cmp	r3, #0
 80003b0:	d009      	beq.n	80003c6 <main+0x82>
 80003b2:	4b1d      	ldr	r3, [pc, #116]	@ (8000428 <main+0xe4>)
 80003b4:	781b      	ldrb	r3, [r3, #0]
 80003b6:	2b00      	cmp	r3, #0
 80003b8:	d105      	bne.n	80003c6 <main+0x82>
            printf("\r\nYou've already completed this riddle challenge! Proceed to the next game.\r\n");
 80003ba:	481c      	ldr	r0, [pc, #112]	@ (800042c <main+0xe8>)
 80003bc:	f000 fcaa 	bl	8000d14 <puts>
            completedMessageShown = 1;
 80003c0:	4b19      	ldr	r3, [pc, #100]	@ (8000428 <main+0xe4>)
 80003c2:	2201      	movs	r2, #1
 80003c4:	701a      	strb	r2, [r3, #0]
        }

        if (!(GPIOA->IDR & (1 << 1))) {
 80003c6:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80003ca:	691b      	ldr	r3, [r3, #16]
 80003cc:	f003 0302 	and.w	r3, r3, #2
 80003d0:	2b00      	cmp	r3, #0
 80003d2:	d105      	bne.n	80003e0 <main+0x9c>
            riddleAsked = 0;
 80003d4:	4b13      	ldr	r3, [pc, #76]	@ (8000424 <main+0xe0>)
 80003d6:	2200      	movs	r2, #0
 80003d8:	701a      	strb	r2, [r3, #0]
            completedMessageShown = 0;
 80003da:	4b13      	ldr	r3, [pc, #76]	@ (8000428 <main+0xe4>)
 80003dc:	2200      	movs	r2, #0
 80003de:	701a      	strb	r2, [r3, #0]
        }

        // Handle PA3: LED module trigger (only once per activation)
        uint8_t currentPA3State = (GPIOA->IDR & (1 << 3)) != 0;
 80003e0:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80003e4:	691b      	ldr	r3, [r3, #16]
 80003e6:	f003 0308 	and.w	r3, r3, #8
 80003ea:	2b00      	cmp	r3, #0
 80003ec:	bf14      	ite	ne
 80003ee:	2301      	movne	r3, #1
 80003f0:	2300      	moveq	r3, #0
 80003f2:	b2db      	uxtb	r3, r3
 80003f4:	71fb      	strb	r3, [r7, #7]
        if (currentPA3State && !prevPA3State && isMinigame2Completed()) {
 80003f6:	79fb      	ldrb	r3, [r7, #7]
 80003f8:	2b00      	cmp	r3, #0
 80003fa:	d00b      	beq.n	8000414 <main+0xd0>
 80003fc:	4b0c      	ldr	r3, [pc, #48]	@ (8000430 <main+0xec>)
 80003fe:	781b      	ldrb	r3, [r3, #0]
 8000400:	2b00      	cmp	r3, #0
 8000402:	d107      	bne.n	8000414 <main+0xd0>
 8000404:	f000 f8fc 	bl	8000600 <isMinigame2Completed>
 8000408:	4603      	mov	r3, r0
 800040a:	2b00      	cmp	r3, #0
 800040c:	d002      	beq.n	8000414 <main+0xd0>
            printf("\r\nLED module\r\n");
 800040e:	4809      	ldr	r0, [pc, #36]	@ (8000434 <main+0xf0>)
 8000410:	f000 fc80 	bl	8000d14 <puts>
            // If needed: game_progress |= 0b0100;
        }
        prevPA3State = currentPA3State;
 8000414:	4a06      	ldr	r2, [pc, #24]	@ (8000430 <main+0xec>)
 8000416:	79fb      	ldrb	r3, [r7, #7]
 8000418:	7013      	strb	r3, [r2, #0]
    while (1) {
 800041a:	e7a3      	b.n	8000364 <main+0x20>
 800041c:	2000002c 	.word	0x2000002c
 8000420:	0800051d 	.word	0x0800051d
 8000424:	200000d0 	.word	0x200000d0
 8000428:	200000d1 	.word	0x200000d1
 800042c:	08001b24 	.word	0x08001b24
 8000430:	200000d2 	.word	0x200000d2
 8000434:	08001b74 	.word	0x08001b74

08000438 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000438:	b480      	push	{r7}
 800043a:	b083      	sub	sp, #12
 800043c:	af00      	add	r7, sp, #0
 800043e:	4603      	mov	r3, r0
 8000440:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000442:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000446:	2b00      	cmp	r3, #0
 8000448:	db0b      	blt.n	8000462 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800044a:	79fb      	ldrb	r3, [r7, #7]
 800044c:	f003 021f 	and.w	r2, r3, #31
 8000450:	4907      	ldr	r1, [pc, #28]	@ (8000470 <__NVIC_EnableIRQ+0x38>)
 8000452:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000456:	095b      	lsrs	r3, r3, #5
 8000458:	2001      	movs	r0, #1
 800045a:	fa00 f202 	lsl.w	r2, r0, r2
 800045e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000462:	bf00      	nop
 8000464:	370c      	adds	r7, #12
 8000466:	46bd      	mov	sp, r7
 8000468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800046c:	4770      	bx	lr
 800046e:	bf00      	nop
 8000470:	e000e100 	.word	0xe000e100

08000474 <ToLowerCase>:
static uint32_t tx_index = 0;
static uint8_t game_progress = 0b0001;

// ---------------- Riddle Management -----------------

static void ToLowerCase(char *str) {
 8000474:	b480      	push	{r7}
 8000476:	b085      	sub	sp, #20
 8000478:	af00      	add	r7, sp, #0
 800047a:	6078      	str	r0, [r7, #4]
    while (*str) {
 800047c:	e015      	b.n	80004aa <ToLowerCase+0x36>
        *str = tolower((unsigned char)*str);
 800047e:	687b      	ldr	r3, [r7, #4]
 8000480:	781b      	ldrb	r3, [r3, #0]
 8000482:	73fb      	strb	r3, [r7, #15]
 8000484:	7bfb      	ldrb	r3, [r7, #15]
 8000486:	3301      	adds	r3, #1
 8000488:	4a0d      	ldr	r2, [pc, #52]	@ (80004c0 <ToLowerCase+0x4c>)
 800048a:	4413      	add	r3, r2
 800048c:	781b      	ldrb	r3, [r3, #0]
 800048e:	f003 0303 	and.w	r3, r3, #3
 8000492:	2b01      	cmp	r3, #1
 8000494:	d102      	bne.n	800049c <ToLowerCase+0x28>
 8000496:	7bfb      	ldrb	r3, [r7, #15]
 8000498:	3320      	adds	r3, #32
 800049a:	e000      	b.n	800049e <ToLowerCase+0x2a>
 800049c:	7bfb      	ldrb	r3, [r7, #15]
 800049e:	b2da      	uxtb	r2, r3
 80004a0:	687b      	ldr	r3, [r7, #4]
 80004a2:	701a      	strb	r2, [r3, #0]
        str++;
 80004a4:	687b      	ldr	r3, [r7, #4]
 80004a6:	3301      	adds	r3, #1
 80004a8:	607b      	str	r3, [r7, #4]
    while (*str) {
 80004aa:	687b      	ldr	r3, [r7, #4]
 80004ac:	781b      	ldrb	r3, [r3, #0]
 80004ae:	2b00      	cmp	r3, #0
 80004b0:	d1e5      	bne.n	800047e <ToLowerCase+0xa>
    }
}
 80004b2:	bf00      	nop
 80004b4:	bf00      	nop
 80004b6:	3714      	adds	r7, #20
 80004b8:	46bd      	mov	sp, r7
 80004ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004be:	4770      	bx	lr
 80004c0:	08001f04 	.word	0x08001f04

080004c4 <AskNewRiddle>:

void AskNewRiddle(void) {
 80004c4:	b590      	push	{r4, r7, lr}
 80004c6:	b083      	sub	sp, #12
 80004c8:	af00      	add	r7, sp, #0
    int index = rand() % NUM_RIDDLES;
 80004ca:	f000 fabb 	bl	8000a44 <rand>
 80004ce:	4603      	mov	r3, r0
 80004d0:	4619      	mov	r1, r3
 80004d2:	4b0e      	ldr	r3, [pc, #56]	@ (800050c <AskNewRiddle+0x48>)
 80004d4:	fba3 2301 	umull	r2, r3, r3, r1
 80004d8:	089a      	lsrs	r2, r3, #2
 80004da:	4613      	mov	r3, r2
 80004dc:	009b      	lsls	r3, r3, #2
 80004de:	4413      	add	r3, r2
 80004e0:	1aca      	subs	r2, r1, r3
 80004e2:	607a      	str	r2, [r7, #4]
    current_riddle = riddles[index];
 80004e4:	490a      	ldr	r1, [pc, #40]	@ (8000510 <AskNewRiddle+0x4c>)
 80004e6:	4a0b      	ldr	r2, [pc, #44]	@ (8000514 <AskNewRiddle+0x50>)
 80004e8:	687b      	ldr	r3, [r7, #4]
 80004ea:	460c      	mov	r4, r1
 80004ec:	00db      	lsls	r3, r3, #3
 80004ee:	4413      	add	r3, r2
 80004f0:	e893 0003 	ldmia.w	r3, {r0, r1}
 80004f4:	e884 0003 	stmia.w	r4, {r0, r1}
    printf("\r\nAHOY - It's Riddle Time! Solve this riddle to find the next step to the treasure.\r\n%s\r\n> ", current_riddle.riddle);
 80004f8:	4b05      	ldr	r3, [pc, #20]	@ (8000510 <AskNewRiddle+0x4c>)
 80004fa:	681b      	ldr	r3, [r3, #0]
 80004fc:	4619      	mov	r1, r3
 80004fe:	4806      	ldr	r0, [pc, #24]	@ (8000518 <AskNewRiddle+0x54>)
 8000500:	f000 fba0 	bl	8000c44 <iprintf>
}
 8000504:	bf00      	nop
 8000506:	370c      	adds	r7, #12
 8000508:	46bd      	mov	sp, r7
 800050a:	bd90      	pop	{r4, r7, pc}
 800050c:	cccccccd 	.word	0xcccccccd
 8000510:	200000d4 	.word	0x200000d4
 8000514:	20000000 	.word	0x20000000
 8000518:	08001d54 	.word	0x08001d54

0800051c <OnLineReceived>:

void OnLineReceived(char *string, uint32_t length) {
 800051c:	b580      	push	{r7, lr}
 800051e:	b082      	sub	sp, #8
 8000520:	af00      	add	r7, sp, #0
 8000522:	6078      	str	r0, [r7, #4]
 8000524:	6039      	str	r1, [r7, #0]
    static char user_input[64];
    strncpy(user_input, string, sizeof(user_input) - 1);
 8000526:	223f      	movs	r2, #63	@ 0x3f
 8000528:	6879      	ldr	r1, [r7, #4]
 800052a:	4824      	ldr	r0, [pc, #144]	@ (80005bc <OnLineReceived+0xa0>)
 800052c:	f000 fcda 	bl	8000ee4 <strncpy>
    user_input[sizeof(user_input) - 1] = '\0';
 8000530:	4b22      	ldr	r3, [pc, #136]	@ (80005bc <OnLineReceived+0xa0>)
 8000532:	2200      	movs	r2, #0
 8000534:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
    ToLowerCase(user_input);
 8000538:	4820      	ldr	r0, [pc, #128]	@ (80005bc <OnLineReceived+0xa0>)
 800053a:	f7ff ff9b 	bl	8000474 <ToLowerCase>

    if ((game_progress & 0b0001) && !(game_progress & 0b0010)) {
 800053e:	4b20      	ldr	r3, [pc, #128]	@ (80005c0 <OnLineReceived+0xa4>)
 8000540:	781b      	ldrb	r3, [r3, #0]
 8000542:	f003 0301 	and.w	r3, r3, #1
 8000546:	2b00      	cmp	r3, #0
 8000548:	d020      	beq.n	800058c <OnLineReceived+0x70>
 800054a:	4b1d      	ldr	r3, [pc, #116]	@ (80005c0 <OnLineReceived+0xa4>)
 800054c:	781b      	ldrb	r3, [r3, #0]
 800054e:	f003 0302 	and.w	r3, r3, #2
 8000552:	2b00      	cmp	r3, #0
 8000554:	d11a      	bne.n	800058c <OnLineReceived+0x70>
        if (strcmp(user_input, current_riddle.answer) == 0) {
 8000556:	4b1b      	ldr	r3, [pc, #108]	@ (80005c4 <OnLineReceived+0xa8>)
 8000558:	685b      	ldr	r3, [r3, #4]
 800055a:	4619      	mov	r1, r3
 800055c:	4817      	ldr	r0, [pc, #92]	@ (80005bc <OnLineReceived+0xa0>)
 800055e:	f7ff fe3f 	bl	80001e0 <strcmp>
 8000562:	4603      	mov	r3, r0
 8000564:	2b00      	cmp	r3, #0
 8000566:	d10d      	bne.n	8000584 <OnLineReceived+0x68>
            printf("\r\nCorrect! You solved it!\r\n");
 8000568:	4817      	ldr	r0, [pc, #92]	@ (80005c8 <OnLineReceived+0xac>)
 800056a:	f000 fbd3 	bl	8000d14 <puts>
            game_progress |= 0b0010;
 800056e:	4b14      	ldr	r3, [pc, #80]	@ (80005c0 <OnLineReceived+0xa4>)
 8000570:	781b      	ldrb	r3, [r3, #0]
 8000572:	f043 0302 	orr.w	r3, r3, #2
 8000576:	b2da      	uxtb	r2, r3
 8000578:	4b11      	ldr	r3, [pc, #68]	@ (80005c0 <OnLineReceived+0xa4>)
 800057a:	701a      	strb	r2, [r3, #0]
            printf("\r\nYou've unlocked the next challenge!\r\n");
 800057c:	4813      	ldr	r0, [pc, #76]	@ (80005cc <OnLineReceived+0xb0>)
 800057e:	f000 fbc9 	bl	8000d14 <puts>
        if (strcmp(user_input, current_riddle.answer) == 0) {
 8000582:	e017      	b.n	80005b4 <OnLineReceived+0x98>
        } else {
            printf("\r\nIncorrect. Try again!\r\n> ");
 8000584:	4812      	ldr	r0, [pc, #72]	@ (80005d0 <OnLineReceived+0xb4>)
 8000586:	f000 fb5d 	bl	8000c44 <iprintf>
        if (strcmp(user_input, current_riddle.answer) == 0) {
 800058a:	e013      	b.n	80005b4 <OnLineReceived+0x98>
        }
    } else if (!(game_progress & 0b0001)) {
 800058c:	4b0c      	ldr	r3, [pc, #48]	@ (80005c0 <OnLineReceived+0xa4>)
 800058e:	781b      	ldrb	r3, [r3, #0]
 8000590:	f003 0301 	and.w	r3, r3, #1
 8000594:	2b00      	cmp	r3, #0
 8000596:	d103      	bne.n	80005a0 <OnLineReceived+0x84>
        printf("\r\nYou must complete Minigame 1 before attempting this!\r\n");
 8000598:	480e      	ldr	r0, [pc, #56]	@ (80005d4 <OnLineReceived+0xb8>)
 800059a:	f000 fbbb 	bl	8000d14 <puts>
    } else if (game_progress & 0b0010) {
        printf("\r\nYou've already completed this riddle challenge! Proceed to the next game.\r\n");
    }
}
 800059e:	e009      	b.n	80005b4 <OnLineReceived+0x98>
    } else if (game_progress & 0b0010) {
 80005a0:	4b07      	ldr	r3, [pc, #28]	@ (80005c0 <OnLineReceived+0xa4>)
 80005a2:	781b      	ldrb	r3, [r3, #0]
 80005a4:	f003 0302 	and.w	r3, r3, #2
 80005a8:	2b00      	cmp	r3, #0
 80005aa:	d003      	beq.n	80005b4 <OnLineReceived+0x98>
        printf("\r\nYou've already completed this riddle challenge! Proceed to the next game.\r\n");
 80005ac:	480a      	ldr	r0, [pc, #40]	@ (80005d8 <OnLineReceived+0xbc>)
 80005ae:	f000 fbb1 	bl	8000d14 <puts>
}
 80005b2:	e7ff      	b.n	80005b4 <OnLineReceived+0x98>
 80005b4:	bf00      	nop
 80005b6:	3708      	adds	r7, #8
 80005b8:	46bd      	mov	sp, r7
 80005ba:	bd80      	pop	{r7, pc}
 80005bc:	2000016c 	.word	0x2000016c
 80005c0:	20000028 	.word	0x20000028
 80005c4:	200000d4 	.word	0x200000d4
 80005c8:	08001db0 	.word	0x08001db0
 80005cc:	08001dcc 	.word	0x08001dcc
 80005d0:	08001df4 	.word	0x08001df4
 80005d4:	08001e10 	.word	0x08001e10
 80005d8:	08001e48 	.word	0x08001e48

080005dc <isMinigame1Completed>:

uint8_t isMinigame1Completed(void) {
 80005dc:	b480      	push	{r7}
 80005de:	af00      	add	r7, sp, #0
    return (game_progress & 0b0001) != 0;
 80005e0:	4b06      	ldr	r3, [pc, #24]	@ (80005fc <isMinigame1Completed+0x20>)
 80005e2:	781b      	ldrb	r3, [r3, #0]
 80005e4:	f003 0301 	and.w	r3, r3, #1
 80005e8:	2b00      	cmp	r3, #0
 80005ea:	bf14      	ite	ne
 80005ec:	2301      	movne	r3, #1
 80005ee:	2300      	moveq	r3, #0
 80005f0:	b2db      	uxtb	r3, r3
}
 80005f2:	4618      	mov	r0, r3
 80005f4:	46bd      	mov	sp, r7
 80005f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005fa:	4770      	bx	lr
 80005fc:	20000028 	.word	0x20000028

08000600 <isMinigame2Completed>:

uint8_t isMinigame2Completed(void) {
 8000600:	b480      	push	{r7}
 8000602:	af00      	add	r7, sp, #0
    return (game_progress & 0b0010) != 0;
 8000604:	4b06      	ldr	r3, [pc, #24]	@ (8000620 <isMinigame2Completed+0x20>)
 8000606:	781b      	ldrb	r3, [r3, #0]
 8000608:	f003 0302 	and.w	r3, r3, #2
 800060c:	2b00      	cmp	r3, #0
 800060e:	bf14      	ite	ne
 8000610:	2301      	movne	r3, #1
 8000612:	2300      	moveq	r3, #0
 8000614:	b2db      	uxtb	r3, r3
}
 8000616:	4618      	mov	r0, r3
 8000618:	46bd      	mov	sp, r7
 800061a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800061e:	4770      	bx	lr
 8000620:	20000028 	.word	0x20000028

08000624 <SerialInitialise>:
// Pointer to currently transmitting string
static const char *tx_buffer = NULL;
static uint32_t tx_index = 0;*/

// Initializes UART hardware and GPIO settings for communication
void SerialInitialise(uint32_t baudRate, SerialPort *serial_port, void (*completion_function)(uint32_t)) {
 8000624:	b580      	push	{r7, lr}
 8000626:	b086      	sub	sp, #24
 8000628:	af00      	add	r7, sp, #0
 800062a:	60f8      	str	r0, [r7, #12]
 800062c:	60b9      	str	r1, [r7, #8]
 800062e:	607a      	str	r2, [r7, #4]
    serial_port->completion_function = completion_function;
 8000630:	68bb      	ldr	r3, [r7, #8]
 8000632:	687a      	ldr	r2, [r7, #4]
 8000634:	625a      	str	r2, [r3, #36]	@ 0x24

    // Enable required clocks
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 8000636:	4b2d      	ldr	r3, [pc, #180]	@ (80006ec <SerialInitialise+0xc8>)
 8000638:	69db      	ldr	r3, [r3, #28]
 800063a:	4a2c      	ldr	r2, [pc, #176]	@ (80006ec <SerialInitialise+0xc8>)
 800063c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000640:	61d3      	str	r3, [r2, #28]
    RCC->APB2ENR |= RCC_APB2ENR_SYSCFGEN;
 8000642:	4b2a      	ldr	r3, [pc, #168]	@ (80006ec <SerialInitialise+0xc8>)
 8000644:	699b      	ldr	r3, [r3, #24]
 8000646:	4a29      	ldr	r2, [pc, #164]	@ (80006ec <SerialInitialise+0xc8>)
 8000648:	f043 0301 	orr.w	r3, r3, #1
 800064c:	6193      	str	r3, [r2, #24]
    RCC->AHBENR |= serial_port->MaskAHBENR;
 800064e:	68bb      	ldr	r3, [r7, #8]
 8000650:	691a      	ldr	r2, [r3, #16]
 8000652:	4b26      	ldr	r3, [pc, #152]	@ (80006ec <SerialInitialise+0xc8>)
 8000654:	695b      	ldr	r3, [r3, #20]
 8000656:	4925      	ldr	r1, [pc, #148]	@ (80006ec <SerialInitialise+0xc8>)
 8000658:	4313      	orrs	r3, r2
 800065a:	614b      	str	r3, [r1, #20]

    // Configure GPIO alternate function mode and speed
    serial_port->GPIO->MODER = serial_port->SerialPinModeValue;
 800065c:	68bb      	ldr	r3, [r7, #8]
 800065e:	685b      	ldr	r3, [r3, #4]
 8000660:	68ba      	ldr	r2, [r7, #8]
 8000662:	6952      	ldr	r2, [r2, #20]
 8000664:	601a      	str	r2, [r3, #0]
    serial_port->GPIO->OSPEEDR = serial_port->SerialPinSpeedValue;
 8000666:	68bb      	ldr	r3, [r7, #8]
 8000668:	685b      	ldr	r3, [r3, #4]
 800066a:	68ba      	ldr	r2, [r7, #8]
 800066c:	6992      	ldr	r2, [r2, #24]
 800066e:	609a      	str	r2, [r3, #8]
    serial_port->GPIO->AFR[0] |= serial_port->SerialPinAlternatePinValueLow;
 8000670:	68bb      	ldr	r3, [r7, #8]
 8000672:	69d9      	ldr	r1, [r3, #28]
 8000674:	68bb      	ldr	r3, [r7, #8]
 8000676:	685b      	ldr	r3, [r3, #4]
 8000678:	6a1a      	ldr	r2, [r3, #32]
 800067a:	68bb      	ldr	r3, [r7, #8]
 800067c:	685b      	ldr	r3, [r3, #4]
 800067e:	430a      	orrs	r2, r1
 8000680:	621a      	str	r2, [r3, #32]
    serial_port->GPIO->AFR[1] |= serial_port->SerialPinAlternatePinValueHigh;
 8000682:	68bb      	ldr	r3, [r7, #8]
 8000684:	6a19      	ldr	r1, [r3, #32]
 8000686:	68bb      	ldr	r3, [r7, #8]
 8000688:	685b      	ldr	r3, [r3, #4]
 800068a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800068c:	68bb      	ldr	r3, [r7, #8]
 800068e:	685b      	ldr	r3, [r3, #4]
 8000690:	430a      	orrs	r2, r1
 8000692:	625a      	str	r2, [r3, #36]	@ 0x24

    // Enable USART peripheral
    RCC->APB1ENR |= serial_port->MaskAPB1ENR;
 8000694:	68bb      	ldr	r3, [r7, #8]
 8000696:	68da      	ldr	r2, [r3, #12]
 8000698:	4b14      	ldr	r3, [pc, #80]	@ (80006ec <SerialInitialise+0xc8>)
 800069a:	69db      	ldr	r3, [r3, #28]
 800069c:	4913      	ldr	r1, [pc, #76]	@ (80006ec <SerialInitialise+0xc8>)
 800069e:	4313      	orrs	r3, r2
 80006a0:	61cb      	str	r3, [r1, #28]
    RCC->APB2ENR |= serial_port->MaskAPB2ENR;
 80006a2:	68bb      	ldr	r3, [r7, #8]
 80006a4:	689a      	ldr	r2, [r3, #8]
 80006a6:	4b11      	ldr	r3, [pc, #68]	@ (80006ec <SerialInitialise+0xc8>)
 80006a8:	699b      	ldr	r3, [r3, #24]
 80006aa:	4910      	ldr	r1, [pc, #64]	@ (80006ec <SerialInitialise+0xc8>)
 80006ac:	4313      	orrs	r3, r2
 80006ae:	618b      	str	r3, [r1, #24]

    // Set baud rate (hardcoded value for 115200 @ 8 MHz)
    uint16_t *baud_rate_config = (uint16_t*)&serial_port->UART->BRR;
 80006b0:	68bb      	ldr	r3, [r7, #8]
 80006b2:	681b      	ldr	r3, [r3, #0]
 80006b4:	330c      	adds	r3, #12
 80006b6:	617b      	str	r3, [r7, #20]
    *baud_rate_config = 0x46;
 80006b8:	697b      	ldr	r3, [r7, #20]
 80006ba:	2246      	movs	r2, #70	@ 0x46
 80006bc:	801a      	strh	r2, [r3, #0]

    // Enable TX, RX, UART and RX interrupt
    serial_port->UART->CR1 |= USART_CR1_TE | USART_CR1_RE | USART_CR1_UE;
 80006be:	68bb      	ldr	r3, [r7, #8]
 80006c0:	681b      	ldr	r3, [r3, #0]
 80006c2:	681a      	ldr	r2, [r3, #0]
 80006c4:	68bb      	ldr	r3, [r7, #8]
 80006c6:	681b      	ldr	r3, [r3, #0]
 80006c8:	f042 020d 	orr.w	r2, r2, #13
 80006cc:	601a      	str	r2, [r3, #0]
    serial_port->UART->CR1 |= USART_CR1_RXNEIE;
 80006ce:	68bb      	ldr	r3, [r7, #8]
 80006d0:	681b      	ldr	r3, [r3, #0]
 80006d2:	681a      	ldr	r2, [r3, #0]
 80006d4:	68bb      	ldr	r3, [r7, #8]
 80006d6:	681b      	ldr	r3, [r3, #0]
 80006d8:	f042 0220 	orr.w	r2, r2, #32
 80006dc:	601a      	str	r2, [r3, #0]

    // Enable USART1 interrupt in NVIC
    NVIC_EnableIRQ(USART1_IRQn);
 80006de:	2025      	movs	r0, #37	@ 0x25
 80006e0:	f7ff feaa 	bl	8000438 <__NVIC_EnableIRQ>
}
 80006e4:	bf00      	nop
 80006e6:	3718      	adds	r7, #24
 80006e8:	46bd      	mov	sp, r7
 80006ea:	bd80      	pop	{r7, pc}
 80006ec:	40021000 	.word	0x40021000

080006f0 <SerialOutputChar>:

// Transmit a single character (blocking)
void SerialOutputChar(uint8_t data, SerialPort *serial_port) {
 80006f0:	b480      	push	{r7}
 80006f2:	b083      	sub	sp, #12
 80006f4:	af00      	add	r7, sp, #0
 80006f6:	4603      	mov	r3, r0
 80006f8:	6039      	str	r1, [r7, #0]
 80006fa:	71fb      	strb	r3, [r7, #7]
    while ((serial_port->UART->ISR & USART_ISR_TXE) == 0);  // Wait for TX to be ready
 80006fc:	bf00      	nop
 80006fe:	683b      	ldr	r3, [r7, #0]
 8000700:	681b      	ldr	r3, [r3, #0]
 8000702:	69db      	ldr	r3, [r3, #28]
 8000704:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000708:	2b00      	cmp	r3, #0
 800070a:	d0f8      	beq.n	80006fe <SerialOutputChar+0xe>
    serial_port->UART->TDR = data;                          // Write to transmit register
 800070c:	683b      	ldr	r3, [r7, #0]
 800070e:	681b      	ldr	r3, [r3, #0]
 8000710:	79fa      	ldrb	r2, [r7, #7]
 8000712:	b292      	uxth	r2, r2
 8000714:	851a      	strh	r2, [r3, #40]	@ 0x28
}
 8000716:	bf00      	nop
 8000718:	370c      	adds	r7, #12
 800071a:	46bd      	mov	sp, r7
 800071c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000720:	4770      	bx	lr

08000722 <SerialSetReceiveCallback>:
    while ((serial_port->UART->ISR & USART_ISR_RXNE) == 0);  // Wait for data
    return serial_port->UART->RDR;                           // Return received char
}

// Sets the function to be called when a full line is received via UART
void SerialSetReceiveCallback(SerialPort *serial_port, void (*callback)(char *, uint32_t)) {
 8000722:	b480      	push	{r7}
 8000724:	b083      	sub	sp, #12
 8000726:	af00      	add	r7, sp, #0
 8000728:	6078      	str	r0, [r7, #4]
 800072a:	6039      	str	r1, [r7, #0]
    serial_port->receive_callback = callback;
 800072c:	687b      	ldr	r3, [r7, #4]
 800072e:	683a      	ldr	r2, [r7, #0]
 8000730:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8000732:	bf00      	nop
 8000734:	370c      	adds	r7, #12
 8000736:	46bd      	mov	sp, r7
 8000738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800073c:	4770      	bx	lr
	...

08000740 <USART1_EXTI25_IRQHandler>:
    tx_index = 0;
    USART1->CR1 |= USART_CR1_TXEIE;  // Enable TX interrupt
}

// UART interrupt handler (for RX and TX)
void USART1_EXTI25_IRQHandler(void) {
 8000740:	b580      	push	{r7, lr}
 8000742:	b082      	sub	sp, #8
 8000744:	af00      	add	r7, sp, #0
    // ---------- Receive ----------
    if (USART1->ISR & USART_ISR_RXNE) {
 8000746:	4b40      	ldr	r3, [pc, #256]	@ (8000848 <USART1_EXTI25_IRQHandler+0x108>)
 8000748:	69db      	ldr	r3, [r3, #28]
 800074a:	f003 0320 	and.w	r3, r3, #32
 800074e:	2b00      	cmp	r3, #0
 8000750:	d045      	beq.n	80007de <USART1_EXTI25_IRQHandler+0x9e>
        char c = USART1->RDR;  // Read received character
 8000752:	4b3d      	ldr	r3, [pc, #244]	@ (8000848 <USART1_EXTI25_IRQHandler+0x108>)
 8000754:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8000756:	b29b      	uxth	r3, r3
 8000758:	71fb      	strb	r3, [r7, #7]
        SerialOutputChar(c, &USART1_PORT);  // Echo it back
 800075a:	79fb      	ldrb	r3, [r7, #7]
 800075c:	493b      	ldr	r1, [pc, #236]	@ (800084c <USART1_EXTI25_IRQHandler+0x10c>)
 800075e:	4618      	mov	r0, r3
 8000760:	f7ff ffc6 	bl	80006f0 <SerialOutputChar>

        // If Enter pressed, complete the string
        if (c == '\r') return;
 8000764:	79fb      	ldrb	r3, [r7, #7]
 8000766:	2b0d      	cmp	r3, #13
 8000768:	d06a      	beq.n	8000840 <USART1_EXTI25_IRQHandler+0x100>

        if (c == '\n') {
 800076a:	79fb      	ldrb	r3, [r7, #7]
 800076c:	2b0a      	cmp	r3, #10
 800076e:	d124      	bne.n	80007ba <USART1_EXTI25_IRQHandler+0x7a>
            rx_buffers[active_rx_buf][rx_index] = '\0';  // Null terminate
 8000770:	4b37      	ldr	r3, [pc, #220]	@ (8000850 <USART1_EXTI25_IRQHandler+0x110>)
 8000772:	781b      	ldrb	r3, [r3, #0]
 8000774:	461a      	mov	r2, r3
 8000776:	4b37      	ldr	r3, [pc, #220]	@ (8000854 <USART1_EXTI25_IRQHandler+0x114>)
 8000778:	681b      	ldr	r3, [r3, #0]
 800077a:	4937      	ldr	r1, [pc, #220]	@ (8000858 <USART1_EXTI25_IRQHandler+0x118>)
 800077c:	0192      	lsls	r2, r2, #6
 800077e:	440a      	add	r2, r1
 8000780:	4413      	add	r3, r2
 8000782:	2200      	movs	r2, #0
 8000784:	701a      	strb	r2, [r3, #0]

            if (USART1_PORT.receive_callback)
 8000786:	4b31      	ldr	r3, [pc, #196]	@ (800084c <USART1_EXTI25_IRQHandler+0x10c>)
 8000788:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800078a:	2b00      	cmp	r3, #0
 800078c:	d00a      	beq.n	80007a4 <USART1_EXTI25_IRQHandler+0x64>
                USART1_PORT.receive_callback(rx_buffers[active_rx_buf], rx_index);
 800078e:	4b2f      	ldr	r3, [pc, #188]	@ (800084c <USART1_EXTI25_IRQHandler+0x10c>)
 8000790:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000792:	4a2f      	ldr	r2, [pc, #188]	@ (8000850 <USART1_EXTI25_IRQHandler+0x110>)
 8000794:	7812      	ldrb	r2, [r2, #0]
 8000796:	0192      	lsls	r2, r2, #6
 8000798:	492f      	ldr	r1, [pc, #188]	@ (8000858 <USART1_EXTI25_IRQHandler+0x118>)
 800079a:	440a      	add	r2, r1
 800079c:	492d      	ldr	r1, [pc, #180]	@ (8000854 <USART1_EXTI25_IRQHandler+0x114>)
 800079e:	6809      	ldr	r1, [r1, #0]
 80007a0:	4610      	mov	r0, r2
 80007a2:	4798      	blx	r3

            active_rx_buf ^= 1;  // Switch buffer
 80007a4:	4b2a      	ldr	r3, [pc, #168]	@ (8000850 <USART1_EXTI25_IRQHandler+0x110>)
 80007a6:	781b      	ldrb	r3, [r3, #0]
 80007a8:	f083 0301 	eor.w	r3, r3, #1
 80007ac:	b2da      	uxtb	r2, r3
 80007ae:	4b28      	ldr	r3, [pc, #160]	@ (8000850 <USART1_EXTI25_IRQHandler+0x110>)
 80007b0:	701a      	strb	r2, [r3, #0]
            rx_index = 0;        // Reset index
 80007b2:	4b28      	ldr	r3, [pc, #160]	@ (8000854 <USART1_EXTI25_IRQHandler+0x114>)
 80007b4:	2200      	movs	r2, #0
 80007b6:	601a      	str	r2, [r3, #0]
 80007b8:	e011      	b.n	80007de <USART1_EXTI25_IRQHandler+0x9e>
        } else if (rx_index < sizeof(rx_buffers[0]) - 1) {
 80007ba:	4b26      	ldr	r3, [pc, #152]	@ (8000854 <USART1_EXTI25_IRQHandler+0x114>)
 80007bc:	681b      	ldr	r3, [r3, #0]
 80007be:	2b3e      	cmp	r3, #62	@ 0x3e
 80007c0:	d80d      	bhi.n	80007de <USART1_EXTI25_IRQHandler+0x9e>
            rx_buffers[active_rx_buf][rx_index++] = c;
 80007c2:	4b23      	ldr	r3, [pc, #140]	@ (8000850 <USART1_EXTI25_IRQHandler+0x110>)
 80007c4:	781b      	ldrb	r3, [r3, #0]
 80007c6:	4618      	mov	r0, r3
 80007c8:	4b22      	ldr	r3, [pc, #136]	@ (8000854 <USART1_EXTI25_IRQHandler+0x114>)
 80007ca:	681b      	ldr	r3, [r3, #0]
 80007cc:	1c5a      	adds	r2, r3, #1
 80007ce:	4921      	ldr	r1, [pc, #132]	@ (8000854 <USART1_EXTI25_IRQHandler+0x114>)
 80007d0:	600a      	str	r2, [r1, #0]
 80007d2:	4921      	ldr	r1, [pc, #132]	@ (8000858 <USART1_EXTI25_IRQHandler+0x118>)
 80007d4:	0182      	lsls	r2, r0, #6
 80007d6:	440a      	add	r2, r1
 80007d8:	4413      	add	r3, r2
 80007da:	79fa      	ldrb	r2, [r7, #7]
 80007dc:	701a      	strb	r2, [r3, #0]
        }
    }

    // ---------- Transmit ----------
    if ((USART1->CR1 & USART_CR1_TXEIE) && (USART1->ISR & USART_ISR_TXE)) {
 80007de:	4b1a      	ldr	r3, [pc, #104]	@ (8000848 <USART1_EXTI25_IRQHandler+0x108>)
 80007e0:	681b      	ldr	r3, [r3, #0]
 80007e2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80007e6:	2b00      	cmp	r3, #0
 80007e8:	d02b      	beq.n	8000842 <USART1_EXTI25_IRQHandler+0x102>
 80007ea:	4b17      	ldr	r3, [pc, #92]	@ (8000848 <USART1_EXTI25_IRQHandler+0x108>)
 80007ec:	69db      	ldr	r3, [r3, #28]
 80007ee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80007f2:	2b00      	cmp	r3, #0
 80007f4:	d025      	beq.n	8000842 <USART1_EXTI25_IRQHandler+0x102>
        if (tx_buffer && tx_buffer[tx_index]) {
 80007f6:	4b19      	ldr	r3, [pc, #100]	@ (800085c <USART1_EXTI25_IRQHandler+0x11c>)
 80007f8:	681b      	ldr	r3, [r3, #0]
 80007fa:	2b00      	cmp	r3, #0
 80007fc:	d013      	beq.n	8000826 <USART1_EXTI25_IRQHandler+0xe6>
 80007fe:	4b17      	ldr	r3, [pc, #92]	@ (800085c <USART1_EXTI25_IRQHandler+0x11c>)
 8000800:	681a      	ldr	r2, [r3, #0]
 8000802:	4b17      	ldr	r3, [pc, #92]	@ (8000860 <USART1_EXTI25_IRQHandler+0x120>)
 8000804:	681b      	ldr	r3, [r3, #0]
 8000806:	4413      	add	r3, r2
 8000808:	781b      	ldrb	r3, [r3, #0]
 800080a:	2b00      	cmp	r3, #0
 800080c:	d00b      	beq.n	8000826 <USART1_EXTI25_IRQHandler+0xe6>
            USART1->TDR = tx_buffer[tx_index++];  // Send next character
 800080e:	4b13      	ldr	r3, [pc, #76]	@ (800085c <USART1_EXTI25_IRQHandler+0x11c>)
 8000810:	681a      	ldr	r2, [r3, #0]
 8000812:	4b13      	ldr	r3, [pc, #76]	@ (8000860 <USART1_EXTI25_IRQHandler+0x120>)
 8000814:	681b      	ldr	r3, [r3, #0]
 8000816:	1c59      	adds	r1, r3, #1
 8000818:	4811      	ldr	r0, [pc, #68]	@ (8000860 <USART1_EXTI25_IRQHandler+0x120>)
 800081a:	6001      	str	r1, [r0, #0]
 800081c:	4413      	add	r3, r2
 800081e:	781a      	ldrb	r2, [r3, #0]
 8000820:	4b09      	ldr	r3, [pc, #36]	@ (8000848 <USART1_EXTI25_IRQHandler+0x108>)
 8000822:	851a      	strh	r2, [r3, #40]	@ 0x28
 8000824:	e00d      	b.n	8000842 <USART1_EXTI25_IRQHandler+0x102>
        } else {
            USART1->CR1 &= ~USART_CR1_TXEIE;  // Disable TX interrupt
 8000826:	4b08      	ldr	r3, [pc, #32]	@ (8000848 <USART1_EXTI25_IRQHandler+0x108>)
 8000828:	681b      	ldr	r3, [r3, #0]
 800082a:	4a07      	ldr	r2, [pc, #28]	@ (8000848 <USART1_EXTI25_IRQHandler+0x108>)
 800082c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8000830:	6013      	str	r3, [r2, #0]
            tx_buffer = NULL;
 8000832:	4b0a      	ldr	r3, [pc, #40]	@ (800085c <USART1_EXTI25_IRQHandler+0x11c>)
 8000834:	2200      	movs	r2, #0
 8000836:	601a      	str	r2, [r3, #0]
            tx_index = 0;
 8000838:	4b09      	ldr	r3, [pc, #36]	@ (8000860 <USART1_EXTI25_IRQHandler+0x120>)
 800083a:	2200      	movs	r2, #0
 800083c:	601a      	str	r2, [r3, #0]
 800083e:	e000      	b.n	8000842 <USART1_EXTI25_IRQHandler+0x102>
        if (c == '\r') return;
 8000840:	bf00      	nop
        }
    }
}
 8000842:	3708      	adds	r7, #8
 8000844:	46bd      	mov	sp, r7
 8000846:	bd80      	pop	{r7, pc}
 8000848:	40013800 	.word	0x40013800
 800084c:	2000002c 	.word	0x2000002c
 8000850:	2000015c 	.word	0x2000015c
 8000854:	20000160 	.word	0x20000160
 8000858:	200000dc 	.word	0x200000dc
 800085c:	20000164 	.word	0x20000164
 8000860:	20000168 	.word	0x20000168

08000864 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000864:	b480      	push	{r7}
 8000866:	af00      	add	r7, sp, #0
	return 1;
 8000868:	2301      	movs	r3, #1
}
 800086a:	4618      	mov	r0, r3
 800086c:	46bd      	mov	sp, r7
 800086e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000872:	4770      	bx	lr

08000874 <_kill>:

int _kill(int pid, int sig)
{
 8000874:	b580      	push	{r7, lr}
 8000876:	b082      	sub	sp, #8
 8000878:	af00      	add	r7, sp, #0
 800087a:	6078      	str	r0, [r7, #4]
 800087c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800087e:	f000 fb8b 	bl	8000f98 <__errno>
 8000882:	4603      	mov	r3, r0
 8000884:	2216      	movs	r2, #22
 8000886:	601a      	str	r2, [r3, #0]
	return -1;
 8000888:	f04f 33ff 	mov.w	r3, #4294967295
}
 800088c:	4618      	mov	r0, r3
 800088e:	3708      	adds	r7, #8
 8000890:	46bd      	mov	sp, r7
 8000892:	bd80      	pop	{r7, pc}

08000894 <_exit>:

void _exit (int status)
{
 8000894:	b580      	push	{r7, lr}
 8000896:	b082      	sub	sp, #8
 8000898:	af00      	add	r7, sp, #0
 800089a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800089c:	f04f 31ff 	mov.w	r1, #4294967295
 80008a0:	6878      	ldr	r0, [r7, #4]
 80008a2:	f7ff ffe7 	bl	8000874 <_kill>
	while (1) {}		/* Make sure we hang here */
 80008a6:	bf00      	nop
 80008a8:	e7fd      	b.n	80008a6 <_exit+0x12>

080008aa <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80008aa:	b580      	push	{r7, lr}
 80008ac:	b086      	sub	sp, #24
 80008ae:	af00      	add	r7, sp, #0
 80008b0:	60f8      	str	r0, [r7, #12]
 80008b2:	60b9      	str	r1, [r7, #8]
 80008b4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80008b6:	2300      	movs	r3, #0
 80008b8:	617b      	str	r3, [r7, #20]
 80008ba:	e00a      	b.n	80008d2 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80008bc:	f3af 8000 	nop.w
 80008c0:	4601      	mov	r1, r0
 80008c2:	68bb      	ldr	r3, [r7, #8]
 80008c4:	1c5a      	adds	r2, r3, #1
 80008c6:	60ba      	str	r2, [r7, #8]
 80008c8:	b2ca      	uxtb	r2, r1
 80008ca:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80008cc:	697b      	ldr	r3, [r7, #20]
 80008ce:	3301      	adds	r3, #1
 80008d0:	617b      	str	r3, [r7, #20]
 80008d2:	697a      	ldr	r2, [r7, #20]
 80008d4:	687b      	ldr	r3, [r7, #4]
 80008d6:	429a      	cmp	r2, r3
 80008d8:	dbf0      	blt.n	80008bc <_read+0x12>
	}

return len;
 80008da:	687b      	ldr	r3, [r7, #4]
}
 80008dc:	4618      	mov	r0, r3
 80008de:	3718      	adds	r7, #24
 80008e0:	46bd      	mov	sp, r7
 80008e2:	bd80      	pop	{r7, pc}

080008e4 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80008e4:	b580      	push	{r7, lr}
 80008e6:	b086      	sub	sp, #24
 80008e8:	af00      	add	r7, sp, #0
 80008ea:	60f8      	str	r0, [r7, #12]
 80008ec:	60b9      	str	r1, [r7, #8]
 80008ee:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80008f0:	2300      	movs	r3, #0
 80008f2:	617b      	str	r3, [r7, #20]
 80008f4:	e009      	b.n	800090a <_write+0x26>
	{
		__io_putchar(*ptr++);
 80008f6:	68bb      	ldr	r3, [r7, #8]
 80008f8:	1c5a      	adds	r2, r3, #1
 80008fa:	60ba      	str	r2, [r7, #8]
 80008fc:	781b      	ldrb	r3, [r3, #0]
 80008fe:	4618      	mov	r0, r3
 8000900:	f7ff fcce 	bl	80002a0 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000904:	697b      	ldr	r3, [r7, #20]
 8000906:	3301      	adds	r3, #1
 8000908:	617b      	str	r3, [r7, #20]
 800090a:	697a      	ldr	r2, [r7, #20]
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	429a      	cmp	r2, r3
 8000910:	dbf1      	blt.n	80008f6 <_write+0x12>
	}
	return len;
 8000912:	687b      	ldr	r3, [r7, #4]
}
 8000914:	4618      	mov	r0, r3
 8000916:	3718      	adds	r7, #24
 8000918:	46bd      	mov	sp, r7
 800091a:	bd80      	pop	{r7, pc}

0800091c <_close>:

int _close(int file)
{
 800091c:	b480      	push	{r7}
 800091e:	b083      	sub	sp, #12
 8000920:	af00      	add	r7, sp, #0
 8000922:	6078      	str	r0, [r7, #4]
	return -1;
 8000924:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000928:	4618      	mov	r0, r3
 800092a:	370c      	adds	r7, #12
 800092c:	46bd      	mov	sp, r7
 800092e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000932:	4770      	bx	lr

08000934 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000934:	b480      	push	{r7}
 8000936:	b083      	sub	sp, #12
 8000938:	af00      	add	r7, sp, #0
 800093a:	6078      	str	r0, [r7, #4]
 800093c:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800093e:	683b      	ldr	r3, [r7, #0]
 8000940:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000944:	605a      	str	r2, [r3, #4]
	return 0;
 8000946:	2300      	movs	r3, #0
}
 8000948:	4618      	mov	r0, r3
 800094a:	370c      	adds	r7, #12
 800094c:	46bd      	mov	sp, r7
 800094e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000952:	4770      	bx	lr

08000954 <_isatty>:

int _isatty(int file)
{
 8000954:	b480      	push	{r7}
 8000956:	b083      	sub	sp, #12
 8000958:	af00      	add	r7, sp, #0
 800095a:	6078      	str	r0, [r7, #4]
	return 1;
 800095c:	2301      	movs	r3, #1
}
 800095e:	4618      	mov	r0, r3
 8000960:	370c      	adds	r7, #12
 8000962:	46bd      	mov	sp, r7
 8000964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000968:	4770      	bx	lr

0800096a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800096a:	b480      	push	{r7}
 800096c:	b085      	sub	sp, #20
 800096e:	af00      	add	r7, sp, #0
 8000970:	60f8      	str	r0, [r7, #12]
 8000972:	60b9      	str	r1, [r7, #8]
 8000974:	607a      	str	r2, [r7, #4]
	return 0;
 8000976:	2300      	movs	r3, #0
}
 8000978:	4618      	mov	r0, r3
 800097a:	3714      	adds	r7, #20
 800097c:	46bd      	mov	sp, r7
 800097e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000982:	4770      	bx	lr

08000984 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000984:	b580      	push	{r7, lr}
 8000986:	b086      	sub	sp, #24
 8000988:	af00      	add	r7, sp, #0
 800098a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800098c:	4a14      	ldr	r2, [pc, #80]	@ (80009e0 <_sbrk+0x5c>)
 800098e:	4b15      	ldr	r3, [pc, #84]	@ (80009e4 <_sbrk+0x60>)
 8000990:	1ad3      	subs	r3, r2, r3
 8000992:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000994:	697b      	ldr	r3, [r7, #20]
 8000996:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000998:	4b13      	ldr	r3, [pc, #76]	@ (80009e8 <_sbrk+0x64>)
 800099a:	681b      	ldr	r3, [r3, #0]
 800099c:	2b00      	cmp	r3, #0
 800099e:	d102      	bne.n	80009a6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80009a0:	4b11      	ldr	r3, [pc, #68]	@ (80009e8 <_sbrk+0x64>)
 80009a2:	4a12      	ldr	r2, [pc, #72]	@ (80009ec <_sbrk+0x68>)
 80009a4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80009a6:	4b10      	ldr	r3, [pc, #64]	@ (80009e8 <_sbrk+0x64>)
 80009a8:	681a      	ldr	r2, [r3, #0]
 80009aa:	687b      	ldr	r3, [r7, #4]
 80009ac:	4413      	add	r3, r2
 80009ae:	693a      	ldr	r2, [r7, #16]
 80009b0:	429a      	cmp	r2, r3
 80009b2:	d207      	bcs.n	80009c4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80009b4:	f000 faf0 	bl	8000f98 <__errno>
 80009b8:	4603      	mov	r3, r0
 80009ba:	220c      	movs	r2, #12
 80009bc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80009be:	f04f 33ff 	mov.w	r3, #4294967295
 80009c2:	e009      	b.n	80009d8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80009c4:	4b08      	ldr	r3, [pc, #32]	@ (80009e8 <_sbrk+0x64>)
 80009c6:	681b      	ldr	r3, [r3, #0]
 80009c8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80009ca:	4b07      	ldr	r3, [pc, #28]	@ (80009e8 <_sbrk+0x64>)
 80009cc:	681a      	ldr	r2, [r3, #0]
 80009ce:	687b      	ldr	r3, [r7, #4]
 80009d0:	4413      	add	r3, r2
 80009d2:	4a05      	ldr	r2, [pc, #20]	@ (80009e8 <_sbrk+0x64>)
 80009d4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80009d6:	68fb      	ldr	r3, [r7, #12]
}
 80009d8:	4618      	mov	r0, r3
 80009da:	3718      	adds	r7, #24
 80009dc:	46bd      	mov	sp, r7
 80009de:	bd80      	pop	{r7, pc}
 80009e0:	2000a000 	.word	0x2000a000
 80009e4:	00000400 	.word	0x00000400
 80009e8:	200001ac 	.word	0x200001ac
 80009ec:	20000300 	.word	0x20000300

080009f0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80009f0:	480d      	ldr	r0, [pc, #52]	@ (8000a28 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80009f2:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80009f4:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80009f8:	480c      	ldr	r0, [pc, #48]	@ (8000a2c <LoopForever+0x6>)
  ldr r1, =_edata
 80009fa:	490d      	ldr	r1, [pc, #52]	@ (8000a30 <LoopForever+0xa>)
  ldr r2, =_sidata
 80009fc:	4a0d      	ldr	r2, [pc, #52]	@ (8000a34 <LoopForever+0xe>)
  movs r3, #0
 80009fe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a00:	e002      	b.n	8000a08 <LoopCopyDataInit>

08000a02 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a02:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a04:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a06:	3304      	adds	r3, #4

08000a08 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a08:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a0a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a0c:	d3f9      	bcc.n	8000a02 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a0e:	4a0a      	ldr	r2, [pc, #40]	@ (8000a38 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000a10:	4c0a      	ldr	r4, [pc, #40]	@ (8000a3c <LoopForever+0x16>)
  movs r3, #0
 8000a12:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a14:	e001      	b.n	8000a1a <LoopFillZerobss>

08000a16 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a16:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a18:	3204      	adds	r2, #4

08000a1a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a1a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a1c:	d3fb      	bcc.n	8000a16 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000a1e:	f000 fac1 	bl	8000fa4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000a22:	f7ff fc8f 	bl	8000344 <main>

08000a26 <LoopForever>:

LoopForever:
  b LoopForever
 8000a26:	e7fe      	b.n	8000a26 <LoopForever>
  ldr   r0, =_estack
 8000a28:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 8000a2c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a30:	200000b4 	.word	0x200000b4
  ldr r2, =_sidata
 8000a34:	08002084 	.word	0x08002084
  ldr r2, =_sbss
 8000a38:	200000b4 	.word	0x200000b4
  ldr r4, =_ebss
 8000a3c:	200002fc 	.word	0x200002fc

08000a40 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000a40:	e7fe      	b.n	8000a40 <ADC1_2_IRQHandler>
	...

08000a44 <rand>:
 8000a44:	4b16      	ldr	r3, [pc, #88]	@ (8000aa0 <rand+0x5c>)
 8000a46:	b510      	push	{r4, lr}
 8000a48:	681c      	ldr	r4, [r3, #0]
 8000a4a:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8000a4c:	b9b3      	cbnz	r3, 8000a7c <rand+0x38>
 8000a4e:	2018      	movs	r0, #24
 8000a50:	f000 fb38 	bl	80010c4 <malloc>
 8000a54:	4602      	mov	r2, r0
 8000a56:	6320      	str	r0, [r4, #48]	@ 0x30
 8000a58:	b920      	cbnz	r0, 8000a64 <rand+0x20>
 8000a5a:	4b12      	ldr	r3, [pc, #72]	@ (8000aa4 <rand+0x60>)
 8000a5c:	4812      	ldr	r0, [pc, #72]	@ (8000aa8 <rand+0x64>)
 8000a5e:	2152      	movs	r1, #82	@ 0x52
 8000a60:	f000 fac8 	bl	8000ff4 <__assert_func>
 8000a64:	4911      	ldr	r1, [pc, #68]	@ (8000aac <rand+0x68>)
 8000a66:	4b12      	ldr	r3, [pc, #72]	@ (8000ab0 <rand+0x6c>)
 8000a68:	e9c0 1300 	strd	r1, r3, [r0]
 8000a6c:	4b11      	ldr	r3, [pc, #68]	@ (8000ab4 <rand+0x70>)
 8000a6e:	6083      	str	r3, [r0, #8]
 8000a70:	230b      	movs	r3, #11
 8000a72:	8183      	strh	r3, [r0, #12]
 8000a74:	2100      	movs	r1, #0
 8000a76:	2001      	movs	r0, #1
 8000a78:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8000a7c:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8000a7e:	480e      	ldr	r0, [pc, #56]	@ (8000ab8 <rand+0x74>)
 8000a80:	690b      	ldr	r3, [r1, #16]
 8000a82:	694c      	ldr	r4, [r1, #20]
 8000a84:	4a0d      	ldr	r2, [pc, #52]	@ (8000abc <rand+0x78>)
 8000a86:	4358      	muls	r0, r3
 8000a88:	fb02 0004 	mla	r0, r2, r4, r0
 8000a8c:	fba3 3202 	umull	r3, r2, r3, r2
 8000a90:	3301      	adds	r3, #1
 8000a92:	eb40 0002 	adc.w	r0, r0, r2
 8000a96:	e9c1 3004 	strd	r3, r0, [r1, #16]
 8000a9a:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 8000a9e:	bd10      	pop	{r4, pc}
 8000aa0:	20000064 	.word	0x20000064
 8000aa4:	08001e95 	.word	0x08001e95
 8000aa8:	08001eac 	.word	0x08001eac
 8000aac:	abcd330e 	.word	0xabcd330e
 8000ab0:	e66d1234 	.word	0xe66d1234
 8000ab4:	0005deec 	.word	0x0005deec
 8000ab8:	5851f42d 	.word	0x5851f42d
 8000abc:	4c957f2d 	.word	0x4c957f2d

08000ac0 <std>:
 8000ac0:	2300      	movs	r3, #0
 8000ac2:	b510      	push	{r4, lr}
 8000ac4:	4604      	mov	r4, r0
 8000ac6:	e9c0 3300 	strd	r3, r3, [r0]
 8000aca:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8000ace:	6083      	str	r3, [r0, #8]
 8000ad0:	8181      	strh	r1, [r0, #12]
 8000ad2:	6643      	str	r3, [r0, #100]	@ 0x64
 8000ad4:	81c2      	strh	r2, [r0, #14]
 8000ad6:	6183      	str	r3, [r0, #24]
 8000ad8:	4619      	mov	r1, r3
 8000ada:	2208      	movs	r2, #8
 8000adc:	305c      	adds	r0, #92	@ 0x5c
 8000ade:	f000 f9f9 	bl	8000ed4 <memset>
 8000ae2:	4b0d      	ldr	r3, [pc, #52]	@ (8000b18 <std+0x58>)
 8000ae4:	6263      	str	r3, [r4, #36]	@ 0x24
 8000ae6:	4b0d      	ldr	r3, [pc, #52]	@ (8000b1c <std+0x5c>)
 8000ae8:	62a3      	str	r3, [r4, #40]	@ 0x28
 8000aea:	4b0d      	ldr	r3, [pc, #52]	@ (8000b20 <std+0x60>)
 8000aec:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8000aee:	4b0d      	ldr	r3, [pc, #52]	@ (8000b24 <std+0x64>)
 8000af0:	6323      	str	r3, [r4, #48]	@ 0x30
 8000af2:	4b0d      	ldr	r3, [pc, #52]	@ (8000b28 <std+0x68>)
 8000af4:	6224      	str	r4, [r4, #32]
 8000af6:	429c      	cmp	r4, r3
 8000af8:	d006      	beq.n	8000b08 <std+0x48>
 8000afa:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8000afe:	4294      	cmp	r4, r2
 8000b00:	d002      	beq.n	8000b08 <std+0x48>
 8000b02:	33d0      	adds	r3, #208	@ 0xd0
 8000b04:	429c      	cmp	r4, r3
 8000b06:	d105      	bne.n	8000b14 <std+0x54>
 8000b08:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8000b0c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000b10:	f000 ba6c 	b.w	8000fec <__retarget_lock_init_recursive>
 8000b14:	bd10      	pop	{r4, pc}
 8000b16:	bf00      	nop
 8000b18:	08000d25 	.word	0x08000d25
 8000b1c:	08000d47 	.word	0x08000d47
 8000b20:	08000d7f 	.word	0x08000d7f
 8000b24:	08000da3 	.word	0x08000da3
 8000b28:	200001b0 	.word	0x200001b0

08000b2c <stdio_exit_handler>:
 8000b2c:	4a02      	ldr	r2, [pc, #8]	@ (8000b38 <stdio_exit_handler+0xc>)
 8000b2e:	4903      	ldr	r1, [pc, #12]	@ (8000b3c <stdio_exit_handler+0x10>)
 8000b30:	4803      	ldr	r0, [pc, #12]	@ (8000b40 <stdio_exit_handler+0x14>)
 8000b32:	f000 b869 	b.w	8000c08 <_fwalk_sglue>
 8000b36:	bf00      	nop
 8000b38:	20000058 	.word	0x20000058
 8000b3c:	080018d9 	.word	0x080018d9
 8000b40:	20000068 	.word	0x20000068

08000b44 <cleanup_stdio>:
 8000b44:	6841      	ldr	r1, [r0, #4]
 8000b46:	4b0c      	ldr	r3, [pc, #48]	@ (8000b78 <cleanup_stdio+0x34>)
 8000b48:	4299      	cmp	r1, r3
 8000b4a:	b510      	push	{r4, lr}
 8000b4c:	4604      	mov	r4, r0
 8000b4e:	d001      	beq.n	8000b54 <cleanup_stdio+0x10>
 8000b50:	f000 fec2 	bl	80018d8 <_fflush_r>
 8000b54:	68a1      	ldr	r1, [r4, #8]
 8000b56:	4b09      	ldr	r3, [pc, #36]	@ (8000b7c <cleanup_stdio+0x38>)
 8000b58:	4299      	cmp	r1, r3
 8000b5a:	d002      	beq.n	8000b62 <cleanup_stdio+0x1e>
 8000b5c:	4620      	mov	r0, r4
 8000b5e:	f000 febb 	bl	80018d8 <_fflush_r>
 8000b62:	68e1      	ldr	r1, [r4, #12]
 8000b64:	4b06      	ldr	r3, [pc, #24]	@ (8000b80 <cleanup_stdio+0x3c>)
 8000b66:	4299      	cmp	r1, r3
 8000b68:	d004      	beq.n	8000b74 <cleanup_stdio+0x30>
 8000b6a:	4620      	mov	r0, r4
 8000b6c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000b70:	f000 beb2 	b.w	80018d8 <_fflush_r>
 8000b74:	bd10      	pop	{r4, pc}
 8000b76:	bf00      	nop
 8000b78:	200001b0 	.word	0x200001b0
 8000b7c:	20000218 	.word	0x20000218
 8000b80:	20000280 	.word	0x20000280

08000b84 <global_stdio_init.part.0>:
 8000b84:	b510      	push	{r4, lr}
 8000b86:	4b0b      	ldr	r3, [pc, #44]	@ (8000bb4 <global_stdio_init.part.0+0x30>)
 8000b88:	4c0b      	ldr	r4, [pc, #44]	@ (8000bb8 <global_stdio_init.part.0+0x34>)
 8000b8a:	4a0c      	ldr	r2, [pc, #48]	@ (8000bbc <global_stdio_init.part.0+0x38>)
 8000b8c:	601a      	str	r2, [r3, #0]
 8000b8e:	4620      	mov	r0, r4
 8000b90:	2200      	movs	r2, #0
 8000b92:	2104      	movs	r1, #4
 8000b94:	f7ff ff94 	bl	8000ac0 <std>
 8000b98:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8000b9c:	2201      	movs	r2, #1
 8000b9e:	2109      	movs	r1, #9
 8000ba0:	f7ff ff8e 	bl	8000ac0 <std>
 8000ba4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8000ba8:	2202      	movs	r2, #2
 8000baa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000bae:	2112      	movs	r1, #18
 8000bb0:	f7ff bf86 	b.w	8000ac0 <std>
 8000bb4:	200002e8 	.word	0x200002e8
 8000bb8:	200001b0 	.word	0x200001b0
 8000bbc:	08000b2d 	.word	0x08000b2d

08000bc0 <__sfp_lock_acquire>:
 8000bc0:	4801      	ldr	r0, [pc, #4]	@ (8000bc8 <__sfp_lock_acquire+0x8>)
 8000bc2:	f000 ba14 	b.w	8000fee <__retarget_lock_acquire_recursive>
 8000bc6:	bf00      	nop
 8000bc8:	200002f1 	.word	0x200002f1

08000bcc <__sfp_lock_release>:
 8000bcc:	4801      	ldr	r0, [pc, #4]	@ (8000bd4 <__sfp_lock_release+0x8>)
 8000bce:	f000 ba0f 	b.w	8000ff0 <__retarget_lock_release_recursive>
 8000bd2:	bf00      	nop
 8000bd4:	200002f1 	.word	0x200002f1

08000bd8 <__sinit>:
 8000bd8:	b510      	push	{r4, lr}
 8000bda:	4604      	mov	r4, r0
 8000bdc:	f7ff fff0 	bl	8000bc0 <__sfp_lock_acquire>
 8000be0:	6a23      	ldr	r3, [r4, #32]
 8000be2:	b11b      	cbz	r3, 8000bec <__sinit+0x14>
 8000be4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000be8:	f7ff bff0 	b.w	8000bcc <__sfp_lock_release>
 8000bec:	4b04      	ldr	r3, [pc, #16]	@ (8000c00 <__sinit+0x28>)
 8000bee:	6223      	str	r3, [r4, #32]
 8000bf0:	4b04      	ldr	r3, [pc, #16]	@ (8000c04 <__sinit+0x2c>)
 8000bf2:	681b      	ldr	r3, [r3, #0]
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	d1f5      	bne.n	8000be4 <__sinit+0xc>
 8000bf8:	f7ff ffc4 	bl	8000b84 <global_stdio_init.part.0>
 8000bfc:	e7f2      	b.n	8000be4 <__sinit+0xc>
 8000bfe:	bf00      	nop
 8000c00:	08000b45 	.word	0x08000b45
 8000c04:	200002e8 	.word	0x200002e8

08000c08 <_fwalk_sglue>:
 8000c08:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000c0c:	4607      	mov	r7, r0
 8000c0e:	4688      	mov	r8, r1
 8000c10:	4614      	mov	r4, r2
 8000c12:	2600      	movs	r6, #0
 8000c14:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8000c18:	f1b9 0901 	subs.w	r9, r9, #1
 8000c1c:	d505      	bpl.n	8000c2a <_fwalk_sglue+0x22>
 8000c1e:	6824      	ldr	r4, [r4, #0]
 8000c20:	2c00      	cmp	r4, #0
 8000c22:	d1f7      	bne.n	8000c14 <_fwalk_sglue+0xc>
 8000c24:	4630      	mov	r0, r6
 8000c26:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000c2a:	89ab      	ldrh	r3, [r5, #12]
 8000c2c:	2b01      	cmp	r3, #1
 8000c2e:	d907      	bls.n	8000c40 <_fwalk_sglue+0x38>
 8000c30:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8000c34:	3301      	adds	r3, #1
 8000c36:	d003      	beq.n	8000c40 <_fwalk_sglue+0x38>
 8000c38:	4629      	mov	r1, r5
 8000c3a:	4638      	mov	r0, r7
 8000c3c:	47c0      	blx	r8
 8000c3e:	4306      	orrs	r6, r0
 8000c40:	3568      	adds	r5, #104	@ 0x68
 8000c42:	e7e9      	b.n	8000c18 <_fwalk_sglue+0x10>

08000c44 <iprintf>:
 8000c44:	b40f      	push	{r0, r1, r2, r3}
 8000c46:	b507      	push	{r0, r1, r2, lr}
 8000c48:	4906      	ldr	r1, [pc, #24]	@ (8000c64 <iprintf+0x20>)
 8000c4a:	ab04      	add	r3, sp, #16
 8000c4c:	6808      	ldr	r0, [r1, #0]
 8000c4e:	f853 2b04 	ldr.w	r2, [r3], #4
 8000c52:	6881      	ldr	r1, [r0, #8]
 8000c54:	9301      	str	r3, [sp, #4]
 8000c56:	f000 fb15 	bl	8001284 <_vfiprintf_r>
 8000c5a:	b003      	add	sp, #12
 8000c5c:	f85d eb04 	ldr.w	lr, [sp], #4
 8000c60:	b004      	add	sp, #16
 8000c62:	4770      	bx	lr
 8000c64:	20000064 	.word	0x20000064

08000c68 <_puts_r>:
 8000c68:	6a03      	ldr	r3, [r0, #32]
 8000c6a:	b570      	push	{r4, r5, r6, lr}
 8000c6c:	6884      	ldr	r4, [r0, #8]
 8000c6e:	4605      	mov	r5, r0
 8000c70:	460e      	mov	r6, r1
 8000c72:	b90b      	cbnz	r3, 8000c78 <_puts_r+0x10>
 8000c74:	f7ff ffb0 	bl	8000bd8 <__sinit>
 8000c78:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8000c7a:	07db      	lsls	r3, r3, #31
 8000c7c:	d405      	bmi.n	8000c8a <_puts_r+0x22>
 8000c7e:	89a3      	ldrh	r3, [r4, #12]
 8000c80:	0598      	lsls	r0, r3, #22
 8000c82:	d402      	bmi.n	8000c8a <_puts_r+0x22>
 8000c84:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8000c86:	f000 f9b2 	bl	8000fee <__retarget_lock_acquire_recursive>
 8000c8a:	89a3      	ldrh	r3, [r4, #12]
 8000c8c:	0719      	lsls	r1, r3, #28
 8000c8e:	d502      	bpl.n	8000c96 <_puts_r+0x2e>
 8000c90:	6923      	ldr	r3, [r4, #16]
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	d135      	bne.n	8000d02 <_puts_r+0x9a>
 8000c96:	4621      	mov	r1, r4
 8000c98:	4628      	mov	r0, r5
 8000c9a:	f000 f8c5 	bl	8000e28 <__swsetup_r>
 8000c9e:	b380      	cbz	r0, 8000d02 <_puts_r+0x9a>
 8000ca0:	f04f 35ff 	mov.w	r5, #4294967295
 8000ca4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8000ca6:	07da      	lsls	r2, r3, #31
 8000ca8:	d405      	bmi.n	8000cb6 <_puts_r+0x4e>
 8000caa:	89a3      	ldrh	r3, [r4, #12]
 8000cac:	059b      	lsls	r3, r3, #22
 8000cae:	d402      	bmi.n	8000cb6 <_puts_r+0x4e>
 8000cb0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8000cb2:	f000 f99d 	bl	8000ff0 <__retarget_lock_release_recursive>
 8000cb6:	4628      	mov	r0, r5
 8000cb8:	bd70      	pop	{r4, r5, r6, pc}
 8000cba:	2b00      	cmp	r3, #0
 8000cbc:	da04      	bge.n	8000cc8 <_puts_r+0x60>
 8000cbe:	69a2      	ldr	r2, [r4, #24]
 8000cc0:	429a      	cmp	r2, r3
 8000cc2:	dc17      	bgt.n	8000cf4 <_puts_r+0x8c>
 8000cc4:	290a      	cmp	r1, #10
 8000cc6:	d015      	beq.n	8000cf4 <_puts_r+0x8c>
 8000cc8:	6823      	ldr	r3, [r4, #0]
 8000cca:	1c5a      	adds	r2, r3, #1
 8000ccc:	6022      	str	r2, [r4, #0]
 8000cce:	7019      	strb	r1, [r3, #0]
 8000cd0:	68a3      	ldr	r3, [r4, #8]
 8000cd2:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8000cd6:	3b01      	subs	r3, #1
 8000cd8:	60a3      	str	r3, [r4, #8]
 8000cda:	2900      	cmp	r1, #0
 8000cdc:	d1ed      	bne.n	8000cba <_puts_r+0x52>
 8000cde:	2b00      	cmp	r3, #0
 8000ce0:	da11      	bge.n	8000d06 <_puts_r+0x9e>
 8000ce2:	4622      	mov	r2, r4
 8000ce4:	210a      	movs	r1, #10
 8000ce6:	4628      	mov	r0, r5
 8000ce8:	f000 f85f 	bl	8000daa <__swbuf_r>
 8000cec:	3001      	adds	r0, #1
 8000cee:	d0d7      	beq.n	8000ca0 <_puts_r+0x38>
 8000cf0:	250a      	movs	r5, #10
 8000cf2:	e7d7      	b.n	8000ca4 <_puts_r+0x3c>
 8000cf4:	4622      	mov	r2, r4
 8000cf6:	4628      	mov	r0, r5
 8000cf8:	f000 f857 	bl	8000daa <__swbuf_r>
 8000cfc:	3001      	adds	r0, #1
 8000cfe:	d1e7      	bne.n	8000cd0 <_puts_r+0x68>
 8000d00:	e7ce      	b.n	8000ca0 <_puts_r+0x38>
 8000d02:	3e01      	subs	r6, #1
 8000d04:	e7e4      	b.n	8000cd0 <_puts_r+0x68>
 8000d06:	6823      	ldr	r3, [r4, #0]
 8000d08:	1c5a      	adds	r2, r3, #1
 8000d0a:	6022      	str	r2, [r4, #0]
 8000d0c:	220a      	movs	r2, #10
 8000d0e:	701a      	strb	r2, [r3, #0]
 8000d10:	e7ee      	b.n	8000cf0 <_puts_r+0x88>
	...

08000d14 <puts>:
 8000d14:	4b02      	ldr	r3, [pc, #8]	@ (8000d20 <puts+0xc>)
 8000d16:	4601      	mov	r1, r0
 8000d18:	6818      	ldr	r0, [r3, #0]
 8000d1a:	f7ff bfa5 	b.w	8000c68 <_puts_r>
 8000d1e:	bf00      	nop
 8000d20:	20000064 	.word	0x20000064

08000d24 <__sread>:
 8000d24:	b510      	push	{r4, lr}
 8000d26:	460c      	mov	r4, r1
 8000d28:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000d2c:	f000 f910 	bl	8000f50 <_read_r>
 8000d30:	2800      	cmp	r0, #0
 8000d32:	bfab      	itete	ge
 8000d34:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8000d36:	89a3      	ldrhlt	r3, [r4, #12]
 8000d38:	181b      	addge	r3, r3, r0
 8000d3a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8000d3e:	bfac      	ite	ge
 8000d40:	6563      	strge	r3, [r4, #84]	@ 0x54
 8000d42:	81a3      	strhlt	r3, [r4, #12]
 8000d44:	bd10      	pop	{r4, pc}

08000d46 <__swrite>:
 8000d46:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000d4a:	461f      	mov	r7, r3
 8000d4c:	898b      	ldrh	r3, [r1, #12]
 8000d4e:	05db      	lsls	r3, r3, #23
 8000d50:	4605      	mov	r5, r0
 8000d52:	460c      	mov	r4, r1
 8000d54:	4616      	mov	r6, r2
 8000d56:	d505      	bpl.n	8000d64 <__swrite+0x1e>
 8000d58:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000d5c:	2302      	movs	r3, #2
 8000d5e:	2200      	movs	r2, #0
 8000d60:	f000 f8e4 	bl	8000f2c <_lseek_r>
 8000d64:	89a3      	ldrh	r3, [r4, #12]
 8000d66:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8000d6a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8000d6e:	81a3      	strh	r3, [r4, #12]
 8000d70:	4632      	mov	r2, r6
 8000d72:	463b      	mov	r3, r7
 8000d74:	4628      	mov	r0, r5
 8000d76:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8000d7a:	f000 b8fb 	b.w	8000f74 <_write_r>

08000d7e <__sseek>:
 8000d7e:	b510      	push	{r4, lr}
 8000d80:	460c      	mov	r4, r1
 8000d82:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000d86:	f000 f8d1 	bl	8000f2c <_lseek_r>
 8000d8a:	1c43      	adds	r3, r0, #1
 8000d8c:	89a3      	ldrh	r3, [r4, #12]
 8000d8e:	bf15      	itete	ne
 8000d90:	6560      	strne	r0, [r4, #84]	@ 0x54
 8000d92:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8000d96:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8000d9a:	81a3      	strheq	r3, [r4, #12]
 8000d9c:	bf18      	it	ne
 8000d9e:	81a3      	strhne	r3, [r4, #12]
 8000da0:	bd10      	pop	{r4, pc}

08000da2 <__sclose>:
 8000da2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000da6:	f000 b8b1 	b.w	8000f0c <_close_r>

08000daa <__swbuf_r>:
 8000daa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000dac:	460e      	mov	r6, r1
 8000dae:	4614      	mov	r4, r2
 8000db0:	4605      	mov	r5, r0
 8000db2:	b118      	cbz	r0, 8000dbc <__swbuf_r+0x12>
 8000db4:	6a03      	ldr	r3, [r0, #32]
 8000db6:	b90b      	cbnz	r3, 8000dbc <__swbuf_r+0x12>
 8000db8:	f7ff ff0e 	bl	8000bd8 <__sinit>
 8000dbc:	69a3      	ldr	r3, [r4, #24]
 8000dbe:	60a3      	str	r3, [r4, #8]
 8000dc0:	89a3      	ldrh	r3, [r4, #12]
 8000dc2:	071a      	lsls	r2, r3, #28
 8000dc4:	d501      	bpl.n	8000dca <__swbuf_r+0x20>
 8000dc6:	6923      	ldr	r3, [r4, #16]
 8000dc8:	b943      	cbnz	r3, 8000ddc <__swbuf_r+0x32>
 8000dca:	4621      	mov	r1, r4
 8000dcc:	4628      	mov	r0, r5
 8000dce:	f000 f82b 	bl	8000e28 <__swsetup_r>
 8000dd2:	b118      	cbz	r0, 8000ddc <__swbuf_r+0x32>
 8000dd4:	f04f 37ff 	mov.w	r7, #4294967295
 8000dd8:	4638      	mov	r0, r7
 8000dda:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000ddc:	6823      	ldr	r3, [r4, #0]
 8000dde:	6922      	ldr	r2, [r4, #16]
 8000de0:	1a98      	subs	r0, r3, r2
 8000de2:	6963      	ldr	r3, [r4, #20]
 8000de4:	b2f6      	uxtb	r6, r6
 8000de6:	4283      	cmp	r3, r0
 8000de8:	4637      	mov	r7, r6
 8000dea:	dc05      	bgt.n	8000df8 <__swbuf_r+0x4e>
 8000dec:	4621      	mov	r1, r4
 8000dee:	4628      	mov	r0, r5
 8000df0:	f000 fd72 	bl	80018d8 <_fflush_r>
 8000df4:	2800      	cmp	r0, #0
 8000df6:	d1ed      	bne.n	8000dd4 <__swbuf_r+0x2a>
 8000df8:	68a3      	ldr	r3, [r4, #8]
 8000dfa:	3b01      	subs	r3, #1
 8000dfc:	60a3      	str	r3, [r4, #8]
 8000dfe:	6823      	ldr	r3, [r4, #0]
 8000e00:	1c5a      	adds	r2, r3, #1
 8000e02:	6022      	str	r2, [r4, #0]
 8000e04:	701e      	strb	r6, [r3, #0]
 8000e06:	6962      	ldr	r2, [r4, #20]
 8000e08:	1c43      	adds	r3, r0, #1
 8000e0a:	429a      	cmp	r2, r3
 8000e0c:	d004      	beq.n	8000e18 <__swbuf_r+0x6e>
 8000e0e:	89a3      	ldrh	r3, [r4, #12]
 8000e10:	07db      	lsls	r3, r3, #31
 8000e12:	d5e1      	bpl.n	8000dd8 <__swbuf_r+0x2e>
 8000e14:	2e0a      	cmp	r6, #10
 8000e16:	d1df      	bne.n	8000dd8 <__swbuf_r+0x2e>
 8000e18:	4621      	mov	r1, r4
 8000e1a:	4628      	mov	r0, r5
 8000e1c:	f000 fd5c 	bl	80018d8 <_fflush_r>
 8000e20:	2800      	cmp	r0, #0
 8000e22:	d0d9      	beq.n	8000dd8 <__swbuf_r+0x2e>
 8000e24:	e7d6      	b.n	8000dd4 <__swbuf_r+0x2a>
	...

08000e28 <__swsetup_r>:
 8000e28:	b538      	push	{r3, r4, r5, lr}
 8000e2a:	4b29      	ldr	r3, [pc, #164]	@ (8000ed0 <__swsetup_r+0xa8>)
 8000e2c:	4605      	mov	r5, r0
 8000e2e:	6818      	ldr	r0, [r3, #0]
 8000e30:	460c      	mov	r4, r1
 8000e32:	b118      	cbz	r0, 8000e3c <__swsetup_r+0x14>
 8000e34:	6a03      	ldr	r3, [r0, #32]
 8000e36:	b90b      	cbnz	r3, 8000e3c <__swsetup_r+0x14>
 8000e38:	f7ff fece 	bl	8000bd8 <__sinit>
 8000e3c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000e40:	0719      	lsls	r1, r3, #28
 8000e42:	d422      	bmi.n	8000e8a <__swsetup_r+0x62>
 8000e44:	06da      	lsls	r2, r3, #27
 8000e46:	d407      	bmi.n	8000e58 <__swsetup_r+0x30>
 8000e48:	2209      	movs	r2, #9
 8000e4a:	602a      	str	r2, [r5, #0]
 8000e4c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000e50:	81a3      	strh	r3, [r4, #12]
 8000e52:	f04f 30ff 	mov.w	r0, #4294967295
 8000e56:	e033      	b.n	8000ec0 <__swsetup_r+0x98>
 8000e58:	0758      	lsls	r0, r3, #29
 8000e5a:	d512      	bpl.n	8000e82 <__swsetup_r+0x5a>
 8000e5c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8000e5e:	b141      	cbz	r1, 8000e72 <__swsetup_r+0x4a>
 8000e60:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8000e64:	4299      	cmp	r1, r3
 8000e66:	d002      	beq.n	8000e6e <__swsetup_r+0x46>
 8000e68:	4628      	mov	r0, r5
 8000e6a:	f000 f8e1 	bl	8001030 <_free_r>
 8000e6e:	2300      	movs	r3, #0
 8000e70:	6363      	str	r3, [r4, #52]	@ 0x34
 8000e72:	89a3      	ldrh	r3, [r4, #12]
 8000e74:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8000e78:	81a3      	strh	r3, [r4, #12]
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	6063      	str	r3, [r4, #4]
 8000e7e:	6923      	ldr	r3, [r4, #16]
 8000e80:	6023      	str	r3, [r4, #0]
 8000e82:	89a3      	ldrh	r3, [r4, #12]
 8000e84:	f043 0308 	orr.w	r3, r3, #8
 8000e88:	81a3      	strh	r3, [r4, #12]
 8000e8a:	6923      	ldr	r3, [r4, #16]
 8000e8c:	b94b      	cbnz	r3, 8000ea2 <__swsetup_r+0x7a>
 8000e8e:	89a3      	ldrh	r3, [r4, #12]
 8000e90:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8000e94:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8000e98:	d003      	beq.n	8000ea2 <__swsetup_r+0x7a>
 8000e9a:	4621      	mov	r1, r4
 8000e9c:	4628      	mov	r0, r5
 8000e9e:	f000 fd7b 	bl	8001998 <__smakebuf_r>
 8000ea2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000ea6:	f013 0201 	ands.w	r2, r3, #1
 8000eaa:	d00a      	beq.n	8000ec2 <__swsetup_r+0x9a>
 8000eac:	2200      	movs	r2, #0
 8000eae:	60a2      	str	r2, [r4, #8]
 8000eb0:	6962      	ldr	r2, [r4, #20]
 8000eb2:	4252      	negs	r2, r2
 8000eb4:	61a2      	str	r2, [r4, #24]
 8000eb6:	6922      	ldr	r2, [r4, #16]
 8000eb8:	b942      	cbnz	r2, 8000ecc <__swsetup_r+0xa4>
 8000eba:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8000ebe:	d1c5      	bne.n	8000e4c <__swsetup_r+0x24>
 8000ec0:	bd38      	pop	{r3, r4, r5, pc}
 8000ec2:	0799      	lsls	r1, r3, #30
 8000ec4:	bf58      	it	pl
 8000ec6:	6962      	ldrpl	r2, [r4, #20]
 8000ec8:	60a2      	str	r2, [r4, #8]
 8000eca:	e7f4      	b.n	8000eb6 <__swsetup_r+0x8e>
 8000ecc:	2000      	movs	r0, #0
 8000ece:	e7f7      	b.n	8000ec0 <__swsetup_r+0x98>
 8000ed0:	20000064 	.word	0x20000064

08000ed4 <memset>:
 8000ed4:	4402      	add	r2, r0
 8000ed6:	4603      	mov	r3, r0
 8000ed8:	4293      	cmp	r3, r2
 8000eda:	d100      	bne.n	8000ede <memset+0xa>
 8000edc:	4770      	bx	lr
 8000ede:	f803 1b01 	strb.w	r1, [r3], #1
 8000ee2:	e7f9      	b.n	8000ed8 <memset+0x4>

08000ee4 <strncpy>:
 8000ee4:	b510      	push	{r4, lr}
 8000ee6:	3901      	subs	r1, #1
 8000ee8:	4603      	mov	r3, r0
 8000eea:	b132      	cbz	r2, 8000efa <strncpy+0x16>
 8000eec:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8000ef0:	f803 4b01 	strb.w	r4, [r3], #1
 8000ef4:	3a01      	subs	r2, #1
 8000ef6:	2c00      	cmp	r4, #0
 8000ef8:	d1f7      	bne.n	8000eea <strncpy+0x6>
 8000efa:	441a      	add	r2, r3
 8000efc:	2100      	movs	r1, #0
 8000efe:	4293      	cmp	r3, r2
 8000f00:	d100      	bne.n	8000f04 <strncpy+0x20>
 8000f02:	bd10      	pop	{r4, pc}
 8000f04:	f803 1b01 	strb.w	r1, [r3], #1
 8000f08:	e7f9      	b.n	8000efe <strncpy+0x1a>
	...

08000f0c <_close_r>:
 8000f0c:	b538      	push	{r3, r4, r5, lr}
 8000f0e:	4d06      	ldr	r5, [pc, #24]	@ (8000f28 <_close_r+0x1c>)
 8000f10:	2300      	movs	r3, #0
 8000f12:	4604      	mov	r4, r0
 8000f14:	4608      	mov	r0, r1
 8000f16:	602b      	str	r3, [r5, #0]
 8000f18:	f7ff fd00 	bl	800091c <_close>
 8000f1c:	1c43      	adds	r3, r0, #1
 8000f1e:	d102      	bne.n	8000f26 <_close_r+0x1a>
 8000f20:	682b      	ldr	r3, [r5, #0]
 8000f22:	b103      	cbz	r3, 8000f26 <_close_r+0x1a>
 8000f24:	6023      	str	r3, [r4, #0]
 8000f26:	bd38      	pop	{r3, r4, r5, pc}
 8000f28:	200002ec 	.word	0x200002ec

08000f2c <_lseek_r>:
 8000f2c:	b538      	push	{r3, r4, r5, lr}
 8000f2e:	4d07      	ldr	r5, [pc, #28]	@ (8000f4c <_lseek_r+0x20>)
 8000f30:	4604      	mov	r4, r0
 8000f32:	4608      	mov	r0, r1
 8000f34:	4611      	mov	r1, r2
 8000f36:	2200      	movs	r2, #0
 8000f38:	602a      	str	r2, [r5, #0]
 8000f3a:	461a      	mov	r2, r3
 8000f3c:	f7ff fd15 	bl	800096a <_lseek>
 8000f40:	1c43      	adds	r3, r0, #1
 8000f42:	d102      	bne.n	8000f4a <_lseek_r+0x1e>
 8000f44:	682b      	ldr	r3, [r5, #0]
 8000f46:	b103      	cbz	r3, 8000f4a <_lseek_r+0x1e>
 8000f48:	6023      	str	r3, [r4, #0]
 8000f4a:	bd38      	pop	{r3, r4, r5, pc}
 8000f4c:	200002ec 	.word	0x200002ec

08000f50 <_read_r>:
 8000f50:	b538      	push	{r3, r4, r5, lr}
 8000f52:	4d07      	ldr	r5, [pc, #28]	@ (8000f70 <_read_r+0x20>)
 8000f54:	4604      	mov	r4, r0
 8000f56:	4608      	mov	r0, r1
 8000f58:	4611      	mov	r1, r2
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	602a      	str	r2, [r5, #0]
 8000f5e:	461a      	mov	r2, r3
 8000f60:	f7ff fca3 	bl	80008aa <_read>
 8000f64:	1c43      	adds	r3, r0, #1
 8000f66:	d102      	bne.n	8000f6e <_read_r+0x1e>
 8000f68:	682b      	ldr	r3, [r5, #0]
 8000f6a:	b103      	cbz	r3, 8000f6e <_read_r+0x1e>
 8000f6c:	6023      	str	r3, [r4, #0]
 8000f6e:	bd38      	pop	{r3, r4, r5, pc}
 8000f70:	200002ec 	.word	0x200002ec

08000f74 <_write_r>:
 8000f74:	b538      	push	{r3, r4, r5, lr}
 8000f76:	4d07      	ldr	r5, [pc, #28]	@ (8000f94 <_write_r+0x20>)
 8000f78:	4604      	mov	r4, r0
 8000f7a:	4608      	mov	r0, r1
 8000f7c:	4611      	mov	r1, r2
 8000f7e:	2200      	movs	r2, #0
 8000f80:	602a      	str	r2, [r5, #0]
 8000f82:	461a      	mov	r2, r3
 8000f84:	f7ff fcae 	bl	80008e4 <_write>
 8000f88:	1c43      	adds	r3, r0, #1
 8000f8a:	d102      	bne.n	8000f92 <_write_r+0x1e>
 8000f8c:	682b      	ldr	r3, [r5, #0]
 8000f8e:	b103      	cbz	r3, 8000f92 <_write_r+0x1e>
 8000f90:	6023      	str	r3, [r4, #0]
 8000f92:	bd38      	pop	{r3, r4, r5, pc}
 8000f94:	200002ec 	.word	0x200002ec

08000f98 <__errno>:
 8000f98:	4b01      	ldr	r3, [pc, #4]	@ (8000fa0 <__errno+0x8>)
 8000f9a:	6818      	ldr	r0, [r3, #0]
 8000f9c:	4770      	bx	lr
 8000f9e:	bf00      	nop
 8000fa0:	20000064 	.word	0x20000064

08000fa4 <__libc_init_array>:
 8000fa4:	b570      	push	{r4, r5, r6, lr}
 8000fa6:	4d0d      	ldr	r5, [pc, #52]	@ (8000fdc <__libc_init_array+0x38>)
 8000fa8:	4c0d      	ldr	r4, [pc, #52]	@ (8000fe0 <__libc_init_array+0x3c>)
 8000faa:	1b64      	subs	r4, r4, r5
 8000fac:	10a4      	asrs	r4, r4, #2
 8000fae:	2600      	movs	r6, #0
 8000fb0:	42a6      	cmp	r6, r4
 8000fb2:	d109      	bne.n	8000fc8 <__libc_init_array+0x24>
 8000fb4:	4d0b      	ldr	r5, [pc, #44]	@ (8000fe4 <__libc_init_array+0x40>)
 8000fb6:	4c0c      	ldr	r4, [pc, #48]	@ (8000fe8 <__libc_init_array+0x44>)
 8000fb8:	f000 fda8 	bl	8001b0c <_init>
 8000fbc:	1b64      	subs	r4, r4, r5
 8000fbe:	10a4      	asrs	r4, r4, #2
 8000fc0:	2600      	movs	r6, #0
 8000fc2:	42a6      	cmp	r6, r4
 8000fc4:	d105      	bne.n	8000fd2 <__libc_init_array+0x2e>
 8000fc6:	bd70      	pop	{r4, r5, r6, pc}
 8000fc8:	f855 3b04 	ldr.w	r3, [r5], #4
 8000fcc:	4798      	blx	r3
 8000fce:	3601      	adds	r6, #1
 8000fd0:	e7ee      	b.n	8000fb0 <__libc_init_array+0xc>
 8000fd2:	f855 3b04 	ldr.w	r3, [r5], #4
 8000fd6:	4798      	blx	r3
 8000fd8:	3601      	adds	r6, #1
 8000fda:	e7f2      	b.n	8000fc2 <__libc_init_array+0x1e>
 8000fdc:	0800207c 	.word	0x0800207c
 8000fe0:	0800207c 	.word	0x0800207c
 8000fe4:	0800207c 	.word	0x0800207c
 8000fe8:	08002080 	.word	0x08002080

08000fec <__retarget_lock_init_recursive>:
 8000fec:	4770      	bx	lr

08000fee <__retarget_lock_acquire_recursive>:
 8000fee:	4770      	bx	lr

08000ff0 <__retarget_lock_release_recursive>:
 8000ff0:	4770      	bx	lr
	...

08000ff4 <__assert_func>:
 8000ff4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8000ff6:	4614      	mov	r4, r2
 8000ff8:	461a      	mov	r2, r3
 8000ffa:	4b09      	ldr	r3, [pc, #36]	@ (8001020 <__assert_func+0x2c>)
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	4605      	mov	r5, r0
 8001000:	68d8      	ldr	r0, [r3, #12]
 8001002:	b954      	cbnz	r4, 800101a <__assert_func+0x26>
 8001004:	4b07      	ldr	r3, [pc, #28]	@ (8001024 <__assert_func+0x30>)
 8001006:	461c      	mov	r4, r3
 8001008:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800100c:	9100      	str	r1, [sp, #0]
 800100e:	462b      	mov	r3, r5
 8001010:	4905      	ldr	r1, [pc, #20]	@ (8001028 <__assert_func+0x34>)
 8001012:	f000 fc89 	bl	8001928 <fiprintf>
 8001016:	f000 fd2d 	bl	8001a74 <abort>
 800101a:	4b04      	ldr	r3, [pc, #16]	@ (800102c <__assert_func+0x38>)
 800101c:	e7f4      	b.n	8001008 <__assert_func+0x14>
 800101e:	bf00      	nop
 8001020:	20000064 	.word	0x20000064
 8001024:	08002040 	.word	0x08002040
 8001028:	08002012 	.word	0x08002012
 800102c:	08002005 	.word	0x08002005

08001030 <_free_r>:
 8001030:	b538      	push	{r3, r4, r5, lr}
 8001032:	4605      	mov	r5, r0
 8001034:	2900      	cmp	r1, #0
 8001036:	d041      	beq.n	80010bc <_free_r+0x8c>
 8001038:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800103c:	1f0c      	subs	r4, r1, #4
 800103e:	2b00      	cmp	r3, #0
 8001040:	bfb8      	it	lt
 8001042:	18e4      	addlt	r4, r4, r3
 8001044:	f000 f8e8 	bl	8001218 <__malloc_lock>
 8001048:	4a1d      	ldr	r2, [pc, #116]	@ (80010c0 <_free_r+0x90>)
 800104a:	6813      	ldr	r3, [r2, #0]
 800104c:	b933      	cbnz	r3, 800105c <_free_r+0x2c>
 800104e:	6063      	str	r3, [r4, #4]
 8001050:	6014      	str	r4, [r2, #0]
 8001052:	4628      	mov	r0, r5
 8001054:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001058:	f000 b8e4 	b.w	8001224 <__malloc_unlock>
 800105c:	42a3      	cmp	r3, r4
 800105e:	d908      	bls.n	8001072 <_free_r+0x42>
 8001060:	6820      	ldr	r0, [r4, #0]
 8001062:	1821      	adds	r1, r4, r0
 8001064:	428b      	cmp	r3, r1
 8001066:	bf01      	itttt	eq
 8001068:	6819      	ldreq	r1, [r3, #0]
 800106a:	685b      	ldreq	r3, [r3, #4]
 800106c:	1809      	addeq	r1, r1, r0
 800106e:	6021      	streq	r1, [r4, #0]
 8001070:	e7ed      	b.n	800104e <_free_r+0x1e>
 8001072:	461a      	mov	r2, r3
 8001074:	685b      	ldr	r3, [r3, #4]
 8001076:	b10b      	cbz	r3, 800107c <_free_r+0x4c>
 8001078:	42a3      	cmp	r3, r4
 800107a:	d9fa      	bls.n	8001072 <_free_r+0x42>
 800107c:	6811      	ldr	r1, [r2, #0]
 800107e:	1850      	adds	r0, r2, r1
 8001080:	42a0      	cmp	r0, r4
 8001082:	d10b      	bne.n	800109c <_free_r+0x6c>
 8001084:	6820      	ldr	r0, [r4, #0]
 8001086:	4401      	add	r1, r0
 8001088:	1850      	adds	r0, r2, r1
 800108a:	4283      	cmp	r3, r0
 800108c:	6011      	str	r1, [r2, #0]
 800108e:	d1e0      	bne.n	8001052 <_free_r+0x22>
 8001090:	6818      	ldr	r0, [r3, #0]
 8001092:	685b      	ldr	r3, [r3, #4]
 8001094:	6053      	str	r3, [r2, #4]
 8001096:	4408      	add	r0, r1
 8001098:	6010      	str	r0, [r2, #0]
 800109a:	e7da      	b.n	8001052 <_free_r+0x22>
 800109c:	d902      	bls.n	80010a4 <_free_r+0x74>
 800109e:	230c      	movs	r3, #12
 80010a0:	602b      	str	r3, [r5, #0]
 80010a2:	e7d6      	b.n	8001052 <_free_r+0x22>
 80010a4:	6820      	ldr	r0, [r4, #0]
 80010a6:	1821      	adds	r1, r4, r0
 80010a8:	428b      	cmp	r3, r1
 80010aa:	bf04      	itt	eq
 80010ac:	6819      	ldreq	r1, [r3, #0]
 80010ae:	685b      	ldreq	r3, [r3, #4]
 80010b0:	6063      	str	r3, [r4, #4]
 80010b2:	bf04      	itt	eq
 80010b4:	1809      	addeq	r1, r1, r0
 80010b6:	6021      	streq	r1, [r4, #0]
 80010b8:	6054      	str	r4, [r2, #4]
 80010ba:	e7ca      	b.n	8001052 <_free_r+0x22>
 80010bc:	bd38      	pop	{r3, r4, r5, pc}
 80010be:	bf00      	nop
 80010c0:	200002f8 	.word	0x200002f8

080010c4 <malloc>:
 80010c4:	4b02      	ldr	r3, [pc, #8]	@ (80010d0 <malloc+0xc>)
 80010c6:	4601      	mov	r1, r0
 80010c8:	6818      	ldr	r0, [r3, #0]
 80010ca:	f000 b825 	b.w	8001118 <_malloc_r>
 80010ce:	bf00      	nop
 80010d0:	20000064 	.word	0x20000064

080010d4 <sbrk_aligned>:
 80010d4:	b570      	push	{r4, r5, r6, lr}
 80010d6:	4e0f      	ldr	r6, [pc, #60]	@ (8001114 <sbrk_aligned+0x40>)
 80010d8:	460c      	mov	r4, r1
 80010da:	6831      	ldr	r1, [r6, #0]
 80010dc:	4605      	mov	r5, r0
 80010de:	b911      	cbnz	r1, 80010e6 <sbrk_aligned+0x12>
 80010e0:	f000 fcb8 	bl	8001a54 <_sbrk_r>
 80010e4:	6030      	str	r0, [r6, #0]
 80010e6:	4621      	mov	r1, r4
 80010e8:	4628      	mov	r0, r5
 80010ea:	f000 fcb3 	bl	8001a54 <_sbrk_r>
 80010ee:	1c43      	adds	r3, r0, #1
 80010f0:	d103      	bne.n	80010fa <sbrk_aligned+0x26>
 80010f2:	f04f 34ff 	mov.w	r4, #4294967295
 80010f6:	4620      	mov	r0, r4
 80010f8:	bd70      	pop	{r4, r5, r6, pc}
 80010fa:	1cc4      	adds	r4, r0, #3
 80010fc:	f024 0403 	bic.w	r4, r4, #3
 8001100:	42a0      	cmp	r0, r4
 8001102:	d0f8      	beq.n	80010f6 <sbrk_aligned+0x22>
 8001104:	1a21      	subs	r1, r4, r0
 8001106:	4628      	mov	r0, r5
 8001108:	f000 fca4 	bl	8001a54 <_sbrk_r>
 800110c:	3001      	adds	r0, #1
 800110e:	d1f2      	bne.n	80010f6 <sbrk_aligned+0x22>
 8001110:	e7ef      	b.n	80010f2 <sbrk_aligned+0x1e>
 8001112:	bf00      	nop
 8001114:	200002f4 	.word	0x200002f4

08001118 <_malloc_r>:
 8001118:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800111c:	1ccd      	adds	r5, r1, #3
 800111e:	f025 0503 	bic.w	r5, r5, #3
 8001122:	3508      	adds	r5, #8
 8001124:	2d0c      	cmp	r5, #12
 8001126:	bf38      	it	cc
 8001128:	250c      	movcc	r5, #12
 800112a:	2d00      	cmp	r5, #0
 800112c:	4606      	mov	r6, r0
 800112e:	db01      	blt.n	8001134 <_malloc_r+0x1c>
 8001130:	42a9      	cmp	r1, r5
 8001132:	d904      	bls.n	800113e <_malloc_r+0x26>
 8001134:	230c      	movs	r3, #12
 8001136:	6033      	str	r3, [r6, #0]
 8001138:	2000      	movs	r0, #0
 800113a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800113e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8001214 <_malloc_r+0xfc>
 8001142:	f000 f869 	bl	8001218 <__malloc_lock>
 8001146:	f8d8 3000 	ldr.w	r3, [r8]
 800114a:	461c      	mov	r4, r3
 800114c:	bb44      	cbnz	r4, 80011a0 <_malloc_r+0x88>
 800114e:	4629      	mov	r1, r5
 8001150:	4630      	mov	r0, r6
 8001152:	f7ff ffbf 	bl	80010d4 <sbrk_aligned>
 8001156:	1c43      	adds	r3, r0, #1
 8001158:	4604      	mov	r4, r0
 800115a:	d158      	bne.n	800120e <_malloc_r+0xf6>
 800115c:	f8d8 4000 	ldr.w	r4, [r8]
 8001160:	4627      	mov	r7, r4
 8001162:	2f00      	cmp	r7, #0
 8001164:	d143      	bne.n	80011ee <_malloc_r+0xd6>
 8001166:	2c00      	cmp	r4, #0
 8001168:	d04b      	beq.n	8001202 <_malloc_r+0xea>
 800116a:	6823      	ldr	r3, [r4, #0]
 800116c:	4639      	mov	r1, r7
 800116e:	4630      	mov	r0, r6
 8001170:	eb04 0903 	add.w	r9, r4, r3
 8001174:	f000 fc6e 	bl	8001a54 <_sbrk_r>
 8001178:	4581      	cmp	r9, r0
 800117a:	d142      	bne.n	8001202 <_malloc_r+0xea>
 800117c:	6821      	ldr	r1, [r4, #0]
 800117e:	1a6d      	subs	r5, r5, r1
 8001180:	4629      	mov	r1, r5
 8001182:	4630      	mov	r0, r6
 8001184:	f7ff ffa6 	bl	80010d4 <sbrk_aligned>
 8001188:	3001      	adds	r0, #1
 800118a:	d03a      	beq.n	8001202 <_malloc_r+0xea>
 800118c:	6823      	ldr	r3, [r4, #0]
 800118e:	442b      	add	r3, r5
 8001190:	6023      	str	r3, [r4, #0]
 8001192:	f8d8 3000 	ldr.w	r3, [r8]
 8001196:	685a      	ldr	r2, [r3, #4]
 8001198:	bb62      	cbnz	r2, 80011f4 <_malloc_r+0xdc>
 800119a:	f8c8 7000 	str.w	r7, [r8]
 800119e:	e00f      	b.n	80011c0 <_malloc_r+0xa8>
 80011a0:	6822      	ldr	r2, [r4, #0]
 80011a2:	1b52      	subs	r2, r2, r5
 80011a4:	d420      	bmi.n	80011e8 <_malloc_r+0xd0>
 80011a6:	2a0b      	cmp	r2, #11
 80011a8:	d917      	bls.n	80011da <_malloc_r+0xc2>
 80011aa:	1961      	adds	r1, r4, r5
 80011ac:	42a3      	cmp	r3, r4
 80011ae:	6025      	str	r5, [r4, #0]
 80011b0:	bf18      	it	ne
 80011b2:	6059      	strne	r1, [r3, #4]
 80011b4:	6863      	ldr	r3, [r4, #4]
 80011b6:	bf08      	it	eq
 80011b8:	f8c8 1000 	streq.w	r1, [r8]
 80011bc:	5162      	str	r2, [r4, r5]
 80011be:	604b      	str	r3, [r1, #4]
 80011c0:	4630      	mov	r0, r6
 80011c2:	f000 f82f 	bl	8001224 <__malloc_unlock>
 80011c6:	f104 000b 	add.w	r0, r4, #11
 80011ca:	1d23      	adds	r3, r4, #4
 80011cc:	f020 0007 	bic.w	r0, r0, #7
 80011d0:	1ac2      	subs	r2, r0, r3
 80011d2:	bf1c      	itt	ne
 80011d4:	1a1b      	subne	r3, r3, r0
 80011d6:	50a3      	strne	r3, [r4, r2]
 80011d8:	e7af      	b.n	800113a <_malloc_r+0x22>
 80011da:	6862      	ldr	r2, [r4, #4]
 80011dc:	42a3      	cmp	r3, r4
 80011de:	bf0c      	ite	eq
 80011e0:	f8c8 2000 	streq.w	r2, [r8]
 80011e4:	605a      	strne	r2, [r3, #4]
 80011e6:	e7eb      	b.n	80011c0 <_malloc_r+0xa8>
 80011e8:	4623      	mov	r3, r4
 80011ea:	6864      	ldr	r4, [r4, #4]
 80011ec:	e7ae      	b.n	800114c <_malloc_r+0x34>
 80011ee:	463c      	mov	r4, r7
 80011f0:	687f      	ldr	r7, [r7, #4]
 80011f2:	e7b6      	b.n	8001162 <_malloc_r+0x4a>
 80011f4:	461a      	mov	r2, r3
 80011f6:	685b      	ldr	r3, [r3, #4]
 80011f8:	42a3      	cmp	r3, r4
 80011fa:	d1fb      	bne.n	80011f4 <_malloc_r+0xdc>
 80011fc:	2300      	movs	r3, #0
 80011fe:	6053      	str	r3, [r2, #4]
 8001200:	e7de      	b.n	80011c0 <_malloc_r+0xa8>
 8001202:	230c      	movs	r3, #12
 8001204:	6033      	str	r3, [r6, #0]
 8001206:	4630      	mov	r0, r6
 8001208:	f000 f80c 	bl	8001224 <__malloc_unlock>
 800120c:	e794      	b.n	8001138 <_malloc_r+0x20>
 800120e:	6005      	str	r5, [r0, #0]
 8001210:	e7d6      	b.n	80011c0 <_malloc_r+0xa8>
 8001212:	bf00      	nop
 8001214:	200002f8 	.word	0x200002f8

08001218 <__malloc_lock>:
 8001218:	4801      	ldr	r0, [pc, #4]	@ (8001220 <__malloc_lock+0x8>)
 800121a:	f7ff bee8 	b.w	8000fee <__retarget_lock_acquire_recursive>
 800121e:	bf00      	nop
 8001220:	200002f0 	.word	0x200002f0

08001224 <__malloc_unlock>:
 8001224:	4801      	ldr	r0, [pc, #4]	@ (800122c <__malloc_unlock+0x8>)
 8001226:	f7ff bee3 	b.w	8000ff0 <__retarget_lock_release_recursive>
 800122a:	bf00      	nop
 800122c:	200002f0 	.word	0x200002f0

08001230 <__sfputc_r>:
 8001230:	6893      	ldr	r3, [r2, #8]
 8001232:	3b01      	subs	r3, #1
 8001234:	2b00      	cmp	r3, #0
 8001236:	b410      	push	{r4}
 8001238:	6093      	str	r3, [r2, #8]
 800123a:	da08      	bge.n	800124e <__sfputc_r+0x1e>
 800123c:	6994      	ldr	r4, [r2, #24]
 800123e:	42a3      	cmp	r3, r4
 8001240:	db01      	blt.n	8001246 <__sfputc_r+0x16>
 8001242:	290a      	cmp	r1, #10
 8001244:	d103      	bne.n	800124e <__sfputc_r+0x1e>
 8001246:	f85d 4b04 	ldr.w	r4, [sp], #4
 800124a:	f7ff bdae 	b.w	8000daa <__swbuf_r>
 800124e:	6813      	ldr	r3, [r2, #0]
 8001250:	1c58      	adds	r0, r3, #1
 8001252:	6010      	str	r0, [r2, #0]
 8001254:	7019      	strb	r1, [r3, #0]
 8001256:	4608      	mov	r0, r1
 8001258:	f85d 4b04 	ldr.w	r4, [sp], #4
 800125c:	4770      	bx	lr

0800125e <__sfputs_r>:
 800125e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001260:	4606      	mov	r6, r0
 8001262:	460f      	mov	r7, r1
 8001264:	4614      	mov	r4, r2
 8001266:	18d5      	adds	r5, r2, r3
 8001268:	42ac      	cmp	r4, r5
 800126a:	d101      	bne.n	8001270 <__sfputs_r+0x12>
 800126c:	2000      	movs	r0, #0
 800126e:	e007      	b.n	8001280 <__sfputs_r+0x22>
 8001270:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001274:	463a      	mov	r2, r7
 8001276:	4630      	mov	r0, r6
 8001278:	f7ff ffda 	bl	8001230 <__sfputc_r>
 800127c:	1c43      	adds	r3, r0, #1
 800127e:	d1f3      	bne.n	8001268 <__sfputs_r+0xa>
 8001280:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08001284 <_vfiprintf_r>:
 8001284:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001288:	460d      	mov	r5, r1
 800128a:	b09d      	sub	sp, #116	@ 0x74
 800128c:	4614      	mov	r4, r2
 800128e:	4698      	mov	r8, r3
 8001290:	4606      	mov	r6, r0
 8001292:	b118      	cbz	r0, 800129c <_vfiprintf_r+0x18>
 8001294:	6a03      	ldr	r3, [r0, #32]
 8001296:	b90b      	cbnz	r3, 800129c <_vfiprintf_r+0x18>
 8001298:	f7ff fc9e 	bl	8000bd8 <__sinit>
 800129c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800129e:	07d9      	lsls	r1, r3, #31
 80012a0:	d405      	bmi.n	80012ae <_vfiprintf_r+0x2a>
 80012a2:	89ab      	ldrh	r3, [r5, #12]
 80012a4:	059a      	lsls	r2, r3, #22
 80012a6:	d402      	bmi.n	80012ae <_vfiprintf_r+0x2a>
 80012a8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80012aa:	f7ff fea0 	bl	8000fee <__retarget_lock_acquire_recursive>
 80012ae:	89ab      	ldrh	r3, [r5, #12]
 80012b0:	071b      	lsls	r3, r3, #28
 80012b2:	d501      	bpl.n	80012b8 <_vfiprintf_r+0x34>
 80012b4:	692b      	ldr	r3, [r5, #16]
 80012b6:	b99b      	cbnz	r3, 80012e0 <_vfiprintf_r+0x5c>
 80012b8:	4629      	mov	r1, r5
 80012ba:	4630      	mov	r0, r6
 80012bc:	f7ff fdb4 	bl	8000e28 <__swsetup_r>
 80012c0:	b170      	cbz	r0, 80012e0 <_vfiprintf_r+0x5c>
 80012c2:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80012c4:	07dc      	lsls	r4, r3, #31
 80012c6:	d504      	bpl.n	80012d2 <_vfiprintf_r+0x4e>
 80012c8:	f04f 30ff 	mov.w	r0, #4294967295
 80012cc:	b01d      	add	sp, #116	@ 0x74
 80012ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80012d2:	89ab      	ldrh	r3, [r5, #12]
 80012d4:	0598      	lsls	r0, r3, #22
 80012d6:	d4f7      	bmi.n	80012c8 <_vfiprintf_r+0x44>
 80012d8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80012da:	f7ff fe89 	bl	8000ff0 <__retarget_lock_release_recursive>
 80012de:	e7f3      	b.n	80012c8 <_vfiprintf_r+0x44>
 80012e0:	2300      	movs	r3, #0
 80012e2:	9309      	str	r3, [sp, #36]	@ 0x24
 80012e4:	2320      	movs	r3, #32
 80012e6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80012ea:	f8cd 800c 	str.w	r8, [sp, #12]
 80012ee:	2330      	movs	r3, #48	@ 0x30
 80012f0:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80014a0 <_vfiprintf_r+0x21c>
 80012f4:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80012f8:	f04f 0901 	mov.w	r9, #1
 80012fc:	4623      	mov	r3, r4
 80012fe:	469a      	mov	sl, r3
 8001300:	f813 2b01 	ldrb.w	r2, [r3], #1
 8001304:	b10a      	cbz	r2, 800130a <_vfiprintf_r+0x86>
 8001306:	2a25      	cmp	r2, #37	@ 0x25
 8001308:	d1f9      	bne.n	80012fe <_vfiprintf_r+0x7a>
 800130a:	ebba 0b04 	subs.w	fp, sl, r4
 800130e:	d00b      	beq.n	8001328 <_vfiprintf_r+0xa4>
 8001310:	465b      	mov	r3, fp
 8001312:	4622      	mov	r2, r4
 8001314:	4629      	mov	r1, r5
 8001316:	4630      	mov	r0, r6
 8001318:	f7ff ffa1 	bl	800125e <__sfputs_r>
 800131c:	3001      	adds	r0, #1
 800131e:	f000 80a7 	beq.w	8001470 <_vfiprintf_r+0x1ec>
 8001322:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8001324:	445a      	add	r2, fp
 8001326:	9209      	str	r2, [sp, #36]	@ 0x24
 8001328:	f89a 3000 	ldrb.w	r3, [sl]
 800132c:	2b00      	cmp	r3, #0
 800132e:	f000 809f 	beq.w	8001470 <_vfiprintf_r+0x1ec>
 8001332:	2300      	movs	r3, #0
 8001334:	f04f 32ff 	mov.w	r2, #4294967295
 8001338:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800133c:	f10a 0a01 	add.w	sl, sl, #1
 8001340:	9304      	str	r3, [sp, #16]
 8001342:	9307      	str	r3, [sp, #28]
 8001344:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8001348:	931a      	str	r3, [sp, #104]	@ 0x68
 800134a:	4654      	mov	r4, sl
 800134c:	2205      	movs	r2, #5
 800134e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001352:	4853      	ldr	r0, [pc, #332]	@ (80014a0 <_vfiprintf_r+0x21c>)
 8001354:	f7fe ff54 	bl	8000200 <memchr>
 8001358:	9a04      	ldr	r2, [sp, #16]
 800135a:	b9d8      	cbnz	r0, 8001394 <_vfiprintf_r+0x110>
 800135c:	06d1      	lsls	r1, r2, #27
 800135e:	bf44      	itt	mi
 8001360:	2320      	movmi	r3, #32
 8001362:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8001366:	0713      	lsls	r3, r2, #28
 8001368:	bf44      	itt	mi
 800136a:	232b      	movmi	r3, #43	@ 0x2b
 800136c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8001370:	f89a 3000 	ldrb.w	r3, [sl]
 8001374:	2b2a      	cmp	r3, #42	@ 0x2a
 8001376:	d015      	beq.n	80013a4 <_vfiprintf_r+0x120>
 8001378:	9a07      	ldr	r2, [sp, #28]
 800137a:	4654      	mov	r4, sl
 800137c:	2000      	movs	r0, #0
 800137e:	f04f 0c0a 	mov.w	ip, #10
 8001382:	4621      	mov	r1, r4
 8001384:	f811 3b01 	ldrb.w	r3, [r1], #1
 8001388:	3b30      	subs	r3, #48	@ 0x30
 800138a:	2b09      	cmp	r3, #9
 800138c:	d94b      	bls.n	8001426 <_vfiprintf_r+0x1a2>
 800138e:	b1b0      	cbz	r0, 80013be <_vfiprintf_r+0x13a>
 8001390:	9207      	str	r2, [sp, #28]
 8001392:	e014      	b.n	80013be <_vfiprintf_r+0x13a>
 8001394:	eba0 0308 	sub.w	r3, r0, r8
 8001398:	fa09 f303 	lsl.w	r3, r9, r3
 800139c:	4313      	orrs	r3, r2
 800139e:	9304      	str	r3, [sp, #16]
 80013a0:	46a2      	mov	sl, r4
 80013a2:	e7d2      	b.n	800134a <_vfiprintf_r+0xc6>
 80013a4:	9b03      	ldr	r3, [sp, #12]
 80013a6:	1d19      	adds	r1, r3, #4
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	9103      	str	r1, [sp, #12]
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	bfbb      	ittet	lt
 80013b0:	425b      	neglt	r3, r3
 80013b2:	f042 0202 	orrlt.w	r2, r2, #2
 80013b6:	9307      	strge	r3, [sp, #28]
 80013b8:	9307      	strlt	r3, [sp, #28]
 80013ba:	bfb8      	it	lt
 80013bc:	9204      	strlt	r2, [sp, #16]
 80013be:	7823      	ldrb	r3, [r4, #0]
 80013c0:	2b2e      	cmp	r3, #46	@ 0x2e
 80013c2:	d10a      	bne.n	80013da <_vfiprintf_r+0x156>
 80013c4:	7863      	ldrb	r3, [r4, #1]
 80013c6:	2b2a      	cmp	r3, #42	@ 0x2a
 80013c8:	d132      	bne.n	8001430 <_vfiprintf_r+0x1ac>
 80013ca:	9b03      	ldr	r3, [sp, #12]
 80013cc:	1d1a      	adds	r2, r3, #4
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	9203      	str	r2, [sp, #12]
 80013d2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80013d6:	3402      	adds	r4, #2
 80013d8:	9305      	str	r3, [sp, #20]
 80013da:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80014b0 <_vfiprintf_r+0x22c>
 80013de:	7821      	ldrb	r1, [r4, #0]
 80013e0:	2203      	movs	r2, #3
 80013e2:	4650      	mov	r0, sl
 80013e4:	f7fe ff0c 	bl	8000200 <memchr>
 80013e8:	b138      	cbz	r0, 80013fa <_vfiprintf_r+0x176>
 80013ea:	9b04      	ldr	r3, [sp, #16]
 80013ec:	eba0 000a 	sub.w	r0, r0, sl
 80013f0:	2240      	movs	r2, #64	@ 0x40
 80013f2:	4082      	lsls	r2, r0
 80013f4:	4313      	orrs	r3, r2
 80013f6:	3401      	adds	r4, #1
 80013f8:	9304      	str	r3, [sp, #16]
 80013fa:	f814 1b01 	ldrb.w	r1, [r4], #1
 80013fe:	4829      	ldr	r0, [pc, #164]	@ (80014a4 <_vfiprintf_r+0x220>)
 8001400:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8001404:	2206      	movs	r2, #6
 8001406:	f7fe fefb 	bl	8000200 <memchr>
 800140a:	2800      	cmp	r0, #0
 800140c:	d03f      	beq.n	800148e <_vfiprintf_r+0x20a>
 800140e:	4b26      	ldr	r3, [pc, #152]	@ (80014a8 <_vfiprintf_r+0x224>)
 8001410:	bb1b      	cbnz	r3, 800145a <_vfiprintf_r+0x1d6>
 8001412:	9b03      	ldr	r3, [sp, #12]
 8001414:	3307      	adds	r3, #7
 8001416:	f023 0307 	bic.w	r3, r3, #7
 800141a:	3308      	adds	r3, #8
 800141c:	9303      	str	r3, [sp, #12]
 800141e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8001420:	443b      	add	r3, r7
 8001422:	9309      	str	r3, [sp, #36]	@ 0x24
 8001424:	e76a      	b.n	80012fc <_vfiprintf_r+0x78>
 8001426:	fb0c 3202 	mla	r2, ip, r2, r3
 800142a:	460c      	mov	r4, r1
 800142c:	2001      	movs	r0, #1
 800142e:	e7a8      	b.n	8001382 <_vfiprintf_r+0xfe>
 8001430:	2300      	movs	r3, #0
 8001432:	3401      	adds	r4, #1
 8001434:	9305      	str	r3, [sp, #20]
 8001436:	4619      	mov	r1, r3
 8001438:	f04f 0c0a 	mov.w	ip, #10
 800143c:	4620      	mov	r0, r4
 800143e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8001442:	3a30      	subs	r2, #48	@ 0x30
 8001444:	2a09      	cmp	r2, #9
 8001446:	d903      	bls.n	8001450 <_vfiprintf_r+0x1cc>
 8001448:	2b00      	cmp	r3, #0
 800144a:	d0c6      	beq.n	80013da <_vfiprintf_r+0x156>
 800144c:	9105      	str	r1, [sp, #20]
 800144e:	e7c4      	b.n	80013da <_vfiprintf_r+0x156>
 8001450:	fb0c 2101 	mla	r1, ip, r1, r2
 8001454:	4604      	mov	r4, r0
 8001456:	2301      	movs	r3, #1
 8001458:	e7f0      	b.n	800143c <_vfiprintf_r+0x1b8>
 800145a:	ab03      	add	r3, sp, #12
 800145c:	9300      	str	r3, [sp, #0]
 800145e:	462a      	mov	r2, r5
 8001460:	4b12      	ldr	r3, [pc, #72]	@ (80014ac <_vfiprintf_r+0x228>)
 8001462:	a904      	add	r1, sp, #16
 8001464:	4630      	mov	r0, r6
 8001466:	f3af 8000 	nop.w
 800146a:	4607      	mov	r7, r0
 800146c:	1c78      	adds	r0, r7, #1
 800146e:	d1d6      	bne.n	800141e <_vfiprintf_r+0x19a>
 8001470:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8001472:	07d9      	lsls	r1, r3, #31
 8001474:	d405      	bmi.n	8001482 <_vfiprintf_r+0x1fe>
 8001476:	89ab      	ldrh	r3, [r5, #12]
 8001478:	059a      	lsls	r2, r3, #22
 800147a:	d402      	bmi.n	8001482 <_vfiprintf_r+0x1fe>
 800147c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800147e:	f7ff fdb7 	bl	8000ff0 <__retarget_lock_release_recursive>
 8001482:	89ab      	ldrh	r3, [r5, #12]
 8001484:	065b      	lsls	r3, r3, #25
 8001486:	f53f af1f 	bmi.w	80012c8 <_vfiprintf_r+0x44>
 800148a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800148c:	e71e      	b.n	80012cc <_vfiprintf_r+0x48>
 800148e:	ab03      	add	r3, sp, #12
 8001490:	9300      	str	r3, [sp, #0]
 8001492:	462a      	mov	r2, r5
 8001494:	4b05      	ldr	r3, [pc, #20]	@ (80014ac <_vfiprintf_r+0x228>)
 8001496:	a904      	add	r1, sp, #16
 8001498:	4630      	mov	r0, r6
 800149a:	f000 f879 	bl	8001590 <_printf_i>
 800149e:	e7e4      	b.n	800146a <_vfiprintf_r+0x1e6>
 80014a0:	08002041 	.word	0x08002041
 80014a4:	0800204b 	.word	0x0800204b
 80014a8:	00000000 	.word	0x00000000
 80014ac:	0800125f 	.word	0x0800125f
 80014b0:	08002047 	.word	0x08002047

080014b4 <_printf_common>:
 80014b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80014b8:	4616      	mov	r6, r2
 80014ba:	4698      	mov	r8, r3
 80014bc:	688a      	ldr	r2, [r1, #8]
 80014be:	690b      	ldr	r3, [r1, #16]
 80014c0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80014c4:	4293      	cmp	r3, r2
 80014c6:	bfb8      	it	lt
 80014c8:	4613      	movlt	r3, r2
 80014ca:	6033      	str	r3, [r6, #0]
 80014cc:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80014d0:	4607      	mov	r7, r0
 80014d2:	460c      	mov	r4, r1
 80014d4:	b10a      	cbz	r2, 80014da <_printf_common+0x26>
 80014d6:	3301      	adds	r3, #1
 80014d8:	6033      	str	r3, [r6, #0]
 80014da:	6823      	ldr	r3, [r4, #0]
 80014dc:	0699      	lsls	r1, r3, #26
 80014de:	bf42      	ittt	mi
 80014e0:	6833      	ldrmi	r3, [r6, #0]
 80014e2:	3302      	addmi	r3, #2
 80014e4:	6033      	strmi	r3, [r6, #0]
 80014e6:	6825      	ldr	r5, [r4, #0]
 80014e8:	f015 0506 	ands.w	r5, r5, #6
 80014ec:	d106      	bne.n	80014fc <_printf_common+0x48>
 80014ee:	f104 0a19 	add.w	sl, r4, #25
 80014f2:	68e3      	ldr	r3, [r4, #12]
 80014f4:	6832      	ldr	r2, [r6, #0]
 80014f6:	1a9b      	subs	r3, r3, r2
 80014f8:	42ab      	cmp	r3, r5
 80014fa:	dc26      	bgt.n	800154a <_printf_common+0x96>
 80014fc:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8001500:	6822      	ldr	r2, [r4, #0]
 8001502:	3b00      	subs	r3, #0
 8001504:	bf18      	it	ne
 8001506:	2301      	movne	r3, #1
 8001508:	0692      	lsls	r2, r2, #26
 800150a:	d42b      	bmi.n	8001564 <_printf_common+0xb0>
 800150c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8001510:	4641      	mov	r1, r8
 8001512:	4638      	mov	r0, r7
 8001514:	47c8      	blx	r9
 8001516:	3001      	adds	r0, #1
 8001518:	d01e      	beq.n	8001558 <_printf_common+0xa4>
 800151a:	6823      	ldr	r3, [r4, #0]
 800151c:	6922      	ldr	r2, [r4, #16]
 800151e:	f003 0306 	and.w	r3, r3, #6
 8001522:	2b04      	cmp	r3, #4
 8001524:	bf02      	ittt	eq
 8001526:	68e5      	ldreq	r5, [r4, #12]
 8001528:	6833      	ldreq	r3, [r6, #0]
 800152a:	1aed      	subeq	r5, r5, r3
 800152c:	68a3      	ldr	r3, [r4, #8]
 800152e:	bf0c      	ite	eq
 8001530:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8001534:	2500      	movne	r5, #0
 8001536:	4293      	cmp	r3, r2
 8001538:	bfc4      	itt	gt
 800153a:	1a9b      	subgt	r3, r3, r2
 800153c:	18ed      	addgt	r5, r5, r3
 800153e:	2600      	movs	r6, #0
 8001540:	341a      	adds	r4, #26
 8001542:	42b5      	cmp	r5, r6
 8001544:	d11a      	bne.n	800157c <_printf_common+0xc8>
 8001546:	2000      	movs	r0, #0
 8001548:	e008      	b.n	800155c <_printf_common+0xa8>
 800154a:	2301      	movs	r3, #1
 800154c:	4652      	mov	r2, sl
 800154e:	4641      	mov	r1, r8
 8001550:	4638      	mov	r0, r7
 8001552:	47c8      	blx	r9
 8001554:	3001      	adds	r0, #1
 8001556:	d103      	bne.n	8001560 <_printf_common+0xac>
 8001558:	f04f 30ff 	mov.w	r0, #4294967295
 800155c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001560:	3501      	adds	r5, #1
 8001562:	e7c6      	b.n	80014f2 <_printf_common+0x3e>
 8001564:	18e1      	adds	r1, r4, r3
 8001566:	1c5a      	adds	r2, r3, #1
 8001568:	2030      	movs	r0, #48	@ 0x30
 800156a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800156e:	4422      	add	r2, r4
 8001570:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8001574:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8001578:	3302      	adds	r3, #2
 800157a:	e7c7      	b.n	800150c <_printf_common+0x58>
 800157c:	2301      	movs	r3, #1
 800157e:	4622      	mov	r2, r4
 8001580:	4641      	mov	r1, r8
 8001582:	4638      	mov	r0, r7
 8001584:	47c8      	blx	r9
 8001586:	3001      	adds	r0, #1
 8001588:	d0e6      	beq.n	8001558 <_printf_common+0xa4>
 800158a:	3601      	adds	r6, #1
 800158c:	e7d9      	b.n	8001542 <_printf_common+0x8e>
	...

08001590 <_printf_i>:
 8001590:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8001594:	7e0f      	ldrb	r7, [r1, #24]
 8001596:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8001598:	2f78      	cmp	r7, #120	@ 0x78
 800159a:	4691      	mov	r9, r2
 800159c:	4680      	mov	r8, r0
 800159e:	460c      	mov	r4, r1
 80015a0:	469a      	mov	sl, r3
 80015a2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80015a6:	d807      	bhi.n	80015b8 <_printf_i+0x28>
 80015a8:	2f62      	cmp	r7, #98	@ 0x62
 80015aa:	d80a      	bhi.n	80015c2 <_printf_i+0x32>
 80015ac:	2f00      	cmp	r7, #0
 80015ae:	f000 80d2 	beq.w	8001756 <_printf_i+0x1c6>
 80015b2:	2f58      	cmp	r7, #88	@ 0x58
 80015b4:	f000 80b9 	beq.w	800172a <_printf_i+0x19a>
 80015b8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80015bc:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80015c0:	e03a      	b.n	8001638 <_printf_i+0xa8>
 80015c2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80015c6:	2b15      	cmp	r3, #21
 80015c8:	d8f6      	bhi.n	80015b8 <_printf_i+0x28>
 80015ca:	a101      	add	r1, pc, #4	@ (adr r1, 80015d0 <_printf_i+0x40>)
 80015cc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80015d0:	08001629 	.word	0x08001629
 80015d4:	0800163d 	.word	0x0800163d
 80015d8:	080015b9 	.word	0x080015b9
 80015dc:	080015b9 	.word	0x080015b9
 80015e0:	080015b9 	.word	0x080015b9
 80015e4:	080015b9 	.word	0x080015b9
 80015e8:	0800163d 	.word	0x0800163d
 80015ec:	080015b9 	.word	0x080015b9
 80015f0:	080015b9 	.word	0x080015b9
 80015f4:	080015b9 	.word	0x080015b9
 80015f8:	080015b9 	.word	0x080015b9
 80015fc:	0800173d 	.word	0x0800173d
 8001600:	08001667 	.word	0x08001667
 8001604:	080016f7 	.word	0x080016f7
 8001608:	080015b9 	.word	0x080015b9
 800160c:	080015b9 	.word	0x080015b9
 8001610:	0800175f 	.word	0x0800175f
 8001614:	080015b9 	.word	0x080015b9
 8001618:	08001667 	.word	0x08001667
 800161c:	080015b9 	.word	0x080015b9
 8001620:	080015b9 	.word	0x080015b9
 8001624:	080016ff 	.word	0x080016ff
 8001628:	6833      	ldr	r3, [r6, #0]
 800162a:	1d1a      	adds	r2, r3, #4
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	6032      	str	r2, [r6, #0]
 8001630:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8001634:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8001638:	2301      	movs	r3, #1
 800163a:	e09d      	b.n	8001778 <_printf_i+0x1e8>
 800163c:	6833      	ldr	r3, [r6, #0]
 800163e:	6820      	ldr	r0, [r4, #0]
 8001640:	1d19      	adds	r1, r3, #4
 8001642:	6031      	str	r1, [r6, #0]
 8001644:	0606      	lsls	r6, r0, #24
 8001646:	d501      	bpl.n	800164c <_printf_i+0xbc>
 8001648:	681d      	ldr	r5, [r3, #0]
 800164a:	e003      	b.n	8001654 <_printf_i+0xc4>
 800164c:	0645      	lsls	r5, r0, #25
 800164e:	d5fb      	bpl.n	8001648 <_printf_i+0xb8>
 8001650:	f9b3 5000 	ldrsh.w	r5, [r3]
 8001654:	2d00      	cmp	r5, #0
 8001656:	da03      	bge.n	8001660 <_printf_i+0xd0>
 8001658:	232d      	movs	r3, #45	@ 0x2d
 800165a:	426d      	negs	r5, r5
 800165c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8001660:	4859      	ldr	r0, [pc, #356]	@ (80017c8 <_printf_i+0x238>)
 8001662:	230a      	movs	r3, #10
 8001664:	e011      	b.n	800168a <_printf_i+0xfa>
 8001666:	6821      	ldr	r1, [r4, #0]
 8001668:	6833      	ldr	r3, [r6, #0]
 800166a:	0608      	lsls	r0, r1, #24
 800166c:	f853 5b04 	ldr.w	r5, [r3], #4
 8001670:	d402      	bmi.n	8001678 <_printf_i+0xe8>
 8001672:	0649      	lsls	r1, r1, #25
 8001674:	bf48      	it	mi
 8001676:	b2ad      	uxthmi	r5, r5
 8001678:	2f6f      	cmp	r7, #111	@ 0x6f
 800167a:	4853      	ldr	r0, [pc, #332]	@ (80017c8 <_printf_i+0x238>)
 800167c:	6033      	str	r3, [r6, #0]
 800167e:	bf14      	ite	ne
 8001680:	230a      	movne	r3, #10
 8001682:	2308      	moveq	r3, #8
 8001684:	2100      	movs	r1, #0
 8001686:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800168a:	6866      	ldr	r6, [r4, #4]
 800168c:	60a6      	str	r6, [r4, #8]
 800168e:	2e00      	cmp	r6, #0
 8001690:	bfa2      	ittt	ge
 8001692:	6821      	ldrge	r1, [r4, #0]
 8001694:	f021 0104 	bicge.w	r1, r1, #4
 8001698:	6021      	strge	r1, [r4, #0]
 800169a:	b90d      	cbnz	r5, 80016a0 <_printf_i+0x110>
 800169c:	2e00      	cmp	r6, #0
 800169e:	d04b      	beq.n	8001738 <_printf_i+0x1a8>
 80016a0:	4616      	mov	r6, r2
 80016a2:	fbb5 f1f3 	udiv	r1, r5, r3
 80016a6:	fb03 5711 	mls	r7, r3, r1, r5
 80016aa:	5dc7      	ldrb	r7, [r0, r7]
 80016ac:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80016b0:	462f      	mov	r7, r5
 80016b2:	42bb      	cmp	r3, r7
 80016b4:	460d      	mov	r5, r1
 80016b6:	d9f4      	bls.n	80016a2 <_printf_i+0x112>
 80016b8:	2b08      	cmp	r3, #8
 80016ba:	d10b      	bne.n	80016d4 <_printf_i+0x144>
 80016bc:	6823      	ldr	r3, [r4, #0]
 80016be:	07df      	lsls	r7, r3, #31
 80016c0:	d508      	bpl.n	80016d4 <_printf_i+0x144>
 80016c2:	6923      	ldr	r3, [r4, #16]
 80016c4:	6861      	ldr	r1, [r4, #4]
 80016c6:	4299      	cmp	r1, r3
 80016c8:	bfde      	ittt	le
 80016ca:	2330      	movle	r3, #48	@ 0x30
 80016cc:	f806 3c01 	strble.w	r3, [r6, #-1]
 80016d0:	f106 36ff 	addle.w	r6, r6, #4294967295
 80016d4:	1b92      	subs	r2, r2, r6
 80016d6:	6122      	str	r2, [r4, #16]
 80016d8:	f8cd a000 	str.w	sl, [sp]
 80016dc:	464b      	mov	r3, r9
 80016de:	aa03      	add	r2, sp, #12
 80016e0:	4621      	mov	r1, r4
 80016e2:	4640      	mov	r0, r8
 80016e4:	f7ff fee6 	bl	80014b4 <_printf_common>
 80016e8:	3001      	adds	r0, #1
 80016ea:	d14a      	bne.n	8001782 <_printf_i+0x1f2>
 80016ec:	f04f 30ff 	mov.w	r0, #4294967295
 80016f0:	b004      	add	sp, #16
 80016f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80016f6:	6823      	ldr	r3, [r4, #0]
 80016f8:	f043 0320 	orr.w	r3, r3, #32
 80016fc:	6023      	str	r3, [r4, #0]
 80016fe:	4833      	ldr	r0, [pc, #204]	@ (80017cc <_printf_i+0x23c>)
 8001700:	2778      	movs	r7, #120	@ 0x78
 8001702:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8001706:	6823      	ldr	r3, [r4, #0]
 8001708:	6831      	ldr	r1, [r6, #0]
 800170a:	061f      	lsls	r7, r3, #24
 800170c:	f851 5b04 	ldr.w	r5, [r1], #4
 8001710:	d402      	bmi.n	8001718 <_printf_i+0x188>
 8001712:	065f      	lsls	r7, r3, #25
 8001714:	bf48      	it	mi
 8001716:	b2ad      	uxthmi	r5, r5
 8001718:	6031      	str	r1, [r6, #0]
 800171a:	07d9      	lsls	r1, r3, #31
 800171c:	bf44      	itt	mi
 800171e:	f043 0320 	orrmi.w	r3, r3, #32
 8001722:	6023      	strmi	r3, [r4, #0]
 8001724:	b11d      	cbz	r5, 800172e <_printf_i+0x19e>
 8001726:	2310      	movs	r3, #16
 8001728:	e7ac      	b.n	8001684 <_printf_i+0xf4>
 800172a:	4827      	ldr	r0, [pc, #156]	@ (80017c8 <_printf_i+0x238>)
 800172c:	e7e9      	b.n	8001702 <_printf_i+0x172>
 800172e:	6823      	ldr	r3, [r4, #0]
 8001730:	f023 0320 	bic.w	r3, r3, #32
 8001734:	6023      	str	r3, [r4, #0]
 8001736:	e7f6      	b.n	8001726 <_printf_i+0x196>
 8001738:	4616      	mov	r6, r2
 800173a:	e7bd      	b.n	80016b8 <_printf_i+0x128>
 800173c:	6833      	ldr	r3, [r6, #0]
 800173e:	6825      	ldr	r5, [r4, #0]
 8001740:	6961      	ldr	r1, [r4, #20]
 8001742:	1d18      	adds	r0, r3, #4
 8001744:	6030      	str	r0, [r6, #0]
 8001746:	062e      	lsls	r6, r5, #24
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	d501      	bpl.n	8001750 <_printf_i+0x1c0>
 800174c:	6019      	str	r1, [r3, #0]
 800174e:	e002      	b.n	8001756 <_printf_i+0x1c6>
 8001750:	0668      	lsls	r0, r5, #25
 8001752:	d5fb      	bpl.n	800174c <_printf_i+0x1bc>
 8001754:	8019      	strh	r1, [r3, #0]
 8001756:	2300      	movs	r3, #0
 8001758:	6123      	str	r3, [r4, #16]
 800175a:	4616      	mov	r6, r2
 800175c:	e7bc      	b.n	80016d8 <_printf_i+0x148>
 800175e:	6833      	ldr	r3, [r6, #0]
 8001760:	1d1a      	adds	r2, r3, #4
 8001762:	6032      	str	r2, [r6, #0]
 8001764:	681e      	ldr	r6, [r3, #0]
 8001766:	6862      	ldr	r2, [r4, #4]
 8001768:	2100      	movs	r1, #0
 800176a:	4630      	mov	r0, r6
 800176c:	f7fe fd48 	bl	8000200 <memchr>
 8001770:	b108      	cbz	r0, 8001776 <_printf_i+0x1e6>
 8001772:	1b80      	subs	r0, r0, r6
 8001774:	6060      	str	r0, [r4, #4]
 8001776:	6863      	ldr	r3, [r4, #4]
 8001778:	6123      	str	r3, [r4, #16]
 800177a:	2300      	movs	r3, #0
 800177c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8001780:	e7aa      	b.n	80016d8 <_printf_i+0x148>
 8001782:	6923      	ldr	r3, [r4, #16]
 8001784:	4632      	mov	r2, r6
 8001786:	4649      	mov	r1, r9
 8001788:	4640      	mov	r0, r8
 800178a:	47d0      	blx	sl
 800178c:	3001      	adds	r0, #1
 800178e:	d0ad      	beq.n	80016ec <_printf_i+0x15c>
 8001790:	6823      	ldr	r3, [r4, #0]
 8001792:	079b      	lsls	r3, r3, #30
 8001794:	d413      	bmi.n	80017be <_printf_i+0x22e>
 8001796:	68e0      	ldr	r0, [r4, #12]
 8001798:	9b03      	ldr	r3, [sp, #12]
 800179a:	4298      	cmp	r0, r3
 800179c:	bfb8      	it	lt
 800179e:	4618      	movlt	r0, r3
 80017a0:	e7a6      	b.n	80016f0 <_printf_i+0x160>
 80017a2:	2301      	movs	r3, #1
 80017a4:	4632      	mov	r2, r6
 80017a6:	4649      	mov	r1, r9
 80017a8:	4640      	mov	r0, r8
 80017aa:	47d0      	blx	sl
 80017ac:	3001      	adds	r0, #1
 80017ae:	d09d      	beq.n	80016ec <_printf_i+0x15c>
 80017b0:	3501      	adds	r5, #1
 80017b2:	68e3      	ldr	r3, [r4, #12]
 80017b4:	9903      	ldr	r1, [sp, #12]
 80017b6:	1a5b      	subs	r3, r3, r1
 80017b8:	42ab      	cmp	r3, r5
 80017ba:	dcf2      	bgt.n	80017a2 <_printf_i+0x212>
 80017bc:	e7eb      	b.n	8001796 <_printf_i+0x206>
 80017be:	2500      	movs	r5, #0
 80017c0:	f104 0619 	add.w	r6, r4, #25
 80017c4:	e7f5      	b.n	80017b2 <_printf_i+0x222>
 80017c6:	bf00      	nop
 80017c8:	08002052 	.word	0x08002052
 80017cc:	08002063 	.word	0x08002063

080017d0 <__sflush_r>:
 80017d0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80017d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80017d8:	0716      	lsls	r6, r2, #28
 80017da:	4605      	mov	r5, r0
 80017dc:	460c      	mov	r4, r1
 80017de:	d454      	bmi.n	800188a <__sflush_r+0xba>
 80017e0:	684b      	ldr	r3, [r1, #4]
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	dc02      	bgt.n	80017ec <__sflush_r+0x1c>
 80017e6:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	dd48      	ble.n	800187e <__sflush_r+0xae>
 80017ec:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80017ee:	2e00      	cmp	r6, #0
 80017f0:	d045      	beq.n	800187e <__sflush_r+0xae>
 80017f2:	2300      	movs	r3, #0
 80017f4:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80017f8:	682f      	ldr	r7, [r5, #0]
 80017fa:	6a21      	ldr	r1, [r4, #32]
 80017fc:	602b      	str	r3, [r5, #0]
 80017fe:	d030      	beq.n	8001862 <__sflush_r+0x92>
 8001800:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8001802:	89a3      	ldrh	r3, [r4, #12]
 8001804:	0759      	lsls	r1, r3, #29
 8001806:	d505      	bpl.n	8001814 <__sflush_r+0x44>
 8001808:	6863      	ldr	r3, [r4, #4]
 800180a:	1ad2      	subs	r2, r2, r3
 800180c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800180e:	b10b      	cbz	r3, 8001814 <__sflush_r+0x44>
 8001810:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8001812:	1ad2      	subs	r2, r2, r3
 8001814:	2300      	movs	r3, #0
 8001816:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8001818:	6a21      	ldr	r1, [r4, #32]
 800181a:	4628      	mov	r0, r5
 800181c:	47b0      	blx	r6
 800181e:	1c43      	adds	r3, r0, #1
 8001820:	89a3      	ldrh	r3, [r4, #12]
 8001822:	d106      	bne.n	8001832 <__sflush_r+0x62>
 8001824:	6829      	ldr	r1, [r5, #0]
 8001826:	291d      	cmp	r1, #29
 8001828:	d82b      	bhi.n	8001882 <__sflush_r+0xb2>
 800182a:	4a2a      	ldr	r2, [pc, #168]	@ (80018d4 <__sflush_r+0x104>)
 800182c:	410a      	asrs	r2, r1
 800182e:	07d6      	lsls	r6, r2, #31
 8001830:	d427      	bmi.n	8001882 <__sflush_r+0xb2>
 8001832:	2200      	movs	r2, #0
 8001834:	6062      	str	r2, [r4, #4]
 8001836:	04d9      	lsls	r1, r3, #19
 8001838:	6922      	ldr	r2, [r4, #16]
 800183a:	6022      	str	r2, [r4, #0]
 800183c:	d504      	bpl.n	8001848 <__sflush_r+0x78>
 800183e:	1c42      	adds	r2, r0, #1
 8001840:	d101      	bne.n	8001846 <__sflush_r+0x76>
 8001842:	682b      	ldr	r3, [r5, #0]
 8001844:	b903      	cbnz	r3, 8001848 <__sflush_r+0x78>
 8001846:	6560      	str	r0, [r4, #84]	@ 0x54
 8001848:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800184a:	602f      	str	r7, [r5, #0]
 800184c:	b1b9      	cbz	r1, 800187e <__sflush_r+0xae>
 800184e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8001852:	4299      	cmp	r1, r3
 8001854:	d002      	beq.n	800185c <__sflush_r+0x8c>
 8001856:	4628      	mov	r0, r5
 8001858:	f7ff fbea 	bl	8001030 <_free_r>
 800185c:	2300      	movs	r3, #0
 800185e:	6363      	str	r3, [r4, #52]	@ 0x34
 8001860:	e00d      	b.n	800187e <__sflush_r+0xae>
 8001862:	2301      	movs	r3, #1
 8001864:	4628      	mov	r0, r5
 8001866:	47b0      	blx	r6
 8001868:	4602      	mov	r2, r0
 800186a:	1c50      	adds	r0, r2, #1
 800186c:	d1c9      	bne.n	8001802 <__sflush_r+0x32>
 800186e:	682b      	ldr	r3, [r5, #0]
 8001870:	2b00      	cmp	r3, #0
 8001872:	d0c6      	beq.n	8001802 <__sflush_r+0x32>
 8001874:	2b1d      	cmp	r3, #29
 8001876:	d001      	beq.n	800187c <__sflush_r+0xac>
 8001878:	2b16      	cmp	r3, #22
 800187a:	d11e      	bne.n	80018ba <__sflush_r+0xea>
 800187c:	602f      	str	r7, [r5, #0]
 800187e:	2000      	movs	r0, #0
 8001880:	e022      	b.n	80018c8 <__sflush_r+0xf8>
 8001882:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001886:	b21b      	sxth	r3, r3
 8001888:	e01b      	b.n	80018c2 <__sflush_r+0xf2>
 800188a:	690f      	ldr	r7, [r1, #16]
 800188c:	2f00      	cmp	r7, #0
 800188e:	d0f6      	beq.n	800187e <__sflush_r+0xae>
 8001890:	0793      	lsls	r3, r2, #30
 8001892:	680e      	ldr	r6, [r1, #0]
 8001894:	bf08      	it	eq
 8001896:	694b      	ldreq	r3, [r1, #20]
 8001898:	600f      	str	r7, [r1, #0]
 800189a:	bf18      	it	ne
 800189c:	2300      	movne	r3, #0
 800189e:	eba6 0807 	sub.w	r8, r6, r7
 80018a2:	608b      	str	r3, [r1, #8]
 80018a4:	f1b8 0f00 	cmp.w	r8, #0
 80018a8:	dde9      	ble.n	800187e <__sflush_r+0xae>
 80018aa:	6a21      	ldr	r1, [r4, #32]
 80018ac:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80018ae:	4643      	mov	r3, r8
 80018b0:	463a      	mov	r2, r7
 80018b2:	4628      	mov	r0, r5
 80018b4:	47b0      	blx	r6
 80018b6:	2800      	cmp	r0, #0
 80018b8:	dc08      	bgt.n	80018cc <__sflush_r+0xfc>
 80018ba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80018be:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80018c2:	81a3      	strh	r3, [r4, #12]
 80018c4:	f04f 30ff 	mov.w	r0, #4294967295
 80018c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80018cc:	4407      	add	r7, r0
 80018ce:	eba8 0800 	sub.w	r8, r8, r0
 80018d2:	e7e7      	b.n	80018a4 <__sflush_r+0xd4>
 80018d4:	dfbffffe 	.word	0xdfbffffe

080018d8 <_fflush_r>:
 80018d8:	b538      	push	{r3, r4, r5, lr}
 80018da:	690b      	ldr	r3, [r1, #16]
 80018dc:	4605      	mov	r5, r0
 80018de:	460c      	mov	r4, r1
 80018e0:	b913      	cbnz	r3, 80018e8 <_fflush_r+0x10>
 80018e2:	2500      	movs	r5, #0
 80018e4:	4628      	mov	r0, r5
 80018e6:	bd38      	pop	{r3, r4, r5, pc}
 80018e8:	b118      	cbz	r0, 80018f2 <_fflush_r+0x1a>
 80018ea:	6a03      	ldr	r3, [r0, #32]
 80018ec:	b90b      	cbnz	r3, 80018f2 <_fflush_r+0x1a>
 80018ee:	f7ff f973 	bl	8000bd8 <__sinit>
 80018f2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d0f3      	beq.n	80018e2 <_fflush_r+0xa>
 80018fa:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80018fc:	07d0      	lsls	r0, r2, #31
 80018fe:	d404      	bmi.n	800190a <_fflush_r+0x32>
 8001900:	0599      	lsls	r1, r3, #22
 8001902:	d402      	bmi.n	800190a <_fflush_r+0x32>
 8001904:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8001906:	f7ff fb72 	bl	8000fee <__retarget_lock_acquire_recursive>
 800190a:	4628      	mov	r0, r5
 800190c:	4621      	mov	r1, r4
 800190e:	f7ff ff5f 	bl	80017d0 <__sflush_r>
 8001912:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8001914:	07da      	lsls	r2, r3, #31
 8001916:	4605      	mov	r5, r0
 8001918:	d4e4      	bmi.n	80018e4 <_fflush_r+0xc>
 800191a:	89a3      	ldrh	r3, [r4, #12]
 800191c:	059b      	lsls	r3, r3, #22
 800191e:	d4e1      	bmi.n	80018e4 <_fflush_r+0xc>
 8001920:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8001922:	f7ff fb65 	bl	8000ff0 <__retarget_lock_release_recursive>
 8001926:	e7dd      	b.n	80018e4 <_fflush_r+0xc>

08001928 <fiprintf>:
 8001928:	b40e      	push	{r1, r2, r3}
 800192a:	b503      	push	{r0, r1, lr}
 800192c:	4601      	mov	r1, r0
 800192e:	ab03      	add	r3, sp, #12
 8001930:	4805      	ldr	r0, [pc, #20]	@ (8001948 <fiprintf+0x20>)
 8001932:	f853 2b04 	ldr.w	r2, [r3], #4
 8001936:	6800      	ldr	r0, [r0, #0]
 8001938:	9301      	str	r3, [sp, #4]
 800193a:	f7ff fca3 	bl	8001284 <_vfiprintf_r>
 800193e:	b002      	add	sp, #8
 8001940:	f85d eb04 	ldr.w	lr, [sp], #4
 8001944:	b003      	add	sp, #12
 8001946:	4770      	bx	lr
 8001948:	20000064 	.word	0x20000064

0800194c <__swhatbuf_r>:
 800194c:	b570      	push	{r4, r5, r6, lr}
 800194e:	460c      	mov	r4, r1
 8001950:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001954:	2900      	cmp	r1, #0
 8001956:	b096      	sub	sp, #88	@ 0x58
 8001958:	4615      	mov	r5, r2
 800195a:	461e      	mov	r6, r3
 800195c:	da0d      	bge.n	800197a <__swhatbuf_r+0x2e>
 800195e:	89a3      	ldrh	r3, [r4, #12]
 8001960:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8001964:	f04f 0100 	mov.w	r1, #0
 8001968:	bf14      	ite	ne
 800196a:	2340      	movne	r3, #64	@ 0x40
 800196c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8001970:	2000      	movs	r0, #0
 8001972:	6031      	str	r1, [r6, #0]
 8001974:	602b      	str	r3, [r5, #0]
 8001976:	b016      	add	sp, #88	@ 0x58
 8001978:	bd70      	pop	{r4, r5, r6, pc}
 800197a:	466a      	mov	r2, sp
 800197c:	f000 f848 	bl	8001a10 <_fstat_r>
 8001980:	2800      	cmp	r0, #0
 8001982:	dbec      	blt.n	800195e <__swhatbuf_r+0x12>
 8001984:	9901      	ldr	r1, [sp, #4]
 8001986:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800198a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800198e:	4259      	negs	r1, r3
 8001990:	4159      	adcs	r1, r3
 8001992:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001996:	e7eb      	b.n	8001970 <__swhatbuf_r+0x24>

08001998 <__smakebuf_r>:
 8001998:	898b      	ldrh	r3, [r1, #12]
 800199a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800199c:	079d      	lsls	r5, r3, #30
 800199e:	4606      	mov	r6, r0
 80019a0:	460c      	mov	r4, r1
 80019a2:	d507      	bpl.n	80019b4 <__smakebuf_r+0x1c>
 80019a4:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80019a8:	6023      	str	r3, [r4, #0]
 80019aa:	6123      	str	r3, [r4, #16]
 80019ac:	2301      	movs	r3, #1
 80019ae:	6163      	str	r3, [r4, #20]
 80019b0:	b003      	add	sp, #12
 80019b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80019b4:	ab01      	add	r3, sp, #4
 80019b6:	466a      	mov	r2, sp
 80019b8:	f7ff ffc8 	bl	800194c <__swhatbuf_r>
 80019bc:	9f00      	ldr	r7, [sp, #0]
 80019be:	4605      	mov	r5, r0
 80019c0:	4639      	mov	r1, r7
 80019c2:	4630      	mov	r0, r6
 80019c4:	f7ff fba8 	bl	8001118 <_malloc_r>
 80019c8:	b948      	cbnz	r0, 80019de <__smakebuf_r+0x46>
 80019ca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80019ce:	059a      	lsls	r2, r3, #22
 80019d0:	d4ee      	bmi.n	80019b0 <__smakebuf_r+0x18>
 80019d2:	f023 0303 	bic.w	r3, r3, #3
 80019d6:	f043 0302 	orr.w	r3, r3, #2
 80019da:	81a3      	strh	r3, [r4, #12]
 80019dc:	e7e2      	b.n	80019a4 <__smakebuf_r+0xc>
 80019de:	89a3      	ldrh	r3, [r4, #12]
 80019e0:	6020      	str	r0, [r4, #0]
 80019e2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80019e6:	81a3      	strh	r3, [r4, #12]
 80019e8:	9b01      	ldr	r3, [sp, #4]
 80019ea:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80019ee:	b15b      	cbz	r3, 8001a08 <__smakebuf_r+0x70>
 80019f0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80019f4:	4630      	mov	r0, r6
 80019f6:	f000 f81d 	bl	8001a34 <_isatty_r>
 80019fa:	b128      	cbz	r0, 8001a08 <__smakebuf_r+0x70>
 80019fc:	89a3      	ldrh	r3, [r4, #12]
 80019fe:	f023 0303 	bic.w	r3, r3, #3
 8001a02:	f043 0301 	orr.w	r3, r3, #1
 8001a06:	81a3      	strh	r3, [r4, #12]
 8001a08:	89a3      	ldrh	r3, [r4, #12]
 8001a0a:	431d      	orrs	r5, r3
 8001a0c:	81a5      	strh	r5, [r4, #12]
 8001a0e:	e7cf      	b.n	80019b0 <__smakebuf_r+0x18>

08001a10 <_fstat_r>:
 8001a10:	b538      	push	{r3, r4, r5, lr}
 8001a12:	4d07      	ldr	r5, [pc, #28]	@ (8001a30 <_fstat_r+0x20>)
 8001a14:	2300      	movs	r3, #0
 8001a16:	4604      	mov	r4, r0
 8001a18:	4608      	mov	r0, r1
 8001a1a:	4611      	mov	r1, r2
 8001a1c:	602b      	str	r3, [r5, #0]
 8001a1e:	f7fe ff89 	bl	8000934 <_fstat>
 8001a22:	1c43      	adds	r3, r0, #1
 8001a24:	d102      	bne.n	8001a2c <_fstat_r+0x1c>
 8001a26:	682b      	ldr	r3, [r5, #0]
 8001a28:	b103      	cbz	r3, 8001a2c <_fstat_r+0x1c>
 8001a2a:	6023      	str	r3, [r4, #0]
 8001a2c:	bd38      	pop	{r3, r4, r5, pc}
 8001a2e:	bf00      	nop
 8001a30:	200002ec 	.word	0x200002ec

08001a34 <_isatty_r>:
 8001a34:	b538      	push	{r3, r4, r5, lr}
 8001a36:	4d06      	ldr	r5, [pc, #24]	@ (8001a50 <_isatty_r+0x1c>)
 8001a38:	2300      	movs	r3, #0
 8001a3a:	4604      	mov	r4, r0
 8001a3c:	4608      	mov	r0, r1
 8001a3e:	602b      	str	r3, [r5, #0]
 8001a40:	f7fe ff88 	bl	8000954 <_isatty>
 8001a44:	1c43      	adds	r3, r0, #1
 8001a46:	d102      	bne.n	8001a4e <_isatty_r+0x1a>
 8001a48:	682b      	ldr	r3, [r5, #0]
 8001a4a:	b103      	cbz	r3, 8001a4e <_isatty_r+0x1a>
 8001a4c:	6023      	str	r3, [r4, #0]
 8001a4e:	bd38      	pop	{r3, r4, r5, pc}
 8001a50:	200002ec 	.word	0x200002ec

08001a54 <_sbrk_r>:
 8001a54:	b538      	push	{r3, r4, r5, lr}
 8001a56:	4d06      	ldr	r5, [pc, #24]	@ (8001a70 <_sbrk_r+0x1c>)
 8001a58:	2300      	movs	r3, #0
 8001a5a:	4604      	mov	r4, r0
 8001a5c:	4608      	mov	r0, r1
 8001a5e:	602b      	str	r3, [r5, #0]
 8001a60:	f7fe ff90 	bl	8000984 <_sbrk>
 8001a64:	1c43      	adds	r3, r0, #1
 8001a66:	d102      	bne.n	8001a6e <_sbrk_r+0x1a>
 8001a68:	682b      	ldr	r3, [r5, #0]
 8001a6a:	b103      	cbz	r3, 8001a6e <_sbrk_r+0x1a>
 8001a6c:	6023      	str	r3, [r4, #0]
 8001a6e:	bd38      	pop	{r3, r4, r5, pc}
 8001a70:	200002ec 	.word	0x200002ec

08001a74 <abort>:
 8001a74:	b508      	push	{r3, lr}
 8001a76:	2006      	movs	r0, #6
 8001a78:	f000 f82c 	bl	8001ad4 <raise>
 8001a7c:	2001      	movs	r0, #1
 8001a7e:	f7fe ff09 	bl	8000894 <_exit>

08001a82 <_raise_r>:
 8001a82:	291f      	cmp	r1, #31
 8001a84:	b538      	push	{r3, r4, r5, lr}
 8001a86:	4605      	mov	r5, r0
 8001a88:	460c      	mov	r4, r1
 8001a8a:	d904      	bls.n	8001a96 <_raise_r+0x14>
 8001a8c:	2316      	movs	r3, #22
 8001a8e:	6003      	str	r3, [r0, #0]
 8001a90:	f04f 30ff 	mov.w	r0, #4294967295
 8001a94:	bd38      	pop	{r3, r4, r5, pc}
 8001a96:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8001a98:	b112      	cbz	r2, 8001aa0 <_raise_r+0x1e>
 8001a9a:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8001a9e:	b94b      	cbnz	r3, 8001ab4 <_raise_r+0x32>
 8001aa0:	4628      	mov	r0, r5
 8001aa2:	f000 f831 	bl	8001b08 <_getpid_r>
 8001aa6:	4622      	mov	r2, r4
 8001aa8:	4601      	mov	r1, r0
 8001aaa:	4628      	mov	r0, r5
 8001aac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001ab0:	f000 b818 	b.w	8001ae4 <_kill_r>
 8001ab4:	2b01      	cmp	r3, #1
 8001ab6:	d00a      	beq.n	8001ace <_raise_r+0x4c>
 8001ab8:	1c59      	adds	r1, r3, #1
 8001aba:	d103      	bne.n	8001ac4 <_raise_r+0x42>
 8001abc:	2316      	movs	r3, #22
 8001abe:	6003      	str	r3, [r0, #0]
 8001ac0:	2001      	movs	r0, #1
 8001ac2:	e7e7      	b.n	8001a94 <_raise_r+0x12>
 8001ac4:	2100      	movs	r1, #0
 8001ac6:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8001aca:	4620      	mov	r0, r4
 8001acc:	4798      	blx	r3
 8001ace:	2000      	movs	r0, #0
 8001ad0:	e7e0      	b.n	8001a94 <_raise_r+0x12>
	...

08001ad4 <raise>:
 8001ad4:	4b02      	ldr	r3, [pc, #8]	@ (8001ae0 <raise+0xc>)
 8001ad6:	4601      	mov	r1, r0
 8001ad8:	6818      	ldr	r0, [r3, #0]
 8001ada:	f7ff bfd2 	b.w	8001a82 <_raise_r>
 8001ade:	bf00      	nop
 8001ae0:	20000064 	.word	0x20000064

08001ae4 <_kill_r>:
 8001ae4:	b538      	push	{r3, r4, r5, lr}
 8001ae6:	4d07      	ldr	r5, [pc, #28]	@ (8001b04 <_kill_r+0x20>)
 8001ae8:	2300      	movs	r3, #0
 8001aea:	4604      	mov	r4, r0
 8001aec:	4608      	mov	r0, r1
 8001aee:	4611      	mov	r1, r2
 8001af0:	602b      	str	r3, [r5, #0]
 8001af2:	f7fe febf 	bl	8000874 <_kill>
 8001af6:	1c43      	adds	r3, r0, #1
 8001af8:	d102      	bne.n	8001b00 <_kill_r+0x1c>
 8001afa:	682b      	ldr	r3, [r5, #0]
 8001afc:	b103      	cbz	r3, 8001b00 <_kill_r+0x1c>
 8001afe:	6023      	str	r3, [r4, #0]
 8001b00:	bd38      	pop	{r3, r4, r5, pc}
 8001b02:	bf00      	nop
 8001b04:	200002ec 	.word	0x200002ec

08001b08 <_getpid_r>:
 8001b08:	f7fe beac 	b.w	8000864 <_getpid>

08001b0c <_init>:
 8001b0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001b0e:	bf00      	nop
 8001b10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001b12:	bc08      	pop	{r3}
 8001b14:	469e      	mov	lr, r3
 8001b16:	4770      	bx	lr

08001b18 <_fini>:
 8001b18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001b1a:	bf00      	nop
 8001b1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001b1e:	bc08      	pop	{r3}
 8001b20:	469e      	mov	lr, r3
 8001b22:	4770      	bx	lr
