
Riddles_1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001c24  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000684  08001dc4  08001dc4  00002dc4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002448  08002448  000040b4  2**0
                  CONTENTS
  4 .ARM          00000008  08002448  08002448  00003448  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002450  08002450  000040b4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002450  08002450  00003450  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08002454  08002454  00003454  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000000b4  20000000  08002458  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000040b4  2**0
                  CONTENTS
 10 .bss          00000250  200000b4  200000b4  000040b4  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000304  20000304  000040b4  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000040b4  2**0
                  CONTENTS, READONLY
 13 .debug_info   000017fd  00000000  00000000  000040e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000072a  00000000  00000000  000058e1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000001c0  00000000  00000000  00006010  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000014b  00000000  00000000  000061d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00016d67  00000000  00000000  0000631b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00001fc4  00000000  00000000  0001d082  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00078cc0  00000000  00000000  0001f046  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00097d06  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00001100  00000000  00000000  00097d4c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000068  00000000  00000000  00098e4c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200000b4 	.word	0x200000b4
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08001dac 	.word	0x08001dac

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200000b8 	.word	0x200000b8
 80001dc:	08001dac 	.word	0x08001dac

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__io_putchar>:
#include <stdint.h>
#include <stdio.h>
#include "stm32f303xc.h"
#include "riddles.h"

int __io_putchar(int ch) {
 80002a0:	b580      	push	{r7, lr}
 80002a2:	b082      	sub	sp, #8
 80002a4:	af00      	add	r7, sp, #0
 80002a6:	6078      	str	r0, [r7, #4]
    SerialOutputChar((uint8_t)ch, &USART1_PORT);
 80002a8:	687b      	ldr	r3, [r7, #4]
 80002aa:	b2db      	uxtb	r3, r3
 80002ac:	4904      	ldr	r1, [pc, #16]	@ (80002c0 <__io_putchar+0x20>)
 80002ae:	4618      	mov	r0, r3
 80002b0:	f000 fae6 	bl	8000880 <SerialOutputChar>
    return ch;
 80002b4:	687b      	ldr	r3, [r7, #4]
}
 80002b6:	4618      	mov	r0, r3
 80002b8:	3708      	adds	r7, #8
 80002ba:	46bd      	mov	sp, r7
 80002bc:	bd80      	pop	{r7, pc}
 80002be:	bf00      	nop
 80002c0:	2000002c 	.word	0x2000002c

080002c4 <InitialisePA1AsInput>:

static uint8_t riddleAsked = 0;
static uint8_t completedMessageShown = 0;
static uint8_t prevPA3State = 0;

void InitialisePA1AsInput(void) {
 80002c4:	b480      	push	{r7}
 80002c6:	af00      	add	r7, sp, #0
    RCC->AHBENR |= RCC_AHBENR_GPIOAEN;
 80002c8:	4b0d      	ldr	r3, [pc, #52]	@ (8000300 <InitialisePA1AsInput+0x3c>)
 80002ca:	695b      	ldr	r3, [r3, #20]
 80002cc:	4a0c      	ldr	r2, [pc, #48]	@ (8000300 <InitialisePA1AsInput+0x3c>)
 80002ce:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80002d2:	6153      	str	r3, [r2, #20]
    GPIOA->MODER &= ~(3U << (1 * 2));
 80002d4:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80002d8:	681b      	ldr	r3, [r3, #0]
 80002da:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 80002de:	f023 030c 	bic.w	r3, r3, #12
 80002e2:	6013      	str	r3, [r2, #0]
    GPIOA->PUPDR &= ~(3U << (1 * 2));
 80002e4:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80002e8:	68db      	ldr	r3, [r3, #12]
 80002ea:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 80002ee:	f023 030c 	bic.w	r3, r3, #12
 80002f2:	60d3      	str	r3, [r2, #12]
}
 80002f4:	bf00      	nop
 80002f6:	46bd      	mov	sp, r7
 80002f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002fc:	4770      	bx	lr
 80002fe:	bf00      	nop
 8000300:	40021000 	.word	0x40021000

08000304 <InitialisePA3AsInput>:

void InitialisePA3AsInput(void) {
 8000304:	b480      	push	{r7}
 8000306:	af00      	add	r7, sp, #0
    RCC->AHBENR |= RCC_AHBENR_GPIOAEN;
 8000308:	4b0d      	ldr	r3, [pc, #52]	@ (8000340 <InitialisePA3AsInput+0x3c>)
 800030a:	695b      	ldr	r3, [r3, #20]
 800030c:	4a0c      	ldr	r2, [pc, #48]	@ (8000340 <InitialisePA3AsInput+0x3c>)
 800030e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000312:	6153      	str	r3, [r2, #20]
    GPIOA->MODER &= ~(3U << (3 * 2));
 8000314:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000318:	681b      	ldr	r3, [r3, #0]
 800031a:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 800031e:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8000322:	6013      	str	r3, [r2, #0]
    GPIOA->PUPDR &= ~(3U << (3 * 2));
 8000324:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000328:	68db      	ldr	r3, [r3, #12]
 800032a:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 800032e:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8000332:	60d3      	str	r3, [r2, #12]
}
 8000334:	bf00      	nop
 8000336:	46bd      	mov	sp, r7
 8000338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800033c:	4770      	bx	lr
 800033e:	bf00      	nop
 8000340:	40021000 	.word	0x40021000

08000344 <main>:

int main(void) {
 8000344:	b580      	push	{r7, lr}
 8000346:	b082      	sub	sp, #8
 8000348:	af00      	add	r7, sp, #0
    InitialisePA1AsInput();
 800034a:	f7ff ffbb 	bl	80002c4 <InitialisePA1AsInput>
    InitialisePA3AsInput();
 800034e:	f7ff ffd9 	bl	8000304 <InitialisePA3AsInput>
    SerialInitialise(BAUD_115200, &USART1_PORT, NULL);
 8000352:	2200      	movs	r2, #0
 8000354:	4931      	ldr	r1, [pc, #196]	@ (800041c <main+0xd8>)
 8000356:	2004      	movs	r0, #4
 8000358:	f000 fa2c 	bl	80007b4 <SerialInitialise>
    SerialSetReceiveCallback(&USART1_PORT, OnLineReceived);
 800035c:	4930      	ldr	r1, [pc, #192]	@ (8000420 <main+0xdc>)
 800035e:	482f      	ldr	r0, [pc, #188]	@ (800041c <main+0xd8>)
 8000360:	f000 faa7 	bl	80008b2 <SerialSetReceiveCallback>

    while (1) {
        // PA1 triggers riddle module
        if ((GPIOA->IDR & (1 << 1)) && isMinigame1Completed() && !isMinigame2Completed() && !riddleAsked) {
 8000364:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000368:	691b      	ldr	r3, [r3, #16]
 800036a:	f003 0302 	and.w	r3, r3, #2
 800036e:	2b00      	cmp	r3, #0
 8000370:	d013      	beq.n	800039a <main+0x56>
 8000372:	f000 f9fb 	bl	800076c <isMinigame1Completed>
 8000376:	4603      	mov	r3, r0
 8000378:	2b00      	cmp	r3, #0
 800037a:	d00e      	beq.n	800039a <main+0x56>
 800037c:	f000 fa08 	bl	8000790 <isMinigame2Completed>
 8000380:	4603      	mov	r3, r0
 8000382:	2b00      	cmp	r3, #0
 8000384:	d109      	bne.n	800039a <main+0x56>
 8000386:	4b27      	ldr	r3, [pc, #156]	@ (8000424 <main+0xe0>)
 8000388:	781b      	ldrb	r3, [r3, #0]
 800038a:	2b00      	cmp	r3, #0
 800038c:	d105      	bne.n	800039a <main+0x56>
            AskNewRiddle();
 800038e:	f000 f8eb 	bl	8000568 <AskNewRiddle>
            riddleAsked = 1;
 8000392:	4b24      	ldr	r3, [pc, #144]	@ (8000424 <main+0xe0>)
 8000394:	2201      	movs	r2, #1
 8000396:	701a      	strb	r2, [r3, #0]
        if ((GPIOA->IDR & (1 << 1)) && isMinigame1Completed() && !isMinigame2Completed() && !riddleAsked) {
 8000398:	e015      	b.n	80003c6 <main+0x82>
        } else if ((GPIOA->IDR & (1 << 1)) && isMinigame2Completed() && !completedMessageShown) {
 800039a:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800039e:	691b      	ldr	r3, [r3, #16]
 80003a0:	f003 0302 	and.w	r3, r3, #2
 80003a4:	2b00      	cmp	r3, #0
 80003a6:	d00e      	beq.n	80003c6 <main+0x82>
 80003a8:	f000 f9f2 	bl	8000790 <isMinigame2Completed>
 80003ac:	4603      	mov	r3, r0
 80003ae:	2b00      	cmp	r3, #0
 80003b0:	d009      	beq.n	80003c6 <main+0x82>
 80003b2:	4b1d      	ldr	r3, [pc, #116]	@ (8000428 <main+0xe4>)
 80003b4:	781b      	ldrb	r3, [r3, #0]
 80003b6:	2b00      	cmp	r3, #0
 80003b8:	d105      	bne.n	80003c6 <main+0x82>
            printf("\r\nYou've already completed this riddle challenge! Proceed to the next game.\r\n");
 80003ba:	481c      	ldr	r0, [pc, #112]	@ (800042c <main+0xe8>)
 80003bc:	f000 fdfa 	bl	8000fb4 <puts>
            completedMessageShown = 1;
 80003c0:	4b19      	ldr	r3, [pc, #100]	@ (8000428 <main+0xe4>)
 80003c2:	2201      	movs	r2, #1
 80003c4:	701a      	strb	r2, [r3, #0]
        }

        if (!(GPIOA->IDR & (1 << 1))) {
 80003c6:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80003ca:	691b      	ldr	r3, [r3, #16]
 80003cc:	f003 0302 	and.w	r3, r3, #2
 80003d0:	2b00      	cmp	r3, #0
 80003d2:	d105      	bne.n	80003e0 <main+0x9c>
            riddleAsked = 0;
 80003d4:	4b13      	ldr	r3, [pc, #76]	@ (8000424 <main+0xe0>)
 80003d6:	2200      	movs	r2, #0
 80003d8:	701a      	strb	r2, [r3, #0]
            completedMessageShown = 0;
 80003da:	4b13      	ldr	r3, [pc, #76]	@ (8000428 <main+0xe4>)
 80003dc:	2200      	movs	r2, #0
 80003de:	701a      	strb	r2, [r3, #0]
        }

        // PA3 triggers next module
        uint8_t currentPA3State = (GPIOA->IDR & (1 << 3)) != 0;
 80003e0:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80003e4:	691b      	ldr	r3, [r3, #16]
 80003e6:	f003 0308 	and.w	r3, r3, #8
 80003ea:	2b00      	cmp	r3, #0
 80003ec:	bf14      	ite	ne
 80003ee:	2301      	movne	r3, #1
 80003f0:	2300      	moveq	r3, #0
 80003f2:	b2db      	uxtb	r3, r3
 80003f4:	71fb      	strb	r3, [r7, #7]
        if (currentPA3State && !prevPA3State && isMinigame2Completed()) {
 80003f6:	79fb      	ldrb	r3, [r7, #7]
 80003f8:	2b00      	cmp	r3, #0
 80003fa:	d00b      	beq.n	8000414 <main+0xd0>
 80003fc:	4b0c      	ldr	r3, [pc, #48]	@ (8000430 <main+0xec>)
 80003fe:	781b      	ldrb	r3, [r3, #0]
 8000400:	2b00      	cmp	r3, #0
 8000402:	d107      	bne.n	8000414 <main+0xd0>
 8000404:	f000 f9c4 	bl	8000790 <isMinigame2Completed>
 8000408:	4603      	mov	r3, r0
 800040a:	2b00      	cmp	r3, #0
 800040c:	d002      	beq.n	8000414 <main+0xd0>
            printf("\r\nLED module\r\n");
 800040e:	4809      	ldr	r0, [pc, #36]	@ (8000434 <main+0xf0>)
 8000410:	f000 fdd0 	bl	8000fb4 <puts>
            // game_progress |= 0b0100;
        }
        prevPA3State = currentPA3State;
 8000414:	4a06      	ldr	r2, [pc, #24]	@ (8000430 <main+0xec>)
 8000416:	79fb      	ldrb	r3, [r7, #7]
 8000418:	7013      	strb	r3, [r2, #0]
    while (1) {
 800041a:	e7a3      	b.n	8000364 <main+0x20>
 800041c:	2000002c 	.word	0x2000002c
 8000420:	08000629 	.word	0x08000629
 8000424:	200000d0 	.word	0x200000d0
 8000428:	200000d1 	.word	0x200000d1
 800042c:	08001dc4 	.word	0x08001dc4
 8000430:	200000d2 	.word	0x200000d2
 8000434:	08001e14 	.word	0x08001e14

08000438 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000438:	b480      	push	{r7}
 800043a:	b083      	sub	sp, #12
 800043c:	af00      	add	r7, sp, #0
 800043e:	4603      	mov	r3, r0
 8000440:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000442:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000446:	2b00      	cmp	r3, #0
 8000448:	db0b      	blt.n	8000462 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800044a:	79fb      	ldrb	r3, [r7, #7]
 800044c:	f003 021f 	and.w	r2, r3, #31
 8000450:	4907      	ldr	r1, [pc, #28]	@ (8000470 <__NVIC_EnableIRQ+0x38>)
 8000452:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000456:	095b      	lsrs	r3, r3, #5
 8000458:	2001      	movs	r0, #1
 800045a:	fa00 f202 	lsl.w	r2, r0, r2
 800045e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000462:	bf00      	nop
 8000464:	370c      	adds	r7, #12
 8000466:	46bd      	mov	sp, r7
 8000468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800046c:	4770      	bx	lr
 800046e:	bf00      	nop
 8000470:	e000e100 	.word	0xe000e100

08000474 <ToLowerCase>:
static uint8_t riddle_step = 0; // 0: riddle, 1: math, 2: cipher
static int math_answer = 0;

// ------------------- Utility Functions -------------------

static void ToLowerCase(char *str) {
 8000474:	b480      	push	{r7}
 8000476:	b085      	sub	sp, #20
 8000478:	af00      	add	r7, sp, #0
 800047a:	6078      	str	r0, [r7, #4]
    while (*str) {
 800047c:	e015      	b.n	80004aa <ToLowerCase+0x36>
        *str = tolower((unsigned char)*str);
 800047e:	687b      	ldr	r3, [r7, #4]
 8000480:	781b      	ldrb	r3, [r3, #0]
 8000482:	73fb      	strb	r3, [r7, #15]
 8000484:	7bfb      	ldrb	r3, [r7, #15]
 8000486:	3301      	adds	r3, #1
 8000488:	4a0d      	ldr	r2, [pc, #52]	@ (80004c0 <ToLowerCase+0x4c>)
 800048a:	4413      	add	r3, r2
 800048c:	781b      	ldrb	r3, [r3, #0]
 800048e:	f003 0303 	and.w	r3, r3, #3
 8000492:	2b01      	cmp	r3, #1
 8000494:	d102      	bne.n	800049c <ToLowerCase+0x28>
 8000496:	7bfb      	ldrb	r3, [r7, #15]
 8000498:	3320      	adds	r3, #32
 800049a:	e000      	b.n	800049e <ToLowerCase+0x2a>
 800049c:	7bfb      	ldrb	r3, [r7, #15]
 800049e:	b2da      	uxtb	r2, r3
 80004a0:	687b      	ldr	r3, [r7, #4]
 80004a2:	701a      	strb	r2, [r3, #0]
        str++;
 80004a4:	687b      	ldr	r3, [r7, #4]
 80004a6:	3301      	adds	r3, #1
 80004a8:	607b      	str	r3, [r7, #4]
    while (*str) {
 80004aa:	687b      	ldr	r3, [r7, #4]
 80004ac:	781b      	ldrb	r3, [r3, #0]
 80004ae:	2b00      	cmp	r3, #0
 80004b0:	d1e5      	bne.n	800047e <ToLowerCase+0xa>
    }
}
 80004b2:	bf00      	nop
 80004b4:	bf00      	nop
 80004b6:	3714      	adds	r7, #20
 80004b8:	46bd      	mov	sp, r7
 80004ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004be:	4770      	bx	lr
 80004c0:	080022d6 	.word	0x080022d6

080004c4 <CaesarCipher>:

static void CaesarCipher(char *dest, const char *src, int shift) {
 80004c4:	b480      	push	{r7}
 80004c6:	b087      	sub	sp, #28
 80004c8:	af00      	add	r7, sp, #0
 80004ca:	60f8      	str	r0, [r7, #12]
 80004cc:	60b9      	str	r1, [r7, #8]
 80004ce:	607a      	str	r2, [r7, #4]
    while (*src) {
 80004d0:	e039      	b.n	8000546 <CaesarCipher+0x82>
        if (isalpha(*src)) {
 80004d2:	68bb      	ldr	r3, [r7, #8]
 80004d4:	781b      	ldrb	r3, [r3, #0]
 80004d6:	3301      	adds	r3, #1
 80004d8:	4a21      	ldr	r2, [pc, #132]	@ (8000560 <CaesarCipher+0x9c>)
 80004da:	4413      	add	r3, r2
 80004dc:	781b      	ldrb	r3, [r3, #0]
 80004de:	f003 0303 	and.w	r3, r3, #3
 80004e2:	2b00      	cmp	r3, #0
 80004e4:	d025      	beq.n	8000532 <CaesarCipher+0x6e>
            char base = islower(*src) ? 'a' : 'A';
 80004e6:	68bb      	ldr	r3, [r7, #8]
 80004e8:	781b      	ldrb	r3, [r3, #0]
 80004ea:	3301      	adds	r3, #1
 80004ec:	4a1c      	ldr	r2, [pc, #112]	@ (8000560 <CaesarCipher+0x9c>)
 80004ee:	4413      	add	r3, r2
 80004f0:	781b      	ldrb	r3, [r3, #0]
 80004f2:	f003 0303 	and.w	r3, r3, #3
 80004f6:	2b02      	cmp	r3, #2
 80004f8:	d101      	bne.n	80004fe <CaesarCipher+0x3a>
 80004fa:	2361      	movs	r3, #97	@ 0x61
 80004fc:	e000      	b.n	8000500 <CaesarCipher+0x3c>
 80004fe:	2341      	movs	r3, #65	@ 0x41
 8000500:	75fb      	strb	r3, [r7, #23]
            *dest = (char)(((*src - base + shift) % 26) + base);
 8000502:	68bb      	ldr	r3, [r7, #8]
 8000504:	781b      	ldrb	r3, [r3, #0]
 8000506:	461a      	mov	r2, r3
 8000508:	7dfb      	ldrb	r3, [r7, #23]
 800050a:	1ad2      	subs	r2, r2, r3
 800050c:	687b      	ldr	r3, [r7, #4]
 800050e:	4413      	add	r3, r2
 8000510:	4a14      	ldr	r2, [pc, #80]	@ (8000564 <CaesarCipher+0xa0>)
 8000512:	fb82 1203 	smull	r1, r2, r2, r3
 8000516:	10d1      	asrs	r1, r2, #3
 8000518:	17da      	asrs	r2, r3, #31
 800051a:	1a8a      	subs	r2, r1, r2
 800051c:	211a      	movs	r1, #26
 800051e:	fb01 f202 	mul.w	r2, r1, r2
 8000522:	1a9a      	subs	r2, r3, r2
 8000524:	b2d2      	uxtb	r2, r2
 8000526:	7dfb      	ldrb	r3, [r7, #23]
 8000528:	4413      	add	r3, r2
 800052a:	b2da      	uxtb	r2, r3
 800052c:	68fb      	ldr	r3, [r7, #12]
 800052e:	701a      	strb	r2, [r3, #0]
 8000530:	e003      	b.n	800053a <CaesarCipher+0x76>
        } else {
            *dest = *src;
 8000532:	68bb      	ldr	r3, [r7, #8]
 8000534:	781a      	ldrb	r2, [r3, #0]
 8000536:	68fb      	ldr	r3, [r7, #12]
 8000538:	701a      	strb	r2, [r3, #0]
        }
        src++;
 800053a:	68bb      	ldr	r3, [r7, #8]
 800053c:	3301      	adds	r3, #1
 800053e:	60bb      	str	r3, [r7, #8]
        dest++;
 8000540:	68fb      	ldr	r3, [r7, #12]
 8000542:	3301      	adds	r3, #1
 8000544:	60fb      	str	r3, [r7, #12]
    while (*src) {
 8000546:	68bb      	ldr	r3, [r7, #8]
 8000548:	781b      	ldrb	r3, [r3, #0]
 800054a:	2b00      	cmp	r3, #0
 800054c:	d1c1      	bne.n	80004d2 <CaesarCipher+0xe>
    }
    *dest = '\0';
 800054e:	68fb      	ldr	r3, [r7, #12]
 8000550:	2200      	movs	r2, #0
 8000552:	701a      	strb	r2, [r3, #0]
}
 8000554:	bf00      	nop
 8000556:	371c      	adds	r7, #28
 8000558:	46bd      	mov	sp, r7
 800055a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800055e:	4770      	bx	lr
 8000560:	080022d6 	.word	0x080022d6
 8000564:	4ec4ec4f 	.word	0x4ec4ec4f

08000568 <AskNewRiddle>:

// ------------------- Game Flow -------------------

void AskNewRiddle(void) {
 8000568:	b590      	push	{r4, r7, lr}
 800056a:	b083      	sub	sp, #12
 800056c:	af00      	add	r7, sp, #0
    int index = rand() % NUM_RIDDLES;
 800056e:	f000 fb35 	bl	8000bdc <rand>
 8000572:	4603      	mov	r3, r0
 8000574:	4619      	mov	r1, r3
 8000576:	4b10      	ldr	r3, [pc, #64]	@ (80005b8 <AskNewRiddle+0x50>)
 8000578:	fba3 2301 	umull	r2, r3, r3, r1
 800057c:	089a      	lsrs	r2, r3, #2
 800057e:	4613      	mov	r3, r2
 8000580:	009b      	lsls	r3, r3, #2
 8000582:	4413      	add	r3, r2
 8000584:	1aca      	subs	r2, r1, r3
 8000586:	607a      	str	r2, [r7, #4]
    current_riddle = riddles[index];
 8000588:	490c      	ldr	r1, [pc, #48]	@ (80005bc <AskNewRiddle+0x54>)
 800058a:	4a0d      	ldr	r2, [pc, #52]	@ (80005c0 <AskNewRiddle+0x58>)
 800058c:	687b      	ldr	r3, [r7, #4]
 800058e:	460c      	mov	r4, r1
 8000590:	00db      	lsls	r3, r3, #3
 8000592:	4413      	add	r3, r2
 8000594:	e893 0003 	ldmia.w	r3, {r0, r1}
 8000598:	e884 0003 	stmia.w	r4, {r0, r1}
    riddle_step = 0;  // Reset internal riddle state
 800059c:	4b09      	ldr	r3, [pc, #36]	@ (80005c4 <AskNewRiddle+0x5c>)
 800059e:	2200      	movs	r2, #0
 80005a0:	701a      	strb	r2, [r3, #0]
    printf("\r\nAHOY - It's Riddle Time! Solve this riddle to find the next step to the treasure.\r\n%s\r\n> ", current_riddle.riddle);
 80005a2:	4b06      	ldr	r3, [pc, #24]	@ (80005bc <AskNewRiddle+0x54>)
 80005a4:	681b      	ldr	r3, [r3, #0]
 80005a6:	4619      	mov	r1, r3
 80005a8:	4807      	ldr	r0, [pc, #28]	@ (80005c8 <AskNewRiddle+0x60>)
 80005aa:	f000 fc9b 	bl	8000ee4 <iprintf>
}
 80005ae:	bf00      	nop
 80005b0:	370c      	adds	r7, #12
 80005b2:	46bd      	mov	sp, r7
 80005b4:	bd90      	pop	{r4, r7, pc}
 80005b6:	bf00      	nop
 80005b8:	cccccccd 	.word	0xcccccccd
 80005bc:	200000d4 	.word	0x200000d4
 80005c0:	20000000 	.word	0x20000000
 80005c4:	2000016c 	.word	0x2000016c
 80005c8:	08001ff4 	.word	0x08001ff4

080005cc <AskMathQuestion>:

static void AskMathQuestion(void) {
 80005cc:	b580      	push	{r7, lr}
 80005ce:	af00      	add	r7, sp, #0
    math_answer = (rand() % 5) + 1;
 80005d0:	f000 fb04 	bl	8000bdc <rand>
 80005d4:	4601      	mov	r1, r0
 80005d6:	4b0a      	ldr	r3, [pc, #40]	@ (8000600 <AskMathQuestion+0x34>)
 80005d8:	fb83 2301 	smull	r2, r3, r3, r1
 80005dc:	105a      	asrs	r2, r3, #1
 80005de:	17cb      	asrs	r3, r1, #31
 80005e0:	1ad2      	subs	r2, r2, r3
 80005e2:	4613      	mov	r3, r2
 80005e4:	009b      	lsls	r3, r3, #2
 80005e6:	4413      	add	r3, r2
 80005e8:	1aca      	subs	r2, r1, r3
 80005ea:	1c53      	adds	r3, r2, #1
 80005ec:	4a05      	ldr	r2, [pc, #20]	@ (8000604 <AskMathQuestion+0x38>)
 80005ee:	6013      	str	r3, [r2, #0]
    printf("\r\nNow answer this: What is %d + 0?\r\n> ", math_answer);
 80005f0:	4b04      	ldr	r3, [pc, #16]	@ (8000604 <AskMathQuestion+0x38>)
 80005f2:	681b      	ldr	r3, [r3, #0]
 80005f4:	4619      	mov	r1, r3
 80005f6:	4804      	ldr	r0, [pc, #16]	@ (8000608 <AskMathQuestion+0x3c>)
 80005f8:	f000 fc74 	bl	8000ee4 <iprintf>
}
 80005fc:	bf00      	nop
 80005fe:	bd80      	pop	{r7, pc}
 8000600:	66666667 	.word	0x66666667
 8000604:	20000170 	.word	0x20000170
 8000608:	08002050 	.word	0x08002050

0800060c <AskCaesarChallenge>:

static void AskCaesarChallenge(void) {
 800060c:	b580      	push	{r7, lr}
 800060e:	af00      	add	r7, sp, #0
    printf("\r\nFinal task! Enter the Caesar cipher of the riddle answer with a shift of %d.\r\n> ", math_answer);
 8000610:	4b03      	ldr	r3, [pc, #12]	@ (8000620 <AskCaesarChallenge+0x14>)
 8000612:	681b      	ldr	r3, [r3, #0]
 8000614:	4619      	mov	r1, r3
 8000616:	4803      	ldr	r0, [pc, #12]	@ (8000624 <AskCaesarChallenge+0x18>)
 8000618:	f000 fc64 	bl	8000ee4 <iprintf>
}
 800061c:	bf00      	nop
 800061e:	bd80      	pop	{r7, pc}
 8000620:	20000170 	.word	0x20000170
 8000624:	08002078 	.word	0x08002078

08000628 <OnLineReceived>:

void OnLineReceived(char *string, uint32_t length) {
 8000628:	b580      	push	{r7, lr}
 800062a:	b094      	sub	sp, #80	@ 0x50
 800062c:	af00      	add	r7, sp, #0
 800062e:	6078      	str	r0, [r7, #4]
 8000630:	6039      	str	r1, [r7, #0]
    static char user_input[64];
    strncpy(user_input, string, sizeof(user_input) - 1);
 8000632:	223f      	movs	r2, #63	@ 0x3f
 8000634:	6879      	ldr	r1, [r7, #4]
 8000636:	483f      	ldr	r0, [pc, #252]	@ (8000734 <OnLineReceived+0x10c>)
 8000638:	f000 fda4 	bl	8001184 <strncpy>
    user_input[sizeof(user_input) - 1] = '\0';
 800063c:	4b3d      	ldr	r3, [pc, #244]	@ (8000734 <OnLineReceived+0x10c>)
 800063e:	2200      	movs	r2, #0
 8000640:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
    ToLowerCase(user_input);
 8000644:	483b      	ldr	r0, [pc, #236]	@ (8000734 <OnLineReceived+0x10c>)
 8000646:	f7ff ff15 	bl	8000474 <ToLowerCase>

    if (!(game_progress & 0b0001)) {
 800064a:	4b3b      	ldr	r3, [pc, #236]	@ (8000738 <OnLineReceived+0x110>)
 800064c:	781b      	ldrb	r3, [r3, #0]
 800064e:	f003 0301 	and.w	r3, r3, #1
 8000652:	2b00      	cmp	r3, #0
 8000654:	d103      	bne.n	800065e <OnLineReceived+0x36>
        printf("\r\nYou must complete Minigame 1 before attempting this!\r\n");
 8000656:	4839      	ldr	r0, [pc, #228]	@ (800073c <OnLineReceived+0x114>)
 8000658:	f000 fcac 	bl	8000fb4 <puts>
        return;
 800065c:	e067      	b.n	800072e <OnLineReceived+0x106>
    }

    if (game_progress & 0b0010) {
 800065e:	4b36      	ldr	r3, [pc, #216]	@ (8000738 <OnLineReceived+0x110>)
 8000660:	781b      	ldrb	r3, [r3, #0]
 8000662:	f003 0302 	and.w	r3, r3, #2
 8000666:	2b00      	cmp	r3, #0
 8000668:	d003      	beq.n	8000672 <OnLineReceived+0x4a>
        printf("\r\nYou've already completed this riddle challenge! Proceed to the next game.\r\n");
 800066a:	4835      	ldr	r0, [pc, #212]	@ (8000740 <OnLineReceived+0x118>)
 800066c:	f000 fca2 	bl	8000fb4 <puts>
        return;
 8000670:	e05d      	b.n	800072e <OnLineReceived+0x106>
    }

    switch (riddle_step) {
 8000672:	4b34      	ldr	r3, [pc, #208]	@ (8000744 <OnLineReceived+0x11c>)
 8000674:	781b      	ldrb	r3, [r3, #0]
 8000676:	2b02      	cmp	r3, #2
 8000678:	d032      	beq.n	80006e0 <OnLineReceived+0xb8>
 800067a:	2b02      	cmp	r3, #2
 800067c:	dc51      	bgt.n	8000722 <OnLineReceived+0xfa>
 800067e:	2b00      	cmp	r3, #0
 8000680:	d002      	beq.n	8000688 <OnLineReceived+0x60>
 8000682:	2b01      	cmp	r3, #1
 8000684:	d016      	beq.n	80006b4 <OnLineReceived+0x8c>
 8000686:	e04c      	b.n	8000722 <OnLineReceived+0xfa>
        case 0:  // Solve riddle
            if (strcmp(user_input, current_riddle.answer) == 0) {
 8000688:	4b2f      	ldr	r3, [pc, #188]	@ (8000748 <OnLineReceived+0x120>)
 800068a:	685b      	ldr	r3, [r3, #4]
 800068c:	4619      	mov	r1, r3
 800068e:	4829      	ldr	r0, [pc, #164]	@ (8000734 <OnLineReceived+0x10c>)
 8000690:	f7ff fda6 	bl	80001e0 <strcmp>
 8000694:	4603      	mov	r3, r0
 8000696:	2b00      	cmp	r3, #0
 8000698:	d108      	bne.n	80006ac <OnLineReceived+0x84>
                printf("\r\nCorrect! Step 1 complete.\r\n");
 800069a:	482c      	ldr	r0, [pc, #176]	@ (800074c <OnLineReceived+0x124>)
 800069c:	f000 fc8a 	bl	8000fb4 <puts>
                riddle_step = 1;
 80006a0:	4b28      	ldr	r3, [pc, #160]	@ (8000744 <OnLineReceived+0x11c>)
 80006a2:	2201      	movs	r2, #1
 80006a4:	701a      	strb	r2, [r3, #0]
                AskMathQuestion();
 80006a6:	f7ff ff91 	bl	80005cc <AskMathQuestion>
            } else {
                printf("\r\nIncorrect. Try again!\r\n> ");
            }
            break;
 80006aa:	e040      	b.n	800072e <OnLineReceived+0x106>
                printf("\r\nIncorrect. Try again!\r\n> ");
 80006ac:	4828      	ldr	r0, [pc, #160]	@ (8000750 <OnLineReceived+0x128>)
 80006ae:	f000 fc19 	bl	8000ee4 <iprintf>
            break;
 80006b2:	e03c      	b.n	800072e <OnLineReceived+0x106>

        case 1: { // Solve math
            int answer = atoi(user_input);
 80006b4:	481f      	ldr	r0, [pc, #124]	@ (8000734 <OnLineReceived+0x10c>)
 80006b6:	f000 fa8c 	bl	8000bd2 <atoi>
 80006ba:	64f8      	str	r0, [r7, #76]	@ 0x4c
            if (answer == math_answer) {
 80006bc:	4b25      	ldr	r3, [pc, #148]	@ (8000754 <OnLineReceived+0x12c>)
 80006be:	681b      	ldr	r3, [r3, #0]
 80006c0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80006c2:	429a      	cmp	r2, r3
 80006c4:	d108      	bne.n	80006d8 <OnLineReceived+0xb0>
                printf("\r\nWell done! Step 2 complete.\r\n");
 80006c6:	4824      	ldr	r0, [pc, #144]	@ (8000758 <OnLineReceived+0x130>)
 80006c8:	f000 fc74 	bl	8000fb4 <puts>
                riddle_step = 2;
 80006cc:	4b1d      	ldr	r3, [pc, #116]	@ (8000744 <OnLineReceived+0x11c>)
 80006ce:	2202      	movs	r2, #2
 80006d0:	701a      	strb	r2, [r3, #0]
                AskCaesarChallenge();
 80006d2:	f7ff ff9b 	bl	800060c <AskCaesarChallenge>
            } else {
                printf("\r\nThat's not right. Try again!\r\n> ");
            }
            break;
 80006d6:	e02a      	b.n	800072e <OnLineReceived+0x106>
                printf("\r\nThat's not right. Try again!\r\n> ");
 80006d8:	4820      	ldr	r0, [pc, #128]	@ (800075c <OnLineReceived+0x134>)
 80006da:	f000 fc03 	bl	8000ee4 <iprintf>
            break;
 80006de:	e026      	b.n	800072e <OnLineReceived+0x106>
        }

        case 2: { // Caesar cipher
            char expected[64];
            CaesarCipher(expected, current_riddle.answer, math_answer);
 80006e0:	4b19      	ldr	r3, [pc, #100]	@ (8000748 <OnLineReceived+0x120>)
 80006e2:	6859      	ldr	r1, [r3, #4]
 80006e4:	4b1b      	ldr	r3, [pc, #108]	@ (8000754 <OnLineReceived+0x12c>)
 80006e6:	681a      	ldr	r2, [r3, #0]
 80006e8:	f107 030c 	add.w	r3, r7, #12
 80006ec:	4618      	mov	r0, r3
 80006ee:	f7ff fee9 	bl	80004c4 <CaesarCipher>

            if (strcmp(user_input, expected) == 0) {
 80006f2:	f107 030c 	add.w	r3, r7, #12
 80006f6:	4619      	mov	r1, r3
 80006f8:	480e      	ldr	r0, [pc, #56]	@ (8000734 <OnLineReceived+0x10c>)
 80006fa:	f7ff fd71 	bl	80001e0 <strcmp>
 80006fe:	4603      	mov	r3, r0
 8000700:	2b00      	cmp	r3, #0
 8000702:	d10a      	bne.n	800071a <OnLineReceived+0xf2>
                printf("\r\nIncredible! You completed all steps of the Riddle Challenge!\r\n");
 8000704:	4816      	ldr	r0, [pc, #88]	@ (8000760 <OnLineReceived+0x138>)
 8000706:	f000 fc55 	bl	8000fb4 <puts>
                game_progress |= 0b0010;
 800070a:	4b0b      	ldr	r3, [pc, #44]	@ (8000738 <OnLineReceived+0x110>)
 800070c:	781b      	ldrb	r3, [r3, #0]
 800070e:	f043 0302 	orr.w	r3, r3, #2
 8000712:	b2da      	uxtb	r2, r3
 8000714:	4b08      	ldr	r3, [pc, #32]	@ (8000738 <OnLineReceived+0x110>)
 8000716:	701a      	strb	r2, [r3, #0]
            } else {
                printf("\r\nHmm, that’s not correct. Try again!\r\n> ");
            }
            break;
 8000718:	e009      	b.n	800072e <OnLineReceived+0x106>
                printf("\r\nHmm, that’s not correct. Try again!\r\n> ");
 800071a:	4812      	ldr	r0, [pc, #72]	@ (8000764 <OnLineReceived+0x13c>)
 800071c:	f000 fbe2 	bl	8000ee4 <iprintf>
            break;
 8000720:	e005      	b.n	800072e <OnLineReceived+0x106>
        }

        default:
            printf("\r\nUnexpected step. Restarting riddle.\r\n");
 8000722:	4811      	ldr	r0, [pc, #68]	@ (8000768 <OnLineReceived+0x140>)
 8000724:	f000 fc46 	bl	8000fb4 <puts>
            AskNewRiddle();
 8000728:	f7ff ff1e 	bl	8000568 <AskNewRiddle>
            break;
 800072c:	bf00      	nop
    }
}
 800072e:	3750      	adds	r7, #80	@ 0x50
 8000730:	46bd      	mov	sp, r7
 8000732:	bd80      	pop	{r7, pc}
 8000734:	20000174 	.word	0x20000174
 8000738:	20000028 	.word	0x20000028
 800073c:	080020cc 	.word	0x080020cc
 8000740:	08002104 	.word	0x08002104
 8000744:	2000016c 	.word	0x2000016c
 8000748:	200000d4 	.word	0x200000d4
 800074c:	08002154 	.word	0x08002154
 8000750:	08002174 	.word	0x08002174
 8000754:	20000170 	.word	0x20000170
 8000758:	08002190 	.word	0x08002190
 800075c:	080021b0 	.word	0x080021b0
 8000760:	080021d4 	.word	0x080021d4
 8000764:	08002214 	.word	0x08002214
 8000768:	08002240 	.word	0x08002240

0800076c <isMinigame1Completed>:

// ----------------- Game Progress Accessors -----------------

uint8_t isMinigame1Completed(void) {
 800076c:	b480      	push	{r7}
 800076e:	af00      	add	r7, sp, #0
    return (game_progress & 0b0001) != 0;
 8000770:	4b06      	ldr	r3, [pc, #24]	@ (800078c <isMinigame1Completed+0x20>)
 8000772:	781b      	ldrb	r3, [r3, #0]
 8000774:	f003 0301 	and.w	r3, r3, #1
 8000778:	2b00      	cmp	r3, #0
 800077a:	bf14      	ite	ne
 800077c:	2301      	movne	r3, #1
 800077e:	2300      	moveq	r3, #0
 8000780:	b2db      	uxtb	r3, r3
}
 8000782:	4618      	mov	r0, r3
 8000784:	46bd      	mov	sp, r7
 8000786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800078a:	4770      	bx	lr
 800078c:	20000028 	.word	0x20000028

08000790 <isMinigame2Completed>:

uint8_t isMinigame2Completed(void) {
 8000790:	b480      	push	{r7}
 8000792:	af00      	add	r7, sp, #0
    return (game_progress & 0b0010) != 0;
 8000794:	4b06      	ldr	r3, [pc, #24]	@ (80007b0 <isMinigame2Completed+0x20>)
 8000796:	781b      	ldrb	r3, [r3, #0]
 8000798:	f003 0302 	and.w	r3, r3, #2
 800079c:	2b00      	cmp	r3, #0
 800079e:	bf14      	ite	ne
 80007a0:	2301      	movne	r3, #1
 80007a2:	2300      	moveq	r3, #0
 80007a4:	b2db      	uxtb	r3, r3
}
 80007a6:	4618      	mov	r0, r3
 80007a8:	46bd      	mov	sp, r7
 80007aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ae:	4770      	bx	lr
 80007b0:	20000028 	.word	0x20000028

080007b4 <SerialInitialise>:
// Pointer to currently transmitting string
static const char *tx_buffer = NULL;
static uint32_t tx_index = 0;*/

// Initializes UART hardware and GPIO settings for communication
void SerialInitialise(uint32_t baudRate, SerialPort *serial_port, void (*completion_function)(uint32_t)) {
 80007b4:	b580      	push	{r7, lr}
 80007b6:	b086      	sub	sp, #24
 80007b8:	af00      	add	r7, sp, #0
 80007ba:	60f8      	str	r0, [r7, #12]
 80007bc:	60b9      	str	r1, [r7, #8]
 80007be:	607a      	str	r2, [r7, #4]
    serial_port->completion_function = completion_function;
 80007c0:	68bb      	ldr	r3, [r7, #8]
 80007c2:	687a      	ldr	r2, [r7, #4]
 80007c4:	625a      	str	r2, [r3, #36]	@ 0x24

    // Enable required clocks
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 80007c6:	4b2d      	ldr	r3, [pc, #180]	@ (800087c <SerialInitialise+0xc8>)
 80007c8:	69db      	ldr	r3, [r3, #28]
 80007ca:	4a2c      	ldr	r2, [pc, #176]	@ (800087c <SerialInitialise+0xc8>)
 80007cc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80007d0:	61d3      	str	r3, [r2, #28]
    RCC->APB2ENR |= RCC_APB2ENR_SYSCFGEN;
 80007d2:	4b2a      	ldr	r3, [pc, #168]	@ (800087c <SerialInitialise+0xc8>)
 80007d4:	699b      	ldr	r3, [r3, #24]
 80007d6:	4a29      	ldr	r2, [pc, #164]	@ (800087c <SerialInitialise+0xc8>)
 80007d8:	f043 0301 	orr.w	r3, r3, #1
 80007dc:	6193      	str	r3, [r2, #24]
    RCC->AHBENR |= serial_port->MaskAHBENR;
 80007de:	68bb      	ldr	r3, [r7, #8]
 80007e0:	691a      	ldr	r2, [r3, #16]
 80007e2:	4b26      	ldr	r3, [pc, #152]	@ (800087c <SerialInitialise+0xc8>)
 80007e4:	695b      	ldr	r3, [r3, #20]
 80007e6:	4925      	ldr	r1, [pc, #148]	@ (800087c <SerialInitialise+0xc8>)
 80007e8:	4313      	orrs	r3, r2
 80007ea:	614b      	str	r3, [r1, #20]

    // Configure GPIO alternate function mode and speed
    serial_port->GPIO->MODER = serial_port->SerialPinModeValue;
 80007ec:	68bb      	ldr	r3, [r7, #8]
 80007ee:	685b      	ldr	r3, [r3, #4]
 80007f0:	68ba      	ldr	r2, [r7, #8]
 80007f2:	6952      	ldr	r2, [r2, #20]
 80007f4:	601a      	str	r2, [r3, #0]
    serial_port->GPIO->OSPEEDR = serial_port->SerialPinSpeedValue;
 80007f6:	68bb      	ldr	r3, [r7, #8]
 80007f8:	685b      	ldr	r3, [r3, #4]
 80007fa:	68ba      	ldr	r2, [r7, #8]
 80007fc:	6992      	ldr	r2, [r2, #24]
 80007fe:	609a      	str	r2, [r3, #8]
    serial_port->GPIO->AFR[0] |= serial_port->SerialPinAlternatePinValueLow;
 8000800:	68bb      	ldr	r3, [r7, #8]
 8000802:	69d9      	ldr	r1, [r3, #28]
 8000804:	68bb      	ldr	r3, [r7, #8]
 8000806:	685b      	ldr	r3, [r3, #4]
 8000808:	6a1a      	ldr	r2, [r3, #32]
 800080a:	68bb      	ldr	r3, [r7, #8]
 800080c:	685b      	ldr	r3, [r3, #4]
 800080e:	430a      	orrs	r2, r1
 8000810:	621a      	str	r2, [r3, #32]
    serial_port->GPIO->AFR[1] |= serial_port->SerialPinAlternatePinValueHigh;
 8000812:	68bb      	ldr	r3, [r7, #8]
 8000814:	6a19      	ldr	r1, [r3, #32]
 8000816:	68bb      	ldr	r3, [r7, #8]
 8000818:	685b      	ldr	r3, [r3, #4]
 800081a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800081c:	68bb      	ldr	r3, [r7, #8]
 800081e:	685b      	ldr	r3, [r3, #4]
 8000820:	430a      	orrs	r2, r1
 8000822:	625a      	str	r2, [r3, #36]	@ 0x24

    // Enable USART peripheral
    RCC->APB1ENR |= serial_port->MaskAPB1ENR;
 8000824:	68bb      	ldr	r3, [r7, #8]
 8000826:	68da      	ldr	r2, [r3, #12]
 8000828:	4b14      	ldr	r3, [pc, #80]	@ (800087c <SerialInitialise+0xc8>)
 800082a:	69db      	ldr	r3, [r3, #28]
 800082c:	4913      	ldr	r1, [pc, #76]	@ (800087c <SerialInitialise+0xc8>)
 800082e:	4313      	orrs	r3, r2
 8000830:	61cb      	str	r3, [r1, #28]
    RCC->APB2ENR |= serial_port->MaskAPB2ENR;
 8000832:	68bb      	ldr	r3, [r7, #8]
 8000834:	689a      	ldr	r2, [r3, #8]
 8000836:	4b11      	ldr	r3, [pc, #68]	@ (800087c <SerialInitialise+0xc8>)
 8000838:	699b      	ldr	r3, [r3, #24]
 800083a:	4910      	ldr	r1, [pc, #64]	@ (800087c <SerialInitialise+0xc8>)
 800083c:	4313      	orrs	r3, r2
 800083e:	618b      	str	r3, [r1, #24]

    // Set baud rate (hardcoded value for 115200 @ 8 MHz)
    uint16_t *baud_rate_config = (uint16_t*)&serial_port->UART->BRR;
 8000840:	68bb      	ldr	r3, [r7, #8]
 8000842:	681b      	ldr	r3, [r3, #0]
 8000844:	330c      	adds	r3, #12
 8000846:	617b      	str	r3, [r7, #20]
    *baud_rate_config = 0x46;
 8000848:	697b      	ldr	r3, [r7, #20]
 800084a:	2246      	movs	r2, #70	@ 0x46
 800084c:	801a      	strh	r2, [r3, #0]

    // Enable TX, RX, UART and RX interrupt
    serial_port->UART->CR1 |= USART_CR1_TE | USART_CR1_RE | USART_CR1_UE;
 800084e:	68bb      	ldr	r3, [r7, #8]
 8000850:	681b      	ldr	r3, [r3, #0]
 8000852:	681a      	ldr	r2, [r3, #0]
 8000854:	68bb      	ldr	r3, [r7, #8]
 8000856:	681b      	ldr	r3, [r3, #0]
 8000858:	f042 020d 	orr.w	r2, r2, #13
 800085c:	601a      	str	r2, [r3, #0]
    serial_port->UART->CR1 |= USART_CR1_RXNEIE;
 800085e:	68bb      	ldr	r3, [r7, #8]
 8000860:	681b      	ldr	r3, [r3, #0]
 8000862:	681a      	ldr	r2, [r3, #0]
 8000864:	68bb      	ldr	r3, [r7, #8]
 8000866:	681b      	ldr	r3, [r3, #0]
 8000868:	f042 0220 	orr.w	r2, r2, #32
 800086c:	601a      	str	r2, [r3, #0]

    // Enable USART1 interrupt in NVIC
    NVIC_EnableIRQ(USART1_IRQn);
 800086e:	2025      	movs	r0, #37	@ 0x25
 8000870:	f7ff fde2 	bl	8000438 <__NVIC_EnableIRQ>
}
 8000874:	bf00      	nop
 8000876:	3718      	adds	r7, #24
 8000878:	46bd      	mov	sp, r7
 800087a:	bd80      	pop	{r7, pc}
 800087c:	40021000 	.word	0x40021000

08000880 <SerialOutputChar>:

// Transmit a single character (blocking)
void SerialOutputChar(uint8_t data, SerialPort *serial_port) {
 8000880:	b480      	push	{r7}
 8000882:	b083      	sub	sp, #12
 8000884:	af00      	add	r7, sp, #0
 8000886:	4603      	mov	r3, r0
 8000888:	6039      	str	r1, [r7, #0]
 800088a:	71fb      	strb	r3, [r7, #7]
    while ((serial_port->UART->ISR & USART_ISR_TXE) == 0);  // Wait for TX to be ready
 800088c:	bf00      	nop
 800088e:	683b      	ldr	r3, [r7, #0]
 8000890:	681b      	ldr	r3, [r3, #0]
 8000892:	69db      	ldr	r3, [r3, #28]
 8000894:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000898:	2b00      	cmp	r3, #0
 800089a:	d0f8      	beq.n	800088e <SerialOutputChar+0xe>
    serial_port->UART->TDR = data;                          // Write to transmit register
 800089c:	683b      	ldr	r3, [r7, #0]
 800089e:	681b      	ldr	r3, [r3, #0]
 80008a0:	79fa      	ldrb	r2, [r7, #7]
 80008a2:	b292      	uxth	r2, r2
 80008a4:	851a      	strh	r2, [r3, #40]	@ 0x28
}
 80008a6:	bf00      	nop
 80008a8:	370c      	adds	r7, #12
 80008aa:	46bd      	mov	sp, r7
 80008ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b0:	4770      	bx	lr

080008b2 <SerialSetReceiveCallback>:
    while ((serial_port->UART->ISR & USART_ISR_RXNE) == 0);  // Wait for data
    return serial_port->UART->RDR;                           // Return received char
}

// Sets the function to be called when a full line is received via UART
void SerialSetReceiveCallback(SerialPort *serial_port, void (*callback)(char *, uint32_t)) {
 80008b2:	b480      	push	{r7}
 80008b4:	b083      	sub	sp, #12
 80008b6:	af00      	add	r7, sp, #0
 80008b8:	6078      	str	r0, [r7, #4]
 80008ba:	6039      	str	r1, [r7, #0]
    serial_port->receive_callback = callback;
 80008bc:	687b      	ldr	r3, [r7, #4]
 80008be:	683a      	ldr	r2, [r7, #0]
 80008c0:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80008c2:	bf00      	nop
 80008c4:	370c      	adds	r7, #12
 80008c6:	46bd      	mov	sp, r7
 80008c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008cc:	4770      	bx	lr
	...

080008d0 <USART1_EXTI25_IRQHandler>:
    tx_index = 0;
    USART1->CR1 |= USART_CR1_TXEIE;  // Enable TX interrupt
}

// UART interrupt handler (for RX and TX)
void USART1_EXTI25_IRQHandler(void) {
 80008d0:	b580      	push	{r7, lr}
 80008d2:	b082      	sub	sp, #8
 80008d4:	af00      	add	r7, sp, #0
    // ---------- Receive ----------
    if (USART1->ISR & USART_ISR_RXNE) {
 80008d6:	4b40      	ldr	r3, [pc, #256]	@ (80009d8 <USART1_EXTI25_IRQHandler+0x108>)
 80008d8:	69db      	ldr	r3, [r3, #28]
 80008da:	f003 0320 	and.w	r3, r3, #32
 80008de:	2b00      	cmp	r3, #0
 80008e0:	d045      	beq.n	800096e <USART1_EXTI25_IRQHandler+0x9e>
        char c = USART1->RDR;  // Read received character
 80008e2:	4b3d      	ldr	r3, [pc, #244]	@ (80009d8 <USART1_EXTI25_IRQHandler+0x108>)
 80008e4:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80008e6:	b29b      	uxth	r3, r3
 80008e8:	71fb      	strb	r3, [r7, #7]
        SerialOutputChar(c, &USART1_PORT);  // Echo it back
 80008ea:	79fb      	ldrb	r3, [r7, #7]
 80008ec:	493b      	ldr	r1, [pc, #236]	@ (80009dc <USART1_EXTI25_IRQHandler+0x10c>)
 80008ee:	4618      	mov	r0, r3
 80008f0:	f7ff ffc6 	bl	8000880 <SerialOutputChar>

        // If Enter pressed, complete the string
        if (c == '\r') return;
 80008f4:	79fb      	ldrb	r3, [r7, #7]
 80008f6:	2b0d      	cmp	r3, #13
 80008f8:	d06a      	beq.n	80009d0 <USART1_EXTI25_IRQHandler+0x100>

        if (c == '\n') {
 80008fa:	79fb      	ldrb	r3, [r7, #7]
 80008fc:	2b0a      	cmp	r3, #10
 80008fe:	d124      	bne.n	800094a <USART1_EXTI25_IRQHandler+0x7a>
            rx_buffers[active_rx_buf][rx_index] = '\0';  // Null terminate
 8000900:	4b37      	ldr	r3, [pc, #220]	@ (80009e0 <USART1_EXTI25_IRQHandler+0x110>)
 8000902:	781b      	ldrb	r3, [r3, #0]
 8000904:	461a      	mov	r2, r3
 8000906:	4b37      	ldr	r3, [pc, #220]	@ (80009e4 <USART1_EXTI25_IRQHandler+0x114>)
 8000908:	681b      	ldr	r3, [r3, #0]
 800090a:	4937      	ldr	r1, [pc, #220]	@ (80009e8 <USART1_EXTI25_IRQHandler+0x118>)
 800090c:	0192      	lsls	r2, r2, #6
 800090e:	440a      	add	r2, r1
 8000910:	4413      	add	r3, r2
 8000912:	2200      	movs	r2, #0
 8000914:	701a      	strb	r2, [r3, #0]

            if (USART1_PORT.receive_callback)
 8000916:	4b31      	ldr	r3, [pc, #196]	@ (80009dc <USART1_EXTI25_IRQHandler+0x10c>)
 8000918:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800091a:	2b00      	cmp	r3, #0
 800091c:	d00a      	beq.n	8000934 <USART1_EXTI25_IRQHandler+0x64>
                USART1_PORT.receive_callback(rx_buffers[active_rx_buf], rx_index);
 800091e:	4b2f      	ldr	r3, [pc, #188]	@ (80009dc <USART1_EXTI25_IRQHandler+0x10c>)
 8000920:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000922:	4a2f      	ldr	r2, [pc, #188]	@ (80009e0 <USART1_EXTI25_IRQHandler+0x110>)
 8000924:	7812      	ldrb	r2, [r2, #0]
 8000926:	0192      	lsls	r2, r2, #6
 8000928:	492f      	ldr	r1, [pc, #188]	@ (80009e8 <USART1_EXTI25_IRQHandler+0x118>)
 800092a:	440a      	add	r2, r1
 800092c:	492d      	ldr	r1, [pc, #180]	@ (80009e4 <USART1_EXTI25_IRQHandler+0x114>)
 800092e:	6809      	ldr	r1, [r1, #0]
 8000930:	4610      	mov	r0, r2
 8000932:	4798      	blx	r3

            active_rx_buf ^= 1;  // Switch buffer
 8000934:	4b2a      	ldr	r3, [pc, #168]	@ (80009e0 <USART1_EXTI25_IRQHandler+0x110>)
 8000936:	781b      	ldrb	r3, [r3, #0]
 8000938:	f083 0301 	eor.w	r3, r3, #1
 800093c:	b2da      	uxtb	r2, r3
 800093e:	4b28      	ldr	r3, [pc, #160]	@ (80009e0 <USART1_EXTI25_IRQHandler+0x110>)
 8000940:	701a      	strb	r2, [r3, #0]
            rx_index = 0;        // Reset index
 8000942:	4b28      	ldr	r3, [pc, #160]	@ (80009e4 <USART1_EXTI25_IRQHandler+0x114>)
 8000944:	2200      	movs	r2, #0
 8000946:	601a      	str	r2, [r3, #0]
 8000948:	e011      	b.n	800096e <USART1_EXTI25_IRQHandler+0x9e>
        } else if (rx_index < sizeof(rx_buffers[0]) - 1) {
 800094a:	4b26      	ldr	r3, [pc, #152]	@ (80009e4 <USART1_EXTI25_IRQHandler+0x114>)
 800094c:	681b      	ldr	r3, [r3, #0]
 800094e:	2b3e      	cmp	r3, #62	@ 0x3e
 8000950:	d80d      	bhi.n	800096e <USART1_EXTI25_IRQHandler+0x9e>
            rx_buffers[active_rx_buf][rx_index++] = c;
 8000952:	4b23      	ldr	r3, [pc, #140]	@ (80009e0 <USART1_EXTI25_IRQHandler+0x110>)
 8000954:	781b      	ldrb	r3, [r3, #0]
 8000956:	4618      	mov	r0, r3
 8000958:	4b22      	ldr	r3, [pc, #136]	@ (80009e4 <USART1_EXTI25_IRQHandler+0x114>)
 800095a:	681b      	ldr	r3, [r3, #0]
 800095c:	1c5a      	adds	r2, r3, #1
 800095e:	4921      	ldr	r1, [pc, #132]	@ (80009e4 <USART1_EXTI25_IRQHandler+0x114>)
 8000960:	600a      	str	r2, [r1, #0]
 8000962:	4921      	ldr	r1, [pc, #132]	@ (80009e8 <USART1_EXTI25_IRQHandler+0x118>)
 8000964:	0182      	lsls	r2, r0, #6
 8000966:	440a      	add	r2, r1
 8000968:	4413      	add	r3, r2
 800096a:	79fa      	ldrb	r2, [r7, #7]
 800096c:	701a      	strb	r2, [r3, #0]
        }
    }

    // ---------- Transmit ----------
    if ((USART1->CR1 & USART_CR1_TXEIE) && (USART1->ISR & USART_ISR_TXE)) {
 800096e:	4b1a      	ldr	r3, [pc, #104]	@ (80009d8 <USART1_EXTI25_IRQHandler+0x108>)
 8000970:	681b      	ldr	r3, [r3, #0]
 8000972:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000976:	2b00      	cmp	r3, #0
 8000978:	d02b      	beq.n	80009d2 <USART1_EXTI25_IRQHandler+0x102>
 800097a:	4b17      	ldr	r3, [pc, #92]	@ (80009d8 <USART1_EXTI25_IRQHandler+0x108>)
 800097c:	69db      	ldr	r3, [r3, #28]
 800097e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000982:	2b00      	cmp	r3, #0
 8000984:	d025      	beq.n	80009d2 <USART1_EXTI25_IRQHandler+0x102>
        if (tx_buffer && tx_buffer[tx_index]) {
 8000986:	4b19      	ldr	r3, [pc, #100]	@ (80009ec <USART1_EXTI25_IRQHandler+0x11c>)
 8000988:	681b      	ldr	r3, [r3, #0]
 800098a:	2b00      	cmp	r3, #0
 800098c:	d013      	beq.n	80009b6 <USART1_EXTI25_IRQHandler+0xe6>
 800098e:	4b17      	ldr	r3, [pc, #92]	@ (80009ec <USART1_EXTI25_IRQHandler+0x11c>)
 8000990:	681a      	ldr	r2, [r3, #0]
 8000992:	4b17      	ldr	r3, [pc, #92]	@ (80009f0 <USART1_EXTI25_IRQHandler+0x120>)
 8000994:	681b      	ldr	r3, [r3, #0]
 8000996:	4413      	add	r3, r2
 8000998:	781b      	ldrb	r3, [r3, #0]
 800099a:	2b00      	cmp	r3, #0
 800099c:	d00b      	beq.n	80009b6 <USART1_EXTI25_IRQHandler+0xe6>
            USART1->TDR = tx_buffer[tx_index++];  // Send next character
 800099e:	4b13      	ldr	r3, [pc, #76]	@ (80009ec <USART1_EXTI25_IRQHandler+0x11c>)
 80009a0:	681a      	ldr	r2, [r3, #0]
 80009a2:	4b13      	ldr	r3, [pc, #76]	@ (80009f0 <USART1_EXTI25_IRQHandler+0x120>)
 80009a4:	681b      	ldr	r3, [r3, #0]
 80009a6:	1c59      	adds	r1, r3, #1
 80009a8:	4811      	ldr	r0, [pc, #68]	@ (80009f0 <USART1_EXTI25_IRQHandler+0x120>)
 80009aa:	6001      	str	r1, [r0, #0]
 80009ac:	4413      	add	r3, r2
 80009ae:	781a      	ldrb	r2, [r3, #0]
 80009b0:	4b09      	ldr	r3, [pc, #36]	@ (80009d8 <USART1_EXTI25_IRQHandler+0x108>)
 80009b2:	851a      	strh	r2, [r3, #40]	@ 0x28
 80009b4:	e00d      	b.n	80009d2 <USART1_EXTI25_IRQHandler+0x102>
        } else {
            USART1->CR1 &= ~USART_CR1_TXEIE;  // Disable TX interrupt
 80009b6:	4b08      	ldr	r3, [pc, #32]	@ (80009d8 <USART1_EXTI25_IRQHandler+0x108>)
 80009b8:	681b      	ldr	r3, [r3, #0]
 80009ba:	4a07      	ldr	r2, [pc, #28]	@ (80009d8 <USART1_EXTI25_IRQHandler+0x108>)
 80009bc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80009c0:	6013      	str	r3, [r2, #0]
            tx_buffer = NULL;
 80009c2:	4b0a      	ldr	r3, [pc, #40]	@ (80009ec <USART1_EXTI25_IRQHandler+0x11c>)
 80009c4:	2200      	movs	r2, #0
 80009c6:	601a      	str	r2, [r3, #0]
            tx_index = 0;
 80009c8:	4b09      	ldr	r3, [pc, #36]	@ (80009f0 <USART1_EXTI25_IRQHandler+0x120>)
 80009ca:	2200      	movs	r2, #0
 80009cc:	601a      	str	r2, [r3, #0]
 80009ce:	e000      	b.n	80009d2 <USART1_EXTI25_IRQHandler+0x102>
        if (c == '\r') return;
 80009d0:	bf00      	nop
        }
    }
}
 80009d2:	3708      	adds	r7, #8
 80009d4:	46bd      	mov	sp, r7
 80009d6:	bd80      	pop	{r7, pc}
 80009d8:	40013800 	.word	0x40013800
 80009dc:	2000002c 	.word	0x2000002c
 80009e0:	2000015c 	.word	0x2000015c
 80009e4:	20000160 	.word	0x20000160
 80009e8:	200000dc 	.word	0x200000dc
 80009ec:	20000164 	.word	0x20000164
 80009f0:	20000168 	.word	0x20000168

080009f4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80009f4:	b480      	push	{r7}
 80009f6:	af00      	add	r7, sp, #0
	return 1;
 80009f8:	2301      	movs	r3, #1
}
 80009fa:	4618      	mov	r0, r3
 80009fc:	46bd      	mov	sp, r7
 80009fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a02:	4770      	bx	lr

08000a04 <_kill>:

int _kill(int pid, int sig)
{
 8000a04:	b580      	push	{r7, lr}
 8000a06:	b082      	sub	sp, #8
 8000a08:	af00      	add	r7, sp, #0
 8000a0a:	6078      	str	r0, [r7, #4]
 8000a0c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8000a0e:	f000 fc13 	bl	8001238 <__errno>
 8000a12:	4603      	mov	r3, r0
 8000a14:	2216      	movs	r2, #22
 8000a16:	601a      	str	r2, [r3, #0]
	return -1;
 8000a18:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000a1c:	4618      	mov	r0, r3
 8000a1e:	3708      	adds	r7, #8
 8000a20:	46bd      	mov	sp, r7
 8000a22:	bd80      	pop	{r7, pc}

08000a24 <_exit>:

void _exit (int status)
{
 8000a24:	b580      	push	{r7, lr}
 8000a26:	b082      	sub	sp, #8
 8000a28:	af00      	add	r7, sp, #0
 8000a2a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8000a2c:	f04f 31ff 	mov.w	r1, #4294967295
 8000a30:	6878      	ldr	r0, [r7, #4]
 8000a32:	f7ff ffe7 	bl	8000a04 <_kill>
	while (1) {}		/* Make sure we hang here */
 8000a36:	bf00      	nop
 8000a38:	e7fd      	b.n	8000a36 <_exit+0x12>

08000a3a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000a3a:	b580      	push	{r7, lr}
 8000a3c:	b086      	sub	sp, #24
 8000a3e:	af00      	add	r7, sp, #0
 8000a40:	60f8      	str	r0, [r7, #12]
 8000a42:	60b9      	str	r1, [r7, #8]
 8000a44:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a46:	2300      	movs	r3, #0
 8000a48:	617b      	str	r3, [r7, #20]
 8000a4a:	e00a      	b.n	8000a62 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000a4c:	f3af 8000 	nop.w
 8000a50:	4601      	mov	r1, r0
 8000a52:	68bb      	ldr	r3, [r7, #8]
 8000a54:	1c5a      	adds	r2, r3, #1
 8000a56:	60ba      	str	r2, [r7, #8]
 8000a58:	b2ca      	uxtb	r2, r1
 8000a5a:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a5c:	697b      	ldr	r3, [r7, #20]
 8000a5e:	3301      	adds	r3, #1
 8000a60:	617b      	str	r3, [r7, #20]
 8000a62:	697a      	ldr	r2, [r7, #20]
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	429a      	cmp	r2, r3
 8000a68:	dbf0      	blt.n	8000a4c <_read+0x12>
	}

return len;
 8000a6a:	687b      	ldr	r3, [r7, #4]
}
 8000a6c:	4618      	mov	r0, r3
 8000a6e:	3718      	adds	r7, #24
 8000a70:	46bd      	mov	sp, r7
 8000a72:	bd80      	pop	{r7, pc}

08000a74 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000a74:	b580      	push	{r7, lr}
 8000a76:	b086      	sub	sp, #24
 8000a78:	af00      	add	r7, sp, #0
 8000a7a:	60f8      	str	r0, [r7, #12]
 8000a7c:	60b9      	str	r1, [r7, #8]
 8000a7e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a80:	2300      	movs	r3, #0
 8000a82:	617b      	str	r3, [r7, #20]
 8000a84:	e009      	b.n	8000a9a <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000a86:	68bb      	ldr	r3, [r7, #8]
 8000a88:	1c5a      	adds	r2, r3, #1
 8000a8a:	60ba      	str	r2, [r7, #8]
 8000a8c:	781b      	ldrb	r3, [r3, #0]
 8000a8e:	4618      	mov	r0, r3
 8000a90:	f7ff fc06 	bl	80002a0 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a94:	697b      	ldr	r3, [r7, #20]
 8000a96:	3301      	adds	r3, #1
 8000a98:	617b      	str	r3, [r7, #20]
 8000a9a:	697a      	ldr	r2, [r7, #20]
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	429a      	cmp	r2, r3
 8000aa0:	dbf1      	blt.n	8000a86 <_write+0x12>
	}
	return len;
 8000aa2:	687b      	ldr	r3, [r7, #4]
}
 8000aa4:	4618      	mov	r0, r3
 8000aa6:	3718      	adds	r7, #24
 8000aa8:	46bd      	mov	sp, r7
 8000aaa:	bd80      	pop	{r7, pc}

08000aac <_close>:

int _close(int file)
{
 8000aac:	b480      	push	{r7}
 8000aae:	b083      	sub	sp, #12
 8000ab0:	af00      	add	r7, sp, #0
 8000ab2:	6078      	str	r0, [r7, #4]
	return -1;
 8000ab4:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000ab8:	4618      	mov	r0, r3
 8000aba:	370c      	adds	r7, #12
 8000abc:	46bd      	mov	sp, r7
 8000abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac2:	4770      	bx	lr

08000ac4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000ac4:	b480      	push	{r7}
 8000ac6:	b083      	sub	sp, #12
 8000ac8:	af00      	add	r7, sp, #0
 8000aca:	6078      	str	r0, [r7, #4]
 8000acc:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000ace:	683b      	ldr	r3, [r7, #0]
 8000ad0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000ad4:	605a      	str	r2, [r3, #4]
	return 0;
 8000ad6:	2300      	movs	r3, #0
}
 8000ad8:	4618      	mov	r0, r3
 8000ada:	370c      	adds	r7, #12
 8000adc:	46bd      	mov	sp, r7
 8000ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae2:	4770      	bx	lr

08000ae4 <_isatty>:

int _isatty(int file)
{
 8000ae4:	b480      	push	{r7}
 8000ae6:	b083      	sub	sp, #12
 8000ae8:	af00      	add	r7, sp, #0
 8000aea:	6078      	str	r0, [r7, #4]
	return 1;
 8000aec:	2301      	movs	r3, #1
}
 8000aee:	4618      	mov	r0, r3
 8000af0:	370c      	adds	r7, #12
 8000af2:	46bd      	mov	sp, r7
 8000af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af8:	4770      	bx	lr

08000afa <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000afa:	b480      	push	{r7}
 8000afc:	b085      	sub	sp, #20
 8000afe:	af00      	add	r7, sp, #0
 8000b00:	60f8      	str	r0, [r7, #12]
 8000b02:	60b9      	str	r1, [r7, #8]
 8000b04:	607a      	str	r2, [r7, #4]
	return 0;
 8000b06:	2300      	movs	r3, #0
}
 8000b08:	4618      	mov	r0, r3
 8000b0a:	3714      	adds	r7, #20
 8000b0c:	46bd      	mov	sp, r7
 8000b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b12:	4770      	bx	lr

08000b14 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000b14:	b580      	push	{r7, lr}
 8000b16:	b086      	sub	sp, #24
 8000b18:	af00      	add	r7, sp, #0
 8000b1a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000b1c:	4a14      	ldr	r2, [pc, #80]	@ (8000b70 <_sbrk+0x5c>)
 8000b1e:	4b15      	ldr	r3, [pc, #84]	@ (8000b74 <_sbrk+0x60>)
 8000b20:	1ad3      	subs	r3, r2, r3
 8000b22:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000b24:	697b      	ldr	r3, [r7, #20]
 8000b26:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000b28:	4b13      	ldr	r3, [pc, #76]	@ (8000b78 <_sbrk+0x64>)
 8000b2a:	681b      	ldr	r3, [r3, #0]
 8000b2c:	2b00      	cmp	r3, #0
 8000b2e:	d102      	bne.n	8000b36 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000b30:	4b11      	ldr	r3, [pc, #68]	@ (8000b78 <_sbrk+0x64>)
 8000b32:	4a12      	ldr	r2, [pc, #72]	@ (8000b7c <_sbrk+0x68>)
 8000b34:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000b36:	4b10      	ldr	r3, [pc, #64]	@ (8000b78 <_sbrk+0x64>)
 8000b38:	681a      	ldr	r2, [r3, #0]
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	4413      	add	r3, r2
 8000b3e:	693a      	ldr	r2, [r7, #16]
 8000b40:	429a      	cmp	r2, r3
 8000b42:	d207      	bcs.n	8000b54 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000b44:	f000 fb78 	bl	8001238 <__errno>
 8000b48:	4603      	mov	r3, r0
 8000b4a:	220c      	movs	r2, #12
 8000b4c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000b4e:	f04f 33ff 	mov.w	r3, #4294967295
 8000b52:	e009      	b.n	8000b68 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000b54:	4b08      	ldr	r3, [pc, #32]	@ (8000b78 <_sbrk+0x64>)
 8000b56:	681b      	ldr	r3, [r3, #0]
 8000b58:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000b5a:	4b07      	ldr	r3, [pc, #28]	@ (8000b78 <_sbrk+0x64>)
 8000b5c:	681a      	ldr	r2, [r3, #0]
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	4413      	add	r3, r2
 8000b62:	4a05      	ldr	r2, [pc, #20]	@ (8000b78 <_sbrk+0x64>)
 8000b64:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000b66:	68fb      	ldr	r3, [r7, #12]
}
 8000b68:	4618      	mov	r0, r3
 8000b6a:	3718      	adds	r7, #24
 8000b6c:	46bd      	mov	sp, r7
 8000b6e:	bd80      	pop	{r7, pc}
 8000b70:	2000a000 	.word	0x2000a000
 8000b74:	00000400 	.word	0x00000400
 8000b78:	200001b4 	.word	0x200001b4
 8000b7c:	20000308 	.word	0x20000308

08000b80 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000b80:	480d      	ldr	r0, [pc, #52]	@ (8000bb8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000b82:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000b84:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000b88:	480c      	ldr	r0, [pc, #48]	@ (8000bbc <LoopForever+0x6>)
  ldr r1, =_edata
 8000b8a:	490d      	ldr	r1, [pc, #52]	@ (8000bc0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000b8c:	4a0d      	ldr	r2, [pc, #52]	@ (8000bc4 <LoopForever+0xe>)
  movs r3, #0
 8000b8e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b90:	e002      	b.n	8000b98 <LoopCopyDataInit>

08000b92 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b92:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b94:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b96:	3304      	adds	r3, #4

08000b98 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b98:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b9a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b9c:	d3f9      	bcc.n	8000b92 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b9e:	4a0a      	ldr	r2, [pc, #40]	@ (8000bc8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000ba0:	4c0a      	ldr	r4, [pc, #40]	@ (8000bcc <LoopForever+0x16>)
  movs r3, #0
 8000ba2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ba4:	e001      	b.n	8000baa <LoopFillZerobss>

08000ba6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ba6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ba8:	3204      	adds	r2, #4

08000baa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000baa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000bac:	d3fb      	bcc.n	8000ba6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000bae:	f000 fb49 	bl	8001244 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000bb2:	f7ff fbc7 	bl	8000344 <main>

08000bb6 <LoopForever>:

LoopForever:
  b LoopForever
 8000bb6:	e7fe      	b.n	8000bb6 <LoopForever>
  ldr   r0, =_estack
 8000bb8:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 8000bbc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000bc0:	200000b4 	.word	0x200000b4
  ldr r2, =_sidata
 8000bc4:	08002458 	.word	0x08002458
  ldr r2, =_sbss
 8000bc8:	200000b4 	.word	0x200000b4
  ldr r4, =_ebss
 8000bcc:	20000304 	.word	0x20000304

08000bd0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000bd0:	e7fe      	b.n	8000bd0 <ADC1_2_IRQHandler>

08000bd2 <atoi>:
 8000bd2:	220a      	movs	r2, #10
 8000bd4:	2100      	movs	r1, #0
 8000bd6:	f000 b8b9 	b.w	8000d4c <strtol>
	...

08000bdc <rand>:
 8000bdc:	4b16      	ldr	r3, [pc, #88]	@ (8000c38 <rand+0x5c>)
 8000bde:	b510      	push	{r4, lr}
 8000be0:	681c      	ldr	r4, [r3, #0]
 8000be2:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8000be4:	b9b3      	cbnz	r3, 8000c14 <rand+0x38>
 8000be6:	2018      	movs	r0, #24
 8000be8:	f000 fbbc 	bl	8001364 <malloc>
 8000bec:	4602      	mov	r2, r0
 8000bee:	6320      	str	r0, [r4, #48]	@ 0x30
 8000bf0:	b920      	cbnz	r0, 8000bfc <rand+0x20>
 8000bf2:	4b12      	ldr	r3, [pc, #72]	@ (8000c3c <rand+0x60>)
 8000bf4:	4812      	ldr	r0, [pc, #72]	@ (8000c40 <rand+0x64>)
 8000bf6:	2152      	movs	r1, #82	@ 0x52
 8000bf8:	f000 fb4c 	bl	8001294 <__assert_func>
 8000bfc:	4911      	ldr	r1, [pc, #68]	@ (8000c44 <rand+0x68>)
 8000bfe:	4b12      	ldr	r3, [pc, #72]	@ (8000c48 <rand+0x6c>)
 8000c00:	e9c0 1300 	strd	r1, r3, [r0]
 8000c04:	4b11      	ldr	r3, [pc, #68]	@ (8000c4c <rand+0x70>)
 8000c06:	6083      	str	r3, [r0, #8]
 8000c08:	230b      	movs	r3, #11
 8000c0a:	8183      	strh	r3, [r0, #12]
 8000c0c:	2100      	movs	r1, #0
 8000c0e:	2001      	movs	r0, #1
 8000c10:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8000c14:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8000c16:	480e      	ldr	r0, [pc, #56]	@ (8000c50 <rand+0x74>)
 8000c18:	690b      	ldr	r3, [r1, #16]
 8000c1a:	694c      	ldr	r4, [r1, #20]
 8000c1c:	4a0d      	ldr	r2, [pc, #52]	@ (8000c54 <rand+0x78>)
 8000c1e:	4358      	muls	r0, r3
 8000c20:	fb02 0004 	mla	r0, r2, r4, r0
 8000c24:	fba3 3202 	umull	r3, r2, r3, r2
 8000c28:	3301      	adds	r3, #1
 8000c2a:	eb40 0002 	adc.w	r0, r0, r2
 8000c2e:	e9c1 3004 	strd	r3, r0, [r1, #16]
 8000c32:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 8000c36:	bd10      	pop	{r4, pc}
 8000c38:	20000064 	.word	0x20000064
 8000c3c:	08002267 	.word	0x08002267
 8000c40:	0800227e 	.word	0x0800227e
 8000c44:	abcd330e 	.word	0xabcd330e
 8000c48:	e66d1234 	.word	0xe66d1234
 8000c4c:	0005deec 	.word	0x0005deec
 8000c50:	5851f42d 	.word	0x5851f42d
 8000c54:	4c957f2d 	.word	0x4c957f2d

08000c58 <_strtol_l.constprop.0>:
 8000c58:	2b24      	cmp	r3, #36	@ 0x24
 8000c5a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c5e:	4686      	mov	lr, r0
 8000c60:	4690      	mov	r8, r2
 8000c62:	d801      	bhi.n	8000c68 <_strtol_l.constprop.0+0x10>
 8000c64:	2b01      	cmp	r3, #1
 8000c66:	d106      	bne.n	8000c76 <_strtol_l.constprop.0+0x1e>
 8000c68:	f000 fae6 	bl	8001238 <__errno>
 8000c6c:	2316      	movs	r3, #22
 8000c6e:	6003      	str	r3, [r0, #0]
 8000c70:	2000      	movs	r0, #0
 8000c72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c76:	4834      	ldr	r0, [pc, #208]	@ (8000d48 <_strtol_l.constprop.0+0xf0>)
 8000c78:	460d      	mov	r5, r1
 8000c7a:	462a      	mov	r2, r5
 8000c7c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8000c80:	5d06      	ldrb	r6, [r0, r4]
 8000c82:	f016 0608 	ands.w	r6, r6, #8
 8000c86:	d1f8      	bne.n	8000c7a <_strtol_l.constprop.0+0x22>
 8000c88:	2c2d      	cmp	r4, #45	@ 0x2d
 8000c8a:	d12d      	bne.n	8000ce8 <_strtol_l.constprop.0+0x90>
 8000c8c:	782c      	ldrb	r4, [r5, #0]
 8000c8e:	2601      	movs	r6, #1
 8000c90:	1c95      	adds	r5, r2, #2
 8000c92:	f033 0210 	bics.w	r2, r3, #16
 8000c96:	d109      	bne.n	8000cac <_strtol_l.constprop.0+0x54>
 8000c98:	2c30      	cmp	r4, #48	@ 0x30
 8000c9a:	d12a      	bne.n	8000cf2 <_strtol_l.constprop.0+0x9a>
 8000c9c:	782a      	ldrb	r2, [r5, #0]
 8000c9e:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8000ca2:	2a58      	cmp	r2, #88	@ 0x58
 8000ca4:	d125      	bne.n	8000cf2 <_strtol_l.constprop.0+0x9a>
 8000ca6:	786c      	ldrb	r4, [r5, #1]
 8000ca8:	2310      	movs	r3, #16
 8000caa:	3502      	adds	r5, #2
 8000cac:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8000cb0:	f10c 3cff 	add.w	ip, ip, #4294967295
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	fbbc f9f3 	udiv	r9, ip, r3
 8000cba:	4610      	mov	r0, r2
 8000cbc:	fb03 ca19 	mls	sl, r3, r9, ip
 8000cc0:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8000cc4:	2f09      	cmp	r7, #9
 8000cc6:	d81b      	bhi.n	8000d00 <_strtol_l.constprop.0+0xa8>
 8000cc8:	463c      	mov	r4, r7
 8000cca:	42a3      	cmp	r3, r4
 8000ccc:	dd27      	ble.n	8000d1e <_strtol_l.constprop.0+0xc6>
 8000cce:	1c57      	adds	r7, r2, #1
 8000cd0:	d007      	beq.n	8000ce2 <_strtol_l.constprop.0+0x8a>
 8000cd2:	4581      	cmp	r9, r0
 8000cd4:	d320      	bcc.n	8000d18 <_strtol_l.constprop.0+0xc0>
 8000cd6:	d101      	bne.n	8000cdc <_strtol_l.constprop.0+0x84>
 8000cd8:	45a2      	cmp	sl, r4
 8000cda:	db1d      	blt.n	8000d18 <_strtol_l.constprop.0+0xc0>
 8000cdc:	fb00 4003 	mla	r0, r0, r3, r4
 8000ce0:	2201      	movs	r2, #1
 8000ce2:	f815 4b01 	ldrb.w	r4, [r5], #1
 8000ce6:	e7eb      	b.n	8000cc0 <_strtol_l.constprop.0+0x68>
 8000ce8:	2c2b      	cmp	r4, #43	@ 0x2b
 8000cea:	bf04      	itt	eq
 8000cec:	782c      	ldrbeq	r4, [r5, #0]
 8000cee:	1c95      	addeq	r5, r2, #2
 8000cf0:	e7cf      	b.n	8000c92 <_strtol_l.constprop.0+0x3a>
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d1da      	bne.n	8000cac <_strtol_l.constprop.0+0x54>
 8000cf6:	2c30      	cmp	r4, #48	@ 0x30
 8000cf8:	bf0c      	ite	eq
 8000cfa:	2308      	moveq	r3, #8
 8000cfc:	230a      	movne	r3, #10
 8000cfe:	e7d5      	b.n	8000cac <_strtol_l.constprop.0+0x54>
 8000d00:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8000d04:	2f19      	cmp	r7, #25
 8000d06:	d801      	bhi.n	8000d0c <_strtol_l.constprop.0+0xb4>
 8000d08:	3c37      	subs	r4, #55	@ 0x37
 8000d0a:	e7de      	b.n	8000cca <_strtol_l.constprop.0+0x72>
 8000d0c:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8000d10:	2f19      	cmp	r7, #25
 8000d12:	d804      	bhi.n	8000d1e <_strtol_l.constprop.0+0xc6>
 8000d14:	3c57      	subs	r4, #87	@ 0x57
 8000d16:	e7d8      	b.n	8000cca <_strtol_l.constprop.0+0x72>
 8000d18:	f04f 32ff 	mov.w	r2, #4294967295
 8000d1c:	e7e1      	b.n	8000ce2 <_strtol_l.constprop.0+0x8a>
 8000d1e:	1c53      	adds	r3, r2, #1
 8000d20:	d108      	bne.n	8000d34 <_strtol_l.constprop.0+0xdc>
 8000d22:	2322      	movs	r3, #34	@ 0x22
 8000d24:	f8ce 3000 	str.w	r3, [lr]
 8000d28:	4660      	mov	r0, ip
 8000d2a:	f1b8 0f00 	cmp.w	r8, #0
 8000d2e:	d0a0      	beq.n	8000c72 <_strtol_l.constprop.0+0x1a>
 8000d30:	1e69      	subs	r1, r5, #1
 8000d32:	e006      	b.n	8000d42 <_strtol_l.constprop.0+0xea>
 8000d34:	b106      	cbz	r6, 8000d38 <_strtol_l.constprop.0+0xe0>
 8000d36:	4240      	negs	r0, r0
 8000d38:	f1b8 0f00 	cmp.w	r8, #0
 8000d3c:	d099      	beq.n	8000c72 <_strtol_l.constprop.0+0x1a>
 8000d3e:	2a00      	cmp	r2, #0
 8000d40:	d1f6      	bne.n	8000d30 <_strtol_l.constprop.0+0xd8>
 8000d42:	f8c8 1000 	str.w	r1, [r8]
 8000d46:	e794      	b.n	8000c72 <_strtol_l.constprop.0+0x1a>
 8000d48:	080022d7 	.word	0x080022d7

08000d4c <strtol>:
 8000d4c:	4613      	mov	r3, r2
 8000d4e:	460a      	mov	r2, r1
 8000d50:	4601      	mov	r1, r0
 8000d52:	4802      	ldr	r0, [pc, #8]	@ (8000d5c <strtol+0x10>)
 8000d54:	6800      	ldr	r0, [r0, #0]
 8000d56:	f7ff bf7f 	b.w	8000c58 <_strtol_l.constprop.0>
 8000d5a:	bf00      	nop
 8000d5c:	20000064 	.word	0x20000064

08000d60 <std>:
 8000d60:	2300      	movs	r3, #0
 8000d62:	b510      	push	{r4, lr}
 8000d64:	4604      	mov	r4, r0
 8000d66:	e9c0 3300 	strd	r3, r3, [r0]
 8000d6a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8000d6e:	6083      	str	r3, [r0, #8]
 8000d70:	8181      	strh	r1, [r0, #12]
 8000d72:	6643      	str	r3, [r0, #100]	@ 0x64
 8000d74:	81c2      	strh	r2, [r0, #14]
 8000d76:	6183      	str	r3, [r0, #24]
 8000d78:	4619      	mov	r1, r3
 8000d7a:	2208      	movs	r2, #8
 8000d7c:	305c      	adds	r0, #92	@ 0x5c
 8000d7e:	f000 f9f9 	bl	8001174 <memset>
 8000d82:	4b0d      	ldr	r3, [pc, #52]	@ (8000db8 <std+0x58>)
 8000d84:	6263      	str	r3, [r4, #36]	@ 0x24
 8000d86:	4b0d      	ldr	r3, [pc, #52]	@ (8000dbc <std+0x5c>)
 8000d88:	62a3      	str	r3, [r4, #40]	@ 0x28
 8000d8a:	4b0d      	ldr	r3, [pc, #52]	@ (8000dc0 <std+0x60>)
 8000d8c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8000d8e:	4b0d      	ldr	r3, [pc, #52]	@ (8000dc4 <std+0x64>)
 8000d90:	6323      	str	r3, [r4, #48]	@ 0x30
 8000d92:	4b0d      	ldr	r3, [pc, #52]	@ (8000dc8 <std+0x68>)
 8000d94:	6224      	str	r4, [r4, #32]
 8000d96:	429c      	cmp	r4, r3
 8000d98:	d006      	beq.n	8000da8 <std+0x48>
 8000d9a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8000d9e:	4294      	cmp	r4, r2
 8000da0:	d002      	beq.n	8000da8 <std+0x48>
 8000da2:	33d0      	adds	r3, #208	@ 0xd0
 8000da4:	429c      	cmp	r4, r3
 8000da6:	d105      	bne.n	8000db4 <std+0x54>
 8000da8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8000dac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000db0:	f000 ba6c 	b.w	800128c <__retarget_lock_init_recursive>
 8000db4:	bd10      	pop	{r4, pc}
 8000db6:	bf00      	nop
 8000db8:	08000fc5 	.word	0x08000fc5
 8000dbc:	08000fe7 	.word	0x08000fe7
 8000dc0:	0800101f 	.word	0x0800101f
 8000dc4:	08001043 	.word	0x08001043
 8000dc8:	200001b8 	.word	0x200001b8

08000dcc <stdio_exit_handler>:
 8000dcc:	4a02      	ldr	r2, [pc, #8]	@ (8000dd8 <stdio_exit_handler+0xc>)
 8000dce:	4903      	ldr	r1, [pc, #12]	@ (8000ddc <stdio_exit_handler+0x10>)
 8000dd0:	4803      	ldr	r0, [pc, #12]	@ (8000de0 <stdio_exit_handler+0x14>)
 8000dd2:	f000 b869 	b.w	8000ea8 <_fwalk_sglue>
 8000dd6:	bf00      	nop
 8000dd8:	20000058 	.word	0x20000058
 8000ddc:	08001b79 	.word	0x08001b79
 8000de0:	20000068 	.word	0x20000068

08000de4 <cleanup_stdio>:
 8000de4:	6841      	ldr	r1, [r0, #4]
 8000de6:	4b0c      	ldr	r3, [pc, #48]	@ (8000e18 <cleanup_stdio+0x34>)
 8000de8:	4299      	cmp	r1, r3
 8000dea:	b510      	push	{r4, lr}
 8000dec:	4604      	mov	r4, r0
 8000dee:	d001      	beq.n	8000df4 <cleanup_stdio+0x10>
 8000df0:	f000 fec2 	bl	8001b78 <_fflush_r>
 8000df4:	68a1      	ldr	r1, [r4, #8]
 8000df6:	4b09      	ldr	r3, [pc, #36]	@ (8000e1c <cleanup_stdio+0x38>)
 8000df8:	4299      	cmp	r1, r3
 8000dfa:	d002      	beq.n	8000e02 <cleanup_stdio+0x1e>
 8000dfc:	4620      	mov	r0, r4
 8000dfe:	f000 febb 	bl	8001b78 <_fflush_r>
 8000e02:	68e1      	ldr	r1, [r4, #12]
 8000e04:	4b06      	ldr	r3, [pc, #24]	@ (8000e20 <cleanup_stdio+0x3c>)
 8000e06:	4299      	cmp	r1, r3
 8000e08:	d004      	beq.n	8000e14 <cleanup_stdio+0x30>
 8000e0a:	4620      	mov	r0, r4
 8000e0c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000e10:	f000 beb2 	b.w	8001b78 <_fflush_r>
 8000e14:	bd10      	pop	{r4, pc}
 8000e16:	bf00      	nop
 8000e18:	200001b8 	.word	0x200001b8
 8000e1c:	20000220 	.word	0x20000220
 8000e20:	20000288 	.word	0x20000288

08000e24 <global_stdio_init.part.0>:
 8000e24:	b510      	push	{r4, lr}
 8000e26:	4b0b      	ldr	r3, [pc, #44]	@ (8000e54 <global_stdio_init.part.0+0x30>)
 8000e28:	4c0b      	ldr	r4, [pc, #44]	@ (8000e58 <global_stdio_init.part.0+0x34>)
 8000e2a:	4a0c      	ldr	r2, [pc, #48]	@ (8000e5c <global_stdio_init.part.0+0x38>)
 8000e2c:	601a      	str	r2, [r3, #0]
 8000e2e:	4620      	mov	r0, r4
 8000e30:	2200      	movs	r2, #0
 8000e32:	2104      	movs	r1, #4
 8000e34:	f7ff ff94 	bl	8000d60 <std>
 8000e38:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8000e3c:	2201      	movs	r2, #1
 8000e3e:	2109      	movs	r1, #9
 8000e40:	f7ff ff8e 	bl	8000d60 <std>
 8000e44:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8000e48:	2202      	movs	r2, #2
 8000e4a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000e4e:	2112      	movs	r1, #18
 8000e50:	f7ff bf86 	b.w	8000d60 <std>
 8000e54:	200002f0 	.word	0x200002f0
 8000e58:	200001b8 	.word	0x200001b8
 8000e5c:	08000dcd 	.word	0x08000dcd

08000e60 <__sfp_lock_acquire>:
 8000e60:	4801      	ldr	r0, [pc, #4]	@ (8000e68 <__sfp_lock_acquire+0x8>)
 8000e62:	f000 ba14 	b.w	800128e <__retarget_lock_acquire_recursive>
 8000e66:	bf00      	nop
 8000e68:	200002f9 	.word	0x200002f9

08000e6c <__sfp_lock_release>:
 8000e6c:	4801      	ldr	r0, [pc, #4]	@ (8000e74 <__sfp_lock_release+0x8>)
 8000e6e:	f000 ba0f 	b.w	8001290 <__retarget_lock_release_recursive>
 8000e72:	bf00      	nop
 8000e74:	200002f9 	.word	0x200002f9

08000e78 <__sinit>:
 8000e78:	b510      	push	{r4, lr}
 8000e7a:	4604      	mov	r4, r0
 8000e7c:	f7ff fff0 	bl	8000e60 <__sfp_lock_acquire>
 8000e80:	6a23      	ldr	r3, [r4, #32]
 8000e82:	b11b      	cbz	r3, 8000e8c <__sinit+0x14>
 8000e84:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000e88:	f7ff bff0 	b.w	8000e6c <__sfp_lock_release>
 8000e8c:	4b04      	ldr	r3, [pc, #16]	@ (8000ea0 <__sinit+0x28>)
 8000e8e:	6223      	str	r3, [r4, #32]
 8000e90:	4b04      	ldr	r3, [pc, #16]	@ (8000ea4 <__sinit+0x2c>)
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	2b00      	cmp	r3, #0
 8000e96:	d1f5      	bne.n	8000e84 <__sinit+0xc>
 8000e98:	f7ff ffc4 	bl	8000e24 <global_stdio_init.part.0>
 8000e9c:	e7f2      	b.n	8000e84 <__sinit+0xc>
 8000e9e:	bf00      	nop
 8000ea0:	08000de5 	.word	0x08000de5
 8000ea4:	200002f0 	.word	0x200002f0

08000ea8 <_fwalk_sglue>:
 8000ea8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000eac:	4607      	mov	r7, r0
 8000eae:	4688      	mov	r8, r1
 8000eb0:	4614      	mov	r4, r2
 8000eb2:	2600      	movs	r6, #0
 8000eb4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8000eb8:	f1b9 0901 	subs.w	r9, r9, #1
 8000ebc:	d505      	bpl.n	8000eca <_fwalk_sglue+0x22>
 8000ebe:	6824      	ldr	r4, [r4, #0]
 8000ec0:	2c00      	cmp	r4, #0
 8000ec2:	d1f7      	bne.n	8000eb4 <_fwalk_sglue+0xc>
 8000ec4:	4630      	mov	r0, r6
 8000ec6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000eca:	89ab      	ldrh	r3, [r5, #12]
 8000ecc:	2b01      	cmp	r3, #1
 8000ece:	d907      	bls.n	8000ee0 <_fwalk_sglue+0x38>
 8000ed0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8000ed4:	3301      	adds	r3, #1
 8000ed6:	d003      	beq.n	8000ee0 <_fwalk_sglue+0x38>
 8000ed8:	4629      	mov	r1, r5
 8000eda:	4638      	mov	r0, r7
 8000edc:	47c0      	blx	r8
 8000ede:	4306      	orrs	r6, r0
 8000ee0:	3568      	adds	r5, #104	@ 0x68
 8000ee2:	e7e9      	b.n	8000eb8 <_fwalk_sglue+0x10>

08000ee4 <iprintf>:
 8000ee4:	b40f      	push	{r0, r1, r2, r3}
 8000ee6:	b507      	push	{r0, r1, r2, lr}
 8000ee8:	4906      	ldr	r1, [pc, #24]	@ (8000f04 <iprintf+0x20>)
 8000eea:	ab04      	add	r3, sp, #16
 8000eec:	6808      	ldr	r0, [r1, #0]
 8000eee:	f853 2b04 	ldr.w	r2, [r3], #4
 8000ef2:	6881      	ldr	r1, [r0, #8]
 8000ef4:	9301      	str	r3, [sp, #4]
 8000ef6:	f000 fb15 	bl	8001524 <_vfiprintf_r>
 8000efa:	b003      	add	sp, #12
 8000efc:	f85d eb04 	ldr.w	lr, [sp], #4
 8000f00:	b004      	add	sp, #16
 8000f02:	4770      	bx	lr
 8000f04:	20000064 	.word	0x20000064

08000f08 <_puts_r>:
 8000f08:	6a03      	ldr	r3, [r0, #32]
 8000f0a:	b570      	push	{r4, r5, r6, lr}
 8000f0c:	6884      	ldr	r4, [r0, #8]
 8000f0e:	4605      	mov	r5, r0
 8000f10:	460e      	mov	r6, r1
 8000f12:	b90b      	cbnz	r3, 8000f18 <_puts_r+0x10>
 8000f14:	f7ff ffb0 	bl	8000e78 <__sinit>
 8000f18:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8000f1a:	07db      	lsls	r3, r3, #31
 8000f1c:	d405      	bmi.n	8000f2a <_puts_r+0x22>
 8000f1e:	89a3      	ldrh	r3, [r4, #12]
 8000f20:	0598      	lsls	r0, r3, #22
 8000f22:	d402      	bmi.n	8000f2a <_puts_r+0x22>
 8000f24:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8000f26:	f000 f9b2 	bl	800128e <__retarget_lock_acquire_recursive>
 8000f2a:	89a3      	ldrh	r3, [r4, #12]
 8000f2c:	0719      	lsls	r1, r3, #28
 8000f2e:	d502      	bpl.n	8000f36 <_puts_r+0x2e>
 8000f30:	6923      	ldr	r3, [r4, #16]
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	d135      	bne.n	8000fa2 <_puts_r+0x9a>
 8000f36:	4621      	mov	r1, r4
 8000f38:	4628      	mov	r0, r5
 8000f3a:	f000 f8c5 	bl	80010c8 <__swsetup_r>
 8000f3e:	b380      	cbz	r0, 8000fa2 <_puts_r+0x9a>
 8000f40:	f04f 35ff 	mov.w	r5, #4294967295
 8000f44:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8000f46:	07da      	lsls	r2, r3, #31
 8000f48:	d405      	bmi.n	8000f56 <_puts_r+0x4e>
 8000f4a:	89a3      	ldrh	r3, [r4, #12]
 8000f4c:	059b      	lsls	r3, r3, #22
 8000f4e:	d402      	bmi.n	8000f56 <_puts_r+0x4e>
 8000f50:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8000f52:	f000 f99d 	bl	8001290 <__retarget_lock_release_recursive>
 8000f56:	4628      	mov	r0, r5
 8000f58:	bd70      	pop	{r4, r5, r6, pc}
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	da04      	bge.n	8000f68 <_puts_r+0x60>
 8000f5e:	69a2      	ldr	r2, [r4, #24]
 8000f60:	429a      	cmp	r2, r3
 8000f62:	dc17      	bgt.n	8000f94 <_puts_r+0x8c>
 8000f64:	290a      	cmp	r1, #10
 8000f66:	d015      	beq.n	8000f94 <_puts_r+0x8c>
 8000f68:	6823      	ldr	r3, [r4, #0]
 8000f6a:	1c5a      	adds	r2, r3, #1
 8000f6c:	6022      	str	r2, [r4, #0]
 8000f6e:	7019      	strb	r1, [r3, #0]
 8000f70:	68a3      	ldr	r3, [r4, #8]
 8000f72:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8000f76:	3b01      	subs	r3, #1
 8000f78:	60a3      	str	r3, [r4, #8]
 8000f7a:	2900      	cmp	r1, #0
 8000f7c:	d1ed      	bne.n	8000f5a <_puts_r+0x52>
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	da11      	bge.n	8000fa6 <_puts_r+0x9e>
 8000f82:	4622      	mov	r2, r4
 8000f84:	210a      	movs	r1, #10
 8000f86:	4628      	mov	r0, r5
 8000f88:	f000 f85f 	bl	800104a <__swbuf_r>
 8000f8c:	3001      	adds	r0, #1
 8000f8e:	d0d7      	beq.n	8000f40 <_puts_r+0x38>
 8000f90:	250a      	movs	r5, #10
 8000f92:	e7d7      	b.n	8000f44 <_puts_r+0x3c>
 8000f94:	4622      	mov	r2, r4
 8000f96:	4628      	mov	r0, r5
 8000f98:	f000 f857 	bl	800104a <__swbuf_r>
 8000f9c:	3001      	adds	r0, #1
 8000f9e:	d1e7      	bne.n	8000f70 <_puts_r+0x68>
 8000fa0:	e7ce      	b.n	8000f40 <_puts_r+0x38>
 8000fa2:	3e01      	subs	r6, #1
 8000fa4:	e7e4      	b.n	8000f70 <_puts_r+0x68>
 8000fa6:	6823      	ldr	r3, [r4, #0]
 8000fa8:	1c5a      	adds	r2, r3, #1
 8000faa:	6022      	str	r2, [r4, #0]
 8000fac:	220a      	movs	r2, #10
 8000fae:	701a      	strb	r2, [r3, #0]
 8000fb0:	e7ee      	b.n	8000f90 <_puts_r+0x88>
	...

08000fb4 <puts>:
 8000fb4:	4b02      	ldr	r3, [pc, #8]	@ (8000fc0 <puts+0xc>)
 8000fb6:	4601      	mov	r1, r0
 8000fb8:	6818      	ldr	r0, [r3, #0]
 8000fba:	f7ff bfa5 	b.w	8000f08 <_puts_r>
 8000fbe:	bf00      	nop
 8000fc0:	20000064 	.word	0x20000064

08000fc4 <__sread>:
 8000fc4:	b510      	push	{r4, lr}
 8000fc6:	460c      	mov	r4, r1
 8000fc8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000fcc:	f000 f910 	bl	80011f0 <_read_r>
 8000fd0:	2800      	cmp	r0, #0
 8000fd2:	bfab      	itete	ge
 8000fd4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8000fd6:	89a3      	ldrhlt	r3, [r4, #12]
 8000fd8:	181b      	addge	r3, r3, r0
 8000fda:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8000fde:	bfac      	ite	ge
 8000fe0:	6563      	strge	r3, [r4, #84]	@ 0x54
 8000fe2:	81a3      	strhlt	r3, [r4, #12]
 8000fe4:	bd10      	pop	{r4, pc}

08000fe6 <__swrite>:
 8000fe6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000fea:	461f      	mov	r7, r3
 8000fec:	898b      	ldrh	r3, [r1, #12]
 8000fee:	05db      	lsls	r3, r3, #23
 8000ff0:	4605      	mov	r5, r0
 8000ff2:	460c      	mov	r4, r1
 8000ff4:	4616      	mov	r6, r2
 8000ff6:	d505      	bpl.n	8001004 <__swrite+0x1e>
 8000ff8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000ffc:	2302      	movs	r3, #2
 8000ffe:	2200      	movs	r2, #0
 8001000:	f000 f8e4 	bl	80011cc <_lseek_r>
 8001004:	89a3      	ldrh	r3, [r4, #12]
 8001006:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800100a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800100e:	81a3      	strh	r3, [r4, #12]
 8001010:	4632      	mov	r2, r6
 8001012:	463b      	mov	r3, r7
 8001014:	4628      	mov	r0, r5
 8001016:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800101a:	f000 b8fb 	b.w	8001214 <_write_r>

0800101e <__sseek>:
 800101e:	b510      	push	{r4, lr}
 8001020:	460c      	mov	r4, r1
 8001022:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001026:	f000 f8d1 	bl	80011cc <_lseek_r>
 800102a:	1c43      	adds	r3, r0, #1
 800102c:	89a3      	ldrh	r3, [r4, #12]
 800102e:	bf15      	itete	ne
 8001030:	6560      	strne	r0, [r4, #84]	@ 0x54
 8001032:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8001036:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800103a:	81a3      	strheq	r3, [r4, #12]
 800103c:	bf18      	it	ne
 800103e:	81a3      	strhne	r3, [r4, #12]
 8001040:	bd10      	pop	{r4, pc}

08001042 <__sclose>:
 8001042:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001046:	f000 b8b1 	b.w	80011ac <_close_r>

0800104a <__swbuf_r>:
 800104a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800104c:	460e      	mov	r6, r1
 800104e:	4614      	mov	r4, r2
 8001050:	4605      	mov	r5, r0
 8001052:	b118      	cbz	r0, 800105c <__swbuf_r+0x12>
 8001054:	6a03      	ldr	r3, [r0, #32]
 8001056:	b90b      	cbnz	r3, 800105c <__swbuf_r+0x12>
 8001058:	f7ff ff0e 	bl	8000e78 <__sinit>
 800105c:	69a3      	ldr	r3, [r4, #24]
 800105e:	60a3      	str	r3, [r4, #8]
 8001060:	89a3      	ldrh	r3, [r4, #12]
 8001062:	071a      	lsls	r2, r3, #28
 8001064:	d501      	bpl.n	800106a <__swbuf_r+0x20>
 8001066:	6923      	ldr	r3, [r4, #16]
 8001068:	b943      	cbnz	r3, 800107c <__swbuf_r+0x32>
 800106a:	4621      	mov	r1, r4
 800106c:	4628      	mov	r0, r5
 800106e:	f000 f82b 	bl	80010c8 <__swsetup_r>
 8001072:	b118      	cbz	r0, 800107c <__swbuf_r+0x32>
 8001074:	f04f 37ff 	mov.w	r7, #4294967295
 8001078:	4638      	mov	r0, r7
 800107a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800107c:	6823      	ldr	r3, [r4, #0]
 800107e:	6922      	ldr	r2, [r4, #16]
 8001080:	1a98      	subs	r0, r3, r2
 8001082:	6963      	ldr	r3, [r4, #20]
 8001084:	b2f6      	uxtb	r6, r6
 8001086:	4283      	cmp	r3, r0
 8001088:	4637      	mov	r7, r6
 800108a:	dc05      	bgt.n	8001098 <__swbuf_r+0x4e>
 800108c:	4621      	mov	r1, r4
 800108e:	4628      	mov	r0, r5
 8001090:	f000 fd72 	bl	8001b78 <_fflush_r>
 8001094:	2800      	cmp	r0, #0
 8001096:	d1ed      	bne.n	8001074 <__swbuf_r+0x2a>
 8001098:	68a3      	ldr	r3, [r4, #8]
 800109a:	3b01      	subs	r3, #1
 800109c:	60a3      	str	r3, [r4, #8]
 800109e:	6823      	ldr	r3, [r4, #0]
 80010a0:	1c5a      	adds	r2, r3, #1
 80010a2:	6022      	str	r2, [r4, #0]
 80010a4:	701e      	strb	r6, [r3, #0]
 80010a6:	6962      	ldr	r2, [r4, #20]
 80010a8:	1c43      	adds	r3, r0, #1
 80010aa:	429a      	cmp	r2, r3
 80010ac:	d004      	beq.n	80010b8 <__swbuf_r+0x6e>
 80010ae:	89a3      	ldrh	r3, [r4, #12]
 80010b0:	07db      	lsls	r3, r3, #31
 80010b2:	d5e1      	bpl.n	8001078 <__swbuf_r+0x2e>
 80010b4:	2e0a      	cmp	r6, #10
 80010b6:	d1df      	bne.n	8001078 <__swbuf_r+0x2e>
 80010b8:	4621      	mov	r1, r4
 80010ba:	4628      	mov	r0, r5
 80010bc:	f000 fd5c 	bl	8001b78 <_fflush_r>
 80010c0:	2800      	cmp	r0, #0
 80010c2:	d0d9      	beq.n	8001078 <__swbuf_r+0x2e>
 80010c4:	e7d6      	b.n	8001074 <__swbuf_r+0x2a>
	...

080010c8 <__swsetup_r>:
 80010c8:	b538      	push	{r3, r4, r5, lr}
 80010ca:	4b29      	ldr	r3, [pc, #164]	@ (8001170 <__swsetup_r+0xa8>)
 80010cc:	4605      	mov	r5, r0
 80010ce:	6818      	ldr	r0, [r3, #0]
 80010d0:	460c      	mov	r4, r1
 80010d2:	b118      	cbz	r0, 80010dc <__swsetup_r+0x14>
 80010d4:	6a03      	ldr	r3, [r0, #32]
 80010d6:	b90b      	cbnz	r3, 80010dc <__swsetup_r+0x14>
 80010d8:	f7ff fece 	bl	8000e78 <__sinit>
 80010dc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80010e0:	0719      	lsls	r1, r3, #28
 80010e2:	d422      	bmi.n	800112a <__swsetup_r+0x62>
 80010e4:	06da      	lsls	r2, r3, #27
 80010e6:	d407      	bmi.n	80010f8 <__swsetup_r+0x30>
 80010e8:	2209      	movs	r2, #9
 80010ea:	602a      	str	r2, [r5, #0]
 80010ec:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80010f0:	81a3      	strh	r3, [r4, #12]
 80010f2:	f04f 30ff 	mov.w	r0, #4294967295
 80010f6:	e033      	b.n	8001160 <__swsetup_r+0x98>
 80010f8:	0758      	lsls	r0, r3, #29
 80010fa:	d512      	bpl.n	8001122 <__swsetup_r+0x5a>
 80010fc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80010fe:	b141      	cbz	r1, 8001112 <__swsetup_r+0x4a>
 8001100:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8001104:	4299      	cmp	r1, r3
 8001106:	d002      	beq.n	800110e <__swsetup_r+0x46>
 8001108:	4628      	mov	r0, r5
 800110a:	f000 f8e1 	bl	80012d0 <_free_r>
 800110e:	2300      	movs	r3, #0
 8001110:	6363      	str	r3, [r4, #52]	@ 0x34
 8001112:	89a3      	ldrh	r3, [r4, #12]
 8001114:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8001118:	81a3      	strh	r3, [r4, #12]
 800111a:	2300      	movs	r3, #0
 800111c:	6063      	str	r3, [r4, #4]
 800111e:	6923      	ldr	r3, [r4, #16]
 8001120:	6023      	str	r3, [r4, #0]
 8001122:	89a3      	ldrh	r3, [r4, #12]
 8001124:	f043 0308 	orr.w	r3, r3, #8
 8001128:	81a3      	strh	r3, [r4, #12]
 800112a:	6923      	ldr	r3, [r4, #16]
 800112c:	b94b      	cbnz	r3, 8001142 <__swsetup_r+0x7a>
 800112e:	89a3      	ldrh	r3, [r4, #12]
 8001130:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8001134:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001138:	d003      	beq.n	8001142 <__swsetup_r+0x7a>
 800113a:	4621      	mov	r1, r4
 800113c:	4628      	mov	r0, r5
 800113e:	f000 fd7b 	bl	8001c38 <__smakebuf_r>
 8001142:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001146:	f013 0201 	ands.w	r2, r3, #1
 800114a:	d00a      	beq.n	8001162 <__swsetup_r+0x9a>
 800114c:	2200      	movs	r2, #0
 800114e:	60a2      	str	r2, [r4, #8]
 8001150:	6962      	ldr	r2, [r4, #20]
 8001152:	4252      	negs	r2, r2
 8001154:	61a2      	str	r2, [r4, #24]
 8001156:	6922      	ldr	r2, [r4, #16]
 8001158:	b942      	cbnz	r2, 800116c <__swsetup_r+0xa4>
 800115a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800115e:	d1c5      	bne.n	80010ec <__swsetup_r+0x24>
 8001160:	bd38      	pop	{r3, r4, r5, pc}
 8001162:	0799      	lsls	r1, r3, #30
 8001164:	bf58      	it	pl
 8001166:	6962      	ldrpl	r2, [r4, #20]
 8001168:	60a2      	str	r2, [r4, #8]
 800116a:	e7f4      	b.n	8001156 <__swsetup_r+0x8e>
 800116c:	2000      	movs	r0, #0
 800116e:	e7f7      	b.n	8001160 <__swsetup_r+0x98>
 8001170:	20000064 	.word	0x20000064

08001174 <memset>:
 8001174:	4402      	add	r2, r0
 8001176:	4603      	mov	r3, r0
 8001178:	4293      	cmp	r3, r2
 800117a:	d100      	bne.n	800117e <memset+0xa>
 800117c:	4770      	bx	lr
 800117e:	f803 1b01 	strb.w	r1, [r3], #1
 8001182:	e7f9      	b.n	8001178 <memset+0x4>

08001184 <strncpy>:
 8001184:	b510      	push	{r4, lr}
 8001186:	3901      	subs	r1, #1
 8001188:	4603      	mov	r3, r0
 800118a:	b132      	cbz	r2, 800119a <strncpy+0x16>
 800118c:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8001190:	f803 4b01 	strb.w	r4, [r3], #1
 8001194:	3a01      	subs	r2, #1
 8001196:	2c00      	cmp	r4, #0
 8001198:	d1f7      	bne.n	800118a <strncpy+0x6>
 800119a:	441a      	add	r2, r3
 800119c:	2100      	movs	r1, #0
 800119e:	4293      	cmp	r3, r2
 80011a0:	d100      	bne.n	80011a4 <strncpy+0x20>
 80011a2:	bd10      	pop	{r4, pc}
 80011a4:	f803 1b01 	strb.w	r1, [r3], #1
 80011a8:	e7f9      	b.n	800119e <strncpy+0x1a>
	...

080011ac <_close_r>:
 80011ac:	b538      	push	{r3, r4, r5, lr}
 80011ae:	4d06      	ldr	r5, [pc, #24]	@ (80011c8 <_close_r+0x1c>)
 80011b0:	2300      	movs	r3, #0
 80011b2:	4604      	mov	r4, r0
 80011b4:	4608      	mov	r0, r1
 80011b6:	602b      	str	r3, [r5, #0]
 80011b8:	f7ff fc78 	bl	8000aac <_close>
 80011bc:	1c43      	adds	r3, r0, #1
 80011be:	d102      	bne.n	80011c6 <_close_r+0x1a>
 80011c0:	682b      	ldr	r3, [r5, #0]
 80011c2:	b103      	cbz	r3, 80011c6 <_close_r+0x1a>
 80011c4:	6023      	str	r3, [r4, #0]
 80011c6:	bd38      	pop	{r3, r4, r5, pc}
 80011c8:	200002f4 	.word	0x200002f4

080011cc <_lseek_r>:
 80011cc:	b538      	push	{r3, r4, r5, lr}
 80011ce:	4d07      	ldr	r5, [pc, #28]	@ (80011ec <_lseek_r+0x20>)
 80011d0:	4604      	mov	r4, r0
 80011d2:	4608      	mov	r0, r1
 80011d4:	4611      	mov	r1, r2
 80011d6:	2200      	movs	r2, #0
 80011d8:	602a      	str	r2, [r5, #0]
 80011da:	461a      	mov	r2, r3
 80011dc:	f7ff fc8d 	bl	8000afa <_lseek>
 80011e0:	1c43      	adds	r3, r0, #1
 80011e2:	d102      	bne.n	80011ea <_lseek_r+0x1e>
 80011e4:	682b      	ldr	r3, [r5, #0]
 80011e6:	b103      	cbz	r3, 80011ea <_lseek_r+0x1e>
 80011e8:	6023      	str	r3, [r4, #0]
 80011ea:	bd38      	pop	{r3, r4, r5, pc}
 80011ec:	200002f4 	.word	0x200002f4

080011f0 <_read_r>:
 80011f0:	b538      	push	{r3, r4, r5, lr}
 80011f2:	4d07      	ldr	r5, [pc, #28]	@ (8001210 <_read_r+0x20>)
 80011f4:	4604      	mov	r4, r0
 80011f6:	4608      	mov	r0, r1
 80011f8:	4611      	mov	r1, r2
 80011fa:	2200      	movs	r2, #0
 80011fc:	602a      	str	r2, [r5, #0]
 80011fe:	461a      	mov	r2, r3
 8001200:	f7ff fc1b 	bl	8000a3a <_read>
 8001204:	1c43      	adds	r3, r0, #1
 8001206:	d102      	bne.n	800120e <_read_r+0x1e>
 8001208:	682b      	ldr	r3, [r5, #0]
 800120a:	b103      	cbz	r3, 800120e <_read_r+0x1e>
 800120c:	6023      	str	r3, [r4, #0]
 800120e:	bd38      	pop	{r3, r4, r5, pc}
 8001210:	200002f4 	.word	0x200002f4

08001214 <_write_r>:
 8001214:	b538      	push	{r3, r4, r5, lr}
 8001216:	4d07      	ldr	r5, [pc, #28]	@ (8001234 <_write_r+0x20>)
 8001218:	4604      	mov	r4, r0
 800121a:	4608      	mov	r0, r1
 800121c:	4611      	mov	r1, r2
 800121e:	2200      	movs	r2, #0
 8001220:	602a      	str	r2, [r5, #0]
 8001222:	461a      	mov	r2, r3
 8001224:	f7ff fc26 	bl	8000a74 <_write>
 8001228:	1c43      	adds	r3, r0, #1
 800122a:	d102      	bne.n	8001232 <_write_r+0x1e>
 800122c:	682b      	ldr	r3, [r5, #0]
 800122e:	b103      	cbz	r3, 8001232 <_write_r+0x1e>
 8001230:	6023      	str	r3, [r4, #0]
 8001232:	bd38      	pop	{r3, r4, r5, pc}
 8001234:	200002f4 	.word	0x200002f4

08001238 <__errno>:
 8001238:	4b01      	ldr	r3, [pc, #4]	@ (8001240 <__errno+0x8>)
 800123a:	6818      	ldr	r0, [r3, #0]
 800123c:	4770      	bx	lr
 800123e:	bf00      	nop
 8001240:	20000064 	.word	0x20000064

08001244 <__libc_init_array>:
 8001244:	b570      	push	{r4, r5, r6, lr}
 8001246:	4d0d      	ldr	r5, [pc, #52]	@ (800127c <__libc_init_array+0x38>)
 8001248:	4c0d      	ldr	r4, [pc, #52]	@ (8001280 <__libc_init_array+0x3c>)
 800124a:	1b64      	subs	r4, r4, r5
 800124c:	10a4      	asrs	r4, r4, #2
 800124e:	2600      	movs	r6, #0
 8001250:	42a6      	cmp	r6, r4
 8001252:	d109      	bne.n	8001268 <__libc_init_array+0x24>
 8001254:	4d0b      	ldr	r5, [pc, #44]	@ (8001284 <__libc_init_array+0x40>)
 8001256:	4c0c      	ldr	r4, [pc, #48]	@ (8001288 <__libc_init_array+0x44>)
 8001258:	f000 fda8 	bl	8001dac <_init>
 800125c:	1b64      	subs	r4, r4, r5
 800125e:	10a4      	asrs	r4, r4, #2
 8001260:	2600      	movs	r6, #0
 8001262:	42a6      	cmp	r6, r4
 8001264:	d105      	bne.n	8001272 <__libc_init_array+0x2e>
 8001266:	bd70      	pop	{r4, r5, r6, pc}
 8001268:	f855 3b04 	ldr.w	r3, [r5], #4
 800126c:	4798      	blx	r3
 800126e:	3601      	adds	r6, #1
 8001270:	e7ee      	b.n	8001250 <__libc_init_array+0xc>
 8001272:	f855 3b04 	ldr.w	r3, [r5], #4
 8001276:	4798      	blx	r3
 8001278:	3601      	adds	r6, #1
 800127a:	e7f2      	b.n	8001262 <__libc_init_array+0x1e>
 800127c:	08002450 	.word	0x08002450
 8001280:	08002450 	.word	0x08002450
 8001284:	08002450 	.word	0x08002450
 8001288:	08002454 	.word	0x08002454

0800128c <__retarget_lock_init_recursive>:
 800128c:	4770      	bx	lr

0800128e <__retarget_lock_acquire_recursive>:
 800128e:	4770      	bx	lr

08001290 <__retarget_lock_release_recursive>:
 8001290:	4770      	bx	lr
	...

08001294 <__assert_func>:
 8001294:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8001296:	4614      	mov	r4, r2
 8001298:	461a      	mov	r2, r3
 800129a:	4b09      	ldr	r3, [pc, #36]	@ (80012c0 <__assert_func+0x2c>)
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	4605      	mov	r5, r0
 80012a0:	68d8      	ldr	r0, [r3, #12]
 80012a2:	b954      	cbnz	r4, 80012ba <__assert_func+0x26>
 80012a4:	4b07      	ldr	r3, [pc, #28]	@ (80012c4 <__assert_func+0x30>)
 80012a6:	461c      	mov	r4, r3
 80012a8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80012ac:	9100      	str	r1, [sp, #0]
 80012ae:	462b      	mov	r3, r5
 80012b0:	4905      	ldr	r1, [pc, #20]	@ (80012c8 <__assert_func+0x34>)
 80012b2:	f000 fc89 	bl	8001bc8 <fiprintf>
 80012b6:	f000 fd2d 	bl	8001d14 <abort>
 80012ba:	4b04      	ldr	r3, [pc, #16]	@ (80012cc <__assert_func+0x38>)
 80012bc:	e7f4      	b.n	80012a8 <__assert_func+0x14>
 80012be:	bf00      	nop
 80012c0:	20000064 	.word	0x20000064
 80012c4:	08002412 	.word	0x08002412
 80012c8:	080023e4 	.word	0x080023e4
 80012cc:	080023d7 	.word	0x080023d7

080012d0 <_free_r>:
 80012d0:	b538      	push	{r3, r4, r5, lr}
 80012d2:	4605      	mov	r5, r0
 80012d4:	2900      	cmp	r1, #0
 80012d6:	d041      	beq.n	800135c <_free_r+0x8c>
 80012d8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80012dc:	1f0c      	subs	r4, r1, #4
 80012de:	2b00      	cmp	r3, #0
 80012e0:	bfb8      	it	lt
 80012e2:	18e4      	addlt	r4, r4, r3
 80012e4:	f000 f8e8 	bl	80014b8 <__malloc_lock>
 80012e8:	4a1d      	ldr	r2, [pc, #116]	@ (8001360 <_free_r+0x90>)
 80012ea:	6813      	ldr	r3, [r2, #0]
 80012ec:	b933      	cbnz	r3, 80012fc <_free_r+0x2c>
 80012ee:	6063      	str	r3, [r4, #4]
 80012f0:	6014      	str	r4, [r2, #0]
 80012f2:	4628      	mov	r0, r5
 80012f4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80012f8:	f000 b8e4 	b.w	80014c4 <__malloc_unlock>
 80012fc:	42a3      	cmp	r3, r4
 80012fe:	d908      	bls.n	8001312 <_free_r+0x42>
 8001300:	6820      	ldr	r0, [r4, #0]
 8001302:	1821      	adds	r1, r4, r0
 8001304:	428b      	cmp	r3, r1
 8001306:	bf01      	itttt	eq
 8001308:	6819      	ldreq	r1, [r3, #0]
 800130a:	685b      	ldreq	r3, [r3, #4]
 800130c:	1809      	addeq	r1, r1, r0
 800130e:	6021      	streq	r1, [r4, #0]
 8001310:	e7ed      	b.n	80012ee <_free_r+0x1e>
 8001312:	461a      	mov	r2, r3
 8001314:	685b      	ldr	r3, [r3, #4]
 8001316:	b10b      	cbz	r3, 800131c <_free_r+0x4c>
 8001318:	42a3      	cmp	r3, r4
 800131a:	d9fa      	bls.n	8001312 <_free_r+0x42>
 800131c:	6811      	ldr	r1, [r2, #0]
 800131e:	1850      	adds	r0, r2, r1
 8001320:	42a0      	cmp	r0, r4
 8001322:	d10b      	bne.n	800133c <_free_r+0x6c>
 8001324:	6820      	ldr	r0, [r4, #0]
 8001326:	4401      	add	r1, r0
 8001328:	1850      	adds	r0, r2, r1
 800132a:	4283      	cmp	r3, r0
 800132c:	6011      	str	r1, [r2, #0]
 800132e:	d1e0      	bne.n	80012f2 <_free_r+0x22>
 8001330:	6818      	ldr	r0, [r3, #0]
 8001332:	685b      	ldr	r3, [r3, #4]
 8001334:	6053      	str	r3, [r2, #4]
 8001336:	4408      	add	r0, r1
 8001338:	6010      	str	r0, [r2, #0]
 800133a:	e7da      	b.n	80012f2 <_free_r+0x22>
 800133c:	d902      	bls.n	8001344 <_free_r+0x74>
 800133e:	230c      	movs	r3, #12
 8001340:	602b      	str	r3, [r5, #0]
 8001342:	e7d6      	b.n	80012f2 <_free_r+0x22>
 8001344:	6820      	ldr	r0, [r4, #0]
 8001346:	1821      	adds	r1, r4, r0
 8001348:	428b      	cmp	r3, r1
 800134a:	bf04      	itt	eq
 800134c:	6819      	ldreq	r1, [r3, #0]
 800134e:	685b      	ldreq	r3, [r3, #4]
 8001350:	6063      	str	r3, [r4, #4]
 8001352:	bf04      	itt	eq
 8001354:	1809      	addeq	r1, r1, r0
 8001356:	6021      	streq	r1, [r4, #0]
 8001358:	6054      	str	r4, [r2, #4]
 800135a:	e7ca      	b.n	80012f2 <_free_r+0x22>
 800135c:	bd38      	pop	{r3, r4, r5, pc}
 800135e:	bf00      	nop
 8001360:	20000300 	.word	0x20000300

08001364 <malloc>:
 8001364:	4b02      	ldr	r3, [pc, #8]	@ (8001370 <malloc+0xc>)
 8001366:	4601      	mov	r1, r0
 8001368:	6818      	ldr	r0, [r3, #0]
 800136a:	f000 b825 	b.w	80013b8 <_malloc_r>
 800136e:	bf00      	nop
 8001370:	20000064 	.word	0x20000064

08001374 <sbrk_aligned>:
 8001374:	b570      	push	{r4, r5, r6, lr}
 8001376:	4e0f      	ldr	r6, [pc, #60]	@ (80013b4 <sbrk_aligned+0x40>)
 8001378:	460c      	mov	r4, r1
 800137a:	6831      	ldr	r1, [r6, #0]
 800137c:	4605      	mov	r5, r0
 800137e:	b911      	cbnz	r1, 8001386 <sbrk_aligned+0x12>
 8001380:	f000 fcb8 	bl	8001cf4 <_sbrk_r>
 8001384:	6030      	str	r0, [r6, #0]
 8001386:	4621      	mov	r1, r4
 8001388:	4628      	mov	r0, r5
 800138a:	f000 fcb3 	bl	8001cf4 <_sbrk_r>
 800138e:	1c43      	adds	r3, r0, #1
 8001390:	d103      	bne.n	800139a <sbrk_aligned+0x26>
 8001392:	f04f 34ff 	mov.w	r4, #4294967295
 8001396:	4620      	mov	r0, r4
 8001398:	bd70      	pop	{r4, r5, r6, pc}
 800139a:	1cc4      	adds	r4, r0, #3
 800139c:	f024 0403 	bic.w	r4, r4, #3
 80013a0:	42a0      	cmp	r0, r4
 80013a2:	d0f8      	beq.n	8001396 <sbrk_aligned+0x22>
 80013a4:	1a21      	subs	r1, r4, r0
 80013a6:	4628      	mov	r0, r5
 80013a8:	f000 fca4 	bl	8001cf4 <_sbrk_r>
 80013ac:	3001      	adds	r0, #1
 80013ae:	d1f2      	bne.n	8001396 <sbrk_aligned+0x22>
 80013b0:	e7ef      	b.n	8001392 <sbrk_aligned+0x1e>
 80013b2:	bf00      	nop
 80013b4:	200002fc 	.word	0x200002fc

080013b8 <_malloc_r>:
 80013b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80013bc:	1ccd      	adds	r5, r1, #3
 80013be:	f025 0503 	bic.w	r5, r5, #3
 80013c2:	3508      	adds	r5, #8
 80013c4:	2d0c      	cmp	r5, #12
 80013c6:	bf38      	it	cc
 80013c8:	250c      	movcc	r5, #12
 80013ca:	2d00      	cmp	r5, #0
 80013cc:	4606      	mov	r6, r0
 80013ce:	db01      	blt.n	80013d4 <_malloc_r+0x1c>
 80013d0:	42a9      	cmp	r1, r5
 80013d2:	d904      	bls.n	80013de <_malloc_r+0x26>
 80013d4:	230c      	movs	r3, #12
 80013d6:	6033      	str	r3, [r6, #0]
 80013d8:	2000      	movs	r0, #0
 80013da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80013de:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80014b4 <_malloc_r+0xfc>
 80013e2:	f000 f869 	bl	80014b8 <__malloc_lock>
 80013e6:	f8d8 3000 	ldr.w	r3, [r8]
 80013ea:	461c      	mov	r4, r3
 80013ec:	bb44      	cbnz	r4, 8001440 <_malloc_r+0x88>
 80013ee:	4629      	mov	r1, r5
 80013f0:	4630      	mov	r0, r6
 80013f2:	f7ff ffbf 	bl	8001374 <sbrk_aligned>
 80013f6:	1c43      	adds	r3, r0, #1
 80013f8:	4604      	mov	r4, r0
 80013fa:	d158      	bne.n	80014ae <_malloc_r+0xf6>
 80013fc:	f8d8 4000 	ldr.w	r4, [r8]
 8001400:	4627      	mov	r7, r4
 8001402:	2f00      	cmp	r7, #0
 8001404:	d143      	bne.n	800148e <_malloc_r+0xd6>
 8001406:	2c00      	cmp	r4, #0
 8001408:	d04b      	beq.n	80014a2 <_malloc_r+0xea>
 800140a:	6823      	ldr	r3, [r4, #0]
 800140c:	4639      	mov	r1, r7
 800140e:	4630      	mov	r0, r6
 8001410:	eb04 0903 	add.w	r9, r4, r3
 8001414:	f000 fc6e 	bl	8001cf4 <_sbrk_r>
 8001418:	4581      	cmp	r9, r0
 800141a:	d142      	bne.n	80014a2 <_malloc_r+0xea>
 800141c:	6821      	ldr	r1, [r4, #0]
 800141e:	1a6d      	subs	r5, r5, r1
 8001420:	4629      	mov	r1, r5
 8001422:	4630      	mov	r0, r6
 8001424:	f7ff ffa6 	bl	8001374 <sbrk_aligned>
 8001428:	3001      	adds	r0, #1
 800142a:	d03a      	beq.n	80014a2 <_malloc_r+0xea>
 800142c:	6823      	ldr	r3, [r4, #0]
 800142e:	442b      	add	r3, r5
 8001430:	6023      	str	r3, [r4, #0]
 8001432:	f8d8 3000 	ldr.w	r3, [r8]
 8001436:	685a      	ldr	r2, [r3, #4]
 8001438:	bb62      	cbnz	r2, 8001494 <_malloc_r+0xdc>
 800143a:	f8c8 7000 	str.w	r7, [r8]
 800143e:	e00f      	b.n	8001460 <_malloc_r+0xa8>
 8001440:	6822      	ldr	r2, [r4, #0]
 8001442:	1b52      	subs	r2, r2, r5
 8001444:	d420      	bmi.n	8001488 <_malloc_r+0xd0>
 8001446:	2a0b      	cmp	r2, #11
 8001448:	d917      	bls.n	800147a <_malloc_r+0xc2>
 800144a:	1961      	adds	r1, r4, r5
 800144c:	42a3      	cmp	r3, r4
 800144e:	6025      	str	r5, [r4, #0]
 8001450:	bf18      	it	ne
 8001452:	6059      	strne	r1, [r3, #4]
 8001454:	6863      	ldr	r3, [r4, #4]
 8001456:	bf08      	it	eq
 8001458:	f8c8 1000 	streq.w	r1, [r8]
 800145c:	5162      	str	r2, [r4, r5]
 800145e:	604b      	str	r3, [r1, #4]
 8001460:	4630      	mov	r0, r6
 8001462:	f000 f82f 	bl	80014c4 <__malloc_unlock>
 8001466:	f104 000b 	add.w	r0, r4, #11
 800146a:	1d23      	adds	r3, r4, #4
 800146c:	f020 0007 	bic.w	r0, r0, #7
 8001470:	1ac2      	subs	r2, r0, r3
 8001472:	bf1c      	itt	ne
 8001474:	1a1b      	subne	r3, r3, r0
 8001476:	50a3      	strne	r3, [r4, r2]
 8001478:	e7af      	b.n	80013da <_malloc_r+0x22>
 800147a:	6862      	ldr	r2, [r4, #4]
 800147c:	42a3      	cmp	r3, r4
 800147e:	bf0c      	ite	eq
 8001480:	f8c8 2000 	streq.w	r2, [r8]
 8001484:	605a      	strne	r2, [r3, #4]
 8001486:	e7eb      	b.n	8001460 <_malloc_r+0xa8>
 8001488:	4623      	mov	r3, r4
 800148a:	6864      	ldr	r4, [r4, #4]
 800148c:	e7ae      	b.n	80013ec <_malloc_r+0x34>
 800148e:	463c      	mov	r4, r7
 8001490:	687f      	ldr	r7, [r7, #4]
 8001492:	e7b6      	b.n	8001402 <_malloc_r+0x4a>
 8001494:	461a      	mov	r2, r3
 8001496:	685b      	ldr	r3, [r3, #4]
 8001498:	42a3      	cmp	r3, r4
 800149a:	d1fb      	bne.n	8001494 <_malloc_r+0xdc>
 800149c:	2300      	movs	r3, #0
 800149e:	6053      	str	r3, [r2, #4]
 80014a0:	e7de      	b.n	8001460 <_malloc_r+0xa8>
 80014a2:	230c      	movs	r3, #12
 80014a4:	6033      	str	r3, [r6, #0]
 80014a6:	4630      	mov	r0, r6
 80014a8:	f000 f80c 	bl	80014c4 <__malloc_unlock>
 80014ac:	e794      	b.n	80013d8 <_malloc_r+0x20>
 80014ae:	6005      	str	r5, [r0, #0]
 80014b0:	e7d6      	b.n	8001460 <_malloc_r+0xa8>
 80014b2:	bf00      	nop
 80014b4:	20000300 	.word	0x20000300

080014b8 <__malloc_lock>:
 80014b8:	4801      	ldr	r0, [pc, #4]	@ (80014c0 <__malloc_lock+0x8>)
 80014ba:	f7ff bee8 	b.w	800128e <__retarget_lock_acquire_recursive>
 80014be:	bf00      	nop
 80014c0:	200002f8 	.word	0x200002f8

080014c4 <__malloc_unlock>:
 80014c4:	4801      	ldr	r0, [pc, #4]	@ (80014cc <__malloc_unlock+0x8>)
 80014c6:	f7ff bee3 	b.w	8001290 <__retarget_lock_release_recursive>
 80014ca:	bf00      	nop
 80014cc:	200002f8 	.word	0x200002f8

080014d0 <__sfputc_r>:
 80014d0:	6893      	ldr	r3, [r2, #8]
 80014d2:	3b01      	subs	r3, #1
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	b410      	push	{r4}
 80014d8:	6093      	str	r3, [r2, #8]
 80014da:	da08      	bge.n	80014ee <__sfputc_r+0x1e>
 80014dc:	6994      	ldr	r4, [r2, #24]
 80014de:	42a3      	cmp	r3, r4
 80014e0:	db01      	blt.n	80014e6 <__sfputc_r+0x16>
 80014e2:	290a      	cmp	r1, #10
 80014e4:	d103      	bne.n	80014ee <__sfputc_r+0x1e>
 80014e6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80014ea:	f7ff bdae 	b.w	800104a <__swbuf_r>
 80014ee:	6813      	ldr	r3, [r2, #0]
 80014f0:	1c58      	adds	r0, r3, #1
 80014f2:	6010      	str	r0, [r2, #0]
 80014f4:	7019      	strb	r1, [r3, #0]
 80014f6:	4608      	mov	r0, r1
 80014f8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80014fc:	4770      	bx	lr

080014fe <__sfputs_r>:
 80014fe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001500:	4606      	mov	r6, r0
 8001502:	460f      	mov	r7, r1
 8001504:	4614      	mov	r4, r2
 8001506:	18d5      	adds	r5, r2, r3
 8001508:	42ac      	cmp	r4, r5
 800150a:	d101      	bne.n	8001510 <__sfputs_r+0x12>
 800150c:	2000      	movs	r0, #0
 800150e:	e007      	b.n	8001520 <__sfputs_r+0x22>
 8001510:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001514:	463a      	mov	r2, r7
 8001516:	4630      	mov	r0, r6
 8001518:	f7ff ffda 	bl	80014d0 <__sfputc_r>
 800151c:	1c43      	adds	r3, r0, #1
 800151e:	d1f3      	bne.n	8001508 <__sfputs_r+0xa>
 8001520:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08001524 <_vfiprintf_r>:
 8001524:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001528:	460d      	mov	r5, r1
 800152a:	b09d      	sub	sp, #116	@ 0x74
 800152c:	4614      	mov	r4, r2
 800152e:	4698      	mov	r8, r3
 8001530:	4606      	mov	r6, r0
 8001532:	b118      	cbz	r0, 800153c <_vfiprintf_r+0x18>
 8001534:	6a03      	ldr	r3, [r0, #32]
 8001536:	b90b      	cbnz	r3, 800153c <_vfiprintf_r+0x18>
 8001538:	f7ff fc9e 	bl	8000e78 <__sinit>
 800153c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800153e:	07d9      	lsls	r1, r3, #31
 8001540:	d405      	bmi.n	800154e <_vfiprintf_r+0x2a>
 8001542:	89ab      	ldrh	r3, [r5, #12]
 8001544:	059a      	lsls	r2, r3, #22
 8001546:	d402      	bmi.n	800154e <_vfiprintf_r+0x2a>
 8001548:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800154a:	f7ff fea0 	bl	800128e <__retarget_lock_acquire_recursive>
 800154e:	89ab      	ldrh	r3, [r5, #12]
 8001550:	071b      	lsls	r3, r3, #28
 8001552:	d501      	bpl.n	8001558 <_vfiprintf_r+0x34>
 8001554:	692b      	ldr	r3, [r5, #16]
 8001556:	b99b      	cbnz	r3, 8001580 <_vfiprintf_r+0x5c>
 8001558:	4629      	mov	r1, r5
 800155a:	4630      	mov	r0, r6
 800155c:	f7ff fdb4 	bl	80010c8 <__swsetup_r>
 8001560:	b170      	cbz	r0, 8001580 <_vfiprintf_r+0x5c>
 8001562:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8001564:	07dc      	lsls	r4, r3, #31
 8001566:	d504      	bpl.n	8001572 <_vfiprintf_r+0x4e>
 8001568:	f04f 30ff 	mov.w	r0, #4294967295
 800156c:	b01d      	add	sp, #116	@ 0x74
 800156e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001572:	89ab      	ldrh	r3, [r5, #12]
 8001574:	0598      	lsls	r0, r3, #22
 8001576:	d4f7      	bmi.n	8001568 <_vfiprintf_r+0x44>
 8001578:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800157a:	f7ff fe89 	bl	8001290 <__retarget_lock_release_recursive>
 800157e:	e7f3      	b.n	8001568 <_vfiprintf_r+0x44>
 8001580:	2300      	movs	r3, #0
 8001582:	9309      	str	r3, [sp, #36]	@ 0x24
 8001584:	2320      	movs	r3, #32
 8001586:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800158a:	f8cd 800c 	str.w	r8, [sp, #12]
 800158e:	2330      	movs	r3, #48	@ 0x30
 8001590:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8001740 <_vfiprintf_r+0x21c>
 8001594:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8001598:	f04f 0901 	mov.w	r9, #1
 800159c:	4623      	mov	r3, r4
 800159e:	469a      	mov	sl, r3
 80015a0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80015a4:	b10a      	cbz	r2, 80015aa <_vfiprintf_r+0x86>
 80015a6:	2a25      	cmp	r2, #37	@ 0x25
 80015a8:	d1f9      	bne.n	800159e <_vfiprintf_r+0x7a>
 80015aa:	ebba 0b04 	subs.w	fp, sl, r4
 80015ae:	d00b      	beq.n	80015c8 <_vfiprintf_r+0xa4>
 80015b0:	465b      	mov	r3, fp
 80015b2:	4622      	mov	r2, r4
 80015b4:	4629      	mov	r1, r5
 80015b6:	4630      	mov	r0, r6
 80015b8:	f7ff ffa1 	bl	80014fe <__sfputs_r>
 80015bc:	3001      	adds	r0, #1
 80015be:	f000 80a7 	beq.w	8001710 <_vfiprintf_r+0x1ec>
 80015c2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80015c4:	445a      	add	r2, fp
 80015c6:	9209      	str	r2, [sp, #36]	@ 0x24
 80015c8:	f89a 3000 	ldrb.w	r3, [sl]
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	f000 809f 	beq.w	8001710 <_vfiprintf_r+0x1ec>
 80015d2:	2300      	movs	r3, #0
 80015d4:	f04f 32ff 	mov.w	r2, #4294967295
 80015d8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80015dc:	f10a 0a01 	add.w	sl, sl, #1
 80015e0:	9304      	str	r3, [sp, #16]
 80015e2:	9307      	str	r3, [sp, #28]
 80015e4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80015e8:	931a      	str	r3, [sp, #104]	@ 0x68
 80015ea:	4654      	mov	r4, sl
 80015ec:	2205      	movs	r2, #5
 80015ee:	f814 1b01 	ldrb.w	r1, [r4], #1
 80015f2:	4853      	ldr	r0, [pc, #332]	@ (8001740 <_vfiprintf_r+0x21c>)
 80015f4:	f7fe fe04 	bl	8000200 <memchr>
 80015f8:	9a04      	ldr	r2, [sp, #16]
 80015fa:	b9d8      	cbnz	r0, 8001634 <_vfiprintf_r+0x110>
 80015fc:	06d1      	lsls	r1, r2, #27
 80015fe:	bf44      	itt	mi
 8001600:	2320      	movmi	r3, #32
 8001602:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8001606:	0713      	lsls	r3, r2, #28
 8001608:	bf44      	itt	mi
 800160a:	232b      	movmi	r3, #43	@ 0x2b
 800160c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8001610:	f89a 3000 	ldrb.w	r3, [sl]
 8001614:	2b2a      	cmp	r3, #42	@ 0x2a
 8001616:	d015      	beq.n	8001644 <_vfiprintf_r+0x120>
 8001618:	9a07      	ldr	r2, [sp, #28]
 800161a:	4654      	mov	r4, sl
 800161c:	2000      	movs	r0, #0
 800161e:	f04f 0c0a 	mov.w	ip, #10
 8001622:	4621      	mov	r1, r4
 8001624:	f811 3b01 	ldrb.w	r3, [r1], #1
 8001628:	3b30      	subs	r3, #48	@ 0x30
 800162a:	2b09      	cmp	r3, #9
 800162c:	d94b      	bls.n	80016c6 <_vfiprintf_r+0x1a2>
 800162e:	b1b0      	cbz	r0, 800165e <_vfiprintf_r+0x13a>
 8001630:	9207      	str	r2, [sp, #28]
 8001632:	e014      	b.n	800165e <_vfiprintf_r+0x13a>
 8001634:	eba0 0308 	sub.w	r3, r0, r8
 8001638:	fa09 f303 	lsl.w	r3, r9, r3
 800163c:	4313      	orrs	r3, r2
 800163e:	9304      	str	r3, [sp, #16]
 8001640:	46a2      	mov	sl, r4
 8001642:	e7d2      	b.n	80015ea <_vfiprintf_r+0xc6>
 8001644:	9b03      	ldr	r3, [sp, #12]
 8001646:	1d19      	adds	r1, r3, #4
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	9103      	str	r1, [sp, #12]
 800164c:	2b00      	cmp	r3, #0
 800164e:	bfbb      	ittet	lt
 8001650:	425b      	neglt	r3, r3
 8001652:	f042 0202 	orrlt.w	r2, r2, #2
 8001656:	9307      	strge	r3, [sp, #28]
 8001658:	9307      	strlt	r3, [sp, #28]
 800165a:	bfb8      	it	lt
 800165c:	9204      	strlt	r2, [sp, #16]
 800165e:	7823      	ldrb	r3, [r4, #0]
 8001660:	2b2e      	cmp	r3, #46	@ 0x2e
 8001662:	d10a      	bne.n	800167a <_vfiprintf_r+0x156>
 8001664:	7863      	ldrb	r3, [r4, #1]
 8001666:	2b2a      	cmp	r3, #42	@ 0x2a
 8001668:	d132      	bne.n	80016d0 <_vfiprintf_r+0x1ac>
 800166a:	9b03      	ldr	r3, [sp, #12]
 800166c:	1d1a      	adds	r2, r3, #4
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	9203      	str	r2, [sp, #12]
 8001672:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8001676:	3402      	adds	r4, #2
 8001678:	9305      	str	r3, [sp, #20]
 800167a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8001750 <_vfiprintf_r+0x22c>
 800167e:	7821      	ldrb	r1, [r4, #0]
 8001680:	2203      	movs	r2, #3
 8001682:	4650      	mov	r0, sl
 8001684:	f7fe fdbc 	bl	8000200 <memchr>
 8001688:	b138      	cbz	r0, 800169a <_vfiprintf_r+0x176>
 800168a:	9b04      	ldr	r3, [sp, #16]
 800168c:	eba0 000a 	sub.w	r0, r0, sl
 8001690:	2240      	movs	r2, #64	@ 0x40
 8001692:	4082      	lsls	r2, r0
 8001694:	4313      	orrs	r3, r2
 8001696:	3401      	adds	r4, #1
 8001698:	9304      	str	r3, [sp, #16]
 800169a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800169e:	4829      	ldr	r0, [pc, #164]	@ (8001744 <_vfiprintf_r+0x220>)
 80016a0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80016a4:	2206      	movs	r2, #6
 80016a6:	f7fe fdab 	bl	8000200 <memchr>
 80016aa:	2800      	cmp	r0, #0
 80016ac:	d03f      	beq.n	800172e <_vfiprintf_r+0x20a>
 80016ae:	4b26      	ldr	r3, [pc, #152]	@ (8001748 <_vfiprintf_r+0x224>)
 80016b0:	bb1b      	cbnz	r3, 80016fa <_vfiprintf_r+0x1d6>
 80016b2:	9b03      	ldr	r3, [sp, #12]
 80016b4:	3307      	adds	r3, #7
 80016b6:	f023 0307 	bic.w	r3, r3, #7
 80016ba:	3308      	adds	r3, #8
 80016bc:	9303      	str	r3, [sp, #12]
 80016be:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80016c0:	443b      	add	r3, r7
 80016c2:	9309      	str	r3, [sp, #36]	@ 0x24
 80016c4:	e76a      	b.n	800159c <_vfiprintf_r+0x78>
 80016c6:	fb0c 3202 	mla	r2, ip, r2, r3
 80016ca:	460c      	mov	r4, r1
 80016cc:	2001      	movs	r0, #1
 80016ce:	e7a8      	b.n	8001622 <_vfiprintf_r+0xfe>
 80016d0:	2300      	movs	r3, #0
 80016d2:	3401      	adds	r4, #1
 80016d4:	9305      	str	r3, [sp, #20]
 80016d6:	4619      	mov	r1, r3
 80016d8:	f04f 0c0a 	mov.w	ip, #10
 80016dc:	4620      	mov	r0, r4
 80016de:	f810 2b01 	ldrb.w	r2, [r0], #1
 80016e2:	3a30      	subs	r2, #48	@ 0x30
 80016e4:	2a09      	cmp	r2, #9
 80016e6:	d903      	bls.n	80016f0 <_vfiprintf_r+0x1cc>
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d0c6      	beq.n	800167a <_vfiprintf_r+0x156>
 80016ec:	9105      	str	r1, [sp, #20]
 80016ee:	e7c4      	b.n	800167a <_vfiprintf_r+0x156>
 80016f0:	fb0c 2101 	mla	r1, ip, r1, r2
 80016f4:	4604      	mov	r4, r0
 80016f6:	2301      	movs	r3, #1
 80016f8:	e7f0      	b.n	80016dc <_vfiprintf_r+0x1b8>
 80016fa:	ab03      	add	r3, sp, #12
 80016fc:	9300      	str	r3, [sp, #0]
 80016fe:	462a      	mov	r2, r5
 8001700:	4b12      	ldr	r3, [pc, #72]	@ (800174c <_vfiprintf_r+0x228>)
 8001702:	a904      	add	r1, sp, #16
 8001704:	4630      	mov	r0, r6
 8001706:	f3af 8000 	nop.w
 800170a:	4607      	mov	r7, r0
 800170c:	1c78      	adds	r0, r7, #1
 800170e:	d1d6      	bne.n	80016be <_vfiprintf_r+0x19a>
 8001710:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8001712:	07d9      	lsls	r1, r3, #31
 8001714:	d405      	bmi.n	8001722 <_vfiprintf_r+0x1fe>
 8001716:	89ab      	ldrh	r3, [r5, #12]
 8001718:	059a      	lsls	r2, r3, #22
 800171a:	d402      	bmi.n	8001722 <_vfiprintf_r+0x1fe>
 800171c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800171e:	f7ff fdb7 	bl	8001290 <__retarget_lock_release_recursive>
 8001722:	89ab      	ldrh	r3, [r5, #12]
 8001724:	065b      	lsls	r3, r3, #25
 8001726:	f53f af1f 	bmi.w	8001568 <_vfiprintf_r+0x44>
 800172a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800172c:	e71e      	b.n	800156c <_vfiprintf_r+0x48>
 800172e:	ab03      	add	r3, sp, #12
 8001730:	9300      	str	r3, [sp, #0]
 8001732:	462a      	mov	r2, r5
 8001734:	4b05      	ldr	r3, [pc, #20]	@ (800174c <_vfiprintf_r+0x228>)
 8001736:	a904      	add	r1, sp, #16
 8001738:	4630      	mov	r0, r6
 800173a:	f000 f879 	bl	8001830 <_printf_i>
 800173e:	e7e4      	b.n	800170a <_vfiprintf_r+0x1e6>
 8001740:	08002413 	.word	0x08002413
 8001744:	0800241d 	.word	0x0800241d
 8001748:	00000000 	.word	0x00000000
 800174c:	080014ff 	.word	0x080014ff
 8001750:	08002419 	.word	0x08002419

08001754 <_printf_common>:
 8001754:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001758:	4616      	mov	r6, r2
 800175a:	4698      	mov	r8, r3
 800175c:	688a      	ldr	r2, [r1, #8]
 800175e:	690b      	ldr	r3, [r1, #16]
 8001760:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8001764:	4293      	cmp	r3, r2
 8001766:	bfb8      	it	lt
 8001768:	4613      	movlt	r3, r2
 800176a:	6033      	str	r3, [r6, #0]
 800176c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8001770:	4607      	mov	r7, r0
 8001772:	460c      	mov	r4, r1
 8001774:	b10a      	cbz	r2, 800177a <_printf_common+0x26>
 8001776:	3301      	adds	r3, #1
 8001778:	6033      	str	r3, [r6, #0]
 800177a:	6823      	ldr	r3, [r4, #0]
 800177c:	0699      	lsls	r1, r3, #26
 800177e:	bf42      	ittt	mi
 8001780:	6833      	ldrmi	r3, [r6, #0]
 8001782:	3302      	addmi	r3, #2
 8001784:	6033      	strmi	r3, [r6, #0]
 8001786:	6825      	ldr	r5, [r4, #0]
 8001788:	f015 0506 	ands.w	r5, r5, #6
 800178c:	d106      	bne.n	800179c <_printf_common+0x48>
 800178e:	f104 0a19 	add.w	sl, r4, #25
 8001792:	68e3      	ldr	r3, [r4, #12]
 8001794:	6832      	ldr	r2, [r6, #0]
 8001796:	1a9b      	subs	r3, r3, r2
 8001798:	42ab      	cmp	r3, r5
 800179a:	dc26      	bgt.n	80017ea <_printf_common+0x96>
 800179c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80017a0:	6822      	ldr	r2, [r4, #0]
 80017a2:	3b00      	subs	r3, #0
 80017a4:	bf18      	it	ne
 80017a6:	2301      	movne	r3, #1
 80017a8:	0692      	lsls	r2, r2, #26
 80017aa:	d42b      	bmi.n	8001804 <_printf_common+0xb0>
 80017ac:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80017b0:	4641      	mov	r1, r8
 80017b2:	4638      	mov	r0, r7
 80017b4:	47c8      	blx	r9
 80017b6:	3001      	adds	r0, #1
 80017b8:	d01e      	beq.n	80017f8 <_printf_common+0xa4>
 80017ba:	6823      	ldr	r3, [r4, #0]
 80017bc:	6922      	ldr	r2, [r4, #16]
 80017be:	f003 0306 	and.w	r3, r3, #6
 80017c2:	2b04      	cmp	r3, #4
 80017c4:	bf02      	ittt	eq
 80017c6:	68e5      	ldreq	r5, [r4, #12]
 80017c8:	6833      	ldreq	r3, [r6, #0]
 80017ca:	1aed      	subeq	r5, r5, r3
 80017cc:	68a3      	ldr	r3, [r4, #8]
 80017ce:	bf0c      	ite	eq
 80017d0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80017d4:	2500      	movne	r5, #0
 80017d6:	4293      	cmp	r3, r2
 80017d8:	bfc4      	itt	gt
 80017da:	1a9b      	subgt	r3, r3, r2
 80017dc:	18ed      	addgt	r5, r5, r3
 80017de:	2600      	movs	r6, #0
 80017e0:	341a      	adds	r4, #26
 80017e2:	42b5      	cmp	r5, r6
 80017e4:	d11a      	bne.n	800181c <_printf_common+0xc8>
 80017e6:	2000      	movs	r0, #0
 80017e8:	e008      	b.n	80017fc <_printf_common+0xa8>
 80017ea:	2301      	movs	r3, #1
 80017ec:	4652      	mov	r2, sl
 80017ee:	4641      	mov	r1, r8
 80017f0:	4638      	mov	r0, r7
 80017f2:	47c8      	blx	r9
 80017f4:	3001      	adds	r0, #1
 80017f6:	d103      	bne.n	8001800 <_printf_common+0xac>
 80017f8:	f04f 30ff 	mov.w	r0, #4294967295
 80017fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001800:	3501      	adds	r5, #1
 8001802:	e7c6      	b.n	8001792 <_printf_common+0x3e>
 8001804:	18e1      	adds	r1, r4, r3
 8001806:	1c5a      	adds	r2, r3, #1
 8001808:	2030      	movs	r0, #48	@ 0x30
 800180a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800180e:	4422      	add	r2, r4
 8001810:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8001814:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8001818:	3302      	adds	r3, #2
 800181a:	e7c7      	b.n	80017ac <_printf_common+0x58>
 800181c:	2301      	movs	r3, #1
 800181e:	4622      	mov	r2, r4
 8001820:	4641      	mov	r1, r8
 8001822:	4638      	mov	r0, r7
 8001824:	47c8      	blx	r9
 8001826:	3001      	adds	r0, #1
 8001828:	d0e6      	beq.n	80017f8 <_printf_common+0xa4>
 800182a:	3601      	adds	r6, #1
 800182c:	e7d9      	b.n	80017e2 <_printf_common+0x8e>
	...

08001830 <_printf_i>:
 8001830:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8001834:	7e0f      	ldrb	r7, [r1, #24]
 8001836:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8001838:	2f78      	cmp	r7, #120	@ 0x78
 800183a:	4691      	mov	r9, r2
 800183c:	4680      	mov	r8, r0
 800183e:	460c      	mov	r4, r1
 8001840:	469a      	mov	sl, r3
 8001842:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8001846:	d807      	bhi.n	8001858 <_printf_i+0x28>
 8001848:	2f62      	cmp	r7, #98	@ 0x62
 800184a:	d80a      	bhi.n	8001862 <_printf_i+0x32>
 800184c:	2f00      	cmp	r7, #0
 800184e:	f000 80d2 	beq.w	80019f6 <_printf_i+0x1c6>
 8001852:	2f58      	cmp	r7, #88	@ 0x58
 8001854:	f000 80b9 	beq.w	80019ca <_printf_i+0x19a>
 8001858:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800185c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8001860:	e03a      	b.n	80018d8 <_printf_i+0xa8>
 8001862:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8001866:	2b15      	cmp	r3, #21
 8001868:	d8f6      	bhi.n	8001858 <_printf_i+0x28>
 800186a:	a101      	add	r1, pc, #4	@ (adr r1, 8001870 <_printf_i+0x40>)
 800186c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8001870:	080018c9 	.word	0x080018c9
 8001874:	080018dd 	.word	0x080018dd
 8001878:	08001859 	.word	0x08001859
 800187c:	08001859 	.word	0x08001859
 8001880:	08001859 	.word	0x08001859
 8001884:	08001859 	.word	0x08001859
 8001888:	080018dd 	.word	0x080018dd
 800188c:	08001859 	.word	0x08001859
 8001890:	08001859 	.word	0x08001859
 8001894:	08001859 	.word	0x08001859
 8001898:	08001859 	.word	0x08001859
 800189c:	080019dd 	.word	0x080019dd
 80018a0:	08001907 	.word	0x08001907
 80018a4:	08001997 	.word	0x08001997
 80018a8:	08001859 	.word	0x08001859
 80018ac:	08001859 	.word	0x08001859
 80018b0:	080019ff 	.word	0x080019ff
 80018b4:	08001859 	.word	0x08001859
 80018b8:	08001907 	.word	0x08001907
 80018bc:	08001859 	.word	0x08001859
 80018c0:	08001859 	.word	0x08001859
 80018c4:	0800199f 	.word	0x0800199f
 80018c8:	6833      	ldr	r3, [r6, #0]
 80018ca:	1d1a      	adds	r2, r3, #4
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	6032      	str	r2, [r6, #0]
 80018d0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80018d4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80018d8:	2301      	movs	r3, #1
 80018da:	e09d      	b.n	8001a18 <_printf_i+0x1e8>
 80018dc:	6833      	ldr	r3, [r6, #0]
 80018de:	6820      	ldr	r0, [r4, #0]
 80018e0:	1d19      	adds	r1, r3, #4
 80018e2:	6031      	str	r1, [r6, #0]
 80018e4:	0606      	lsls	r6, r0, #24
 80018e6:	d501      	bpl.n	80018ec <_printf_i+0xbc>
 80018e8:	681d      	ldr	r5, [r3, #0]
 80018ea:	e003      	b.n	80018f4 <_printf_i+0xc4>
 80018ec:	0645      	lsls	r5, r0, #25
 80018ee:	d5fb      	bpl.n	80018e8 <_printf_i+0xb8>
 80018f0:	f9b3 5000 	ldrsh.w	r5, [r3]
 80018f4:	2d00      	cmp	r5, #0
 80018f6:	da03      	bge.n	8001900 <_printf_i+0xd0>
 80018f8:	232d      	movs	r3, #45	@ 0x2d
 80018fa:	426d      	negs	r5, r5
 80018fc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8001900:	4859      	ldr	r0, [pc, #356]	@ (8001a68 <_printf_i+0x238>)
 8001902:	230a      	movs	r3, #10
 8001904:	e011      	b.n	800192a <_printf_i+0xfa>
 8001906:	6821      	ldr	r1, [r4, #0]
 8001908:	6833      	ldr	r3, [r6, #0]
 800190a:	0608      	lsls	r0, r1, #24
 800190c:	f853 5b04 	ldr.w	r5, [r3], #4
 8001910:	d402      	bmi.n	8001918 <_printf_i+0xe8>
 8001912:	0649      	lsls	r1, r1, #25
 8001914:	bf48      	it	mi
 8001916:	b2ad      	uxthmi	r5, r5
 8001918:	2f6f      	cmp	r7, #111	@ 0x6f
 800191a:	4853      	ldr	r0, [pc, #332]	@ (8001a68 <_printf_i+0x238>)
 800191c:	6033      	str	r3, [r6, #0]
 800191e:	bf14      	ite	ne
 8001920:	230a      	movne	r3, #10
 8001922:	2308      	moveq	r3, #8
 8001924:	2100      	movs	r1, #0
 8001926:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800192a:	6866      	ldr	r6, [r4, #4]
 800192c:	60a6      	str	r6, [r4, #8]
 800192e:	2e00      	cmp	r6, #0
 8001930:	bfa2      	ittt	ge
 8001932:	6821      	ldrge	r1, [r4, #0]
 8001934:	f021 0104 	bicge.w	r1, r1, #4
 8001938:	6021      	strge	r1, [r4, #0]
 800193a:	b90d      	cbnz	r5, 8001940 <_printf_i+0x110>
 800193c:	2e00      	cmp	r6, #0
 800193e:	d04b      	beq.n	80019d8 <_printf_i+0x1a8>
 8001940:	4616      	mov	r6, r2
 8001942:	fbb5 f1f3 	udiv	r1, r5, r3
 8001946:	fb03 5711 	mls	r7, r3, r1, r5
 800194a:	5dc7      	ldrb	r7, [r0, r7]
 800194c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8001950:	462f      	mov	r7, r5
 8001952:	42bb      	cmp	r3, r7
 8001954:	460d      	mov	r5, r1
 8001956:	d9f4      	bls.n	8001942 <_printf_i+0x112>
 8001958:	2b08      	cmp	r3, #8
 800195a:	d10b      	bne.n	8001974 <_printf_i+0x144>
 800195c:	6823      	ldr	r3, [r4, #0]
 800195e:	07df      	lsls	r7, r3, #31
 8001960:	d508      	bpl.n	8001974 <_printf_i+0x144>
 8001962:	6923      	ldr	r3, [r4, #16]
 8001964:	6861      	ldr	r1, [r4, #4]
 8001966:	4299      	cmp	r1, r3
 8001968:	bfde      	ittt	le
 800196a:	2330      	movle	r3, #48	@ 0x30
 800196c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8001970:	f106 36ff 	addle.w	r6, r6, #4294967295
 8001974:	1b92      	subs	r2, r2, r6
 8001976:	6122      	str	r2, [r4, #16]
 8001978:	f8cd a000 	str.w	sl, [sp]
 800197c:	464b      	mov	r3, r9
 800197e:	aa03      	add	r2, sp, #12
 8001980:	4621      	mov	r1, r4
 8001982:	4640      	mov	r0, r8
 8001984:	f7ff fee6 	bl	8001754 <_printf_common>
 8001988:	3001      	adds	r0, #1
 800198a:	d14a      	bne.n	8001a22 <_printf_i+0x1f2>
 800198c:	f04f 30ff 	mov.w	r0, #4294967295
 8001990:	b004      	add	sp, #16
 8001992:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001996:	6823      	ldr	r3, [r4, #0]
 8001998:	f043 0320 	orr.w	r3, r3, #32
 800199c:	6023      	str	r3, [r4, #0]
 800199e:	4833      	ldr	r0, [pc, #204]	@ (8001a6c <_printf_i+0x23c>)
 80019a0:	2778      	movs	r7, #120	@ 0x78
 80019a2:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80019a6:	6823      	ldr	r3, [r4, #0]
 80019a8:	6831      	ldr	r1, [r6, #0]
 80019aa:	061f      	lsls	r7, r3, #24
 80019ac:	f851 5b04 	ldr.w	r5, [r1], #4
 80019b0:	d402      	bmi.n	80019b8 <_printf_i+0x188>
 80019b2:	065f      	lsls	r7, r3, #25
 80019b4:	bf48      	it	mi
 80019b6:	b2ad      	uxthmi	r5, r5
 80019b8:	6031      	str	r1, [r6, #0]
 80019ba:	07d9      	lsls	r1, r3, #31
 80019bc:	bf44      	itt	mi
 80019be:	f043 0320 	orrmi.w	r3, r3, #32
 80019c2:	6023      	strmi	r3, [r4, #0]
 80019c4:	b11d      	cbz	r5, 80019ce <_printf_i+0x19e>
 80019c6:	2310      	movs	r3, #16
 80019c8:	e7ac      	b.n	8001924 <_printf_i+0xf4>
 80019ca:	4827      	ldr	r0, [pc, #156]	@ (8001a68 <_printf_i+0x238>)
 80019cc:	e7e9      	b.n	80019a2 <_printf_i+0x172>
 80019ce:	6823      	ldr	r3, [r4, #0]
 80019d0:	f023 0320 	bic.w	r3, r3, #32
 80019d4:	6023      	str	r3, [r4, #0]
 80019d6:	e7f6      	b.n	80019c6 <_printf_i+0x196>
 80019d8:	4616      	mov	r6, r2
 80019da:	e7bd      	b.n	8001958 <_printf_i+0x128>
 80019dc:	6833      	ldr	r3, [r6, #0]
 80019de:	6825      	ldr	r5, [r4, #0]
 80019e0:	6961      	ldr	r1, [r4, #20]
 80019e2:	1d18      	adds	r0, r3, #4
 80019e4:	6030      	str	r0, [r6, #0]
 80019e6:	062e      	lsls	r6, r5, #24
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	d501      	bpl.n	80019f0 <_printf_i+0x1c0>
 80019ec:	6019      	str	r1, [r3, #0]
 80019ee:	e002      	b.n	80019f6 <_printf_i+0x1c6>
 80019f0:	0668      	lsls	r0, r5, #25
 80019f2:	d5fb      	bpl.n	80019ec <_printf_i+0x1bc>
 80019f4:	8019      	strh	r1, [r3, #0]
 80019f6:	2300      	movs	r3, #0
 80019f8:	6123      	str	r3, [r4, #16]
 80019fa:	4616      	mov	r6, r2
 80019fc:	e7bc      	b.n	8001978 <_printf_i+0x148>
 80019fe:	6833      	ldr	r3, [r6, #0]
 8001a00:	1d1a      	adds	r2, r3, #4
 8001a02:	6032      	str	r2, [r6, #0]
 8001a04:	681e      	ldr	r6, [r3, #0]
 8001a06:	6862      	ldr	r2, [r4, #4]
 8001a08:	2100      	movs	r1, #0
 8001a0a:	4630      	mov	r0, r6
 8001a0c:	f7fe fbf8 	bl	8000200 <memchr>
 8001a10:	b108      	cbz	r0, 8001a16 <_printf_i+0x1e6>
 8001a12:	1b80      	subs	r0, r0, r6
 8001a14:	6060      	str	r0, [r4, #4]
 8001a16:	6863      	ldr	r3, [r4, #4]
 8001a18:	6123      	str	r3, [r4, #16]
 8001a1a:	2300      	movs	r3, #0
 8001a1c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8001a20:	e7aa      	b.n	8001978 <_printf_i+0x148>
 8001a22:	6923      	ldr	r3, [r4, #16]
 8001a24:	4632      	mov	r2, r6
 8001a26:	4649      	mov	r1, r9
 8001a28:	4640      	mov	r0, r8
 8001a2a:	47d0      	blx	sl
 8001a2c:	3001      	adds	r0, #1
 8001a2e:	d0ad      	beq.n	800198c <_printf_i+0x15c>
 8001a30:	6823      	ldr	r3, [r4, #0]
 8001a32:	079b      	lsls	r3, r3, #30
 8001a34:	d413      	bmi.n	8001a5e <_printf_i+0x22e>
 8001a36:	68e0      	ldr	r0, [r4, #12]
 8001a38:	9b03      	ldr	r3, [sp, #12]
 8001a3a:	4298      	cmp	r0, r3
 8001a3c:	bfb8      	it	lt
 8001a3e:	4618      	movlt	r0, r3
 8001a40:	e7a6      	b.n	8001990 <_printf_i+0x160>
 8001a42:	2301      	movs	r3, #1
 8001a44:	4632      	mov	r2, r6
 8001a46:	4649      	mov	r1, r9
 8001a48:	4640      	mov	r0, r8
 8001a4a:	47d0      	blx	sl
 8001a4c:	3001      	adds	r0, #1
 8001a4e:	d09d      	beq.n	800198c <_printf_i+0x15c>
 8001a50:	3501      	adds	r5, #1
 8001a52:	68e3      	ldr	r3, [r4, #12]
 8001a54:	9903      	ldr	r1, [sp, #12]
 8001a56:	1a5b      	subs	r3, r3, r1
 8001a58:	42ab      	cmp	r3, r5
 8001a5a:	dcf2      	bgt.n	8001a42 <_printf_i+0x212>
 8001a5c:	e7eb      	b.n	8001a36 <_printf_i+0x206>
 8001a5e:	2500      	movs	r5, #0
 8001a60:	f104 0619 	add.w	r6, r4, #25
 8001a64:	e7f5      	b.n	8001a52 <_printf_i+0x222>
 8001a66:	bf00      	nop
 8001a68:	08002424 	.word	0x08002424
 8001a6c:	08002435 	.word	0x08002435

08001a70 <__sflush_r>:
 8001a70:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8001a74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001a78:	0716      	lsls	r6, r2, #28
 8001a7a:	4605      	mov	r5, r0
 8001a7c:	460c      	mov	r4, r1
 8001a7e:	d454      	bmi.n	8001b2a <__sflush_r+0xba>
 8001a80:	684b      	ldr	r3, [r1, #4]
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	dc02      	bgt.n	8001a8c <__sflush_r+0x1c>
 8001a86:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	dd48      	ble.n	8001b1e <__sflush_r+0xae>
 8001a8c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8001a8e:	2e00      	cmp	r6, #0
 8001a90:	d045      	beq.n	8001b1e <__sflush_r+0xae>
 8001a92:	2300      	movs	r3, #0
 8001a94:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8001a98:	682f      	ldr	r7, [r5, #0]
 8001a9a:	6a21      	ldr	r1, [r4, #32]
 8001a9c:	602b      	str	r3, [r5, #0]
 8001a9e:	d030      	beq.n	8001b02 <__sflush_r+0x92>
 8001aa0:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8001aa2:	89a3      	ldrh	r3, [r4, #12]
 8001aa4:	0759      	lsls	r1, r3, #29
 8001aa6:	d505      	bpl.n	8001ab4 <__sflush_r+0x44>
 8001aa8:	6863      	ldr	r3, [r4, #4]
 8001aaa:	1ad2      	subs	r2, r2, r3
 8001aac:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8001aae:	b10b      	cbz	r3, 8001ab4 <__sflush_r+0x44>
 8001ab0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8001ab2:	1ad2      	subs	r2, r2, r3
 8001ab4:	2300      	movs	r3, #0
 8001ab6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8001ab8:	6a21      	ldr	r1, [r4, #32]
 8001aba:	4628      	mov	r0, r5
 8001abc:	47b0      	blx	r6
 8001abe:	1c43      	adds	r3, r0, #1
 8001ac0:	89a3      	ldrh	r3, [r4, #12]
 8001ac2:	d106      	bne.n	8001ad2 <__sflush_r+0x62>
 8001ac4:	6829      	ldr	r1, [r5, #0]
 8001ac6:	291d      	cmp	r1, #29
 8001ac8:	d82b      	bhi.n	8001b22 <__sflush_r+0xb2>
 8001aca:	4a2a      	ldr	r2, [pc, #168]	@ (8001b74 <__sflush_r+0x104>)
 8001acc:	410a      	asrs	r2, r1
 8001ace:	07d6      	lsls	r6, r2, #31
 8001ad0:	d427      	bmi.n	8001b22 <__sflush_r+0xb2>
 8001ad2:	2200      	movs	r2, #0
 8001ad4:	6062      	str	r2, [r4, #4]
 8001ad6:	04d9      	lsls	r1, r3, #19
 8001ad8:	6922      	ldr	r2, [r4, #16]
 8001ada:	6022      	str	r2, [r4, #0]
 8001adc:	d504      	bpl.n	8001ae8 <__sflush_r+0x78>
 8001ade:	1c42      	adds	r2, r0, #1
 8001ae0:	d101      	bne.n	8001ae6 <__sflush_r+0x76>
 8001ae2:	682b      	ldr	r3, [r5, #0]
 8001ae4:	b903      	cbnz	r3, 8001ae8 <__sflush_r+0x78>
 8001ae6:	6560      	str	r0, [r4, #84]	@ 0x54
 8001ae8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8001aea:	602f      	str	r7, [r5, #0]
 8001aec:	b1b9      	cbz	r1, 8001b1e <__sflush_r+0xae>
 8001aee:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8001af2:	4299      	cmp	r1, r3
 8001af4:	d002      	beq.n	8001afc <__sflush_r+0x8c>
 8001af6:	4628      	mov	r0, r5
 8001af8:	f7ff fbea 	bl	80012d0 <_free_r>
 8001afc:	2300      	movs	r3, #0
 8001afe:	6363      	str	r3, [r4, #52]	@ 0x34
 8001b00:	e00d      	b.n	8001b1e <__sflush_r+0xae>
 8001b02:	2301      	movs	r3, #1
 8001b04:	4628      	mov	r0, r5
 8001b06:	47b0      	blx	r6
 8001b08:	4602      	mov	r2, r0
 8001b0a:	1c50      	adds	r0, r2, #1
 8001b0c:	d1c9      	bne.n	8001aa2 <__sflush_r+0x32>
 8001b0e:	682b      	ldr	r3, [r5, #0]
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d0c6      	beq.n	8001aa2 <__sflush_r+0x32>
 8001b14:	2b1d      	cmp	r3, #29
 8001b16:	d001      	beq.n	8001b1c <__sflush_r+0xac>
 8001b18:	2b16      	cmp	r3, #22
 8001b1a:	d11e      	bne.n	8001b5a <__sflush_r+0xea>
 8001b1c:	602f      	str	r7, [r5, #0]
 8001b1e:	2000      	movs	r0, #0
 8001b20:	e022      	b.n	8001b68 <__sflush_r+0xf8>
 8001b22:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001b26:	b21b      	sxth	r3, r3
 8001b28:	e01b      	b.n	8001b62 <__sflush_r+0xf2>
 8001b2a:	690f      	ldr	r7, [r1, #16]
 8001b2c:	2f00      	cmp	r7, #0
 8001b2e:	d0f6      	beq.n	8001b1e <__sflush_r+0xae>
 8001b30:	0793      	lsls	r3, r2, #30
 8001b32:	680e      	ldr	r6, [r1, #0]
 8001b34:	bf08      	it	eq
 8001b36:	694b      	ldreq	r3, [r1, #20]
 8001b38:	600f      	str	r7, [r1, #0]
 8001b3a:	bf18      	it	ne
 8001b3c:	2300      	movne	r3, #0
 8001b3e:	eba6 0807 	sub.w	r8, r6, r7
 8001b42:	608b      	str	r3, [r1, #8]
 8001b44:	f1b8 0f00 	cmp.w	r8, #0
 8001b48:	dde9      	ble.n	8001b1e <__sflush_r+0xae>
 8001b4a:	6a21      	ldr	r1, [r4, #32]
 8001b4c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8001b4e:	4643      	mov	r3, r8
 8001b50:	463a      	mov	r2, r7
 8001b52:	4628      	mov	r0, r5
 8001b54:	47b0      	blx	r6
 8001b56:	2800      	cmp	r0, #0
 8001b58:	dc08      	bgt.n	8001b6c <__sflush_r+0xfc>
 8001b5a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001b5e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001b62:	81a3      	strh	r3, [r4, #12]
 8001b64:	f04f 30ff 	mov.w	r0, #4294967295
 8001b68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001b6c:	4407      	add	r7, r0
 8001b6e:	eba8 0800 	sub.w	r8, r8, r0
 8001b72:	e7e7      	b.n	8001b44 <__sflush_r+0xd4>
 8001b74:	dfbffffe 	.word	0xdfbffffe

08001b78 <_fflush_r>:
 8001b78:	b538      	push	{r3, r4, r5, lr}
 8001b7a:	690b      	ldr	r3, [r1, #16]
 8001b7c:	4605      	mov	r5, r0
 8001b7e:	460c      	mov	r4, r1
 8001b80:	b913      	cbnz	r3, 8001b88 <_fflush_r+0x10>
 8001b82:	2500      	movs	r5, #0
 8001b84:	4628      	mov	r0, r5
 8001b86:	bd38      	pop	{r3, r4, r5, pc}
 8001b88:	b118      	cbz	r0, 8001b92 <_fflush_r+0x1a>
 8001b8a:	6a03      	ldr	r3, [r0, #32]
 8001b8c:	b90b      	cbnz	r3, 8001b92 <_fflush_r+0x1a>
 8001b8e:	f7ff f973 	bl	8000e78 <__sinit>
 8001b92:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d0f3      	beq.n	8001b82 <_fflush_r+0xa>
 8001b9a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8001b9c:	07d0      	lsls	r0, r2, #31
 8001b9e:	d404      	bmi.n	8001baa <_fflush_r+0x32>
 8001ba0:	0599      	lsls	r1, r3, #22
 8001ba2:	d402      	bmi.n	8001baa <_fflush_r+0x32>
 8001ba4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8001ba6:	f7ff fb72 	bl	800128e <__retarget_lock_acquire_recursive>
 8001baa:	4628      	mov	r0, r5
 8001bac:	4621      	mov	r1, r4
 8001bae:	f7ff ff5f 	bl	8001a70 <__sflush_r>
 8001bb2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8001bb4:	07da      	lsls	r2, r3, #31
 8001bb6:	4605      	mov	r5, r0
 8001bb8:	d4e4      	bmi.n	8001b84 <_fflush_r+0xc>
 8001bba:	89a3      	ldrh	r3, [r4, #12]
 8001bbc:	059b      	lsls	r3, r3, #22
 8001bbe:	d4e1      	bmi.n	8001b84 <_fflush_r+0xc>
 8001bc0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8001bc2:	f7ff fb65 	bl	8001290 <__retarget_lock_release_recursive>
 8001bc6:	e7dd      	b.n	8001b84 <_fflush_r+0xc>

08001bc8 <fiprintf>:
 8001bc8:	b40e      	push	{r1, r2, r3}
 8001bca:	b503      	push	{r0, r1, lr}
 8001bcc:	4601      	mov	r1, r0
 8001bce:	ab03      	add	r3, sp, #12
 8001bd0:	4805      	ldr	r0, [pc, #20]	@ (8001be8 <fiprintf+0x20>)
 8001bd2:	f853 2b04 	ldr.w	r2, [r3], #4
 8001bd6:	6800      	ldr	r0, [r0, #0]
 8001bd8:	9301      	str	r3, [sp, #4]
 8001bda:	f7ff fca3 	bl	8001524 <_vfiprintf_r>
 8001bde:	b002      	add	sp, #8
 8001be0:	f85d eb04 	ldr.w	lr, [sp], #4
 8001be4:	b003      	add	sp, #12
 8001be6:	4770      	bx	lr
 8001be8:	20000064 	.word	0x20000064

08001bec <__swhatbuf_r>:
 8001bec:	b570      	push	{r4, r5, r6, lr}
 8001bee:	460c      	mov	r4, r1
 8001bf0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001bf4:	2900      	cmp	r1, #0
 8001bf6:	b096      	sub	sp, #88	@ 0x58
 8001bf8:	4615      	mov	r5, r2
 8001bfa:	461e      	mov	r6, r3
 8001bfc:	da0d      	bge.n	8001c1a <__swhatbuf_r+0x2e>
 8001bfe:	89a3      	ldrh	r3, [r4, #12]
 8001c00:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8001c04:	f04f 0100 	mov.w	r1, #0
 8001c08:	bf14      	ite	ne
 8001c0a:	2340      	movne	r3, #64	@ 0x40
 8001c0c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8001c10:	2000      	movs	r0, #0
 8001c12:	6031      	str	r1, [r6, #0]
 8001c14:	602b      	str	r3, [r5, #0]
 8001c16:	b016      	add	sp, #88	@ 0x58
 8001c18:	bd70      	pop	{r4, r5, r6, pc}
 8001c1a:	466a      	mov	r2, sp
 8001c1c:	f000 f848 	bl	8001cb0 <_fstat_r>
 8001c20:	2800      	cmp	r0, #0
 8001c22:	dbec      	blt.n	8001bfe <__swhatbuf_r+0x12>
 8001c24:	9901      	ldr	r1, [sp, #4]
 8001c26:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8001c2a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8001c2e:	4259      	negs	r1, r3
 8001c30:	4159      	adcs	r1, r3
 8001c32:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001c36:	e7eb      	b.n	8001c10 <__swhatbuf_r+0x24>

08001c38 <__smakebuf_r>:
 8001c38:	898b      	ldrh	r3, [r1, #12]
 8001c3a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8001c3c:	079d      	lsls	r5, r3, #30
 8001c3e:	4606      	mov	r6, r0
 8001c40:	460c      	mov	r4, r1
 8001c42:	d507      	bpl.n	8001c54 <__smakebuf_r+0x1c>
 8001c44:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8001c48:	6023      	str	r3, [r4, #0]
 8001c4a:	6123      	str	r3, [r4, #16]
 8001c4c:	2301      	movs	r3, #1
 8001c4e:	6163      	str	r3, [r4, #20]
 8001c50:	b003      	add	sp, #12
 8001c52:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001c54:	ab01      	add	r3, sp, #4
 8001c56:	466a      	mov	r2, sp
 8001c58:	f7ff ffc8 	bl	8001bec <__swhatbuf_r>
 8001c5c:	9f00      	ldr	r7, [sp, #0]
 8001c5e:	4605      	mov	r5, r0
 8001c60:	4639      	mov	r1, r7
 8001c62:	4630      	mov	r0, r6
 8001c64:	f7ff fba8 	bl	80013b8 <_malloc_r>
 8001c68:	b948      	cbnz	r0, 8001c7e <__smakebuf_r+0x46>
 8001c6a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001c6e:	059a      	lsls	r2, r3, #22
 8001c70:	d4ee      	bmi.n	8001c50 <__smakebuf_r+0x18>
 8001c72:	f023 0303 	bic.w	r3, r3, #3
 8001c76:	f043 0302 	orr.w	r3, r3, #2
 8001c7a:	81a3      	strh	r3, [r4, #12]
 8001c7c:	e7e2      	b.n	8001c44 <__smakebuf_r+0xc>
 8001c7e:	89a3      	ldrh	r3, [r4, #12]
 8001c80:	6020      	str	r0, [r4, #0]
 8001c82:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001c86:	81a3      	strh	r3, [r4, #12]
 8001c88:	9b01      	ldr	r3, [sp, #4]
 8001c8a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8001c8e:	b15b      	cbz	r3, 8001ca8 <__smakebuf_r+0x70>
 8001c90:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001c94:	4630      	mov	r0, r6
 8001c96:	f000 f81d 	bl	8001cd4 <_isatty_r>
 8001c9a:	b128      	cbz	r0, 8001ca8 <__smakebuf_r+0x70>
 8001c9c:	89a3      	ldrh	r3, [r4, #12]
 8001c9e:	f023 0303 	bic.w	r3, r3, #3
 8001ca2:	f043 0301 	orr.w	r3, r3, #1
 8001ca6:	81a3      	strh	r3, [r4, #12]
 8001ca8:	89a3      	ldrh	r3, [r4, #12]
 8001caa:	431d      	orrs	r5, r3
 8001cac:	81a5      	strh	r5, [r4, #12]
 8001cae:	e7cf      	b.n	8001c50 <__smakebuf_r+0x18>

08001cb0 <_fstat_r>:
 8001cb0:	b538      	push	{r3, r4, r5, lr}
 8001cb2:	4d07      	ldr	r5, [pc, #28]	@ (8001cd0 <_fstat_r+0x20>)
 8001cb4:	2300      	movs	r3, #0
 8001cb6:	4604      	mov	r4, r0
 8001cb8:	4608      	mov	r0, r1
 8001cba:	4611      	mov	r1, r2
 8001cbc:	602b      	str	r3, [r5, #0]
 8001cbe:	f7fe ff01 	bl	8000ac4 <_fstat>
 8001cc2:	1c43      	adds	r3, r0, #1
 8001cc4:	d102      	bne.n	8001ccc <_fstat_r+0x1c>
 8001cc6:	682b      	ldr	r3, [r5, #0]
 8001cc8:	b103      	cbz	r3, 8001ccc <_fstat_r+0x1c>
 8001cca:	6023      	str	r3, [r4, #0]
 8001ccc:	bd38      	pop	{r3, r4, r5, pc}
 8001cce:	bf00      	nop
 8001cd0:	200002f4 	.word	0x200002f4

08001cd4 <_isatty_r>:
 8001cd4:	b538      	push	{r3, r4, r5, lr}
 8001cd6:	4d06      	ldr	r5, [pc, #24]	@ (8001cf0 <_isatty_r+0x1c>)
 8001cd8:	2300      	movs	r3, #0
 8001cda:	4604      	mov	r4, r0
 8001cdc:	4608      	mov	r0, r1
 8001cde:	602b      	str	r3, [r5, #0]
 8001ce0:	f7fe ff00 	bl	8000ae4 <_isatty>
 8001ce4:	1c43      	adds	r3, r0, #1
 8001ce6:	d102      	bne.n	8001cee <_isatty_r+0x1a>
 8001ce8:	682b      	ldr	r3, [r5, #0]
 8001cea:	b103      	cbz	r3, 8001cee <_isatty_r+0x1a>
 8001cec:	6023      	str	r3, [r4, #0]
 8001cee:	bd38      	pop	{r3, r4, r5, pc}
 8001cf0:	200002f4 	.word	0x200002f4

08001cf4 <_sbrk_r>:
 8001cf4:	b538      	push	{r3, r4, r5, lr}
 8001cf6:	4d06      	ldr	r5, [pc, #24]	@ (8001d10 <_sbrk_r+0x1c>)
 8001cf8:	2300      	movs	r3, #0
 8001cfa:	4604      	mov	r4, r0
 8001cfc:	4608      	mov	r0, r1
 8001cfe:	602b      	str	r3, [r5, #0]
 8001d00:	f7fe ff08 	bl	8000b14 <_sbrk>
 8001d04:	1c43      	adds	r3, r0, #1
 8001d06:	d102      	bne.n	8001d0e <_sbrk_r+0x1a>
 8001d08:	682b      	ldr	r3, [r5, #0]
 8001d0a:	b103      	cbz	r3, 8001d0e <_sbrk_r+0x1a>
 8001d0c:	6023      	str	r3, [r4, #0]
 8001d0e:	bd38      	pop	{r3, r4, r5, pc}
 8001d10:	200002f4 	.word	0x200002f4

08001d14 <abort>:
 8001d14:	b508      	push	{r3, lr}
 8001d16:	2006      	movs	r0, #6
 8001d18:	f000 f82c 	bl	8001d74 <raise>
 8001d1c:	2001      	movs	r0, #1
 8001d1e:	f7fe fe81 	bl	8000a24 <_exit>

08001d22 <_raise_r>:
 8001d22:	291f      	cmp	r1, #31
 8001d24:	b538      	push	{r3, r4, r5, lr}
 8001d26:	4605      	mov	r5, r0
 8001d28:	460c      	mov	r4, r1
 8001d2a:	d904      	bls.n	8001d36 <_raise_r+0x14>
 8001d2c:	2316      	movs	r3, #22
 8001d2e:	6003      	str	r3, [r0, #0]
 8001d30:	f04f 30ff 	mov.w	r0, #4294967295
 8001d34:	bd38      	pop	{r3, r4, r5, pc}
 8001d36:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8001d38:	b112      	cbz	r2, 8001d40 <_raise_r+0x1e>
 8001d3a:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8001d3e:	b94b      	cbnz	r3, 8001d54 <_raise_r+0x32>
 8001d40:	4628      	mov	r0, r5
 8001d42:	f000 f831 	bl	8001da8 <_getpid_r>
 8001d46:	4622      	mov	r2, r4
 8001d48:	4601      	mov	r1, r0
 8001d4a:	4628      	mov	r0, r5
 8001d4c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001d50:	f000 b818 	b.w	8001d84 <_kill_r>
 8001d54:	2b01      	cmp	r3, #1
 8001d56:	d00a      	beq.n	8001d6e <_raise_r+0x4c>
 8001d58:	1c59      	adds	r1, r3, #1
 8001d5a:	d103      	bne.n	8001d64 <_raise_r+0x42>
 8001d5c:	2316      	movs	r3, #22
 8001d5e:	6003      	str	r3, [r0, #0]
 8001d60:	2001      	movs	r0, #1
 8001d62:	e7e7      	b.n	8001d34 <_raise_r+0x12>
 8001d64:	2100      	movs	r1, #0
 8001d66:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8001d6a:	4620      	mov	r0, r4
 8001d6c:	4798      	blx	r3
 8001d6e:	2000      	movs	r0, #0
 8001d70:	e7e0      	b.n	8001d34 <_raise_r+0x12>
	...

08001d74 <raise>:
 8001d74:	4b02      	ldr	r3, [pc, #8]	@ (8001d80 <raise+0xc>)
 8001d76:	4601      	mov	r1, r0
 8001d78:	6818      	ldr	r0, [r3, #0]
 8001d7a:	f7ff bfd2 	b.w	8001d22 <_raise_r>
 8001d7e:	bf00      	nop
 8001d80:	20000064 	.word	0x20000064

08001d84 <_kill_r>:
 8001d84:	b538      	push	{r3, r4, r5, lr}
 8001d86:	4d07      	ldr	r5, [pc, #28]	@ (8001da4 <_kill_r+0x20>)
 8001d88:	2300      	movs	r3, #0
 8001d8a:	4604      	mov	r4, r0
 8001d8c:	4608      	mov	r0, r1
 8001d8e:	4611      	mov	r1, r2
 8001d90:	602b      	str	r3, [r5, #0]
 8001d92:	f7fe fe37 	bl	8000a04 <_kill>
 8001d96:	1c43      	adds	r3, r0, #1
 8001d98:	d102      	bne.n	8001da0 <_kill_r+0x1c>
 8001d9a:	682b      	ldr	r3, [r5, #0]
 8001d9c:	b103      	cbz	r3, 8001da0 <_kill_r+0x1c>
 8001d9e:	6023      	str	r3, [r4, #0]
 8001da0:	bd38      	pop	{r3, r4, r5, pc}
 8001da2:	bf00      	nop
 8001da4:	200002f4 	.word	0x200002f4

08001da8 <_getpid_r>:
 8001da8:	f7fe be24 	b.w	80009f4 <_getpid>

08001dac <_init>:
 8001dac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001dae:	bf00      	nop
 8001db0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001db2:	bc08      	pop	{r3}
 8001db4:	469e      	mov	lr, r3
 8001db6:	4770      	bx	lr

08001db8 <_fini>:
 8001db8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001dba:	bf00      	nop
 8001dbc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001dbe:	bc08      	pop	{r3}
 8001dc0:	469e      	mov	lr, r3
 8001dc2:	4770      	bx	lr
