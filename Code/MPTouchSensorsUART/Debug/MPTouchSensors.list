
MPTouchSensors.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000022ec  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08002474  08002474  00003474  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080024ac  080024ac  0000404c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  080024ac  080024ac  0000404c  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  080024ac  080024ac  0000404c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080024ac  080024ac  000034ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080024b0  080024b0  000034b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000004c  20000000  080024b4  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000404c  2**0
                  CONTENTS
 10 .bss          00000064  2000004c  2000004c  0000404c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200000b0  200000b0  0000404c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000404c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000558a  00000000  00000000  0000407c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001484  00000000  00000000  00009606  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000530  00000000  00000000  0000aa90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000003c8  00000000  00000000  0000afc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00001681  00000000  00000000  0000b388  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000742a  00000000  00000000  0000ca09  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ab40f  00000000  00000000  00013e33  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000bf242  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000012a8  00000000  00000000  000bf288  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000069  00000000  00000000  000c0530  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000004c 	.word	0x2000004c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800245c 	.word	0x0800245c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000050 	.word	0x20000050
 80001c4:	0800245c 	.word	0x0800245c

080001c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	af00      	add	r7, sp, #0
	    HAL_Init();
 80001cc:	f000 fb98 	bl	8000900 <HAL_Init>
	    SystemClock_Config();
 80001d0:	f000 f812 	bl	80001f8 <SystemClock_Config>
	    MX_GPIO_Init();
 80001d4:	f000 f898 	bl	8000308 <MX_GPIO_Init>
	    MX_TSC_Init();
 80001d8:	f000 f850 	bl	800027c <MX_TSC_Init>
	    UART4_Init();
 80001dc:	f000 fb04 	bl	80007e8 <UART4_Init>

	    // Initialise UART on USART1 at 115200 baud
	    SerialInitialise(BAUD_115200, &USART1_PORT, NULL);
 80001e0:	2200      	movs	r2, #0
 80001e2:	4904      	ldr	r1, [pc, #16]	@ (80001f4 <main+0x2c>)
 80001e4:	2004      	movs	r0, #4
 80001e6:	f000 f943 	bl	8000470 <SerialInitialise>

	    while (1)
	    {
	    UART4_SendByte('1');
 80001ea:	2031      	movs	r0, #49	@ 0x31
 80001ec:	f000 fb3e 	bl	800086c <UART4_SendByte>
 80001f0:	e7fb      	b.n	80001ea <main+0x22>
 80001f2:	bf00      	nop
 80001f4:	20000000 	.word	0x20000000

080001f8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80001f8:	b580      	push	{r7, lr}
 80001fa:	b090      	sub	sp, #64	@ 0x40
 80001fc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80001fe:	f107 0318 	add.w	r3, r7, #24
 8000202:	2228      	movs	r2, #40	@ 0x28
 8000204:	2100      	movs	r1, #0
 8000206:	4618      	mov	r0, r3
 8000208:	f002 f8fb 	bl	8002402 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800020c:	1d3b      	adds	r3, r7, #4
 800020e:	2200      	movs	r2, #0
 8000210:	601a      	str	r2, [r3, #0]
 8000212:	605a      	str	r2, [r3, #4]
 8000214:	609a      	str	r2, [r3, #8]
 8000216:	60da      	str	r2, [r3, #12]
 8000218:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800021a:	2302      	movs	r3, #2
 800021c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800021e:	2301      	movs	r3, #1
 8000220:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000222:	2310      	movs	r3, #16
 8000224:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000226:	2302      	movs	r3, #2
 8000228:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800022a:	2300      	movs	r3, #0
 800022c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 800022e:	f44f 1320 	mov.w	r3, #2621440	@ 0x280000
 8000232:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000234:	f107 0318 	add.w	r3, r7, #24
 8000238:	4618      	mov	r0, r3
 800023a:	f000 fe3f 	bl	8000ebc <HAL_RCC_OscConfig>
 800023e:	4603      	mov	r3, r0
 8000240:	2b00      	cmp	r3, #0
 8000242:	d001      	beq.n	8000248 <SystemClock_Config+0x50>
  {
    Error_Handler();
 8000244:	f000 f90e 	bl	8000464 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000248:	230f      	movs	r3, #15
 800024a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800024c:	2302      	movs	r3, #2
 800024e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000250:	2300      	movs	r3, #0
 8000252:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000254:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000258:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800025a:	2300      	movs	r3, #0
 800025c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800025e:	1d3b      	adds	r3, r7, #4
 8000260:	2101      	movs	r1, #1
 8000262:	4618      	mov	r0, r3
 8000264:	f001 fe38 	bl	8001ed8 <HAL_RCC_ClockConfig>
 8000268:	4603      	mov	r3, r0
 800026a:	2b00      	cmp	r3, #0
 800026c:	d001      	beq.n	8000272 <SystemClock_Config+0x7a>
  {
    Error_Handler();
 800026e:	f000 f8f9 	bl	8000464 <Error_Handler>
  }
}
 8000272:	bf00      	nop
 8000274:	3740      	adds	r7, #64	@ 0x40
 8000276:	46bd      	mov	sp, r7
 8000278:	bd80      	pop	{r7, pc}
	...

0800027c <MX_TSC_Init>:
  * @brief TSC Initialization Function
  * @param None
  * @retval None
  */
static void MX_TSC_Init(void)
{
 800027c:	b580      	push	{r7, lr}
 800027e:	af00      	add	r7, sp, #0

  /* USER CODE END TSC_Init 1 */

  /** Configure the TSC peripheral
  */
  htsc.Instance = TSC;
 8000280:	4b1d      	ldr	r3, [pc, #116]	@ (80002f8 <MX_TSC_Init+0x7c>)
 8000282:	4a1e      	ldr	r2, [pc, #120]	@ (80002fc <MX_TSC_Init+0x80>)
 8000284:	601a      	str	r2, [r3, #0]
  htsc.Init.CTPulseHighLength = TSC_CTPH_2CYCLES;
 8000286:	4b1c      	ldr	r3, [pc, #112]	@ (80002f8 <MX_TSC_Init+0x7c>)
 8000288:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800028c:	605a      	str	r2, [r3, #4]
  htsc.Init.CTPulseLowLength = TSC_CTPL_2CYCLES;
 800028e:	4b1a      	ldr	r3, [pc, #104]	@ (80002f8 <MX_TSC_Init+0x7c>)
 8000290:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8000294:	609a      	str	r2, [r3, #8]
  htsc.Init.SpreadSpectrum = DISABLE;
 8000296:	4b18      	ldr	r3, [pc, #96]	@ (80002f8 <MX_TSC_Init+0x7c>)
 8000298:	2200      	movs	r2, #0
 800029a:	731a      	strb	r2, [r3, #12]
  htsc.Init.SpreadSpectrumDeviation = 1;
 800029c:	4b16      	ldr	r3, [pc, #88]	@ (80002f8 <MX_TSC_Init+0x7c>)
 800029e:	2201      	movs	r2, #1
 80002a0:	611a      	str	r2, [r3, #16]
  htsc.Init.SpreadSpectrumPrescaler = TSC_SS_PRESC_DIV1;
 80002a2:	4b15      	ldr	r3, [pc, #84]	@ (80002f8 <MX_TSC_Init+0x7c>)
 80002a4:	2200      	movs	r2, #0
 80002a6:	615a      	str	r2, [r3, #20]
  htsc.Init.PulseGeneratorPrescaler = TSC_PG_PRESC_DIV4;
 80002a8:	4b13      	ldr	r3, [pc, #76]	@ (80002f8 <MX_TSC_Init+0x7c>)
 80002aa:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80002ae:	619a      	str	r2, [r3, #24]
  htsc.Init.MaxCountValue = TSC_MCV_8191;
 80002b0:	4b11      	ldr	r3, [pc, #68]	@ (80002f8 <MX_TSC_Init+0x7c>)
 80002b2:	22a0      	movs	r2, #160	@ 0xa0
 80002b4:	61da      	str	r2, [r3, #28]
  htsc.Init.IODefaultMode = TSC_IODEF_OUT_PP_LOW;
 80002b6:	4b10      	ldr	r3, [pc, #64]	@ (80002f8 <MX_TSC_Init+0x7c>)
 80002b8:	2200      	movs	r2, #0
 80002ba:	621a      	str	r2, [r3, #32]
  htsc.Init.SynchroPinPolarity = TSC_SYNC_POLARITY_FALLING;
 80002bc:	4b0e      	ldr	r3, [pc, #56]	@ (80002f8 <MX_TSC_Init+0x7c>)
 80002be:	2200      	movs	r2, #0
 80002c0:	625a      	str	r2, [r3, #36]	@ 0x24
  htsc.Init.AcquisitionMode = TSC_ACQ_MODE_NORMAL;
 80002c2:	4b0d      	ldr	r3, [pc, #52]	@ (80002f8 <MX_TSC_Init+0x7c>)
 80002c4:	2200      	movs	r2, #0
 80002c6:	629a      	str	r2, [r3, #40]	@ 0x28
  htsc.Init.MaxCountInterrupt = DISABLE;
 80002c8:	4b0b      	ldr	r3, [pc, #44]	@ (80002f8 <MX_TSC_Init+0x7c>)
 80002ca:	2200      	movs	r2, #0
 80002cc:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
  htsc.Init.ChannelIOs = TSC_GROUP1_IO2|TSC_GROUP1_IO4|TSC_GROUP2_IO2|TSC_GROUP2_IO4
 80002d0:	4b09      	ldr	r3, [pc, #36]	@ (80002f8 <MX_TSC_Init+0x7c>)
 80002d2:	4a0b      	ldr	r2, [pc, #44]	@ (8000300 <MX_TSC_Init+0x84>)
 80002d4:	631a      	str	r2, [r3, #48]	@ 0x30
                    |TSC_GROUP3_IO2|TSC_GROUP3_IO4|TSC_GROUP5_IO2|TSC_GROUP5_IO4
                    |TSC_GROUP6_IO2|TSC_GROUP6_IO4|TSC_GROUP7_IO2|TSC_GROUP7_IO4
                    |TSC_GROUP8_IO2|TSC_GROUP8_IO4;
  htsc.Init.ShieldIOs = 0;
 80002d6:	4b08      	ldr	r3, [pc, #32]	@ (80002f8 <MX_TSC_Init+0x7c>)
 80002d8:	2200      	movs	r2, #0
 80002da:	635a      	str	r2, [r3, #52]	@ 0x34
  htsc.Init.SamplingIOs = TSC_GROUP1_IO3|TSC_GROUP2_IO3|TSC_GROUP3_IO3|TSC_GROUP5_IO3
 80002dc:	4b06      	ldr	r3, [pc, #24]	@ (80002f8 <MX_TSC_Init+0x7c>)
 80002de:	4a09      	ldr	r2, [pc, #36]	@ (8000304 <MX_TSC_Init+0x88>)
 80002e0:	639a      	str	r2, [r3, #56]	@ 0x38
                    |TSC_GROUP6_IO3|TSC_GROUP7_IO3|TSC_GROUP8_IO3;
  if (HAL_TSC_Init(&htsc) != HAL_OK)
 80002e2:	4805      	ldr	r0, [pc, #20]	@ (80002f8 <MX_TSC_Init+0x7c>)
 80002e4:	f001 ffe8 	bl	80022b8 <HAL_TSC_Init>
 80002e8:	4603      	mov	r3, r0
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	d001      	beq.n	80002f2 <MX_TSC_Init+0x76>
  {
    Error_Handler();
 80002ee:	f000 f8b9 	bl	8000464 <Error_Handler>
  }
  /* USER CODE BEGIN TSC_Init 2 */

  /* USER CODE END TSC_Init 2 */

}
 80002f2:	bf00      	nop
 80002f4:	bd80      	pop	{r7, pc}
 80002f6:	bf00      	nop
 80002f8:	20000068 	.word	0x20000068
 80002fc:	40024000 	.word	0x40024000
 8000300:	aaaa0aaa 	.word	0xaaaa0aaa
 8000304:	44440444 	.word	0x44440444

08000308 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000308:	b580      	push	{r7, lr}
 800030a:	b08c      	sub	sp, #48	@ 0x30
 800030c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800030e:	f107 031c 	add.w	r3, r7, #28
 8000312:	2200      	movs	r2, #0
 8000314:	601a      	str	r2, [r3, #0]
 8000316:	605a      	str	r2, [r3, #4]
 8000318:	609a      	str	r2, [r3, #8]
 800031a:	60da      	str	r2, [r3, #12]
 800031c:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800031e:	4b4f      	ldr	r3, [pc, #316]	@ (800045c <MX_GPIO_Init+0x154>)
 8000320:	695b      	ldr	r3, [r3, #20]
 8000322:	4a4e      	ldr	r2, [pc, #312]	@ (800045c <MX_GPIO_Init+0x154>)
 8000324:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000328:	6153      	str	r3, [r2, #20]
 800032a:	4b4c      	ldr	r3, [pc, #304]	@ (800045c <MX_GPIO_Init+0x154>)
 800032c:	695b      	ldr	r3, [r3, #20]
 800032e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000332:	61bb      	str	r3, [r7, #24]
 8000334:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000336:	4b49      	ldr	r3, [pc, #292]	@ (800045c <MX_GPIO_Init+0x154>)
 8000338:	695b      	ldr	r3, [r3, #20]
 800033a:	4a48      	ldr	r2, [pc, #288]	@ (800045c <MX_GPIO_Init+0x154>)
 800033c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8000340:	6153      	str	r3, [r2, #20]
 8000342:	4b46      	ldr	r3, [pc, #280]	@ (800045c <MX_GPIO_Init+0x154>)
 8000344:	695b      	ldr	r3, [r3, #20]
 8000346:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800034a:	617b      	str	r3, [r7, #20]
 800034c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800034e:	4b43      	ldr	r3, [pc, #268]	@ (800045c <MX_GPIO_Init+0x154>)
 8000350:	695b      	ldr	r3, [r3, #20]
 8000352:	4a42      	ldr	r2, [pc, #264]	@ (800045c <MX_GPIO_Init+0x154>)
 8000354:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000358:	6153      	str	r3, [r2, #20]
 800035a:	4b40      	ldr	r3, [pc, #256]	@ (800045c <MX_GPIO_Init+0x154>)
 800035c:	695b      	ldr	r3, [r3, #20]
 800035e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000362:	613b      	str	r3, [r7, #16]
 8000364:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000366:	4b3d      	ldr	r3, [pc, #244]	@ (800045c <MX_GPIO_Init+0x154>)
 8000368:	695b      	ldr	r3, [r3, #20]
 800036a:	4a3c      	ldr	r2, [pc, #240]	@ (800045c <MX_GPIO_Init+0x154>)
 800036c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000370:	6153      	str	r3, [r2, #20]
 8000372:	4b3a      	ldr	r3, [pc, #232]	@ (800045c <MX_GPIO_Init+0x154>)
 8000374:	695b      	ldr	r3, [r3, #20]
 8000376:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800037a:	60fb      	str	r3, [r7, #12]
 800037c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800037e:	4b37      	ldr	r3, [pc, #220]	@ (800045c <MX_GPIO_Init+0x154>)
 8000380:	695b      	ldr	r3, [r3, #20]
 8000382:	4a36      	ldr	r2, [pc, #216]	@ (800045c <MX_GPIO_Init+0x154>)
 8000384:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000388:	6153      	str	r3, [r2, #20]
 800038a:	4b34      	ldr	r3, [pc, #208]	@ (800045c <MX_GPIO_Init+0x154>)
 800038c:	695b      	ldr	r3, [r3, #20]
 800038e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000392:	60bb      	str	r3, [r7, #8]
 8000394:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000396:	4b31      	ldr	r3, [pc, #196]	@ (800045c <MX_GPIO_Init+0x154>)
 8000398:	695b      	ldr	r3, [r3, #20]
 800039a:	4a30      	ldr	r2, [pc, #192]	@ (800045c <MX_GPIO_Init+0x154>)
 800039c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80003a0:	6153      	str	r3, [r2, #20]
 80003a2:	4b2e      	ldr	r3, [pc, #184]	@ (800045c <MX_GPIO_Init+0x154>)
 80003a4:	695b      	ldr	r3, [r3, #20]
 80003a6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80003aa:	607b      	str	r3, [r7, #4]
 80003ac:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, LD4_Pin|LD3_Pin|LD5_Pin|LD7_Pin
 80003ae:	2200      	movs	r2, #0
 80003b0:	f44f 417f 	mov.w	r1, #65280	@ 0xff00
 80003b4:	482a      	ldr	r0, [pc, #168]	@ (8000460 <MX_GPIO_Init+0x158>)
 80003b6:	f000 fd69 	bl	8000e8c <HAL_GPIO_WritePin>
                          |LD9_Pin|LD10_Pin|LD8_Pin|LD6_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80003ba:	2301      	movs	r3, #1
 80003bc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80003be:	2300      	movs	r3, #0
 80003c0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003c2:	2300      	movs	r3, #0
 80003c4:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80003c6:	f107 031c 	add.w	r3, r7, #28
 80003ca:	4619      	mov	r1, r3
 80003cc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80003d0:	f000 fbe2 	bl	8000b98 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD7_Pin
                           LD9_Pin LD10_Pin LD8_Pin LD6_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD7_Pin
 80003d4:	f44f 437f 	mov.w	r3, #65280	@ 0xff00
 80003d8:	61fb      	str	r3, [r7, #28]
                          |LD9_Pin|LD10_Pin|LD8_Pin|LD6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80003da:	2301      	movs	r3, #1
 80003dc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003de:	2300      	movs	r3, #0
 80003e0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80003e2:	2300      	movs	r3, #0
 80003e4:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80003e6:	f107 031c 	add.w	r3, r7, #28
 80003ea:	4619      	mov	r1, r3
 80003ec:	481c      	ldr	r0, [pc, #112]	@ (8000460 <MX_GPIO_Init+0x158>)
 80003ee:	f000 fbd3 	bl	8000b98 <HAL_GPIO_Init>

  /*Configure GPIO pins : DM_Pin DP_Pin */
  GPIO_InitStruct.Pin = DM_Pin|DP_Pin;
 80003f2:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 80003f6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80003f8:	2302      	movs	r3, #2
 80003fa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003fc:	2300      	movs	r3, #0
 80003fe:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000400:	2303      	movs	r3, #3
 8000402:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF14_USB;
 8000404:	230e      	movs	r3, #14
 8000406:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000408:	f107 031c 	add.w	r3, r7, #28
 800040c:	4619      	mov	r1, r3
 800040e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000412:	f000 fbc1 	bl	8000b98 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000416:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800041a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800041c:	2302      	movs	r3, #2
 800041e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000420:	2300      	movs	r3, #0
 8000422:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000424:	2300      	movs	r3, #0
 8000426:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000428:	2301      	movs	r3, #1
 800042a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800042c:	f107 031c 	add.w	r3, r7, #28
 8000430:	4619      	mov	r1, r3
 8000432:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000436:	f000 fbaf 	bl	8000b98 <HAL_GPIO_Init>

  /*Configure GPIO pins : MEMS_INT1_Pin MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT1_Pin|MEMS_INT2_Pin;
 800043a:	2303      	movs	r3, #3
 800043c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800043e:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8000442:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000444:	2300      	movs	r3, #0
 8000446:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000448:	f107 031c 	add.w	r3, r7, #28
 800044c:	4619      	mov	r1, r3
 800044e:	4804      	ldr	r0, [pc, #16]	@ (8000460 <MX_GPIO_Init+0x158>)
 8000450:	f000 fba2 	bl	8000b98 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000454:	bf00      	nop
 8000456:	3730      	adds	r7, #48	@ 0x30
 8000458:	46bd      	mov	sp, r7
 800045a:	bd80      	pop	{r7, pc}
 800045c:	40021000 	.word	0x40021000
 8000460:	48001000 	.word	0x48001000

08000464 <Error_Handler>:
/* USER CODE BEGIN 4 */

/* USER CODE END 4 */

void Error_Handler(void)
{
 8000464:	b480      	push	{r7}
 8000466:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000468:	b672      	cpsid	i
}
 800046a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800046c:	bf00      	nop
 800046e:	e7fd      	b.n	800046c <Error_Handler+0x8>

08000470 <SerialInitialise>:
		0x77};


// InitialiseSerial - Initialise the serial port
// Input: baudRate is from an enumerated set
void SerialInitialise(uint32_t baudRate, SerialPort *serial_port, void (*completion_function)(uint32_t)) {
 8000470:	b480      	push	{r7}
 8000472:	b087      	sub	sp, #28
 8000474:	af00      	add	r7, sp, #0
 8000476:	60f8      	str	r0, [r7, #12]
 8000478:	60b9      	str	r1, [r7, #8]
 800047a:	607a      	str	r2, [r7, #4]

	serial_port->completion_function = completion_function;
 800047c:	68bb      	ldr	r3, [r7, #8]
 800047e:	687a      	ldr	r2, [r7, #4]
 8000480:	63da      	str	r2, [r3, #60]	@ 0x3c

	// enable clock power, system configuration clock and GPIOC
	// common to all UARTs
	RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 8000482:	4b34      	ldr	r3, [pc, #208]	@ (8000554 <SerialInitialise+0xe4>)
 8000484:	69db      	ldr	r3, [r3, #28]
 8000486:	4a33      	ldr	r2, [pc, #204]	@ (8000554 <SerialInitialise+0xe4>)
 8000488:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800048c:	61d3      	str	r3, [r2, #28]
	RCC->APB2ENR |= RCC_APB2ENR_SYSCFGEN;
 800048e:	4b31      	ldr	r3, [pc, #196]	@ (8000554 <SerialInitialise+0xe4>)
 8000490:	699b      	ldr	r3, [r3, #24]
 8000492:	4a30      	ldr	r2, [pc, #192]	@ (8000554 <SerialInitialise+0xe4>)
 8000494:	f043 0301 	orr.w	r3, r3, #1
 8000498:	6193      	str	r3, [r2, #24]

	switch(serial_port->SerialPortGPIO) {
 800049a:	68bb      	ldr	r3, [r7, #8]
 800049c:	6a1b      	ldr	r3, [r3, #32]
 800049e:	2b02      	cmp	r3, #2
 80004a0:	d106      	bne.n	80004b0 <SerialInitialise+0x40>
	case SERIAL_GPIO_C:
		RCC->AHBENR |= RCC_AHBENR_GPIOCEN;
 80004a2:	4b2c      	ldr	r3, [pc, #176]	@ (8000554 <SerialInitialise+0xe4>)
 80004a4:	695b      	ldr	r3, [r3, #20]
 80004a6:	4a2b      	ldr	r2, [pc, #172]	@ (8000554 <SerialInitialise+0xe4>)
 80004a8:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80004ac:	6153      	str	r3, [r2, #20]
		break;
 80004ae:	e000      	b.n	80004b2 <SerialInitialise+0x42>
	default:
		break;
 80004b0:	bf00      	nop
	}

	// set pin mode
	*(serial_port->SerialPinModeRegister) = serial_port->SerialPinModeValue;
 80004b2:	68bb      	ldr	r3, [r7, #8]
 80004b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80004b6:	68ba      	ldr	r2, [r7, #8]
 80004b8:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 80004ba:	601a      	str	r2, [r3, #0]

	// enable high speed clock for GPIOC
	*(serial_port->SerialPinSpeedRegister) = serial_port->SerialPinSpeedValue;
 80004bc:	68bb      	ldr	r3, [r7, #8]
 80004be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80004c0:	68ba      	ldr	r2, [r7, #8]
 80004c2:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80004c4:	601a      	str	r2, [r3, #0]

	// set alternate function to enable USART to an external pin
	*(serial_port->SerialPinAlternatePinRegister) = serial_port->SerialPinAlternatePinValue;
 80004c6:	68bb      	ldr	r3, [r7, #8]
 80004c8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80004ca:	68ba      	ldr	r2, [r7, #8]
 80004cc:	f892 2038 	ldrb.w	r2, [r2, #56]	@ 0x38
 80004d0:	b2d2      	uxtb	r2, r2
 80004d2:	701a      	strb	r2, [r3, #0]

	*(serial_port->TimerEnableRegister) |= serial_port->TimerEnableMask;
 80004d4:	68bb      	ldr	r3, [r7, #8]
 80004d6:	69d9      	ldr	r1, [r3, #28]
 80004d8:	68bb      	ldr	r3, [r7, #8]
 80004da:	699b      	ldr	r3, [r3, #24]
 80004dc:	681a      	ldr	r2, [r3, #0]
 80004de:	68bb      	ldr	r3, [r7, #8]
 80004e0:	699b      	ldr	r3, [r3, #24]
 80004e2:	430a      	orrs	r2, r1
 80004e4:	601a      	str	r2, [r3, #0]

	uint16_t *baud_rate_config = ((uint16_t*)serial_port->BaudRate); // only 16 bits used!
 80004e6:	68bb      	ldr	r3, [r7, #8]
 80004e8:	681b      	ldr	r3, [r3, #0]
 80004ea:	617b      	str	r3, [r7, #20]

	// Baud rate calculation from datasheet
	switch(baudRate){
 80004ec:	68fb      	ldr	r3, [r7, #12]
 80004ee:	2b04      	cmp	r3, #4
 80004f0:	d821      	bhi.n	8000536 <SerialInitialise+0xc6>
 80004f2:	a201      	add	r2, pc, #4	@ (adr r2, 80004f8 <SerialInitialise+0x88>)
 80004f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80004f8:	0800050d 	.word	0x0800050d
 80004fc:	08000515 	.word	0x08000515
 8000500:	0800051d 	.word	0x0800051d
 8000504:	08000525 	.word	0x08000525
 8000508:	0800052d 	.word	0x0800052d
	case BAUD_9600:
		// NEED TO FIX THIS !
		*baud_rate_config = 0x46;  // 115200 at 8MHz
 800050c:	697b      	ldr	r3, [r7, #20]
 800050e:	2246      	movs	r2, #70	@ 0x46
 8000510:	801a      	strh	r2, [r3, #0]
		break;
 8000512:	e010      	b.n	8000536 <SerialInitialise+0xc6>
	case BAUD_19200:
		// NEED TO FIX THIS !
		*baud_rate_config = 0x46;  // 115200 at 8MHz
 8000514:	697b      	ldr	r3, [r7, #20]
 8000516:	2246      	movs	r2, #70	@ 0x46
 8000518:	801a      	strh	r2, [r3, #0]
		break;
 800051a:	e00c      	b.n	8000536 <SerialInitialise+0xc6>
	case BAUD_38400:
		// NEED TO FIX THIS !
		*baud_rate_config = 0x46;  // 115200 at 8MHz
 800051c:	697b      	ldr	r3, [r7, #20]
 800051e:	2246      	movs	r2, #70	@ 0x46
 8000520:	801a      	strh	r2, [r3, #0]
		break;
 8000522:	e008      	b.n	8000536 <SerialInitialise+0xc6>
	case BAUD_57600:
		// NEED TO FIX THIS !
		*baud_rate_config = 0x46;  // 115200 at 8MHz
 8000524:	697b      	ldr	r3, [r7, #20]
 8000526:	2246      	movs	r2, #70	@ 0x46
 8000528:	801a      	strh	r2, [r3, #0]
		break;
 800052a:	e004      	b.n	8000536 <SerialInitialise+0xc6>
	case BAUD_115200:
		*baud_rate_config = 0x46 * 0x06;  // 115200 at 8MHz
 800052c:	697b      	ldr	r3, [r7, #20]
 800052e:	f44f 72d2 	mov.w	r2, #420	@ 0x1a4
 8000532:	801a      	strh	r2, [r3, #0]
		break;
 8000534:	bf00      	nop
	}


	// enable serial port for tx and rx
	*(serial_port->ControlRegister1) |= USART_CR1_TE | USART_CR1_RE | USART_CR1_UE;
 8000536:	68bb      	ldr	r3, [r7, #8]
 8000538:	685b      	ldr	r3, [r3, #4]
 800053a:	681a      	ldr	r2, [r3, #0]
 800053c:	68bb      	ldr	r3, [r7, #8]
 800053e:	685b      	ldr	r3, [r3, #4]
 8000540:	f042 020d 	orr.w	r2, r2, #13
 8000544:	601a      	str	r2, [r3, #0]
}
 8000546:	bf00      	nop
 8000548:	371c      	adds	r7, #28
 800054a:	46bd      	mov	sp, r7
 800054c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000550:	4770      	bx	lr
 8000552:	bf00      	nop
 8000554:	40021000 	.word	0x40021000

08000558 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000558:	b580      	push	{r7, lr}
 800055a:	b082      	sub	sp, #8
 800055c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800055e:	4b0f      	ldr	r3, [pc, #60]	@ (800059c <HAL_MspInit+0x44>)
 8000560:	699b      	ldr	r3, [r3, #24]
 8000562:	4a0e      	ldr	r2, [pc, #56]	@ (800059c <HAL_MspInit+0x44>)
 8000564:	f043 0301 	orr.w	r3, r3, #1
 8000568:	6193      	str	r3, [r2, #24]
 800056a:	4b0c      	ldr	r3, [pc, #48]	@ (800059c <HAL_MspInit+0x44>)
 800056c:	699b      	ldr	r3, [r3, #24]
 800056e:	f003 0301 	and.w	r3, r3, #1
 8000572:	607b      	str	r3, [r7, #4]
 8000574:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000576:	4b09      	ldr	r3, [pc, #36]	@ (800059c <HAL_MspInit+0x44>)
 8000578:	69db      	ldr	r3, [r3, #28]
 800057a:	4a08      	ldr	r2, [pc, #32]	@ (800059c <HAL_MspInit+0x44>)
 800057c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000580:	61d3      	str	r3, [r2, #28]
 8000582:	4b06      	ldr	r3, [pc, #24]	@ (800059c <HAL_MspInit+0x44>)
 8000584:	69db      	ldr	r3, [r3, #28]
 8000586:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800058a:	603b      	str	r3, [r7, #0]
 800058c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800058e:	2007      	movs	r0, #7
 8000590:	f000 face 	bl	8000b30 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000594:	bf00      	nop
 8000596:	3708      	adds	r7, #8
 8000598:	46bd      	mov	sp, r7
 800059a:	bd80      	pop	{r7, pc}
 800059c:	40021000 	.word	0x40021000

080005a0 <HAL_TSC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htsc: TSC handle pointer
  * @retval None
  */
void HAL_TSC_MspInit(TSC_HandleTypeDef* htsc)
{
 80005a0:	b580      	push	{r7, lr}
 80005a2:	b08c      	sub	sp, #48	@ 0x30
 80005a4:	af00      	add	r7, sp, #0
 80005a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005a8:	f107 031c 	add.w	r3, r7, #28
 80005ac:	2200      	movs	r2, #0
 80005ae:	601a      	str	r2, [r3, #0]
 80005b0:	605a      	str	r2, [r3, #4]
 80005b2:	609a      	str	r2, [r3, #8]
 80005b4:	60da      	str	r2, [r3, #12]
 80005b6:	611a      	str	r2, [r3, #16]
  if(htsc->Instance==TSC)
 80005b8:	687b      	ldr	r3, [r7, #4]
 80005ba:	681b      	ldr	r3, [r3, #0]
 80005bc:	4a64      	ldr	r2, [pc, #400]	@ (8000750 <HAL_TSC_MspInit+0x1b0>)
 80005be:	4293      	cmp	r3, r2
 80005c0:	f040 80c2 	bne.w	8000748 <HAL_TSC_MspInit+0x1a8>
  {
    /* USER CODE BEGIN TSC_MspInit 0 */

    /* USER CODE END TSC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TSC_CLK_ENABLE();
 80005c4:	4b63      	ldr	r3, [pc, #396]	@ (8000754 <HAL_TSC_MspInit+0x1b4>)
 80005c6:	695b      	ldr	r3, [r3, #20]
 80005c8:	4a62      	ldr	r2, [pc, #392]	@ (8000754 <HAL_TSC_MspInit+0x1b4>)
 80005ca:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80005ce:	6153      	str	r3, [r2, #20]
 80005d0:	4b60      	ldr	r3, [pc, #384]	@ (8000754 <HAL_TSC_MspInit+0x1b4>)
 80005d2:	695b      	ldr	r3, [r3, #20]
 80005d4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80005d8:	61bb      	str	r3, [r7, #24]
 80005da:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80005dc:	4b5d      	ldr	r3, [pc, #372]	@ (8000754 <HAL_TSC_MspInit+0x1b4>)
 80005de:	695b      	ldr	r3, [r3, #20]
 80005e0:	4a5c      	ldr	r2, [pc, #368]	@ (8000754 <HAL_TSC_MspInit+0x1b4>)
 80005e2:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80005e6:	6153      	str	r3, [r2, #20]
 80005e8:	4b5a      	ldr	r3, [pc, #360]	@ (8000754 <HAL_TSC_MspInit+0x1b4>)
 80005ea:	695b      	ldr	r3, [r3, #20]
 80005ec:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80005f0:	617b      	str	r3, [r7, #20]
 80005f2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80005f4:	4b57      	ldr	r3, [pc, #348]	@ (8000754 <HAL_TSC_MspInit+0x1b4>)
 80005f6:	695b      	ldr	r3, [r3, #20]
 80005f8:	4a56      	ldr	r2, [pc, #344]	@ (8000754 <HAL_TSC_MspInit+0x1b4>)
 80005fa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80005fe:	6153      	str	r3, [r2, #20]
 8000600:	4b54      	ldr	r3, [pc, #336]	@ (8000754 <HAL_TSC_MspInit+0x1b4>)
 8000602:	695b      	ldr	r3, [r3, #20]
 8000604:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000608:	613b      	str	r3, [r7, #16]
 800060a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800060c:	4b51      	ldr	r3, [pc, #324]	@ (8000754 <HAL_TSC_MspInit+0x1b4>)
 800060e:	695b      	ldr	r3, [r3, #20]
 8000610:	4a50      	ldr	r2, [pc, #320]	@ (8000754 <HAL_TSC_MspInit+0x1b4>)
 8000612:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000616:	6153      	str	r3, [r2, #20]
 8000618:	4b4e      	ldr	r3, [pc, #312]	@ (8000754 <HAL_TSC_MspInit+0x1b4>)
 800061a:	695b      	ldr	r3, [r3, #20]
 800061c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000620:	60fb      	str	r3, [r7, #12]
 8000622:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000624:	4b4b      	ldr	r3, [pc, #300]	@ (8000754 <HAL_TSC_MspInit+0x1b4>)
 8000626:	695b      	ldr	r3, [r3, #20]
 8000628:	4a4a      	ldr	r2, [pc, #296]	@ (8000754 <HAL_TSC_MspInit+0x1b4>)
 800062a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800062e:	6153      	str	r3, [r2, #20]
 8000630:	4b48      	ldr	r3, [pc, #288]	@ (8000754 <HAL_TSC_MspInit+0x1b4>)
 8000632:	695b      	ldr	r3, [r3, #20]
 8000634:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000638:	60bb      	str	r3, [r7, #8]
 800063a:	68bb      	ldr	r3, [r7, #8]
    PD15     ------> TSC_G8_IO4
    PB4     ------> TSC_G5_IO2
    PB6     ------> TSC_G5_IO3
    PB7     ------> TSC_G5_IO4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5;
 800063c:	2328      	movs	r3, #40	@ 0x28
 800063e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000640:	2302      	movs	r3, #2
 8000642:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000644:	2300      	movs	r3, #0
 8000646:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000648:	2300      	movs	r3, #0
 800064a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TSC;
 800064c:	2303      	movs	r3, #3
 800064e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000650:	f107 031c 	add.w	r3, r7, #28
 8000654:	4619      	mov	r1, r3
 8000656:	4840      	ldr	r0, [pc, #256]	@ (8000758 <HAL_TSC_MspInit+0x1b8>)
 8000658:	f000 fa9e 	bl	8000b98 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800065c:	2310      	movs	r3, #16
 800065e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000660:	2312      	movs	r3, #18
 8000662:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000664:	2300      	movs	r3, #0
 8000666:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000668:	2300      	movs	r3, #0
 800066a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TSC;
 800066c:	2303      	movs	r3, #3
 800066e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000670:	f107 031c 	add.w	r3, r7, #28
 8000674:	4619      	mov	r1, r3
 8000676:	4838      	ldr	r0, [pc, #224]	@ (8000758 <HAL_TSC_MspInit+0x1b8>)
 8000678:	f000 fa8e 	bl	8000b98 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_3|GPIO_PIN_5|GPIO_PIN_7;
 800067c:	23aa      	movs	r3, #170	@ 0xaa
 800067e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000680:	2302      	movs	r3, #2
 8000682:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000684:	2300      	movs	r3, #0
 8000686:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000688:	2300      	movs	r3, #0
 800068a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TSC;
 800068c:	2303      	movs	r3, #3
 800068e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000690:	f107 031c 	add.w	r3, r7, #28
 8000694:	4619      	mov	r1, r3
 8000696:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800069a:	f000 fa7d 	bl	8000b98 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_6;
 800069e:	2344      	movs	r3, #68	@ 0x44
 80006a0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80006a2:	2312      	movs	r3, #18
 80006a4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006a6:	2300      	movs	r3, #0
 80006a8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006aa:	2300      	movs	r3, #0
 80006ac:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TSC;
 80006ae:	2303      	movs	r3, #3
 80006b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006b2:	f107 031c 	add.w	r3, r7, #28
 80006b6:	4619      	mov	r1, r3
 80006b8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80006bc:	f000 fa6c 	bl	8000b98 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_12|GPIO_PIN_14
 80006c0:	f245 0395 	movw	r3, #20629	@ 0x5095
 80006c4:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_4|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006c6:	2302      	movs	r3, #2
 80006c8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006ca:	2300      	movs	r3, #0
 80006cc:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006ce:	2300      	movs	r3, #0
 80006d0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TSC;
 80006d2:	2303      	movs	r3, #3
 80006d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006d6:	f107 031c 	add.w	r3, r7, #28
 80006da:	4619      	mov	r1, r3
 80006dc:	481f      	ldr	r0, [pc, #124]	@ (800075c <HAL_TSC_MspInit+0x1bc>)
 80006de:	f000 fa5b 	bl	8000b98 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_13|GPIO_PIN_6;
 80006e2:	f242 0342 	movw	r3, #8258	@ 0x2042
 80006e6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80006e8:	2312      	movs	r3, #18
 80006ea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006ec:	2300      	movs	r3, #0
 80006ee:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006f0:	2300      	movs	r3, #0
 80006f2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TSC;
 80006f4:	2303      	movs	r3, #3
 80006f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006f8:	f107 031c 	add.w	r3, r7, #28
 80006fc:	4619      	mov	r1, r3
 80006fe:	4817      	ldr	r0, [pc, #92]	@ (800075c <HAL_TSC_MspInit+0x1bc>)
 8000700:	f000 fa4a 	bl	8000b98 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 8000704:	f44f 4320 	mov.w	r3, #40960	@ 0xa000
 8000708:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800070a:	2302      	movs	r3, #2
 800070c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800070e:	2300      	movs	r3, #0
 8000710:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000712:	2300      	movs	r3, #0
 8000714:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TSC;
 8000716:	2303      	movs	r3, #3
 8000718:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800071a:	f107 031c 	add.w	r3, r7, #28
 800071e:	4619      	mov	r1, r3
 8000720:	480f      	ldr	r0, [pc, #60]	@ (8000760 <HAL_TSC_MspInit+0x1c0>)
 8000722:	f000 fa39 	bl	8000b98 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8000726:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800072a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800072c:	2312      	movs	r3, #18
 800072e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000730:	2300      	movs	r3, #0
 8000732:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000734:	2300      	movs	r3, #0
 8000736:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TSC;
 8000738:	2303      	movs	r3, #3
 800073a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800073c:	f107 031c 	add.w	r3, r7, #28
 8000740:	4619      	mov	r1, r3
 8000742:	4807      	ldr	r0, [pc, #28]	@ (8000760 <HAL_TSC_MspInit+0x1c0>)
 8000744:	f000 fa28 	bl	8000b98 <HAL_GPIO_Init>

    /* USER CODE END TSC_MspInit 1 */

  }

}
 8000748:	bf00      	nop
 800074a:	3730      	adds	r7, #48	@ 0x30
 800074c:	46bd      	mov	sp, r7
 800074e:	bd80      	pop	{r7, pc}
 8000750:	40024000 	.word	0x40024000
 8000754:	40021000 	.word	0x40021000
 8000758:	48001000 	.word	0x48001000
 800075c:	48000400 	.word	0x48000400
 8000760:	48000c00 	.word	0x48000c00

08000764 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000764:	b480      	push	{r7}
 8000766:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000768:	bf00      	nop
 800076a:	e7fd      	b.n	8000768 <NMI_Handler+0x4>

0800076c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800076c:	b480      	push	{r7}
 800076e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000770:	bf00      	nop
 8000772:	e7fd      	b.n	8000770 <HardFault_Handler+0x4>

08000774 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000774:	b480      	push	{r7}
 8000776:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000778:	bf00      	nop
 800077a:	e7fd      	b.n	8000778 <MemManage_Handler+0x4>

0800077c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800077c:	b480      	push	{r7}
 800077e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000780:	bf00      	nop
 8000782:	e7fd      	b.n	8000780 <BusFault_Handler+0x4>

08000784 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000784:	b480      	push	{r7}
 8000786:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000788:	bf00      	nop
 800078a:	e7fd      	b.n	8000788 <UsageFault_Handler+0x4>

0800078c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800078c:	b480      	push	{r7}
 800078e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000790:	bf00      	nop
 8000792:	46bd      	mov	sp, r7
 8000794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000798:	4770      	bx	lr

0800079a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800079a:	b480      	push	{r7}
 800079c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800079e:	bf00      	nop
 80007a0:	46bd      	mov	sp, r7
 80007a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007a6:	4770      	bx	lr

080007a8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80007a8:	b480      	push	{r7}
 80007aa:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80007ac:	bf00      	nop
 80007ae:	46bd      	mov	sp, r7
 80007b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007b4:	4770      	bx	lr

080007b6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80007b6:	b580      	push	{r7, lr}
 80007b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80007ba:	f000 f8e7 	bl	800098c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80007be:	bf00      	nop
 80007c0:	bd80      	pop	{r7, pc}
	...

080007c4 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80007c4:	b480      	push	{r7}
 80007c6:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80007c8:	4b06      	ldr	r3, [pc, #24]	@ (80007e4 <SystemInit+0x20>)
 80007ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80007ce:	4a05      	ldr	r2, [pc, #20]	@ (80007e4 <SystemInit+0x20>)
 80007d0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80007d4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80007d8:	bf00      	nop
 80007da:	46bd      	mov	sp, r7
 80007dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007e0:	4770      	bx	lr
 80007e2:	bf00      	nop
 80007e4:	e000ed00 	.word	0xe000ed00

080007e8 <UART4_Init>:
#include "uart4.h"

#include "stm32f3xx.h"

void UART4_Init(void)
{
 80007e8:	b580      	push	{r7, lr}
 80007ea:	af00      	add	r7, sp, #0
    // Enable clocks for GPIOC and UART4
    RCC->AHBENR |= RCC_AHBENR_GPIOCEN;
 80007ec:	4b1b      	ldr	r3, [pc, #108]	@ (800085c <UART4_Init+0x74>)
 80007ee:	695b      	ldr	r3, [r3, #20]
 80007f0:	4a1a      	ldr	r2, [pc, #104]	@ (800085c <UART4_Init+0x74>)
 80007f2:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80007f6:	6153      	str	r3, [r2, #20]
    RCC->APB1ENR |= RCC_APB1ENR_UART4EN;
 80007f8:	4b18      	ldr	r3, [pc, #96]	@ (800085c <UART4_Init+0x74>)
 80007fa:	69db      	ldr	r3, [r3, #28]
 80007fc:	4a17      	ldr	r2, [pc, #92]	@ (800085c <UART4_Init+0x74>)
 80007fe:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8000802:	61d3      	str	r3, [r2, #28]

    // Configure PC10 (TX) and PC11 (RX) for alternate function mode AF5
    GPIOC->MODER &= ~(GPIO_MODER_MODER10_Msk | GPIO_MODER_MODER11_Msk);
 8000804:	4b16      	ldr	r3, [pc, #88]	@ (8000860 <UART4_Init+0x78>)
 8000806:	681b      	ldr	r3, [r3, #0]
 8000808:	4a15      	ldr	r2, [pc, #84]	@ (8000860 <UART4_Init+0x78>)
 800080a:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800080e:	6013      	str	r3, [r2, #0]
    GPIOC->MODER |= (0b10 << GPIO_MODER_MODER10_Pos) | (0b10 << GPIO_MODER_MODER11_Pos); // AF mode
 8000810:	4b13      	ldr	r3, [pc, #76]	@ (8000860 <UART4_Init+0x78>)
 8000812:	681b      	ldr	r3, [r3, #0]
 8000814:	4a12      	ldr	r2, [pc, #72]	@ (8000860 <UART4_Init+0x78>)
 8000816:	f443 0320 	orr.w	r3, r3, #10485760	@ 0xa00000
 800081a:	6013      	str	r3, [r2, #0]

    GPIOC->AFR[1] &= ~((0xF << 8) | (0xF << 12));
 800081c:	4b10      	ldr	r3, [pc, #64]	@ (8000860 <UART4_Init+0x78>)
 800081e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000820:	4a0f      	ldr	r2, [pc, #60]	@ (8000860 <UART4_Init+0x78>)
 8000822:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8000826:	6253      	str	r3, [r2, #36]	@ 0x24
    GPIOC->AFR[1] |= (5 << 8) | (5 << 12);
 8000828:	4b0d      	ldr	r3, [pc, #52]	@ (8000860 <UART4_Init+0x78>)
 800082a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800082c:	4a0c      	ldr	r2, [pc, #48]	@ (8000860 <UART4_Init+0x78>)
 800082e:	f443 43aa 	orr.w	r3, r3, #21760	@ 0x5500
 8000832:	6253      	str	r3, [r2, #36]	@ 0x24

    // Configure UART4
    UART4->BRR = HAL_RCC_GetPCLK1Freq() / 115200;
 8000834:	f001 fd1e 	bl	8002274 <HAL_RCC_GetPCLK1Freq>
 8000838:	4603      	mov	r3, r0
 800083a:	4a0a      	ldr	r2, [pc, #40]	@ (8000864 <UART4_Init+0x7c>)
 800083c:	490a      	ldr	r1, [pc, #40]	@ (8000868 <UART4_Init+0x80>)
 800083e:	fba1 1303 	umull	r1, r3, r1, r3
 8000842:	0c1b      	lsrs	r3, r3, #16
 8000844:	60d3      	str	r3, [r2, #12]
    UART4->CR1 = USART_CR1_TE | USART_CR1_RE; // Enable Transmit and Receive
 8000846:	4b07      	ldr	r3, [pc, #28]	@ (8000864 <UART4_Init+0x7c>)
 8000848:	220c      	movs	r2, #12
 800084a:	601a      	str	r2, [r3, #0]
    UART4->CR1 |= USART_CR1_UE;               // Enable UART
 800084c:	4b05      	ldr	r3, [pc, #20]	@ (8000864 <UART4_Init+0x7c>)
 800084e:	681b      	ldr	r3, [r3, #0]
 8000850:	4a04      	ldr	r2, [pc, #16]	@ (8000864 <UART4_Init+0x7c>)
 8000852:	f043 0301 	orr.w	r3, r3, #1
 8000856:	6013      	str	r3, [r2, #0]
}
 8000858:	bf00      	nop
 800085a:	bd80      	pop	{r7, pc}
 800085c:	40021000 	.word	0x40021000
 8000860:	48000800 	.word	0x48000800
 8000864:	40004c00 	.word	0x40004c00
 8000868:	91a2b3c5 	.word	0x91a2b3c5

0800086c <UART4_SendByte>:


void UART4_SendByte(uint8_t byte)
{
 800086c:	b480      	push	{r7}
 800086e:	b083      	sub	sp, #12
 8000870:	af00      	add	r7, sp, #0
 8000872:	4603      	mov	r3, r0
 8000874:	71fb      	strb	r3, [r7, #7]
    while (!(UART4->ISR & USART_ISR_TXE));  // Wait until transmit buffer is empty
 8000876:	bf00      	nop
 8000878:	4b0b      	ldr	r3, [pc, #44]	@ (80008a8 <UART4_SendByte+0x3c>)
 800087a:	69db      	ldr	r3, [r3, #28]
 800087c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000880:	2b00      	cmp	r3, #0
 8000882:	d0f9      	beq.n	8000878 <UART4_SendByte+0xc>
    UART4->TDR = byte;                      // Send byte
 8000884:	4b08      	ldr	r3, [pc, #32]	@ (80008a8 <UART4_SendByte+0x3c>)
 8000886:	79fa      	ldrb	r2, [r7, #7]
 8000888:	b292      	uxth	r2, r2
 800088a:	851a      	strh	r2, [r3, #40]	@ 0x28
    while (!(UART4->ISR & USART_ISR_TC));   // Wait until transmission is complete
 800088c:	bf00      	nop
 800088e:	4b06      	ldr	r3, [pc, #24]	@ (80008a8 <UART4_SendByte+0x3c>)
 8000890:	69db      	ldr	r3, [r3, #28]
 8000892:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000896:	2b00      	cmp	r3, #0
 8000898:	d0f9      	beq.n	800088e <UART4_SendByte+0x22>
}
 800089a:	bf00      	nop
 800089c:	bf00      	nop
 800089e:	370c      	adds	r7, #12
 80008a0:	46bd      	mov	sp, r7
 80008a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008a6:	4770      	bx	lr
 80008a8:	40004c00 	.word	0x40004c00

080008ac <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80008ac:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80008e4 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 80008b0:	f7ff ff88 	bl	80007c4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80008b4:	480c      	ldr	r0, [pc, #48]	@ (80008e8 <LoopForever+0x6>)
  ldr r1, =_edata
 80008b6:	490d      	ldr	r1, [pc, #52]	@ (80008ec <LoopForever+0xa>)
  ldr r2, =_sidata
 80008b8:	4a0d      	ldr	r2, [pc, #52]	@ (80008f0 <LoopForever+0xe>)
  movs r3, #0
 80008ba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80008bc:	e002      	b.n	80008c4 <LoopCopyDataInit>

080008be <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80008be:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80008c0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80008c2:	3304      	adds	r3, #4

080008c4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80008c4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80008c6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80008c8:	d3f9      	bcc.n	80008be <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80008ca:	4a0a      	ldr	r2, [pc, #40]	@ (80008f4 <LoopForever+0x12>)
  ldr r4, =_ebss
 80008cc:	4c0a      	ldr	r4, [pc, #40]	@ (80008f8 <LoopForever+0x16>)
  movs r3, #0
 80008ce:	2300      	movs	r3, #0
  b LoopFillZerobss
 80008d0:	e001      	b.n	80008d6 <LoopFillZerobss>

080008d2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80008d2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80008d4:	3204      	adds	r2, #4

080008d6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80008d6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80008d8:	d3fb      	bcc.n	80008d2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80008da:	f001 fd9b 	bl	8002414 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80008de:	f7ff fc73 	bl	80001c8 <main>

080008e2 <LoopForever>:

LoopForever:
    b LoopForever
 80008e2:	e7fe      	b.n	80008e2 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80008e4:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 80008e8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80008ec:	2000004c 	.word	0x2000004c
  ldr r2, =_sidata
 80008f0:	080024b4 	.word	0x080024b4
  ldr r2, =_sbss
 80008f4:	2000004c 	.word	0x2000004c
  ldr r4, =_ebss
 80008f8:	200000b0 	.word	0x200000b0

080008fc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80008fc:	e7fe      	b.n	80008fc <ADC1_2_IRQHandler>
	...

08000900 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000900:	b580      	push	{r7, lr}
 8000902:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000904:	4b08      	ldr	r3, [pc, #32]	@ (8000928 <HAL_Init+0x28>)
 8000906:	681b      	ldr	r3, [r3, #0]
 8000908:	4a07      	ldr	r2, [pc, #28]	@ (8000928 <HAL_Init+0x28>)
 800090a:	f043 0310 	orr.w	r3, r3, #16
 800090e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000910:	2003      	movs	r0, #3
 8000912:	f000 f90d 	bl	8000b30 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000916:	2000      	movs	r0, #0
 8000918:	f000 f808 	bl	800092c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800091c:	f7ff fe1c 	bl	8000558 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000920:	2300      	movs	r3, #0
}
 8000922:	4618      	mov	r0, r3
 8000924:	bd80      	pop	{r7, pc}
 8000926:	bf00      	nop
 8000928:	40022000 	.word	0x40022000

0800092c <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800092c:	b580      	push	{r7, lr}
 800092e:	b082      	sub	sp, #8
 8000930:	af00      	add	r7, sp, #0
 8000932:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000934:	4b12      	ldr	r3, [pc, #72]	@ (8000980 <HAL_InitTick+0x54>)
 8000936:	681a      	ldr	r2, [r3, #0]
 8000938:	4b12      	ldr	r3, [pc, #72]	@ (8000984 <HAL_InitTick+0x58>)
 800093a:	781b      	ldrb	r3, [r3, #0]
 800093c:	4619      	mov	r1, r3
 800093e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000942:	fbb3 f3f1 	udiv	r3, r3, r1
 8000946:	fbb2 f3f3 	udiv	r3, r2, r3
 800094a:	4618      	mov	r0, r3
 800094c:	f000 f917 	bl	8000b7e <HAL_SYSTICK_Config>
 8000950:	4603      	mov	r3, r0
 8000952:	2b00      	cmp	r3, #0
 8000954:	d001      	beq.n	800095a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000956:	2301      	movs	r3, #1
 8000958:	e00e      	b.n	8000978 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800095a:	687b      	ldr	r3, [r7, #4]
 800095c:	2b0f      	cmp	r3, #15
 800095e:	d80a      	bhi.n	8000976 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000960:	2200      	movs	r2, #0
 8000962:	6879      	ldr	r1, [r7, #4]
 8000964:	f04f 30ff 	mov.w	r0, #4294967295
 8000968:	f000 f8ed 	bl	8000b46 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800096c:	4a06      	ldr	r2, [pc, #24]	@ (8000988 <HAL_InitTick+0x5c>)
 800096e:	687b      	ldr	r3, [r7, #4]
 8000970:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8000972:	2300      	movs	r3, #0
 8000974:	e000      	b.n	8000978 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000976:	2301      	movs	r3, #1
}
 8000978:	4618      	mov	r0, r3
 800097a:	3708      	adds	r7, #8
 800097c:	46bd      	mov	sp, r7
 800097e:	bd80      	pop	{r7, pc}
 8000980:	20000040 	.word	0x20000040
 8000984:	20000048 	.word	0x20000048
 8000988:	20000044 	.word	0x20000044

0800098c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800098c:	b480      	push	{r7}
 800098e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000990:	4b06      	ldr	r3, [pc, #24]	@ (80009ac <HAL_IncTick+0x20>)
 8000992:	781b      	ldrb	r3, [r3, #0]
 8000994:	461a      	mov	r2, r3
 8000996:	4b06      	ldr	r3, [pc, #24]	@ (80009b0 <HAL_IncTick+0x24>)
 8000998:	681b      	ldr	r3, [r3, #0]
 800099a:	4413      	add	r3, r2
 800099c:	4a04      	ldr	r2, [pc, #16]	@ (80009b0 <HAL_IncTick+0x24>)
 800099e:	6013      	str	r3, [r2, #0]
}
 80009a0:	bf00      	nop
 80009a2:	46bd      	mov	sp, r7
 80009a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a8:	4770      	bx	lr
 80009aa:	bf00      	nop
 80009ac:	20000048 	.word	0x20000048
 80009b0:	200000ac 	.word	0x200000ac

080009b4 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80009b4:	b480      	push	{r7}
 80009b6:	af00      	add	r7, sp, #0
  return uwTick;  
 80009b8:	4b03      	ldr	r3, [pc, #12]	@ (80009c8 <HAL_GetTick+0x14>)
 80009ba:	681b      	ldr	r3, [r3, #0]
}
 80009bc:	4618      	mov	r0, r3
 80009be:	46bd      	mov	sp, r7
 80009c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c4:	4770      	bx	lr
 80009c6:	bf00      	nop
 80009c8:	200000ac 	.word	0x200000ac

080009cc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80009cc:	b480      	push	{r7}
 80009ce:	b085      	sub	sp, #20
 80009d0:	af00      	add	r7, sp, #0
 80009d2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80009d4:	687b      	ldr	r3, [r7, #4]
 80009d6:	f003 0307 	and.w	r3, r3, #7
 80009da:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80009dc:	4b0c      	ldr	r3, [pc, #48]	@ (8000a10 <__NVIC_SetPriorityGrouping+0x44>)
 80009de:	68db      	ldr	r3, [r3, #12]
 80009e0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80009e2:	68ba      	ldr	r2, [r7, #8]
 80009e4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80009e8:	4013      	ands	r3, r2
 80009ea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80009ec:	68fb      	ldr	r3, [r7, #12]
 80009ee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80009f0:	68bb      	ldr	r3, [r7, #8]
 80009f2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80009f4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80009f8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80009fc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80009fe:	4a04      	ldr	r2, [pc, #16]	@ (8000a10 <__NVIC_SetPriorityGrouping+0x44>)
 8000a00:	68bb      	ldr	r3, [r7, #8]
 8000a02:	60d3      	str	r3, [r2, #12]
}
 8000a04:	bf00      	nop
 8000a06:	3714      	adds	r7, #20
 8000a08:	46bd      	mov	sp, r7
 8000a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a0e:	4770      	bx	lr
 8000a10:	e000ed00 	.word	0xe000ed00

08000a14 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000a14:	b480      	push	{r7}
 8000a16:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000a18:	4b04      	ldr	r3, [pc, #16]	@ (8000a2c <__NVIC_GetPriorityGrouping+0x18>)
 8000a1a:	68db      	ldr	r3, [r3, #12]
 8000a1c:	0a1b      	lsrs	r3, r3, #8
 8000a1e:	f003 0307 	and.w	r3, r3, #7
}
 8000a22:	4618      	mov	r0, r3
 8000a24:	46bd      	mov	sp, r7
 8000a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a2a:	4770      	bx	lr
 8000a2c:	e000ed00 	.word	0xe000ed00

08000a30 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a30:	b480      	push	{r7}
 8000a32:	b083      	sub	sp, #12
 8000a34:	af00      	add	r7, sp, #0
 8000a36:	4603      	mov	r3, r0
 8000a38:	6039      	str	r1, [r7, #0]
 8000a3a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a3c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a40:	2b00      	cmp	r3, #0
 8000a42:	db0a      	blt.n	8000a5a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a44:	683b      	ldr	r3, [r7, #0]
 8000a46:	b2da      	uxtb	r2, r3
 8000a48:	490c      	ldr	r1, [pc, #48]	@ (8000a7c <__NVIC_SetPriority+0x4c>)
 8000a4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a4e:	0112      	lsls	r2, r2, #4
 8000a50:	b2d2      	uxtb	r2, r2
 8000a52:	440b      	add	r3, r1
 8000a54:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000a58:	e00a      	b.n	8000a70 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a5a:	683b      	ldr	r3, [r7, #0]
 8000a5c:	b2da      	uxtb	r2, r3
 8000a5e:	4908      	ldr	r1, [pc, #32]	@ (8000a80 <__NVIC_SetPriority+0x50>)
 8000a60:	79fb      	ldrb	r3, [r7, #7]
 8000a62:	f003 030f 	and.w	r3, r3, #15
 8000a66:	3b04      	subs	r3, #4
 8000a68:	0112      	lsls	r2, r2, #4
 8000a6a:	b2d2      	uxtb	r2, r2
 8000a6c:	440b      	add	r3, r1
 8000a6e:	761a      	strb	r2, [r3, #24]
}
 8000a70:	bf00      	nop
 8000a72:	370c      	adds	r7, #12
 8000a74:	46bd      	mov	sp, r7
 8000a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a7a:	4770      	bx	lr
 8000a7c:	e000e100 	.word	0xe000e100
 8000a80:	e000ed00 	.word	0xe000ed00

08000a84 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a84:	b480      	push	{r7}
 8000a86:	b089      	sub	sp, #36	@ 0x24
 8000a88:	af00      	add	r7, sp, #0
 8000a8a:	60f8      	str	r0, [r7, #12]
 8000a8c:	60b9      	str	r1, [r7, #8]
 8000a8e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000a90:	68fb      	ldr	r3, [r7, #12]
 8000a92:	f003 0307 	and.w	r3, r3, #7
 8000a96:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000a98:	69fb      	ldr	r3, [r7, #28]
 8000a9a:	f1c3 0307 	rsb	r3, r3, #7
 8000a9e:	2b04      	cmp	r3, #4
 8000aa0:	bf28      	it	cs
 8000aa2:	2304      	movcs	r3, #4
 8000aa4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000aa6:	69fb      	ldr	r3, [r7, #28]
 8000aa8:	3304      	adds	r3, #4
 8000aaa:	2b06      	cmp	r3, #6
 8000aac:	d902      	bls.n	8000ab4 <NVIC_EncodePriority+0x30>
 8000aae:	69fb      	ldr	r3, [r7, #28]
 8000ab0:	3b03      	subs	r3, #3
 8000ab2:	e000      	b.n	8000ab6 <NVIC_EncodePriority+0x32>
 8000ab4:	2300      	movs	r3, #0
 8000ab6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ab8:	f04f 32ff 	mov.w	r2, #4294967295
 8000abc:	69bb      	ldr	r3, [r7, #24]
 8000abe:	fa02 f303 	lsl.w	r3, r2, r3
 8000ac2:	43da      	mvns	r2, r3
 8000ac4:	68bb      	ldr	r3, [r7, #8]
 8000ac6:	401a      	ands	r2, r3
 8000ac8:	697b      	ldr	r3, [r7, #20]
 8000aca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000acc:	f04f 31ff 	mov.w	r1, #4294967295
 8000ad0:	697b      	ldr	r3, [r7, #20]
 8000ad2:	fa01 f303 	lsl.w	r3, r1, r3
 8000ad6:	43d9      	mvns	r1, r3
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000adc:	4313      	orrs	r3, r2
         );
}
 8000ade:	4618      	mov	r0, r3
 8000ae0:	3724      	adds	r7, #36	@ 0x24
 8000ae2:	46bd      	mov	sp, r7
 8000ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae8:	4770      	bx	lr
	...

08000aec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000aec:	b580      	push	{r7, lr}
 8000aee:	b082      	sub	sp, #8
 8000af0:	af00      	add	r7, sp, #0
 8000af2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	3b01      	subs	r3, #1
 8000af8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000afc:	d301      	bcc.n	8000b02 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000afe:	2301      	movs	r3, #1
 8000b00:	e00f      	b.n	8000b22 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000b02:	4a0a      	ldr	r2, [pc, #40]	@ (8000b2c <SysTick_Config+0x40>)
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	3b01      	subs	r3, #1
 8000b08:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000b0a:	210f      	movs	r1, #15
 8000b0c:	f04f 30ff 	mov.w	r0, #4294967295
 8000b10:	f7ff ff8e 	bl	8000a30 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b14:	4b05      	ldr	r3, [pc, #20]	@ (8000b2c <SysTick_Config+0x40>)
 8000b16:	2200      	movs	r2, #0
 8000b18:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b1a:	4b04      	ldr	r3, [pc, #16]	@ (8000b2c <SysTick_Config+0x40>)
 8000b1c:	2207      	movs	r2, #7
 8000b1e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000b20:	2300      	movs	r3, #0
}
 8000b22:	4618      	mov	r0, r3
 8000b24:	3708      	adds	r7, #8
 8000b26:	46bd      	mov	sp, r7
 8000b28:	bd80      	pop	{r7, pc}
 8000b2a:	bf00      	nop
 8000b2c:	e000e010 	.word	0xe000e010

08000b30 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b30:	b580      	push	{r7, lr}
 8000b32:	b082      	sub	sp, #8
 8000b34:	af00      	add	r7, sp, #0
 8000b36:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000b38:	6878      	ldr	r0, [r7, #4]
 8000b3a:	f7ff ff47 	bl	80009cc <__NVIC_SetPriorityGrouping>
}
 8000b3e:	bf00      	nop
 8000b40:	3708      	adds	r7, #8
 8000b42:	46bd      	mov	sp, r7
 8000b44:	bd80      	pop	{r7, pc}

08000b46 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b46:	b580      	push	{r7, lr}
 8000b48:	b086      	sub	sp, #24
 8000b4a:	af00      	add	r7, sp, #0
 8000b4c:	4603      	mov	r3, r0
 8000b4e:	60b9      	str	r1, [r7, #8]
 8000b50:	607a      	str	r2, [r7, #4]
 8000b52:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000b54:	2300      	movs	r3, #0
 8000b56:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000b58:	f7ff ff5c 	bl	8000a14 <__NVIC_GetPriorityGrouping>
 8000b5c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000b5e:	687a      	ldr	r2, [r7, #4]
 8000b60:	68b9      	ldr	r1, [r7, #8]
 8000b62:	6978      	ldr	r0, [r7, #20]
 8000b64:	f7ff ff8e 	bl	8000a84 <NVIC_EncodePriority>
 8000b68:	4602      	mov	r2, r0
 8000b6a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000b6e:	4611      	mov	r1, r2
 8000b70:	4618      	mov	r0, r3
 8000b72:	f7ff ff5d 	bl	8000a30 <__NVIC_SetPriority>
}
 8000b76:	bf00      	nop
 8000b78:	3718      	adds	r7, #24
 8000b7a:	46bd      	mov	sp, r7
 8000b7c:	bd80      	pop	{r7, pc}

08000b7e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000b7e:	b580      	push	{r7, lr}
 8000b80:	b082      	sub	sp, #8
 8000b82:	af00      	add	r7, sp, #0
 8000b84:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000b86:	6878      	ldr	r0, [r7, #4]
 8000b88:	f7ff ffb0 	bl	8000aec <SysTick_Config>
 8000b8c:	4603      	mov	r3, r0
}
 8000b8e:	4618      	mov	r0, r3
 8000b90:	3708      	adds	r7, #8
 8000b92:	46bd      	mov	sp, r7
 8000b94:	bd80      	pop	{r7, pc}
	...

08000b98 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000b98:	b480      	push	{r7}
 8000b9a:	b087      	sub	sp, #28
 8000b9c:	af00      	add	r7, sp, #0
 8000b9e:	6078      	str	r0, [r7, #4]
 8000ba0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000ba6:	e154      	b.n	8000e52 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000ba8:	683b      	ldr	r3, [r7, #0]
 8000baa:	681a      	ldr	r2, [r3, #0]
 8000bac:	2101      	movs	r1, #1
 8000bae:	697b      	ldr	r3, [r7, #20]
 8000bb0:	fa01 f303 	lsl.w	r3, r1, r3
 8000bb4:	4013      	ands	r3, r2
 8000bb6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000bb8:	68fb      	ldr	r3, [r7, #12]
 8000bba:	2b00      	cmp	r3, #0
 8000bbc:	f000 8146 	beq.w	8000e4c <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000bc0:	683b      	ldr	r3, [r7, #0]
 8000bc2:	685b      	ldr	r3, [r3, #4]
 8000bc4:	f003 0303 	and.w	r3, r3, #3
 8000bc8:	2b01      	cmp	r3, #1
 8000bca:	d005      	beq.n	8000bd8 <HAL_GPIO_Init+0x40>
 8000bcc:	683b      	ldr	r3, [r7, #0]
 8000bce:	685b      	ldr	r3, [r3, #4]
 8000bd0:	f003 0303 	and.w	r3, r3, #3
 8000bd4:	2b02      	cmp	r3, #2
 8000bd6:	d130      	bne.n	8000c3a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	689b      	ldr	r3, [r3, #8]
 8000bdc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000bde:	697b      	ldr	r3, [r7, #20]
 8000be0:	005b      	lsls	r3, r3, #1
 8000be2:	2203      	movs	r2, #3
 8000be4:	fa02 f303 	lsl.w	r3, r2, r3
 8000be8:	43db      	mvns	r3, r3
 8000bea:	693a      	ldr	r2, [r7, #16]
 8000bec:	4013      	ands	r3, r2
 8000bee:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000bf0:	683b      	ldr	r3, [r7, #0]
 8000bf2:	68da      	ldr	r2, [r3, #12]
 8000bf4:	697b      	ldr	r3, [r7, #20]
 8000bf6:	005b      	lsls	r3, r3, #1
 8000bf8:	fa02 f303 	lsl.w	r3, r2, r3
 8000bfc:	693a      	ldr	r2, [r7, #16]
 8000bfe:	4313      	orrs	r3, r2
 8000c00:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	693a      	ldr	r2, [r7, #16]
 8000c06:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	685b      	ldr	r3, [r3, #4]
 8000c0c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000c0e:	2201      	movs	r2, #1
 8000c10:	697b      	ldr	r3, [r7, #20]
 8000c12:	fa02 f303 	lsl.w	r3, r2, r3
 8000c16:	43db      	mvns	r3, r3
 8000c18:	693a      	ldr	r2, [r7, #16]
 8000c1a:	4013      	ands	r3, r2
 8000c1c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000c1e:	683b      	ldr	r3, [r7, #0]
 8000c20:	685b      	ldr	r3, [r3, #4]
 8000c22:	091b      	lsrs	r3, r3, #4
 8000c24:	f003 0201 	and.w	r2, r3, #1
 8000c28:	697b      	ldr	r3, [r7, #20]
 8000c2a:	fa02 f303 	lsl.w	r3, r2, r3
 8000c2e:	693a      	ldr	r2, [r7, #16]
 8000c30:	4313      	orrs	r3, r2
 8000c32:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	693a      	ldr	r2, [r7, #16]
 8000c38:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000c3a:	683b      	ldr	r3, [r7, #0]
 8000c3c:	685b      	ldr	r3, [r3, #4]
 8000c3e:	f003 0303 	and.w	r3, r3, #3
 8000c42:	2b03      	cmp	r3, #3
 8000c44:	d017      	beq.n	8000c76 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	68db      	ldr	r3, [r3, #12]
 8000c4a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000c4c:	697b      	ldr	r3, [r7, #20]
 8000c4e:	005b      	lsls	r3, r3, #1
 8000c50:	2203      	movs	r2, #3
 8000c52:	fa02 f303 	lsl.w	r3, r2, r3
 8000c56:	43db      	mvns	r3, r3
 8000c58:	693a      	ldr	r2, [r7, #16]
 8000c5a:	4013      	ands	r3, r2
 8000c5c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000c5e:	683b      	ldr	r3, [r7, #0]
 8000c60:	689a      	ldr	r2, [r3, #8]
 8000c62:	697b      	ldr	r3, [r7, #20]
 8000c64:	005b      	lsls	r3, r3, #1
 8000c66:	fa02 f303 	lsl.w	r3, r2, r3
 8000c6a:	693a      	ldr	r2, [r7, #16]
 8000c6c:	4313      	orrs	r3, r2
 8000c6e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	693a      	ldr	r2, [r7, #16]
 8000c74:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000c76:	683b      	ldr	r3, [r7, #0]
 8000c78:	685b      	ldr	r3, [r3, #4]
 8000c7a:	f003 0303 	and.w	r3, r3, #3
 8000c7e:	2b02      	cmp	r3, #2
 8000c80:	d123      	bne.n	8000cca <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000c82:	697b      	ldr	r3, [r7, #20]
 8000c84:	08da      	lsrs	r2, r3, #3
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	3208      	adds	r2, #8
 8000c8a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000c8e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000c90:	697b      	ldr	r3, [r7, #20]
 8000c92:	f003 0307 	and.w	r3, r3, #7
 8000c96:	009b      	lsls	r3, r3, #2
 8000c98:	220f      	movs	r2, #15
 8000c9a:	fa02 f303 	lsl.w	r3, r2, r3
 8000c9e:	43db      	mvns	r3, r3
 8000ca0:	693a      	ldr	r2, [r7, #16]
 8000ca2:	4013      	ands	r3, r2
 8000ca4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000ca6:	683b      	ldr	r3, [r7, #0]
 8000ca8:	691a      	ldr	r2, [r3, #16]
 8000caa:	697b      	ldr	r3, [r7, #20]
 8000cac:	f003 0307 	and.w	r3, r3, #7
 8000cb0:	009b      	lsls	r3, r3, #2
 8000cb2:	fa02 f303 	lsl.w	r3, r2, r3
 8000cb6:	693a      	ldr	r2, [r7, #16]
 8000cb8:	4313      	orrs	r3, r2
 8000cba:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000cbc:	697b      	ldr	r3, [r7, #20]
 8000cbe:	08da      	lsrs	r2, r3, #3
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	3208      	adds	r2, #8
 8000cc4:	6939      	ldr	r1, [r7, #16]
 8000cc6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	681b      	ldr	r3, [r3, #0]
 8000cce:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000cd0:	697b      	ldr	r3, [r7, #20]
 8000cd2:	005b      	lsls	r3, r3, #1
 8000cd4:	2203      	movs	r2, #3
 8000cd6:	fa02 f303 	lsl.w	r3, r2, r3
 8000cda:	43db      	mvns	r3, r3
 8000cdc:	693a      	ldr	r2, [r7, #16]
 8000cde:	4013      	ands	r3, r2
 8000ce0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000ce2:	683b      	ldr	r3, [r7, #0]
 8000ce4:	685b      	ldr	r3, [r3, #4]
 8000ce6:	f003 0203 	and.w	r2, r3, #3
 8000cea:	697b      	ldr	r3, [r7, #20]
 8000cec:	005b      	lsls	r3, r3, #1
 8000cee:	fa02 f303 	lsl.w	r3, r2, r3
 8000cf2:	693a      	ldr	r2, [r7, #16]
 8000cf4:	4313      	orrs	r3, r2
 8000cf6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	693a      	ldr	r2, [r7, #16]
 8000cfc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000cfe:	683b      	ldr	r3, [r7, #0]
 8000d00:	685b      	ldr	r3, [r3, #4]
 8000d02:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000d06:	2b00      	cmp	r3, #0
 8000d08:	f000 80a0 	beq.w	8000e4c <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d0c:	4b58      	ldr	r3, [pc, #352]	@ (8000e70 <HAL_GPIO_Init+0x2d8>)
 8000d0e:	699b      	ldr	r3, [r3, #24]
 8000d10:	4a57      	ldr	r2, [pc, #348]	@ (8000e70 <HAL_GPIO_Init+0x2d8>)
 8000d12:	f043 0301 	orr.w	r3, r3, #1
 8000d16:	6193      	str	r3, [r2, #24]
 8000d18:	4b55      	ldr	r3, [pc, #340]	@ (8000e70 <HAL_GPIO_Init+0x2d8>)
 8000d1a:	699b      	ldr	r3, [r3, #24]
 8000d1c:	f003 0301 	and.w	r3, r3, #1
 8000d20:	60bb      	str	r3, [r7, #8]
 8000d22:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000d24:	4a53      	ldr	r2, [pc, #332]	@ (8000e74 <HAL_GPIO_Init+0x2dc>)
 8000d26:	697b      	ldr	r3, [r7, #20]
 8000d28:	089b      	lsrs	r3, r3, #2
 8000d2a:	3302      	adds	r3, #2
 8000d2c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d30:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000d32:	697b      	ldr	r3, [r7, #20]
 8000d34:	f003 0303 	and.w	r3, r3, #3
 8000d38:	009b      	lsls	r3, r3, #2
 8000d3a:	220f      	movs	r2, #15
 8000d3c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d40:	43db      	mvns	r3, r3
 8000d42:	693a      	ldr	r2, [r7, #16]
 8000d44:	4013      	ands	r3, r2
 8000d46:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8000d4e:	d019      	beq.n	8000d84 <HAL_GPIO_Init+0x1ec>
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	4a49      	ldr	r2, [pc, #292]	@ (8000e78 <HAL_GPIO_Init+0x2e0>)
 8000d54:	4293      	cmp	r3, r2
 8000d56:	d013      	beq.n	8000d80 <HAL_GPIO_Init+0x1e8>
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	4a48      	ldr	r2, [pc, #288]	@ (8000e7c <HAL_GPIO_Init+0x2e4>)
 8000d5c:	4293      	cmp	r3, r2
 8000d5e:	d00d      	beq.n	8000d7c <HAL_GPIO_Init+0x1e4>
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	4a47      	ldr	r2, [pc, #284]	@ (8000e80 <HAL_GPIO_Init+0x2e8>)
 8000d64:	4293      	cmp	r3, r2
 8000d66:	d007      	beq.n	8000d78 <HAL_GPIO_Init+0x1e0>
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	4a46      	ldr	r2, [pc, #280]	@ (8000e84 <HAL_GPIO_Init+0x2ec>)
 8000d6c:	4293      	cmp	r3, r2
 8000d6e:	d101      	bne.n	8000d74 <HAL_GPIO_Init+0x1dc>
 8000d70:	2304      	movs	r3, #4
 8000d72:	e008      	b.n	8000d86 <HAL_GPIO_Init+0x1ee>
 8000d74:	2305      	movs	r3, #5
 8000d76:	e006      	b.n	8000d86 <HAL_GPIO_Init+0x1ee>
 8000d78:	2303      	movs	r3, #3
 8000d7a:	e004      	b.n	8000d86 <HAL_GPIO_Init+0x1ee>
 8000d7c:	2302      	movs	r3, #2
 8000d7e:	e002      	b.n	8000d86 <HAL_GPIO_Init+0x1ee>
 8000d80:	2301      	movs	r3, #1
 8000d82:	e000      	b.n	8000d86 <HAL_GPIO_Init+0x1ee>
 8000d84:	2300      	movs	r3, #0
 8000d86:	697a      	ldr	r2, [r7, #20]
 8000d88:	f002 0203 	and.w	r2, r2, #3
 8000d8c:	0092      	lsls	r2, r2, #2
 8000d8e:	4093      	lsls	r3, r2
 8000d90:	693a      	ldr	r2, [r7, #16]
 8000d92:	4313      	orrs	r3, r2
 8000d94:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000d96:	4937      	ldr	r1, [pc, #220]	@ (8000e74 <HAL_GPIO_Init+0x2dc>)
 8000d98:	697b      	ldr	r3, [r7, #20]
 8000d9a:	089b      	lsrs	r3, r3, #2
 8000d9c:	3302      	adds	r3, #2
 8000d9e:	693a      	ldr	r2, [r7, #16]
 8000da0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000da4:	4b38      	ldr	r3, [pc, #224]	@ (8000e88 <HAL_GPIO_Init+0x2f0>)
 8000da6:	689b      	ldr	r3, [r3, #8]
 8000da8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000daa:	68fb      	ldr	r3, [r7, #12]
 8000dac:	43db      	mvns	r3, r3
 8000dae:	693a      	ldr	r2, [r7, #16]
 8000db0:	4013      	ands	r3, r2
 8000db2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000db4:	683b      	ldr	r3, [r7, #0]
 8000db6:	685b      	ldr	r3, [r3, #4]
 8000db8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000dbc:	2b00      	cmp	r3, #0
 8000dbe:	d003      	beq.n	8000dc8 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8000dc0:	693a      	ldr	r2, [r7, #16]
 8000dc2:	68fb      	ldr	r3, [r7, #12]
 8000dc4:	4313      	orrs	r3, r2
 8000dc6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000dc8:	4a2f      	ldr	r2, [pc, #188]	@ (8000e88 <HAL_GPIO_Init+0x2f0>)
 8000dca:	693b      	ldr	r3, [r7, #16]
 8000dcc:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000dce:	4b2e      	ldr	r3, [pc, #184]	@ (8000e88 <HAL_GPIO_Init+0x2f0>)
 8000dd0:	68db      	ldr	r3, [r3, #12]
 8000dd2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000dd4:	68fb      	ldr	r3, [r7, #12]
 8000dd6:	43db      	mvns	r3, r3
 8000dd8:	693a      	ldr	r2, [r7, #16]
 8000dda:	4013      	ands	r3, r2
 8000ddc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000dde:	683b      	ldr	r3, [r7, #0]
 8000de0:	685b      	ldr	r3, [r3, #4]
 8000de2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	d003      	beq.n	8000df2 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8000dea:	693a      	ldr	r2, [r7, #16]
 8000dec:	68fb      	ldr	r3, [r7, #12]
 8000dee:	4313      	orrs	r3, r2
 8000df0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000df2:	4a25      	ldr	r2, [pc, #148]	@ (8000e88 <HAL_GPIO_Init+0x2f0>)
 8000df4:	693b      	ldr	r3, [r7, #16]
 8000df6:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000df8:	4b23      	ldr	r3, [pc, #140]	@ (8000e88 <HAL_GPIO_Init+0x2f0>)
 8000dfa:	685b      	ldr	r3, [r3, #4]
 8000dfc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000dfe:	68fb      	ldr	r3, [r7, #12]
 8000e00:	43db      	mvns	r3, r3
 8000e02:	693a      	ldr	r2, [r7, #16]
 8000e04:	4013      	ands	r3, r2
 8000e06:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000e08:	683b      	ldr	r3, [r7, #0]
 8000e0a:	685b      	ldr	r3, [r3, #4]
 8000e0c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000e10:	2b00      	cmp	r3, #0
 8000e12:	d003      	beq.n	8000e1c <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8000e14:	693a      	ldr	r2, [r7, #16]
 8000e16:	68fb      	ldr	r3, [r7, #12]
 8000e18:	4313      	orrs	r3, r2
 8000e1a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000e1c:	4a1a      	ldr	r2, [pc, #104]	@ (8000e88 <HAL_GPIO_Init+0x2f0>)
 8000e1e:	693b      	ldr	r3, [r7, #16]
 8000e20:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000e22:	4b19      	ldr	r3, [pc, #100]	@ (8000e88 <HAL_GPIO_Init+0x2f0>)
 8000e24:	681b      	ldr	r3, [r3, #0]
 8000e26:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e28:	68fb      	ldr	r3, [r7, #12]
 8000e2a:	43db      	mvns	r3, r3
 8000e2c:	693a      	ldr	r2, [r7, #16]
 8000e2e:	4013      	ands	r3, r2
 8000e30:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000e32:	683b      	ldr	r3, [r7, #0]
 8000e34:	685b      	ldr	r3, [r3, #4]
 8000e36:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000e3a:	2b00      	cmp	r3, #0
 8000e3c:	d003      	beq.n	8000e46 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8000e3e:	693a      	ldr	r2, [r7, #16]
 8000e40:	68fb      	ldr	r3, [r7, #12]
 8000e42:	4313      	orrs	r3, r2
 8000e44:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000e46:	4a10      	ldr	r2, [pc, #64]	@ (8000e88 <HAL_GPIO_Init+0x2f0>)
 8000e48:	693b      	ldr	r3, [r7, #16]
 8000e4a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8000e4c:	697b      	ldr	r3, [r7, #20]
 8000e4e:	3301      	adds	r3, #1
 8000e50:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000e52:	683b      	ldr	r3, [r7, #0]
 8000e54:	681a      	ldr	r2, [r3, #0]
 8000e56:	697b      	ldr	r3, [r7, #20]
 8000e58:	fa22 f303 	lsr.w	r3, r2, r3
 8000e5c:	2b00      	cmp	r3, #0
 8000e5e:	f47f aea3 	bne.w	8000ba8 <HAL_GPIO_Init+0x10>
  }
}
 8000e62:	bf00      	nop
 8000e64:	bf00      	nop
 8000e66:	371c      	adds	r7, #28
 8000e68:	46bd      	mov	sp, r7
 8000e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e6e:	4770      	bx	lr
 8000e70:	40021000 	.word	0x40021000
 8000e74:	40010000 	.word	0x40010000
 8000e78:	48000400 	.word	0x48000400
 8000e7c:	48000800 	.word	0x48000800
 8000e80:	48000c00 	.word	0x48000c00
 8000e84:	48001000 	.word	0x48001000
 8000e88:	40010400 	.word	0x40010400

08000e8c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000e8c:	b480      	push	{r7}
 8000e8e:	b083      	sub	sp, #12
 8000e90:	af00      	add	r7, sp, #0
 8000e92:	6078      	str	r0, [r7, #4]
 8000e94:	460b      	mov	r3, r1
 8000e96:	807b      	strh	r3, [r7, #2]
 8000e98:	4613      	mov	r3, r2
 8000e9a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000e9c:	787b      	ldrb	r3, [r7, #1]
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	d003      	beq.n	8000eaa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000ea2:	887a      	ldrh	r2, [r7, #2]
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000ea8:	e002      	b.n	8000eb0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000eaa:	887a      	ldrh	r2, [r7, #2]
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8000eb0:	bf00      	nop
 8000eb2:	370c      	adds	r7, #12
 8000eb4:	46bd      	mov	sp, r7
 8000eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eba:	4770      	bx	lr

08000ebc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	f5ad 7d00 	sub.w	sp, sp, #512	@ 0x200
 8000ec2:	af00      	add	r7, sp, #0
 8000ec4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8000ec8:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8000ecc:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000ece:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8000ed2:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	d102      	bne.n	8000ee2 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8000edc:	2301      	movs	r3, #1
 8000ede:	f000 bff4 	b.w	8001eca <HAL_RCC_OscConfig+0x100e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000ee2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8000ee6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	f003 0301 	and.w	r3, r3, #1
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	f000 816d 	beq.w	80011d2 <HAL_RCC_OscConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000ef8:	4bb4      	ldr	r3, [pc, #720]	@ (80011cc <HAL_RCC_OscConfig+0x310>)
 8000efa:	685b      	ldr	r3, [r3, #4]
 8000efc:	f003 030c 	and.w	r3, r3, #12
 8000f00:	2b04      	cmp	r3, #4
 8000f02:	d00c      	beq.n	8000f1e <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000f04:	4bb1      	ldr	r3, [pc, #708]	@ (80011cc <HAL_RCC_OscConfig+0x310>)
 8000f06:	685b      	ldr	r3, [r3, #4]
 8000f08:	f003 030c 	and.w	r3, r3, #12
 8000f0c:	2b08      	cmp	r3, #8
 8000f0e:	d157      	bne.n	8000fc0 <HAL_RCC_OscConfig+0x104>
 8000f10:	4bae      	ldr	r3, [pc, #696]	@ (80011cc <HAL_RCC_OscConfig+0x310>)
 8000f12:	685b      	ldr	r3, [r3, #4]
 8000f14:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000f18:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000f1c:	d150      	bne.n	8000fc0 <HAL_RCC_OscConfig+0x104>
 8000f1e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000f22:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f26:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
 8000f2a:	fa93 f3a3 	rbit	r3, r3
 8000f2e:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000f32:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000f36:	fab3 f383 	clz	r3, r3
 8000f3a:	b2db      	uxtb	r3, r3
 8000f3c:	2b3f      	cmp	r3, #63	@ 0x3f
 8000f3e:	d802      	bhi.n	8000f46 <HAL_RCC_OscConfig+0x8a>
 8000f40:	4ba2      	ldr	r3, [pc, #648]	@ (80011cc <HAL_RCC_OscConfig+0x310>)
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	e015      	b.n	8000f72 <HAL_RCC_OscConfig+0xb6>
 8000f46:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000f4a:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f4e:	f8d7 31e8 	ldr.w	r3, [r7, #488]	@ 0x1e8
 8000f52:	fa93 f3a3 	rbit	r3, r3
 8000f56:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
 8000f5a:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000f5e:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 8000f62:	f8d7 31e0 	ldr.w	r3, [r7, #480]	@ 0x1e0
 8000f66:	fa93 f3a3 	rbit	r3, r3
 8000f6a:	f8c7 31dc 	str.w	r3, [r7, #476]	@ 0x1dc
 8000f6e:	4b97      	ldr	r3, [pc, #604]	@ (80011cc <HAL_RCC_OscConfig+0x310>)
 8000f70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000f72:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8000f76:	f8c7 21d8 	str.w	r2, [r7, #472]	@ 0x1d8
 8000f7a:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 8000f7e:	fa92 f2a2 	rbit	r2, r2
 8000f82:	f8c7 21d4 	str.w	r2, [r7, #468]	@ 0x1d4
  return result;
 8000f86:	f8d7 21d4 	ldr.w	r2, [r7, #468]	@ 0x1d4
 8000f8a:	fab2 f282 	clz	r2, r2
 8000f8e:	b2d2      	uxtb	r2, r2
 8000f90:	f042 0220 	orr.w	r2, r2, #32
 8000f94:	b2d2      	uxtb	r2, r2
 8000f96:	f002 021f 	and.w	r2, r2, #31
 8000f9a:	2101      	movs	r1, #1
 8000f9c:	fa01 f202 	lsl.w	r2, r1, r2
 8000fa0:	4013      	ands	r3, r2
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	f000 8114 	beq.w	80011d0 <HAL_RCC_OscConfig+0x314>
 8000fa8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8000fac:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	685b      	ldr	r3, [r3, #4]
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	f040 810b 	bne.w	80011d0 <HAL_RCC_OscConfig+0x314>
      {
        return HAL_ERROR;
 8000fba:	2301      	movs	r3, #1
 8000fbc:	f000 bf85 	b.w	8001eca <HAL_RCC_OscConfig+0x100e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000fc0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8000fc4:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	685b      	ldr	r3, [r3, #4]
 8000fcc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000fd0:	d106      	bne.n	8000fe0 <HAL_RCC_OscConfig+0x124>
 8000fd2:	4b7e      	ldr	r3, [pc, #504]	@ (80011cc <HAL_RCC_OscConfig+0x310>)
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	4a7d      	ldr	r2, [pc, #500]	@ (80011cc <HAL_RCC_OscConfig+0x310>)
 8000fd8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000fdc:	6013      	str	r3, [r2, #0]
 8000fde:	e036      	b.n	800104e <HAL_RCC_OscConfig+0x192>
 8000fe0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8000fe4:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	685b      	ldr	r3, [r3, #4]
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	d10c      	bne.n	800100a <HAL_RCC_OscConfig+0x14e>
 8000ff0:	4b76      	ldr	r3, [pc, #472]	@ (80011cc <HAL_RCC_OscConfig+0x310>)
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	4a75      	ldr	r2, [pc, #468]	@ (80011cc <HAL_RCC_OscConfig+0x310>)
 8000ff6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000ffa:	6013      	str	r3, [r2, #0]
 8000ffc:	4b73      	ldr	r3, [pc, #460]	@ (80011cc <HAL_RCC_OscConfig+0x310>)
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	4a72      	ldr	r2, [pc, #456]	@ (80011cc <HAL_RCC_OscConfig+0x310>)
 8001002:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001006:	6013      	str	r3, [r2, #0]
 8001008:	e021      	b.n	800104e <HAL_RCC_OscConfig+0x192>
 800100a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800100e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	685b      	ldr	r3, [r3, #4]
 8001016:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800101a:	d10c      	bne.n	8001036 <HAL_RCC_OscConfig+0x17a>
 800101c:	4b6b      	ldr	r3, [pc, #428]	@ (80011cc <HAL_RCC_OscConfig+0x310>)
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	4a6a      	ldr	r2, [pc, #424]	@ (80011cc <HAL_RCC_OscConfig+0x310>)
 8001022:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001026:	6013      	str	r3, [r2, #0]
 8001028:	4b68      	ldr	r3, [pc, #416]	@ (80011cc <HAL_RCC_OscConfig+0x310>)
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	4a67      	ldr	r2, [pc, #412]	@ (80011cc <HAL_RCC_OscConfig+0x310>)
 800102e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001032:	6013      	str	r3, [r2, #0]
 8001034:	e00b      	b.n	800104e <HAL_RCC_OscConfig+0x192>
 8001036:	4b65      	ldr	r3, [pc, #404]	@ (80011cc <HAL_RCC_OscConfig+0x310>)
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	4a64      	ldr	r2, [pc, #400]	@ (80011cc <HAL_RCC_OscConfig+0x310>)
 800103c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001040:	6013      	str	r3, [r2, #0]
 8001042:	4b62      	ldr	r3, [pc, #392]	@ (80011cc <HAL_RCC_OscConfig+0x310>)
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	4a61      	ldr	r2, [pc, #388]	@ (80011cc <HAL_RCC_OscConfig+0x310>)
 8001048:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800104c:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800104e:	4b5f      	ldr	r3, [pc, #380]	@ (80011cc <HAL_RCC_OscConfig+0x310>)
 8001050:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001052:	f023 020f 	bic.w	r2, r3, #15
 8001056:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800105a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	689b      	ldr	r3, [r3, #8]
 8001062:	495a      	ldr	r1, [pc, #360]	@ (80011cc <HAL_RCC_OscConfig+0x310>)
 8001064:	4313      	orrs	r3, r2
 8001066:	62cb      	str	r3, [r1, #44]	@ 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001068:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800106c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	685b      	ldr	r3, [r3, #4]
 8001074:	2b00      	cmp	r3, #0
 8001076:	d054      	beq.n	8001122 <HAL_RCC_OscConfig+0x266>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001078:	f7ff fc9c 	bl	80009b4 <HAL_GetTick>
 800107c:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001080:	e00a      	b.n	8001098 <HAL_RCC_OscConfig+0x1dc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001082:	f7ff fc97 	bl	80009b4 <HAL_GetTick>
 8001086:	4602      	mov	r2, r0
 8001088:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800108c:	1ad3      	subs	r3, r2, r3
 800108e:	2b64      	cmp	r3, #100	@ 0x64
 8001090:	d902      	bls.n	8001098 <HAL_RCC_OscConfig+0x1dc>
          {
            return HAL_TIMEOUT;
 8001092:	2303      	movs	r3, #3
 8001094:	f000 bf19 	b.w	8001eca <HAL_RCC_OscConfig+0x100e>
 8001098:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800109c:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80010a0:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 80010a4:	fa93 f3a3 	rbit	r3, r3
 80010a8:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
  return result;
 80010ac:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80010b0:	fab3 f383 	clz	r3, r3
 80010b4:	b2db      	uxtb	r3, r3
 80010b6:	2b3f      	cmp	r3, #63	@ 0x3f
 80010b8:	d802      	bhi.n	80010c0 <HAL_RCC_OscConfig+0x204>
 80010ba:	4b44      	ldr	r3, [pc, #272]	@ (80011cc <HAL_RCC_OscConfig+0x310>)
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	e015      	b.n	80010ec <HAL_RCC_OscConfig+0x230>
 80010c0:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80010c4:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80010c8:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 80010cc:	fa93 f3a3 	rbit	r3, r3
 80010d0:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 80010d4:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80010d8:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 80010dc:	f8d7 31c0 	ldr.w	r3, [r7, #448]	@ 0x1c0
 80010e0:	fa93 f3a3 	rbit	r3, r3
 80010e4:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
 80010e8:	4b38      	ldr	r3, [pc, #224]	@ (80011cc <HAL_RCC_OscConfig+0x310>)
 80010ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80010ec:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80010f0:	f8c7 21b8 	str.w	r2, [r7, #440]	@ 0x1b8
 80010f4:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 80010f8:	fa92 f2a2 	rbit	r2, r2
 80010fc:	f8c7 21b4 	str.w	r2, [r7, #436]	@ 0x1b4
  return result;
 8001100:	f8d7 21b4 	ldr.w	r2, [r7, #436]	@ 0x1b4
 8001104:	fab2 f282 	clz	r2, r2
 8001108:	b2d2      	uxtb	r2, r2
 800110a:	f042 0220 	orr.w	r2, r2, #32
 800110e:	b2d2      	uxtb	r2, r2
 8001110:	f002 021f 	and.w	r2, r2, #31
 8001114:	2101      	movs	r1, #1
 8001116:	fa01 f202 	lsl.w	r2, r1, r2
 800111a:	4013      	ands	r3, r2
 800111c:	2b00      	cmp	r3, #0
 800111e:	d0b0      	beq.n	8001082 <HAL_RCC_OscConfig+0x1c6>
 8001120:	e057      	b.n	80011d2 <HAL_RCC_OscConfig+0x316>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001122:	f7ff fc47 	bl	80009b4 <HAL_GetTick>
 8001126:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800112a:	e00a      	b.n	8001142 <HAL_RCC_OscConfig+0x286>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800112c:	f7ff fc42 	bl	80009b4 <HAL_GetTick>
 8001130:	4602      	mov	r2, r0
 8001132:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001136:	1ad3      	subs	r3, r2, r3
 8001138:	2b64      	cmp	r3, #100	@ 0x64
 800113a:	d902      	bls.n	8001142 <HAL_RCC_OscConfig+0x286>
          {
            return HAL_TIMEOUT;
 800113c:	2303      	movs	r3, #3
 800113e:	f000 bec4 	b.w	8001eca <HAL_RCC_OscConfig+0x100e>
 8001142:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001146:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800114a:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
 800114e:	fa93 f3a3 	rbit	r3, r3
 8001152:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
  return result;
 8001156:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800115a:	fab3 f383 	clz	r3, r3
 800115e:	b2db      	uxtb	r3, r3
 8001160:	2b3f      	cmp	r3, #63	@ 0x3f
 8001162:	d802      	bhi.n	800116a <HAL_RCC_OscConfig+0x2ae>
 8001164:	4b19      	ldr	r3, [pc, #100]	@ (80011cc <HAL_RCC_OscConfig+0x310>)
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	e015      	b.n	8001196 <HAL_RCC_OscConfig+0x2da>
 800116a:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800116e:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001172:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 8001176:	fa93 f3a3 	rbit	r3, r3
 800117a:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 800117e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001182:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 8001186:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 800118a:	fa93 f3a3 	rbit	r3, r3
 800118e:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
 8001192:	4b0e      	ldr	r3, [pc, #56]	@ (80011cc <HAL_RCC_OscConfig+0x310>)
 8001194:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001196:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800119a:	f8c7 2198 	str.w	r2, [r7, #408]	@ 0x198
 800119e:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 80011a2:	fa92 f2a2 	rbit	r2, r2
 80011a6:	f8c7 2194 	str.w	r2, [r7, #404]	@ 0x194
  return result;
 80011aa:	f8d7 2194 	ldr.w	r2, [r7, #404]	@ 0x194
 80011ae:	fab2 f282 	clz	r2, r2
 80011b2:	b2d2      	uxtb	r2, r2
 80011b4:	f042 0220 	orr.w	r2, r2, #32
 80011b8:	b2d2      	uxtb	r2, r2
 80011ba:	f002 021f 	and.w	r2, r2, #31
 80011be:	2101      	movs	r1, #1
 80011c0:	fa01 f202 	lsl.w	r2, r1, r2
 80011c4:	4013      	ands	r3, r2
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d1b0      	bne.n	800112c <HAL_RCC_OscConfig+0x270>
 80011ca:	e002      	b.n	80011d2 <HAL_RCC_OscConfig+0x316>
 80011cc:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80011d0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80011d2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80011d6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	f003 0302 	and.w	r3, r3, #2
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	f000 816c 	beq.w	80014c0 <HAL_RCC_OscConfig+0x604>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80011e8:	4bcc      	ldr	r3, [pc, #816]	@ (800151c <HAL_RCC_OscConfig+0x660>)
 80011ea:	685b      	ldr	r3, [r3, #4]
 80011ec:	f003 030c 	and.w	r3, r3, #12
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d00b      	beq.n	800120c <HAL_RCC_OscConfig+0x350>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80011f4:	4bc9      	ldr	r3, [pc, #804]	@ (800151c <HAL_RCC_OscConfig+0x660>)
 80011f6:	685b      	ldr	r3, [r3, #4]
 80011f8:	f003 030c 	and.w	r3, r3, #12
 80011fc:	2b08      	cmp	r3, #8
 80011fe:	d16d      	bne.n	80012dc <HAL_RCC_OscConfig+0x420>
 8001200:	4bc6      	ldr	r3, [pc, #792]	@ (800151c <HAL_RCC_OscConfig+0x660>)
 8001202:	685b      	ldr	r3, [r3, #4]
 8001204:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001208:	2b00      	cmp	r3, #0
 800120a:	d167      	bne.n	80012dc <HAL_RCC_OscConfig+0x420>
 800120c:	2302      	movs	r3, #2
 800120e:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001212:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 8001216:	fa93 f3a3 	rbit	r3, r3
 800121a:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
  return result;
 800121e:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001222:	fab3 f383 	clz	r3, r3
 8001226:	b2db      	uxtb	r3, r3
 8001228:	2b3f      	cmp	r3, #63	@ 0x3f
 800122a:	d802      	bhi.n	8001232 <HAL_RCC_OscConfig+0x376>
 800122c:	4bbb      	ldr	r3, [pc, #748]	@ (800151c <HAL_RCC_OscConfig+0x660>)
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	e013      	b.n	800125a <HAL_RCC_OscConfig+0x39e>
 8001232:	2302      	movs	r3, #2
 8001234:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001238:	f8d7 3188 	ldr.w	r3, [r7, #392]	@ 0x188
 800123c:	fa93 f3a3 	rbit	r3, r3
 8001240:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 8001244:	2302      	movs	r3, #2
 8001246:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 800124a:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 800124e:	fa93 f3a3 	rbit	r3, r3
 8001252:	f8c7 317c 	str.w	r3, [r7, #380]	@ 0x17c
 8001256:	4bb1      	ldr	r3, [pc, #708]	@ (800151c <HAL_RCC_OscConfig+0x660>)
 8001258:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800125a:	2202      	movs	r2, #2
 800125c:	f8c7 2178 	str.w	r2, [r7, #376]	@ 0x178
 8001260:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 8001264:	fa92 f2a2 	rbit	r2, r2
 8001268:	f8c7 2174 	str.w	r2, [r7, #372]	@ 0x174
  return result;
 800126c:	f8d7 2174 	ldr.w	r2, [r7, #372]	@ 0x174
 8001270:	fab2 f282 	clz	r2, r2
 8001274:	b2d2      	uxtb	r2, r2
 8001276:	f042 0220 	orr.w	r2, r2, #32
 800127a:	b2d2      	uxtb	r2, r2
 800127c:	f002 021f 	and.w	r2, r2, #31
 8001280:	2101      	movs	r1, #1
 8001282:	fa01 f202 	lsl.w	r2, r1, r2
 8001286:	4013      	ands	r3, r2
 8001288:	2b00      	cmp	r3, #0
 800128a:	d00a      	beq.n	80012a2 <HAL_RCC_OscConfig+0x3e6>
 800128c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001290:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	691b      	ldr	r3, [r3, #16]
 8001298:	2b01      	cmp	r3, #1
 800129a:	d002      	beq.n	80012a2 <HAL_RCC_OscConfig+0x3e6>
      {
        return HAL_ERROR;
 800129c:	2301      	movs	r3, #1
 800129e:	f000 be14 	b.w	8001eca <HAL_RCC_OscConfig+0x100e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80012a2:	4b9e      	ldr	r3, [pc, #632]	@ (800151c <HAL_RCC_OscConfig+0x660>)
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80012aa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80012ae:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	695b      	ldr	r3, [r3, #20]
 80012b6:	21f8      	movs	r1, #248	@ 0xf8
 80012b8:	f8c7 1170 	str.w	r1, [r7, #368]	@ 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012bc:	f8d7 1170 	ldr.w	r1, [r7, #368]	@ 0x170
 80012c0:	fa91 f1a1 	rbit	r1, r1
 80012c4:	f8c7 116c 	str.w	r1, [r7, #364]	@ 0x16c
  return result;
 80012c8:	f8d7 116c 	ldr.w	r1, [r7, #364]	@ 0x16c
 80012cc:	fab1 f181 	clz	r1, r1
 80012d0:	b2c9      	uxtb	r1, r1
 80012d2:	408b      	lsls	r3, r1
 80012d4:	4991      	ldr	r1, [pc, #580]	@ (800151c <HAL_RCC_OscConfig+0x660>)
 80012d6:	4313      	orrs	r3, r2
 80012d8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80012da:	e0f1      	b.n	80014c0 <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80012dc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80012e0:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	691b      	ldr	r3, [r3, #16]
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	f000 8083 	beq.w	80013f4 <HAL_RCC_OscConfig+0x538>
 80012ee:	2301      	movs	r3, #1
 80012f0:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012f4:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
 80012f8:	fa93 f3a3 	rbit	r3, r3
 80012fc:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
  return result;
 8001300:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001304:	fab3 f383 	clz	r3, r3
 8001308:	b2db      	uxtb	r3, r3
 800130a:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 800130e:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8001312:	009b      	lsls	r3, r3, #2
 8001314:	461a      	mov	r2, r3
 8001316:	2301      	movs	r3, #1
 8001318:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800131a:	f7ff fb4b 	bl	80009b4 <HAL_GetTick>
 800131e:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001322:	e00a      	b.n	800133a <HAL_RCC_OscConfig+0x47e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001324:	f7ff fb46 	bl	80009b4 <HAL_GetTick>
 8001328:	4602      	mov	r2, r0
 800132a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800132e:	1ad3      	subs	r3, r2, r3
 8001330:	2b02      	cmp	r3, #2
 8001332:	d902      	bls.n	800133a <HAL_RCC_OscConfig+0x47e>
          {
            return HAL_TIMEOUT;
 8001334:	2303      	movs	r3, #3
 8001336:	f000 bdc8 	b.w	8001eca <HAL_RCC_OscConfig+0x100e>
 800133a:	2302      	movs	r3, #2
 800133c:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001340:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 8001344:	fa93 f3a3 	rbit	r3, r3
 8001348:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
  return result;
 800134c:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001350:	fab3 f383 	clz	r3, r3
 8001354:	b2db      	uxtb	r3, r3
 8001356:	2b3f      	cmp	r3, #63	@ 0x3f
 8001358:	d802      	bhi.n	8001360 <HAL_RCC_OscConfig+0x4a4>
 800135a:	4b70      	ldr	r3, [pc, #448]	@ (800151c <HAL_RCC_OscConfig+0x660>)
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	e013      	b.n	8001388 <HAL_RCC_OscConfig+0x4cc>
 8001360:	2302      	movs	r3, #2
 8001362:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001366:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 800136a:	fa93 f3a3 	rbit	r3, r3
 800136e:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 8001372:	2302      	movs	r3, #2
 8001374:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 8001378:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 800137c:	fa93 f3a3 	rbit	r3, r3
 8001380:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
 8001384:	4b65      	ldr	r3, [pc, #404]	@ (800151c <HAL_RCC_OscConfig+0x660>)
 8001386:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001388:	2202      	movs	r2, #2
 800138a:	f8c7 2148 	str.w	r2, [r7, #328]	@ 0x148
 800138e:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 8001392:	fa92 f2a2 	rbit	r2, r2
 8001396:	f8c7 2144 	str.w	r2, [r7, #324]	@ 0x144
  return result;
 800139a:	f8d7 2144 	ldr.w	r2, [r7, #324]	@ 0x144
 800139e:	fab2 f282 	clz	r2, r2
 80013a2:	b2d2      	uxtb	r2, r2
 80013a4:	f042 0220 	orr.w	r2, r2, #32
 80013a8:	b2d2      	uxtb	r2, r2
 80013aa:	f002 021f 	and.w	r2, r2, #31
 80013ae:	2101      	movs	r1, #1
 80013b0:	fa01 f202 	lsl.w	r2, r1, r2
 80013b4:	4013      	ands	r3, r2
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d0b4      	beq.n	8001324 <HAL_RCC_OscConfig+0x468>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013ba:	4b58      	ldr	r3, [pc, #352]	@ (800151c <HAL_RCC_OscConfig+0x660>)
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80013c2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80013c6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	695b      	ldr	r3, [r3, #20]
 80013ce:	21f8      	movs	r1, #248	@ 0xf8
 80013d0:	f8c7 1140 	str.w	r1, [r7, #320]	@ 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013d4:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 80013d8:	fa91 f1a1 	rbit	r1, r1
 80013dc:	f8c7 113c 	str.w	r1, [r7, #316]	@ 0x13c
  return result;
 80013e0:	f8d7 113c 	ldr.w	r1, [r7, #316]	@ 0x13c
 80013e4:	fab1 f181 	clz	r1, r1
 80013e8:	b2c9      	uxtb	r1, r1
 80013ea:	408b      	lsls	r3, r1
 80013ec:	494b      	ldr	r1, [pc, #300]	@ (800151c <HAL_RCC_OscConfig+0x660>)
 80013ee:	4313      	orrs	r3, r2
 80013f0:	600b      	str	r3, [r1, #0]
 80013f2:	e065      	b.n	80014c0 <HAL_RCC_OscConfig+0x604>
 80013f4:	2301      	movs	r3, #1
 80013f6:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013fa:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 80013fe:	fa93 f3a3 	rbit	r3, r3
 8001402:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  return result;
 8001406:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800140a:	fab3 f383 	clz	r3, r3
 800140e:	b2db      	uxtb	r3, r3
 8001410:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8001414:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8001418:	009b      	lsls	r3, r3, #2
 800141a:	461a      	mov	r2, r3
 800141c:	2300      	movs	r3, #0
 800141e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001420:	f7ff fac8 	bl	80009b4 <HAL_GetTick>
 8001424:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001428:	e00a      	b.n	8001440 <HAL_RCC_OscConfig+0x584>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800142a:	f7ff fac3 	bl	80009b4 <HAL_GetTick>
 800142e:	4602      	mov	r2, r0
 8001430:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001434:	1ad3      	subs	r3, r2, r3
 8001436:	2b02      	cmp	r3, #2
 8001438:	d902      	bls.n	8001440 <HAL_RCC_OscConfig+0x584>
          {
            return HAL_TIMEOUT;
 800143a:	2303      	movs	r3, #3
 800143c:	f000 bd45 	b.w	8001eca <HAL_RCC_OscConfig+0x100e>
 8001440:	2302      	movs	r3, #2
 8001442:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001446:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800144a:	fa93 f3a3 	rbit	r3, r3
 800144e:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  return result;
 8001452:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001456:	fab3 f383 	clz	r3, r3
 800145a:	b2db      	uxtb	r3, r3
 800145c:	2b3f      	cmp	r3, #63	@ 0x3f
 800145e:	d802      	bhi.n	8001466 <HAL_RCC_OscConfig+0x5aa>
 8001460:	4b2e      	ldr	r3, [pc, #184]	@ (800151c <HAL_RCC_OscConfig+0x660>)
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	e013      	b.n	800148e <HAL_RCC_OscConfig+0x5d2>
 8001466:	2302      	movs	r3, #2
 8001468:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800146c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8001470:	fa93 f3a3 	rbit	r3, r3
 8001474:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 8001478:	2302      	movs	r3, #2
 800147a:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 800147e:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8001482:	fa93 f3a3 	rbit	r3, r3
 8001486:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 800148a:	4b24      	ldr	r3, [pc, #144]	@ (800151c <HAL_RCC_OscConfig+0x660>)
 800148c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800148e:	2202      	movs	r2, #2
 8001490:	f8c7 2118 	str.w	r2, [r7, #280]	@ 0x118
 8001494:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 8001498:	fa92 f2a2 	rbit	r2, r2
 800149c:	f8c7 2114 	str.w	r2, [r7, #276]	@ 0x114
  return result;
 80014a0:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 80014a4:	fab2 f282 	clz	r2, r2
 80014a8:	b2d2      	uxtb	r2, r2
 80014aa:	f042 0220 	orr.w	r2, r2, #32
 80014ae:	b2d2      	uxtb	r2, r2
 80014b0:	f002 021f 	and.w	r2, r2, #31
 80014b4:	2101      	movs	r1, #1
 80014b6:	fa01 f202 	lsl.w	r2, r1, r2
 80014ba:	4013      	ands	r3, r2
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d1b4      	bne.n	800142a <HAL_RCC_OscConfig+0x56e>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80014c0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80014c4:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	f003 0308 	and.w	r3, r3, #8
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	f000 8115 	beq.w	8001700 <HAL_RCC_OscConfig+0x844>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80014d6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80014da:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	699b      	ldr	r3, [r3, #24]
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d07e      	beq.n	80015e4 <HAL_RCC_OscConfig+0x728>
 80014e6:	2301      	movs	r3, #1
 80014e8:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014ec:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 80014f0:	fa93 f3a3 	rbit	r3, r3
 80014f4:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
  return result;
 80014f8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80014fc:	fab3 f383 	clz	r3, r3
 8001500:	b2db      	uxtb	r3, r3
 8001502:	461a      	mov	r2, r3
 8001504:	4b06      	ldr	r3, [pc, #24]	@ (8001520 <HAL_RCC_OscConfig+0x664>)
 8001506:	4413      	add	r3, r2
 8001508:	009b      	lsls	r3, r3, #2
 800150a:	461a      	mov	r2, r3
 800150c:	2301      	movs	r3, #1
 800150e:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001510:	f7ff fa50 	bl	80009b4 <HAL_GetTick>
 8001514:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001518:	e00f      	b.n	800153a <HAL_RCC_OscConfig+0x67e>
 800151a:	bf00      	nop
 800151c:	40021000 	.word	0x40021000
 8001520:	10908120 	.word	0x10908120
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001524:	f7ff fa46 	bl	80009b4 <HAL_GetTick>
 8001528:	4602      	mov	r2, r0
 800152a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800152e:	1ad3      	subs	r3, r2, r3
 8001530:	2b02      	cmp	r3, #2
 8001532:	d902      	bls.n	800153a <HAL_RCC_OscConfig+0x67e>
        {
          return HAL_TIMEOUT;
 8001534:	2303      	movs	r3, #3
 8001536:	f000 bcc8 	b.w	8001eca <HAL_RCC_OscConfig+0x100e>
 800153a:	2302      	movs	r3, #2
 800153c:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001540:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8001544:	fa93 f3a3 	rbit	r3, r3
 8001548:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 800154c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001550:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8001554:	2202      	movs	r2, #2
 8001556:	601a      	str	r2, [r3, #0]
 8001558:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800155c:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	fa93 f2a3 	rbit	r2, r3
 8001566:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800156a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800156e:	601a      	str	r2, [r3, #0]
 8001570:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001574:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8001578:	2202      	movs	r2, #2
 800157a:	601a      	str	r2, [r3, #0]
 800157c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001580:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	fa93 f2a3 	rbit	r2, r3
 800158a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800158e:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001592:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001594:	4bb0      	ldr	r3, [pc, #704]	@ (8001858 <HAL_RCC_OscConfig+0x99c>)
 8001596:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001598:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800159c:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80015a0:	2102      	movs	r1, #2
 80015a2:	6019      	str	r1, [r3, #0]
 80015a4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80015a8:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	fa93 f1a3 	rbit	r1, r3
 80015b2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80015b6:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80015ba:	6019      	str	r1, [r3, #0]
  return result;
 80015bc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80015c0:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	fab3 f383 	clz	r3, r3
 80015ca:	b2db      	uxtb	r3, r3
 80015cc:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 80015d0:	b2db      	uxtb	r3, r3
 80015d2:	f003 031f 	and.w	r3, r3, #31
 80015d6:	2101      	movs	r1, #1
 80015d8:	fa01 f303 	lsl.w	r3, r1, r3
 80015dc:	4013      	ands	r3, r2
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d0a0      	beq.n	8001524 <HAL_RCC_OscConfig+0x668>
 80015e2:	e08d      	b.n	8001700 <HAL_RCC_OscConfig+0x844>
 80015e4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80015e8:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 80015ec:	2201      	movs	r2, #1
 80015ee:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015f0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80015f4:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	fa93 f2a3 	rbit	r2, r3
 80015fe:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001602:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8001606:	601a      	str	r2, [r3, #0]
  return result;
 8001608:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800160c:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8001610:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001612:	fab3 f383 	clz	r3, r3
 8001616:	b2db      	uxtb	r3, r3
 8001618:	461a      	mov	r2, r3
 800161a:	4b90      	ldr	r3, [pc, #576]	@ (800185c <HAL_RCC_OscConfig+0x9a0>)
 800161c:	4413      	add	r3, r2
 800161e:	009b      	lsls	r3, r3, #2
 8001620:	461a      	mov	r2, r3
 8001622:	2300      	movs	r3, #0
 8001624:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001626:	f7ff f9c5 	bl	80009b4 <HAL_GetTick>
 800162a:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800162e:	e00a      	b.n	8001646 <HAL_RCC_OscConfig+0x78a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001630:	f7ff f9c0 	bl	80009b4 <HAL_GetTick>
 8001634:	4602      	mov	r2, r0
 8001636:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800163a:	1ad3      	subs	r3, r2, r3
 800163c:	2b02      	cmp	r3, #2
 800163e:	d902      	bls.n	8001646 <HAL_RCC_OscConfig+0x78a>
        {
          return HAL_TIMEOUT;
 8001640:	2303      	movs	r3, #3
 8001642:	f000 bc42 	b.w	8001eca <HAL_RCC_OscConfig+0x100e>
 8001646:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800164a:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800164e:	2202      	movs	r2, #2
 8001650:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001652:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001656:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	fa93 f2a3 	rbit	r2, r3
 8001660:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001664:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8001668:	601a      	str	r2, [r3, #0]
 800166a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800166e:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8001672:	2202      	movs	r2, #2
 8001674:	601a      	str	r2, [r3, #0]
 8001676:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800167a:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	fa93 f2a3 	rbit	r2, r3
 8001684:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001688:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800168c:	601a      	str	r2, [r3, #0]
 800168e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001692:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8001696:	2202      	movs	r2, #2
 8001698:	601a      	str	r2, [r3, #0]
 800169a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800169e:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	fa93 f2a3 	rbit	r2, r3
 80016a8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80016ac:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 80016b0:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80016b2:	4b69      	ldr	r3, [pc, #420]	@ (8001858 <HAL_RCC_OscConfig+0x99c>)
 80016b4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80016b6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80016ba:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 80016be:	2102      	movs	r1, #2
 80016c0:	6019      	str	r1, [r3, #0]
 80016c2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80016c6:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	fa93 f1a3 	rbit	r1, r3
 80016d0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80016d4:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 80016d8:	6019      	str	r1, [r3, #0]
  return result;
 80016da:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80016de:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	fab3 f383 	clz	r3, r3
 80016e8:	b2db      	uxtb	r3, r3
 80016ea:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 80016ee:	b2db      	uxtb	r3, r3
 80016f0:	f003 031f 	and.w	r3, r3, #31
 80016f4:	2101      	movs	r1, #1
 80016f6:	fa01 f303 	lsl.w	r3, r1, r3
 80016fa:	4013      	ands	r3, r2
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d197      	bne.n	8001630 <HAL_RCC_OscConfig+0x774>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001700:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001704:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	f003 0304 	and.w	r3, r3, #4
 8001710:	2b00      	cmp	r3, #0
 8001712:	f000 819e 	beq.w	8001a52 <HAL_RCC_OscConfig+0xb96>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001716:	2300      	movs	r3, #0
 8001718:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800171c:	4b4e      	ldr	r3, [pc, #312]	@ (8001858 <HAL_RCC_OscConfig+0x99c>)
 800171e:	69db      	ldr	r3, [r3, #28]
 8001720:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001724:	2b00      	cmp	r3, #0
 8001726:	d116      	bne.n	8001756 <HAL_RCC_OscConfig+0x89a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001728:	4b4b      	ldr	r3, [pc, #300]	@ (8001858 <HAL_RCC_OscConfig+0x99c>)
 800172a:	69db      	ldr	r3, [r3, #28]
 800172c:	4a4a      	ldr	r2, [pc, #296]	@ (8001858 <HAL_RCC_OscConfig+0x99c>)
 800172e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001732:	61d3      	str	r3, [r2, #28]
 8001734:	4b48      	ldr	r3, [pc, #288]	@ (8001858 <HAL_RCC_OscConfig+0x99c>)
 8001736:	69db      	ldr	r3, [r3, #28]
 8001738:	f003 5280 	and.w	r2, r3, #268435456	@ 0x10000000
 800173c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001740:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 8001744:	601a      	str	r2, [r3, #0]
 8001746:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800174a:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 800174e:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8001750:	2301      	movs	r3, #1
 8001752:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001756:	4b42      	ldr	r3, [pc, #264]	@ (8001860 <HAL_RCC_OscConfig+0x9a4>)
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800175e:	2b00      	cmp	r3, #0
 8001760:	d11a      	bne.n	8001798 <HAL_RCC_OscConfig+0x8dc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001762:	4b3f      	ldr	r3, [pc, #252]	@ (8001860 <HAL_RCC_OscConfig+0x9a4>)
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	4a3e      	ldr	r2, [pc, #248]	@ (8001860 <HAL_RCC_OscConfig+0x9a4>)
 8001768:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800176c:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800176e:	f7ff f921 	bl	80009b4 <HAL_GetTick>
 8001772:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001776:	e009      	b.n	800178c <HAL_RCC_OscConfig+0x8d0>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001778:	f7ff f91c 	bl	80009b4 <HAL_GetTick>
 800177c:	4602      	mov	r2, r0
 800177e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001782:	1ad3      	subs	r3, r2, r3
 8001784:	2b64      	cmp	r3, #100	@ 0x64
 8001786:	d901      	bls.n	800178c <HAL_RCC_OscConfig+0x8d0>
        {
          return HAL_TIMEOUT;
 8001788:	2303      	movs	r3, #3
 800178a:	e39e      	b.n	8001eca <HAL_RCC_OscConfig+0x100e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800178c:	4b34      	ldr	r3, [pc, #208]	@ (8001860 <HAL_RCC_OscConfig+0x9a4>)
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001794:	2b00      	cmp	r3, #0
 8001796:	d0ef      	beq.n	8001778 <HAL_RCC_OscConfig+0x8bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001798:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800179c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	68db      	ldr	r3, [r3, #12]
 80017a4:	2b01      	cmp	r3, #1
 80017a6:	d106      	bne.n	80017b6 <HAL_RCC_OscConfig+0x8fa>
 80017a8:	4b2b      	ldr	r3, [pc, #172]	@ (8001858 <HAL_RCC_OscConfig+0x99c>)
 80017aa:	6a1b      	ldr	r3, [r3, #32]
 80017ac:	4a2a      	ldr	r2, [pc, #168]	@ (8001858 <HAL_RCC_OscConfig+0x99c>)
 80017ae:	f043 0301 	orr.w	r3, r3, #1
 80017b2:	6213      	str	r3, [r2, #32]
 80017b4:	e035      	b.n	8001822 <HAL_RCC_OscConfig+0x966>
 80017b6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80017ba:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	68db      	ldr	r3, [r3, #12]
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d10c      	bne.n	80017e0 <HAL_RCC_OscConfig+0x924>
 80017c6:	4b24      	ldr	r3, [pc, #144]	@ (8001858 <HAL_RCC_OscConfig+0x99c>)
 80017c8:	6a1b      	ldr	r3, [r3, #32]
 80017ca:	4a23      	ldr	r2, [pc, #140]	@ (8001858 <HAL_RCC_OscConfig+0x99c>)
 80017cc:	f023 0301 	bic.w	r3, r3, #1
 80017d0:	6213      	str	r3, [r2, #32]
 80017d2:	4b21      	ldr	r3, [pc, #132]	@ (8001858 <HAL_RCC_OscConfig+0x99c>)
 80017d4:	6a1b      	ldr	r3, [r3, #32]
 80017d6:	4a20      	ldr	r2, [pc, #128]	@ (8001858 <HAL_RCC_OscConfig+0x99c>)
 80017d8:	f023 0304 	bic.w	r3, r3, #4
 80017dc:	6213      	str	r3, [r2, #32]
 80017de:	e020      	b.n	8001822 <HAL_RCC_OscConfig+0x966>
 80017e0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80017e4:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	68db      	ldr	r3, [r3, #12]
 80017ec:	2b05      	cmp	r3, #5
 80017ee:	d10c      	bne.n	800180a <HAL_RCC_OscConfig+0x94e>
 80017f0:	4b19      	ldr	r3, [pc, #100]	@ (8001858 <HAL_RCC_OscConfig+0x99c>)
 80017f2:	6a1b      	ldr	r3, [r3, #32]
 80017f4:	4a18      	ldr	r2, [pc, #96]	@ (8001858 <HAL_RCC_OscConfig+0x99c>)
 80017f6:	f043 0304 	orr.w	r3, r3, #4
 80017fa:	6213      	str	r3, [r2, #32]
 80017fc:	4b16      	ldr	r3, [pc, #88]	@ (8001858 <HAL_RCC_OscConfig+0x99c>)
 80017fe:	6a1b      	ldr	r3, [r3, #32]
 8001800:	4a15      	ldr	r2, [pc, #84]	@ (8001858 <HAL_RCC_OscConfig+0x99c>)
 8001802:	f043 0301 	orr.w	r3, r3, #1
 8001806:	6213      	str	r3, [r2, #32]
 8001808:	e00b      	b.n	8001822 <HAL_RCC_OscConfig+0x966>
 800180a:	4b13      	ldr	r3, [pc, #76]	@ (8001858 <HAL_RCC_OscConfig+0x99c>)
 800180c:	6a1b      	ldr	r3, [r3, #32]
 800180e:	4a12      	ldr	r2, [pc, #72]	@ (8001858 <HAL_RCC_OscConfig+0x99c>)
 8001810:	f023 0301 	bic.w	r3, r3, #1
 8001814:	6213      	str	r3, [r2, #32]
 8001816:	4b10      	ldr	r3, [pc, #64]	@ (8001858 <HAL_RCC_OscConfig+0x99c>)
 8001818:	6a1b      	ldr	r3, [r3, #32]
 800181a:	4a0f      	ldr	r2, [pc, #60]	@ (8001858 <HAL_RCC_OscConfig+0x99c>)
 800181c:	f023 0304 	bic.w	r3, r3, #4
 8001820:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001822:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001826:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	68db      	ldr	r3, [r3, #12]
 800182e:	2b00      	cmp	r3, #0
 8001830:	f000 8087 	beq.w	8001942 <HAL_RCC_OscConfig+0xa86>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001834:	f7ff f8be 	bl	80009b4 <HAL_GetTick>
 8001838:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800183c:	e012      	b.n	8001864 <HAL_RCC_OscConfig+0x9a8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800183e:	f7ff f8b9 	bl	80009b4 <HAL_GetTick>
 8001842:	4602      	mov	r2, r0
 8001844:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001848:	1ad3      	subs	r3, r2, r3
 800184a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800184e:	4293      	cmp	r3, r2
 8001850:	d908      	bls.n	8001864 <HAL_RCC_OscConfig+0x9a8>
        {
          return HAL_TIMEOUT;
 8001852:	2303      	movs	r3, #3
 8001854:	e339      	b.n	8001eca <HAL_RCC_OscConfig+0x100e>
 8001856:	bf00      	nop
 8001858:	40021000 	.word	0x40021000
 800185c:	10908120 	.word	0x10908120
 8001860:	40007000 	.word	0x40007000
 8001864:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001868:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 800186c:	2202      	movs	r2, #2
 800186e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001870:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001874:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	fa93 f2a3 	rbit	r2, r3
 800187e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001882:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8001886:	601a      	str	r2, [r3, #0]
 8001888:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800188c:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8001890:	2202      	movs	r2, #2
 8001892:	601a      	str	r2, [r3, #0]
 8001894:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001898:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	fa93 f2a3 	rbit	r2, r3
 80018a2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80018a6:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 80018aa:	601a      	str	r2, [r3, #0]
  return result;
 80018ac:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80018b0:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 80018b4:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80018b6:	fab3 f383 	clz	r3, r3
 80018ba:	b2db      	uxtb	r3, r3
 80018bc:	f023 035f 	bic.w	r3, r3, #95	@ 0x5f
 80018c0:	b2db      	uxtb	r3, r3
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d102      	bne.n	80018cc <HAL_RCC_OscConfig+0xa10>
 80018c6:	4b98      	ldr	r3, [pc, #608]	@ (8001b28 <HAL_RCC_OscConfig+0xc6c>)
 80018c8:	6a1b      	ldr	r3, [r3, #32]
 80018ca:	e013      	b.n	80018f4 <HAL_RCC_OscConfig+0xa38>
 80018cc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80018d0:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 80018d4:	2202      	movs	r2, #2
 80018d6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018d8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80018dc:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	fa93 f2a3 	rbit	r2, r3
 80018e6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80018ea:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 80018ee:	601a      	str	r2, [r3, #0]
 80018f0:	4b8d      	ldr	r3, [pc, #564]	@ (8001b28 <HAL_RCC_OscConfig+0xc6c>)
 80018f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80018f4:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80018f8:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 80018fc:	2102      	movs	r1, #2
 80018fe:	6011      	str	r1, [r2, #0]
 8001900:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001904:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 8001908:	6812      	ldr	r2, [r2, #0]
 800190a:	fa92 f1a2 	rbit	r1, r2
 800190e:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001912:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8001916:	6011      	str	r1, [r2, #0]
  return result;
 8001918:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800191c:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8001920:	6812      	ldr	r2, [r2, #0]
 8001922:	fab2 f282 	clz	r2, r2
 8001926:	b2d2      	uxtb	r2, r2
 8001928:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800192c:	b2d2      	uxtb	r2, r2
 800192e:	f002 021f 	and.w	r2, r2, #31
 8001932:	2101      	movs	r1, #1
 8001934:	fa01 f202 	lsl.w	r2, r1, r2
 8001938:	4013      	ands	r3, r2
 800193a:	2b00      	cmp	r3, #0
 800193c:	f43f af7f 	beq.w	800183e <HAL_RCC_OscConfig+0x982>
 8001940:	e07d      	b.n	8001a3e <HAL_RCC_OscConfig+0xb82>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001942:	f7ff f837 	bl	80009b4 <HAL_GetTick>
 8001946:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800194a:	e00b      	b.n	8001964 <HAL_RCC_OscConfig+0xaa8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800194c:	f7ff f832 	bl	80009b4 <HAL_GetTick>
 8001950:	4602      	mov	r2, r0
 8001952:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001956:	1ad3      	subs	r3, r2, r3
 8001958:	f241 3288 	movw	r2, #5000	@ 0x1388
 800195c:	4293      	cmp	r3, r2
 800195e:	d901      	bls.n	8001964 <HAL_RCC_OscConfig+0xaa8>
        {
          return HAL_TIMEOUT;
 8001960:	2303      	movs	r3, #3
 8001962:	e2b2      	b.n	8001eca <HAL_RCC_OscConfig+0x100e>
 8001964:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001968:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 800196c:	2202      	movs	r2, #2
 800196e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001970:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001974:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	fa93 f2a3 	rbit	r2, r3
 800197e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001982:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 8001986:	601a      	str	r2, [r3, #0]
 8001988:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800198c:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8001990:	2202      	movs	r2, #2
 8001992:	601a      	str	r2, [r3, #0]
 8001994:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001998:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	fa93 f2a3 	rbit	r2, r3
 80019a2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80019a6:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 80019aa:	601a      	str	r2, [r3, #0]
  return result;
 80019ac:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80019b0:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 80019b4:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80019b6:	fab3 f383 	clz	r3, r3
 80019ba:	b2db      	uxtb	r3, r3
 80019bc:	f023 035f 	bic.w	r3, r3, #95	@ 0x5f
 80019c0:	b2db      	uxtb	r3, r3
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d102      	bne.n	80019cc <HAL_RCC_OscConfig+0xb10>
 80019c6:	4b58      	ldr	r3, [pc, #352]	@ (8001b28 <HAL_RCC_OscConfig+0xc6c>)
 80019c8:	6a1b      	ldr	r3, [r3, #32]
 80019ca:	e013      	b.n	80019f4 <HAL_RCC_OscConfig+0xb38>
 80019cc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80019d0:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 80019d4:	2202      	movs	r2, #2
 80019d6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019d8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80019dc:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	fa93 f2a3 	rbit	r2, r3
 80019e6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80019ea:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 80019ee:	601a      	str	r2, [r3, #0]
 80019f0:	4b4d      	ldr	r3, [pc, #308]	@ (8001b28 <HAL_RCC_OscConfig+0xc6c>)
 80019f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019f4:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80019f8:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 80019fc:	2102      	movs	r1, #2
 80019fe:	6011      	str	r1, [r2, #0]
 8001a00:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001a04:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 8001a08:	6812      	ldr	r2, [r2, #0]
 8001a0a:	fa92 f1a2 	rbit	r1, r2
 8001a0e:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001a12:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8001a16:	6011      	str	r1, [r2, #0]
  return result;
 8001a18:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001a1c:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8001a20:	6812      	ldr	r2, [r2, #0]
 8001a22:	fab2 f282 	clz	r2, r2
 8001a26:	b2d2      	uxtb	r2, r2
 8001a28:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001a2c:	b2d2      	uxtb	r2, r2
 8001a2e:	f002 021f 	and.w	r2, r2, #31
 8001a32:	2101      	movs	r1, #1
 8001a34:	fa01 f202 	lsl.w	r2, r1, r2
 8001a38:	4013      	ands	r3, r2
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d186      	bne.n	800194c <HAL_RCC_OscConfig+0xa90>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001a3e:	f897 31ff 	ldrb.w	r3, [r7, #511]	@ 0x1ff
 8001a42:	2b01      	cmp	r3, #1
 8001a44:	d105      	bne.n	8001a52 <HAL_RCC_OscConfig+0xb96>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001a46:	4b38      	ldr	r3, [pc, #224]	@ (8001b28 <HAL_RCC_OscConfig+0xc6c>)
 8001a48:	69db      	ldr	r3, [r3, #28]
 8001a4a:	4a37      	ldr	r2, [pc, #220]	@ (8001b28 <HAL_RCC_OscConfig+0xc6c>)
 8001a4c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001a50:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001a52:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001a56:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	69db      	ldr	r3, [r3, #28]
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	f000 8232 	beq.w	8001ec8 <HAL_RCC_OscConfig+0x100c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001a64:	4b30      	ldr	r3, [pc, #192]	@ (8001b28 <HAL_RCC_OscConfig+0xc6c>)
 8001a66:	685b      	ldr	r3, [r3, #4]
 8001a68:	f003 030c 	and.w	r3, r3, #12
 8001a6c:	2b08      	cmp	r3, #8
 8001a6e:	f000 8201 	beq.w	8001e74 <HAL_RCC_OscConfig+0xfb8>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001a72:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001a76:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	69db      	ldr	r3, [r3, #28]
 8001a7e:	2b02      	cmp	r3, #2
 8001a80:	f040 8157 	bne.w	8001d32 <HAL_RCC_OscConfig+0xe76>
 8001a84:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001a88:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 8001a8c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8001a90:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a92:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001a96:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	fa93 f2a3 	rbit	r2, r3
 8001aa0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001aa4:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8001aa8:	601a      	str	r2, [r3, #0]
  return result;
 8001aaa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001aae:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8001ab2:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ab4:	fab3 f383 	clz	r3, r3
 8001ab8:	b2db      	uxtb	r3, r3
 8001aba:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8001abe:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8001ac2:	009b      	lsls	r3, r3, #2
 8001ac4:	461a      	mov	r2, r3
 8001ac6:	2300      	movs	r3, #0
 8001ac8:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001aca:	f7fe ff73 	bl	80009b4 <HAL_GetTick>
 8001ace:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ad2:	e009      	b.n	8001ae8 <HAL_RCC_OscConfig+0xc2c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001ad4:	f7fe ff6e 	bl	80009b4 <HAL_GetTick>
 8001ad8:	4602      	mov	r2, r0
 8001ada:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001ade:	1ad3      	subs	r3, r2, r3
 8001ae0:	2b02      	cmp	r3, #2
 8001ae2:	d901      	bls.n	8001ae8 <HAL_RCC_OscConfig+0xc2c>
          {
            return HAL_TIMEOUT;
 8001ae4:	2303      	movs	r3, #3
 8001ae6:	e1f0      	b.n	8001eca <HAL_RCC_OscConfig+0x100e>
 8001ae8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001aec:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8001af0:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001af4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001af6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001afa:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	fa93 f2a3 	rbit	r2, r3
 8001b04:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001b08:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8001b0c:	601a      	str	r2, [r3, #0]
  return result;
 8001b0e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001b12:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8001b16:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b18:	fab3 f383 	clz	r3, r3
 8001b1c:	b2db      	uxtb	r3, r3
 8001b1e:	2b3f      	cmp	r3, #63	@ 0x3f
 8001b20:	d804      	bhi.n	8001b2c <HAL_RCC_OscConfig+0xc70>
 8001b22:	4b01      	ldr	r3, [pc, #4]	@ (8001b28 <HAL_RCC_OscConfig+0xc6c>)
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	e029      	b.n	8001b7c <HAL_RCC_OscConfig+0xcc0>
 8001b28:	40021000 	.word	0x40021000
 8001b2c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001b30:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8001b34:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001b38:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b3a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001b3e:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	fa93 f2a3 	rbit	r2, r3
 8001b48:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001b4c:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8001b50:	601a      	str	r2, [r3, #0]
 8001b52:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001b56:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8001b5a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001b5e:	601a      	str	r2, [r3, #0]
 8001b60:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001b64:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	fa93 f2a3 	rbit	r2, r3
 8001b6e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001b72:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8001b76:	601a      	str	r2, [r3, #0]
 8001b78:	4bc3      	ldr	r3, [pc, #780]	@ (8001e88 <HAL_RCC_OscConfig+0xfcc>)
 8001b7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b7c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001b80:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 8001b84:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8001b88:	6011      	str	r1, [r2, #0]
 8001b8a:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001b8e:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 8001b92:	6812      	ldr	r2, [r2, #0]
 8001b94:	fa92 f1a2 	rbit	r1, r2
 8001b98:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001b9c:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8001ba0:	6011      	str	r1, [r2, #0]
  return result;
 8001ba2:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001ba6:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8001baa:	6812      	ldr	r2, [r2, #0]
 8001bac:	fab2 f282 	clz	r2, r2
 8001bb0:	b2d2      	uxtb	r2, r2
 8001bb2:	f042 0220 	orr.w	r2, r2, #32
 8001bb6:	b2d2      	uxtb	r2, r2
 8001bb8:	f002 021f 	and.w	r2, r2, #31
 8001bbc:	2101      	movs	r1, #1
 8001bbe:	fa01 f202 	lsl.w	r2, r1, r2
 8001bc2:	4013      	ands	r3, r2
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d185      	bne.n	8001ad4 <HAL_RCC_OscConfig+0xc18>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001bc8:	4baf      	ldr	r3, [pc, #700]	@ (8001e88 <HAL_RCC_OscConfig+0xfcc>)
 8001bca:	685b      	ldr	r3, [r3, #4]
 8001bcc:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8001bd0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001bd4:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8001bdc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001be0:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	6a1b      	ldr	r3, [r3, #32]
 8001be8:	430b      	orrs	r3, r1
 8001bea:	49a7      	ldr	r1, [pc, #668]	@ (8001e88 <HAL_RCC_OscConfig+0xfcc>)
 8001bec:	4313      	orrs	r3, r2
 8001bee:	604b      	str	r3, [r1, #4]
 8001bf0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001bf4:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 8001bf8:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8001bfc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bfe:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001c02:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	fa93 f2a3 	rbit	r2, r3
 8001c0c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001c10:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8001c14:	601a      	str	r2, [r3, #0]
  return result;
 8001c16:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001c1a:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8001c1e:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001c20:	fab3 f383 	clz	r3, r3
 8001c24:	b2db      	uxtb	r3, r3
 8001c26:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8001c2a:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8001c2e:	009b      	lsls	r3, r3, #2
 8001c30:	461a      	mov	r2, r3
 8001c32:	2301      	movs	r3, #1
 8001c34:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c36:	f7fe febd 	bl	80009b4 <HAL_GetTick>
 8001c3a:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001c3e:	e009      	b.n	8001c54 <HAL_RCC_OscConfig+0xd98>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c40:	f7fe feb8 	bl	80009b4 <HAL_GetTick>
 8001c44:	4602      	mov	r2, r0
 8001c46:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001c4a:	1ad3      	subs	r3, r2, r3
 8001c4c:	2b02      	cmp	r3, #2
 8001c4e:	d901      	bls.n	8001c54 <HAL_RCC_OscConfig+0xd98>
          {
            return HAL_TIMEOUT;
 8001c50:	2303      	movs	r3, #3
 8001c52:	e13a      	b.n	8001eca <HAL_RCC_OscConfig+0x100e>
 8001c54:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001c58:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8001c5c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001c60:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c62:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001c66:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	fa93 f2a3 	rbit	r2, r3
 8001c70:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001c74:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8001c78:	601a      	str	r2, [r3, #0]
  return result;
 8001c7a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001c7e:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8001c82:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001c84:	fab3 f383 	clz	r3, r3
 8001c88:	b2db      	uxtb	r3, r3
 8001c8a:	2b3f      	cmp	r3, #63	@ 0x3f
 8001c8c:	d802      	bhi.n	8001c94 <HAL_RCC_OscConfig+0xdd8>
 8001c8e:	4b7e      	ldr	r3, [pc, #504]	@ (8001e88 <HAL_RCC_OscConfig+0xfcc>)
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	e027      	b.n	8001ce4 <HAL_RCC_OscConfig+0xe28>
 8001c94:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001c98:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8001c9c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001ca0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ca2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001ca6:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	fa93 f2a3 	rbit	r2, r3
 8001cb0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001cb4:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8001cb8:	601a      	str	r2, [r3, #0]
 8001cba:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001cbe:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8001cc2:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001cc6:	601a      	str	r2, [r3, #0]
 8001cc8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001ccc:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	fa93 f2a3 	rbit	r2, r3
 8001cd6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001cda:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8001cde:	601a      	str	r2, [r3, #0]
 8001ce0:	4b69      	ldr	r3, [pc, #420]	@ (8001e88 <HAL_RCC_OscConfig+0xfcc>)
 8001ce2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ce4:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001ce8:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 8001cec:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8001cf0:	6011      	str	r1, [r2, #0]
 8001cf2:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001cf6:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 8001cfa:	6812      	ldr	r2, [r2, #0]
 8001cfc:	fa92 f1a2 	rbit	r1, r2
 8001d00:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001d04:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8001d08:	6011      	str	r1, [r2, #0]
  return result;
 8001d0a:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001d0e:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8001d12:	6812      	ldr	r2, [r2, #0]
 8001d14:	fab2 f282 	clz	r2, r2
 8001d18:	b2d2      	uxtb	r2, r2
 8001d1a:	f042 0220 	orr.w	r2, r2, #32
 8001d1e:	b2d2      	uxtb	r2, r2
 8001d20:	f002 021f 	and.w	r2, r2, #31
 8001d24:	2101      	movs	r1, #1
 8001d26:	fa01 f202 	lsl.w	r2, r1, r2
 8001d2a:	4013      	ands	r3, r2
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d087      	beq.n	8001c40 <HAL_RCC_OscConfig+0xd84>
 8001d30:	e0ca      	b.n	8001ec8 <HAL_RCC_OscConfig+0x100c>
 8001d32:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001d36:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8001d3a:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8001d3e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d40:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001d44:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	fa93 f2a3 	rbit	r2, r3
 8001d4e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001d52:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8001d56:	601a      	str	r2, [r3, #0]
  return result;
 8001d58:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001d5c:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8001d60:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d62:	fab3 f383 	clz	r3, r3
 8001d66:	b2db      	uxtb	r3, r3
 8001d68:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8001d6c:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8001d70:	009b      	lsls	r3, r3, #2
 8001d72:	461a      	mov	r2, r3
 8001d74:	2300      	movs	r3, #0
 8001d76:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d78:	f7fe fe1c 	bl	80009b4 <HAL_GetTick>
 8001d7c:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d80:	e009      	b.n	8001d96 <HAL_RCC_OscConfig+0xeda>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001d82:	f7fe fe17 	bl	80009b4 <HAL_GetTick>
 8001d86:	4602      	mov	r2, r0
 8001d88:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001d8c:	1ad3      	subs	r3, r2, r3
 8001d8e:	2b02      	cmp	r3, #2
 8001d90:	d901      	bls.n	8001d96 <HAL_RCC_OscConfig+0xeda>
          {
            return HAL_TIMEOUT;
 8001d92:	2303      	movs	r3, #3
 8001d94:	e099      	b.n	8001eca <HAL_RCC_OscConfig+0x100e>
 8001d96:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001d9a:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8001d9e:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001da2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001da4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001da8:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	fa93 f2a3 	rbit	r2, r3
 8001db2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001db6:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8001dba:	601a      	str	r2, [r3, #0]
  return result;
 8001dbc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001dc0:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8001dc4:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001dc6:	fab3 f383 	clz	r3, r3
 8001dca:	b2db      	uxtb	r3, r3
 8001dcc:	2b3f      	cmp	r3, #63	@ 0x3f
 8001dce:	d802      	bhi.n	8001dd6 <HAL_RCC_OscConfig+0xf1a>
 8001dd0:	4b2d      	ldr	r3, [pc, #180]	@ (8001e88 <HAL_RCC_OscConfig+0xfcc>)
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	e027      	b.n	8001e26 <HAL_RCC_OscConfig+0xf6a>
 8001dd6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001dda:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8001dde:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001de2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001de4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001de8:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	fa93 f2a3 	rbit	r2, r3
 8001df2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001df6:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 8001dfa:	601a      	str	r2, [r3, #0]
 8001dfc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001e00:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8001e04:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001e08:	601a      	str	r2, [r3, #0]
 8001e0a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001e0e:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	fa93 f2a3 	rbit	r2, r3
 8001e18:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001e1c:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 8001e20:	601a      	str	r2, [r3, #0]
 8001e22:	4b19      	ldr	r3, [pc, #100]	@ (8001e88 <HAL_RCC_OscConfig+0xfcc>)
 8001e24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e26:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001e2a:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 8001e2e:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8001e32:	6011      	str	r1, [r2, #0]
 8001e34:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001e38:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 8001e3c:	6812      	ldr	r2, [r2, #0]
 8001e3e:	fa92 f1a2 	rbit	r1, r2
 8001e42:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001e46:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8001e4a:	6011      	str	r1, [r2, #0]
  return result;
 8001e4c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001e50:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8001e54:	6812      	ldr	r2, [r2, #0]
 8001e56:	fab2 f282 	clz	r2, r2
 8001e5a:	b2d2      	uxtb	r2, r2
 8001e5c:	f042 0220 	orr.w	r2, r2, #32
 8001e60:	b2d2      	uxtb	r2, r2
 8001e62:	f002 021f 	and.w	r2, r2, #31
 8001e66:	2101      	movs	r1, #1
 8001e68:	fa01 f202 	lsl.w	r2, r1, r2
 8001e6c:	4013      	ands	r3, r2
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d187      	bne.n	8001d82 <HAL_RCC_OscConfig+0xec6>
 8001e72:	e029      	b.n	8001ec8 <HAL_RCC_OscConfig+0x100c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001e74:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001e78:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	69db      	ldr	r3, [r3, #28]
 8001e80:	2b01      	cmp	r3, #1
 8001e82:	d103      	bne.n	8001e8c <HAL_RCC_OscConfig+0xfd0>
      {
        return HAL_ERROR;
 8001e84:	2301      	movs	r3, #1
 8001e86:	e020      	b.n	8001eca <HAL_RCC_OscConfig+0x100e>
 8001e88:	40021000 	.word	0x40021000
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001e8c:	4b11      	ldr	r3, [pc, #68]	@ (8001ed4 <HAL_RCC_OscConfig+0x1018>)
 8001e8e:	685b      	ldr	r3, [r3, #4]
 8001e90:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001e94:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8001e98:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8001e9c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001ea0:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	6a1b      	ldr	r3, [r3, #32]
 8001ea8:	429a      	cmp	r2, r3
 8001eaa:	d10b      	bne.n	8001ec4 <HAL_RCC_OscConfig+0x1008>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8001eac:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8001eb0:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8001eb4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001eb8:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001ec0:	429a      	cmp	r2, r3
 8001ec2:	d001      	beq.n	8001ec8 <HAL_RCC_OscConfig+0x100c>
#endif
        {
          return HAL_ERROR;
 8001ec4:	2301      	movs	r3, #1
 8001ec6:	e000      	b.n	8001eca <HAL_RCC_OscConfig+0x100e>
        }
      }
    }
  }

  return HAL_OK;
 8001ec8:	2300      	movs	r3, #0
}
 8001eca:	4618      	mov	r0, r3
 8001ecc:	f507 7700 	add.w	r7, r7, #512	@ 0x200
 8001ed0:	46bd      	mov	sp, r7
 8001ed2:	bd80      	pop	{r7, pc}
 8001ed4:	40021000 	.word	0x40021000

08001ed8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001ed8:	b580      	push	{r7, lr}
 8001eda:	b09e      	sub	sp, #120	@ 0x78
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	6078      	str	r0, [r7, #4]
 8001ee0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001ee2:	2300      	movs	r3, #0
 8001ee4:	677b      	str	r3, [r7, #116]	@ 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d101      	bne.n	8001ef0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001eec:	2301      	movs	r3, #1
 8001eee:	e154      	b.n	800219a <HAL_RCC_ClockConfig+0x2c2>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001ef0:	4b89      	ldr	r3, [pc, #548]	@ (8002118 <HAL_RCC_ClockConfig+0x240>)
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	f003 0307 	and.w	r3, r3, #7
 8001ef8:	683a      	ldr	r2, [r7, #0]
 8001efa:	429a      	cmp	r2, r3
 8001efc:	d910      	bls.n	8001f20 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001efe:	4b86      	ldr	r3, [pc, #536]	@ (8002118 <HAL_RCC_ClockConfig+0x240>)
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	f023 0207 	bic.w	r2, r3, #7
 8001f06:	4984      	ldr	r1, [pc, #528]	@ (8002118 <HAL_RCC_ClockConfig+0x240>)
 8001f08:	683b      	ldr	r3, [r7, #0]
 8001f0a:	4313      	orrs	r3, r2
 8001f0c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f0e:	4b82      	ldr	r3, [pc, #520]	@ (8002118 <HAL_RCC_ClockConfig+0x240>)
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	f003 0307 	and.w	r3, r3, #7
 8001f16:	683a      	ldr	r2, [r7, #0]
 8001f18:	429a      	cmp	r2, r3
 8001f1a:	d001      	beq.n	8001f20 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001f1c:	2301      	movs	r3, #1
 8001f1e:	e13c      	b.n	800219a <HAL_RCC_ClockConfig+0x2c2>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	f003 0302 	and.w	r3, r3, #2
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d008      	beq.n	8001f3e <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001f2c:	4b7b      	ldr	r3, [pc, #492]	@ (800211c <HAL_RCC_ClockConfig+0x244>)
 8001f2e:	685b      	ldr	r3, [r3, #4]
 8001f30:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	689b      	ldr	r3, [r3, #8]
 8001f38:	4978      	ldr	r1, [pc, #480]	@ (800211c <HAL_RCC_ClockConfig+0x244>)
 8001f3a:	4313      	orrs	r3, r2
 8001f3c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	f003 0301 	and.w	r3, r3, #1
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	f000 80cd 	beq.w	80020e6 <HAL_RCC_ClockConfig+0x20e>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	685b      	ldr	r3, [r3, #4]
 8001f50:	2b01      	cmp	r3, #1
 8001f52:	d137      	bne.n	8001fc4 <HAL_RCC_ClockConfig+0xec>
 8001f54:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001f58:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f5a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001f5c:	fa93 f3a3 	rbit	r3, r3
 8001f60:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 8001f62:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f64:	fab3 f383 	clz	r3, r3
 8001f68:	b2db      	uxtb	r3, r3
 8001f6a:	2b3f      	cmp	r3, #63	@ 0x3f
 8001f6c:	d802      	bhi.n	8001f74 <HAL_RCC_ClockConfig+0x9c>
 8001f6e:	4b6b      	ldr	r3, [pc, #428]	@ (800211c <HAL_RCC_ClockConfig+0x244>)
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	e00f      	b.n	8001f94 <HAL_RCC_ClockConfig+0xbc>
 8001f74:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001f78:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f7a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001f7c:	fa93 f3a3 	rbit	r3, r3
 8001f80:	667b      	str	r3, [r7, #100]	@ 0x64
 8001f82:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001f86:	663b      	str	r3, [r7, #96]	@ 0x60
 8001f88:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8001f8a:	fa93 f3a3 	rbit	r3, r3
 8001f8e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8001f90:	4b62      	ldr	r3, [pc, #392]	@ (800211c <HAL_RCC_ClockConfig+0x244>)
 8001f92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f94:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001f98:	65ba      	str	r2, [r7, #88]	@ 0x58
 8001f9a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8001f9c:	fa92 f2a2 	rbit	r2, r2
 8001fa0:	657a      	str	r2, [r7, #84]	@ 0x54
  return result;
 8001fa2:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8001fa4:	fab2 f282 	clz	r2, r2
 8001fa8:	b2d2      	uxtb	r2, r2
 8001faa:	f042 0220 	orr.w	r2, r2, #32
 8001fae:	b2d2      	uxtb	r2, r2
 8001fb0:	f002 021f 	and.w	r2, r2, #31
 8001fb4:	2101      	movs	r1, #1
 8001fb6:	fa01 f202 	lsl.w	r2, r1, r2
 8001fba:	4013      	ands	r3, r2
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d171      	bne.n	80020a4 <HAL_RCC_ClockConfig+0x1cc>
      {
        return HAL_ERROR;
 8001fc0:	2301      	movs	r3, #1
 8001fc2:	e0ea      	b.n	800219a <HAL_RCC_ClockConfig+0x2c2>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	685b      	ldr	r3, [r3, #4]
 8001fc8:	2b02      	cmp	r3, #2
 8001fca:	d137      	bne.n	800203c <HAL_RCC_ClockConfig+0x164>
 8001fcc:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001fd0:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fd2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001fd4:	fa93 f3a3 	rbit	r3, r3
 8001fd8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8001fda:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001fdc:	fab3 f383 	clz	r3, r3
 8001fe0:	b2db      	uxtb	r3, r3
 8001fe2:	2b3f      	cmp	r3, #63	@ 0x3f
 8001fe4:	d802      	bhi.n	8001fec <HAL_RCC_ClockConfig+0x114>
 8001fe6:	4b4d      	ldr	r3, [pc, #308]	@ (800211c <HAL_RCC_ClockConfig+0x244>)
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	e00f      	b.n	800200c <HAL_RCC_ClockConfig+0x134>
 8001fec:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001ff0:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ff2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001ff4:	fa93 f3a3 	rbit	r3, r3
 8001ff8:	647b      	str	r3, [r7, #68]	@ 0x44
 8001ffa:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001ffe:	643b      	str	r3, [r7, #64]	@ 0x40
 8002000:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002002:	fa93 f3a3 	rbit	r3, r3
 8002006:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002008:	4b44      	ldr	r3, [pc, #272]	@ (800211c <HAL_RCC_ClockConfig+0x244>)
 800200a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800200c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002010:	63ba      	str	r2, [r7, #56]	@ 0x38
 8002012:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8002014:	fa92 f2a2 	rbit	r2, r2
 8002018:	637a      	str	r2, [r7, #52]	@ 0x34
  return result;
 800201a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800201c:	fab2 f282 	clz	r2, r2
 8002020:	b2d2      	uxtb	r2, r2
 8002022:	f042 0220 	orr.w	r2, r2, #32
 8002026:	b2d2      	uxtb	r2, r2
 8002028:	f002 021f 	and.w	r2, r2, #31
 800202c:	2101      	movs	r1, #1
 800202e:	fa01 f202 	lsl.w	r2, r1, r2
 8002032:	4013      	ands	r3, r2
 8002034:	2b00      	cmp	r3, #0
 8002036:	d135      	bne.n	80020a4 <HAL_RCC_ClockConfig+0x1cc>
      {
        return HAL_ERROR;
 8002038:	2301      	movs	r3, #1
 800203a:	e0ae      	b.n	800219a <HAL_RCC_ClockConfig+0x2c2>
 800203c:	2302      	movs	r3, #2
 800203e:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002040:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002042:	fa93 f3a3 	rbit	r3, r3
 8002046:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8002048:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800204a:	fab3 f383 	clz	r3, r3
 800204e:	b2db      	uxtb	r3, r3
 8002050:	2b3f      	cmp	r3, #63	@ 0x3f
 8002052:	d802      	bhi.n	800205a <HAL_RCC_ClockConfig+0x182>
 8002054:	4b31      	ldr	r3, [pc, #196]	@ (800211c <HAL_RCC_ClockConfig+0x244>)
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	e00d      	b.n	8002076 <HAL_RCC_ClockConfig+0x19e>
 800205a:	2302      	movs	r3, #2
 800205c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800205e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002060:	fa93 f3a3 	rbit	r3, r3
 8002064:	627b      	str	r3, [r7, #36]	@ 0x24
 8002066:	2302      	movs	r3, #2
 8002068:	623b      	str	r3, [r7, #32]
 800206a:	6a3b      	ldr	r3, [r7, #32]
 800206c:	fa93 f3a3 	rbit	r3, r3
 8002070:	61fb      	str	r3, [r7, #28]
 8002072:	4b2a      	ldr	r3, [pc, #168]	@ (800211c <HAL_RCC_ClockConfig+0x244>)
 8002074:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002076:	2202      	movs	r2, #2
 8002078:	61ba      	str	r2, [r7, #24]
 800207a:	69ba      	ldr	r2, [r7, #24]
 800207c:	fa92 f2a2 	rbit	r2, r2
 8002080:	617a      	str	r2, [r7, #20]
  return result;
 8002082:	697a      	ldr	r2, [r7, #20]
 8002084:	fab2 f282 	clz	r2, r2
 8002088:	b2d2      	uxtb	r2, r2
 800208a:	f042 0220 	orr.w	r2, r2, #32
 800208e:	b2d2      	uxtb	r2, r2
 8002090:	f002 021f 	and.w	r2, r2, #31
 8002094:	2101      	movs	r1, #1
 8002096:	fa01 f202 	lsl.w	r2, r1, r2
 800209a:	4013      	ands	r3, r2
 800209c:	2b00      	cmp	r3, #0
 800209e:	d101      	bne.n	80020a4 <HAL_RCC_ClockConfig+0x1cc>
      {
        return HAL_ERROR;
 80020a0:	2301      	movs	r3, #1
 80020a2:	e07a      	b.n	800219a <HAL_RCC_ClockConfig+0x2c2>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80020a4:	4b1d      	ldr	r3, [pc, #116]	@ (800211c <HAL_RCC_ClockConfig+0x244>)
 80020a6:	685b      	ldr	r3, [r3, #4]
 80020a8:	f023 0203 	bic.w	r2, r3, #3
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	685b      	ldr	r3, [r3, #4]
 80020b0:	491a      	ldr	r1, [pc, #104]	@ (800211c <HAL_RCC_ClockConfig+0x244>)
 80020b2:	4313      	orrs	r3, r2
 80020b4:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80020b6:	f7fe fc7d 	bl	80009b4 <HAL_GetTick>
 80020ba:	6778      	str	r0, [r7, #116]	@ 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020bc:	e00a      	b.n	80020d4 <HAL_RCC_ClockConfig+0x1fc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80020be:	f7fe fc79 	bl	80009b4 <HAL_GetTick>
 80020c2:	4602      	mov	r2, r0
 80020c4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80020c6:	1ad3      	subs	r3, r2, r3
 80020c8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80020cc:	4293      	cmp	r3, r2
 80020ce:	d901      	bls.n	80020d4 <HAL_RCC_ClockConfig+0x1fc>
      {
        return HAL_TIMEOUT;
 80020d0:	2303      	movs	r3, #3
 80020d2:	e062      	b.n	800219a <HAL_RCC_ClockConfig+0x2c2>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020d4:	4b11      	ldr	r3, [pc, #68]	@ (800211c <HAL_RCC_ClockConfig+0x244>)
 80020d6:	685b      	ldr	r3, [r3, #4]
 80020d8:	f003 020c 	and.w	r2, r3, #12
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	685b      	ldr	r3, [r3, #4]
 80020e0:	009b      	lsls	r3, r3, #2
 80020e2:	429a      	cmp	r2, r3
 80020e4:	d1eb      	bne.n	80020be <HAL_RCC_ClockConfig+0x1e6>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80020e6:	4b0c      	ldr	r3, [pc, #48]	@ (8002118 <HAL_RCC_ClockConfig+0x240>)
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	f003 0307 	and.w	r3, r3, #7
 80020ee:	683a      	ldr	r2, [r7, #0]
 80020f0:	429a      	cmp	r2, r3
 80020f2:	d215      	bcs.n	8002120 <HAL_RCC_ClockConfig+0x248>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80020f4:	4b08      	ldr	r3, [pc, #32]	@ (8002118 <HAL_RCC_ClockConfig+0x240>)
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	f023 0207 	bic.w	r2, r3, #7
 80020fc:	4906      	ldr	r1, [pc, #24]	@ (8002118 <HAL_RCC_ClockConfig+0x240>)
 80020fe:	683b      	ldr	r3, [r7, #0]
 8002100:	4313      	orrs	r3, r2
 8002102:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002104:	4b04      	ldr	r3, [pc, #16]	@ (8002118 <HAL_RCC_ClockConfig+0x240>)
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	f003 0307 	and.w	r3, r3, #7
 800210c:	683a      	ldr	r2, [r7, #0]
 800210e:	429a      	cmp	r2, r3
 8002110:	d006      	beq.n	8002120 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8002112:	2301      	movs	r3, #1
 8002114:	e041      	b.n	800219a <HAL_RCC_ClockConfig+0x2c2>
 8002116:	bf00      	nop
 8002118:	40022000 	.word	0x40022000
 800211c:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	f003 0304 	and.w	r3, r3, #4
 8002128:	2b00      	cmp	r3, #0
 800212a:	d008      	beq.n	800213e <HAL_RCC_ClockConfig+0x266>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800212c:	4b1d      	ldr	r3, [pc, #116]	@ (80021a4 <HAL_RCC_ClockConfig+0x2cc>)
 800212e:	685b      	ldr	r3, [r3, #4]
 8002130:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	68db      	ldr	r3, [r3, #12]
 8002138:	491a      	ldr	r1, [pc, #104]	@ (80021a4 <HAL_RCC_ClockConfig+0x2cc>)
 800213a:	4313      	orrs	r3, r2
 800213c:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	f003 0308 	and.w	r3, r3, #8
 8002146:	2b00      	cmp	r3, #0
 8002148:	d009      	beq.n	800215e <HAL_RCC_ClockConfig+0x286>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800214a:	4b16      	ldr	r3, [pc, #88]	@ (80021a4 <HAL_RCC_ClockConfig+0x2cc>)
 800214c:	685b      	ldr	r3, [r3, #4]
 800214e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	691b      	ldr	r3, [r3, #16]
 8002156:	00db      	lsls	r3, r3, #3
 8002158:	4912      	ldr	r1, [pc, #72]	@ (80021a4 <HAL_RCC_ClockConfig+0x2cc>)
 800215a:	4313      	orrs	r3, r2
 800215c:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800215e:	f000 f829 	bl	80021b4 <HAL_RCC_GetSysClockFreq>
 8002162:	4601      	mov	r1, r0
 8002164:	4b0f      	ldr	r3, [pc, #60]	@ (80021a4 <HAL_RCC_ClockConfig+0x2cc>)
 8002166:	685b      	ldr	r3, [r3, #4]
 8002168:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800216c:	22f0      	movs	r2, #240	@ 0xf0
 800216e:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002170:	693a      	ldr	r2, [r7, #16]
 8002172:	fa92 f2a2 	rbit	r2, r2
 8002176:	60fa      	str	r2, [r7, #12]
  return result;
 8002178:	68fa      	ldr	r2, [r7, #12]
 800217a:	fab2 f282 	clz	r2, r2
 800217e:	b2d2      	uxtb	r2, r2
 8002180:	40d3      	lsrs	r3, r2
 8002182:	4a09      	ldr	r2, [pc, #36]	@ (80021a8 <HAL_RCC_ClockConfig+0x2d0>)
 8002184:	5cd3      	ldrb	r3, [r2, r3]
 8002186:	fa21 f303 	lsr.w	r3, r1, r3
 800218a:	4a08      	ldr	r2, [pc, #32]	@ (80021ac <HAL_RCC_ClockConfig+0x2d4>)
 800218c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 800218e:	4b08      	ldr	r3, [pc, #32]	@ (80021b0 <HAL_RCC_ClockConfig+0x2d8>)
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	4618      	mov	r0, r3
 8002194:	f7fe fbca 	bl	800092c <HAL_InitTick>
  
  return HAL_OK;
 8002198:	2300      	movs	r3, #0
}
 800219a:	4618      	mov	r0, r3
 800219c:	3778      	adds	r7, #120	@ 0x78
 800219e:	46bd      	mov	sp, r7
 80021a0:	bd80      	pop	{r7, pc}
 80021a2:	bf00      	nop
 80021a4:	40021000 	.word	0x40021000
 80021a8:	08002474 	.word	0x08002474
 80021ac:	20000040 	.word	0x20000040
 80021b0:	20000044 	.word	0x20000044

080021b4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80021b4:	b480      	push	{r7}
 80021b6:	b087      	sub	sp, #28
 80021b8:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80021ba:	2300      	movs	r3, #0
 80021bc:	60fb      	str	r3, [r7, #12]
 80021be:	2300      	movs	r3, #0
 80021c0:	60bb      	str	r3, [r7, #8]
 80021c2:	2300      	movs	r3, #0
 80021c4:	617b      	str	r3, [r7, #20]
 80021c6:	2300      	movs	r3, #0
 80021c8:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80021ca:	2300      	movs	r3, #0
 80021cc:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 80021ce:	4b1e      	ldr	r3, [pc, #120]	@ (8002248 <HAL_RCC_GetSysClockFreq+0x94>)
 80021d0:	685b      	ldr	r3, [r3, #4]
 80021d2:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	f003 030c 	and.w	r3, r3, #12
 80021da:	2b04      	cmp	r3, #4
 80021dc:	d002      	beq.n	80021e4 <HAL_RCC_GetSysClockFreq+0x30>
 80021de:	2b08      	cmp	r3, #8
 80021e0:	d003      	beq.n	80021ea <HAL_RCC_GetSysClockFreq+0x36>
 80021e2:	e026      	b.n	8002232 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80021e4:	4b19      	ldr	r3, [pc, #100]	@ (800224c <HAL_RCC_GetSysClockFreq+0x98>)
 80021e6:	613b      	str	r3, [r7, #16]
      break;
 80021e8:	e026      	b.n	8002238 <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	0c9b      	lsrs	r3, r3, #18
 80021ee:	f003 030f 	and.w	r3, r3, #15
 80021f2:	4a17      	ldr	r2, [pc, #92]	@ (8002250 <HAL_RCC_GetSysClockFreq+0x9c>)
 80021f4:	5cd3      	ldrb	r3, [r2, r3]
 80021f6:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_Pos];
 80021f8:	4b13      	ldr	r3, [pc, #76]	@ (8002248 <HAL_RCC_GetSysClockFreq+0x94>)
 80021fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80021fc:	f003 030f 	and.w	r3, r3, #15
 8002200:	4a14      	ldr	r2, [pc, #80]	@ (8002254 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002202:	5cd3      	ldrb	r3, [r2, r3]
 8002204:	60bb      	str	r3, [r7, #8]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800220c:	2b00      	cmp	r3, #0
 800220e:	d008      	beq.n	8002222 <HAL_RCC_GetSysClockFreq+0x6e>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002210:	4a0e      	ldr	r2, [pc, #56]	@ (800224c <HAL_RCC_GetSysClockFreq+0x98>)
 8002212:	68bb      	ldr	r3, [r7, #8]
 8002214:	fbb2 f2f3 	udiv	r2, r2, r3
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	fb02 f303 	mul.w	r3, r2, r3
 800221e:	617b      	str	r3, [r7, #20]
 8002220:	e004      	b.n	800222c <HAL_RCC_GetSysClockFreq+0x78>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	4a0c      	ldr	r2, [pc, #48]	@ (8002258 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002226:	fb02 f303 	mul.w	r3, r2, r3
 800222a:	617b      	str	r3, [r7, #20]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 800222c:	697b      	ldr	r3, [r7, #20]
 800222e:	613b      	str	r3, [r7, #16]
      break;
 8002230:	e002      	b.n	8002238 <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002232:	4b06      	ldr	r3, [pc, #24]	@ (800224c <HAL_RCC_GetSysClockFreq+0x98>)
 8002234:	613b      	str	r3, [r7, #16]
      break;
 8002236:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002238:	693b      	ldr	r3, [r7, #16]
}
 800223a:	4618      	mov	r0, r3
 800223c:	371c      	adds	r7, #28
 800223e:	46bd      	mov	sp, r7
 8002240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002244:	4770      	bx	lr
 8002246:	bf00      	nop
 8002248:	40021000 	.word	0x40021000
 800224c:	007a1200 	.word	0x007a1200
 8002250:	0800248c 	.word	0x0800248c
 8002254:	0800249c 	.word	0x0800249c
 8002258:	003d0900 	.word	0x003d0900

0800225c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800225c:	b480      	push	{r7}
 800225e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002260:	4b03      	ldr	r3, [pc, #12]	@ (8002270 <HAL_RCC_GetHCLKFreq+0x14>)
 8002262:	681b      	ldr	r3, [r3, #0]
}
 8002264:	4618      	mov	r0, r3
 8002266:	46bd      	mov	sp, r7
 8002268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800226c:	4770      	bx	lr
 800226e:	bf00      	nop
 8002270:	20000040 	.word	0x20000040

08002274 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002274:	b580      	push	{r7, lr}
 8002276:	b082      	sub	sp, #8
 8002278:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 800227a:	f7ff ffef 	bl	800225c <HAL_RCC_GetHCLKFreq>
 800227e:	4601      	mov	r1, r0
 8002280:	4b0b      	ldr	r3, [pc, #44]	@ (80022b0 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8002282:	685b      	ldr	r3, [r3, #4]
 8002284:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8002288:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 800228c:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800228e:	687a      	ldr	r2, [r7, #4]
 8002290:	fa92 f2a2 	rbit	r2, r2
 8002294:	603a      	str	r2, [r7, #0]
  return result;
 8002296:	683a      	ldr	r2, [r7, #0]
 8002298:	fab2 f282 	clz	r2, r2
 800229c:	b2d2      	uxtb	r2, r2
 800229e:	40d3      	lsrs	r3, r2
 80022a0:	4a04      	ldr	r2, [pc, #16]	@ (80022b4 <HAL_RCC_GetPCLK1Freq+0x40>)
 80022a2:	5cd3      	ldrb	r3, [r2, r3]
 80022a4:	fa21 f303 	lsr.w	r3, r1, r3
}    
 80022a8:	4618      	mov	r0, r3
 80022aa:	3708      	adds	r7, #8
 80022ac:	46bd      	mov	sp, r7
 80022ae:	bd80      	pop	{r7, pc}
 80022b0:	40021000 	.word	0x40021000
 80022b4:	08002484 	.word	0x08002484

080022b8 <HAL_TSC_Init>:
  *         in the TSC_InitTypeDef structure and initialize the associated handle.
  * @param  htsc TSC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TSC_Init(TSC_HandleTypeDef *htsc)
{
 80022b8:	b590      	push	{r4, r7, lr}
 80022ba:	b083      	sub	sp, #12
 80022bc:	af00      	add	r7, sp, #0
 80022be:	6078      	str	r0, [r7, #4]
  /* Check TSC handle allocation */
  if (htsc == NULL)
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d101      	bne.n	80022ca <HAL_TSC_Init+0x12>
  {
    return HAL_ERROR;
 80022c6:	2301      	movs	r3, #1
 80022c8:	e072      	b.n	80023b0 <HAL_TSC_Init+0xf8>
  assert_param(IS_TSC_MCE_IT(htsc->Init.MaxCountInterrupt));
  assert_param(IS_TSC_GROUP(htsc->Init.ChannelIOs));
  assert_param(IS_TSC_GROUP(htsc->Init.ShieldIOs));
  assert_param(IS_TSC_GROUP(htsc->Init.SamplingIOs));

  if (htsc->State == HAL_TSC_STATE_RESET)
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80022d0:	b2db      	uxtb	r3, r3
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d106      	bne.n	80022e4 <HAL_TSC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htsc->Lock = HAL_UNLOCKED;
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	2200      	movs	r2, #0
 80022da:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    htsc->MspInitCallback(htsc);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX */
    HAL_TSC_MspInit(htsc);
 80022de:	6878      	ldr	r0, [r7, #4]
 80022e0:	f7fe f95e 	bl	80005a0 <HAL_TSC_MspInit>
#endif /* USE_HAL_TSC_REGISTER_CALLBACKS */
  }

  /* Initialize the TSC state */
  htsc->State = HAL_TSC_STATE_BUSY;
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	2202      	movs	r2, #2
 80022e8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /*--------------------------------------------------------------------------*/
  /* Set TSC parameters */

  /* Enable TSC */
  htsc->Instance->CR = TSC_CR_TSCE;
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	2201      	movs	r2, #1
 80022f2:	601a      	str	r2, [r3, #0]

  /* Set all functions */
  htsc->Instance->CR |= (htsc->Init.CTPulseHighLength |
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	6819      	ldr	r1, [r3, #0]
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	685a      	ldr	r2, [r3, #4]
                         htsc->Init.CTPulseLowLength |
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	689b      	ldr	r3, [r3, #8]
  htsc->Instance->CR |= (htsc->Init.CTPulseHighLength |
 8002302:	431a      	orrs	r2, r3
                         (htsc->Init.SpreadSpectrumDeviation << TSC_CR_SSD_Pos) |
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	691b      	ldr	r3, [r3, #16]
 8002308:	045b      	lsls	r3, r3, #17
                         htsc->Init.CTPulseLowLength |
 800230a:	431a      	orrs	r2, r3
                         htsc->Init.SpreadSpectrumPrescaler |
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	695b      	ldr	r3, [r3, #20]
                         (htsc->Init.SpreadSpectrumDeviation << TSC_CR_SSD_Pos) |
 8002310:	431a      	orrs	r2, r3
                         htsc->Init.PulseGeneratorPrescaler |
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	699b      	ldr	r3, [r3, #24]
                         htsc->Init.SpreadSpectrumPrescaler |
 8002316:	431a      	orrs	r2, r3
                         htsc->Init.MaxCountValue |
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	69db      	ldr	r3, [r3, #28]
                         htsc->Init.PulseGeneratorPrescaler |
 800231c:	431a      	orrs	r2, r3
                         htsc->Init.SynchroPinPolarity |
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                         htsc->Init.MaxCountValue |
 8002322:	431a      	orrs	r2, r3
                         htsc->Init.AcquisitionMode);
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
                         htsc->Init.SynchroPinPolarity |
 8002328:	431a      	orrs	r2, r3
  htsc->Instance->CR |= (htsc->Init.CTPulseHighLength |
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	430a      	orrs	r2, r1
 8002330:	601a      	str	r2, [r3, #0]

  /* Spread spectrum */
  if (htsc->Init.SpreadSpectrum == ENABLE)
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	7b1b      	ldrb	r3, [r3, #12]
 8002336:	2b01      	cmp	r3, #1
 8002338:	d107      	bne.n	800234a <HAL_TSC_Init+0x92>
  {
    htsc->Instance->CR |= TSC_CR_SSE;
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	681a      	ldr	r2, [r3, #0]
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8002348:	601a      	str	r2, [r3, #0]
  }

  /* Disable Schmitt trigger hysteresis on all used TSC IOs */
  htsc->Instance->IOHCR = (~(htsc->Init.ChannelIOs | htsc->Init.ShieldIOs | htsc->Init.SamplingIOs));
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002352:	431a      	orrs	r2, r3
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002358:	431a      	orrs	r2, r3
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	43d2      	mvns	r2, r2
 8002360:	611a      	str	r2, [r3, #16]

  /* Set channel and shield IOs */
  htsc->Instance->IOCCR = (htsc->Init.ChannelIOs | htsc->Init.ShieldIOs);
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	430a      	orrs	r2, r1
 8002370:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set sampling IOs */
  htsc->Instance->IOSCR = htsc->Init.SamplingIOs;
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	687a      	ldr	r2, [r7, #4]
 8002378:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800237a:	621a      	str	r2, [r3, #32]

  /* Set the groups to be acquired */
  htsc->Instance->IOGCSR = TSC_extract_groups(htsc->Init.ChannelIOs);
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681c      	ldr	r4, [r3, #0]
 8002384:	4610      	mov	r0, r2
 8002386:	f000 f817 	bl	80023b8 <TSC_extract_groups>
 800238a:	4603      	mov	r3, r0
 800238c:	6323      	str	r3, [r4, #48]	@ 0x30

  /* Disable interrupts */
  htsc->Instance->IER &= (~(TSC_IT_EOA | TSC_IT_MCE));
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	685a      	ldr	r2, [r3, #4]
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	f022 0203 	bic.w	r2, r2, #3
 800239c:	605a      	str	r2, [r3, #4]

  /* Clear flags */
  htsc->Instance->ICR = (TSC_FLAG_EOA | TSC_FLAG_MCE);
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	2203      	movs	r2, #3
 80023a4:	609a      	str	r2, [r3, #8]

  /*--------------------------------------------------------------------------*/

  /* Initialize the TSC state */
  htsc->State = HAL_TSC_STATE_READY;
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	2201      	movs	r2, #1
 80023aa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 80023ae:	2300      	movs	r3, #0
}
 80023b0:	4618      	mov	r0, r3
 80023b2:	370c      	adds	r7, #12
 80023b4:	46bd      	mov	sp, r7
 80023b6:	bd90      	pop	{r4, r7, pc}

080023b8 <TSC_extract_groups>:
  * @brief  Utility function used to set the acquired groups mask.
  * @param  iomask Channels IOs mask
  * @retval Acquired groups mask
  */
static uint32_t TSC_extract_groups(uint32_t iomask)
{
 80023b8:	b480      	push	{r7}
 80023ba:	b085      	sub	sp, #20
 80023bc:	af00      	add	r7, sp, #0
 80023be:	6078      	str	r0, [r7, #4]
  uint32_t groups = 0UL;
 80023c0:	2300      	movs	r3, #0
 80023c2:	60fb      	str	r3, [r7, #12]
  uint32_t idx;

  for (idx = 0UL; idx < (uint32_t)TSC_NB_OF_GROUPS; idx++)
 80023c4:	2300      	movs	r3, #0
 80023c6:	60bb      	str	r3, [r7, #8]
 80023c8:	e011      	b.n	80023ee <TSC_extract_groups+0x36>
  {
    if ((iomask & (0x0FUL << (idx * 4UL))) != 0UL)
 80023ca:	68bb      	ldr	r3, [r7, #8]
 80023cc:	009b      	lsls	r3, r3, #2
 80023ce:	220f      	movs	r2, #15
 80023d0:	409a      	lsls	r2, r3
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	4013      	ands	r3, r2
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d006      	beq.n	80023e8 <TSC_extract_groups+0x30>
    {
      groups |= (1UL << idx);
 80023da:	2201      	movs	r2, #1
 80023dc:	68bb      	ldr	r3, [r7, #8]
 80023de:	fa02 f303 	lsl.w	r3, r2, r3
 80023e2:	68fa      	ldr	r2, [r7, #12]
 80023e4:	4313      	orrs	r3, r2
 80023e6:	60fb      	str	r3, [r7, #12]
  for (idx = 0UL; idx < (uint32_t)TSC_NB_OF_GROUPS; idx++)
 80023e8:	68bb      	ldr	r3, [r7, #8]
 80023ea:	3301      	adds	r3, #1
 80023ec:	60bb      	str	r3, [r7, #8]
 80023ee:	68bb      	ldr	r3, [r7, #8]
 80023f0:	2b07      	cmp	r3, #7
 80023f2:	d9ea      	bls.n	80023ca <TSC_extract_groups+0x12>
    }
  }

  return groups;
 80023f4:	68fb      	ldr	r3, [r7, #12]
}
 80023f6:	4618      	mov	r0, r3
 80023f8:	3714      	adds	r7, #20
 80023fa:	46bd      	mov	sp, r7
 80023fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002400:	4770      	bx	lr

08002402 <memset>:
 8002402:	4402      	add	r2, r0
 8002404:	4603      	mov	r3, r0
 8002406:	4293      	cmp	r3, r2
 8002408:	d100      	bne.n	800240c <memset+0xa>
 800240a:	4770      	bx	lr
 800240c:	f803 1b01 	strb.w	r1, [r3], #1
 8002410:	e7f9      	b.n	8002406 <memset+0x4>
	...

08002414 <__libc_init_array>:
 8002414:	b570      	push	{r4, r5, r6, lr}
 8002416:	4d0d      	ldr	r5, [pc, #52]	@ (800244c <__libc_init_array+0x38>)
 8002418:	4c0d      	ldr	r4, [pc, #52]	@ (8002450 <__libc_init_array+0x3c>)
 800241a:	1b64      	subs	r4, r4, r5
 800241c:	10a4      	asrs	r4, r4, #2
 800241e:	2600      	movs	r6, #0
 8002420:	42a6      	cmp	r6, r4
 8002422:	d109      	bne.n	8002438 <__libc_init_array+0x24>
 8002424:	4d0b      	ldr	r5, [pc, #44]	@ (8002454 <__libc_init_array+0x40>)
 8002426:	4c0c      	ldr	r4, [pc, #48]	@ (8002458 <__libc_init_array+0x44>)
 8002428:	f000 f818 	bl	800245c <_init>
 800242c:	1b64      	subs	r4, r4, r5
 800242e:	10a4      	asrs	r4, r4, #2
 8002430:	2600      	movs	r6, #0
 8002432:	42a6      	cmp	r6, r4
 8002434:	d105      	bne.n	8002442 <__libc_init_array+0x2e>
 8002436:	bd70      	pop	{r4, r5, r6, pc}
 8002438:	f855 3b04 	ldr.w	r3, [r5], #4
 800243c:	4798      	blx	r3
 800243e:	3601      	adds	r6, #1
 8002440:	e7ee      	b.n	8002420 <__libc_init_array+0xc>
 8002442:	f855 3b04 	ldr.w	r3, [r5], #4
 8002446:	4798      	blx	r3
 8002448:	3601      	adds	r6, #1
 800244a:	e7f2      	b.n	8002432 <__libc_init_array+0x1e>
 800244c:	080024ac 	.word	0x080024ac
 8002450:	080024ac 	.word	0x080024ac
 8002454:	080024ac 	.word	0x080024ac
 8002458:	080024b0 	.word	0x080024b0

0800245c <_init>:
 800245c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800245e:	bf00      	nop
 8002460:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002462:	bc08      	pop	{r3}
 8002464:	469e      	mov	lr, r3
 8002466:	4770      	bx	lr

08002468 <_fini>:
 8002468:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800246a:	bf00      	nop
 800246c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800246e:	bc08      	pop	{r3}
 8002470:	469e      	mov	lr, r3
 8002472:	4770      	bx	lr
