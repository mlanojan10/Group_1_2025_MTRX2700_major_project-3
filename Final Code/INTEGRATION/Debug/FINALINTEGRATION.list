
FINALINTEGRATION.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000036a8  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000b20  08003838  08003838  00004838  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004358  08004358  000060e0  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08004358  08004358  00005358  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004360  08004360  000060e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004360  08004360  00005360  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004364  08004364  00005364  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000000e0  20000000  08004368  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000060e0  2**0
                  CONTENTS
 10 .bss          00000290  200000e0  200000e0  000060e0  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000370  20000370  000060e0  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000060e0  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000a53c  00000000  00000000  00006110  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001a29  00000000  00000000  0001064c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000a38  00000000  00000000  00012078  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000007e2  00000000  00000000  00012ab0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0003242f  00000000  00000000  00013292  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000c56f  00000000  00000000  000456c1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c0cb3  00000000  00000000  00051c30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  001128e3  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003424  00000000  00000000  00112928  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000085  00000000  00000000  00115d4c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200000e0 	.word	0x200000e0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08003820 	.word	0x08003820

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200000e4 	.word	0x200000e4
 80001cc:	08003820 	.word	0x08003820

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr
	...

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <buzzer_on>:

    TIM2->CR1 |= TIM_CR1_ARPE;                // Auto-reload preload enable
    TIM2->EGR |= TIM_EGR_UG;                  // Force update
}

void buzzer_on(void) {
 8000290:	b480      	push	{r7}
 8000292:	af00      	add	r7, sp, #0
    TIM2->CR1 |= TIM_CR1_CEN; // Start timer
 8000294:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000298:	681b      	ldr	r3, [r3, #0]
 800029a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800029e:	f043 0301 	orr.w	r3, r3, #1
 80002a2:	6013      	str	r3, [r2, #0]
}
 80002a4:	bf00      	nop
 80002a6:	46bd      	mov	sp, r7
 80002a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002ac:	4770      	bx	lr

080002ae <buzzer_off>:

void buzzer_off(void) {
 80002ae:	b480      	push	{r7}
 80002b0:	af00      	add	r7, sp, #0
    TIM2->CR1 &= ~TIM_CR1_CEN; // Stop timer
 80002b2:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80002b6:	681b      	ldr	r3, [r3, #0]
 80002b8:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80002bc:	f023 0301 	bic.w	r3, r3, #1
 80002c0:	6013      	str	r3, [r2, #0]
}
 80002c2:	bf00      	nop
 80002c4:	46bd      	mov	sp, r7
 80002c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002ca:	4770      	bx	lr

080002cc <buzzer_set_frequency>:
void buzzer_set_frequency(uint32_t freq_hz) {
 80002cc:	b480      	push	{r7}
 80002ce:	b087      	sub	sp, #28
 80002d0:	af00      	add	r7, sp, #0
 80002d2:	6078      	str	r0, [r7, #4]
    uint32_t timer_clk = 72000000; // 72 MHz APB1 timer clock
 80002d4:	4b14      	ldr	r3, [pc, #80]	@ (8000328 <buzzer_set_frequency+0x5c>)
 80002d6:	617b      	str	r3, [r7, #20]
    uint32_t prescaler = 71;
 80002d8:	2347      	movs	r3, #71	@ 0x47
 80002da:	613b      	str	r3, [r7, #16]
    uint32_t period = (timer_clk / (prescaler + 1)) / freq_hz - 1;
 80002dc:	693b      	ldr	r3, [r7, #16]
 80002de:	3301      	adds	r3, #1
 80002e0:	697a      	ldr	r2, [r7, #20]
 80002e2:	fbb2 f2f3 	udiv	r2, r2, r3
 80002e6:	687b      	ldr	r3, [r7, #4]
 80002e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80002ec:	3b01      	subs	r3, #1
 80002ee:	60fb      	str	r3, [r7, #12]

    TIM2->PSC = prescaler;
 80002f0:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80002f4:	693b      	ldr	r3, [r7, #16]
 80002f6:	6293      	str	r3, [r2, #40]	@ 0x28
    TIM2->ARR = period;
 80002f8:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80002fc:	68fb      	ldr	r3, [r7, #12]
 80002fe:	62d3      	str	r3, [r2, #44]	@ 0x2c
    TIM2->CCR1 = period / 2; // 50% duty
 8000300:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000304:	68fb      	ldr	r3, [r7, #12]
 8000306:	085b      	lsrs	r3, r3, #1
 8000308:	6353      	str	r3, [r2, #52]	@ 0x34
    TIM2->EGR |= TIM_EGR_UG; // Force update
 800030a:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800030e:	695b      	ldr	r3, [r3, #20]
 8000310:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000314:	f043 0301 	orr.w	r3, r3, #1
 8000318:	6153      	str	r3, [r2, #20]
}
 800031a:	bf00      	nop
 800031c:	371c      	adds	r7, #28
 800031e:	46bd      	mov	sp, r7
 8000320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000324:	4770      	bx	lr
 8000326:	bf00      	nop
 8000328:	044aa200 	.word	0x044aa200

0800032c <pirate_sound>:
	for (volatile int i = 0; i < 100000; i++);
	buzzer_set_frequency(3000);
	for (volatile int i = 0; i < 1000000; i++);
}

void pirate_sound(void) {
 800032c:	b580      	push	{r7, lr}
 800032e:	b0d6      	sub	sp, #344	@ 0x158
 8000330:	af00      	add	r7, sp, #0
    buzzer_on();
 8000332:	f7ff ffad 	bl	8000290 <buzzer_on>


    buzzer_set_frequency(2636); // E7
 8000336:	f640 204c 	movw	r0, #2636	@ 0xa4c
 800033a:	f7ff ffc7 	bl	80002cc <buzzer_set_frequency>
    for (volatile int i = 0; i < 80000; i++); // Quaver
 800033e:	2300      	movs	r3, #0
 8000340:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 8000344:	e004      	b.n	8000350 <pirate_sound+0x24>
 8000346:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 800034a:	3301      	adds	r3, #1
 800034c:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 8000350:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 8000354:	4acb      	ldr	r2, [pc, #812]	@ (8000684 <pirate_sound+0x358>)
 8000356:	4293      	cmp	r3, r2
 8000358:	ddf5      	ble.n	8000346 <pirate_sound+0x1a>

    buzzer_set_frequency(3136); // G7
 800035a:	f44f 6044 	mov.w	r0, #3136	@ 0xc40
 800035e:	f7ff ffb5 	bl	80002cc <buzzer_set_frequency>
    for (volatile int i = 0; i < 80000; i++); // Quaver
 8000362:	2300      	movs	r3, #0
 8000364:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 8000368:	e004      	b.n	8000374 <pirate_sound+0x48>
 800036a:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 800036e:	3301      	adds	r3, #1
 8000370:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 8000374:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 8000378:	4ac2      	ldr	r2, [pc, #776]	@ (8000684 <pirate_sound+0x358>)
 800037a:	4293      	cmp	r3, r2
 800037c:	ddf5      	ble.n	800036a <pirate_sound+0x3e>

    buzzer_set_frequency(3520); // A7
 800037e:	f44f 605c 	mov.w	r0, #3520	@ 0xdc0
 8000382:	f7ff ffa3 	bl	80002cc <buzzer_set_frequency>
    for (volatile int i = 0; i < 80000; i++); // Crotchet
 8000386:	2300      	movs	r3, #0
 8000388:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
 800038c:	e004      	b.n	8000398 <pirate_sound+0x6c>
 800038e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8000392:	3301      	adds	r3, #1
 8000394:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
 8000398:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800039c:	4ab9      	ldr	r2, [pc, #740]	@ (8000684 <pirate_sound+0x358>)
 800039e:	4293      	cmp	r3, r2
 80003a0:	ddf5      	ble.n	800038e <pirate_sound+0x62>
    buzzer_off();
 80003a2:	f7ff ff84 	bl	80002ae <buzzer_off>
    for (volatile int i = 0; i < 80000; i++);
 80003a6:	2300      	movs	r3, #0
 80003a8:	f8c7 3148 	str.w	r3, [r7, #328]	@ 0x148
 80003ac:	e004      	b.n	80003b8 <pirate_sound+0x8c>
 80003ae:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 80003b2:	3301      	adds	r3, #1
 80003b4:	f8c7 3148 	str.w	r3, [r7, #328]	@ 0x148
 80003b8:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 80003bc:	4ab1      	ldr	r2, [pc, #708]	@ (8000684 <pirate_sound+0x358>)
 80003be:	4293      	cmp	r3, r2
 80003c0:	ddf5      	ble.n	80003ae <pirate_sound+0x82>
    buzzer_on();
 80003c2:	f7ff ff65 	bl	8000290 <buzzer_on>

    buzzer_set_frequency(3520); // A7
 80003c6:	f44f 605c 	mov.w	r0, #3520	@ 0xdc0
 80003ca:	f7ff ff7f 	bl	80002cc <buzzer_set_frequency>
    for (volatile int i = 0; i < 80000; i++); // Crotchet
 80003ce:	2300      	movs	r3, #0
 80003d0:	f8c7 3144 	str.w	r3, [r7, #324]	@ 0x144
 80003d4:	e004      	b.n	80003e0 <pirate_sound+0xb4>
 80003d6:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 80003da:	3301      	adds	r3, #1
 80003dc:	f8c7 3144 	str.w	r3, [r7, #324]	@ 0x144
 80003e0:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 80003e4:	4aa7      	ldr	r2, [pc, #668]	@ (8000684 <pirate_sound+0x358>)
 80003e6:	4293      	cmp	r3, r2
 80003e8:	ddf5      	ble.n	80003d6 <pirate_sound+0xaa>
	buzzer_off();
 80003ea:	f7ff ff60 	bl	80002ae <buzzer_off>
	for (volatile int i = 0; i < 80000; i++);
 80003ee:	2300      	movs	r3, #0
 80003f0:	f8c7 3140 	str.w	r3, [r7, #320]	@ 0x140
 80003f4:	e004      	b.n	8000400 <pirate_sound+0xd4>
 80003f6:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 80003fa:	3301      	adds	r3, #1
 80003fc:	f8c7 3140 	str.w	r3, [r7, #320]	@ 0x140
 8000400:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 8000404:	4a9f      	ldr	r2, [pc, #636]	@ (8000684 <pirate_sound+0x358>)
 8000406:	4293      	cmp	r3, r2
 8000408:	ddf5      	ble.n	80003f6 <pirate_sound+0xca>
	buzzer_on();
 800040a:	f7ff ff41 	bl	8000290 <buzzer_on>


    buzzer_set_frequency(3520); // A7
 800040e:	f44f 605c 	mov.w	r0, #3520	@ 0xdc0
 8000412:	f7ff ff5b 	bl	80002cc <buzzer_set_frequency>
    for (volatile int i = 0; i < 80000; i++); // Quaver
 8000416:	2300      	movs	r3, #0
 8000418:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
 800041c:	e004      	b.n	8000428 <pirate_sound+0xfc>
 800041e:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 8000422:	3301      	adds	r3, #1
 8000424:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
 8000428:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 800042c:	4a95      	ldr	r2, [pc, #596]	@ (8000684 <pirate_sound+0x358>)
 800042e:	4293      	cmp	r3, r2
 8000430:	ddf5      	ble.n	800041e <pirate_sound+0xf2>

    buzzer_set_frequency(3951); // B7
 8000432:	f640 706f 	movw	r0, #3951	@ 0xf6f
 8000436:	f7ff ff49 	bl	80002cc <buzzer_set_frequency>
    for (volatile int i = 0; i < 80000; i++); // Quaver
 800043a:	2300      	movs	r3, #0
 800043c:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
 8000440:	e004      	b.n	800044c <pirate_sound+0x120>
 8000442:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8000446:	3301      	adds	r3, #1
 8000448:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
 800044c:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8000450:	4a8c      	ldr	r2, [pc, #560]	@ (8000684 <pirate_sound+0x358>)
 8000452:	4293      	cmp	r3, r2
 8000454:	ddf5      	ble.n	8000442 <pirate_sound+0x116>

    buzzer_set_frequency(4186); // C8
 8000456:	f241 005a 	movw	r0, #4186	@ 0x105a
 800045a:	f7ff ff37 	bl	80002cc <buzzer_set_frequency>
    for (volatile int i = 0; i < 80000; i++); // Crotchet
 800045e:	2300      	movs	r3, #0
 8000460:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
 8000464:	e004      	b.n	8000470 <pirate_sound+0x144>
 8000466:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800046a:	3301      	adds	r3, #1
 800046c:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
 8000470:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8000474:	4a83      	ldr	r2, [pc, #524]	@ (8000684 <pirate_sound+0x358>)
 8000476:	4293      	cmp	r3, r2
 8000478:	ddf5      	ble.n	8000466 <pirate_sound+0x13a>
	buzzer_off();
 800047a:	f7ff ff18 	bl	80002ae <buzzer_off>
	for (volatile int i = 0; i < 80000; i++);
 800047e:	2300      	movs	r3, #0
 8000480:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
 8000484:	e004      	b.n	8000490 <pirate_sound+0x164>
 8000486:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800048a:	3301      	adds	r3, #1
 800048c:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
 8000490:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8000494:	4a7b      	ldr	r2, [pc, #492]	@ (8000684 <pirate_sound+0x358>)
 8000496:	4293      	cmp	r3, r2
 8000498:	ddf5      	ble.n	8000486 <pirate_sound+0x15a>
	buzzer_on();
 800049a:	f7ff fef9 	bl	8000290 <buzzer_on>

    buzzer_set_frequency(4186); // C8
 800049e:	f241 005a 	movw	r0, #4186	@ 0x105a
 80004a2:	f7ff ff13 	bl	80002cc <buzzer_set_frequency>
    for (volatile int i = 0; i < 80000; i++); // Crotchet
 80004a6:	2300      	movs	r3, #0
 80004a8:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 80004ac:	e004      	b.n	80004b8 <pirate_sound+0x18c>
 80004ae:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80004b2:	3301      	adds	r3, #1
 80004b4:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 80004b8:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80004bc:	4a71      	ldr	r2, [pc, #452]	@ (8000684 <pirate_sound+0x358>)
 80004be:	4293      	cmp	r3, r2
 80004c0:	ddf5      	ble.n	80004ae <pirate_sound+0x182>
	buzzer_off();
 80004c2:	f7ff fef4 	bl	80002ae <buzzer_off>
	for (volatile int i = 0; i < 80000; i++);
 80004c6:	2300      	movs	r3, #0
 80004c8:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
 80004cc:	e004      	b.n	80004d8 <pirate_sound+0x1ac>
 80004ce:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80004d2:	3301      	adds	r3, #1
 80004d4:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
 80004d8:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80004dc:	4a69      	ldr	r2, [pc, #420]	@ (8000684 <pirate_sound+0x358>)
 80004de:	4293      	cmp	r3, r2
 80004e0:	ddf5      	ble.n	80004ce <pirate_sound+0x1a2>
	buzzer_on();
 80004e2:	f7ff fed5 	bl	8000290 <buzzer_on>

    buzzer_set_frequency(4186); // C8
 80004e6:	f241 005a 	movw	r0, #4186	@ 0x105a
 80004ea:	f7ff feef 	bl	80002cc <buzzer_set_frequency>
    for (volatile int i = 0; i < 80000; i++); // Quaver
 80004ee:	2300      	movs	r3, #0
 80004f0:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 80004f4:	e004      	b.n	8000500 <pirate_sound+0x1d4>
 80004f6:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 80004fa:	3301      	adds	r3, #1
 80004fc:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 8000500:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8000504:	4a5f      	ldr	r2, [pc, #380]	@ (8000684 <pirate_sound+0x358>)
 8000506:	4293      	cmp	r3, r2
 8000508:	ddf5      	ble.n	80004f6 <pirate_sound+0x1ca>

    buzzer_set_frequency(4698); // D8
 800050a:	f241 205a 	movw	r0, #4698	@ 0x125a
 800050e:	f7ff fedd 	bl	80002cc <buzzer_set_frequency>
    for (volatile int i = 0; i < 80000; i++); // Quaver
 8000512:	2300      	movs	r3, #0
 8000514:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 8000518:	e004      	b.n	8000524 <pirate_sound+0x1f8>
 800051a:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800051e:	3301      	adds	r3, #1
 8000520:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 8000524:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8000528:	4a56      	ldr	r2, [pc, #344]	@ (8000684 <pirate_sound+0x358>)
 800052a:	4293      	cmp	r3, r2
 800052c:	ddf5      	ble.n	800051a <pirate_sound+0x1ee>

    buzzer_set_frequency(3951); // B7
 800052e:	f640 706f 	movw	r0, #3951	@ 0xf6f
 8000532:	f7ff fecb 	bl	80002cc <buzzer_set_frequency>
    for (volatile int i = 0; i < 80000; i++); // Crotchet
 8000536:	2300      	movs	r3, #0
 8000538:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 800053c:	e004      	b.n	8000548 <pirate_sound+0x21c>
 800053e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8000542:	3301      	adds	r3, #1
 8000544:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 8000548:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800054c:	4a4d      	ldr	r2, [pc, #308]	@ (8000684 <pirate_sound+0x358>)
 800054e:	4293      	cmp	r3, r2
 8000550:	ddf5      	ble.n	800053e <pirate_sound+0x212>
	buzzer_off();
 8000552:	f7ff feac 	bl	80002ae <buzzer_off>
	for (volatile int i = 0; i < 80000; i++);
 8000556:	2300      	movs	r3, #0
 8000558:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
 800055c:	e004      	b.n	8000568 <pirate_sound+0x23c>
 800055e:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8000562:	3301      	adds	r3, #1
 8000564:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
 8000568:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 800056c:	4a45      	ldr	r2, [pc, #276]	@ (8000684 <pirate_sound+0x358>)
 800056e:	4293      	cmp	r3, r2
 8000570:	ddf5      	ble.n	800055e <pirate_sound+0x232>
	buzzer_on();
 8000572:	f7ff fe8d 	bl	8000290 <buzzer_on>

    buzzer_set_frequency(3951); // B7
 8000576:	f640 706f 	movw	r0, #3951	@ 0xf6f
 800057a:	f7ff fea7 	bl	80002cc <buzzer_set_frequency>
    for (volatile int i = 0; i < 80000; i++); // Crotchet
 800057e:	2300      	movs	r3, #0
 8000580:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
 8000584:	e004      	b.n	8000590 <pirate_sound+0x264>
 8000586:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800058a:	3301      	adds	r3, #1
 800058c:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
 8000590:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8000594:	4a3b      	ldr	r2, [pc, #236]	@ (8000684 <pirate_sound+0x358>)
 8000596:	4293      	cmp	r3, r2
 8000598:	ddf5      	ble.n	8000586 <pirate_sound+0x25a>
	buzzer_off();
 800059a:	f7ff fe88 	bl	80002ae <buzzer_off>
	for (volatile int i = 0; i < 80000; i++);
 800059e:	2300      	movs	r3, #0
 80005a0:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
 80005a4:	e004      	b.n	80005b0 <pirate_sound+0x284>
 80005a6:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 80005aa:	3301      	adds	r3, #1
 80005ac:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
 80005b0:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 80005b4:	4a33      	ldr	r2, [pc, #204]	@ (8000684 <pirate_sound+0x358>)
 80005b6:	4293      	cmp	r3, r2
 80005b8:	ddf5      	ble.n	80005a6 <pirate_sound+0x27a>
	buzzer_on();
 80005ba:	f7ff fe69 	bl	8000290 <buzzer_on>

    buzzer_set_frequency(3520); // A7
 80005be:	f44f 605c 	mov.w	r0, #3520	@ 0xdc0
 80005c2:	f7ff fe83 	bl	80002cc <buzzer_set_frequency>
    for (volatile int i = 0; i < 80000; i++); // Quaver
 80005c6:	2300      	movs	r3, #0
 80005c8:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 80005cc:	e004      	b.n	80005d8 <pirate_sound+0x2ac>
 80005ce:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80005d2:	3301      	adds	r3, #1
 80005d4:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 80005d8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80005dc:	4a29      	ldr	r2, [pc, #164]	@ (8000684 <pirate_sound+0x358>)
 80005de:	4293      	cmp	r3, r2
 80005e0:	ddf5      	ble.n	80005ce <pirate_sound+0x2a2>

    buzzer_set_frequency(3136); // G7
 80005e2:	f44f 6044 	mov.w	r0, #3136	@ 0xc40
 80005e6:	f7ff fe71 	bl	80002cc <buzzer_set_frequency>
    for (volatile int i = 0; i < 80000; i++); // Quaver
 80005ea:	2300      	movs	r3, #0
 80005ec:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 80005f0:	e004      	b.n	80005fc <pirate_sound+0x2d0>
 80005f2:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 80005f6:	3301      	adds	r3, #1
 80005f8:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 80005fc:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8000600:	4a20      	ldr	r2, [pc, #128]	@ (8000684 <pirate_sound+0x358>)
 8000602:	4293      	cmp	r3, r2
 8000604:	ddf5      	ble.n	80005f2 <pirate_sound+0x2c6>

    buzzer_set_frequency(3520); // A7
 8000606:	f44f 605c 	mov.w	r0, #3520	@ 0xdc0
 800060a:	f7ff fe5f 	bl	80002cc <buzzer_set_frequency>
    for (volatile int i = 0; i < 160000; i++); // Crotchet
 800060e:	2300      	movs	r3, #0
 8000610:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8000614:	e004      	b.n	8000620 <pirate_sound+0x2f4>
 8000616:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800061a:	3301      	adds	r3, #1
 800061c:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8000620:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8000624:	4a18      	ldr	r2, [pc, #96]	@ (8000688 <pirate_sound+0x35c>)
 8000626:	4293      	cmp	r3, r2
 8000628:	ddf5      	ble.n	8000616 <pirate_sound+0x2ea>
    buzzer_off();
 800062a:	f7ff fe40 	bl	80002ae <buzzer_off>
    for (volatile int i = 0; i < 480000; i++); // Crotchet
 800062e:	2300      	movs	r3, #0
 8000630:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8000634:	e004      	b.n	8000640 <pirate_sound+0x314>
 8000636:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800063a:	3301      	adds	r3, #1
 800063c:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8000640:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8000644:	4a11      	ldr	r2, [pc, #68]	@ (800068c <pirate_sound+0x360>)
 8000646:	4293      	cmp	r3, r2
 8000648:	ddf5      	ble.n	8000636 <pirate_sound+0x30a>




    buzzer_on();
 800064a:	f7ff fe21 	bl	8000290 <buzzer_on>


    buzzer_set_frequency(2636); // E7
 800064e:	f640 204c 	movw	r0, #2636	@ 0xa4c
 8000652:	f7ff fe3b 	bl	80002cc <buzzer_set_frequency>
    for (volatile int i = 0; i < 80000; i++); // Quaver
 8000656:	2300      	movs	r3, #0
 8000658:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800065c:	e004      	b.n	8000668 <pirate_sound+0x33c>
 800065e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8000662:	3301      	adds	r3, #1
 8000664:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8000668:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800066c:	4a05      	ldr	r2, [pc, #20]	@ (8000684 <pirate_sound+0x358>)
 800066e:	4293      	cmp	r3, r2
 8000670:	ddf5      	ble.n	800065e <pirate_sound+0x332>

    buzzer_set_frequency(3136); // G7
 8000672:	f44f 6044 	mov.w	r0, #3136	@ 0xc40
 8000676:	f7ff fe29 	bl	80002cc <buzzer_set_frequency>
    for (volatile int i = 0; i < 80000; i++); // Quaver
 800067a:	2300      	movs	r3, #0
 800067c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8000680:	e00b      	b.n	800069a <pirate_sound+0x36e>
 8000682:	bf00      	nop
 8000684:	0001387f 	.word	0x0001387f
 8000688:	000270ff 	.word	0x000270ff
 800068c:	000752ff 	.word	0x000752ff
 8000690:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8000694:	3301      	adds	r3, #1
 8000696:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800069a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800069e:	4acb      	ldr	r2, [pc, #812]	@ (80009cc <pirate_sound+0x6a0>)
 80006a0:	4293      	cmp	r3, r2
 80006a2:	ddf5      	ble.n	8000690 <pirate_sound+0x364>

    buzzer_set_frequency(3520); // A7
 80006a4:	f44f 605c 	mov.w	r0, #3520	@ 0xdc0
 80006a8:	f7ff fe10 	bl	80002cc <buzzer_set_frequency>
    for (volatile int i = 0; i < 80000; i++); // Crotchet
 80006ac:	2300      	movs	r3, #0
 80006ae:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80006b2:	e004      	b.n	80006be <pirate_sound+0x392>
 80006b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80006b8:	3301      	adds	r3, #1
 80006ba:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80006be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80006c2:	4ac2      	ldr	r2, [pc, #776]	@ (80009cc <pirate_sound+0x6a0>)
 80006c4:	4293      	cmp	r3, r2
 80006c6:	ddf5      	ble.n	80006b4 <pirate_sound+0x388>
    buzzer_off();
 80006c8:	f7ff fdf1 	bl	80002ae <buzzer_off>
    for (volatile int i = 0; i < 80000; i++);
 80006cc:	2300      	movs	r3, #0
 80006ce:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 80006d2:	e004      	b.n	80006de <pirate_sound+0x3b2>
 80006d4:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 80006d8:	3301      	adds	r3, #1
 80006da:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 80006de:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 80006e2:	4aba      	ldr	r2, [pc, #744]	@ (80009cc <pirate_sound+0x6a0>)
 80006e4:	4293      	cmp	r3, r2
 80006e6:	ddf5      	ble.n	80006d4 <pirate_sound+0x3a8>
    buzzer_on();
 80006e8:	f7ff fdd2 	bl	8000290 <buzzer_on>

    buzzer_set_frequency(3520); // A7
 80006ec:	f44f 605c 	mov.w	r0, #3520	@ 0xdc0
 80006f0:	f7ff fdec 	bl	80002cc <buzzer_set_frequency>
    for (volatile int i = 0; i < 80000; i++); // Crotchet
 80006f4:	2300      	movs	r3, #0
 80006f6:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 80006fa:	e004      	b.n	8000706 <pirate_sound+0x3da>
 80006fc:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8000700:	3301      	adds	r3, #1
 8000702:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8000706:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800070a:	4ab0      	ldr	r2, [pc, #704]	@ (80009cc <pirate_sound+0x6a0>)
 800070c:	4293      	cmp	r3, r2
 800070e:	ddf5      	ble.n	80006fc <pirate_sound+0x3d0>
	buzzer_off();
 8000710:	f7ff fdcd 	bl	80002ae <buzzer_off>
	for (volatile int i = 0; i < 80000; i++);
 8000714:	2300      	movs	r3, #0
 8000716:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800071a:	e004      	b.n	8000726 <pirate_sound+0x3fa>
 800071c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8000720:	3301      	adds	r3, #1
 8000722:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8000726:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800072a:	4aa8      	ldr	r2, [pc, #672]	@ (80009cc <pirate_sound+0x6a0>)
 800072c:	4293      	cmp	r3, r2
 800072e:	ddf5      	ble.n	800071c <pirate_sound+0x3f0>
	buzzer_on();
 8000730:	f7ff fdae 	bl	8000290 <buzzer_on>


    buzzer_set_frequency(3520); // A7
 8000734:	f44f 605c 	mov.w	r0, #3520	@ 0xdc0
 8000738:	f7ff fdc8 	bl	80002cc <buzzer_set_frequency>
    for (volatile int i = 0; i < 80000; i++); // Quaver
 800073c:	2300      	movs	r3, #0
 800073e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8000742:	e004      	b.n	800074e <pirate_sound+0x422>
 8000744:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8000748:	3301      	adds	r3, #1
 800074a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800074e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8000752:	4a9e      	ldr	r2, [pc, #632]	@ (80009cc <pirate_sound+0x6a0>)
 8000754:	4293      	cmp	r3, r2
 8000756:	ddf5      	ble.n	8000744 <pirate_sound+0x418>

    buzzer_set_frequency(3951); // B7
 8000758:	f640 706f 	movw	r0, #3951	@ 0xf6f
 800075c:	f7ff fdb6 	bl	80002cc <buzzer_set_frequency>
    for (volatile int i = 0; i < 80000; i++); // Quaver
 8000760:	2300      	movs	r3, #0
 8000762:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8000766:	e004      	b.n	8000772 <pirate_sound+0x446>
 8000768:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800076c:	3301      	adds	r3, #1
 800076e:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8000772:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8000776:	4a95      	ldr	r2, [pc, #596]	@ (80009cc <pirate_sound+0x6a0>)
 8000778:	4293      	cmp	r3, r2
 800077a:	ddf5      	ble.n	8000768 <pirate_sound+0x43c>

    buzzer_set_frequency(4186); // C8
 800077c:	f241 005a 	movw	r0, #4186	@ 0x105a
 8000780:	f7ff fda4 	bl	80002cc <buzzer_set_frequency>
    for (volatile int i = 0; i < 80000; i++); // Crotchet
 8000784:	2300      	movs	r3, #0
 8000786:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800078a:	e004      	b.n	8000796 <pirate_sound+0x46a>
 800078c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8000790:	3301      	adds	r3, #1
 8000792:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8000796:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800079a:	4a8c      	ldr	r2, [pc, #560]	@ (80009cc <pirate_sound+0x6a0>)
 800079c:	4293      	cmp	r3, r2
 800079e:	ddf5      	ble.n	800078c <pirate_sound+0x460>
	buzzer_off();
 80007a0:	f7ff fd85 	bl	80002ae <buzzer_off>
	for (volatile int i = 0; i < 80000; i++);
 80007a4:	2300      	movs	r3, #0
 80007a6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80007aa:	e004      	b.n	80007b6 <pirate_sound+0x48a>
 80007ac:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80007b0:	3301      	adds	r3, #1
 80007b2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80007b6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80007ba:	4a84      	ldr	r2, [pc, #528]	@ (80009cc <pirate_sound+0x6a0>)
 80007bc:	4293      	cmp	r3, r2
 80007be:	ddf5      	ble.n	80007ac <pirate_sound+0x480>
	buzzer_on();
 80007c0:	f7ff fd66 	bl	8000290 <buzzer_on>

    buzzer_set_frequency(4186); // C8
 80007c4:	f241 005a 	movw	r0, #4186	@ 0x105a
 80007c8:	f7ff fd80 	bl	80002cc <buzzer_set_frequency>
    for (volatile int i = 0; i < 80000; i++); // Crotchet
 80007cc:	2300      	movs	r3, #0
 80007ce:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80007d2:	e004      	b.n	80007de <pirate_sound+0x4b2>
 80007d4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80007d8:	3301      	adds	r3, #1
 80007da:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80007de:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80007e2:	4a7a      	ldr	r2, [pc, #488]	@ (80009cc <pirate_sound+0x6a0>)
 80007e4:	4293      	cmp	r3, r2
 80007e6:	ddf5      	ble.n	80007d4 <pirate_sound+0x4a8>
	buzzer_off();
 80007e8:	f7ff fd61 	bl	80002ae <buzzer_off>
	for (volatile int i = 0; i < 80000; i++);
 80007ec:	2300      	movs	r3, #0
 80007ee:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80007f2:	e004      	b.n	80007fe <pirate_sound+0x4d2>
 80007f4:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 80007f8:	3301      	adds	r3, #1
 80007fa:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80007fe:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8000802:	4a72      	ldr	r2, [pc, #456]	@ (80009cc <pirate_sound+0x6a0>)
 8000804:	4293      	cmp	r3, r2
 8000806:	ddf5      	ble.n	80007f4 <pirate_sound+0x4c8>
	buzzer_on();
 8000808:	f7ff fd42 	bl	8000290 <buzzer_on>

    buzzer_set_frequency(4186); // C8
 800080c:	f241 005a 	movw	r0, #4186	@ 0x105a
 8000810:	f7ff fd5c 	bl	80002cc <buzzer_set_frequency>
    for (volatile int i = 0; i < 80000; i++); // Quaver
 8000814:	2300      	movs	r3, #0
 8000816:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800081a:	e004      	b.n	8000826 <pirate_sound+0x4fa>
 800081c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8000820:	3301      	adds	r3, #1
 8000822:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8000826:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800082a:	4a68      	ldr	r2, [pc, #416]	@ (80009cc <pirate_sound+0x6a0>)
 800082c:	4293      	cmp	r3, r2
 800082e:	ddf5      	ble.n	800081c <pirate_sound+0x4f0>

    buzzer_set_frequency(4698); // D8
 8000830:	f241 205a 	movw	r0, #4698	@ 0x125a
 8000834:	f7ff fd4a 	bl	80002cc <buzzer_set_frequency>
    for (volatile int i = 0; i < 80000; i++); // Quaver
 8000838:	2300      	movs	r3, #0
 800083a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800083e:	e004      	b.n	800084a <pirate_sound+0x51e>
 8000840:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8000844:	3301      	adds	r3, #1
 8000846:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800084a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800084e:	4a5f      	ldr	r2, [pc, #380]	@ (80009cc <pirate_sound+0x6a0>)
 8000850:	4293      	cmp	r3, r2
 8000852:	ddf5      	ble.n	8000840 <pirate_sound+0x514>

    buzzer_set_frequency(3951); // B7
 8000854:	f640 706f 	movw	r0, #3951	@ 0xf6f
 8000858:	f7ff fd38 	bl	80002cc <buzzer_set_frequency>
    for (volatile int i = 0; i < 80000; i++); // Crotchet
 800085c:	2300      	movs	r3, #0
 800085e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8000862:	e004      	b.n	800086e <pirate_sound+0x542>
 8000864:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8000868:	3301      	adds	r3, #1
 800086a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800086e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8000872:	4a56      	ldr	r2, [pc, #344]	@ (80009cc <pirate_sound+0x6a0>)
 8000874:	4293      	cmp	r3, r2
 8000876:	ddf5      	ble.n	8000864 <pirate_sound+0x538>
	buzzer_off();
 8000878:	f7ff fd19 	bl	80002ae <buzzer_off>
	for (volatile int i = 0; i < 80000; i++);
 800087c:	2300      	movs	r3, #0
 800087e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8000882:	e004      	b.n	800088e <pirate_sound+0x562>
 8000884:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8000888:	3301      	adds	r3, #1
 800088a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800088e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8000892:	4a4e      	ldr	r2, [pc, #312]	@ (80009cc <pirate_sound+0x6a0>)
 8000894:	4293      	cmp	r3, r2
 8000896:	ddf5      	ble.n	8000884 <pirate_sound+0x558>
	buzzer_on();
 8000898:	f7ff fcfa 	bl	8000290 <buzzer_on>

    buzzer_set_frequency(3951); // B7
 800089c:	f640 706f 	movw	r0, #3951	@ 0xf6f
 80008a0:	f7ff fd14 	bl	80002cc <buzzer_set_frequency>
    for (volatile int i = 0; i < 80000; i++); // Crotchet
 80008a4:	2300      	movs	r3, #0
 80008a6:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 80008aa:	e004      	b.n	80008b6 <pirate_sound+0x58a>
 80008ac:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80008b0:	3301      	adds	r3, #1
 80008b2:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 80008b6:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80008ba:	4a44      	ldr	r2, [pc, #272]	@ (80009cc <pirate_sound+0x6a0>)
 80008bc:	4293      	cmp	r3, r2
 80008be:	ddf5      	ble.n	80008ac <pirate_sound+0x580>
	buzzer_off();
 80008c0:	f7ff fcf5 	bl	80002ae <buzzer_off>
	for (volatile int i = 0; i < 80000; i++);
 80008c4:	2300      	movs	r3, #0
 80008c6:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80008ca:	e004      	b.n	80008d6 <pirate_sound+0x5aa>
 80008cc:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80008d0:	3301      	adds	r3, #1
 80008d2:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80008d6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80008da:	4a3c      	ldr	r2, [pc, #240]	@ (80009cc <pirate_sound+0x6a0>)
 80008dc:	4293      	cmp	r3, r2
 80008de:	ddf5      	ble.n	80008cc <pirate_sound+0x5a0>
	buzzer_on();
 80008e0:	f7ff fcd6 	bl	8000290 <buzzer_on>

    buzzer_set_frequency(3520); // A7
 80008e4:	f44f 605c 	mov.w	r0, #3520	@ 0xdc0
 80008e8:	f7ff fcf0 	bl	80002cc <buzzer_set_frequency>
    for (volatile int i = 0; i < 80000; i++); // Quaver
 80008ec:	2300      	movs	r3, #0
 80008ee:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80008f2:	e004      	b.n	80008fe <pirate_sound+0x5d2>
 80008f4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80008f8:	3301      	adds	r3, #1
 80008fa:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80008fe:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8000902:	4a32      	ldr	r2, [pc, #200]	@ (80009cc <pirate_sound+0x6a0>)
 8000904:	4293      	cmp	r3, r2
 8000906:	ddf5      	ble.n	80008f4 <pirate_sound+0x5c8>

    buzzer_set_frequency(3136); // G7
 8000908:	f44f 6044 	mov.w	r0, #3136	@ 0xc40
 800090c:	f7ff fcde 	bl	80002cc <buzzer_set_frequency>
    for (volatile int i = 0; i < 80000; i++); // Quaver
 8000910:	2300      	movs	r3, #0
 8000912:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8000916:	e004      	b.n	8000922 <pirate_sound+0x5f6>
 8000918:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800091c:	3301      	adds	r3, #1
 800091e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8000922:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8000926:	4a29      	ldr	r2, [pc, #164]	@ (80009cc <pirate_sound+0x6a0>)
 8000928:	4293      	cmp	r3, r2
 800092a:	ddf5      	ble.n	8000918 <pirate_sound+0x5ec>

    buzzer_set_frequency(3520); // A7
 800092c:	f44f 605c 	mov.w	r0, #3520	@ 0xdc0
 8000930:	f7ff fccc 	bl	80002cc <buzzer_set_frequency>
    for (volatile int i = 0; i < 160000; i++); // Crotchet
 8000934:	2300      	movs	r3, #0
 8000936:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800093a:	e004      	b.n	8000946 <pirate_sound+0x61a>
 800093c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8000940:	3301      	adds	r3, #1
 8000942:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8000946:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800094a:	4a21      	ldr	r2, [pc, #132]	@ (80009d0 <pirate_sound+0x6a4>)
 800094c:	4293      	cmp	r3, r2
 800094e:	ddf5      	ble.n	800093c <pirate_sound+0x610>
    buzzer_off();
 8000950:	f7ff fcad 	bl	80002ae <buzzer_off>
    for (volatile int i = 0; i < 480000; i++); // Crotchet
 8000954:	2300      	movs	r3, #0
 8000956:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800095a:	e004      	b.n	8000966 <pirate_sound+0x63a>
 800095c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8000960:	3301      	adds	r3, #1
 8000962:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8000966:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800096a:	4a1a      	ldr	r2, [pc, #104]	@ (80009d4 <pirate_sound+0x6a8>)
 800096c:	4293      	cmp	r3, r2
 800096e:	ddf5      	ble.n	800095c <pirate_sound+0x630>





    buzzer_on();
 8000970:	f7ff fc8e 	bl	8000290 <buzzer_on>


    buzzer_set_frequency(2636); // E7
 8000974:	f640 204c 	movw	r0, #2636	@ 0xa4c
 8000978:	f7ff fca8 	bl	80002cc <buzzer_set_frequency>
    for (volatile int i = 0; i < 80000; i++); // Quaver
 800097c:	2300      	movs	r3, #0
 800097e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8000982:	e004      	b.n	800098e <pirate_sound+0x662>
 8000984:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8000988:	3301      	adds	r3, #1
 800098a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800098e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8000992:	4a0e      	ldr	r2, [pc, #56]	@ (80009cc <pirate_sound+0x6a0>)
 8000994:	4293      	cmp	r3, r2
 8000996:	ddf5      	ble.n	8000984 <pirate_sound+0x658>

    buzzer_set_frequency(3136); // G7
 8000998:	f44f 6044 	mov.w	r0, #3136	@ 0xc40
 800099c:	f7ff fc96 	bl	80002cc <buzzer_set_frequency>
    for (volatile int i = 0; i < 80000; i++); // Quaver
 80009a0:	2300      	movs	r3, #0
 80009a2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80009a6:	e004      	b.n	80009b2 <pirate_sound+0x686>
 80009a8:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80009ac:	3301      	adds	r3, #1
 80009ae:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80009b2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80009b6:	4a05      	ldr	r2, [pc, #20]	@ (80009cc <pirate_sound+0x6a0>)
 80009b8:	4293      	cmp	r3, r2
 80009ba:	ddf5      	ble.n	80009a8 <pirate_sound+0x67c>

    buzzer_set_frequency(3520); // A7
 80009bc:	f44f 605c 	mov.w	r0, #3520	@ 0xdc0
 80009c0:	f7ff fc84 	bl	80002cc <buzzer_set_frequency>
    for (volatile int i = 0; i < 80000; i++); // Crotchet
 80009c4:	2300      	movs	r3, #0
 80009c6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80009ca:	e00a      	b.n	80009e2 <pirate_sound+0x6b6>
 80009cc:	0001387f 	.word	0x0001387f
 80009d0:	000270ff 	.word	0x000270ff
 80009d4:	000752ff 	.word	0x000752ff
 80009d8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80009dc:	3301      	adds	r3, #1
 80009de:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80009e2:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80009e6:	4ab2      	ldr	r2, [pc, #712]	@ (8000cb0 <pirate_sound+0x984>)
 80009e8:	4293      	cmp	r3, r2
 80009ea:	ddf5      	ble.n	80009d8 <pirate_sound+0x6ac>
    buzzer_off();
 80009ec:	f7ff fc5f 	bl	80002ae <buzzer_off>
    for (volatile int i = 0; i < 80000; i++);
 80009f0:	2300      	movs	r3, #0
 80009f2:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80009f6:	e004      	b.n	8000a02 <pirate_sound+0x6d6>
 80009f8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80009fc:	3301      	adds	r3, #1
 80009fe:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8000a02:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8000a06:	4aaa      	ldr	r2, [pc, #680]	@ (8000cb0 <pirate_sound+0x984>)
 8000a08:	4293      	cmp	r3, r2
 8000a0a:	ddf5      	ble.n	80009f8 <pirate_sound+0x6cc>
    buzzer_on();
 8000a0c:	f7ff fc40 	bl	8000290 <buzzer_on>

    buzzer_set_frequency(3520); // A7
 8000a10:	f44f 605c 	mov.w	r0, #3520	@ 0xdc0
 8000a14:	f7ff fc5a 	bl	80002cc <buzzer_set_frequency>
    for (volatile int i = 0; i < 80000; i++); // Crotchet
 8000a18:	2300      	movs	r3, #0
 8000a1a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8000a1e:	e004      	b.n	8000a2a <pirate_sound+0x6fe>
 8000a20:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8000a24:	3301      	adds	r3, #1
 8000a26:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8000a2a:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8000a2e:	4aa0      	ldr	r2, [pc, #640]	@ (8000cb0 <pirate_sound+0x984>)
 8000a30:	4293      	cmp	r3, r2
 8000a32:	ddf5      	ble.n	8000a20 <pirate_sound+0x6f4>
	buzzer_off();
 8000a34:	f7ff fc3b 	bl	80002ae <buzzer_off>
	for (volatile int i = 0; i < 80000; i++);
 8000a38:	2300      	movs	r3, #0
 8000a3a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8000a3e:	e004      	b.n	8000a4a <pirate_sound+0x71e>
 8000a40:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8000a44:	3301      	adds	r3, #1
 8000a46:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8000a4a:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8000a4e:	4a98      	ldr	r2, [pc, #608]	@ (8000cb0 <pirate_sound+0x984>)
 8000a50:	4293      	cmp	r3, r2
 8000a52:	ddf5      	ble.n	8000a40 <pirate_sound+0x714>
	buzzer_on();
 8000a54:	f7ff fc1c 	bl	8000290 <buzzer_on>


    buzzer_set_frequency(3520); // A7
 8000a58:	f44f 605c 	mov.w	r0, #3520	@ 0xdc0
 8000a5c:	f7ff fc36 	bl	80002cc <buzzer_set_frequency>
    for (volatile int i = 0; i < 80000; i++); // Quaver
 8000a60:	2300      	movs	r3, #0
 8000a62:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8000a66:	e004      	b.n	8000a72 <pirate_sound+0x746>
 8000a68:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8000a6c:	3301      	adds	r3, #1
 8000a6e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8000a72:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8000a76:	4a8e      	ldr	r2, [pc, #568]	@ (8000cb0 <pirate_sound+0x984>)
 8000a78:	4293      	cmp	r3, r2
 8000a7a:	ddf5      	ble.n	8000a68 <pirate_sound+0x73c>

    buzzer_set_frequency(4186); // C8
 8000a7c:	f241 005a 	movw	r0, #4186	@ 0x105a
 8000a80:	f7ff fc24 	bl	80002cc <buzzer_set_frequency>
    for (volatile int i = 0; i < 80000; i++); // Quaver
 8000a84:	2300      	movs	r3, #0
 8000a86:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8000a8a:	e004      	b.n	8000a96 <pirate_sound+0x76a>
 8000a8c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8000a90:	3301      	adds	r3, #1
 8000a92:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8000a96:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8000a9a:	4a85      	ldr	r2, [pc, #532]	@ (8000cb0 <pirate_sound+0x984>)
 8000a9c:	4293      	cmp	r3, r2
 8000a9e:	ddf5      	ble.n	8000a8c <pirate_sound+0x760>


	buzzer_set_frequency(4698); // D8
 8000aa0:	f241 205a 	movw	r0, #4698	@ 0x125a
 8000aa4:	f7ff fc12 	bl	80002cc <buzzer_set_frequency>
	for (volatile int i = 0; i < 80000; i++); // Crotchet
 8000aa8:	2300      	movs	r3, #0
 8000aaa:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8000aae:	e004      	b.n	8000aba <pirate_sound+0x78e>
 8000ab0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8000ab4:	3301      	adds	r3, #1
 8000ab6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8000aba:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8000abe:	4a7c      	ldr	r2, [pc, #496]	@ (8000cb0 <pirate_sound+0x984>)
 8000ac0:	4293      	cmp	r3, r2
 8000ac2:	ddf5      	ble.n	8000ab0 <pirate_sound+0x784>
	buzzer_off();
 8000ac4:	f7ff fbf3 	bl	80002ae <buzzer_off>
	for (volatile int i = 0; i < 80000; i++);
 8000ac8:	2300      	movs	r3, #0
 8000aca:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8000ace:	e004      	b.n	8000ada <pirate_sound+0x7ae>
 8000ad0:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8000ad4:	3301      	adds	r3, #1
 8000ad6:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8000ada:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8000ade:	4a74      	ldr	r2, [pc, #464]	@ (8000cb0 <pirate_sound+0x984>)
 8000ae0:	4293      	cmp	r3, r2
 8000ae2:	ddf5      	ble.n	8000ad0 <pirate_sound+0x7a4>
	buzzer_on();
 8000ae4:	f7ff fbd4 	bl	8000290 <buzzer_on>

	buzzer_set_frequency(4698); // D8
 8000ae8:	f241 205a 	movw	r0, #4698	@ 0x125a
 8000aec:	f7ff fbee 	bl	80002cc <buzzer_set_frequency>
	for (volatile int i = 0; i < 80000; i++); // Crotchet
 8000af0:	2300      	movs	r3, #0
 8000af2:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8000af4:	e002      	b.n	8000afc <pirate_sound+0x7d0>
 8000af6:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8000af8:	3301      	adds	r3, #1
 8000afa:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8000afc:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8000afe:	4a6c      	ldr	r2, [pc, #432]	@ (8000cb0 <pirate_sound+0x984>)
 8000b00:	4293      	cmp	r3, r2
 8000b02:	ddf8      	ble.n	8000af6 <pirate_sound+0x7ca>
	buzzer_off();
 8000b04:	f7ff fbd3 	bl	80002ae <buzzer_off>
	for (volatile int i = 0; i < 80000; i++);
 8000b08:	2300      	movs	r3, #0
 8000b0a:	67bb      	str	r3, [r7, #120]	@ 0x78
 8000b0c:	e002      	b.n	8000b14 <pirate_sound+0x7e8>
 8000b0e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8000b10:	3301      	adds	r3, #1
 8000b12:	67bb      	str	r3, [r7, #120]	@ 0x78
 8000b14:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8000b16:	4a66      	ldr	r2, [pc, #408]	@ (8000cb0 <pirate_sound+0x984>)
 8000b18:	4293      	cmp	r3, r2
 8000b1a:	ddf8      	ble.n	8000b0e <pirate_sound+0x7e2>
	buzzer_on();
 8000b1c:	f7ff fbb8 	bl	8000290 <buzzer_on>

	buzzer_set_frequency(4698); // D8
 8000b20:	f241 205a 	movw	r0, #4698	@ 0x125a
 8000b24:	f7ff fbd2 	bl	80002cc <buzzer_set_frequency>
	for (volatile int i = 0; i < 80000; i++); // Quaver
 8000b28:	2300      	movs	r3, #0
 8000b2a:	677b      	str	r3, [r7, #116]	@ 0x74
 8000b2c:	e002      	b.n	8000b34 <pirate_sound+0x808>
 8000b2e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8000b30:	3301      	adds	r3, #1
 8000b32:	677b      	str	r3, [r7, #116]	@ 0x74
 8000b34:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8000b36:	4a5e      	ldr	r2, [pc, #376]	@ (8000cb0 <pirate_sound+0x984>)
 8000b38:	4293      	cmp	r3, r2
 8000b3a:	ddf8      	ble.n	8000b2e <pirate_sound+0x802>

	buzzer_set_frequency(5274); // E8
 8000b3c:	f241 409a 	movw	r0, #5274	@ 0x149a
 8000b40:	f7ff fbc4 	bl	80002cc <buzzer_set_frequency>
	for (volatile int i = 0; i < 80000; i++); // Quaver
 8000b44:	2300      	movs	r3, #0
 8000b46:	673b      	str	r3, [r7, #112]	@ 0x70
 8000b48:	e002      	b.n	8000b50 <pirate_sound+0x824>
 8000b4a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8000b4c:	3301      	adds	r3, #1
 8000b4e:	673b      	str	r3, [r7, #112]	@ 0x70
 8000b50:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8000b52:	4a57      	ldr	r2, [pc, #348]	@ (8000cb0 <pirate_sound+0x984>)
 8000b54:	4293      	cmp	r3, r2
 8000b56:	ddf8      	ble.n	8000b4a <pirate_sound+0x81e>


	buzzer_set_frequency(5588); // F8
 8000b58:	f241 50d4 	movw	r0, #5588	@ 0x15d4
 8000b5c:	f7ff fbb6 	bl	80002cc <buzzer_set_frequency>
	for (volatile int i = 0; i < 80000; i++); // Crotchet
 8000b60:	2300      	movs	r3, #0
 8000b62:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8000b64:	e002      	b.n	8000b6c <pirate_sound+0x840>
 8000b66:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8000b68:	3301      	adds	r3, #1
 8000b6a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8000b6c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8000b6e:	4a50      	ldr	r2, [pc, #320]	@ (8000cb0 <pirate_sound+0x984>)
 8000b70:	4293      	cmp	r3, r2
 8000b72:	ddf8      	ble.n	8000b66 <pirate_sound+0x83a>
	buzzer_off();
 8000b74:	f7ff fb9b 	bl	80002ae <buzzer_off>
	for (volatile int i = 0; i < 80000; i++);
 8000b78:	2300      	movs	r3, #0
 8000b7a:	66bb      	str	r3, [r7, #104]	@ 0x68
 8000b7c:	e002      	b.n	8000b84 <pirate_sound+0x858>
 8000b7e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8000b80:	3301      	adds	r3, #1
 8000b82:	66bb      	str	r3, [r7, #104]	@ 0x68
 8000b84:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8000b86:	4a4a      	ldr	r2, [pc, #296]	@ (8000cb0 <pirate_sound+0x984>)
 8000b88:	4293      	cmp	r3, r2
 8000b8a:	ddf8      	ble.n	8000b7e <pirate_sound+0x852>
	buzzer_on();
 8000b8c:	f7ff fb80 	bl	8000290 <buzzer_on>

	buzzer_set_frequency(5588); // F8
 8000b90:	f241 50d4 	movw	r0, #5588	@ 0x15d4
 8000b94:	f7ff fb9a 	bl	80002cc <buzzer_set_frequency>
	for (volatile int i = 0; i < 80000; i++); // Crotchet
 8000b98:	2300      	movs	r3, #0
 8000b9a:	667b      	str	r3, [r7, #100]	@ 0x64
 8000b9c:	e002      	b.n	8000ba4 <pirate_sound+0x878>
 8000b9e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8000ba0:	3301      	adds	r3, #1
 8000ba2:	667b      	str	r3, [r7, #100]	@ 0x64
 8000ba4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8000ba6:	4a42      	ldr	r2, [pc, #264]	@ (8000cb0 <pirate_sound+0x984>)
 8000ba8:	4293      	cmp	r3, r2
 8000baa:	ddf8      	ble.n	8000b9e <pirate_sound+0x872>
	buzzer_off();
 8000bac:	f7ff fb7f 	bl	80002ae <buzzer_off>
	for (volatile int i = 0; i < 80000; i++);
 8000bb0:	2300      	movs	r3, #0
 8000bb2:	663b      	str	r3, [r7, #96]	@ 0x60
 8000bb4:	e002      	b.n	8000bbc <pirate_sound+0x890>
 8000bb6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8000bb8:	3301      	adds	r3, #1
 8000bba:	663b      	str	r3, [r7, #96]	@ 0x60
 8000bbc:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8000bbe:	4a3c      	ldr	r2, [pc, #240]	@ (8000cb0 <pirate_sound+0x984>)
 8000bc0:	4293      	cmp	r3, r2
 8000bc2:	ddf8      	ble.n	8000bb6 <pirate_sound+0x88a>
	buzzer_on();
 8000bc4:	f7ff fb64 	bl	8000290 <buzzer_on>


	buzzer_set_frequency(5274); // E8
 8000bc8:	f241 409a 	movw	r0, #5274	@ 0x149a
 8000bcc:	f7ff fb7e 	bl	80002cc <buzzer_set_frequency>
	for (volatile int i = 0; i < 80000; i++); // Quaver
 8000bd0:	2300      	movs	r3, #0
 8000bd2:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8000bd4:	e002      	b.n	8000bdc <pirate_sound+0x8b0>
 8000bd6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8000bd8:	3301      	adds	r3, #1
 8000bda:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8000bdc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8000bde:	4a34      	ldr	r2, [pc, #208]	@ (8000cb0 <pirate_sound+0x984>)
 8000be0:	4293      	cmp	r3, r2
 8000be2:	ddf8      	ble.n	8000bd6 <pirate_sound+0x8aa>

	buzzer_set_frequency(4698); // D8
 8000be4:	f241 205a 	movw	r0, #4698	@ 0x125a
 8000be8:	f7ff fb70 	bl	80002cc <buzzer_set_frequency>
	for (volatile int i = 0; i < 80000; i++); // Quaver
 8000bec:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 8000bf0:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	601a      	str	r2, [r3, #0]
 8000bf8:	e00a      	b.n	8000c10 <pirate_sound+0x8e4>
 8000bfa:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 8000bfe:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8000c02:	681b      	ldr	r3, [r3, #0]
 8000c04:	1c5a      	adds	r2, r3, #1
 8000c06:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 8000c0a:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8000c0e:	601a      	str	r2, [r3, #0]
 8000c10:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 8000c14:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8000c18:	681b      	ldr	r3, [r3, #0]
 8000c1a:	4a25      	ldr	r2, [pc, #148]	@ (8000cb0 <pirate_sound+0x984>)
 8000c1c:	4293      	cmp	r3, r2
 8000c1e:	ddec      	ble.n	8000bfa <pirate_sound+0x8ce>

	buzzer_set_frequency(5274); // E8
 8000c20:	f241 409a 	movw	r0, #5274	@ 0x149a
 8000c24:	f7ff fb52 	bl	80002cc <buzzer_set_frequency>
	for (volatile int i = 0; i < 80000; i++); // Quaver
 8000c28:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 8000c2c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8000c30:	2200      	movs	r2, #0
 8000c32:	601a      	str	r2, [r3, #0]
 8000c34:	e00a      	b.n	8000c4c <pirate_sound+0x920>
 8000c36:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 8000c3a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8000c3e:	681b      	ldr	r3, [r3, #0]
 8000c40:	1c5a      	adds	r2, r3, #1
 8000c42:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 8000c46:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8000c4a:	601a      	str	r2, [r3, #0]
 8000c4c:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 8000c50:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8000c54:	681b      	ldr	r3, [r3, #0]
 8000c56:	4a16      	ldr	r2, [pc, #88]	@ (8000cb0 <pirate_sound+0x984>)
 8000c58:	4293      	cmp	r3, r2
 8000c5a:	ddec      	ble.n	8000c36 <pirate_sound+0x90a>

    buzzer_set_frequency(3520); // A7
 8000c5c:	f44f 605c 	mov.w	r0, #3520	@ 0xdc0
 8000c60:	f7ff fb34 	bl	80002cc <buzzer_set_frequency>
    for (volatile int i = 0; i < 240000; i++); // Quaver
 8000c64:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 8000c68:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	601a      	str	r2, [r3, #0]
 8000c70:	e00a      	b.n	8000c88 <pirate_sound+0x95c>
 8000c72:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 8000c76:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8000c7a:	681b      	ldr	r3, [r3, #0]
 8000c7c:	1c5a      	adds	r2, r3, #1
 8000c7e:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 8000c82:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8000c86:	601a      	str	r2, [r3, #0]
 8000c88:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 8000c8c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8000c90:	681b      	ldr	r3, [r3, #0]
 8000c92:	4a08      	ldr	r2, [pc, #32]	@ (8000cb4 <pirate_sound+0x988>)
 8000c94:	4293      	cmp	r3, r2
 8000c96:	ddec      	ble.n	8000c72 <pirate_sound+0x946>


	buzzer_set_frequency(3520); // A7
 8000c98:	f44f 605c 	mov.w	r0, #3520	@ 0xdc0
 8000c9c:	f7ff fb16 	bl	80002cc <buzzer_set_frequency>
	for (volatile int i = 0; i < 80000; i++); // Quaver
 8000ca0:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 8000ca4:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8000ca8:	2200      	movs	r2, #0
 8000caa:	601a      	str	r2, [r3, #0]
 8000cac:	e00f      	b.n	8000cce <pirate_sound+0x9a2>
 8000cae:	bf00      	nop
 8000cb0:	0001387f 	.word	0x0001387f
 8000cb4:	0003a97f 	.word	0x0003a97f
 8000cb8:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 8000cbc:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8000cc0:	681b      	ldr	r3, [r3, #0]
 8000cc2:	1c5a      	adds	r2, r3, #1
 8000cc4:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 8000cc8:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8000ccc:	601a      	str	r2, [r3, #0]
 8000cce:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 8000cd2:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8000cd6:	681b      	ldr	r3, [r3, #0]
 8000cd8:	4ab9      	ldr	r2, [pc, #740]	@ (8000fc0 <pirate_sound+0xc94>)
 8000cda:	4293      	cmp	r3, r2
 8000cdc:	ddec      	ble.n	8000cb8 <pirate_sound+0x98c>

	buzzer_set_frequency(3951); // B7
 8000cde:	f640 706f 	movw	r0, #3951	@ 0xf6f
 8000ce2:	f7ff faf3 	bl	80002cc <buzzer_set_frequency>
	for (volatile int i = 0; i < 80000; i++); // Quaver
 8000ce6:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 8000cea:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8000cee:	2200      	movs	r2, #0
 8000cf0:	601a      	str	r2, [r3, #0]
 8000cf2:	e00a      	b.n	8000d0a <pirate_sound+0x9de>
 8000cf4:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 8000cf8:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8000cfc:	681b      	ldr	r3, [r3, #0]
 8000cfe:	1c5a      	adds	r2, r3, #1
 8000d00:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 8000d04:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8000d08:	601a      	str	r2, [r3, #0]
 8000d0a:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 8000d0e:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8000d12:	681b      	ldr	r3, [r3, #0]
 8000d14:	4aaa      	ldr	r2, [pc, #680]	@ (8000fc0 <pirate_sound+0xc94>)
 8000d16:	4293      	cmp	r3, r2
 8000d18:	ddec      	ble.n	8000cf4 <pirate_sound+0x9c8>

	buzzer_set_frequency(4186); // C8
 8000d1a:	f241 005a 	movw	r0, #4186	@ 0x105a
 8000d1e:	f7ff fad5 	bl	80002cc <buzzer_set_frequency>
	for (volatile int i = 0; i < 80000; i++); // Crotchet
 8000d22:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 8000d26:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	601a      	str	r2, [r3, #0]
 8000d2e:	e00a      	b.n	8000d46 <pirate_sound+0xa1a>
 8000d30:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 8000d34:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8000d38:	681b      	ldr	r3, [r3, #0]
 8000d3a:	1c5a      	adds	r2, r3, #1
 8000d3c:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 8000d40:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8000d44:	601a      	str	r2, [r3, #0]
 8000d46:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 8000d4a:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	4a9b      	ldr	r2, [pc, #620]	@ (8000fc0 <pirate_sound+0xc94>)
 8000d52:	4293      	cmp	r3, r2
 8000d54:	ddec      	ble.n	8000d30 <pirate_sound+0xa04>
	buzzer_off();
 8000d56:	f7ff faaa 	bl	80002ae <buzzer_off>
	for (volatile int i = 0; i < 80000; i++);
 8000d5a:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 8000d5e:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8000d62:	2200      	movs	r2, #0
 8000d64:	601a      	str	r2, [r3, #0]
 8000d66:	e00a      	b.n	8000d7e <pirate_sound+0xa52>
 8000d68:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 8000d6c:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8000d70:	681b      	ldr	r3, [r3, #0]
 8000d72:	1c5a      	adds	r2, r3, #1
 8000d74:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 8000d78:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8000d7c:	601a      	str	r2, [r3, #0]
 8000d7e:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 8000d82:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	4a8d      	ldr	r2, [pc, #564]	@ (8000fc0 <pirate_sound+0xc94>)
 8000d8a:	4293      	cmp	r3, r2
 8000d8c:	ddec      	ble.n	8000d68 <pirate_sound+0xa3c>
	buzzer_on();
 8000d8e:	f7ff fa7f 	bl	8000290 <buzzer_on>

	buzzer_set_frequency(4186); // C8
 8000d92:	f241 005a 	movw	r0, #4186	@ 0x105a
 8000d96:	f7ff fa99 	bl	80002cc <buzzer_set_frequency>
	for (volatile int i = 0; i < 80000; i++); // Crotchet
 8000d9a:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 8000d9e:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8000da2:	2200      	movs	r2, #0
 8000da4:	601a      	str	r2, [r3, #0]
 8000da6:	e00a      	b.n	8000dbe <pirate_sound+0xa92>
 8000da8:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 8000dac:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8000db0:	681b      	ldr	r3, [r3, #0]
 8000db2:	1c5a      	adds	r2, r3, #1
 8000db4:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 8000db8:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8000dbc:	601a      	str	r2, [r3, #0]
 8000dbe:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 8000dc2:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8000dc6:	681b      	ldr	r3, [r3, #0]
 8000dc8:	4a7d      	ldr	r2, [pc, #500]	@ (8000fc0 <pirate_sound+0xc94>)
 8000dca:	4293      	cmp	r3, r2
 8000dcc:	ddec      	ble.n	8000da8 <pirate_sound+0xa7c>
	buzzer_off();
 8000dce:	f7ff fa6e 	bl	80002ae <buzzer_off>
	for (volatile int i = 0; i < 80000; i++);
 8000dd2:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 8000dd6:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8000dda:	2200      	movs	r2, #0
 8000ddc:	601a      	str	r2, [r3, #0]
 8000dde:	e00a      	b.n	8000df6 <pirate_sound+0xaca>
 8000de0:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 8000de4:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8000de8:	681b      	ldr	r3, [r3, #0]
 8000dea:	1c5a      	adds	r2, r3, #1
 8000dec:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 8000df0:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8000df4:	601a      	str	r2, [r3, #0]
 8000df6:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 8000dfa:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	4a6f      	ldr	r2, [pc, #444]	@ (8000fc0 <pirate_sound+0xc94>)
 8000e02:	4293      	cmp	r3, r2
 8000e04:	ddec      	ble.n	8000de0 <pirate_sound+0xab4>
	buzzer_on();
 8000e06:	f7ff fa43 	bl	8000290 <buzzer_on>

	buzzer_set_frequency(4698); // D8
 8000e0a:	f241 205a 	movw	r0, #4698	@ 0x125a
 8000e0e:	f7ff fa5d 	bl	80002cc <buzzer_set_frequency>
	for (volatile int i = 0; i < 80000; i++); // Crotchet
 8000e12:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 8000e16:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8000e1a:	2200      	movs	r2, #0
 8000e1c:	601a      	str	r2, [r3, #0]
 8000e1e:	e00a      	b.n	8000e36 <pirate_sound+0xb0a>
 8000e20:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 8000e24:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8000e28:	681b      	ldr	r3, [r3, #0]
 8000e2a:	1c5a      	adds	r2, r3, #1
 8000e2c:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 8000e30:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8000e34:	601a      	str	r2, [r3, #0]
 8000e36:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 8000e3a:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	4a5f      	ldr	r2, [pc, #380]	@ (8000fc0 <pirate_sound+0xc94>)
 8000e42:	4293      	cmp	r3, r2
 8000e44:	ddec      	ble.n	8000e20 <pirate_sound+0xaf4>
	buzzer_off();
 8000e46:	f7ff fa32 	bl	80002ae <buzzer_off>
	for (volatile int i = 0; i < 80000; i++);
 8000e4a:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 8000e4e:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8000e52:	2200      	movs	r2, #0
 8000e54:	601a      	str	r2, [r3, #0]
 8000e56:	e00a      	b.n	8000e6e <pirate_sound+0xb42>
 8000e58:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 8000e5c:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8000e60:	681b      	ldr	r3, [r3, #0]
 8000e62:	1c5a      	adds	r2, r3, #1
 8000e64:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 8000e68:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8000e6c:	601a      	str	r2, [r3, #0]
 8000e6e:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 8000e72:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	4a51      	ldr	r2, [pc, #324]	@ (8000fc0 <pirate_sound+0xc94>)
 8000e7a:	4293      	cmp	r3, r2
 8000e7c:	ddec      	ble.n	8000e58 <pirate_sound+0xb2c>
	buzzer_on();
 8000e7e:	f7ff fa07 	bl	8000290 <buzzer_on>

	buzzer_set_frequency(5274); // E8
 8000e82:	f241 409a 	movw	r0, #5274	@ 0x149a
 8000e86:	f7ff fa21 	bl	80002cc <buzzer_set_frequency>
	for (volatile int i = 0; i < 80000; i++); // Quaver
 8000e8a:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 8000e8e:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8000e92:	2200      	movs	r2, #0
 8000e94:	601a      	str	r2, [r3, #0]
 8000e96:	e00a      	b.n	8000eae <pirate_sound+0xb82>
 8000e98:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 8000e9c:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8000ea0:	681b      	ldr	r3, [r3, #0]
 8000ea2:	1c5a      	adds	r2, r3, #1
 8000ea4:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 8000ea8:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8000eac:	601a      	str	r2, [r3, #0]
 8000eae:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 8000eb2:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	4a41      	ldr	r2, [pc, #260]	@ (8000fc0 <pirate_sound+0xc94>)
 8000eba:	4293      	cmp	r3, r2
 8000ebc:	ddec      	ble.n	8000e98 <pirate_sound+0xb6c>

    buzzer_set_frequency(3520); // A7
 8000ebe:	f44f 605c 	mov.w	r0, #3520	@ 0xdc0
 8000ec2:	f7ff fa03 	bl	80002cc <buzzer_set_frequency>
    for (volatile int i = 0; i < 240000; i++); // Quaver
 8000ec6:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 8000eca:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8000ece:	2200      	movs	r2, #0
 8000ed0:	601a      	str	r2, [r3, #0]
 8000ed2:	e00a      	b.n	8000eea <pirate_sound+0xbbe>
 8000ed4:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 8000ed8:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	1c5a      	adds	r2, r3, #1
 8000ee0:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 8000ee4:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8000ee8:	601a      	str	r2, [r3, #0]
 8000eea:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 8000eee:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	4a33      	ldr	r2, [pc, #204]	@ (8000fc4 <pirate_sound+0xc98>)
 8000ef6:	4293      	cmp	r3, r2
 8000ef8:	ddec      	ble.n	8000ed4 <pirate_sound+0xba8>


	buzzer_set_frequency(3520); // A7
 8000efa:	f44f 605c 	mov.w	r0, #3520	@ 0xdc0
 8000efe:	f7ff f9e5 	bl	80002cc <buzzer_set_frequency>
	for (volatile int i = 0; i < 80000; i++); // Quaver
 8000f02:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 8000f06:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8000f0a:	2200      	movs	r2, #0
 8000f0c:	601a      	str	r2, [r3, #0]
 8000f0e:	e00a      	b.n	8000f26 <pirate_sound+0xbfa>
 8000f10:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 8000f14:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8000f18:	681b      	ldr	r3, [r3, #0]
 8000f1a:	1c5a      	adds	r2, r3, #1
 8000f1c:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 8000f20:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8000f24:	601a      	str	r2, [r3, #0]
 8000f26:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 8000f2a:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	4a23      	ldr	r2, [pc, #140]	@ (8000fc0 <pirate_sound+0xc94>)
 8000f32:	4293      	cmp	r3, r2
 8000f34:	ddec      	ble.n	8000f10 <pirate_sound+0xbe4>

	buzzer_set_frequency(4186); // C8
 8000f36:	f241 005a 	movw	r0, #4186	@ 0x105a
 8000f3a:	f7ff f9c7 	bl	80002cc <buzzer_set_frequency>
	for (volatile int i = 0; i < 80000; i++); // Quaver
 8000f3e:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 8000f42:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8000f46:	2200      	movs	r2, #0
 8000f48:	601a      	str	r2, [r3, #0]
 8000f4a:	e00a      	b.n	8000f62 <pirate_sound+0xc36>
 8000f4c:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 8000f50:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	1c5a      	adds	r2, r3, #1
 8000f58:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 8000f5c:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8000f60:	601a      	str	r2, [r3, #0]
 8000f62:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 8000f66:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	4a14      	ldr	r2, [pc, #80]	@ (8000fc0 <pirate_sound+0xc94>)
 8000f6e:	4293      	cmp	r3, r2
 8000f70:	ddec      	ble.n	8000f4c <pirate_sound+0xc20>


	buzzer_set_frequency(3951); // B7
 8000f72:	f640 706f 	movw	r0, #3951	@ 0xf6f
 8000f76:	f7ff f9a9 	bl	80002cc <buzzer_set_frequency>
	for (volatile int i = 0; i < 80000; i++); // Crotchet
 8000f7a:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 8000f7e:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8000f82:	2200      	movs	r2, #0
 8000f84:	601a      	str	r2, [r3, #0]
 8000f86:	e00a      	b.n	8000f9e <pirate_sound+0xc72>
 8000f88:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 8000f8c:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	1c5a      	adds	r2, r3, #1
 8000f94:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 8000f98:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8000f9c:	601a      	str	r2, [r3, #0]
 8000f9e:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 8000fa2:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	4a05      	ldr	r2, [pc, #20]	@ (8000fc0 <pirate_sound+0xc94>)
 8000faa:	4293      	cmp	r3, r2
 8000fac:	ddec      	ble.n	8000f88 <pirate_sound+0xc5c>
	buzzer_off();
 8000fae:	f7ff f97e 	bl	80002ae <buzzer_off>
	for (volatile int i = 0; i < 80000; i++);
 8000fb2:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 8000fb6:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8000fba:	2200      	movs	r2, #0
 8000fbc:	601a      	str	r2, [r3, #0]
 8000fbe:	e00e      	b.n	8000fde <pirate_sound+0xcb2>
 8000fc0:	0001387f 	.word	0x0001387f
 8000fc4:	0003a97f 	.word	0x0003a97f
 8000fc8:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 8000fcc:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	1c5a      	adds	r2, r3, #1
 8000fd4:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 8000fd8:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8000fdc:	601a      	str	r2, [r3, #0]
 8000fde:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 8000fe2:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	4a50      	ldr	r2, [pc, #320]	@ (800112c <pirate_sound+0xe00>)
 8000fea:	4293      	cmp	r3, r2
 8000fec:	ddec      	ble.n	8000fc8 <pirate_sound+0xc9c>
	buzzer_on();
 8000fee:	f7ff f94f 	bl	8000290 <buzzer_on>

	buzzer_set_frequency(3951); // B7
 8000ff2:	f640 706f 	movw	r0, #3951	@ 0xf6f
 8000ff6:	f7ff f969 	bl	80002cc <buzzer_set_frequency>
	for (volatile int i = 0; i < 80000; i++); // Crotchet
 8000ffa:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 8000ffe:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8001002:	2200      	movs	r2, #0
 8001004:	601a      	str	r2, [r3, #0]
 8001006:	e00a      	b.n	800101e <pirate_sound+0xcf2>
 8001008:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800100c:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	1c5a      	adds	r2, r3, #1
 8001014:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 8001018:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 800101c:	601a      	str	r2, [r3, #0]
 800101e:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 8001022:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	4a40      	ldr	r2, [pc, #256]	@ (800112c <pirate_sound+0xe00>)
 800102a:	4293      	cmp	r3, r2
 800102c:	ddec      	ble.n	8001008 <pirate_sound+0xcdc>
	buzzer_off();
 800102e:	f7ff f93e 	bl	80002ae <buzzer_off>
	for (volatile int i = 0; i < 80000; i++);
 8001032:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 8001036:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 800103a:	2200      	movs	r2, #0
 800103c:	601a      	str	r2, [r3, #0]
 800103e:	e00a      	b.n	8001056 <pirate_sound+0xd2a>
 8001040:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 8001044:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	1c5a      	adds	r2, r3, #1
 800104c:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 8001050:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8001054:	601a      	str	r2, [r3, #0]
 8001056:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800105a:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	4a32      	ldr	r2, [pc, #200]	@ (800112c <pirate_sound+0xe00>)
 8001062:	4293      	cmp	r3, r2
 8001064:	ddec      	ble.n	8001040 <pirate_sound+0xd14>
	buzzer_on();
 8001066:	f7ff f913 	bl	8000290 <buzzer_on>

	buzzer_set_frequency(4186); // C8
 800106a:	f241 005a 	movw	r0, #4186	@ 0x105a
 800106e:	f7ff f92d 	bl	80002cc <buzzer_set_frequency>
	for (volatile int i = 0; i < 80000; i++); // Quaver
 8001072:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 8001076:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 800107a:	2200      	movs	r2, #0
 800107c:	601a      	str	r2, [r3, #0]
 800107e:	e00a      	b.n	8001096 <pirate_sound+0xd6a>
 8001080:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 8001084:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	1c5a      	adds	r2, r3, #1
 800108c:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 8001090:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8001094:	601a      	str	r2, [r3, #0]
 8001096:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800109a:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	4a22      	ldr	r2, [pc, #136]	@ (800112c <pirate_sound+0xe00>)
 80010a2:	4293      	cmp	r3, r2
 80010a4:	ddec      	ble.n	8001080 <pirate_sound+0xd54>

	buzzer_set_frequency(3520); // A7
 80010a6:	f44f 605c 	mov.w	r0, #3520	@ 0xdc0
 80010aa:	f7ff f90f 	bl	80002cc <buzzer_set_frequency>
	for (volatile int i = 0; i < 80000; i++); // Quaver
 80010ae:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 80010b2:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 80010b6:	2200      	movs	r2, #0
 80010b8:	601a      	str	r2, [r3, #0]
 80010ba:	e00a      	b.n	80010d2 <pirate_sound+0xda6>
 80010bc:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 80010c0:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	1c5a      	adds	r2, r3, #1
 80010c8:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 80010cc:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 80010d0:	601a      	str	r2, [r3, #0]
 80010d2:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 80010d6:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	4a13      	ldr	r2, [pc, #76]	@ (800112c <pirate_sound+0xe00>)
 80010de:	4293      	cmp	r3, r2
 80010e0:	ddec      	ble.n	80010bc <pirate_sound+0xd90>

	buzzer_set_frequency(3951); // A7
 80010e2:	f640 706f 	movw	r0, #3951	@ 0xf6f
 80010e6:	f7ff f8f1 	bl	80002cc <buzzer_set_frequency>
	for (volatile int i = 0; i < 320000; i++); // Semibrieve
 80010ea:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 80010ee:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 80010f2:	2200      	movs	r2, #0
 80010f4:	601a      	str	r2, [r3, #0]
 80010f6:	e00a      	b.n	800110e <pirate_sound+0xde2>
 80010f8:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 80010fc:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	1c5a      	adds	r2, r3, #1
 8001104:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 8001108:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 800110c:	601a      	str	r2, [r3, #0]
 800110e:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 8001112:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	4a05      	ldr	r2, [pc, #20]	@ (8001130 <pirate_sound+0xe04>)
 800111a:	4293      	cmp	r3, r2
 800111c:	ddec      	ble.n	80010f8 <pirate_sound+0xdcc>


}
 800111e:	bf00      	nop
 8001120:	bf00      	nop
 8001122:	f507 77ac 	add.w	r7, r7, #344	@ 0x158
 8001126:	46bd      	mov	sp, r7
 8001128:	bd80      	pop	{r7, pc}
 800112a:	bf00      	nop
 800112c:	0001387f 	.word	0x0001387f
 8001130:	0004e1ff 	.word	0x0004e1ff

08001134 <HAL_TIM_IC_CaptureCallback>:

uint16_t rise_time = 0;
uint16_t last_period = 0;

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001134:	b580      	push	{r7, lr}
 8001136:	b086      	sub	sp, #24
 8001138:	af00      	add	r7, sp, #0
 800113a:	6078      	str	r0, [r7, #4]
    static uint32_t rising_edge_time = 0;
    static bool last_edge_was_rising = true;
    static uint8_t no_detection_counter = 0;

    if (htim->Instance == TIM1) // Only handle TIM1 input capture
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	4a47      	ldr	r2, [pc, #284]	@ (8001260 <HAL_TIM_IC_CaptureCallback+0x12c>)
 8001142:	4293      	cmp	r3, r2
 8001144:	f040 8087 	bne.w	8001256 <HAL_TIM_IC_CaptureCallback+0x122>
    {
        if (last_edge_was_rising)
 8001148:	4b46      	ldr	r3, [pc, #280]	@ (8001264 <HAL_TIM_IC_CaptureCallback+0x130>)
 800114a:	781b      	ldrb	r3, [r3, #0]
 800114c:	2b00      	cmp	r3, #0
 800114e:	d01a      	beq.n	8001186 <HAL_TIM_IC_CaptureCallback+0x52>
        {
            // Store rising edge timestamp
            rising_edge_time = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 8001150:	2100      	movs	r1, #0
 8001152:	6878      	ldr	r0, [r7, #4]
 8001154:	f001 f99a 	bl	800248c <HAL_TIM_ReadCapturedValue>
 8001158:	4603      	mov	r3, r0
 800115a:	4a43      	ldr	r2, [pc, #268]	@ (8001268 <HAL_TIM_IC_CaptureCallback+0x134>)
 800115c:	6013      	str	r3, [r2, #0]
            __HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_FALLING);
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	6a1a      	ldr	r2, [r3, #32]
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	f022 020a 	bic.w	r2, r2, #10
 800116c:	621a      	str	r2, [r3, #32]
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	6a1a      	ldr	r2, [r3, #32]
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	f042 0202 	orr.w	r2, r2, #2
 800117c:	621a      	str	r2, [r3, #32]
            last_edge_was_rising = false;
 800117e:	4b39      	ldr	r3, [pc, #228]	@ (8001264 <HAL_TIM_IC_CaptureCallback+0x130>)
 8001180:	2200      	movs	r2, #0
 8001182:	701a      	strb	r2, [r3, #0]

            __HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_RISING);
            last_edge_was_rising = true;
        }
    }
}
 8001184:	e067      	b.n	8001256 <HAL_TIM_IC_CaptureCallback+0x122>
            uint32_t falling_edge_time = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 8001186:	2100      	movs	r1, #0
 8001188:	6878      	ldr	r0, [r7, #4]
 800118a:	f001 f97f 	bl	800248c <HAL_TIM_ReadCapturedValue>
 800118e:	60f8      	str	r0, [r7, #12]
            if (falling_edge_time >= rising_edge_time) {
 8001190:	4b35      	ldr	r3, [pc, #212]	@ (8001268 <HAL_TIM_IC_CaptureCallback+0x134>)
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	68fa      	ldr	r2, [r7, #12]
 8001196:	429a      	cmp	r2, r3
 8001198:	d305      	bcc.n	80011a6 <HAL_TIM_IC_CaptureCallback+0x72>
                pulse_width = falling_edge_time - rising_edge_time;
 800119a:	4b33      	ldr	r3, [pc, #204]	@ (8001268 <HAL_TIM_IC_CaptureCallback+0x134>)
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	68fa      	ldr	r2, [r7, #12]
 80011a0:	1ad3      	subs	r3, r2, r3
 80011a2:	617b      	str	r3, [r7, #20]
 80011a4:	e009      	b.n	80011ba <HAL_TIM_IC_CaptureCallback+0x86>
                pulse_width = (htim->Instance->ARR - rising_edge_time + falling_edge_time + 1);
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80011ac:	4b2e      	ldr	r3, [pc, #184]	@ (8001268 <HAL_TIM_IC_CaptureCallback+0x134>)
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	1ad2      	subs	r2, r2, r3
 80011b2:	68fb      	ldr	r3, [r7, #12]
 80011b4:	4413      	add	r3, r2
 80011b6:	3301      	adds	r3, #1
 80011b8:	617b      	str	r3, [r7, #20]
            lidar_distance_mm = pulse_width / 10;
 80011ba:	697b      	ldr	r3, [r7, #20]
 80011bc:	4a2b      	ldr	r2, [pc, #172]	@ (800126c <HAL_TIM_IC_CaptureCallback+0x138>)
 80011be:	fba2 2303 	umull	r2, r3, r2, r3
 80011c2:	08db      	lsrs	r3, r3, #3
 80011c4:	4a2a      	ldr	r2, [pc, #168]	@ (8001270 <HAL_TIM_IC_CaptureCallback+0x13c>)
 80011c6:	6013      	str	r3, [r2, #0]
            if (pulse_width < NO_DETECTION_THRESHOLD) {
 80011c8:	697b      	ldr	r3, [r7, #20]
 80011ca:	2b31      	cmp	r3, #49	@ 0x31
 80011cc:	d81c      	bhi.n	8001208 <HAL_TIM_IC_CaptureCallback+0xd4>
                no_detection_counter++;
 80011ce:	4b29      	ldr	r3, [pc, #164]	@ (8001274 <HAL_TIM_IC_CaptureCallback+0x140>)
 80011d0:	781b      	ldrb	r3, [r3, #0]
 80011d2:	3301      	adds	r3, #1
 80011d4:	b2da      	uxtb	r2, r3
 80011d6:	4b27      	ldr	r3, [pc, #156]	@ (8001274 <HAL_TIM_IC_CaptureCallback+0x140>)
 80011d8:	701a      	strb	r2, [r3, #0]
                if (no_detection_counter >= NO_DETECTION_COUNT_LIMIT) {
 80011da:	4b26      	ldr	r3, [pc, #152]	@ (8001274 <HAL_TIM_IC_CaptureCallback+0x140>)
 80011dc:	781b      	ldrb	r3, [r3, #0]
 80011de:	2b02      	cmp	r3, #2
 80011e0:	d928      	bls.n	8001234 <HAL_TIM_IC_CaptureCallback+0x100>
                    for (int i = 0; i < DISTANCE_FILTER_SIZE; i++) {
 80011e2:	2300      	movs	r3, #0
 80011e4:	613b      	str	r3, [r7, #16]
 80011e6:	e008      	b.n	80011fa <HAL_TIM_IC_CaptureCallback+0xc6>
                        distance_buffer[i] = NO_DETECTION_MM;
 80011e8:	4a23      	ldr	r2, [pc, #140]	@ (8001278 <HAL_TIM_IC_CaptureCallback+0x144>)
 80011ea:	693b      	ldr	r3, [r7, #16]
 80011ec:	f44f 7196 	mov.w	r1, #300	@ 0x12c
 80011f0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                    for (int i = 0; i < DISTANCE_FILTER_SIZE; i++) {
 80011f4:	693b      	ldr	r3, [r7, #16]
 80011f6:	3301      	adds	r3, #1
 80011f8:	613b      	str	r3, [r7, #16]
 80011fa:	693b      	ldr	r3, [r7, #16]
 80011fc:	2b04      	cmp	r3, #4
 80011fe:	ddf3      	ble.n	80011e8 <HAL_TIM_IC_CaptureCallback+0xb4>
                    distance_index = 0;
 8001200:	4b1e      	ldr	r3, [pc, #120]	@ (800127c <HAL_TIM_IC_CaptureCallback+0x148>)
 8001202:	2200      	movs	r2, #0
 8001204:	701a      	strb	r2, [r3, #0]
 8001206:	e015      	b.n	8001234 <HAL_TIM_IC_CaptureCallback+0x100>
                no_detection_counter = 0;
 8001208:	4b1a      	ldr	r3, [pc, #104]	@ (8001274 <HAL_TIM_IC_CaptureCallback+0x140>)
 800120a:	2200      	movs	r2, #0
 800120c:	701a      	strb	r2, [r3, #0]
                distance_buffer[distance_index++] = lidar_distance_mm;
 800120e:	4b1b      	ldr	r3, [pc, #108]	@ (800127c <HAL_TIM_IC_CaptureCallback+0x148>)
 8001210:	781b      	ldrb	r3, [r3, #0]
 8001212:	1c5a      	adds	r2, r3, #1
 8001214:	b2d1      	uxtb	r1, r2
 8001216:	4a19      	ldr	r2, [pc, #100]	@ (800127c <HAL_TIM_IC_CaptureCallback+0x148>)
 8001218:	7011      	strb	r1, [r2, #0]
 800121a:	4619      	mov	r1, r3
 800121c:	4b14      	ldr	r3, [pc, #80]	@ (8001270 <HAL_TIM_IC_CaptureCallback+0x13c>)
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	4a15      	ldr	r2, [pc, #84]	@ (8001278 <HAL_TIM_IC_CaptureCallback+0x144>)
 8001222:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
                if (distance_index >= DISTANCE_FILTER_SIZE) distance_index = 0;
 8001226:	4b15      	ldr	r3, [pc, #84]	@ (800127c <HAL_TIM_IC_CaptureCallback+0x148>)
 8001228:	781b      	ldrb	r3, [r3, #0]
 800122a:	2b04      	cmp	r3, #4
 800122c:	d902      	bls.n	8001234 <HAL_TIM_IC_CaptureCallback+0x100>
 800122e:	4b13      	ldr	r3, [pc, #76]	@ (800127c <HAL_TIM_IC_CaptureCallback+0x148>)
 8001230:	2200      	movs	r2, #0
 8001232:	701a      	strb	r2, [r3, #0]
            __HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_RISING);
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	6a1a      	ldr	r2, [r3, #32]
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	f022 020a 	bic.w	r2, r2, #10
 8001242:	621a      	str	r2, [r3, #32]
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	681a      	ldr	r2, [r3, #0]
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	6a12      	ldr	r2, [r2, #32]
 800124e:	621a      	str	r2, [r3, #32]
            last_edge_was_rising = true;
 8001250:	4b04      	ldr	r3, [pc, #16]	@ (8001264 <HAL_TIM_IC_CaptureCallback+0x130>)
 8001252:	2201      	movs	r2, #1
 8001254:	701a      	strb	r2, [r3, #0]
}
 8001256:	bf00      	nop
 8001258:	3718      	adds	r7, #24
 800125a:	46bd      	mov	sp, r7
 800125c:	bd80      	pop	{r7, pc}
 800125e:	bf00      	nop
 8001260:	40012c00 	.word	0x40012c00
 8001264:	20000000 	.word	0x20000000
 8001268:	200001b0 	.word	0x200001b0
 800126c:	cccccccd 	.word	0xcccccccd
 8001270:	20000114 	.word	0x20000114
 8001274:	200001b4 	.word	0x200001b4
 8001278:	200000fc 	.word	0x200000fc
 800127c:	20000110 	.word	0x20000110

08001280 <__io_putchar>:



// === IO FUNCTIONS ===

int __io_putchar(int ch) {
 8001280:	b580      	push	{r7, lr}
 8001282:	b082      	sub	sp, #8
 8001284:	af00      	add	r7, sp, #0
 8001286:	6078      	str	r0, [r7, #4]
    SerialOutputChar((uint8_t)ch, &USART1_PORT);
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	b2db      	uxtb	r3, r3
 800128c:	4904      	ldr	r1, [pc, #16]	@ (80012a0 <__io_putchar+0x20>)
 800128e:	4618      	mov	r0, r3
 8001290:	f000 ff78 	bl	8002184 <SerialOutputChar>
    return ch;
 8001294:	687b      	ldr	r3, [r7, #4]
}
 8001296:	4618      	mov	r0, r3
 8001298:	3708      	adds	r7, #8
 800129a:	46bd      	mov	sp, r7
 800129c:	bd80      	pop	{r7, pc}
 800129e:	bf00      	nop
 80012a0:	20000058 	.word	0x20000058

080012a4 <__io_getchar>:

int __io_getchar(void) {
 80012a4:	b580      	push	{r7, lr}
 80012a6:	af00      	add	r7, sp, #0
    return SerialGetChar(&USART1_PORT);
 80012a8:	4802      	ldr	r0, [pc, #8]	@ (80012b4 <__io_getchar+0x10>)
 80012aa:	f000 ff84 	bl	80021b6 <SerialGetChar>
 80012ae:	4603      	mov	r3, r0
}
 80012b0:	4618      	mov	r0, r3
 80012b2:	bd80      	pop	{r7, pc}
 80012b4:	20000058 	.word	0x20000058

080012b8 <delay_ms>:

void delay_ms(uint32_t ms) {
 80012b8:	b480      	push	{r7}
 80012ba:	b085      	sub	sp, #20
 80012bc:	af00      	add	r7, sp, #0
 80012be:	6078      	str	r0, [r7, #4]
    for (volatile uint32_t i = 0; i < ms * 615; i++);
 80012c0:	2300      	movs	r3, #0
 80012c2:	60fb      	str	r3, [r7, #12]
 80012c4:	e002      	b.n	80012cc <delay_ms+0x14>
 80012c6:	68fb      	ldr	r3, [r7, #12]
 80012c8:	3301      	adds	r3, #1
 80012ca:	60fb      	str	r3, [r7, #12]
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	f240 2267 	movw	r2, #615	@ 0x267
 80012d2:	fb03 f202 	mul.w	r2, r3, r2
 80012d6:	68fb      	ldr	r3, [r7, #12]
 80012d8:	429a      	cmp	r2, r3
 80012da:	d8f4      	bhi.n	80012c6 <delay_ms+0xe>
}
 80012dc:	bf00      	nop
 80012de:	bf00      	nop
 80012e0:	3714      	adds	r7, #20
 80012e2:	46bd      	mov	sp, r7
 80012e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e8:	4770      	bx	lr
	...

080012ec <Initialise_All>:



void Initialise_All(void) {
 80012ec:	b580      	push	{r7, lr}
 80012ee:	af00      	add	r7, sp, #0
    InitialisePE11AsInput();  // Input 1 (was PE7, originally PC4 / PA11)
 80012f0:	f000 f9a8 	bl	8001644 <InitialisePE11AsInput>
    InitialisePA2AsInput();
 80012f4:	f000 f9ee 	bl	80016d4 <InitialisePA2AsInput>
    InitialisePA3AsInput();
 80012f8:	f000 fa0c 	bl	8001714 <InitialisePA3AsInput>
    InitialisePE9AsInput();   // Input 2 (was PC5 / PA12)
 80012fc:	f000 f9c6 	bl	800168c <InitialisePE9AsInput>
    InitialisePA5AsInput(); //Potentiometer
 8001300:	f000 fa28 	bl	8001754 <InitialisePA5AsInput>
    InitialisePE7AsInput(); //Button riddle
 8001304:	f000 fa46 	bl	8001794 <InitialisePE7AsInput>
    SerialInitialise(BAUD_115200, &USART1_PORT, NULL);
 8001308:	2200      	movs	r2, #0
 800130a:	4903      	ldr	r1, [pc, #12]	@ (8001318 <Initialise_All+0x2c>)
 800130c:	2004      	movs	r0, #4
 800130e:	f000 febb 	bl	8002088 <SerialInitialise>
}
 8001312:	bf00      	nop
 8001314:	bd80      	pop	{r7, pc}
 8001316:	bf00      	nop
 8001318:	20000058 	.word	0x20000058

0800131c <main>:



// === MAIN LOOP ===

int main(void) {
 800131c:	b580      	push	{r7, lr}
 800131e:	b082      	sub	sp, #8
 8001320:	af00      	add	r7, sp, #0
    Initialise_All();
 8001322:	f7ff ffe3 	bl	80012ec <Initialise_All>

    uint8_t prev_pe11 = 0;
 8001326:	2300      	movs	r3, #0
 8001328:	71fb      	strb	r3, [r7, #7]
    uint8_t prev_pa2  = 0;
 800132a:	2300      	movs	r3, #0
 800132c:	71bb      	strb	r3, [r7, #6]
    uint8_t prev_pa3  = 0;
 800132e:	2300      	movs	r3, #0
 8001330:	717b      	strb	r3, [r7, #5]
    uint8_t prev_pe9  = 0;
 8001332:	2300      	movs	r3, #0
 8001334:	713b      	strb	r3, [r7, #4]

    printf("\r\r\n");
 8001336:	4864      	ldr	r0, [pc, #400]	@ (80014c8 <main+0x1ac>)
 8001338:	f001 fb58 	bl	80029ec <puts>
    delay_ms(3000);
 800133c:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8001340:	f7ff ffba 	bl	80012b8 <delay_ms>
    printf("\r\n Ahoy ye, scallywag! Ye've set sail on the perilous path to treasure!\r\n");
 8001344:	4861      	ldr	r0, [pc, #388]	@ (80014cc <main+0x1b0>)
 8001346:	f001 fb51 	bl	80029ec <puts>
    printf("Four cursed islands lie ahead, each holdin’ a test o’ wit, will, and courage.\r\n");
 800134a:	4861      	ldr	r0, [pc, #388]	@ (80014d0 <main+0x1b4>)
 800134c:	f001 fb4e 	bl	80029ec <puts>
    printf("Touch the start position ‘n see if ye be brave enough to face Island 1... Yo ho ho!\r\n");
 8001350:	4860      	ldr	r0, [pc, #384]	@ (80014d4 <main+0x1b8>)
 8001352:	f001 fb4b 	bl	80029ec <puts>

    while (1) {
        uint8_t pe11 = (GPIOE->IDR & (1 << 11)) != 0;  // Replaces PE7 / PC4 / PA11
 8001356:	4b60      	ldr	r3, [pc, #384]	@ (80014d8 <main+0x1bc>)
 8001358:	691b      	ldr	r3, [r3, #16]
 800135a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800135e:	2b00      	cmp	r3, #0
 8001360:	bf14      	ite	ne
 8001362:	2301      	movne	r3, #1
 8001364:	2300      	moveq	r3, #0
 8001366:	b2db      	uxtb	r3, r3
 8001368:	70fb      	strb	r3, [r7, #3]
        uint8_t pa2  = (GPIOA->IDR & (1 << 2))  != 0;
 800136a:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800136e:	691b      	ldr	r3, [r3, #16]
 8001370:	f003 0304 	and.w	r3, r3, #4
 8001374:	2b00      	cmp	r3, #0
 8001376:	bf14      	ite	ne
 8001378:	2301      	movne	r3, #1
 800137a:	2300      	moveq	r3, #0
 800137c:	b2db      	uxtb	r3, r3
 800137e:	70bb      	strb	r3, [r7, #2]
        uint8_t pa3  = (GPIOA->IDR & (1 << 3))  != 0;
 8001380:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8001384:	691b      	ldr	r3, [r3, #16]
 8001386:	f003 0308 	and.w	r3, r3, #8
 800138a:	2b00      	cmp	r3, #0
 800138c:	bf14      	ite	ne
 800138e:	2301      	movne	r3, #1
 8001390:	2300      	moveq	r3, #0
 8001392:	b2db      	uxtb	r3, r3
 8001394:	707b      	strb	r3, [r7, #1]
        uint8_t pe9  = (GPIOE->IDR & (1 << 9))  != 0;  // Replaces PC5 / PA12
 8001396:	4b50      	ldr	r3, [pc, #320]	@ (80014d8 <main+0x1bc>)
 8001398:	691b      	ldr	r3, [r3, #16]
 800139a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800139e:	2b00      	cmp	r3, #0
 80013a0:	bf14      	ite	ne
 80013a2:	2301      	movne	r3, #1
 80013a4:	2300      	moveq	r3, #0
 80013a6:	b2db      	uxtb	r3, r3
 80013a8:	703b      	strb	r3, [r7, #0]

        // Check for new press (rising edge)
        if (pe11 && !prev_pe11) {
 80013aa:	78fb      	ldrb	r3, [r7, #3]
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d018      	beq.n	80013e2 <main+0xc6>
 80013b0:	79fb      	ldrb	r3, [r7, #7]
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d115      	bne.n	80013e2 <main+0xc6>
            if (game_progress == 0b0000) {
 80013b6:	4b49      	ldr	r3, [pc, #292]	@ (80014dc <main+0x1c0>)
 80013b8:	781b      	ldrb	r3, [r3, #0]
 80013ba:	b2db      	uxtb	r3, r3
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d10c      	bne.n	80013da <main+0xbe>
            	printf("\r\nWelcome to the pirate ship!\r\n");
 80013c0:	4847      	ldr	r0, [pc, #284]	@ (80014e0 <main+0x1c4>)
 80013c2:	f001 fb13 	bl	80029ec <puts>
            	printf("\r\nSteer your ship to avoid the obstacles!\r\n");
 80013c6:	4847      	ldr	r0, [pc, #284]	@ (80014e4 <main+0x1c8>)
 80013c8:	f001 fb10 	bl	80029ec <puts>
            	printf("\r\nGOOOOO!!!!!\r\n");
 80013cc:	4846      	ldr	r0, [pc, #280]	@ (80014e8 <main+0x1cc>)
 80013ce:	f001 fb0d 	bl	80029ec <puts>
            	//lidar_game();
            	//SystemClock_HSI_8MHz();
            	//Initialise_All();

                game_progress = 0b00001;
 80013d2:	4b42      	ldr	r3, [pc, #264]	@ (80014dc <main+0x1c0>)
 80013d4:	2201      	movs	r2, #1
 80013d6:	701a      	strb	r2, [r3, #0]
            if (game_progress == 0b0000) {
 80013d8:	e069      	b.n	80014ae <main+0x192>
            } else {
                printf("\r\nYou cannot do this island!\r\n");
 80013da:	4844      	ldr	r0, [pc, #272]	@ (80014ec <main+0x1d0>)
 80013dc:	f001 fb06 	bl	80029ec <puts>
            if (game_progress == 0b0000) {
 80013e0:	e065      	b.n	80014ae <main+0x192>
            }
        } else if (pa2 && !prev_pa2) {
 80013e2:	78bb      	ldrb	r3, [r7, #2]
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d011      	beq.n	800140c <main+0xf0>
 80013e8:	79bb      	ldrb	r3, [r7, #6]
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d10e      	bne.n	800140c <main+0xf0>
            if (game_progress == 0b0001) {
 80013ee:	4b3b      	ldr	r3, [pc, #236]	@ (80014dc <main+0x1c0>)
 80013f0:	781b      	ldrb	r3, [r3, #0]
 80013f2:	b2db      	uxtb	r3, r3
 80013f4:	2b01      	cmp	r3, #1
 80013f6:	d105      	bne.n	8001404 <main+0xe8>
                riddle_game();
 80013f8:	f000 fbe2 	bl	8001bc0 <riddle_game>
                game_progress = 0b0010;
 80013fc:	4b37      	ldr	r3, [pc, #220]	@ (80014dc <main+0x1c0>)
 80013fe:	2202      	movs	r2, #2
 8001400:	701a      	strb	r2, [r3, #0]
            if (game_progress == 0b0001) {
 8001402:	e054      	b.n	80014ae <main+0x192>
            } else {
                printf("\r\nYou cannot do this island!\r\n");
 8001404:	4839      	ldr	r0, [pc, #228]	@ (80014ec <main+0x1d0>)
 8001406:	f001 faf1 	bl	80029ec <puts>
            if (game_progress == 0b0001) {
 800140a:	e050      	b.n	80014ae <main+0x192>
            }
        } else if (pa3 && !prev_pa3) {
 800140c:	787b      	ldrb	r3, [r7, #1]
 800140e:	2b00      	cmp	r3, #0
 8001410:	d00f      	beq.n	8001432 <main+0x116>
 8001412:	797b      	ldrb	r3, [r7, #5]
 8001414:	2b00      	cmp	r3, #0
 8001416:	d10c      	bne.n	8001432 <main+0x116>
            if (game_progress == 0b0010) {
 8001418:	4b30      	ldr	r3, [pc, #192]	@ (80014dc <main+0x1c0>)
 800141a:	781b      	ldrb	r3, [r3, #0]
 800141c:	b2db      	uxtb	r3, r3
 800141e:	2b02      	cmp	r3, #2
 8001420:	d103      	bne.n	800142a <main+0x10e>
                //led_game();
                game_progress = 0b0100;
 8001422:	4b2e      	ldr	r3, [pc, #184]	@ (80014dc <main+0x1c0>)
 8001424:	2204      	movs	r2, #4
 8001426:	701a      	strb	r2, [r3, #0]
            if (game_progress == 0b0010) {
 8001428:	e041      	b.n	80014ae <main+0x192>
            } else {
                printf("\r\nYou cannot do this island!\r\n");
 800142a:	4830      	ldr	r0, [pc, #192]	@ (80014ec <main+0x1d0>)
 800142c:	f001 fade 	bl	80029ec <puts>
            if (game_progress == 0b0010) {
 8001430:	e03d      	b.n	80014ae <main+0x192>
            }
        } else if (pe9 && !prev_pe9) {
 8001432:	783b      	ldrb	r3, [r7, #0]
 8001434:	2b00      	cmp	r3, #0
 8001436:	d03a      	beq.n	80014ae <main+0x192>
 8001438:	793b      	ldrb	r3, [r7, #4]
 800143a:	2b00      	cmp	r3, #0
 800143c:	d137      	bne.n	80014ae <main+0x192>
            if (game_progress == 0b0100) {
 800143e:	4b27      	ldr	r3, [pc, #156]	@ (80014dc <main+0x1c0>)
 8001440:	781b      	ldrb	r3, [r3, #0]
 8001442:	b2db      	uxtb	r3, r3
 8001444:	2b04      	cmp	r3, #4
 8001446:	d12f      	bne.n	80014a8 <main+0x18c>
            	// === Force PA5 to be digital input again ===
            	RCC->AHBENR |= RCC_AHBENR_GPIOAEN;
 8001448:	4b29      	ldr	r3, [pc, #164]	@ (80014f0 <main+0x1d4>)
 800144a:	695b      	ldr	r3, [r3, #20]
 800144c:	4a28      	ldr	r2, [pc, #160]	@ (80014f0 <main+0x1d4>)
 800144e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001452:	6153      	str	r3, [r2, #20]
            	GPIOA->MODER &= ~(3U << (5 * 2));   // Input mode
 8001454:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 800145e:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8001462:	6013      	str	r3, [r2, #0]
            	GPIOA->PUPDR &= ~(3U << (5 * 2));   // No pull-up/down
 8001464:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8001468:	68db      	ldr	r3, [r3, #12]
 800146a:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 800146e:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8001472:	60d3      	str	r3, [r2, #12]
            	GPIOA->AFR[0] &= ~(0xF << (5 * 4)); // Clear alternate function in case it was set
 8001474:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8001478:	6a1b      	ldr	r3, [r3, #32]
 800147a:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 800147e:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8001482:	6213      	str	r3, [r2, #32]

                potentiometer_game();
 8001484:	f000 f9aa 	bl	80017dc <potentiometer_game>
                printf("\r\nYou have opened the treasure! HOORAYYYYY!!!!!!\r\n");
 8001488:	481a      	ldr	r0, [pc, #104]	@ (80014f4 <main+0x1d8>)
 800148a:	f001 faaf 	bl	80029ec <puts>
                pirate_sound();
 800148e:	f7fe ff4d 	bl	800032c <pirate_sound>
                motor_init();
 8001492:	f000 f831 	bl	80014f8 <motor_init>
                motor_start_forward();
 8001496:	f000 f8c5 	bl	8001624 <motor_start_forward>
            	delay_ms(2000);
 800149a:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 800149e:	f7ff ff0b 	bl	80012b8 <delay_ms>
                motor_stop();
 80014a2:	f000 f8c7 	bl	8001634 <motor_stop>
 80014a6:	e002      	b.n	80014ae <main+0x192>
            } else {
                printf("\r\nYou cannot do this island!\r\n");
 80014a8:	4810      	ldr	r0, [pc, #64]	@ (80014ec <main+0x1d0>)
 80014aa:	f001 fa9f 	bl	80029ec <puts>
            }
        }

        // Save previous states
        prev_pe11 = pe11;
 80014ae:	78fb      	ldrb	r3, [r7, #3]
 80014b0:	71fb      	strb	r3, [r7, #7]
        prev_pa2  = pa2;
 80014b2:	78bb      	ldrb	r3, [r7, #2]
 80014b4:	71bb      	strb	r3, [r7, #6]
        prev_pa3  = pa3;
 80014b6:	787b      	ldrb	r3, [r7, #1]
 80014b8:	717b      	strb	r3, [r7, #5]
        prev_pe9  = pe9;
 80014ba:	783b      	ldrb	r3, [r7, #0]
 80014bc:	713b      	strb	r3, [r7, #4]

        delay_ms(100);  // Simple debounce delay
 80014be:	2064      	movs	r0, #100	@ 0x64
 80014c0:	f7ff fefa 	bl	80012b8 <delay_ms>
    while (1) {
 80014c4:	e747      	b.n	8001356 <main+0x3a>
 80014c6:	bf00      	nop
 80014c8:	08003838 	.word	0x08003838
 80014cc:	0800383c 	.word	0x0800383c
 80014d0:	08003888 	.word	0x08003888
 80014d4:	080038dc 	.word	0x080038dc
 80014d8:	48001000 	.word	0x48001000
 80014dc:	200001b5 	.word	0x200001b5
 80014e0:	08003934 	.word	0x08003934
 80014e4:	08003954 	.word	0x08003954
 80014e8:	08003980 	.word	0x08003980
 80014ec:	08003990 	.word	0x08003990
 80014f0:	40021000 	.word	0x40021000
 80014f4:	080039b0 	.word	0x080039b0

080014f8 <motor_init>:

#define SERVO_MIN_PULSE 500    // 0.5 ms
#define SERVO_MAX_PULSE 2500   // 2.5 ms
#define SERVO_PERIOD    20000  // 20 ms = 50 Hz

void motor_init(void) {
 80014f8:	b480      	push	{r7}
 80014fa:	af00      	add	r7, sp, #0
    // Enable GPIOD and TIM2 clocks
    RCC->AHBENR  |= RCC_AHBENR_GPIODEN;
 80014fc:	4b38      	ldr	r3, [pc, #224]	@ (80015e0 <motor_init+0xe8>)
 80014fe:	695b      	ldr	r3, [r3, #20]
 8001500:	4a37      	ldr	r2, [pc, #220]	@ (80015e0 <motor_init+0xe8>)
 8001502:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8001506:	6153      	str	r3, [r2, #20]
    RCC->APB1ENR |= RCC_APB1ENR_TIM2EN;
 8001508:	4b35      	ldr	r3, [pc, #212]	@ (80015e0 <motor_init+0xe8>)
 800150a:	69db      	ldr	r3, [r3, #28]
 800150c:	4a34      	ldr	r2, [pc, #208]	@ (80015e0 <motor_init+0xe8>)
 800150e:	f043 0301 	orr.w	r3, r3, #1
 8001512:	61d3      	str	r3, [r2, #28]

    // Set PD6 to Alternate Function mode (AF2 = TIM2_CH4)
    GPIOD->MODER &= ~(3 << (6 * 2));
 8001514:	4b33      	ldr	r3, [pc, #204]	@ (80015e4 <motor_init+0xec>)
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	4a32      	ldr	r2, [pc, #200]	@ (80015e4 <motor_init+0xec>)
 800151a:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800151e:	6013      	str	r3, [r2, #0]
    GPIOD->MODER |=  (2 << (6 * 2));
 8001520:	4b30      	ldr	r3, [pc, #192]	@ (80015e4 <motor_init+0xec>)
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	4a2f      	ldr	r2, [pc, #188]	@ (80015e4 <motor_init+0xec>)
 8001526:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800152a:	6013      	str	r3, [r2, #0]

    GPIOD->AFR[0] &= ~(0xF << (6 * 4));
 800152c:	4b2d      	ldr	r3, [pc, #180]	@ (80015e4 <motor_init+0xec>)
 800152e:	6a1b      	ldr	r3, [r3, #32]
 8001530:	4a2c      	ldr	r2, [pc, #176]	@ (80015e4 <motor_init+0xec>)
 8001532:	f023 6370 	bic.w	r3, r3, #251658240	@ 0xf000000
 8001536:	6213      	str	r3, [r2, #32]
    GPIOD->AFR[0] |=  (2 << (6 * 4));  // AF2 = TIM2_CH4
 8001538:	4b2a      	ldr	r3, [pc, #168]	@ (80015e4 <motor_init+0xec>)
 800153a:	6a1b      	ldr	r3, [r3, #32]
 800153c:	4a29      	ldr	r2, [pc, #164]	@ (80015e4 <motor_init+0xec>)
 800153e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001542:	6213      	str	r3, [r2, #32]

    // Prescaler: 8 MHz / (7 + 1) = 1 MHz (1 µs per tick)
    TIM2->PSC = 7;
 8001544:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001548:	2207      	movs	r2, #7
 800154a:	629a      	str	r2, [r3, #40]	@ 0x28

    // ARR = 20000 ticks → 20 ms period → 50 Hz
    TIM2->ARR = SERVO_PERIOD - 1;
 800154c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001550:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 8001554:	62da      	str	r2, [r3, #44]	@ 0x2c

    // Set default pulse width to center (1.5ms)
    TIM2->CCR4 = 1500;
 8001556:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800155a:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 800155e:	641a      	str	r2, [r3, #64]	@ 0x40

    // PWM mode 1 on CH4
    TIM2->CCMR2 &= ~TIM_CCMR2_OC4M;
 8001560:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001564:	69db      	ldr	r3, [r3, #28]
 8001566:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800156a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800156e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8001572:	61d3      	str	r3, [r2, #28]
    TIM2->CCMR2 |= (6 << TIM_CCMR2_OC4M_Pos); // PWM Mode 1
 8001574:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001578:	69db      	ldr	r3, [r3, #28]
 800157a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800157e:	f443 43c0 	orr.w	r3, r3, #24576	@ 0x6000
 8001582:	61d3      	str	r3, [r2, #28]
    TIM2->CCMR2 |= TIM_CCMR2_OC4PE;
 8001584:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001588:	69db      	ldr	r3, [r3, #28]
 800158a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800158e:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001592:	61d3      	str	r3, [r2, #28]

    TIM2->CCER |= TIM_CCER_CC4E;
 8001594:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001598:	6a1b      	ldr	r3, [r3, #32]
 800159a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800159e:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80015a2:	6213      	str	r3, [r2, #32]

    TIM2->CR1 |= TIM_CR1_ARPE;
 80015a4:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80015ae:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80015b2:	6013      	str	r3, [r2, #0]
    TIM2->EGR  |= TIM_EGR_UG;   // 🔥 Force update
 80015b4:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80015b8:	695b      	ldr	r3, [r3, #20]
 80015ba:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80015be:	f043 0301 	orr.w	r3, r3, #1
 80015c2:	6153      	str	r3, [r2, #20]
    TIM2->CR1 |= TIM_CR1_CEN;
 80015c4:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80015ce:	f043 0301 	orr.w	r3, r3, #1
 80015d2:	6013      	str	r3, [r2, #0]
}
 80015d4:	bf00      	nop
 80015d6:	46bd      	mov	sp, r7
 80015d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015dc:	4770      	bx	lr
 80015de:	bf00      	nop
 80015e0:	40021000 	.word	0x40021000
 80015e4:	48000c00 	.word	0x48000c00

080015e8 <motor_set_pulse>:
        ((SERVO_MAX_PULSE - SERVO_MIN_PULSE) * angle) / 180;

    TIM2->CCR4 = pulse;
}

void motor_set_pulse(uint16_t pulse) {
 80015e8:	b480      	push	{r7}
 80015ea:	b083      	sub	sp, #12
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	4603      	mov	r3, r0
 80015f0:	80fb      	strh	r3, [r7, #6]
    if (pulse < SERVO_MIN_PULSE) pulse = SERVO_MIN_PULSE;
 80015f2:	88fb      	ldrh	r3, [r7, #6]
 80015f4:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 80015f8:	d202      	bcs.n	8001600 <motor_set_pulse+0x18>
 80015fa:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 80015fe:	80fb      	strh	r3, [r7, #6]
    if (pulse > SERVO_MAX_PULSE) pulse = SERVO_MAX_PULSE;
 8001600:	88fb      	ldrh	r3, [r7, #6]
 8001602:	f640 12c4 	movw	r2, #2500	@ 0x9c4
 8001606:	4293      	cmp	r3, r2
 8001608:	d902      	bls.n	8001610 <motor_set_pulse+0x28>
 800160a:	f640 13c4 	movw	r3, #2500	@ 0x9c4
 800160e:	80fb      	strh	r3, [r7, #6]
    TIM2->CCR4 = pulse;
 8001610:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001614:	88fb      	ldrh	r3, [r7, #6]
 8001616:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8001618:	bf00      	nop
 800161a:	370c      	adds	r7, #12
 800161c:	46bd      	mov	sp, r7
 800161e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001622:	4770      	bx	lr

08001624 <motor_start_forward>:
}

void motor_close(void) {
    motor_set_angle(0);
}
void motor_start_forward(void) {
 8001624:	b580      	push	{r7, lr}
 8001626:	af00      	add	r7, sp, #0
    motor_set_pulse(1800);  // Adjust to tune speed/direction
 8001628:	f44f 60e1 	mov.w	r0, #1800	@ 0x708
 800162c:	f7ff ffdc 	bl	80015e8 <motor_set_pulse>
}
 8001630:	bf00      	nop
 8001632:	bd80      	pop	{r7, pc}

08001634 <motor_stop>:

void motor_start_reverse(void) {
    motor_set_pulse(1300);  // Adjust to tune speed/direction
}

void motor_stop(void) {
 8001634:	b580      	push	{r7, lr}
 8001636:	af00      	add	r7, sp, #0
    motor_set_pulse(1500);  // Neutral signal
 8001638:	f240 50dc 	movw	r0, #1500	@ 0x5dc
 800163c:	f7ff ffd4 	bl	80015e8 <motor_set_pulse>
}
 8001640:	bf00      	nop
 8001642:	bd80      	pop	{r7, pc}

08001644 <InitialisePE11AsInput>:



// === PIN INITIALISATION ===

void InitialisePE11AsInput(void) {  // Replaces PE7 (formerly PC4 / PA11)
 8001644:	b480      	push	{r7}
 8001646:	af00      	add	r7, sp, #0
    RCC->AHBENR |= RCC_AHBENR_GPIOEEN;
 8001648:	4b0e      	ldr	r3, [pc, #56]	@ (8001684 <InitialisePE11AsInput+0x40>)
 800164a:	695b      	ldr	r3, [r3, #20]
 800164c:	4a0d      	ldr	r2, [pc, #52]	@ (8001684 <InitialisePE11AsInput+0x40>)
 800164e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001652:	6153      	str	r3, [r2, #20]
    GPIOE->MODER &= ~(3U << (11 * 2));
 8001654:	4b0c      	ldr	r3, [pc, #48]	@ (8001688 <InitialisePE11AsInput+0x44>)
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	4a0b      	ldr	r2, [pc, #44]	@ (8001688 <InitialisePE11AsInput+0x44>)
 800165a:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 800165e:	6013      	str	r3, [r2, #0]
    GPIOE->PUPDR &= ~(3U << (11 * 2));
 8001660:	4b09      	ldr	r3, [pc, #36]	@ (8001688 <InitialisePE11AsInput+0x44>)
 8001662:	68db      	ldr	r3, [r3, #12]
 8001664:	4a08      	ldr	r2, [pc, #32]	@ (8001688 <InitialisePE11AsInput+0x44>)
 8001666:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 800166a:	60d3      	str	r3, [r2, #12]
    GPIOE->PUPDR |=  (2U << (11 * 2));  // Pull-down for stability
 800166c:	4b06      	ldr	r3, [pc, #24]	@ (8001688 <InitialisePE11AsInput+0x44>)
 800166e:	68db      	ldr	r3, [r3, #12]
 8001670:	4a05      	ldr	r2, [pc, #20]	@ (8001688 <InitialisePE11AsInput+0x44>)
 8001672:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8001676:	60d3      	str	r3, [r2, #12]
}
 8001678:	bf00      	nop
 800167a:	46bd      	mov	sp, r7
 800167c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001680:	4770      	bx	lr
 8001682:	bf00      	nop
 8001684:	40021000 	.word	0x40021000
 8001688:	48001000 	.word	0x48001000

0800168c <InitialisePE9AsInput>:

void InitialisePE9AsInput(void) {  // Still used (formerly PC5 / PA12)
 800168c:	b480      	push	{r7}
 800168e:	af00      	add	r7, sp, #0
    RCC->AHBENR |= RCC_AHBENR_GPIOEEN;
 8001690:	4b0e      	ldr	r3, [pc, #56]	@ (80016cc <InitialisePE9AsInput+0x40>)
 8001692:	695b      	ldr	r3, [r3, #20]
 8001694:	4a0d      	ldr	r2, [pc, #52]	@ (80016cc <InitialisePE9AsInput+0x40>)
 8001696:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800169a:	6153      	str	r3, [r2, #20]
    GPIOE->MODER &= ~(3U << (9 * 2));
 800169c:	4b0c      	ldr	r3, [pc, #48]	@ (80016d0 <InitialisePE9AsInput+0x44>)
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	4a0b      	ldr	r2, [pc, #44]	@ (80016d0 <InitialisePE9AsInput+0x44>)
 80016a2:	f423 2340 	bic.w	r3, r3, #786432	@ 0xc0000
 80016a6:	6013      	str	r3, [r2, #0]
    GPIOE->PUPDR &= ~(3U << (9 * 2));
 80016a8:	4b09      	ldr	r3, [pc, #36]	@ (80016d0 <InitialisePE9AsInput+0x44>)
 80016aa:	68db      	ldr	r3, [r3, #12]
 80016ac:	4a08      	ldr	r2, [pc, #32]	@ (80016d0 <InitialisePE9AsInput+0x44>)
 80016ae:	f423 2340 	bic.w	r3, r3, #786432	@ 0xc0000
 80016b2:	60d3      	str	r3, [r2, #12]
    GPIOE->PUPDR |=  (2U << (9 * 2));  // Pull-down for stability
 80016b4:	4b06      	ldr	r3, [pc, #24]	@ (80016d0 <InitialisePE9AsInput+0x44>)
 80016b6:	68db      	ldr	r3, [r3, #12]
 80016b8:	4a05      	ldr	r2, [pc, #20]	@ (80016d0 <InitialisePE9AsInput+0x44>)
 80016ba:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80016be:	60d3      	str	r3, [r2, #12]
}
 80016c0:	bf00      	nop
 80016c2:	46bd      	mov	sp, r7
 80016c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c8:	4770      	bx	lr
 80016ca:	bf00      	nop
 80016cc:	40021000 	.word	0x40021000
 80016d0:	48001000 	.word	0x48001000

080016d4 <InitialisePA2AsInput>:

void InitialisePA2AsInput(void) {    //island LDR 2
 80016d4:	b480      	push	{r7}
 80016d6:	af00      	add	r7, sp, #0
    RCC->AHBENR |= RCC_AHBENR_GPIOAEN;
 80016d8:	4b0d      	ldr	r3, [pc, #52]	@ (8001710 <InitialisePA2AsInput+0x3c>)
 80016da:	695b      	ldr	r3, [r3, #20]
 80016dc:	4a0c      	ldr	r2, [pc, #48]	@ (8001710 <InitialisePA2AsInput+0x3c>)
 80016de:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80016e2:	6153      	str	r3, [r2, #20]
    GPIOA->MODER &= ~(3U << (2 * 2));
 80016e4:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 80016ee:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 80016f2:	6013      	str	r3, [r2, #0]
    GPIOA->PUPDR &= ~(3U << (2 * 2));
 80016f4:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80016f8:	68db      	ldr	r3, [r3, #12]
 80016fa:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 80016fe:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8001702:	60d3      	str	r3, [r2, #12]
}
 8001704:	bf00      	nop
 8001706:	46bd      	mov	sp, r7
 8001708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800170c:	4770      	bx	lr
 800170e:	bf00      	nop
 8001710:	40021000 	.word	0x40021000

08001714 <InitialisePA3AsInput>:

void InitialisePA3AsInput(void) {    //island LDR 3
 8001714:	b480      	push	{r7}
 8001716:	af00      	add	r7, sp, #0
    RCC->AHBENR |= RCC_AHBENR_GPIOAEN;
 8001718:	4b0d      	ldr	r3, [pc, #52]	@ (8001750 <InitialisePA3AsInput+0x3c>)
 800171a:	695b      	ldr	r3, [r3, #20]
 800171c:	4a0c      	ldr	r2, [pc, #48]	@ (8001750 <InitialisePA3AsInput+0x3c>)
 800171e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001722:	6153      	str	r3, [r2, #20]
    GPIOA->MODER &= ~(3U << (3 * 2));
 8001724:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 800172e:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8001732:	6013      	str	r3, [r2, #0]
    GPIOA->PUPDR &= ~(3U << (3 * 2));
 8001734:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8001738:	68db      	ldr	r3, [r3, #12]
 800173a:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 800173e:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8001742:	60d3      	str	r3, [r2, #12]
}
 8001744:	bf00      	nop
 8001746:	46bd      	mov	sp, r7
 8001748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800174c:	4770      	bx	lr
 800174e:	bf00      	nop
 8001750:	40021000 	.word	0x40021000

08001754 <InitialisePA5AsInput>:

void InitialisePA5AsInput(void) {    //Potentiometer Input
 8001754:	b480      	push	{r7}
 8001756:	af00      	add	r7, sp, #0
    RCC->AHBENR |= RCC_AHBENR_GPIOAEN;
 8001758:	4b0d      	ldr	r3, [pc, #52]	@ (8001790 <InitialisePA5AsInput+0x3c>)
 800175a:	695b      	ldr	r3, [r3, #20]
 800175c:	4a0c      	ldr	r2, [pc, #48]	@ (8001790 <InitialisePA5AsInput+0x3c>)
 800175e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001762:	6153      	str	r3, [r2, #20]
    GPIOA->MODER &= ~(3U << (5 * 2));
 8001764:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 800176e:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8001772:	6013      	str	r3, [r2, #0]
    GPIOA->PUPDR &= ~(3U << (5 * 2));
 8001774:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8001778:	68db      	ldr	r3, [r3, #12]
 800177a:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 800177e:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8001782:	60d3      	str	r3, [r2, #12]
}
 8001784:	bf00      	nop
 8001786:	46bd      	mov	sp, r7
 8001788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800178c:	4770      	bx	lr
 800178e:	bf00      	nop
 8001790:	40021000 	.word	0x40021000

08001794 <InitialisePE7AsInput>:

void InitialisePE7AsInput(void) {  //Riddle Button Input
 8001794:	b480      	push	{r7}
 8001796:	af00      	add	r7, sp, #0
    RCC->AHBENR |= RCC_AHBENR_GPIOEEN;
 8001798:	4b0e      	ldr	r3, [pc, #56]	@ (80017d4 <InitialisePE7AsInput+0x40>)
 800179a:	695b      	ldr	r3, [r3, #20]
 800179c:	4a0d      	ldr	r2, [pc, #52]	@ (80017d4 <InitialisePE7AsInput+0x40>)
 800179e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80017a2:	6153      	str	r3, [r2, #20]
    GPIOE->MODER &= ~(3U << (7 * 2));
 80017a4:	4b0c      	ldr	r3, [pc, #48]	@ (80017d8 <InitialisePE7AsInput+0x44>)
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	4a0b      	ldr	r2, [pc, #44]	@ (80017d8 <InitialisePE7AsInput+0x44>)
 80017aa:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80017ae:	6013      	str	r3, [r2, #0]
    GPIOE->PUPDR &= ~(3U << (7 * 2));
 80017b0:	4b09      	ldr	r3, [pc, #36]	@ (80017d8 <InitialisePE7AsInput+0x44>)
 80017b2:	68db      	ldr	r3, [r3, #12]
 80017b4:	4a08      	ldr	r2, [pc, #32]	@ (80017d8 <InitialisePE7AsInput+0x44>)
 80017b6:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80017ba:	60d3      	str	r3, [r2, #12]
    GPIOE->PUPDR |=  (2U << (7 * 2));  // Pull-down for stability
 80017bc:	4b06      	ldr	r3, [pc, #24]	@ (80017d8 <InitialisePE7AsInput+0x44>)
 80017be:	68db      	ldr	r3, [r3, #12]
 80017c0:	4a05      	ldr	r2, [pc, #20]	@ (80017d8 <InitialisePE7AsInput+0x44>)
 80017c2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80017c6:	60d3      	str	r3, [r2, #12]
}
 80017c8:	bf00      	nop
 80017ca:	46bd      	mov	sp, r7
 80017cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d0:	4770      	bx	lr
 80017d2:	bf00      	nop
 80017d4:	40021000 	.word	0x40021000
 80017d8:	48001000 	.word	0x48001000

080017dc <potentiometer_game>:
void delay_ms(uint32_t ms);

int __io_getchar(void);


void potentiometer_game(void) {
 80017dc:	b580      	push	{r7, lr}
 80017de:	b088      	sub	sp, #32
 80017e0:	af00      	add	r7, sp, #0
	// Start TIM2 for random seeding
	RCC->APB1ENR |= RCC_APB1ENR_TIM2EN;
 80017e2:	4b7c      	ldr	r3, [pc, #496]	@ (80019d4 <potentiometer_game+0x1f8>)
 80017e4:	69db      	ldr	r3, [r3, #28]
 80017e6:	4a7b      	ldr	r2, [pc, #492]	@ (80019d4 <potentiometer_game+0x1f8>)
 80017e8:	f043 0301 	orr.w	r3, r3, #1
 80017ec:	61d3      	str	r3, [r2, #28]
	TIM2->PSC = 7999;
 80017ee:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80017f2:	f641 723f 	movw	r2, #7999	@ 0x1f3f
 80017f6:	629a      	str	r2, [r3, #40]	@ 0x28
	TIM2->ARR = 0xFFFFFFFF;
 80017f8:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80017fc:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001800:	62da      	str	r2, [r3, #44]	@ 0x2c
	TIM2->CR1 |= TIM_CR1_CEN;
 8001802:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800180c:	f043 0301 	orr.w	r3, r3, #1
 8001810:	6013      	str	r3, [r2, #0]

	while (1) {
		// === Start message ===
		 printf("\r");
 8001812:	200d      	movs	r0, #13
 8001814:	f001 f88c 	bl	8002930 <putchar>
		delay_ms(1000);
 8001818:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800181c:	f7ff fd4c 	bl	80012b8 <delay_ms>
		printf("YOU HAVE FOUND THE TREASURE, BUT IT IS LOCKED!\r\n");
 8001820:	486d      	ldr	r0, [pc, #436]	@ (80019d8 <potentiometer_game+0x1fc>)
 8001822:	f001 f8e3 	bl	80029ec <puts>
		printf("To crack the code and open the treasure chest, you must solve each question and answer within 4 Seconds!\r\n");
 8001826:	486d      	ldr	r0, [pc, #436]	@ (80019dc <potentiometer_game+0x200>)
 8001828:	f001 f8e0 	bl	80029ec <puts>
		printf("Odd answer = Twist LEFT\r\n");
 800182c:	486c      	ldr	r0, [pc, #432]	@ (80019e0 <potentiometer_game+0x204>)
 800182e:	f001 f8dd 	bl	80029ec <puts>
		printf("Even answer = Twist RIGHT\r\n");
 8001832:	486c      	ldr	r0, [pc, #432]	@ (80019e4 <potentiometer_game+0x208>)
 8001834:	f001 f8da 	bl	80029ec <puts>
		printf("Press ENTER to begin...\r\n");
 8001838:	486b      	ldr	r0, [pc, #428]	@ (80019e8 <potentiometer_game+0x20c>)
 800183a:	f001 f8d7 	bl	80029ec <puts>

		// Wait for Enter key
		while (1) {
			char c = __io_getchar();
 800183e:	f7ff fd31 	bl	80012a4 <__io_getchar>
 8001842:	4603      	mov	r3, r0
 8001844:	75fb      	strb	r3, [r7, #23]
			if (c == '\r' || c == '\n') break;
 8001846:	7dfb      	ldrb	r3, [r7, #23]
 8001848:	2b0d      	cmp	r3, #13
 800184a:	d003      	beq.n	8001854 <potentiometer_game+0x78>
 800184c:	7dfb      	ldrb	r3, [r7, #23]
 800184e:	2b0a      	cmp	r3, #10
 8001850:	d000      	beq.n	8001854 <potentiometer_game+0x78>
		while (1) {
 8001852:	e7f4      	b.n	800183e <potentiometer_game+0x62>
		}

		printf("Ready???\r\n\r\n");
 8001854:	4865      	ldr	r0, [pc, #404]	@ (80019ec <potentiometer_game+0x210>)
 8001856:	f001 f8c9 	bl	80029ec <puts>
		delay_ms(2000);
 800185a:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 800185e:	f7ff fd2b 	bl	80012b8 <delay_ms>

		// Seed randomness using TIM2 count
		srand(TIM2->CNT);
 8001862:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001866:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001868:	4618      	mov	r0, r3
 800186a:	f000 fe9d 	bl	80025a8 <srand>

		int score = 0;
 800186e:	2300      	movs	r3, #0
 8001870:	61fb      	str	r3, [r7, #28]

		while (score < 10) {
 8001872:	e092      	b.n	800199a <potentiometer_game+0x1be>
			int a = (rand() % 20) + 1;  // 1–20
 8001874:	f000 fec6 	bl	8002604 <rand>
 8001878:	4601      	mov	r1, r0
 800187a:	4b5d      	ldr	r3, [pc, #372]	@ (80019f0 <potentiometer_game+0x214>)
 800187c:	fb83 2301 	smull	r2, r3, r3, r1
 8001880:	10da      	asrs	r2, r3, #3
 8001882:	17cb      	asrs	r3, r1, #31
 8001884:	1ad2      	subs	r2, r2, r3
 8001886:	4613      	mov	r3, r2
 8001888:	009b      	lsls	r3, r3, #2
 800188a:	4413      	add	r3, r2
 800188c:	009b      	lsls	r3, r3, #2
 800188e:	1aca      	subs	r2, r1, r3
 8001890:	1c53      	adds	r3, r2, #1
 8001892:	613b      	str	r3, [r7, #16]
			int b = (rand() % 20) + 1;
 8001894:	f000 feb6 	bl	8002604 <rand>
 8001898:	4601      	mov	r1, r0
 800189a:	4b55      	ldr	r3, [pc, #340]	@ (80019f0 <potentiometer_game+0x214>)
 800189c:	fb83 2301 	smull	r2, r3, r3, r1
 80018a0:	10da      	asrs	r2, r3, #3
 80018a2:	17cb      	asrs	r3, r1, #31
 80018a4:	1ad2      	subs	r2, r2, r3
 80018a6:	4613      	mov	r3, r2
 80018a8:	009b      	lsls	r3, r3, #2
 80018aa:	4413      	add	r3, r2
 80018ac:	009b      	lsls	r3, r3, #2
 80018ae:	1aca      	subs	r2, r1, r3
 80018b0:	1c53      	adds	r3, r2, #1
 80018b2:	60fb      	str	r3, [r7, #12]
			int result;

			// Transition message before Q6
			if (score == 5) {
 80018b4:	69fb      	ldr	r3, [r7, #28]
 80018b6:	2b05      	cmp	r3, #5
 80018b8:	d10d      	bne.n	80018d6 <potentiometer_game+0xfa>
				printf("\r\nThat was too easy. Let's spice it up...\r\n");
 80018ba:	484e      	ldr	r0, [pc, #312]	@ (80019f4 <potentiometer_game+0x218>)
 80018bc:	f001 f896 	bl	80029ec <puts>
				delay_ms(2000);
 80018c0:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80018c4:	f7ff fcf8 	bl	80012b8 <delay_ms>
				printf("Ready???\r\n\r\n");
 80018c8:	4848      	ldr	r0, [pc, #288]	@ (80019ec <potentiometer_game+0x210>)
 80018ca:	f001 f88f 	bl	80029ec <puts>
			   delay_ms(2000);
 80018ce:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80018d2:	f7ff fcf1 	bl	80012b8 <delay_ms>
			}

			if (score < 5) {
 80018d6:	69fb      	ldr	r3, [r7, #28]
 80018d8:	2b04      	cmp	r3, #4
 80018da:	dc09      	bgt.n	80018f0 <potentiometer_game+0x114>
				result = a + b;
 80018dc:	693a      	ldr	r2, [r7, #16]
 80018de:	68fb      	ldr	r3, [r7, #12]
 80018e0:	4413      	add	r3, r2
 80018e2:	61bb      	str	r3, [r7, #24]
				printf("\r\n%d + %d\r\n", a, b);
 80018e4:	68fa      	ldr	r2, [r7, #12]
 80018e6:	6939      	ldr	r1, [r7, #16]
 80018e8:	4843      	ldr	r0, [pc, #268]	@ (80019f8 <potentiometer_game+0x21c>)
 80018ea:	f001 f80f 	bl	800290c <iprintf>
 80018ee:	e009      	b.n	8001904 <potentiometer_game+0x128>
			} else {
				result = a * b;
 80018f0:	693b      	ldr	r3, [r7, #16]
 80018f2:	68fa      	ldr	r2, [r7, #12]
 80018f4:	fb02 f303 	mul.w	r3, r2, r3
 80018f8:	61bb      	str	r3, [r7, #24]
				printf("\r\n%d x %d\r\n", a, b);
 80018fa:	68fa      	ldr	r2, [r7, #12]
 80018fc:	6939      	ldr	r1, [r7, #16]
 80018fe:	483f      	ldr	r0, [pc, #252]	@ (80019fc <potentiometer_game+0x220>)
 8001900:	f001 f804 	bl	800290c <iprintf>
			}

			delay_ms(4000);  // Wait 4 seconds
 8001904:	f44f 607a 	mov.w	r0, #4000	@ 0xfa0
 8001908:	f7ff fcd6 	bl	80012b8 <delay_ms>

			uint8_t input_state = (GPIOA->IDR & (1 << 5)) ? 1 : 0;
 800190c:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8001910:	691b      	ldr	r3, [r3, #16]
 8001912:	f003 0320 	and.w	r3, r3, #32
 8001916:	2b00      	cmp	r3, #0
 8001918:	bf14      	ite	ne
 800191a:	2301      	movne	r3, #1
 800191c:	2300      	moveq	r3, #0
 800191e:	b2db      	uxtb	r3, r3
 8001920:	72fb      	strb	r3, [r7, #11]
			int is_even = (result % 2 == 0);
 8001922:	69bb      	ldr	r3, [r7, #24]
 8001924:	f003 0301 	and.w	r3, r3, #1
 8001928:	2b00      	cmp	r3, #0
 800192a:	bf0c      	ite	eq
 800192c:	2301      	moveq	r3, #1
 800192e:	2300      	movne	r3, #0
 8001930:	b2db      	uxtb	r3, r3
 8001932:	607b      	str	r3, [r7, #4]

			if ((is_even && input_state == 1) || (!is_even && input_state == 0)) {
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	2b00      	cmp	r3, #0
 8001938:	d002      	beq.n	8001940 <potentiometer_game+0x164>
 800193a:	7afb      	ldrb	r3, [r7, #11]
 800193c:	2b01      	cmp	r3, #1
 800193e:	d005      	beq.n	800194c <potentiometer_game+0x170>
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	2b00      	cmp	r3, #0
 8001944:	d117      	bne.n	8001976 <potentiometer_game+0x19a>
 8001946:	7afb      	ldrb	r3, [r7, #11]
 8001948:	2b00      	cmp	r3, #0
 800194a:	d114      	bne.n	8001976 <potentiometer_game+0x19a>
				printf("Correct! %d is %s.\r\n", result, is_even ? "even" : "odd");
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	2b00      	cmp	r3, #0
 8001950:	d001      	beq.n	8001956 <potentiometer_game+0x17a>
 8001952:	4b2b      	ldr	r3, [pc, #172]	@ (8001a00 <potentiometer_game+0x224>)
 8001954:	e000      	b.n	8001958 <potentiometer_game+0x17c>
 8001956:	4b2b      	ldr	r3, [pc, #172]	@ (8001a04 <potentiometer_game+0x228>)
 8001958:	461a      	mov	r2, r3
 800195a:	69b9      	ldr	r1, [r7, #24]
 800195c:	482a      	ldr	r0, [pc, #168]	@ (8001a08 <potentiometer_game+0x22c>)
 800195e:	f000 ffd5 	bl	800290c <iprintf>
				GPIOE->ODR |= (1 << 8);
 8001962:	4b2a      	ldr	r3, [pc, #168]	@ (8001a0c <potentiometer_game+0x230>)
 8001964:	695b      	ldr	r3, [r3, #20]
 8001966:	4a29      	ldr	r2, [pc, #164]	@ (8001a0c <potentiometer_game+0x230>)
 8001968:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800196c:	6153      	str	r3, [r2, #20]
				score++;
 800196e:	69fb      	ldr	r3, [r7, #28]
 8001970:	3301      	adds	r3, #1
 8001972:	61fb      	str	r3, [r7, #28]
 8001974:	e011      	b.n	800199a <potentiometer_game+0x1be>
			} else {
				printf("Incorrect. %d is %s. You failed.\r\n", result, is_even ? "even" : "odd");
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	2b00      	cmp	r3, #0
 800197a:	d001      	beq.n	8001980 <potentiometer_game+0x1a4>
 800197c:	4b20      	ldr	r3, [pc, #128]	@ (8001a00 <potentiometer_game+0x224>)
 800197e:	e000      	b.n	8001982 <potentiometer_game+0x1a6>
 8001980:	4b20      	ldr	r3, [pc, #128]	@ (8001a04 <potentiometer_game+0x228>)
 8001982:	461a      	mov	r2, r3
 8001984:	69b9      	ldr	r1, [r7, #24]
 8001986:	4822      	ldr	r0, [pc, #136]	@ (8001a10 <potentiometer_game+0x234>)
 8001988:	f000 ffc0 	bl	800290c <iprintf>
				GPIOE->ODR &= ~(1 << 8);
 800198c:	4b1f      	ldr	r3, [pc, #124]	@ (8001a0c <potentiometer_game+0x230>)
 800198e:	695b      	ldr	r3, [r3, #20]
 8001990:	4a1e      	ldr	r2, [pc, #120]	@ (8001a0c <potentiometer_game+0x230>)
 8001992:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001996:	6153      	str	r3, [r2, #20]
				break;
 8001998:	e003      	b.n	80019a2 <potentiometer_game+0x1c6>
		while (score < 10) {
 800199a:	69fb      	ldr	r3, [r7, #28]
 800199c:	2b09      	cmp	r3, #9
 800199e:	f77f af69 	ble.w	8001874 <potentiometer_game+0x98>
			}
		}


		if (score == 10) {
 80019a2:	69fb      	ldr	r3, [r7, #28]
 80019a4:	2b0a      	cmp	r3, #10
 80019a6:	d104      	bne.n	80019b2 <potentiometer_game+0x1d6>
			printf("\r\n YOU WIN! The treasure is yours!\r\n");
 80019a8:	481a      	ldr	r0, [pc, #104]	@ (8001a14 <potentiometer_game+0x238>)
 80019aa:	f001 f81f 	bl	80029ec <puts>
			while (1) {
 80019ae:	bf00      	nop
 80019b0:	e7fd      	b.n	80019ae <potentiometer_game+0x1d2>

			}
			//game_progress |= 0b1000;  // Set bit 1 after success
		}

		printf("\r\nPress ENTER to try again...\r\n");
 80019b2:	4819      	ldr	r0, [pc, #100]	@ (8001a18 <potentiometer_game+0x23c>)
 80019b4:	f001 f81a 	bl	80029ec <puts>
		while (1) {
			char c = __io_getchar();
 80019b8:	f7ff fc74 	bl	80012a4 <__io_getchar>
 80019bc:	4603      	mov	r3, r0
 80019be:	70fb      	strb	r3, [r7, #3]
			if (c == '\r' || c == '\n') break;
 80019c0:	78fb      	ldrb	r3, [r7, #3]
 80019c2:	2b0d      	cmp	r3, #13
 80019c4:	f43f af25 	beq.w	8001812 <potentiometer_game+0x36>
 80019c8:	78fb      	ldrb	r3, [r7, #3]
 80019ca:	2b0a      	cmp	r3, #10
 80019cc:	f43f af21 	beq.w	8001812 <potentiometer_game+0x36>
		while (1) {
 80019d0:	e7f2      	b.n	80019b8 <potentiometer_game+0x1dc>
 80019d2:	bf00      	nop
 80019d4:	40021000 	.word	0x40021000
 80019d8:	080039e4 	.word	0x080039e4
 80019dc:	08003a14 	.word	0x08003a14
 80019e0:	08003a80 	.word	0x08003a80
 80019e4:	08003a9c 	.word	0x08003a9c
 80019e8:	08003ab8 	.word	0x08003ab8
 80019ec:	08003ad4 	.word	0x08003ad4
 80019f0:	66666667 	.word	0x66666667
 80019f4:	08003ae0 	.word	0x08003ae0
 80019f8:	08003b0c 	.word	0x08003b0c
 80019fc:	08003b18 	.word	0x08003b18
 8001a00:	08003b24 	.word	0x08003b24
 8001a04:	08003b2c 	.word	0x08003b2c
 8001a08:	08003b30 	.word	0x08003b30
 8001a0c:	48001000 	.word	0x48001000
 8001a10:	08003b48 	.word	0x08003b48
 8001a14:	08003b6c 	.word	0x08003b6c
 8001a18:	08003b90 	.word	0x08003b90

08001a1c <ToLowerCase>:
void SysTick_Init(void) {
    SysTick_Config(SystemCoreClock / 1000);  // 1 ms tick
}


static void ToLowerCase(char *str) {
 8001a1c:	b480      	push	{r7}
 8001a1e:	b085      	sub	sp, #20
 8001a20:	af00      	add	r7, sp, #0
 8001a22:	6078      	str	r0, [r7, #4]
    while (*str) {
 8001a24:	e015      	b.n	8001a52 <ToLowerCase+0x36>
        *str = tolower((unsigned char)*str);
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	781b      	ldrb	r3, [r3, #0]
 8001a2a:	73fb      	strb	r3, [r7, #15]
 8001a2c:	7bfb      	ldrb	r3, [r7, #15]
 8001a2e:	3301      	adds	r3, #1
 8001a30:	4a0d      	ldr	r2, [pc, #52]	@ (8001a68 <ToLowerCase+0x4c>)
 8001a32:	4413      	add	r3, r2
 8001a34:	781b      	ldrb	r3, [r3, #0]
 8001a36:	f003 0303 	and.w	r3, r3, #3
 8001a3a:	2b01      	cmp	r3, #1
 8001a3c:	d102      	bne.n	8001a44 <ToLowerCase+0x28>
 8001a3e:	7bfb      	ldrb	r3, [r7, #15]
 8001a40:	3320      	adds	r3, #32
 8001a42:	e000      	b.n	8001a46 <ToLowerCase+0x2a>
 8001a44:	7bfb      	ldrb	r3, [r7, #15]
 8001a46:	b2da      	uxtb	r2, r3
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	701a      	strb	r2, [r3, #0]
        str++;
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	3301      	adds	r3, #1
 8001a50:	607b      	str	r3, [r7, #4]
    while (*str) {
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	781b      	ldrb	r3, [r3, #0]
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d1e5      	bne.n	8001a26 <ToLowerCase+0xa>
    }
}
 8001a5a:	bf00      	nop
 8001a5c:	bf00      	nop
 8001a5e:	3714      	adds	r7, #20
 8001a60:	46bd      	mov	sp, r7
 8001a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a66:	4770      	bx	lr
 8001a68:	08004257 	.word	0x08004257

08001a6c <CaesarCipher>:

//----------------- Game Flow Submodules----------------------------------
static void CaesarCipher(char *dest, const char *src, int shift) {
 8001a6c:	b480      	push	{r7}
 8001a6e:	b087      	sub	sp, #28
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	60f8      	str	r0, [r7, #12]
 8001a74:	60b9      	str	r1, [r7, #8]
 8001a76:	607a      	str	r2, [r7, #4]
    while (*src) {
 8001a78:	e039      	b.n	8001aee <CaesarCipher+0x82>
        if (isalpha(*src)) {
 8001a7a:	68bb      	ldr	r3, [r7, #8]
 8001a7c:	781b      	ldrb	r3, [r3, #0]
 8001a7e:	3301      	adds	r3, #1
 8001a80:	4a21      	ldr	r2, [pc, #132]	@ (8001b08 <CaesarCipher+0x9c>)
 8001a82:	4413      	add	r3, r2
 8001a84:	781b      	ldrb	r3, [r3, #0]
 8001a86:	f003 0303 	and.w	r3, r3, #3
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d025      	beq.n	8001ada <CaesarCipher+0x6e>
            char base = islower(*src) ? 'a' : 'A';
 8001a8e:	68bb      	ldr	r3, [r7, #8]
 8001a90:	781b      	ldrb	r3, [r3, #0]
 8001a92:	3301      	adds	r3, #1
 8001a94:	4a1c      	ldr	r2, [pc, #112]	@ (8001b08 <CaesarCipher+0x9c>)
 8001a96:	4413      	add	r3, r2
 8001a98:	781b      	ldrb	r3, [r3, #0]
 8001a9a:	f003 0303 	and.w	r3, r3, #3
 8001a9e:	2b02      	cmp	r3, #2
 8001aa0:	d101      	bne.n	8001aa6 <CaesarCipher+0x3a>
 8001aa2:	2361      	movs	r3, #97	@ 0x61
 8001aa4:	e000      	b.n	8001aa8 <CaesarCipher+0x3c>
 8001aa6:	2341      	movs	r3, #65	@ 0x41
 8001aa8:	75fb      	strb	r3, [r7, #23]
            *dest = (char)(((*src - base + shift) % 26) + base);
 8001aaa:	68bb      	ldr	r3, [r7, #8]
 8001aac:	781b      	ldrb	r3, [r3, #0]
 8001aae:	461a      	mov	r2, r3
 8001ab0:	7dfb      	ldrb	r3, [r7, #23]
 8001ab2:	1ad2      	subs	r2, r2, r3
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	4413      	add	r3, r2
 8001ab8:	4a14      	ldr	r2, [pc, #80]	@ (8001b0c <CaesarCipher+0xa0>)
 8001aba:	fb82 1203 	smull	r1, r2, r2, r3
 8001abe:	10d1      	asrs	r1, r2, #3
 8001ac0:	17da      	asrs	r2, r3, #31
 8001ac2:	1a8a      	subs	r2, r1, r2
 8001ac4:	211a      	movs	r1, #26
 8001ac6:	fb01 f202 	mul.w	r2, r1, r2
 8001aca:	1a9a      	subs	r2, r3, r2
 8001acc:	b2d2      	uxtb	r2, r2
 8001ace:	7dfb      	ldrb	r3, [r7, #23]
 8001ad0:	4413      	add	r3, r2
 8001ad2:	b2da      	uxtb	r2, r3
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	701a      	strb	r2, [r3, #0]
 8001ad8:	e003      	b.n	8001ae2 <CaesarCipher+0x76>
        } else {
            *dest = *src;
 8001ada:	68bb      	ldr	r3, [r7, #8]
 8001adc:	781a      	ldrb	r2, [r3, #0]
 8001ade:	68fb      	ldr	r3, [r7, #12]
 8001ae0:	701a      	strb	r2, [r3, #0]
        }
        src++;
 8001ae2:	68bb      	ldr	r3, [r7, #8]
 8001ae4:	3301      	adds	r3, #1
 8001ae6:	60bb      	str	r3, [r7, #8]
        dest++;
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	3301      	adds	r3, #1
 8001aec:	60fb      	str	r3, [r7, #12]
    while (*src) {
 8001aee:	68bb      	ldr	r3, [r7, #8]
 8001af0:	781b      	ldrb	r3, [r3, #0]
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d1c1      	bne.n	8001a7a <CaesarCipher+0xe>
    }
    *dest = '\0';
 8001af6:	68fb      	ldr	r3, [r7, #12]
 8001af8:	2200      	movs	r2, #0
 8001afa:	701a      	strb	r2, [r3, #0]
}
 8001afc:	bf00      	nop
 8001afe:	371c      	adds	r7, #28
 8001b00:	46bd      	mov	sp, r7
 8001b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b06:	4770      	bx	lr
 8001b08:	08004257 	.word	0x08004257
 8001b0c:	4ec4ec4f 	.word	0x4ec4ec4f

08001b10 <AskMathQuestion>:
}




static void AskMathQuestion(void) {
 8001b10:	b580      	push	{r7, lr}
 8001b12:	af00      	add	r7, sp, #0
    do {
        math_1 = rand() % 5;
 8001b14:	f000 fd76 	bl	8002604 <rand>
 8001b18:	4601      	mov	r1, r0
 8001b1a:	4b19      	ldr	r3, [pc, #100]	@ (8001b80 <AskMathQuestion+0x70>)
 8001b1c:	fb83 2301 	smull	r2, r3, r3, r1
 8001b20:	105a      	asrs	r2, r3, #1
 8001b22:	17cb      	asrs	r3, r1, #31
 8001b24:	1ad2      	subs	r2, r2, r3
 8001b26:	4613      	mov	r3, r2
 8001b28:	009b      	lsls	r3, r3, #2
 8001b2a:	4413      	add	r3, r2
 8001b2c:	1aca      	subs	r2, r1, r3
 8001b2e:	4b15      	ldr	r3, [pc, #84]	@ (8001b84 <AskMathQuestion+0x74>)
 8001b30:	601a      	str	r2, [r3, #0]
        math_2 = rand() % 5;
 8001b32:	f000 fd67 	bl	8002604 <rand>
 8001b36:	4601      	mov	r1, r0
 8001b38:	4b11      	ldr	r3, [pc, #68]	@ (8001b80 <AskMathQuestion+0x70>)
 8001b3a:	fb83 2301 	smull	r2, r3, r3, r1
 8001b3e:	105a      	asrs	r2, r3, #1
 8001b40:	17cb      	asrs	r3, r1, #31
 8001b42:	1ad2      	subs	r2, r2, r3
 8001b44:	4613      	mov	r3, r2
 8001b46:	009b      	lsls	r3, r3, #2
 8001b48:	4413      	add	r3, r2
 8001b4a:	1aca      	subs	r2, r1, r3
 8001b4c:	4b0e      	ldr	r3, [pc, #56]	@ (8001b88 <AskMathQuestion+0x78>)
 8001b4e:	601a      	str	r2, [r3, #0]
        math_answer = math_1 + math_2;
 8001b50:	4b0c      	ldr	r3, [pc, #48]	@ (8001b84 <AskMathQuestion+0x74>)
 8001b52:	681a      	ldr	r2, [r3, #0]
 8001b54:	4b0c      	ldr	r3, [pc, #48]	@ (8001b88 <AskMathQuestion+0x78>)
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	4413      	add	r3, r2
 8001b5a:	4a0c      	ldr	r2, [pc, #48]	@ (8001b8c <AskMathQuestion+0x7c>)
 8001b5c:	6013      	str	r3, [r2, #0]
    } while (math_answer == 0);  // Avoid 0 + 0
 8001b5e:	4b0b      	ldr	r3, [pc, #44]	@ (8001b8c <AskMathQuestion+0x7c>)
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d0d6      	beq.n	8001b14 <AskMathQuestion+0x4>

    printf("\r\nNow answer this: What is %d + %d?\r\n> ", math_1, math_2);
 8001b66:	4b07      	ldr	r3, [pc, #28]	@ (8001b84 <AskMathQuestion+0x74>)
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	4a07      	ldr	r2, [pc, #28]	@ (8001b88 <AskMathQuestion+0x78>)
 8001b6c:	6812      	ldr	r2, [r2, #0]
 8001b6e:	4619      	mov	r1, r3
 8001b70:	4807      	ldr	r0, [pc, #28]	@ (8001b90 <AskMathQuestion+0x80>)
 8001b72:	f000 fecb 	bl	800290c <iprintf>
    prompted = 1;
 8001b76:	4b07      	ldr	r3, [pc, #28]	@ (8001b94 <AskMathQuestion+0x84>)
 8001b78:	2201      	movs	r2, #1
 8001b7a:	701a      	strb	r2, [r3, #0]
}
 8001b7c:	bf00      	nop
 8001b7e:	bd80      	pop	{r7, pc}
 8001b80:	66666667 	.word	0x66666667
 8001b84:	200001cc 	.word	0x200001cc
 8001b88:	200001d0 	.word	0x200001d0
 8001b8c:	200001d4 	.word	0x200001d4
 8001b90:	08003eec 	.word	0x08003eec
 8001b94:	20000219 	.word	0x20000219

08001b98 <AskCaesarChallenge>:

static void AskCaesarChallenge(void) {
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	af00      	add	r7, sp, #0
    printf("\r\nFinal task! Enter the Caesar cipher of the riddle answer with a shift of %d.\r\n> ", math_answer);
 8001b9c:	4b05      	ldr	r3, [pc, #20]	@ (8001bb4 <AskCaesarChallenge+0x1c>)
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	4619      	mov	r1, r3
 8001ba2:	4805      	ldr	r0, [pc, #20]	@ (8001bb8 <AskCaesarChallenge+0x20>)
 8001ba4:	f000 feb2 	bl	800290c <iprintf>
    prompted = 1;
 8001ba8:	4b04      	ldr	r3, [pc, #16]	@ (8001bbc <AskCaesarChallenge+0x24>)
 8001baa:	2201      	movs	r2, #1
 8001bac:	701a      	strb	r2, [r3, #0]
}
 8001bae:	bf00      	nop
 8001bb0:	bd80      	pop	{r7, pc}
 8001bb2:	bf00      	nop
 8001bb4:	200001d4 	.word	0x200001d4
 8001bb8:	08003f14 	.word	0x08003f14
 8001bbc:	20000219 	.word	0x20000219

08001bc0 <riddle_game>:

//---------------------RIDDLE GAME FLOW----------------------------------
void riddle_game(void) {
 8001bc0:	b590      	push	{r4, r7, lr}
 8001bc2:	b095      	sub	sp, #84	@ 0x54
 8001bc4:	af00      	add	r7, sp, #0
    prompted = 0;
 8001bc6:	4b89      	ldr	r3, [pc, #548]	@ (8001dec <riddle_game+0x22c>)
 8001bc8:	2200      	movs	r2, #0
 8001bca:	701a      	strb	r2, [r3, #0]
    input_index = 0;
 8001bcc:	4b88      	ldr	r3, [pc, #544]	@ (8001df0 <riddle_game+0x230>)
 8001bce:	2200      	movs	r2, #0
 8001bd0:	701a      	strb	r2, [r3, #0]
    memset(input_buffer, 0, sizeof(input_buffer));
 8001bd2:	2240      	movs	r2, #64	@ 0x40
 8001bd4:	2100      	movs	r1, #0
 8001bd6:	4887      	ldr	r0, [pc, #540]	@ (8001df4 <riddle_game+0x234>)
 8001bd8:	f000 ff10 	bl	80029fc <memset>

    printf("\r\n🧠 Welcome to Riddle Island, ye clever seadog!\r\n");
 8001bdc:	4886      	ldr	r0, [pc, #536]	@ (8001df8 <riddle_game+0x238>)
 8001bde:	f000 ff05 	bl	80029ec <puts>
    printf("Prepare yer noggin'—it’s time for brain teasers ‘n trickery!\r\n");
 8001be2:	4886      	ldr	r0, [pc, #536]	@ (8001dfc <riddle_game+0x23c>)
 8001be4:	f000 ff02 	bl	80029ec <puts>

    // Pick a random riddle (not same as last)
    static int last_index = -1;
    int index;
    do {
        index = rand() % NUM_RIDDLES;
 8001be8:	f000 fd0c 	bl	8002604 <rand>
 8001bec:	4603      	mov	r3, r0
 8001bee:	4619      	mov	r1, r3
 8001bf0:	4b83      	ldr	r3, [pc, #524]	@ (8001e00 <riddle_game+0x240>)
 8001bf2:	fba3 2301 	umull	r2, r3, r3, r1
 8001bf6:	089a      	lsrs	r2, r3, #2
 8001bf8:	4613      	mov	r3, r2
 8001bfa:	009b      	lsls	r3, r3, #2
 8001bfc:	4413      	add	r3, r2
 8001bfe:	1aca      	subs	r2, r1, r3
 8001c00:	64ba      	str	r2, [r7, #72]	@ 0x48
    } while (index == last_index);
 8001c02:	4b80      	ldr	r3, [pc, #512]	@ (8001e04 <riddle_game+0x244>)
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8001c08:	429a      	cmp	r2, r3
 8001c0a:	d0ed      	beq.n	8001be8 <riddle_game+0x28>
    last_index = index;
 8001c0c:	4a7d      	ldr	r2, [pc, #500]	@ (8001e04 <riddle_game+0x244>)
 8001c0e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001c10:	6013      	str	r3, [r2, #0]
    current_riddle = riddles[index];
 8001c12:	497d      	ldr	r1, [pc, #500]	@ (8001e08 <riddle_game+0x248>)
 8001c14:	4a7d      	ldr	r2, [pc, #500]	@ (8001e0c <riddle_game+0x24c>)
 8001c16:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001c18:	011b      	lsls	r3, r3, #4
 8001c1a:	4413      	add	r3, r2
 8001c1c:	460c      	mov	r4, r1
 8001c1e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001c20:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    riddle_step = 0;
 8001c24:	4b7a      	ldr	r3, [pc, #488]	@ (8001e10 <riddle_game+0x250>)
 8001c26:	2200      	movs	r2, #0
 8001c28:	701a      	strb	r2, [r3, #0]

    printf("\r\nSolve this riddle:\r\n\n%s\r\n", current_riddle.riddle);
 8001c2a:	4b77      	ldr	r3, [pc, #476]	@ (8001e08 <riddle_game+0x248>)
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	4619      	mov	r1, r3
 8001c30:	4878      	ldr	r0, [pc, #480]	@ (8001e14 <riddle_game+0x254>)
 8001c32:	f000 fe6b 	bl	800290c <iprintf>
    printf("\r\nThere's a button hidden on this island. Find it and gain a hint!\r\n> ");
 8001c36:	4878      	ldr	r0, [pc, #480]	@ (8001e18 <riddle_game+0x258>)
 8001c38:	f000 fe68 	bl	800290c <iprintf>
    prompted = 1;
 8001c3c:	4b6b      	ldr	r3, [pc, #428]	@ (8001dec <riddle_game+0x22c>)
 8001c3e:	2201      	movs	r2, #1
 8001c40:	701a      	strb	r2, [r3, #0]

    uint8_t hint_count = 0;
 8001c42:	2300      	movs	r3, #0
 8001c44:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f

    while (riddle_step < 3) {
 8001c48:	e0c8      	b.n	8001ddc <riddle_game+0x21c>
        // === Hint button check (PE7) ===
    	if (riddle_step == 0 && (GPIOE->IDR & GPIO_IDR_7)) {
 8001c4a:	4b71      	ldr	r3, [pc, #452]	@ (8001e10 <riddle_game+0x250>)
 8001c4c:	781b      	ldrb	r3, [r3, #0]
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d12b      	bne.n	8001caa <riddle_game+0xea>
 8001c52:	4b72      	ldr	r3, [pc, #456]	@ (8001e1c <riddle_game+0x25c>)
 8001c54:	691b      	ldr	r3, [r3, #16]
 8001c56:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d025      	beq.n	8001caa <riddle_game+0xea>
    	    if (hint_count == 0) {
 8001c5e:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d10b      	bne.n	8001c7e <riddle_game+0xbe>
    	        printf("\r\nHint: %s\r\n> ", current_riddle.hint1);
 8001c66:	4b68      	ldr	r3, [pc, #416]	@ (8001e08 <riddle_game+0x248>)
 8001c68:	689b      	ldr	r3, [r3, #8]
 8001c6a:	4619      	mov	r1, r3
 8001c6c:	486c      	ldr	r0, [pc, #432]	@ (8001e20 <riddle_game+0x260>)
 8001c6e:	f000 fe4d 	bl	800290c <iprintf>
    	        hint_count++;
 8001c72:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8001c76:	3301      	adds	r3, #1
 8001c78:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
 8001c7c:	e00e      	b.n	8001c9c <riddle_game+0xdc>
    	    } else if (hint_count == 1) {
 8001c7e:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8001c82:	2b01      	cmp	r3, #1
 8001c84:	d10a      	bne.n	8001c9c <riddle_game+0xdc>
    	        printf("\r\nSecond hint: %s\r\n> ", current_riddle.hint2);
 8001c86:	4b60      	ldr	r3, [pc, #384]	@ (8001e08 <riddle_game+0x248>)
 8001c88:	68db      	ldr	r3, [r3, #12]
 8001c8a:	4619      	mov	r1, r3
 8001c8c:	4865      	ldr	r0, [pc, #404]	@ (8001e24 <riddle_game+0x264>)
 8001c8e:	f000 fe3d 	bl	800290c <iprintf>
    	        hint_count++;
 8001c92:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8001c96:	3301      	adds	r3, #1
 8001c98:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
    	    }

    	    // Wait until button is released before allowing another hint
    	    while (GPIOE->IDR & GPIO_IDR_7);
 8001c9c:	bf00      	nop
 8001c9e:	4b5f      	ldr	r3, [pc, #380]	@ (8001e1c <riddle_game+0x25c>)
 8001ca0:	691b      	ldr	r3, [r3, #16]
 8001ca2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d1f9      	bne.n	8001c9e <riddle_game+0xde>
    	}


        // === Handle user input ===
        if (SerialDataAvailable(&USART1_PORT)) {
 8001caa:	485f      	ldr	r0, [pc, #380]	@ (8001e28 <riddle_game+0x268>)
 8001cac:	f000 fa9a 	bl	80021e4 <SerialDataAvailable>
 8001cb0:	4603      	mov	r3, r0
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	f000 8092 	beq.w	8001ddc <riddle_game+0x21c>
            char c = SerialGetChar(&USART1_PORT);
 8001cb8:	485b      	ldr	r0, [pc, #364]	@ (8001e28 <riddle_game+0x268>)
 8001cba:	f000 fa7c 	bl	80021b6 <SerialGetChar>
 8001cbe:	4603      	mov	r3, r0
 8001cc0:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
            if (c == '\r' || c == '\n') {
 8001cc4:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8001cc8:	2b0d      	cmp	r3, #13
 8001cca:	d003      	beq.n	8001cd4 <riddle_game+0x114>
 8001ccc:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8001cd0:	2b0a      	cmp	r3, #10
 8001cd2:	d16e      	bne.n	8001db2 <riddle_game+0x1f2>
                input_buffer[input_index] = '\0';
 8001cd4:	4b46      	ldr	r3, [pc, #280]	@ (8001df0 <riddle_game+0x230>)
 8001cd6:	781b      	ldrb	r3, [r3, #0]
 8001cd8:	461a      	mov	r2, r3
 8001cda:	4b46      	ldr	r3, [pc, #280]	@ (8001df4 <riddle_game+0x234>)
 8001cdc:	2100      	movs	r1, #0
 8001cde:	5499      	strb	r1, [r3, r2]
                ToLowerCase(input_buffer);
 8001ce0:	4844      	ldr	r0, [pc, #272]	@ (8001df4 <riddle_game+0x234>)
 8001ce2:	f7ff fe9b 	bl	8001a1c <ToLowerCase>

                if (riddle_step == 0) {
 8001ce6:	4b4a      	ldr	r3, [pc, #296]	@ (8001e10 <riddle_game+0x250>)
 8001ce8:	781b      	ldrb	r3, [r3, #0]
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d118      	bne.n	8001d20 <riddle_game+0x160>
                    if (strcmp(input_buffer, current_riddle.answer) == 0) {
 8001cee:	4b46      	ldr	r3, [pc, #280]	@ (8001e08 <riddle_game+0x248>)
 8001cf0:	685b      	ldr	r3, [r3, #4]
 8001cf2:	4619      	mov	r1, r3
 8001cf4:	483f      	ldr	r0, [pc, #252]	@ (8001df4 <riddle_game+0x234>)
 8001cf6:	f7fe fa6b 	bl	80001d0 <strcmp>
 8001cfa:	4603      	mov	r3, r0
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d108      	bne.n	8001d12 <riddle_game+0x152>
                        printf("\r\nCorrect!\r\nGet ready for the next challenge...\r\n");
 8001d00:	484a      	ldr	r0, [pc, #296]	@ (8001e2c <riddle_game+0x26c>)
 8001d02:	f000 fe73 	bl	80029ec <puts>
                        riddle_step = 1;
 8001d06:	4b42      	ldr	r3, [pc, #264]	@ (8001e10 <riddle_game+0x250>)
 8001d08:	2201      	movs	r2, #1
 8001d0a:	701a      	strb	r2, [r3, #0]
                        AskMathQuestion();
 8001d0c:	f7ff ff00 	bl	8001b10 <AskMathQuestion>
 8001d10:	e046      	b.n	8001da0 <riddle_game+0x1e0>
                    } else {
                        printf("\r\nWrong! Try again.\r\n%s\r\n> ", current_riddle.riddle);
 8001d12:	4b3d      	ldr	r3, [pc, #244]	@ (8001e08 <riddle_game+0x248>)
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	4619      	mov	r1, r3
 8001d18:	4845      	ldr	r0, [pc, #276]	@ (8001e30 <riddle_game+0x270>)
 8001d1a:	f000 fdf7 	bl	800290c <iprintf>
 8001d1e:	e03f      	b.n	8001da0 <riddle_game+0x1e0>
                    }
                } else if (riddle_step == 1) {
 8001d20:	4b3b      	ldr	r3, [pc, #236]	@ (8001e10 <riddle_game+0x250>)
 8001d22:	781b      	ldrb	r3, [r3, #0]
 8001d24:	2b01      	cmp	r3, #1
 8001d26:	d119      	bne.n	8001d5c <riddle_game+0x19c>
                    if (atoi(input_buffer) == math_answer) {
 8001d28:	4832      	ldr	r0, [pc, #200]	@ (8001df4 <riddle_game+0x234>)
 8001d2a:	f000 fc39 	bl	80025a0 <atoi>
 8001d2e:	4602      	mov	r2, r0
 8001d30:	4b40      	ldr	r3, [pc, #256]	@ (8001e34 <riddle_game+0x274>)
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	429a      	cmp	r2, r3
 8001d36:	d108      	bne.n	8001d4a <riddle_game+0x18a>
                        printf("\r\nNicely done! Final challenge...\r\n");
 8001d38:	483f      	ldr	r0, [pc, #252]	@ (8001e38 <riddle_game+0x278>)
 8001d3a:	f000 fe57 	bl	80029ec <puts>
                        riddle_step = 2;
 8001d3e:	4b34      	ldr	r3, [pc, #208]	@ (8001e10 <riddle_game+0x250>)
 8001d40:	2202      	movs	r2, #2
 8001d42:	701a      	strb	r2, [r3, #0]
                        AskCaesarChallenge();
 8001d44:	f7ff ff28 	bl	8001b98 <AskCaesarChallenge>
 8001d48:	e02a      	b.n	8001da0 <riddle_game+0x1e0>
                    } else {
                        printf("\r\nIncorrect. What is %d + %d?\r\n> ", math_1, math_2);
 8001d4a:	4b3c      	ldr	r3, [pc, #240]	@ (8001e3c <riddle_game+0x27c>)
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	4a3c      	ldr	r2, [pc, #240]	@ (8001e40 <riddle_game+0x280>)
 8001d50:	6812      	ldr	r2, [r2, #0]
 8001d52:	4619      	mov	r1, r3
 8001d54:	483b      	ldr	r0, [pc, #236]	@ (8001e44 <riddle_game+0x284>)
 8001d56:	f000 fdd9 	bl	800290c <iprintf>
 8001d5a:	e021      	b.n	8001da0 <riddle_game+0x1e0>
                    }
                } else if (riddle_step == 2) {
 8001d5c:	4b2c      	ldr	r3, [pc, #176]	@ (8001e10 <riddle_game+0x250>)
 8001d5e:	781b      	ldrb	r3, [r3, #0]
 8001d60:	2b02      	cmp	r3, #2
 8001d62:	d11d      	bne.n	8001da0 <riddle_game+0x1e0>
                    char expected_cipher[64];
                    CaesarCipher(expected_cipher, current_riddle.answer, math_answer);
 8001d64:	4b28      	ldr	r3, [pc, #160]	@ (8001e08 <riddle_game+0x248>)
 8001d66:	6859      	ldr	r1, [r3, #4]
 8001d68:	4b32      	ldr	r3, [pc, #200]	@ (8001e34 <riddle_game+0x274>)
 8001d6a:	681a      	ldr	r2, [r3, #0]
 8001d6c:	1d3b      	adds	r3, r7, #4
 8001d6e:	4618      	mov	r0, r3
 8001d70:	f7ff fe7c 	bl	8001a6c <CaesarCipher>
                    ToLowerCase(expected_cipher);
 8001d74:	1d3b      	adds	r3, r7, #4
 8001d76:	4618      	mov	r0, r3
 8001d78:	f7ff fe50 	bl	8001a1c <ToLowerCase>

                    if (strcmp(input_buffer, expected_cipher) == 0) {
 8001d7c:	1d3b      	adds	r3, r7, #4
 8001d7e:	4619      	mov	r1, r3
 8001d80:	481c      	ldr	r0, [pc, #112]	@ (8001df4 <riddle_game+0x234>)
 8001d82:	f7fe fa25 	bl	80001d0 <strcmp>
 8001d86:	4603      	mov	r3, r0
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d103      	bne.n	8001d94 <riddle_game+0x1d4>
                        printf("\r\nWell done! You've completed the riddle island!\r\n");
 8001d8c:	482e      	ldr	r0, [pc, #184]	@ (8001e48 <riddle_game+0x288>)
 8001d8e:	f000 fe2d 	bl	80029ec <puts>
 8001d92:	e028      	b.n	8001de6 <riddle_game+0x226>
                        return;
                    } else {
                        printf("\r\nNot quite! Try the Caesar cipher again with a shift of %d.\r\n> ", math_answer);
 8001d94:	4b27      	ldr	r3, [pc, #156]	@ (8001e34 <riddle_game+0x274>)
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	4619      	mov	r1, r3
 8001d9a:	482c      	ldr	r0, [pc, #176]	@ (8001e4c <riddle_game+0x28c>)
 8001d9c:	f000 fdb6 	bl	800290c <iprintf>
                    }
                }

                input_index = 0;
 8001da0:	4b13      	ldr	r3, [pc, #76]	@ (8001df0 <riddle_game+0x230>)
 8001da2:	2200      	movs	r2, #0
 8001da4:	701a      	strb	r2, [r3, #0]
                memset(input_buffer, 0, sizeof(input_buffer));
 8001da6:	2240      	movs	r2, #64	@ 0x40
 8001da8:	2100      	movs	r1, #0
 8001daa:	4812      	ldr	r0, [pc, #72]	@ (8001df4 <riddle_game+0x234>)
 8001dac:	f000 fe26 	bl	80029fc <memset>
 8001db0:	e014      	b.n	8001ddc <riddle_game+0x21c>
            } else if (input_index < MAX_INPUT - 1) {
 8001db2:	4b0f      	ldr	r3, [pc, #60]	@ (8001df0 <riddle_game+0x230>)
 8001db4:	781b      	ldrb	r3, [r3, #0]
 8001db6:	2b3e      	cmp	r3, #62	@ 0x3e
 8001db8:	d810      	bhi.n	8001ddc <riddle_game+0x21c>
                SerialOutputChar(c, &USART1_PORT);  // Echo typed char
 8001dba:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8001dbe:	491a      	ldr	r1, [pc, #104]	@ (8001e28 <riddle_game+0x268>)
 8001dc0:	4618      	mov	r0, r3
 8001dc2:	f000 f9df 	bl	8002184 <SerialOutputChar>
                input_buffer[input_index++] = c;
 8001dc6:	4b0a      	ldr	r3, [pc, #40]	@ (8001df0 <riddle_game+0x230>)
 8001dc8:	781b      	ldrb	r3, [r3, #0]
 8001dca:	1c5a      	adds	r2, r3, #1
 8001dcc:	b2d1      	uxtb	r1, r2
 8001dce:	4a08      	ldr	r2, [pc, #32]	@ (8001df0 <riddle_game+0x230>)
 8001dd0:	7011      	strb	r1, [r2, #0]
 8001dd2:	4619      	mov	r1, r3
 8001dd4:	4a07      	ldr	r2, [pc, #28]	@ (8001df4 <riddle_game+0x234>)
 8001dd6:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8001dda:	5453      	strb	r3, [r2, r1]
    while (riddle_step < 3) {
 8001ddc:	4b0c      	ldr	r3, [pc, #48]	@ (8001e10 <riddle_game+0x250>)
 8001dde:	781b      	ldrb	r3, [r3, #0]
 8001de0:	2b02      	cmp	r3, #2
 8001de2:	f67f af32 	bls.w	8001c4a <riddle_game+0x8a>
            }
        }
    }
}
 8001de6:	3754      	adds	r7, #84	@ 0x54
 8001de8:	46bd      	mov	sp, r7
 8001dea:	bd90      	pop	{r4, r7, pc}
 8001dec:	20000219 	.word	0x20000219
 8001df0:	20000218 	.word	0x20000218
 8001df4:	200001d8 	.word	0x200001d8
 8001df8:	08003f68 	.word	0x08003f68
 8001dfc:	08003f9c 	.word	0x08003f9c
 8001e00:	cccccccd 	.word	0xcccccccd
 8001e04:	20000054 	.word	0x20000054
 8001e08:	200001b8 	.word	0x200001b8
 8001e0c:	20000004 	.word	0x20000004
 8001e10:	200001c8 	.word	0x200001c8
 8001e14:	08003fe0 	.word	0x08003fe0
 8001e18:	08003ffc 	.word	0x08003ffc
 8001e1c:	48001000 	.word	0x48001000
 8001e20:	08004044 	.word	0x08004044
 8001e24:	08004054 	.word	0x08004054
 8001e28:	20000058 	.word	0x20000058
 8001e2c:	0800406c 	.word	0x0800406c
 8001e30:	080040a0 	.word	0x080040a0
 8001e34:	200001d4 	.word	0x200001d4
 8001e38:	080040bc 	.word	0x080040bc
 8001e3c:	200001cc 	.word	0x200001cc
 8001e40:	200001d0 	.word	0x200001d0
 8001e44:	080040e0 	.word	0x080040e0
 8001e48:	08004104 	.word	0x08004104
 8001e4c:	08004138 	.word	0x08004138

08001e50 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001e50:	b480      	push	{r7}
 8001e52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001e54:	bf00      	nop
 8001e56:	e7fd      	b.n	8001e54 <NMI_Handler+0x4>

08001e58 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001e58:	b480      	push	{r7}
 8001e5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001e5c:	bf00      	nop
 8001e5e:	e7fd      	b.n	8001e5c <HardFault_Handler+0x4>

08001e60 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001e60:	b480      	push	{r7}
 8001e62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001e64:	bf00      	nop
 8001e66:	e7fd      	b.n	8001e64 <MemManage_Handler+0x4>

08001e68 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001e68:	b480      	push	{r7}
 8001e6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001e6c:	bf00      	nop
 8001e6e:	e7fd      	b.n	8001e6c <BusFault_Handler+0x4>

08001e70 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001e70:	b480      	push	{r7}
 8001e72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001e74:	bf00      	nop
 8001e76:	e7fd      	b.n	8001e74 <UsageFault_Handler+0x4>

08001e78 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001e78:	b480      	push	{r7}
 8001e7a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001e7c:	bf00      	nop
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e84:	4770      	bx	lr

08001e86 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001e86:	b480      	push	{r7}
 8001e88:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001e8a:	bf00      	nop
 8001e8c:	46bd      	mov	sp, r7
 8001e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e92:	4770      	bx	lr

08001e94 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001e94:	b480      	push	{r7}
 8001e96:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001e98:	bf00      	nop
 8001e9a:	46bd      	mov	sp, r7
 8001e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea0:	4770      	bx	lr

08001ea2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001ea2:	b580      	push	{r7, lr}
 8001ea4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001ea6:	f000 f9db 	bl	8002260 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001eaa:	bf00      	nop
 8001eac:	bd80      	pop	{r7, pc}
	...

08001eb0 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8001eb0:	b580      	push	{r7, lr}
 8001eb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001eb4:	4802      	ldr	r0, [pc, #8]	@ (8001ec0 <TIM1_CC_IRQHandler+0x10>)
 8001eb6:	f000 f9e7 	bl	8002288 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8001eba:	bf00      	nop
 8001ebc:	bd80      	pop	{r7, pc}
 8001ebe:	bf00      	nop
 8001ec0:	20000118 	.word	0x20000118

08001ec4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001ec4:	b580      	push	{r7, lr}
 8001ec6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001ec8:	4802      	ldr	r0, [pc, #8]	@ (8001ed4 <TIM2_IRQHandler+0x10>)
 8001eca:	f000 f9dd 	bl	8002288 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001ece:	bf00      	nop
 8001ed0:	bd80      	pop	{r7, pc}
 8001ed2:	bf00      	nop
 8001ed4:	20000164 	.word	0x20000164

08001ed8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001ed8:	b480      	push	{r7}
 8001eda:	af00      	add	r7, sp, #0
  return 1;
 8001edc:	2301      	movs	r3, #1
}
 8001ede:	4618      	mov	r0, r3
 8001ee0:	46bd      	mov	sp, r7
 8001ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee6:	4770      	bx	lr

08001ee8 <_kill>:

int _kill(int pid, int sig)
{
 8001ee8:	b580      	push	{r7, lr}
 8001eea:	b082      	sub	sp, #8
 8001eec:	af00      	add	r7, sp, #0
 8001eee:	6078      	str	r0, [r7, #4]
 8001ef0:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001ef2:	f000 fd8b 	bl	8002a0c <__errno>
 8001ef6:	4603      	mov	r3, r0
 8001ef8:	2216      	movs	r2, #22
 8001efa:	601a      	str	r2, [r3, #0]
  return -1;
 8001efc:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8001f00:	4618      	mov	r0, r3
 8001f02:	3708      	adds	r7, #8
 8001f04:	46bd      	mov	sp, r7
 8001f06:	bd80      	pop	{r7, pc}

08001f08 <_exit>:

void _exit (int status)
{
 8001f08:	b580      	push	{r7, lr}
 8001f0a:	b082      	sub	sp, #8
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001f10:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001f14:	6878      	ldr	r0, [r7, #4]
 8001f16:	f7ff ffe7 	bl	8001ee8 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001f1a:	bf00      	nop
 8001f1c:	e7fd      	b.n	8001f1a <_exit+0x12>

08001f1e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001f1e:	b580      	push	{r7, lr}
 8001f20:	b086      	sub	sp, #24
 8001f22:	af00      	add	r7, sp, #0
 8001f24:	60f8      	str	r0, [r7, #12]
 8001f26:	60b9      	str	r1, [r7, #8]
 8001f28:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f2a:	2300      	movs	r3, #0
 8001f2c:	617b      	str	r3, [r7, #20]
 8001f2e:	e00a      	b.n	8001f46 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001f30:	f7ff f9b8 	bl	80012a4 <__io_getchar>
 8001f34:	4601      	mov	r1, r0
 8001f36:	68bb      	ldr	r3, [r7, #8]
 8001f38:	1c5a      	adds	r2, r3, #1
 8001f3a:	60ba      	str	r2, [r7, #8]
 8001f3c:	b2ca      	uxtb	r2, r1
 8001f3e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f40:	697b      	ldr	r3, [r7, #20]
 8001f42:	3301      	adds	r3, #1
 8001f44:	617b      	str	r3, [r7, #20]
 8001f46:	697a      	ldr	r2, [r7, #20]
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	429a      	cmp	r2, r3
 8001f4c:	dbf0      	blt.n	8001f30 <_read+0x12>
  }

  return len;
 8001f4e:	687b      	ldr	r3, [r7, #4]
}
 8001f50:	4618      	mov	r0, r3
 8001f52:	3718      	adds	r7, #24
 8001f54:	46bd      	mov	sp, r7
 8001f56:	bd80      	pop	{r7, pc}

08001f58 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001f58:	b580      	push	{r7, lr}
 8001f5a:	b086      	sub	sp, #24
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	60f8      	str	r0, [r7, #12]
 8001f60:	60b9      	str	r1, [r7, #8]
 8001f62:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f64:	2300      	movs	r3, #0
 8001f66:	617b      	str	r3, [r7, #20]
 8001f68:	e009      	b.n	8001f7e <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001f6a:	68bb      	ldr	r3, [r7, #8]
 8001f6c:	1c5a      	adds	r2, r3, #1
 8001f6e:	60ba      	str	r2, [r7, #8]
 8001f70:	781b      	ldrb	r3, [r3, #0]
 8001f72:	4618      	mov	r0, r3
 8001f74:	f7ff f984 	bl	8001280 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f78:	697b      	ldr	r3, [r7, #20]
 8001f7a:	3301      	adds	r3, #1
 8001f7c:	617b      	str	r3, [r7, #20]
 8001f7e:	697a      	ldr	r2, [r7, #20]
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	429a      	cmp	r2, r3
 8001f84:	dbf1      	blt.n	8001f6a <_write+0x12>
  }
  return len;
 8001f86:	687b      	ldr	r3, [r7, #4]
}
 8001f88:	4618      	mov	r0, r3
 8001f8a:	3718      	adds	r7, #24
 8001f8c:	46bd      	mov	sp, r7
 8001f8e:	bd80      	pop	{r7, pc}

08001f90 <_close>:

int _close(int file)
{
 8001f90:	b480      	push	{r7}
 8001f92:	b083      	sub	sp, #12
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001f98:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8001f9c:	4618      	mov	r0, r3
 8001f9e:	370c      	adds	r7, #12
 8001fa0:	46bd      	mov	sp, r7
 8001fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa6:	4770      	bx	lr

08001fa8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001fa8:	b480      	push	{r7}
 8001faa:	b083      	sub	sp, #12
 8001fac:	af00      	add	r7, sp, #0
 8001fae:	6078      	str	r0, [r7, #4]
 8001fb0:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001fb2:	683b      	ldr	r3, [r7, #0]
 8001fb4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001fb8:	605a      	str	r2, [r3, #4]
  return 0;
 8001fba:	2300      	movs	r3, #0
}
 8001fbc:	4618      	mov	r0, r3
 8001fbe:	370c      	adds	r7, #12
 8001fc0:	46bd      	mov	sp, r7
 8001fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc6:	4770      	bx	lr

08001fc8 <_isatty>:

int _isatty(int file)
{
 8001fc8:	b480      	push	{r7}
 8001fca:	b083      	sub	sp, #12
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001fd0:	2301      	movs	r3, #1
}
 8001fd2:	4618      	mov	r0, r3
 8001fd4:	370c      	adds	r7, #12
 8001fd6:	46bd      	mov	sp, r7
 8001fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fdc:	4770      	bx	lr

08001fde <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001fde:	b480      	push	{r7}
 8001fe0:	b085      	sub	sp, #20
 8001fe2:	af00      	add	r7, sp, #0
 8001fe4:	60f8      	str	r0, [r7, #12]
 8001fe6:	60b9      	str	r1, [r7, #8]
 8001fe8:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001fea:	2300      	movs	r3, #0
}
 8001fec:	4618      	mov	r0, r3
 8001fee:	3714      	adds	r7, #20
 8001ff0:	46bd      	mov	sp, r7
 8001ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff6:	4770      	bx	lr

08001ff8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001ff8:	b580      	push	{r7, lr}
 8001ffa:	b086      	sub	sp, #24
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002000:	4a14      	ldr	r2, [pc, #80]	@ (8002054 <_sbrk+0x5c>)
 8002002:	4b15      	ldr	r3, [pc, #84]	@ (8002058 <_sbrk+0x60>)
 8002004:	1ad3      	subs	r3, r2, r3
 8002006:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002008:	697b      	ldr	r3, [r7, #20]
 800200a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800200c:	4b13      	ldr	r3, [pc, #76]	@ (800205c <_sbrk+0x64>)
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	2b00      	cmp	r3, #0
 8002012:	d102      	bne.n	800201a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002014:	4b11      	ldr	r3, [pc, #68]	@ (800205c <_sbrk+0x64>)
 8002016:	4a12      	ldr	r2, [pc, #72]	@ (8002060 <_sbrk+0x68>)
 8002018:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800201a:	4b10      	ldr	r3, [pc, #64]	@ (800205c <_sbrk+0x64>)
 800201c:	681a      	ldr	r2, [r3, #0]
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	4413      	add	r3, r2
 8002022:	693a      	ldr	r2, [r7, #16]
 8002024:	429a      	cmp	r2, r3
 8002026:	d207      	bcs.n	8002038 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002028:	f000 fcf0 	bl	8002a0c <__errno>
 800202c:	4603      	mov	r3, r0
 800202e:	220c      	movs	r2, #12
 8002030:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002032:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002036:	e009      	b.n	800204c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002038:	4b08      	ldr	r3, [pc, #32]	@ (800205c <_sbrk+0x64>)
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800203e:	4b07      	ldr	r3, [pc, #28]	@ (800205c <_sbrk+0x64>)
 8002040:	681a      	ldr	r2, [r3, #0]
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	4413      	add	r3, r2
 8002046:	4a05      	ldr	r2, [pc, #20]	@ (800205c <_sbrk+0x64>)
 8002048:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800204a:	68fb      	ldr	r3, [r7, #12]
}
 800204c:	4618      	mov	r0, r3
 800204e:	3718      	adds	r7, #24
 8002050:	46bd      	mov	sp, r7
 8002052:	bd80      	pop	{r7, pc}
 8002054:	2000a000 	.word	0x2000a000
 8002058:	00000400 	.word	0x00000400
 800205c:	2000021c 	.word	0x2000021c
 8002060:	20000370 	.word	0x20000370

08002064 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002064:	b480      	push	{r7}
 8002066:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002068:	4b06      	ldr	r3, [pc, #24]	@ (8002084 <SystemInit+0x20>)
 800206a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800206e:	4a05      	ldr	r2, [pc, #20]	@ (8002084 <SystemInit+0x20>)
 8002070:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002074:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002078:	bf00      	nop
 800207a:	46bd      	mov	sp, r7
 800207c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002080:	4770      	bx	lr
 8002082:	bf00      	nop
 8002084:	e000ed00 	.word	0xe000ed00

08002088 <SerialInitialise>:


// Initialises the specified serial port with a baud rate and optional completion function
// InitialiseSerial - Initialise the serial port
// Input: baudRate is from an enumerated set
void SerialInitialise(uint32_t baudRate, SerialPort *serial_port, void (*completion_function)(uint32_t)) {
 8002088:	b480      	push	{r7}
 800208a:	b087      	sub	sp, #28
 800208c:	af00      	add	r7, sp, #0
 800208e:	60f8      	str	r0, [r7, #12]
 8002090:	60b9      	str	r1, [r7, #8]
 8002092:	607a      	str	r2, [r7, #4]

	serial_port->completion_function = completion_function; // Set the callback
 8002094:	68bb      	ldr	r3, [r7, #8]
 8002096:	687a      	ldr	r2, [r7, #4]
 8002098:	625a      	str	r2, [r3, #36]	@ 0x24

	// Enable power interface and system configuration controller
	RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 800209a:	4b39      	ldr	r3, [pc, #228]	@ (8002180 <SerialInitialise+0xf8>)
 800209c:	69db      	ldr	r3, [r3, #28]
 800209e:	4a38      	ldr	r2, [pc, #224]	@ (8002180 <SerialInitialise+0xf8>)
 80020a0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80020a4:	61d3      	str	r3, [r2, #28]
	RCC->APB2ENR |= RCC_APB2ENR_SYSCFGEN;
 80020a6:	4b36      	ldr	r3, [pc, #216]	@ (8002180 <SerialInitialise+0xf8>)
 80020a8:	699b      	ldr	r3, [r3, #24]
 80020aa:	4a35      	ldr	r2, [pc, #212]	@ (8002180 <SerialInitialise+0xf8>)
 80020ac:	f043 0301 	orr.w	r3, r3, #1
 80020b0:	6193      	str	r3, [r2, #24]

	// enable the GPIO which is on the AHB bus
	RCC->AHBENR |= serial_port->MaskAHBENR;
 80020b2:	68bb      	ldr	r3, [r7, #8]
 80020b4:	691a      	ldr	r2, [r3, #16]
 80020b6:	4b32      	ldr	r3, [pc, #200]	@ (8002180 <SerialInitialise+0xf8>)
 80020b8:	695b      	ldr	r3, [r3, #20]
 80020ba:	4931      	ldr	r1, [pc, #196]	@ (8002180 <SerialInitialise+0xf8>)
 80020bc:	4313      	orrs	r3, r2
 80020be:	614b      	str	r3, [r1, #20]

	// set pin mode to alternate function for the specific GPIO pins
	serial_port->GPIO->MODER = serial_port->SerialPinModeValue;
 80020c0:	68bb      	ldr	r3, [r7, #8]
 80020c2:	685b      	ldr	r3, [r3, #4]
 80020c4:	68ba      	ldr	r2, [r7, #8]
 80020c6:	6952      	ldr	r2, [r2, #20]
 80020c8:	601a      	str	r2, [r3, #0]

	// enable high speed clock for specific GPIO pins
	serial_port->GPIO->OSPEEDR = serial_port->SerialPinSpeedValue;
 80020ca:	68bb      	ldr	r3, [r7, #8]
 80020cc:	685b      	ldr	r3, [r3, #4]
 80020ce:	68ba      	ldr	r2, [r7, #8]
 80020d0:	6992      	ldr	r2, [r2, #24]
 80020d2:	609a      	str	r2, [r3, #8]

	// set alternate function to enable USART to external pins
	serial_port->GPIO->AFR[0] |= serial_port->SerialPinAlternatePinValueLow;
 80020d4:	68bb      	ldr	r3, [r7, #8]
 80020d6:	69d9      	ldr	r1, [r3, #28]
 80020d8:	68bb      	ldr	r3, [r7, #8]
 80020da:	685b      	ldr	r3, [r3, #4]
 80020dc:	6a1a      	ldr	r2, [r3, #32]
 80020de:	68bb      	ldr	r3, [r7, #8]
 80020e0:	685b      	ldr	r3, [r3, #4]
 80020e2:	430a      	orrs	r2, r1
 80020e4:	621a      	str	r2, [r3, #32]
	serial_port->GPIO->AFR[1] |= serial_port->SerialPinAlternatePinValueHigh;
 80020e6:	68bb      	ldr	r3, [r7, #8]
 80020e8:	6a19      	ldr	r1, [r3, #32]
 80020ea:	68bb      	ldr	r3, [r7, #8]
 80020ec:	685b      	ldr	r3, [r3, #4]
 80020ee:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80020f0:	68bb      	ldr	r3, [r7, #8]
 80020f2:	685b      	ldr	r3, [r3, #4]
 80020f4:	430a      	orrs	r2, r1
 80020f6:	625a      	str	r2, [r3, #36]	@ 0x24

	// enable the device based on the bits defined in the serial port definition
	RCC->APB1ENR |= serial_port->MaskAPB1ENR;
 80020f8:	68bb      	ldr	r3, [r7, #8]
 80020fa:	68da      	ldr	r2, [r3, #12]
 80020fc:	4b20      	ldr	r3, [pc, #128]	@ (8002180 <SerialInitialise+0xf8>)
 80020fe:	69db      	ldr	r3, [r3, #28]
 8002100:	491f      	ldr	r1, [pc, #124]	@ (8002180 <SerialInitialise+0xf8>)
 8002102:	4313      	orrs	r3, r2
 8002104:	61cb      	str	r3, [r1, #28]
	RCC->APB2ENR |= serial_port->MaskAPB2ENR;
 8002106:	68bb      	ldr	r3, [r7, #8]
 8002108:	689a      	ldr	r2, [r3, #8]
 800210a:	4b1d      	ldr	r3, [pc, #116]	@ (8002180 <SerialInitialise+0xf8>)
 800210c:	699b      	ldr	r3, [r3, #24]
 800210e:	491c      	ldr	r1, [pc, #112]	@ (8002180 <SerialInitialise+0xf8>)
 8002110:	4313      	orrs	r3, r2
 8002112:	618b      	str	r3, [r1, #24]

	// Get a pointer to the 16 bits of the BRR register that we want to change
	uint16_t *baud_rate_config = (uint16_t*)&serial_port->UART->BRR; // only 16 bits used!
 8002114:	68bb      	ldr	r3, [r7, #8]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	330c      	adds	r3, #12
 800211a:	617b      	str	r3, [r7, #20]

	// Baud rate calculation from datasheet
	switch(baudRate){
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	2b04      	cmp	r3, #4
 8002120:	d820      	bhi.n	8002164 <SerialInitialise+0xdc>
 8002122:	a201      	add	r2, pc, #4	@ (adr r2, 8002128 <SerialInitialise+0xa0>)
 8002124:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002128:	0800213d 	.word	0x0800213d
 800212c:	08002145 	.word	0x08002145
 8002130:	0800214d 	.word	0x0800214d
 8002134:	08002155 	.word	0x08002155
 8002138:	0800215d 	.word	0x0800215d
	case BAUD_9600:
		// NEED TO FIX THIS !
		*baud_rate_config = 0x46;  // 115200 at 8MHz
 800213c:	697b      	ldr	r3, [r7, #20]
 800213e:	2246      	movs	r2, #70	@ 0x46
 8002140:	801a      	strh	r2, [r3, #0]
		break;
 8002142:	e00f      	b.n	8002164 <SerialInitialise+0xdc>
	case BAUD_19200:
		// NEED TO FIX THIS !
		*baud_rate_config = 0x46;  // 115200 at 8MHz
 8002144:	697b      	ldr	r3, [r7, #20]
 8002146:	2246      	movs	r2, #70	@ 0x46
 8002148:	801a      	strh	r2, [r3, #0]
		break;
 800214a:	e00b      	b.n	8002164 <SerialInitialise+0xdc>
	case BAUD_38400:
		// NEED TO FIX THIS !
		*baud_rate_config = 0x46;  // 115200 at 8MHz
 800214c:	697b      	ldr	r3, [r7, #20]
 800214e:	2246      	movs	r2, #70	@ 0x46
 8002150:	801a      	strh	r2, [r3, #0]
		break;
 8002152:	e007      	b.n	8002164 <SerialInitialise+0xdc>
	case BAUD_57600:
		// NEED TO FIX THIS !
		*baud_rate_config = 0x46;  // 115200 at 8MHz
 8002154:	697b      	ldr	r3, [r7, #20]
 8002156:	2246      	movs	r2, #70	@ 0x46
 8002158:	801a      	strh	r2, [r3, #0]
		break;
 800215a:	e003      	b.n	8002164 <SerialInitialise+0xdc>
	case BAUD_115200:
		*baud_rate_config = 0x46;  // 115200 at 8MHz
 800215c:	697b      	ldr	r3, [r7, #20]
 800215e:	2246      	movs	r2, #70	@ 0x46
 8002160:	801a      	strh	r2, [r3, #0]
		break;
 8002162:	bf00      	nop
	}


	// enable serial port for tx and rx
	serial_port->UART->CR1 |= USART_CR1_TE | USART_CR1_RE | USART_CR1_UE;
 8002164:	68bb      	ldr	r3, [r7, #8]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	681a      	ldr	r2, [r3, #0]
 800216a:	68bb      	ldr	r3, [r7, #8]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	f042 020d 	orr.w	r2, r2, #13
 8002172:	601a      	str	r2, [r3, #0]
}
 8002174:	bf00      	nop
 8002176:	371c      	adds	r7, #28
 8002178:	46bd      	mov	sp, r7
 800217a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800217e:	4770      	bx	lr
 8002180:	40021000 	.word	0x40021000

08002184 <SerialOutputChar>:


// Sends a single byte over the USART
void SerialOutputChar(uint8_t data, SerialPort *serial_port) {
 8002184:	b480      	push	{r7}
 8002186:	b083      	sub	sp, #12
 8002188:	af00      	add	r7, sp, #0
 800218a:	4603      	mov	r3, r0
 800218c:	6039      	str	r1, [r7, #0]
 800218e:	71fb      	strb	r3, [r7, #7]

	while((serial_port->UART->ISR & USART_ISR_TXE) == 0){ // Wait until transmit buffer is empty
 8002190:	bf00      	nop
 8002192:	683b      	ldr	r3, [r7, #0]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	69db      	ldr	r3, [r3, #28]
 8002198:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800219c:	2b00      	cmp	r3, #0
 800219e:	d0f8      	beq.n	8002192 <SerialOutputChar+0xe>
	}

	serial_port->UART->TDR = data; // Write data to transmit data register
 80021a0:	683b      	ldr	r3, [r7, #0]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	79fa      	ldrb	r2, [r7, #7]
 80021a6:	b292      	uxth	r2, r2
 80021a8:	851a      	strh	r2, [r3, #40]	@ 0x28
}
 80021aa:	bf00      	nop
 80021ac:	370c      	adds	r7, #12
 80021ae:	46bd      	mov	sp, r7
 80021b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b4:	4770      	bx	lr

080021b6 <SerialGetChar>:
	serial_port->completion_function(counter);
}


// Receives a single byte from the USART (blocking)
uint8_t SerialGetChar(SerialPort *serial_port) {
 80021b6:	b480      	push	{r7}
 80021b8:	b083      	sub	sp, #12
 80021ba:	af00      	add	r7, sp, #0
 80021bc:	6078      	str	r0, [r7, #4]
	while ((serial_port->UART->ISR & USART_ISR_RXNE) == 0); // Wait until data is received
 80021be:	bf00      	nop
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	69db      	ldr	r3, [r3, #28]
 80021c6:	f003 0320 	and.w	r3, r3, #32
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d0f8      	beq.n	80021c0 <SerialGetChar+0xa>
	return serial_port->UART->RDR;                          // Return received byte
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80021d4:	b29b      	uxth	r3, r3
 80021d6:	b2db      	uxtb	r3, r3
}
 80021d8:	4618      	mov	r0, r3
 80021da:	370c      	adds	r7, #12
 80021dc:	46bd      	mov	sp, r7
 80021de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e2:	4770      	bx	lr

080021e4 <SerialDataAvailable>:
    }

    buffer[i] = '\0'; // Null-terminate the string
}

uint8_t SerialDataAvailable(SerialPort *serial_port) {
 80021e4:	b480      	push	{r7}
 80021e6:	b083      	sub	sp, #12
 80021e8:	af00      	add	r7, sp, #0
 80021ea:	6078      	str	r0, [r7, #4]
    return (serial_port->UART->ISR & USART_ISR_RXNE) != 0;
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	69db      	ldr	r3, [r3, #28]
 80021f2:	f003 0320 	and.w	r3, r3, #32
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	bf14      	ite	ne
 80021fa:	2301      	movne	r3, #1
 80021fc:	2300      	moveq	r3, #0
 80021fe:	b2db      	uxtb	r3, r3
}
 8002200:	4618      	mov	r0, r3
 8002202:	370c      	adds	r7, #12
 8002204:	46bd      	mov	sp, r7
 8002206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800220a:	4770      	bx	lr

0800220c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800220c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002244 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8002210:	f7ff ff28 	bl	8002064 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002214:	480c      	ldr	r0, [pc, #48]	@ (8002248 <LoopForever+0x6>)
  ldr r1, =_edata
 8002216:	490d      	ldr	r1, [pc, #52]	@ (800224c <LoopForever+0xa>)
  ldr r2, =_sidata
 8002218:	4a0d      	ldr	r2, [pc, #52]	@ (8002250 <LoopForever+0xe>)
  movs r3, #0
 800221a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800221c:	e002      	b.n	8002224 <LoopCopyDataInit>

0800221e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800221e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002220:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002222:	3304      	adds	r3, #4

08002224 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002224:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002226:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002228:	d3f9      	bcc.n	800221e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800222a:	4a0a      	ldr	r2, [pc, #40]	@ (8002254 <LoopForever+0x12>)
  ldr r4, =_ebss
 800222c:	4c0a      	ldr	r4, [pc, #40]	@ (8002258 <LoopForever+0x16>)
  movs r3, #0
 800222e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002230:	e001      	b.n	8002236 <LoopFillZerobss>

08002232 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002232:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002234:	3204      	adds	r2, #4

08002236 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002236:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002238:	d3fb      	bcc.n	8002232 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800223a:	f000 fbed 	bl	8002a18 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800223e:	f7ff f86d 	bl	800131c <main>

08002242 <LoopForever>:

LoopForever:
    b LoopForever
 8002242:	e7fe      	b.n	8002242 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8002244:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 8002248:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800224c:	200000e0 	.word	0x200000e0
  ldr r2, =_sidata
 8002250:	08004368 	.word	0x08004368
  ldr r2, =_sbss
 8002254:	200000e0 	.word	0x200000e0
  ldr r4, =_ebss
 8002258:	20000370 	.word	0x20000370

0800225c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800225c:	e7fe      	b.n	800225c <ADC1_2_IRQHandler>
	...

08002260 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002260:	b480      	push	{r7}
 8002262:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002264:	4b06      	ldr	r3, [pc, #24]	@ (8002280 <HAL_IncTick+0x20>)
 8002266:	781b      	ldrb	r3, [r3, #0]
 8002268:	461a      	mov	r2, r3
 800226a:	4b06      	ldr	r3, [pc, #24]	@ (8002284 <HAL_IncTick+0x24>)
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	4413      	add	r3, r2
 8002270:	4a04      	ldr	r2, [pc, #16]	@ (8002284 <HAL_IncTick+0x24>)
 8002272:	6013      	str	r3, [r2, #0]
}
 8002274:	bf00      	nop
 8002276:	46bd      	mov	sp, r7
 8002278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800227c:	4770      	bx	lr
 800227e:	bf00      	nop
 8002280:	20000080 	.word	0x20000080
 8002284:	20000220 	.word	0x20000220

08002288 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002288:	b580      	push	{r7, lr}
 800228a:	b084      	sub	sp, #16
 800228c:	af00      	add	r7, sp, #0
 800228e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	68db      	ldr	r3, [r3, #12]
 8002296:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	691b      	ldr	r3, [r3, #16]
 800229e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80022a0:	68bb      	ldr	r3, [r7, #8]
 80022a2:	f003 0302 	and.w	r3, r3, #2
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d020      	beq.n	80022ec <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	f003 0302 	and.w	r3, r3, #2
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d01b      	beq.n	80022ec <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	f06f 0202 	mvn.w	r2, #2
 80022bc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	2201      	movs	r2, #1
 80022c2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	699b      	ldr	r3, [r3, #24]
 80022ca:	f003 0303 	and.w	r3, r3, #3
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d003      	beq.n	80022da <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80022d2:	6878      	ldr	r0, [r7, #4]
 80022d4:	f7fe ff2e 	bl	8001134 <HAL_TIM_IC_CaptureCallback>
 80022d8:	e005      	b.n	80022e6 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80022da:	6878      	ldr	r0, [r7, #4]
 80022dc:	f000 f924 	bl	8002528 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80022e0:	6878      	ldr	r0, [r7, #4]
 80022e2:	f000 f92b 	bl	800253c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	2200      	movs	r2, #0
 80022ea:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80022ec:	68bb      	ldr	r3, [r7, #8]
 80022ee:	f003 0304 	and.w	r3, r3, #4
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d020      	beq.n	8002338 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	f003 0304 	and.w	r3, r3, #4
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d01b      	beq.n	8002338 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	f06f 0204 	mvn.w	r2, #4
 8002308:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	2202      	movs	r2, #2
 800230e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	699b      	ldr	r3, [r3, #24]
 8002316:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800231a:	2b00      	cmp	r3, #0
 800231c:	d003      	beq.n	8002326 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800231e:	6878      	ldr	r0, [r7, #4]
 8002320:	f7fe ff08 	bl	8001134 <HAL_TIM_IC_CaptureCallback>
 8002324:	e005      	b.n	8002332 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002326:	6878      	ldr	r0, [r7, #4]
 8002328:	f000 f8fe 	bl	8002528 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800232c:	6878      	ldr	r0, [r7, #4]
 800232e:	f000 f905 	bl	800253c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	2200      	movs	r2, #0
 8002336:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002338:	68bb      	ldr	r3, [r7, #8]
 800233a:	f003 0308 	and.w	r3, r3, #8
 800233e:	2b00      	cmp	r3, #0
 8002340:	d020      	beq.n	8002384 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	f003 0308 	and.w	r3, r3, #8
 8002348:	2b00      	cmp	r3, #0
 800234a:	d01b      	beq.n	8002384 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	f06f 0208 	mvn.w	r2, #8
 8002354:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	2204      	movs	r2, #4
 800235a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	69db      	ldr	r3, [r3, #28]
 8002362:	f003 0303 	and.w	r3, r3, #3
 8002366:	2b00      	cmp	r3, #0
 8002368:	d003      	beq.n	8002372 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800236a:	6878      	ldr	r0, [r7, #4]
 800236c:	f7fe fee2 	bl	8001134 <HAL_TIM_IC_CaptureCallback>
 8002370:	e005      	b.n	800237e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002372:	6878      	ldr	r0, [r7, #4]
 8002374:	f000 f8d8 	bl	8002528 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002378:	6878      	ldr	r0, [r7, #4]
 800237a:	f000 f8df 	bl	800253c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	2200      	movs	r2, #0
 8002382:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002384:	68bb      	ldr	r3, [r7, #8]
 8002386:	f003 0310 	and.w	r3, r3, #16
 800238a:	2b00      	cmp	r3, #0
 800238c:	d020      	beq.n	80023d0 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	f003 0310 	and.w	r3, r3, #16
 8002394:	2b00      	cmp	r3, #0
 8002396:	d01b      	beq.n	80023d0 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	f06f 0210 	mvn.w	r2, #16
 80023a0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	2208      	movs	r2, #8
 80023a6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	69db      	ldr	r3, [r3, #28]
 80023ae:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d003      	beq.n	80023be <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80023b6:	6878      	ldr	r0, [r7, #4]
 80023b8:	f7fe febc 	bl	8001134 <HAL_TIM_IC_CaptureCallback>
 80023bc:	e005      	b.n	80023ca <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80023be:	6878      	ldr	r0, [r7, #4]
 80023c0:	f000 f8b2 	bl	8002528 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80023c4:	6878      	ldr	r0, [r7, #4]
 80023c6:	f000 f8b9 	bl	800253c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	2200      	movs	r2, #0
 80023ce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80023d0:	68bb      	ldr	r3, [r7, #8]
 80023d2:	f003 0301 	and.w	r3, r3, #1
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d00c      	beq.n	80023f4 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	f003 0301 	and.w	r3, r3, #1
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d007      	beq.n	80023f4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	f06f 0201 	mvn.w	r2, #1
 80023ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80023ee:	6878      	ldr	r0, [r7, #4]
 80023f0:	f000 f890 	bl	8002514 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80023f4:	68bb      	ldr	r3, [r7, #8]
 80023f6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d00c      	beq.n	8002418 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002404:	2b00      	cmp	r3, #0
 8002406:	d007      	beq.n	8002418 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8002410:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002412:	6878      	ldr	r0, [r7, #4]
 8002414:	f000 f8b0 	bl	8002578 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8002418:	68bb      	ldr	r3, [r7, #8]
 800241a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800241e:	2b00      	cmp	r3, #0
 8002420:	d00c      	beq.n	800243c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002428:	2b00      	cmp	r3, #0
 800242a:	d007      	beq.n	800243c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8002434:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8002436:	6878      	ldr	r0, [r7, #4]
 8002438:	f000 f8a8 	bl	800258c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800243c:	68bb      	ldr	r3, [r7, #8]
 800243e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002442:	2b00      	cmp	r3, #0
 8002444:	d00c      	beq.n	8002460 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800244c:	2b00      	cmp	r3, #0
 800244e:	d007      	beq.n	8002460 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8002458:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800245a:	6878      	ldr	r0, [r7, #4]
 800245c:	f000 f878 	bl	8002550 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002460:	68bb      	ldr	r3, [r7, #8]
 8002462:	f003 0320 	and.w	r3, r3, #32
 8002466:	2b00      	cmp	r3, #0
 8002468:	d00c      	beq.n	8002484 <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	f003 0320 	and.w	r3, r3, #32
 8002470:	2b00      	cmp	r3, #0
 8002472:	d007      	beq.n	8002484 <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	f06f 0220 	mvn.w	r2, #32
 800247c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800247e:	6878      	ldr	r0, [r7, #4]
 8002480:	f000 f870 	bl	8002564 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002484:	bf00      	nop
 8002486:	3710      	adds	r7, #16
 8002488:	46bd      	mov	sp, r7
 800248a:	bd80      	pop	{r7, pc}

0800248c <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800248c:	b480      	push	{r7}
 800248e:	b085      	sub	sp, #20
 8002490:	af00      	add	r7, sp, #0
 8002492:	6078      	str	r0, [r7, #4]
 8002494:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8002496:	2300      	movs	r3, #0
 8002498:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 800249a:	683b      	ldr	r3, [r7, #0]
 800249c:	2b0c      	cmp	r3, #12
 800249e:	d831      	bhi.n	8002504 <HAL_TIM_ReadCapturedValue+0x78>
 80024a0:	a201      	add	r2, pc, #4	@ (adr r2, 80024a8 <HAL_TIM_ReadCapturedValue+0x1c>)
 80024a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80024a6:	bf00      	nop
 80024a8:	080024dd 	.word	0x080024dd
 80024ac:	08002505 	.word	0x08002505
 80024b0:	08002505 	.word	0x08002505
 80024b4:	08002505 	.word	0x08002505
 80024b8:	080024e7 	.word	0x080024e7
 80024bc:	08002505 	.word	0x08002505
 80024c0:	08002505 	.word	0x08002505
 80024c4:	08002505 	.word	0x08002505
 80024c8:	080024f1 	.word	0x080024f1
 80024cc:	08002505 	.word	0x08002505
 80024d0:	08002505 	.word	0x08002505
 80024d4:	08002505 	.word	0x08002505
 80024d8:	080024fb 	.word	0x080024fb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80024e2:	60fb      	str	r3, [r7, #12]

      break;
 80024e4:	e00f      	b.n	8002506 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80024ec:	60fb      	str	r3, [r7, #12]

      break;
 80024ee:	e00a      	b.n	8002506 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80024f6:	60fb      	str	r3, [r7, #12]

      break;
 80024f8:	e005      	b.n	8002506 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002500:	60fb      	str	r3, [r7, #12]

      break;
 8002502:	e000      	b.n	8002506 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8002504:	bf00      	nop
  }

  return tmpreg;
 8002506:	68fb      	ldr	r3, [r7, #12]
}
 8002508:	4618      	mov	r0, r3
 800250a:	3714      	adds	r7, #20
 800250c:	46bd      	mov	sp, r7
 800250e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002512:	4770      	bx	lr

08002514 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002514:	b480      	push	{r7}
 8002516:	b083      	sub	sp, #12
 8002518:	af00      	add	r7, sp, #0
 800251a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800251c:	bf00      	nop
 800251e:	370c      	adds	r7, #12
 8002520:	46bd      	mov	sp, r7
 8002522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002526:	4770      	bx	lr

08002528 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002528:	b480      	push	{r7}
 800252a:	b083      	sub	sp, #12
 800252c:	af00      	add	r7, sp, #0
 800252e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002530:	bf00      	nop
 8002532:	370c      	adds	r7, #12
 8002534:	46bd      	mov	sp, r7
 8002536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800253a:	4770      	bx	lr

0800253c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800253c:	b480      	push	{r7}
 800253e:	b083      	sub	sp, #12
 8002540:	af00      	add	r7, sp, #0
 8002542:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002544:	bf00      	nop
 8002546:	370c      	adds	r7, #12
 8002548:	46bd      	mov	sp, r7
 800254a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800254e:	4770      	bx	lr

08002550 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002550:	b480      	push	{r7}
 8002552:	b083      	sub	sp, #12
 8002554:	af00      	add	r7, sp, #0
 8002556:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002558:	bf00      	nop
 800255a:	370c      	adds	r7, #12
 800255c:	46bd      	mov	sp, r7
 800255e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002562:	4770      	bx	lr

08002564 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002564:	b480      	push	{r7}
 8002566:	b083      	sub	sp, #12
 8002568:	af00      	add	r7, sp, #0
 800256a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800256c:	bf00      	nop
 800256e:	370c      	adds	r7, #12
 8002570:	46bd      	mov	sp, r7
 8002572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002576:	4770      	bx	lr

08002578 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002578:	b480      	push	{r7}
 800257a:	b083      	sub	sp, #12
 800257c:	af00      	add	r7, sp, #0
 800257e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002580:	bf00      	nop
 8002582:	370c      	adds	r7, #12
 8002584:	46bd      	mov	sp, r7
 8002586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800258a:	4770      	bx	lr

0800258c <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800258c:	b480      	push	{r7}
 800258e:	b083      	sub	sp, #12
 8002590:	af00      	add	r7, sp, #0
 8002592:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8002594:	bf00      	nop
 8002596:	370c      	adds	r7, #12
 8002598:	46bd      	mov	sp, r7
 800259a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800259e:	4770      	bx	lr

080025a0 <atoi>:
 80025a0:	220a      	movs	r2, #10
 80025a2:	2100      	movs	r1, #0
 80025a4:	f000 b98a 	b.w	80028bc <strtol>

080025a8 <srand>:
 80025a8:	b538      	push	{r3, r4, r5, lr}
 80025aa:	4b10      	ldr	r3, [pc, #64]	@ (80025ec <srand+0x44>)
 80025ac:	681d      	ldr	r5, [r3, #0]
 80025ae:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 80025b0:	4604      	mov	r4, r0
 80025b2:	b9b3      	cbnz	r3, 80025e2 <srand+0x3a>
 80025b4:	2018      	movs	r0, #24
 80025b6:	f000 fbb7 	bl	8002d28 <malloc>
 80025ba:	4602      	mov	r2, r0
 80025bc:	6328      	str	r0, [r5, #48]	@ 0x30
 80025be:	b920      	cbnz	r0, 80025ca <srand+0x22>
 80025c0:	4b0b      	ldr	r3, [pc, #44]	@ (80025f0 <srand+0x48>)
 80025c2:	480c      	ldr	r0, [pc, #48]	@ (80025f4 <srand+0x4c>)
 80025c4:	2146      	movs	r1, #70	@ 0x46
 80025c6:	f000 fa4f 	bl	8002a68 <__assert_func>
 80025ca:	490b      	ldr	r1, [pc, #44]	@ (80025f8 <srand+0x50>)
 80025cc:	4b0b      	ldr	r3, [pc, #44]	@ (80025fc <srand+0x54>)
 80025ce:	e9c0 1300 	strd	r1, r3, [r0]
 80025d2:	4b0b      	ldr	r3, [pc, #44]	@ (8002600 <srand+0x58>)
 80025d4:	6083      	str	r3, [r0, #8]
 80025d6:	230b      	movs	r3, #11
 80025d8:	8183      	strh	r3, [r0, #12]
 80025da:	2100      	movs	r1, #0
 80025dc:	2001      	movs	r0, #1
 80025de:	e9c2 0104 	strd	r0, r1, [r2, #16]
 80025e2:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 80025e4:	2200      	movs	r2, #0
 80025e6:	611c      	str	r4, [r3, #16]
 80025e8:	615a      	str	r2, [r3, #20]
 80025ea:	bd38      	pop	{r3, r4, r5, pc}
 80025ec:	20000090 	.word	0x20000090
 80025f0:	08004179 	.word	0x08004179
 80025f4:	08004190 	.word	0x08004190
 80025f8:	abcd330e 	.word	0xabcd330e
 80025fc:	e66d1234 	.word	0xe66d1234
 8002600:	0005deec 	.word	0x0005deec

08002604 <rand>:
 8002604:	4b16      	ldr	r3, [pc, #88]	@ (8002660 <rand+0x5c>)
 8002606:	b510      	push	{r4, lr}
 8002608:	681c      	ldr	r4, [r3, #0]
 800260a:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800260c:	b9b3      	cbnz	r3, 800263c <rand+0x38>
 800260e:	2018      	movs	r0, #24
 8002610:	f000 fb8a 	bl	8002d28 <malloc>
 8002614:	4602      	mov	r2, r0
 8002616:	6320      	str	r0, [r4, #48]	@ 0x30
 8002618:	b920      	cbnz	r0, 8002624 <rand+0x20>
 800261a:	4b12      	ldr	r3, [pc, #72]	@ (8002664 <rand+0x60>)
 800261c:	4812      	ldr	r0, [pc, #72]	@ (8002668 <rand+0x64>)
 800261e:	2152      	movs	r1, #82	@ 0x52
 8002620:	f000 fa22 	bl	8002a68 <__assert_func>
 8002624:	4911      	ldr	r1, [pc, #68]	@ (800266c <rand+0x68>)
 8002626:	4b12      	ldr	r3, [pc, #72]	@ (8002670 <rand+0x6c>)
 8002628:	e9c0 1300 	strd	r1, r3, [r0]
 800262c:	4b11      	ldr	r3, [pc, #68]	@ (8002674 <rand+0x70>)
 800262e:	6083      	str	r3, [r0, #8]
 8002630:	230b      	movs	r3, #11
 8002632:	8183      	strh	r3, [r0, #12]
 8002634:	2100      	movs	r1, #0
 8002636:	2001      	movs	r0, #1
 8002638:	e9c2 0104 	strd	r0, r1, [r2, #16]
 800263c:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800263e:	480e      	ldr	r0, [pc, #56]	@ (8002678 <rand+0x74>)
 8002640:	690b      	ldr	r3, [r1, #16]
 8002642:	694c      	ldr	r4, [r1, #20]
 8002644:	4a0d      	ldr	r2, [pc, #52]	@ (800267c <rand+0x78>)
 8002646:	4358      	muls	r0, r3
 8002648:	fb02 0004 	mla	r0, r2, r4, r0
 800264c:	fba3 3202 	umull	r3, r2, r3, r2
 8002650:	3301      	adds	r3, #1
 8002652:	eb40 0002 	adc.w	r0, r0, r2
 8002656:	e9c1 3004 	strd	r3, r0, [r1, #16]
 800265a:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 800265e:	bd10      	pop	{r4, pc}
 8002660:	20000090 	.word	0x20000090
 8002664:	08004179 	.word	0x08004179
 8002668:	08004190 	.word	0x08004190
 800266c:	abcd330e 	.word	0xabcd330e
 8002670:	e66d1234 	.word	0xe66d1234
 8002674:	0005deec 	.word	0x0005deec
 8002678:	5851f42d 	.word	0x5851f42d
 800267c:	4c957f2d 	.word	0x4c957f2d

08002680 <std>:
 8002680:	2300      	movs	r3, #0
 8002682:	b510      	push	{r4, lr}
 8002684:	4604      	mov	r4, r0
 8002686:	e9c0 3300 	strd	r3, r3, [r0]
 800268a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800268e:	6083      	str	r3, [r0, #8]
 8002690:	8181      	strh	r1, [r0, #12]
 8002692:	6643      	str	r3, [r0, #100]	@ 0x64
 8002694:	81c2      	strh	r2, [r0, #14]
 8002696:	6183      	str	r3, [r0, #24]
 8002698:	4619      	mov	r1, r3
 800269a:	2208      	movs	r2, #8
 800269c:	305c      	adds	r0, #92	@ 0x5c
 800269e:	f000 f9ad 	bl	80029fc <memset>
 80026a2:	4b0d      	ldr	r3, [pc, #52]	@ (80026d8 <std+0x58>)
 80026a4:	6263      	str	r3, [r4, #36]	@ 0x24
 80026a6:	4b0d      	ldr	r3, [pc, #52]	@ (80026dc <std+0x5c>)
 80026a8:	62a3      	str	r3, [r4, #40]	@ 0x28
 80026aa:	4b0d      	ldr	r3, [pc, #52]	@ (80026e0 <std+0x60>)
 80026ac:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80026ae:	4b0d      	ldr	r3, [pc, #52]	@ (80026e4 <std+0x64>)
 80026b0:	6323      	str	r3, [r4, #48]	@ 0x30
 80026b2:	4b0d      	ldr	r3, [pc, #52]	@ (80026e8 <std+0x68>)
 80026b4:	6224      	str	r4, [r4, #32]
 80026b6:	429c      	cmp	r4, r3
 80026b8:	d006      	beq.n	80026c8 <std+0x48>
 80026ba:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80026be:	4294      	cmp	r4, r2
 80026c0:	d002      	beq.n	80026c8 <std+0x48>
 80026c2:	33d0      	adds	r3, #208	@ 0xd0
 80026c4:	429c      	cmp	r4, r3
 80026c6:	d105      	bne.n	80026d4 <std+0x54>
 80026c8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80026cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80026d0:	f000 b9c6 	b.w	8002a60 <__retarget_lock_init_recursive>
 80026d4:	bd10      	pop	{r4, pc}
 80026d6:	bf00      	nop
 80026d8:	08003305 	.word	0x08003305
 80026dc:	08003327 	.word	0x08003327
 80026e0:	0800335f 	.word	0x0800335f
 80026e4:	08003383 	.word	0x08003383
 80026e8:	20000224 	.word	0x20000224

080026ec <stdio_exit_handler>:
 80026ec:	4a02      	ldr	r2, [pc, #8]	@ (80026f8 <stdio_exit_handler+0xc>)
 80026ee:	4903      	ldr	r1, [pc, #12]	@ (80026fc <stdio_exit_handler+0x10>)
 80026f0:	4803      	ldr	r0, [pc, #12]	@ (8002700 <stdio_exit_handler+0x14>)
 80026f2:	f000 b8ed 	b.w	80028d0 <_fwalk_sglue>
 80026f6:	bf00      	nop
 80026f8:	20000084 	.word	0x20000084
 80026fc:	0800329d 	.word	0x0800329d
 8002700:	20000094 	.word	0x20000094

08002704 <cleanup_stdio>:
 8002704:	6841      	ldr	r1, [r0, #4]
 8002706:	4b0c      	ldr	r3, [pc, #48]	@ (8002738 <cleanup_stdio+0x34>)
 8002708:	4299      	cmp	r1, r3
 800270a:	b510      	push	{r4, lr}
 800270c:	4604      	mov	r4, r0
 800270e:	d001      	beq.n	8002714 <cleanup_stdio+0x10>
 8002710:	f000 fdc4 	bl	800329c <_fflush_r>
 8002714:	68a1      	ldr	r1, [r4, #8]
 8002716:	4b09      	ldr	r3, [pc, #36]	@ (800273c <cleanup_stdio+0x38>)
 8002718:	4299      	cmp	r1, r3
 800271a:	d002      	beq.n	8002722 <cleanup_stdio+0x1e>
 800271c:	4620      	mov	r0, r4
 800271e:	f000 fdbd 	bl	800329c <_fflush_r>
 8002722:	68e1      	ldr	r1, [r4, #12]
 8002724:	4b06      	ldr	r3, [pc, #24]	@ (8002740 <cleanup_stdio+0x3c>)
 8002726:	4299      	cmp	r1, r3
 8002728:	d004      	beq.n	8002734 <cleanup_stdio+0x30>
 800272a:	4620      	mov	r0, r4
 800272c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002730:	f000 bdb4 	b.w	800329c <_fflush_r>
 8002734:	bd10      	pop	{r4, pc}
 8002736:	bf00      	nop
 8002738:	20000224 	.word	0x20000224
 800273c:	2000028c 	.word	0x2000028c
 8002740:	200002f4 	.word	0x200002f4

08002744 <global_stdio_init.part.0>:
 8002744:	b510      	push	{r4, lr}
 8002746:	4b0b      	ldr	r3, [pc, #44]	@ (8002774 <global_stdio_init.part.0+0x30>)
 8002748:	4c0b      	ldr	r4, [pc, #44]	@ (8002778 <global_stdio_init.part.0+0x34>)
 800274a:	4a0c      	ldr	r2, [pc, #48]	@ (800277c <global_stdio_init.part.0+0x38>)
 800274c:	601a      	str	r2, [r3, #0]
 800274e:	4620      	mov	r0, r4
 8002750:	2200      	movs	r2, #0
 8002752:	2104      	movs	r1, #4
 8002754:	f7ff ff94 	bl	8002680 <std>
 8002758:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800275c:	2201      	movs	r2, #1
 800275e:	2109      	movs	r1, #9
 8002760:	f7ff ff8e 	bl	8002680 <std>
 8002764:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8002768:	2202      	movs	r2, #2
 800276a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800276e:	2112      	movs	r1, #18
 8002770:	f7ff bf86 	b.w	8002680 <std>
 8002774:	2000035c 	.word	0x2000035c
 8002778:	20000224 	.word	0x20000224
 800277c:	080026ed 	.word	0x080026ed

08002780 <__sfp_lock_acquire>:
 8002780:	4801      	ldr	r0, [pc, #4]	@ (8002788 <__sfp_lock_acquire+0x8>)
 8002782:	f000 b96e 	b.w	8002a62 <__retarget_lock_acquire_recursive>
 8002786:	bf00      	nop
 8002788:	20000361 	.word	0x20000361

0800278c <__sfp_lock_release>:
 800278c:	4801      	ldr	r0, [pc, #4]	@ (8002794 <__sfp_lock_release+0x8>)
 800278e:	f000 b969 	b.w	8002a64 <__retarget_lock_release_recursive>
 8002792:	bf00      	nop
 8002794:	20000361 	.word	0x20000361

08002798 <__sinit>:
 8002798:	b510      	push	{r4, lr}
 800279a:	4604      	mov	r4, r0
 800279c:	f7ff fff0 	bl	8002780 <__sfp_lock_acquire>
 80027a0:	6a23      	ldr	r3, [r4, #32]
 80027a2:	b11b      	cbz	r3, 80027ac <__sinit+0x14>
 80027a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80027a8:	f7ff bff0 	b.w	800278c <__sfp_lock_release>
 80027ac:	4b04      	ldr	r3, [pc, #16]	@ (80027c0 <__sinit+0x28>)
 80027ae:	6223      	str	r3, [r4, #32]
 80027b0:	4b04      	ldr	r3, [pc, #16]	@ (80027c4 <__sinit+0x2c>)
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d1f5      	bne.n	80027a4 <__sinit+0xc>
 80027b8:	f7ff ffc4 	bl	8002744 <global_stdio_init.part.0>
 80027bc:	e7f2      	b.n	80027a4 <__sinit+0xc>
 80027be:	bf00      	nop
 80027c0:	08002705 	.word	0x08002705
 80027c4:	2000035c 	.word	0x2000035c

080027c8 <_strtol_l.isra.0>:
 80027c8:	2b24      	cmp	r3, #36	@ 0x24
 80027ca:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80027ce:	4686      	mov	lr, r0
 80027d0:	4690      	mov	r8, r2
 80027d2:	d801      	bhi.n	80027d8 <_strtol_l.isra.0+0x10>
 80027d4:	2b01      	cmp	r3, #1
 80027d6:	d106      	bne.n	80027e6 <_strtol_l.isra.0+0x1e>
 80027d8:	f000 f918 	bl	8002a0c <__errno>
 80027dc:	2316      	movs	r3, #22
 80027de:	6003      	str	r3, [r0, #0]
 80027e0:	2000      	movs	r0, #0
 80027e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80027e6:	4834      	ldr	r0, [pc, #208]	@ (80028b8 <_strtol_l.isra.0+0xf0>)
 80027e8:	460d      	mov	r5, r1
 80027ea:	462a      	mov	r2, r5
 80027ec:	f815 4b01 	ldrb.w	r4, [r5], #1
 80027f0:	5d06      	ldrb	r6, [r0, r4]
 80027f2:	f016 0608 	ands.w	r6, r6, #8
 80027f6:	d1f8      	bne.n	80027ea <_strtol_l.isra.0+0x22>
 80027f8:	2c2d      	cmp	r4, #45	@ 0x2d
 80027fa:	d110      	bne.n	800281e <_strtol_l.isra.0+0x56>
 80027fc:	782c      	ldrb	r4, [r5, #0]
 80027fe:	2601      	movs	r6, #1
 8002800:	1c95      	adds	r5, r2, #2
 8002802:	f033 0210 	bics.w	r2, r3, #16
 8002806:	d115      	bne.n	8002834 <_strtol_l.isra.0+0x6c>
 8002808:	2c30      	cmp	r4, #48	@ 0x30
 800280a:	d10d      	bne.n	8002828 <_strtol_l.isra.0+0x60>
 800280c:	782a      	ldrb	r2, [r5, #0]
 800280e:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8002812:	2a58      	cmp	r2, #88	@ 0x58
 8002814:	d108      	bne.n	8002828 <_strtol_l.isra.0+0x60>
 8002816:	786c      	ldrb	r4, [r5, #1]
 8002818:	3502      	adds	r5, #2
 800281a:	2310      	movs	r3, #16
 800281c:	e00a      	b.n	8002834 <_strtol_l.isra.0+0x6c>
 800281e:	2c2b      	cmp	r4, #43	@ 0x2b
 8002820:	bf04      	itt	eq
 8002822:	782c      	ldrbeq	r4, [r5, #0]
 8002824:	1c95      	addeq	r5, r2, #2
 8002826:	e7ec      	b.n	8002802 <_strtol_l.isra.0+0x3a>
 8002828:	2b00      	cmp	r3, #0
 800282a:	d1f6      	bne.n	800281a <_strtol_l.isra.0+0x52>
 800282c:	2c30      	cmp	r4, #48	@ 0x30
 800282e:	bf14      	ite	ne
 8002830:	230a      	movne	r3, #10
 8002832:	2308      	moveq	r3, #8
 8002834:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8002838:	f10c 3cff 	add.w	ip, ip, #4294967295	@ 0xffffffff
 800283c:	2200      	movs	r2, #0
 800283e:	fbbc f9f3 	udiv	r9, ip, r3
 8002842:	4610      	mov	r0, r2
 8002844:	fb03 ca19 	mls	sl, r3, r9, ip
 8002848:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800284c:	2f09      	cmp	r7, #9
 800284e:	d80f      	bhi.n	8002870 <_strtol_l.isra.0+0xa8>
 8002850:	463c      	mov	r4, r7
 8002852:	42a3      	cmp	r3, r4
 8002854:	dd1b      	ble.n	800288e <_strtol_l.isra.0+0xc6>
 8002856:	1c57      	adds	r7, r2, #1
 8002858:	d007      	beq.n	800286a <_strtol_l.isra.0+0xa2>
 800285a:	4581      	cmp	r9, r0
 800285c:	d314      	bcc.n	8002888 <_strtol_l.isra.0+0xc0>
 800285e:	d101      	bne.n	8002864 <_strtol_l.isra.0+0x9c>
 8002860:	45a2      	cmp	sl, r4
 8002862:	db11      	blt.n	8002888 <_strtol_l.isra.0+0xc0>
 8002864:	fb00 4003 	mla	r0, r0, r3, r4
 8002868:	2201      	movs	r2, #1
 800286a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800286e:	e7eb      	b.n	8002848 <_strtol_l.isra.0+0x80>
 8002870:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8002874:	2f19      	cmp	r7, #25
 8002876:	d801      	bhi.n	800287c <_strtol_l.isra.0+0xb4>
 8002878:	3c37      	subs	r4, #55	@ 0x37
 800287a:	e7ea      	b.n	8002852 <_strtol_l.isra.0+0x8a>
 800287c:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8002880:	2f19      	cmp	r7, #25
 8002882:	d804      	bhi.n	800288e <_strtol_l.isra.0+0xc6>
 8002884:	3c57      	subs	r4, #87	@ 0x57
 8002886:	e7e4      	b.n	8002852 <_strtol_l.isra.0+0x8a>
 8002888:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800288c:	e7ed      	b.n	800286a <_strtol_l.isra.0+0xa2>
 800288e:	1c53      	adds	r3, r2, #1
 8002890:	d108      	bne.n	80028a4 <_strtol_l.isra.0+0xdc>
 8002892:	2322      	movs	r3, #34	@ 0x22
 8002894:	f8ce 3000 	str.w	r3, [lr]
 8002898:	4660      	mov	r0, ip
 800289a:	f1b8 0f00 	cmp.w	r8, #0
 800289e:	d0a0      	beq.n	80027e2 <_strtol_l.isra.0+0x1a>
 80028a0:	1e69      	subs	r1, r5, #1
 80028a2:	e006      	b.n	80028b2 <_strtol_l.isra.0+0xea>
 80028a4:	b106      	cbz	r6, 80028a8 <_strtol_l.isra.0+0xe0>
 80028a6:	4240      	negs	r0, r0
 80028a8:	f1b8 0f00 	cmp.w	r8, #0
 80028ac:	d099      	beq.n	80027e2 <_strtol_l.isra.0+0x1a>
 80028ae:	2a00      	cmp	r2, #0
 80028b0:	d1f6      	bne.n	80028a0 <_strtol_l.isra.0+0xd8>
 80028b2:	f8c8 1000 	str.w	r1, [r8]
 80028b6:	e794      	b.n	80027e2 <_strtol_l.isra.0+0x1a>
 80028b8:	08004258 	.word	0x08004258

080028bc <strtol>:
 80028bc:	4613      	mov	r3, r2
 80028be:	460a      	mov	r2, r1
 80028c0:	4601      	mov	r1, r0
 80028c2:	4802      	ldr	r0, [pc, #8]	@ (80028cc <strtol+0x10>)
 80028c4:	6800      	ldr	r0, [r0, #0]
 80028c6:	f7ff bf7f 	b.w	80027c8 <_strtol_l.isra.0>
 80028ca:	bf00      	nop
 80028cc:	20000090 	.word	0x20000090

080028d0 <_fwalk_sglue>:
 80028d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80028d4:	4607      	mov	r7, r0
 80028d6:	4688      	mov	r8, r1
 80028d8:	4614      	mov	r4, r2
 80028da:	2600      	movs	r6, #0
 80028dc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80028e0:	f1b9 0901 	subs.w	r9, r9, #1
 80028e4:	d505      	bpl.n	80028f2 <_fwalk_sglue+0x22>
 80028e6:	6824      	ldr	r4, [r4, #0]
 80028e8:	2c00      	cmp	r4, #0
 80028ea:	d1f7      	bne.n	80028dc <_fwalk_sglue+0xc>
 80028ec:	4630      	mov	r0, r6
 80028ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80028f2:	89ab      	ldrh	r3, [r5, #12]
 80028f4:	2b01      	cmp	r3, #1
 80028f6:	d907      	bls.n	8002908 <_fwalk_sglue+0x38>
 80028f8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80028fc:	3301      	adds	r3, #1
 80028fe:	d003      	beq.n	8002908 <_fwalk_sglue+0x38>
 8002900:	4629      	mov	r1, r5
 8002902:	4638      	mov	r0, r7
 8002904:	47c0      	blx	r8
 8002906:	4306      	orrs	r6, r0
 8002908:	3568      	adds	r5, #104	@ 0x68
 800290a:	e7e9      	b.n	80028e0 <_fwalk_sglue+0x10>

0800290c <iprintf>:
 800290c:	b40f      	push	{r0, r1, r2, r3}
 800290e:	b507      	push	{r0, r1, r2, lr}
 8002910:	4906      	ldr	r1, [pc, #24]	@ (800292c <iprintf+0x20>)
 8002912:	ab04      	add	r3, sp, #16
 8002914:	6808      	ldr	r0, [r1, #0]
 8002916:	f853 2b04 	ldr.w	r2, [r3], #4
 800291a:	6881      	ldr	r1, [r0, #8]
 800291c:	9301      	str	r3, [sp, #4]
 800291e:	f000 f8eb 	bl	8002af8 <_vfiprintf_r>
 8002922:	b003      	add	sp, #12
 8002924:	f85d eb04 	ldr.w	lr, [sp], #4
 8002928:	b004      	add	sp, #16
 800292a:	4770      	bx	lr
 800292c:	20000090 	.word	0x20000090

08002930 <putchar>:
 8002930:	4b02      	ldr	r3, [pc, #8]	@ (800293c <putchar+0xc>)
 8002932:	4601      	mov	r1, r0
 8002934:	6818      	ldr	r0, [r3, #0]
 8002936:	6882      	ldr	r2, [r0, #8]
 8002938:	f000 be30 	b.w	800359c <_putc_r>
 800293c:	20000090 	.word	0x20000090

08002940 <_puts_r>:
 8002940:	6a03      	ldr	r3, [r0, #32]
 8002942:	b570      	push	{r4, r5, r6, lr}
 8002944:	6884      	ldr	r4, [r0, #8]
 8002946:	4605      	mov	r5, r0
 8002948:	460e      	mov	r6, r1
 800294a:	b90b      	cbnz	r3, 8002950 <_puts_r+0x10>
 800294c:	f7ff ff24 	bl	8002798 <__sinit>
 8002950:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8002952:	07db      	lsls	r3, r3, #31
 8002954:	d405      	bmi.n	8002962 <_puts_r+0x22>
 8002956:	89a3      	ldrh	r3, [r4, #12]
 8002958:	0598      	lsls	r0, r3, #22
 800295a:	d402      	bmi.n	8002962 <_puts_r+0x22>
 800295c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800295e:	f000 f880 	bl	8002a62 <__retarget_lock_acquire_recursive>
 8002962:	89a3      	ldrh	r3, [r4, #12]
 8002964:	0719      	lsls	r1, r3, #28
 8002966:	d502      	bpl.n	800296e <_puts_r+0x2e>
 8002968:	6923      	ldr	r3, [r4, #16]
 800296a:	2b00      	cmp	r3, #0
 800296c:	d135      	bne.n	80029da <_puts_r+0x9a>
 800296e:	4621      	mov	r1, r4
 8002970:	4628      	mov	r0, r5
 8002972:	f000 fd5b 	bl	800342c <__swsetup_r>
 8002976:	b380      	cbz	r0, 80029da <_puts_r+0x9a>
 8002978:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 800297c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800297e:	07da      	lsls	r2, r3, #31
 8002980:	d405      	bmi.n	800298e <_puts_r+0x4e>
 8002982:	89a3      	ldrh	r3, [r4, #12]
 8002984:	059b      	lsls	r3, r3, #22
 8002986:	d402      	bmi.n	800298e <_puts_r+0x4e>
 8002988:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800298a:	f000 f86b 	bl	8002a64 <__retarget_lock_release_recursive>
 800298e:	4628      	mov	r0, r5
 8002990:	bd70      	pop	{r4, r5, r6, pc}
 8002992:	2b00      	cmp	r3, #0
 8002994:	da04      	bge.n	80029a0 <_puts_r+0x60>
 8002996:	69a2      	ldr	r2, [r4, #24]
 8002998:	429a      	cmp	r2, r3
 800299a:	dc17      	bgt.n	80029cc <_puts_r+0x8c>
 800299c:	290a      	cmp	r1, #10
 800299e:	d015      	beq.n	80029cc <_puts_r+0x8c>
 80029a0:	6823      	ldr	r3, [r4, #0]
 80029a2:	1c5a      	adds	r2, r3, #1
 80029a4:	6022      	str	r2, [r4, #0]
 80029a6:	7019      	strb	r1, [r3, #0]
 80029a8:	68a3      	ldr	r3, [r4, #8]
 80029aa:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80029ae:	3b01      	subs	r3, #1
 80029b0:	60a3      	str	r3, [r4, #8]
 80029b2:	2900      	cmp	r1, #0
 80029b4:	d1ed      	bne.n	8002992 <_puts_r+0x52>
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	da11      	bge.n	80029de <_puts_r+0x9e>
 80029ba:	4622      	mov	r2, r4
 80029bc:	210a      	movs	r1, #10
 80029be:	4628      	mov	r0, r5
 80029c0:	f000 fcf6 	bl	80033b0 <__swbuf_r>
 80029c4:	3001      	adds	r0, #1
 80029c6:	d0d7      	beq.n	8002978 <_puts_r+0x38>
 80029c8:	250a      	movs	r5, #10
 80029ca:	e7d7      	b.n	800297c <_puts_r+0x3c>
 80029cc:	4622      	mov	r2, r4
 80029ce:	4628      	mov	r0, r5
 80029d0:	f000 fcee 	bl	80033b0 <__swbuf_r>
 80029d4:	3001      	adds	r0, #1
 80029d6:	d1e7      	bne.n	80029a8 <_puts_r+0x68>
 80029d8:	e7ce      	b.n	8002978 <_puts_r+0x38>
 80029da:	3e01      	subs	r6, #1
 80029dc:	e7e4      	b.n	80029a8 <_puts_r+0x68>
 80029de:	6823      	ldr	r3, [r4, #0]
 80029e0:	1c5a      	adds	r2, r3, #1
 80029e2:	6022      	str	r2, [r4, #0]
 80029e4:	220a      	movs	r2, #10
 80029e6:	701a      	strb	r2, [r3, #0]
 80029e8:	e7ee      	b.n	80029c8 <_puts_r+0x88>
	...

080029ec <puts>:
 80029ec:	4b02      	ldr	r3, [pc, #8]	@ (80029f8 <puts+0xc>)
 80029ee:	4601      	mov	r1, r0
 80029f0:	6818      	ldr	r0, [r3, #0]
 80029f2:	f7ff bfa5 	b.w	8002940 <_puts_r>
 80029f6:	bf00      	nop
 80029f8:	20000090 	.word	0x20000090

080029fc <memset>:
 80029fc:	4402      	add	r2, r0
 80029fe:	4603      	mov	r3, r0
 8002a00:	4293      	cmp	r3, r2
 8002a02:	d100      	bne.n	8002a06 <memset+0xa>
 8002a04:	4770      	bx	lr
 8002a06:	f803 1b01 	strb.w	r1, [r3], #1
 8002a0a:	e7f9      	b.n	8002a00 <memset+0x4>

08002a0c <__errno>:
 8002a0c:	4b01      	ldr	r3, [pc, #4]	@ (8002a14 <__errno+0x8>)
 8002a0e:	6818      	ldr	r0, [r3, #0]
 8002a10:	4770      	bx	lr
 8002a12:	bf00      	nop
 8002a14:	20000090 	.word	0x20000090

08002a18 <__libc_init_array>:
 8002a18:	b570      	push	{r4, r5, r6, lr}
 8002a1a:	4d0d      	ldr	r5, [pc, #52]	@ (8002a50 <__libc_init_array+0x38>)
 8002a1c:	4c0d      	ldr	r4, [pc, #52]	@ (8002a54 <__libc_init_array+0x3c>)
 8002a1e:	1b64      	subs	r4, r4, r5
 8002a20:	10a4      	asrs	r4, r4, #2
 8002a22:	2600      	movs	r6, #0
 8002a24:	42a6      	cmp	r6, r4
 8002a26:	d109      	bne.n	8002a3c <__libc_init_array+0x24>
 8002a28:	4d0b      	ldr	r5, [pc, #44]	@ (8002a58 <__libc_init_array+0x40>)
 8002a2a:	4c0c      	ldr	r4, [pc, #48]	@ (8002a5c <__libc_init_array+0x44>)
 8002a2c:	f000 fef8 	bl	8003820 <_init>
 8002a30:	1b64      	subs	r4, r4, r5
 8002a32:	10a4      	asrs	r4, r4, #2
 8002a34:	2600      	movs	r6, #0
 8002a36:	42a6      	cmp	r6, r4
 8002a38:	d105      	bne.n	8002a46 <__libc_init_array+0x2e>
 8002a3a:	bd70      	pop	{r4, r5, r6, pc}
 8002a3c:	f855 3b04 	ldr.w	r3, [r5], #4
 8002a40:	4798      	blx	r3
 8002a42:	3601      	adds	r6, #1
 8002a44:	e7ee      	b.n	8002a24 <__libc_init_array+0xc>
 8002a46:	f855 3b04 	ldr.w	r3, [r5], #4
 8002a4a:	4798      	blx	r3
 8002a4c:	3601      	adds	r6, #1
 8002a4e:	e7f2      	b.n	8002a36 <__libc_init_array+0x1e>
 8002a50:	08004360 	.word	0x08004360
 8002a54:	08004360 	.word	0x08004360
 8002a58:	08004360 	.word	0x08004360
 8002a5c:	08004364 	.word	0x08004364

08002a60 <__retarget_lock_init_recursive>:
 8002a60:	4770      	bx	lr

08002a62 <__retarget_lock_acquire_recursive>:
 8002a62:	4770      	bx	lr

08002a64 <__retarget_lock_release_recursive>:
 8002a64:	4770      	bx	lr
	...

08002a68 <__assert_func>:
 8002a68:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8002a6a:	4614      	mov	r4, r2
 8002a6c:	461a      	mov	r2, r3
 8002a6e:	4b09      	ldr	r3, [pc, #36]	@ (8002a94 <__assert_func+0x2c>)
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	4605      	mov	r5, r0
 8002a74:	68d8      	ldr	r0, [r3, #12]
 8002a76:	b14c      	cbz	r4, 8002a8c <__assert_func+0x24>
 8002a78:	4b07      	ldr	r3, [pc, #28]	@ (8002a98 <__assert_func+0x30>)
 8002a7a:	9100      	str	r1, [sp, #0]
 8002a7c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8002a80:	4906      	ldr	r1, [pc, #24]	@ (8002a9c <__assert_func+0x34>)
 8002a82:	462b      	mov	r3, r5
 8002a84:	f000 fc82 	bl	800338c <fiprintf>
 8002a88:	f000 fe34 	bl	80036f4 <abort>
 8002a8c:	4b04      	ldr	r3, [pc, #16]	@ (8002aa0 <__assert_func+0x38>)
 8002a8e:	461c      	mov	r4, r3
 8002a90:	e7f3      	b.n	8002a7a <__assert_func+0x12>
 8002a92:	bf00      	nop
 8002a94:	20000090 	.word	0x20000090
 8002a98:	080041e8 	.word	0x080041e8
 8002a9c:	080041f5 	.word	0x080041f5
 8002aa0:	08004223 	.word	0x08004223

08002aa4 <__sfputc_r>:
 8002aa4:	6893      	ldr	r3, [r2, #8]
 8002aa6:	3b01      	subs	r3, #1
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	b410      	push	{r4}
 8002aac:	6093      	str	r3, [r2, #8]
 8002aae:	da08      	bge.n	8002ac2 <__sfputc_r+0x1e>
 8002ab0:	6994      	ldr	r4, [r2, #24]
 8002ab2:	42a3      	cmp	r3, r4
 8002ab4:	db01      	blt.n	8002aba <__sfputc_r+0x16>
 8002ab6:	290a      	cmp	r1, #10
 8002ab8:	d103      	bne.n	8002ac2 <__sfputc_r+0x1e>
 8002aba:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002abe:	f000 bc77 	b.w	80033b0 <__swbuf_r>
 8002ac2:	6813      	ldr	r3, [r2, #0]
 8002ac4:	1c58      	adds	r0, r3, #1
 8002ac6:	6010      	str	r0, [r2, #0]
 8002ac8:	7019      	strb	r1, [r3, #0]
 8002aca:	4608      	mov	r0, r1
 8002acc:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002ad0:	4770      	bx	lr

08002ad2 <__sfputs_r>:
 8002ad2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002ad4:	4606      	mov	r6, r0
 8002ad6:	460f      	mov	r7, r1
 8002ad8:	4614      	mov	r4, r2
 8002ada:	18d5      	adds	r5, r2, r3
 8002adc:	42ac      	cmp	r4, r5
 8002ade:	d101      	bne.n	8002ae4 <__sfputs_r+0x12>
 8002ae0:	2000      	movs	r0, #0
 8002ae2:	e007      	b.n	8002af4 <__sfputs_r+0x22>
 8002ae4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002ae8:	463a      	mov	r2, r7
 8002aea:	4630      	mov	r0, r6
 8002aec:	f7ff ffda 	bl	8002aa4 <__sfputc_r>
 8002af0:	1c43      	adds	r3, r0, #1
 8002af2:	d1f3      	bne.n	8002adc <__sfputs_r+0xa>
 8002af4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08002af8 <_vfiprintf_r>:
 8002af8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002afc:	460d      	mov	r5, r1
 8002afe:	b09d      	sub	sp, #116	@ 0x74
 8002b00:	4614      	mov	r4, r2
 8002b02:	4698      	mov	r8, r3
 8002b04:	4606      	mov	r6, r0
 8002b06:	b118      	cbz	r0, 8002b10 <_vfiprintf_r+0x18>
 8002b08:	6a03      	ldr	r3, [r0, #32]
 8002b0a:	b90b      	cbnz	r3, 8002b10 <_vfiprintf_r+0x18>
 8002b0c:	f7ff fe44 	bl	8002798 <__sinit>
 8002b10:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8002b12:	07d9      	lsls	r1, r3, #31
 8002b14:	d405      	bmi.n	8002b22 <_vfiprintf_r+0x2a>
 8002b16:	89ab      	ldrh	r3, [r5, #12]
 8002b18:	059a      	lsls	r2, r3, #22
 8002b1a:	d402      	bmi.n	8002b22 <_vfiprintf_r+0x2a>
 8002b1c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8002b1e:	f7ff ffa0 	bl	8002a62 <__retarget_lock_acquire_recursive>
 8002b22:	89ab      	ldrh	r3, [r5, #12]
 8002b24:	071b      	lsls	r3, r3, #28
 8002b26:	d501      	bpl.n	8002b2c <_vfiprintf_r+0x34>
 8002b28:	692b      	ldr	r3, [r5, #16]
 8002b2a:	b99b      	cbnz	r3, 8002b54 <_vfiprintf_r+0x5c>
 8002b2c:	4629      	mov	r1, r5
 8002b2e:	4630      	mov	r0, r6
 8002b30:	f000 fc7c 	bl	800342c <__swsetup_r>
 8002b34:	b170      	cbz	r0, 8002b54 <_vfiprintf_r+0x5c>
 8002b36:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8002b38:	07dc      	lsls	r4, r3, #31
 8002b3a:	d504      	bpl.n	8002b46 <_vfiprintf_r+0x4e>
 8002b3c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002b40:	b01d      	add	sp, #116	@ 0x74
 8002b42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002b46:	89ab      	ldrh	r3, [r5, #12]
 8002b48:	0598      	lsls	r0, r3, #22
 8002b4a:	d4f7      	bmi.n	8002b3c <_vfiprintf_r+0x44>
 8002b4c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8002b4e:	f7ff ff89 	bl	8002a64 <__retarget_lock_release_recursive>
 8002b52:	e7f3      	b.n	8002b3c <_vfiprintf_r+0x44>
 8002b54:	2300      	movs	r3, #0
 8002b56:	9309      	str	r3, [sp, #36]	@ 0x24
 8002b58:	2320      	movs	r3, #32
 8002b5a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8002b5e:	f8cd 800c 	str.w	r8, [sp, #12]
 8002b62:	2330      	movs	r3, #48	@ 0x30
 8002b64:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8002d14 <_vfiprintf_r+0x21c>
 8002b68:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8002b6c:	f04f 0901 	mov.w	r9, #1
 8002b70:	4623      	mov	r3, r4
 8002b72:	469a      	mov	sl, r3
 8002b74:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002b78:	b10a      	cbz	r2, 8002b7e <_vfiprintf_r+0x86>
 8002b7a:	2a25      	cmp	r2, #37	@ 0x25
 8002b7c:	d1f9      	bne.n	8002b72 <_vfiprintf_r+0x7a>
 8002b7e:	ebba 0b04 	subs.w	fp, sl, r4
 8002b82:	d00b      	beq.n	8002b9c <_vfiprintf_r+0xa4>
 8002b84:	465b      	mov	r3, fp
 8002b86:	4622      	mov	r2, r4
 8002b88:	4629      	mov	r1, r5
 8002b8a:	4630      	mov	r0, r6
 8002b8c:	f7ff ffa1 	bl	8002ad2 <__sfputs_r>
 8002b90:	3001      	adds	r0, #1
 8002b92:	f000 80a7 	beq.w	8002ce4 <_vfiprintf_r+0x1ec>
 8002b96:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8002b98:	445a      	add	r2, fp
 8002b9a:	9209      	str	r2, [sp, #36]	@ 0x24
 8002b9c:	f89a 3000 	ldrb.w	r3, [sl]
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	f000 809f 	beq.w	8002ce4 <_vfiprintf_r+0x1ec>
 8002ba6:	2300      	movs	r3, #0
 8002ba8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002bac:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002bb0:	f10a 0a01 	add.w	sl, sl, #1
 8002bb4:	9304      	str	r3, [sp, #16]
 8002bb6:	9307      	str	r3, [sp, #28]
 8002bb8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8002bbc:	931a      	str	r3, [sp, #104]	@ 0x68
 8002bbe:	4654      	mov	r4, sl
 8002bc0:	2205      	movs	r2, #5
 8002bc2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002bc6:	4853      	ldr	r0, [pc, #332]	@ (8002d14 <_vfiprintf_r+0x21c>)
 8002bc8:	f7fd fb12 	bl	80001f0 <memchr>
 8002bcc:	9a04      	ldr	r2, [sp, #16]
 8002bce:	b9d8      	cbnz	r0, 8002c08 <_vfiprintf_r+0x110>
 8002bd0:	06d1      	lsls	r1, r2, #27
 8002bd2:	bf44      	itt	mi
 8002bd4:	2320      	movmi	r3, #32
 8002bd6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8002bda:	0713      	lsls	r3, r2, #28
 8002bdc:	bf44      	itt	mi
 8002bde:	232b      	movmi	r3, #43	@ 0x2b
 8002be0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8002be4:	f89a 3000 	ldrb.w	r3, [sl]
 8002be8:	2b2a      	cmp	r3, #42	@ 0x2a
 8002bea:	d015      	beq.n	8002c18 <_vfiprintf_r+0x120>
 8002bec:	9a07      	ldr	r2, [sp, #28]
 8002bee:	4654      	mov	r4, sl
 8002bf0:	2000      	movs	r0, #0
 8002bf2:	f04f 0c0a 	mov.w	ip, #10
 8002bf6:	4621      	mov	r1, r4
 8002bf8:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002bfc:	3b30      	subs	r3, #48	@ 0x30
 8002bfe:	2b09      	cmp	r3, #9
 8002c00:	d94b      	bls.n	8002c9a <_vfiprintf_r+0x1a2>
 8002c02:	b1b0      	cbz	r0, 8002c32 <_vfiprintf_r+0x13a>
 8002c04:	9207      	str	r2, [sp, #28]
 8002c06:	e014      	b.n	8002c32 <_vfiprintf_r+0x13a>
 8002c08:	eba0 0308 	sub.w	r3, r0, r8
 8002c0c:	fa09 f303 	lsl.w	r3, r9, r3
 8002c10:	4313      	orrs	r3, r2
 8002c12:	9304      	str	r3, [sp, #16]
 8002c14:	46a2      	mov	sl, r4
 8002c16:	e7d2      	b.n	8002bbe <_vfiprintf_r+0xc6>
 8002c18:	9b03      	ldr	r3, [sp, #12]
 8002c1a:	1d19      	adds	r1, r3, #4
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	9103      	str	r1, [sp, #12]
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	bfbb      	ittet	lt
 8002c24:	425b      	neglt	r3, r3
 8002c26:	f042 0202 	orrlt.w	r2, r2, #2
 8002c2a:	9307      	strge	r3, [sp, #28]
 8002c2c:	9307      	strlt	r3, [sp, #28]
 8002c2e:	bfb8      	it	lt
 8002c30:	9204      	strlt	r2, [sp, #16]
 8002c32:	7823      	ldrb	r3, [r4, #0]
 8002c34:	2b2e      	cmp	r3, #46	@ 0x2e
 8002c36:	d10a      	bne.n	8002c4e <_vfiprintf_r+0x156>
 8002c38:	7863      	ldrb	r3, [r4, #1]
 8002c3a:	2b2a      	cmp	r3, #42	@ 0x2a
 8002c3c:	d132      	bne.n	8002ca4 <_vfiprintf_r+0x1ac>
 8002c3e:	9b03      	ldr	r3, [sp, #12]
 8002c40:	1d1a      	adds	r2, r3, #4
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	9203      	str	r2, [sp, #12]
 8002c46:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8002c4a:	3402      	adds	r4, #2
 8002c4c:	9305      	str	r3, [sp, #20]
 8002c4e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8002d24 <_vfiprintf_r+0x22c>
 8002c52:	7821      	ldrb	r1, [r4, #0]
 8002c54:	2203      	movs	r2, #3
 8002c56:	4650      	mov	r0, sl
 8002c58:	f7fd faca 	bl	80001f0 <memchr>
 8002c5c:	b138      	cbz	r0, 8002c6e <_vfiprintf_r+0x176>
 8002c5e:	9b04      	ldr	r3, [sp, #16]
 8002c60:	eba0 000a 	sub.w	r0, r0, sl
 8002c64:	2240      	movs	r2, #64	@ 0x40
 8002c66:	4082      	lsls	r2, r0
 8002c68:	4313      	orrs	r3, r2
 8002c6a:	3401      	adds	r4, #1
 8002c6c:	9304      	str	r3, [sp, #16]
 8002c6e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002c72:	4829      	ldr	r0, [pc, #164]	@ (8002d18 <_vfiprintf_r+0x220>)
 8002c74:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8002c78:	2206      	movs	r2, #6
 8002c7a:	f7fd fab9 	bl	80001f0 <memchr>
 8002c7e:	2800      	cmp	r0, #0
 8002c80:	d03f      	beq.n	8002d02 <_vfiprintf_r+0x20a>
 8002c82:	4b26      	ldr	r3, [pc, #152]	@ (8002d1c <_vfiprintf_r+0x224>)
 8002c84:	bb1b      	cbnz	r3, 8002cce <_vfiprintf_r+0x1d6>
 8002c86:	9b03      	ldr	r3, [sp, #12]
 8002c88:	3307      	adds	r3, #7
 8002c8a:	f023 0307 	bic.w	r3, r3, #7
 8002c8e:	3308      	adds	r3, #8
 8002c90:	9303      	str	r3, [sp, #12]
 8002c92:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8002c94:	443b      	add	r3, r7
 8002c96:	9309      	str	r3, [sp, #36]	@ 0x24
 8002c98:	e76a      	b.n	8002b70 <_vfiprintf_r+0x78>
 8002c9a:	fb0c 3202 	mla	r2, ip, r2, r3
 8002c9e:	460c      	mov	r4, r1
 8002ca0:	2001      	movs	r0, #1
 8002ca2:	e7a8      	b.n	8002bf6 <_vfiprintf_r+0xfe>
 8002ca4:	2300      	movs	r3, #0
 8002ca6:	3401      	adds	r4, #1
 8002ca8:	9305      	str	r3, [sp, #20]
 8002caa:	4619      	mov	r1, r3
 8002cac:	f04f 0c0a 	mov.w	ip, #10
 8002cb0:	4620      	mov	r0, r4
 8002cb2:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002cb6:	3a30      	subs	r2, #48	@ 0x30
 8002cb8:	2a09      	cmp	r2, #9
 8002cba:	d903      	bls.n	8002cc4 <_vfiprintf_r+0x1cc>
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d0c6      	beq.n	8002c4e <_vfiprintf_r+0x156>
 8002cc0:	9105      	str	r1, [sp, #20]
 8002cc2:	e7c4      	b.n	8002c4e <_vfiprintf_r+0x156>
 8002cc4:	fb0c 2101 	mla	r1, ip, r1, r2
 8002cc8:	4604      	mov	r4, r0
 8002cca:	2301      	movs	r3, #1
 8002ccc:	e7f0      	b.n	8002cb0 <_vfiprintf_r+0x1b8>
 8002cce:	ab03      	add	r3, sp, #12
 8002cd0:	9300      	str	r3, [sp, #0]
 8002cd2:	462a      	mov	r2, r5
 8002cd4:	4b12      	ldr	r3, [pc, #72]	@ (8002d20 <_vfiprintf_r+0x228>)
 8002cd6:	a904      	add	r1, sp, #16
 8002cd8:	4630      	mov	r0, r6
 8002cda:	f3af 8000 	nop.w
 8002cde:	4607      	mov	r7, r0
 8002ce0:	1c78      	adds	r0, r7, #1
 8002ce2:	d1d6      	bne.n	8002c92 <_vfiprintf_r+0x19a>
 8002ce4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8002ce6:	07d9      	lsls	r1, r3, #31
 8002ce8:	d405      	bmi.n	8002cf6 <_vfiprintf_r+0x1fe>
 8002cea:	89ab      	ldrh	r3, [r5, #12]
 8002cec:	059a      	lsls	r2, r3, #22
 8002cee:	d402      	bmi.n	8002cf6 <_vfiprintf_r+0x1fe>
 8002cf0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8002cf2:	f7ff feb7 	bl	8002a64 <__retarget_lock_release_recursive>
 8002cf6:	89ab      	ldrh	r3, [r5, #12]
 8002cf8:	065b      	lsls	r3, r3, #25
 8002cfa:	f53f af1f 	bmi.w	8002b3c <_vfiprintf_r+0x44>
 8002cfe:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8002d00:	e71e      	b.n	8002b40 <_vfiprintf_r+0x48>
 8002d02:	ab03      	add	r3, sp, #12
 8002d04:	9300      	str	r3, [sp, #0]
 8002d06:	462a      	mov	r2, r5
 8002d08:	4b05      	ldr	r3, [pc, #20]	@ (8002d20 <_vfiprintf_r+0x228>)
 8002d0a:	a904      	add	r1, sp, #16
 8002d0c:	4630      	mov	r0, r6
 8002d0e:	f000 f923 	bl	8002f58 <_printf_i>
 8002d12:	e7e4      	b.n	8002cde <_vfiprintf_r+0x1e6>
 8002d14:	08004224 	.word	0x08004224
 8002d18:	0800422e 	.word	0x0800422e
 8002d1c:	00000000 	.word	0x00000000
 8002d20:	08002ad3 	.word	0x08002ad3
 8002d24:	0800422a 	.word	0x0800422a

08002d28 <malloc>:
 8002d28:	4b02      	ldr	r3, [pc, #8]	@ (8002d34 <malloc+0xc>)
 8002d2a:	4601      	mov	r1, r0
 8002d2c:	6818      	ldr	r0, [r3, #0]
 8002d2e:	f000 b825 	b.w	8002d7c <_malloc_r>
 8002d32:	bf00      	nop
 8002d34:	20000090 	.word	0x20000090

08002d38 <sbrk_aligned>:
 8002d38:	b570      	push	{r4, r5, r6, lr}
 8002d3a:	4e0f      	ldr	r6, [pc, #60]	@ (8002d78 <sbrk_aligned+0x40>)
 8002d3c:	460c      	mov	r4, r1
 8002d3e:	6831      	ldr	r1, [r6, #0]
 8002d40:	4605      	mov	r5, r0
 8002d42:	b911      	cbnz	r1, 8002d4a <sbrk_aligned+0x12>
 8002d44:	f000 fc92 	bl	800366c <_sbrk_r>
 8002d48:	6030      	str	r0, [r6, #0]
 8002d4a:	4621      	mov	r1, r4
 8002d4c:	4628      	mov	r0, r5
 8002d4e:	f000 fc8d 	bl	800366c <_sbrk_r>
 8002d52:	1c43      	adds	r3, r0, #1
 8002d54:	d103      	bne.n	8002d5e <sbrk_aligned+0x26>
 8002d56:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8002d5a:	4620      	mov	r0, r4
 8002d5c:	bd70      	pop	{r4, r5, r6, pc}
 8002d5e:	1cc4      	adds	r4, r0, #3
 8002d60:	f024 0403 	bic.w	r4, r4, #3
 8002d64:	42a0      	cmp	r0, r4
 8002d66:	d0f8      	beq.n	8002d5a <sbrk_aligned+0x22>
 8002d68:	1a21      	subs	r1, r4, r0
 8002d6a:	4628      	mov	r0, r5
 8002d6c:	f000 fc7e 	bl	800366c <_sbrk_r>
 8002d70:	3001      	adds	r0, #1
 8002d72:	d1f2      	bne.n	8002d5a <sbrk_aligned+0x22>
 8002d74:	e7ef      	b.n	8002d56 <sbrk_aligned+0x1e>
 8002d76:	bf00      	nop
 8002d78:	20000364 	.word	0x20000364

08002d7c <_malloc_r>:
 8002d7c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002d80:	1ccd      	adds	r5, r1, #3
 8002d82:	f025 0503 	bic.w	r5, r5, #3
 8002d86:	3508      	adds	r5, #8
 8002d88:	2d0c      	cmp	r5, #12
 8002d8a:	bf38      	it	cc
 8002d8c:	250c      	movcc	r5, #12
 8002d8e:	2d00      	cmp	r5, #0
 8002d90:	4606      	mov	r6, r0
 8002d92:	db01      	blt.n	8002d98 <_malloc_r+0x1c>
 8002d94:	42a9      	cmp	r1, r5
 8002d96:	d904      	bls.n	8002da2 <_malloc_r+0x26>
 8002d98:	230c      	movs	r3, #12
 8002d9a:	6033      	str	r3, [r6, #0]
 8002d9c:	2000      	movs	r0, #0
 8002d9e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002da2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8002e78 <_malloc_r+0xfc>
 8002da6:	f000 faa1 	bl	80032ec <__malloc_lock>
 8002daa:	f8d8 3000 	ldr.w	r3, [r8]
 8002dae:	461c      	mov	r4, r3
 8002db0:	bb44      	cbnz	r4, 8002e04 <_malloc_r+0x88>
 8002db2:	4629      	mov	r1, r5
 8002db4:	4630      	mov	r0, r6
 8002db6:	f7ff ffbf 	bl	8002d38 <sbrk_aligned>
 8002dba:	1c43      	adds	r3, r0, #1
 8002dbc:	4604      	mov	r4, r0
 8002dbe:	d158      	bne.n	8002e72 <_malloc_r+0xf6>
 8002dc0:	f8d8 4000 	ldr.w	r4, [r8]
 8002dc4:	4627      	mov	r7, r4
 8002dc6:	2f00      	cmp	r7, #0
 8002dc8:	d143      	bne.n	8002e52 <_malloc_r+0xd6>
 8002dca:	2c00      	cmp	r4, #0
 8002dcc:	d04b      	beq.n	8002e66 <_malloc_r+0xea>
 8002dce:	6823      	ldr	r3, [r4, #0]
 8002dd0:	4639      	mov	r1, r7
 8002dd2:	4630      	mov	r0, r6
 8002dd4:	eb04 0903 	add.w	r9, r4, r3
 8002dd8:	f000 fc48 	bl	800366c <_sbrk_r>
 8002ddc:	4581      	cmp	r9, r0
 8002dde:	d142      	bne.n	8002e66 <_malloc_r+0xea>
 8002de0:	6821      	ldr	r1, [r4, #0]
 8002de2:	1a6d      	subs	r5, r5, r1
 8002de4:	4629      	mov	r1, r5
 8002de6:	4630      	mov	r0, r6
 8002de8:	f7ff ffa6 	bl	8002d38 <sbrk_aligned>
 8002dec:	3001      	adds	r0, #1
 8002dee:	d03a      	beq.n	8002e66 <_malloc_r+0xea>
 8002df0:	6823      	ldr	r3, [r4, #0]
 8002df2:	442b      	add	r3, r5
 8002df4:	6023      	str	r3, [r4, #0]
 8002df6:	f8d8 3000 	ldr.w	r3, [r8]
 8002dfa:	685a      	ldr	r2, [r3, #4]
 8002dfc:	bb62      	cbnz	r2, 8002e58 <_malloc_r+0xdc>
 8002dfe:	f8c8 7000 	str.w	r7, [r8]
 8002e02:	e00f      	b.n	8002e24 <_malloc_r+0xa8>
 8002e04:	6822      	ldr	r2, [r4, #0]
 8002e06:	1b52      	subs	r2, r2, r5
 8002e08:	d420      	bmi.n	8002e4c <_malloc_r+0xd0>
 8002e0a:	2a0b      	cmp	r2, #11
 8002e0c:	d917      	bls.n	8002e3e <_malloc_r+0xc2>
 8002e0e:	1961      	adds	r1, r4, r5
 8002e10:	42a3      	cmp	r3, r4
 8002e12:	6025      	str	r5, [r4, #0]
 8002e14:	bf18      	it	ne
 8002e16:	6059      	strne	r1, [r3, #4]
 8002e18:	6863      	ldr	r3, [r4, #4]
 8002e1a:	bf08      	it	eq
 8002e1c:	f8c8 1000 	streq.w	r1, [r8]
 8002e20:	5162      	str	r2, [r4, r5]
 8002e22:	604b      	str	r3, [r1, #4]
 8002e24:	4630      	mov	r0, r6
 8002e26:	f000 fa67 	bl	80032f8 <__malloc_unlock>
 8002e2a:	f104 000b 	add.w	r0, r4, #11
 8002e2e:	1d23      	adds	r3, r4, #4
 8002e30:	f020 0007 	bic.w	r0, r0, #7
 8002e34:	1ac2      	subs	r2, r0, r3
 8002e36:	bf1c      	itt	ne
 8002e38:	1a1b      	subne	r3, r3, r0
 8002e3a:	50a3      	strne	r3, [r4, r2]
 8002e3c:	e7af      	b.n	8002d9e <_malloc_r+0x22>
 8002e3e:	6862      	ldr	r2, [r4, #4]
 8002e40:	42a3      	cmp	r3, r4
 8002e42:	bf0c      	ite	eq
 8002e44:	f8c8 2000 	streq.w	r2, [r8]
 8002e48:	605a      	strne	r2, [r3, #4]
 8002e4a:	e7eb      	b.n	8002e24 <_malloc_r+0xa8>
 8002e4c:	4623      	mov	r3, r4
 8002e4e:	6864      	ldr	r4, [r4, #4]
 8002e50:	e7ae      	b.n	8002db0 <_malloc_r+0x34>
 8002e52:	463c      	mov	r4, r7
 8002e54:	687f      	ldr	r7, [r7, #4]
 8002e56:	e7b6      	b.n	8002dc6 <_malloc_r+0x4a>
 8002e58:	461a      	mov	r2, r3
 8002e5a:	685b      	ldr	r3, [r3, #4]
 8002e5c:	42a3      	cmp	r3, r4
 8002e5e:	d1fb      	bne.n	8002e58 <_malloc_r+0xdc>
 8002e60:	2300      	movs	r3, #0
 8002e62:	6053      	str	r3, [r2, #4]
 8002e64:	e7de      	b.n	8002e24 <_malloc_r+0xa8>
 8002e66:	230c      	movs	r3, #12
 8002e68:	6033      	str	r3, [r6, #0]
 8002e6a:	4630      	mov	r0, r6
 8002e6c:	f000 fa44 	bl	80032f8 <__malloc_unlock>
 8002e70:	e794      	b.n	8002d9c <_malloc_r+0x20>
 8002e72:	6005      	str	r5, [r0, #0]
 8002e74:	e7d6      	b.n	8002e24 <_malloc_r+0xa8>
 8002e76:	bf00      	nop
 8002e78:	20000368 	.word	0x20000368

08002e7c <_printf_common>:
 8002e7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002e80:	4616      	mov	r6, r2
 8002e82:	4698      	mov	r8, r3
 8002e84:	688a      	ldr	r2, [r1, #8]
 8002e86:	690b      	ldr	r3, [r1, #16]
 8002e88:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8002e8c:	4293      	cmp	r3, r2
 8002e8e:	bfb8      	it	lt
 8002e90:	4613      	movlt	r3, r2
 8002e92:	6033      	str	r3, [r6, #0]
 8002e94:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8002e98:	4607      	mov	r7, r0
 8002e9a:	460c      	mov	r4, r1
 8002e9c:	b10a      	cbz	r2, 8002ea2 <_printf_common+0x26>
 8002e9e:	3301      	adds	r3, #1
 8002ea0:	6033      	str	r3, [r6, #0]
 8002ea2:	6823      	ldr	r3, [r4, #0]
 8002ea4:	0699      	lsls	r1, r3, #26
 8002ea6:	bf42      	ittt	mi
 8002ea8:	6833      	ldrmi	r3, [r6, #0]
 8002eaa:	3302      	addmi	r3, #2
 8002eac:	6033      	strmi	r3, [r6, #0]
 8002eae:	6825      	ldr	r5, [r4, #0]
 8002eb0:	f015 0506 	ands.w	r5, r5, #6
 8002eb4:	d106      	bne.n	8002ec4 <_printf_common+0x48>
 8002eb6:	f104 0a19 	add.w	sl, r4, #25
 8002eba:	68e3      	ldr	r3, [r4, #12]
 8002ebc:	6832      	ldr	r2, [r6, #0]
 8002ebe:	1a9b      	subs	r3, r3, r2
 8002ec0:	42ab      	cmp	r3, r5
 8002ec2:	dc26      	bgt.n	8002f12 <_printf_common+0x96>
 8002ec4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8002ec8:	6822      	ldr	r2, [r4, #0]
 8002eca:	3b00      	subs	r3, #0
 8002ecc:	bf18      	it	ne
 8002ece:	2301      	movne	r3, #1
 8002ed0:	0692      	lsls	r2, r2, #26
 8002ed2:	d42b      	bmi.n	8002f2c <_printf_common+0xb0>
 8002ed4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8002ed8:	4641      	mov	r1, r8
 8002eda:	4638      	mov	r0, r7
 8002edc:	47c8      	blx	r9
 8002ede:	3001      	adds	r0, #1
 8002ee0:	d01e      	beq.n	8002f20 <_printf_common+0xa4>
 8002ee2:	6823      	ldr	r3, [r4, #0]
 8002ee4:	6922      	ldr	r2, [r4, #16]
 8002ee6:	f003 0306 	and.w	r3, r3, #6
 8002eea:	2b04      	cmp	r3, #4
 8002eec:	bf02      	ittt	eq
 8002eee:	68e5      	ldreq	r5, [r4, #12]
 8002ef0:	6833      	ldreq	r3, [r6, #0]
 8002ef2:	1aed      	subeq	r5, r5, r3
 8002ef4:	68a3      	ldr	r3, [r4, #8]
 8002ef6:	bf0c      	ite	eq
 8002ef8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002efc:	2500      	movne	r5, #0
 8002efe:	4293      	cmp	r3, r2
 8002f00:	bfc4      	itt	gt
 8002f02:	1a9b      	subgt	r3, r3, r2
 8002f04:	18ed      	addgt	r5, r5, r3
 8002f06:	2600      	movs	r6, #0
 8002f08:	341a      	adds	r4, #26
 8002f0a:	42b5      	cmp	r5, r6
 8002f0c:	d11a      	bne.n	8002f44 <_printf_common+0xc8>
 8002f0e:	2000      	movs	r0, #0
 8002f10:	e008      	b.n	8002f24 <_printf_common+0xa8>
 8002f12:	2301      	movs	r3, #1
 8002f14:	4652      	mov	r2, sl
 8002f16:	4641      	mov	r1, r8
 8002f18:	4638      	mov	r0, r7
 8002f1a:	47c8      	blx	r9
 8002f1c:	3001      	adds	r0, #1
 8002f1e:	d103      	bne.n	8002f28 <_printf_common+0xac>
 8002f20:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002f24:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002f28:	3501      	adds	r5, #1
 8002f2a:	e7c6      	b.n	8002eba <_printf_common+0x3e>
 8002f2c:	18e1      	adds	r1, r4, r3
 8002f2e:	1c5a      	adds	r2, r3, #1
 8002f30:	2030      	movs	r0, #48	@ 0x30
 8002f32:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8002f36:	4422      	add	r2, r4
 8002f38:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8002f3c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8002f40:	3302      	adds	r3, #2
 8002f42:	e7c7      	b.n	8002ed4 <_printf_common+0x58>
 8002f44:	2301      	movs	r3, #1
 8002f46:	4622      	mov	r2, r4
 8002f48:	4641      	mov	r1, r8
 8002f4a:	4638      	mov	r0, r7
 8002f4c:	47c8      	blx	r9
 8002f4e:	3001      	adds	r0, #1
 8002f50:	d0e6      	beq.n	8002f20 <_printf_common+0xa4>
 8002f52:	3601      	adds	r6, #1
 8002f54:	e7d9      	b.n	8002f0a <_printf_common+0x8e>
	...

08002f58 <_printf_i>:
 8002f58:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002f5c:	7e0f      	ldrb	r7, [r1, #24]
 8002f5e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8002f60:	2f78      	cmp	r7, #120	@ 0x78
 8002f62:	4691      	mov	r9, r2
 8002f64:	4680      	mov	r8, r0
 8002f66:	460c      	mov	r4, r1
 8002f68:	469a      	mov	sl, r3
 8002f6a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8002f6e:	d807      	bhi.n	8002f80 <_printf_i+0x28>
 8002f70:	2f62      	cmp	r7, #98	@ 0x62
 8002f72:	d80a      	bhi.n	8002f8a <_printf_i+0x32>
 8002f74:	2f00      	cmp	r7, #0
 8002f76:	f000 80d1 	beq.w	800311c <_printf_i+0x1c4>
 8002f7a:	2f58      	cmp	r7, #88	@ 0x58
 8002f7c:	f000 80b8 	beq.w	80030f0 <_printf_i+0x198>
 8002f80:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8002f84:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8002f88:	e03a      	b.n	8003000 <_printf_i+0xa8>
 8002f8a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8002f8e:	2b15      	cmp	r3, #21
 8002f90:	d8f6      	bhi.n	8002f80 <_printf_i+0x28>
 8002f92:	a101      	add	r1, pc, #4	@ (adr r1, 8002f98 <_printf_i+0x40>)
 8002f94:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8002f98:	08002ff1 	.word	0x08002ff1
 8002f9c:	08003005 	.word	0x08003005
 8002fa0:	08002f81 	.word	0x08002f81
 8002fa4:	08002f81 	.word	0x08002f81
 8002fa8:	08002f81 	.word	0x08002f81
 8002fac:	08002f81 	.word	0x08002f81
 8002fb0:	08003005 	.word	0x08003005
 8002fb4:	08002f81 	.word	0x08002f81
 8002fb8:	08002f81 	.word	0x08002f81
 8002fbc:	08002f81 	.word	0x08002f81
 8002fc0:	08002f81 	.word	0x08002f81
 8002fc4:	08003103 	.word	0x08003103
 8002fc8:	0800302f 	.word	0x0800302f
 8002fcc:	080030bd 	.word	0x080030bd
 8002fd0:	08002f81 	.word	0x08002f81
 8002fd4:	08002f81 	.word	0x08002f81
 8002fd8:	08003125 	.word	0x08003125
 8002fdc:	08002f81 	.word	0x08002f81
 8002fe0:	0800302f 	.word	0x0800302f
 8002fe4:	08002f81 	.word	0x08002f81
 8002fe8:	08002f81 	.word	0x08002f81
 8002fec:	080030c5 	.word	0x080030c5
 8002ff0:	6833      	ldr	r3, [r6, #0]
 8002ff2:	1d1a      	adds	r2, r3, #4
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	6032      	str	r2, [r6, #0]
 8002ff8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8002ffc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8003000:	2301      	movs	r3, #1
 8003002:	e09c      	b.n	800313e <_printf_i+0x1e6>
 8003004:	6833      	ldr	r3, [r6, #0]
 8003006:	6820      	ldr	r0, [r4, #0]
 8003008:	1d19      	adds	r1, r3, #4
 800300a:	6031      	str	r1, [r6, #0]
 800300c:	0606      	lsls	r6, r0, #24
 800300e:	d501      	bpl.n	8003014 <_printf_i+0xbc>
 8003010:	681d      	ldr	r5, [r3, #0]
 8003012:	e003      	b.n	800301c <_printf_i+0xc4>
 8003014:	0645      	lsls	r5, r0, #25
 8003016:	d5fb      	bpl.n	8003010 <_printf_i+0xb8>
 8003018:	f9b3 5000 	ldrsh.w	r5, [r3]
 800301c:	2d00      	cmp	r5, #0
 800301e:	da03      	bge.n	8003028 <_printf_i+0xd0>
 8003020:	232d      	movs	r3, #45	@ 0x2d
 8003022:	426d      	negs	r5, r5
 8003024:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003028:	4858      	ldr	r0, [pc, #352]	@ (800318c <_printf_i+0x234>)
 800302a:	230a      	movs	r3, #10
 800302c:	e011      	b.n	8003052 <_printf_i+0xfa>
 800302e:	6821      	ldr	r1, [r4, #0]
 8003030:	6833      	ldr	r3, [r6, #0]
 8003032:	0608      	lsls	r0, r1, #24
 8003034:	f853 5b04 	ldr.w	r5, [r3], #4
 8003038:	d402      	bmi.n	8003040 <_printf_i+0xe8>
 800303a:	0649      	lsls	r1, r1, #25
 800303c:	bf48      	it	mi
 800303e:	b2ad      	uxthmi	r5, r5
 8003040:	2f6f      	cmp	r7, #111	@ 0x6f
 8003042:	4852      	ldr	r0, [pc, #328]	@ (800318c <_printf_i+0x234>)
 8003044:	6033      	str	r3, [r6, #0]
 8003046:	bf14      	ite	ne
 8003048:	230a      	movne	r3, #10
 800304a:	2308      	moveq	r3, #8
 800304c:	2100      	movs	r1, #0
 800304e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8003052:	6866      	ldr	r6, [r4, #4]
 8003054:	60a6      	str	r6, [r4, #8]
 8003056:	2e00      	cmp	r6, #0
 8003058:	db05      	blt.n	8003066 <_printf_i+0x10e>
 800305a:	6821      	ldr	r1, [r4, #0]
 800305c:	432e      	orrs	r6, r5
 800305e:	f021 0104 	bic.w	r1, r1, #4
 8003062:	6021      	str	r1, [r4, #0]
 8003064:	d04b      	beq.n	80030fe <_printf_i+0x1a6>
 8003066:	4616      	mov	r6, r2
 8003068:	fbb5 f1f3 	udiv	r1, r5, r3
 800306c:	fb03 5711 	mls	r7, r3, r1, r5
 8003070:	5dc7      	ldrb	r7, [r0, r7]
 8003072:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003076:	462f      	mov	r7, r5
 8003078:	42bb      	cmp	r3, r7
 800307a:	460d      	mov	r5, r1
 800307c:	d9f4      	bls.n	8003068 <_printf_i+0x110>
 800307e:	2b08      	cmp	r3, #8
 8003080:	d10b      	bne.n	800309a <_printf_i+0x142>
 8003082:	6823      	ldr	r3, [r4, #0]
 8003084:	07df      	lsls	r7, r3, #31
 8003086:	d508      	bpl.n	800309a <_printf_i+0x142>
 8003088:	6923      	ldr	r3, [r4, #16]
 800308a:	6861      	ldr	r1, [r4, #4]
 800308c:	4299      	cmp	r1, r3
 800308e:	bfde      	ittt	le
 8003090:	2330      	movle	r3, #48	@ 0x30
 8003092:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003096:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 800309a:	1b92      	subs	r2, r2, r6
 800309c:	6122      	str	r2, [r4, #16]
 800309e:	f8cd a000 	str.w	sl, [sp]
 80030a2:	464b      	mov	r3, r9
 80030a4:	aa03      	add	r2, sp, #12
 80030a6:	4621      	mov	r1, r4
 80030a8:	4640      	mov	r0, r8
 80030aa:	f7ff fee7 	bl	8002e7c <_printf_common>
 80030ae:	3001      	adds	r0, #1
 80030b0:	d14a      	bne.n	8003148 <_printf_i+0x1f0>
 80030b2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80030b6:	b004      	add	sp, #16
 80030b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80030bc:	6823      	ldr	r3, [r4, #0]
 80030be:	f043 0320 	orr.w	r3, r3, #32
 80030c2:	6023      	str	r3, [r4, #0]
 80030c4:	4832      	ldr	r0, [pc, #200]	@ (8003190 <_printf_i+0x238>)
 80030c6:	2778      	movs	r7, #120	@ 0x78
 80030c8:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80030cc:	6823      	ldr	r3, [r4, #0]
 80030ce:	6831      	ldr	r1, [r6, #0]
 80030d0:	061f      	lsls	r7, r3, #24
 80030d2:	f851 5b04 	ldr.w	r5, [r1], #4
 80030d6:	d402      	bmi.n	80030de <_printf_i+0x186>
 80030d8:	065f      	lsls	r7, r3, #25
 80030da:	bf48      	it	mi
 80030dc:	b2ad      	uxthmi	r5, r5
 80030de:	6031      	str	r1, [r6, #0]
 80030e0:	07d9      	lsls	r1, r3, #31
 80030e2:	bf44      	itt	mi
 80030e4:	f043 0320 	orrmi.w	r3, r3, #32
 80030e8:	6023      	strmi	r3, [r4, #0]
 80030ea:	b11d      	cbz	r5, 80030f4 <_printf_i+0x19c>
 80030ec:	2310      	movs	r3, #16
 80030ee:	e7ad      	b.n	800304c <_printf_i+0xf4>
 80030f0:	4826      	ldr	r0, [pc, #152]	@ (800318c <_printf_i+0x234>)
 80030f2:	e7e9      	b.n	80030c8 <_printf_i+0x170>
 80030f4:	6823      	ldr	r3, [r4, #0]
 80030f6:	f023 0320 	bic.w	r3, r3, #32
 80030fa:	6023      	str	r3, [r4, #0]
 80030fc:	e7f6      	b.n	80030ec <_printf_i+0x194>
 80030fe:	4616      	mov	r6, r2
 8003100:	e7bd      	b.n	800307e <_printf_i+0x126>
 8003102:	6833      	ldr	r3, [r6, #0]
 8003104:	6825      	ldr	r5, [r4, #0]
 8003106:	6961      	ldr	r1, [r4, #20]
 8003108:	1d18      	adds	r0, r3, #4
 800310a:	6030      	str	r0, [r6, #0]
 800310c:	062e      	lsls	r6, r5, #24
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	d501      	bpl.n	8003116 <_printf_i+0x1be>
 8003112:	6019      	str	r1, [r3, #0]
 8003114:	e002      	b.n	800311c <_printf_i+0x1c4>
 8003116:	0668      	lsls	r0, r5, #25
 8003118:	d5fb      	bpl.n	8003112 <_printf_i+0x1ba>
 800311a:	8019      	strh	r1, [r3, #0]
 800311c:	2300      	movs	r3, #0
 800311e:	6123      	str	r3, [r4, #16]
 8003120:	4616      	mov	r6, r2
 8003122:	e7bc      	b.n	800309e <_printf_i+0x146>
 8003124:	6833      	ldr	r3, [r6, #0]
 8003126:	1d1a      	adds	r2, r3, #4
 8003128:	6032      	str	r2, [r6, #0]
 800312a:	681e      	ldr	r6, [r3, #0]
 800312c:	6862      	ldr	r2, [r4, #4]
 800312e:	2100      	movs	r1, #0
 8003130:	4630      	mov	r0, r6
 8003132:	f7fd f85d 	bl	80001f0 <memchr>
 8003136:	b108      	cbz	r0, 800313c <_printf_i+0x1e4>
 8003138:	1b80      	subs	r0, r0, r6
 800313a:	6060      	str	r0, [r4, #4]
 800313c:	6863      	ldr	r3, [r4, #4]
 800313e:	6123      	str	r3, [r4, #16]
 8003140:	2300      	movs	r3, #0
 8003142:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003146:	e7aa      	b.n	800309e <_printf_i+0x146>
 8003148:	6923      	ldr	r3, [r4, #16]
 800314a:	4632      	mov	r2, r6
 800314c:	4649      	mov	r1, r9
 800314e:	4640      	mov	r0, r8
 8003150:	47d0      	blx	sl
 8003152:	3001      	adds	r0, #1
 8003154:	d0ad      	beq.n	80030b2 <_printf_i+0x15a>
 8003156:	6823      	ldr	r3, [r4, #0]
 8003158:	079b      	lsls	r3, r3, #30
 800315a:	d413      	bmi.n	8003184 <_printf_i+0x22c>
 800315c:	68e0      	ldr	r0, [r4, #12]
 800315e:	9b03      	ldr	r3, [sp, #12]
 8003160:	4298      	cmp	r0, r3
 8003162:	bfb8      	it	lt
 8003164:	4618      	movlt	r0, r3
 8003166:	e7a6      	b.n	80030b6 <_printf_i+0x15e>
 8003168:	2301      	movs	r3, #1
 800316a:	4632      	mov	r2, r6
 800316c:	4649      	mov	r1, r9
 800316e:	4640      	mov	r0, r8
 8003170:	47d0      	blx	sl
 8003172:	3001      	adds	r0, #1
 8003174:	d09d      	beq.n	80030b2 <_printf_i+0x15a>
 8003176:	3501      	adds	r5, #1
 8003178:	68e3      	ldr	r3, [r4, #12]
 800317a:	9903      	ldr	r1, [sp, #12]
 800317c:	1a5b      	subs	r3, r3, r1
 800317e:	42ab      	cmp	r3, r5
 8003180:	dcf2      	bgt.n	8003168 <_printf_i+0x210>
 8003182:	e7eb      	b.n	800315c <_printf_i+0x204>
 8003184:	2500      	movs	r5, #0
 8003186:	f104 0619 	add.w	r6, r4, #25
 800318a:	e7f5      	b.n	8003178 <_printf_i+0x220>
 800318c:	08004235 	.word	0x08004235
 8003190:	08004246 	.word	0x08004246

08003194 <__sflush_r>:
 8003194:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8003198:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800319c:	0716      	lsls	r6, r2, #28
 800319e:	4605      	mov	r5, r0
 80031a0:	460c      	mov	r4, r1
 80031a2:	d454      	bmi.n	800324e <__sflush_r+0xba>
 80031a4:	684b      	ldr	r3, [r1, #4]
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	dc02      	bgt.n	80031b0 <__sflush_r+0x1c>
 80031aa:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	dd48      	ble.n	8003242 <__sflush_r+0xae>
 80031b0:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80031b2:	2e00      	cmp	r6, #0
 80031b4:	d045      	beq.n	8003242 <__sflush_r+0xae>
 80031b6:	2300      	movs	r3, #0
 80031b8:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80031bc:	682f      	ldr	r7, [r5, #0]
 80031be:	6a21      	ldr	r1, [r4, #32]
 80031c0:	602b      	str	r3, [r5, #0]
 80031c2:	d030      	beq.n	8003226 <__sflush_r+0x92>
 80031c4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80031c6:	89a3      	ldrh	r3, [r4, #12]
 80031c8:	0759      	lsls	r1, r3, #29
 80031ca:	d505      	bpl.n	80031d8 <__sflush_r+0x44>
 80031cc:	6863      	ldr	r3, [r4, #4]
 80031ce:	1ad2      	subs	r2, r2, r3
 80031d0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80031d2:	b10b      	cbz	r3, 80031d8 <__sflush_r+0x44>
 80031d4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80031d6:	1ad2      	subs	r2, r2, r3
 80031d8:	2300      	movs	r3, #0
 80031da:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80031dc:	6a21      	ldr	r1, [r4, #32]
 80031de:	4628      	mov	r0, r5
 80031e0:	47b0      	blx	r6
 80031e2:	1c43      	adds	r3, r0, #1
 80031e4:	89a3      	ldrh	r3, [r4, #12]
 80031e6:	d106      	bne.n	80031f6 <__sflush_r+0x62>
 80031e8:	6829      	ldr	r1, [r5, #0]
 80031ea:	291d      	cmp	r1, #29
 80031ec:	d82b      	bhi.n	8003246 <__sflush_r+0xb2>
 80031ee:	4a2a      	ldr	r2, [pc, #168]	@ (8003298 <__sflush_r+0x104>)
 80031f0:	40ca      	lsrs	r2, r1
 80031f2:	07d6      	lsls	r6, r2, #31
 80031f4:	d527      	bpl.n	8003246 <__sflush_r+0xb2>
 80031f6:	2200      	movs	r2, #0
 80031f8:	6062      	str	r2, [r4, #4]
 80031fa:	04d9      	lsls	r1, r3, #19
 80031fc:	6922      	ldr	r2, [r4, #16]
 80031fe:	6022      	str	r2, [r4, #0]
 8003200:	d504      	bpl.n	800320c <__sflush_r+0x78>
 8003202:	1c42      	adds	r2, r0, #1
 8003204:	d101      	bne.n	800320a <__sflush_r+0x76>
 8003206:	682b      	ldr	r3, [r5, #0]
 8003208:	b903      	cbnz	r3, 800320c <__sflush_r+0x78>
 800320a:	6560      	str	r0, [r4, #84]	@ 0x54
 800320c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800320e:	602f      	str	r7, [r5, #0]
 8003210:	b1b9      	cbz	r1, 8003242 <__sflush_r+0xae>
 8003212:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8003216:	4299      	cmp	r1, r3
 8003218:	d002      	beq.n	8003220 <__sflush_r+0x8c>
 800321a:	4628      	mov	r0, r5
 800321c:	f000 fa72 	bl	8003704 <_free_r>
 8003220:	2300      	movs	r3, #0
 8003222:	6363      	str	r3, [r4, #52]	@ 0x34
 8003224:	e00d      	b.n	8003242 <__sflush_r+0xae>
 8003226:	2301      	movs	r3, #1
 8003228:	4628      	mov	r0, r5
 800322a:	47b0      	blx	r6
 800322c:	4602      	mov	r2, r0
 800322e:	1c50      	adds	r0, r2, #1
 8003230:	d1c9      	bne.n	80031c6 <__sflush_r+0x32>
 8003232:	682b      	ldr	r3, [r5, #0]
 8003234:	2b00      	cmp	r3, #0
 8003236:	d0c6      	beq.n	80031c6 <__sflush_r+0x32>
 8003238:	2b1d      	cmp	r3, #29
 800323a:	d001      	beq.n	8003240 <__sflush_r+0xac>
 800323c:	2b16      	cmp	r3, #22
 800323e:	d11e      	bne.n	800327e <__sflush_r+0xea>
 8003240:	602f      	str	r7, [r5, #0]
 8003242:	2000      	movs	r0, #0
 8003244:	e022      	b.n	800328c <__sflush_r+0xf8>
 8003246:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800324a:	b21b      	sxth	r3, r3
 800324c:	e01b      	b.n	8003286 <__sflush_r+0xf2>
 800324e:	690f      	ldr	r7, [r1, #16]
 8003250:	2f00      	cmp	r7, #0
 8003252:	d0f6      	beq.n	8003242 <__sflush_r+0xae>
 8003254:	0793      	lsls	r3, r2, #30
 8003256:	680e      	ldr	r6, [r1, #0]
 8003258:	bf08      	it	eq
 800325a:	694b      	ldreq	r3, [r1, #20]
 800325c:	600f      	str	r7, [r1, #0]
 800325e:	bf18      	it	ne
 8003260:	2300      	movne	r3, #0
 8003262:	eba6 0807 	sub.w	r8, r6, r7
 8003266:	608b      	str	r3, [r1, #8]
 8003268:	f1b8 0f00 	cmp.w	r8, #0
 800326c:	dde9      	ble.n	8003242 <__sflush_r+0xae>
 800326e:	6a21      	ldr	r1, [r4, #32]
 8003270:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8003272:	4643      	mov	r3, r8
 8003274:	463a      	mov	r2, r7
 8003276:	4628      	mov	r0, r5
 8003278:	47b0      	blx	r6
 800327a:	2800      	cmp	r0, #0
 800327c:	dc08      	bgt.n	8003290 <__sflush_r+0xfc>
 800327e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003282:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003286:	81a3      	strh	r3, [r4, #12]
 8003288:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800328c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003290:	4407      	add	r7, r0
 8003292:	eba8 0800 	sub.w	r8, r8, r0
 8003296:	e7e7      	b.n	8003268 <__sflush_r+0xd4>
 8003298:	20400001 	.word	0x20400001

0800329c <_fflush_r>:
 800329c:	b538      	push	{r3, r4, r5, lr}
 800329e:	690b      	ldr	r3, [r1, #16]
 80032a0:	4605      	mov	r5, r0
 80032a2:	460c      	mov	r4, r1
 80032a4:	b913      	cbnz	r3, 80032ac <_fflush_r+0x10>
 80032a6:	2500      	movs	r5, #0
 80032a8:	4628      	mov	r0, r5
 80032aa:	bd38      	pop	{r3, r4, r5, pc}
 80032ac:	b118      	cbz	r0, 80032b6 <_fflush_r+0x1a>
 80032ae:	6a03      	ldr	r3, [r0, #32]
 80032b0:	b90b      	cbnz	r3, 80032b6 <_fflush_r+0x1a>
 80032b2:	f7ff fa71 	bl	8002798 <__sinit>
 80032b6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d0f3      	beq.n	80032a6 <_fflush_r+0xa>
 80032be:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80032c0:	07d0      	lsls	r0, r2, #31
 80032c2:	d404      	bmi.n	80032ce <_fflush_r+0x32>
 80032c4:	0599      	lsls	r1, r3, #22
 80032c6:	d402      	bmi.n	80032ce <_fflush_r+0x32>
 80032c8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80032ca:	f7ff fbca 	bl	8002a62 <__retarget_lock_acquire_recursive>
 80032ce:	4628      	mov	r0, r5
 80032d0:	4621      	mov	r1, r4
 80032d2:	f7ff ff5f 	bl	8003194 <__sflush_r>
 80032d6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80032d8:	07da      	lsls	r2, r3, #31
 80032da:	4605      	mov	r5, r0
 80032dc:	d4e4      	bmi.n	80032a8 <_fflush_r+0xc>
 80032de:	89a3      	ldrh	r3, [r4, #12]
 80032e0:	059b      	lsls	r3, r3, #22
 80032e2:	d4e1      	bmi.n	80032a8 <_fflush_r+0xc>
 80032e4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80032e6:	f7ff fbbd 	bl	8002a64 <__retarget_lock_release_recursive>
 80032ea:	e7dd      	b.n	80032a8 <_fflush_r+0xc>

080032ec <__malloc_lock>:
 80032ec:	4801      	ldr	r0, [pc, #4]	@ (80032f4 <__malloc_lock+0x8>)
 80032ee:	f7ff bbb8 	b.w	8002a62 <__retarget_lock_acquire_recursive>
 80032f2:	bf00      	nop
 80032f4:	20000360 	.word	0x20000360

080032f8 <__malloc_unlock>:
 80032f8:	4801      	ldr	r0, [pc, #4]	@ (8003300 <__malloc_unlock+0x8>)
 80032fa:	f7ff bbb3 	b.w	8002a64 <__retarget_lock_release_recursive>
 80032fe:	bf00      	nop
 8003300:	20000360 	.word	0x20000360

08003304 <__sread>:
 8003304:	b510      	push	{r4, lr}
 8003306:	460c      	mov	r4, r1
 8003308:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800330c:	f000 f99c 	bl	8003648 <_read_r>
 8003310:	2800      	cmp	r0, #0
 8003312:	bfab      	itete	ge
 8003314:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8003316:	89a3      	ldrhlt	r3, [r4, #12]
 8003318:	181b      	addge	r3, r3, r0
 800331a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800331e:	bfac      	ite	ge
 8003320:	6563      	strge	r3, [r4, #84]	@ 0x54
 8003322:	81a3      	strhlt	r3, [r4, #12]
 8003324:	bd10      	pop	{r4, pc}

08003326 <__swrite>:
 8003326:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800332a:	461f      	mov	r7, r3
 800332c:	898b      	ldrh	r3, [r1, #12]
 800332e:	05db      	lsls	r3, r3, #23
 8003330:	4605      	mov	r5, r0
 8003332:	460c      	mov	r4, r1
 8003334:	4616      	mov	r6, r2
 8003336:	d505      	bpl.n	8003344 <__swrite+0x1e>
 8003338:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800333c:	2302      	movs	r3, #2
 800333e:	2200      	movs	r2, #0
 8003340:	f000 f970 	bl	8003624 <_lseek_r>
 8003344:	89a3      	ldrh	r3, [r4, #12]
 8003346:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800334a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800334e:	81a3      	strh	r3, [r4, #12]
 8003350:	4632      	mov	r2, r6
 8003352:	463b      	mov	r3, r7
 8003354:	4628      	mov	r0, r5
 8003356:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800335a:	f000 b997 	b.w	800368c <_write_r>

0800335e <__sseek>:
 800335e:	b510      	push	{r4, lr}
 8003360:	460c      	mov	r4, r1
 8003362:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003366:	f000 f95d 	bl	8003624 <_lseek_r>
 800336a:	1c43      	adds	r3, r0, #1
 800336c:	89a3      	ldrh	r3, [r4, #12]
 800336e:	bf15      	itete	ne
 8003370:	6560      	strne	r0, [r4, #84]	@ 0x54
 8003372:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8003376:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800337a:	81a3      	strheq	r3, [r4, #12]
 800337c:	bf18      	it	ne
 800337e:	81a3      	strhne	r3, [r4, #12]
 8003380:	bd10      	pop	{r4, pc}

08003382 <__sclose>:
 8003382:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003386:	f000 b993 	b.w	80036b0 <_close_r>
	...

0800338c <fiprintf>:
 800338c:	b40e      	push	{r1, r2, r3}
 800338e:	b503      	push	{r0, r1, lr}
 8003390:	4601      	mov	r1, r0
 8003392:	ab03      	add	r3, sp, #12
 8003394:	4805      	ldr	r0, [pc, #20]	@ (80033ac <fiprintf+0x20>)
 8003396:	f853 2b04 	ldr.w	r2, [r3], #4
 800339a:	6800      	ldr	r0, [r0, #0]
 800339c:	9301      	str	r3, [sp, #4]
 800339e:	f7ff fbab 	bl	8002af8 <_vfiprintf_r>
 80033a2:	b002      	add	sp, #8
 80033a4:	f85d eb04 	ldr.w	lr, [sp], #4
 80033a8:	b003      	add	sp, #12
 80033aa:	4770      	bx	lr
 80033ac:	20000090 	.word	0x20000090

080033b0 <__swbuf_r>:
 80033b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80033b2:	460e      	mov	r6, r1
 80033b4:	4614      	mov	r4, r2
 80033b6:	4605      	mov	r5, r0
 80033b8:	b118      	cbz	r0, 80033c2 <__swbuf_r+0x12>
 80033ba:	6a03      	ldr	r3, [r0, #32]
 80033bc:	b90b      	cbnz	r3, 80033c2 <__swbuf_r+0x12>
 80033be:	f7ff f9eb 	bl	8002798 <__sinit>
 80033c2:	69a3      	ldr	r3, [r4, #24]
 80033c4:	60a3      	str	r3, [r4, #8]
 80033c6:	89a3      	ldrh	r3, [r4, #12]
 80033c8:	071a      	lsls	r2, r3, #28
 80033ca:	d501      	bpl.n	80033d0 <__swbuf_r+0x20>
 80033cc:	6923      	ldr	r3, [r4, #16]
 80033ce:	b943      	cbnz	r3, 80033e2 <__swbuf_r+0x32>
 80033d0:	4621      	mov	r1, r4
 80033d2:	4628      	mov	r0, r5
 80033d4:	f000 f82a 	bl	800342c <__swsetup_r>
 80033d8:	b118      	cbz	r0, 80033e2 <__swbuf_r+0x32>
 80033da:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 80033de:	4638      	mov	r0, r7
 80033e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80033e2:	6823      	ldr	r3, [r4, #0]
 80033e4:	6922      	ldr	r2, [r4, #16]
 80033e6:	1a98      	subs	r0, r3, r2
 80033e8:	6963      	ldr	r3, [r4, #20]
 80033ea:	b2f6      	uxtb	r6, r6
 80033ec:	4283      	cmp	r3, r0
 80033ee:	4637      	mov	r7, r6
 80033f0:	dc05      	bgt.n	80033fe <__swbuf_r+0x4e>
 80033f2:	4621      	mov	r1, r4
 80033f4:	4628      	mov	r0, r5
 80033f6:	f7ff ff51 	bl	800329c <_fflush_r>
 80033fa:	2800      	cmp	r0, #0
 80033fc:	d1ed      	bne.n	80033da <__swbuf_r+0x2a>
 80033fe:	68a3      	ldr	r3, [r4, #8]
 8003400:	3b01      	subs	r3, #1
 8003402:	60a3      	str	r3, [r4, #8]
 8003404:	6823      	ldr	r3, [r4, #0]
 8003406:	1c5a      	adds	r2, r3, #1
 8003408:	6022      	str	r2, [r4, #0]
 800340a:	701e      	strb	r6, [r3, #0]
 800340c:	6962      	ldr	r2, [r4, #20]
 800340e:	1c43      	adds	r3, r0, #1
 8003410:	429a      	cmp	r2, r3
 8003412:	d004      	beq.n	800341e <__swbuf_r+0x6e>
 8003414:	89a3      	ldrh	r3, [r4, #12]
 8003416:	07db      	lsls	r3, r3, #31
 8003418:	d5e1      	bpl.n	80033de <__swbuf_r+0x2e>
 800341a:	2e0a      	cmp	r6, #10
 800341c:	d1df      	bne.n	80033de <__swbuf_r+0x2e>
 800341e:	4621      	mov	r1, r4
 8003420:	4628      	mov	r0, r5
 8003422:	f7ff ff3b 	bl	800329c <_fflush_r>
 8003426:	2800      	cmp	r0, #0
 8003428:	d0d9      	beq.n	80033de <__swbuf_r+0x2e>
 800342a:	e7d6      	b.n	80033da <__swbuf_r+0x2a>

0800342c <__swsetup_r>:
 800342c:	b538      	push	{r3, r4, r5, lr}
 800342e:	4b29      	ldr	r3, [pc, #164]	@ (80034d4 <__swsetup_r+0xa8>)
 8003430:	4605      	mov	r5, r0
 8003432:	6818      	ldr	r0, [r3, #0]
 8003434:	460c      	mov	r4, r1
 8003436:	b118      	cbz	r0, 8003440 <__swsetup_r+0x14>
 8003438:	6a03      	ldr	r3, [r0, #32]
 800343a:	b90b      	cbnz	r3, 8003440 <__swsetup_r+0x14>
 800343c:	f7ff f9ac 	bl	8002798 <__sinit>
 8003440:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003444:	0719      	lsls	r1, r3, #28
 8003446:	d422      	bmi.n	800348e <__swsetup_r+0x62>
 8003448:	06da      	lsls	r2, r3, #27
 800344a:	d407      	bmi.n	800345c <__swsetup_r+0x30>
 800344c:	2209      	movs	r2, #9
 800344e:	602a      	str	r2, [r5, #0]
 8003450:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003454:	81a3      	strh	r3, [r4, #12]
 8003456:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800345a:	e033      	b.n	80034c4 <__swsetup_r+0x98>
 800345c:	0758      	lsls	r0, r3, #29
 800345e:	d512      	bpl.n	8003486 <__swsetup_r+0x5a>
 8003460:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8003462:	b141      	cbz	r1, 8003476 <__swsetup_r+0x4a>
 8003464:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8003468:	4299      	cmp	r1, r3
 800346a:	d002      	beq.n	8003472 <__swsetup_r+0x46>
 800346c:	4628      	mov	r0, r5
 800346e:	f000 f949 	bl	8003704 <_free_r>
 8003472:	2300      	movs	r3, #0
 8003474:	6363      	str	r3, [r4, #52]	@ 0x34
 8003476:	89a3      	ldrh	r3, [r4, #12]
 8003478:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800347c:	81a3      	strh	r3, [r4, #12]
 800347e:	2300      	movs	r3, #0
 8003480:	6063      	str	r3, [r4, #4]
 8003482:	6923      	ldr	r3, [r4, #16]
 8003484:	6023      	str	r3, [r4, #0]
 8003486:	89a3      	ldrh	r3, [r4, #12]
 8003488:	f043 0308 	orr.w	r3, r3, #8
 800348c:	81a3      	strh	r3, [r4, #12]
 800348e:	6923      	ldr	r3, [r4, #16]
 8003490:	b94b      	cbnz	r3, 80034a6 <__swsetup_r+0x7a>
 8003492:	89a3      	ldrh	r3, [r4, #12]
 8003494:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8003498:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800349c:	d003      	beq.n	80034a6 <__swsetup_r+0x7a>
 800349e:	4621      	mov	r1, r4
 80034a0:	4628      	mov	r0, r5
 80034a2:	f000 f83f 	bl	8003524 <__smakebuf_r>
 80034a6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80034aa:	f013 0201 	ands.w	r2, r3, #1
 80034ae:	d00a      	beq.n	80034c6 <__swsetup_r+0x9a>
 80034b0:	2200      	movs	r2, #0
 80034b2:	60a2      	str	r2, [r4, #8]
 80034b4:	6962      	ldr	r2, [r4, #20]
 80034b6:	4252      	negs	r2, r2
 80034b8:	61a2      	str	r2, [r4, #24]
 80034ba:	6922      	ldr	r2, [r4, #16]
 80034bc:	b942      	cbnz	r2, 80034d0 <__swsetup_r+0xa4>
 80034be:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80034c2:	d1c5      	bne.n	8003450 <__swsetup_r+0x24>
 80034c4:	bd38      	pop	{r3, r4, r5, pc}
 80034c6:	0799      	lsls	r1, r3, #30
 80034c8:	bf58      	it	pl
 80034ca:	6962      	ldrpl	r2, [r4, #20]
 80034cc:	60a2      	str	r2, [r4, #8]
 80034ce:	e7f4      	b.n	80034ba <__swsetup_r+0x8e>
 80034d0:	2000      	movs	r0, #0
 80034d2:	e7f7      	b.n	80034c4 <__swsetup_r+0x98>
 80034d4:	20000090 	.word	0x20000090

080034d8 <__swhatbuf_r>:
 80034d8:	b570      	push	{r4, r5, r6, lr}
 80034da:	460c      	mov	r4, r1
 80034dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80034e0:	2900      	cmp	r1, #0
 80034e2:	b096      	sub	sp, #88	@ 0x58
 80034e4:	4615      	mov	r5, r2
 80034e6:	461e      	mov	r6, r3
 80034e8:	da0d      	bge.n	8003506 <__swhatbuf_r+0x2e>
 80034ea:	89a3      	ldrh	r3, [r4, #12]
 80034ec:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80034f0:	f04f 0100 	mov.w	r1, #0
 80034f4:	bf14      	ite	ne
 80034f6:	2340      	movne	r3, #64	@ 0x40
 80034f8:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80034fc:	2000      	movs	r0, #0
 80034fe:	6031      	str	r1, [r6, #0]
 8003500:	602b      	str	r3, [r5, #0]
 8003502:	b016      	add	sp, #88	@ 0x58
 8003504:	bd70      	pop	{r4, r5, r6, pc}
 8003506:	466a      	mov	r2, sp
 8003508:	f000 f8e2 	bl	80036d0 <_fstat_r>
 800350c:	2800      	cmp	r0, #0
 800350e:	dbec      	blt.n	80034ea <__swhatbuf_r+0x12>
 8003510:	9901      	ldr	r1, [sp, #4]
 8003512:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8003516:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800351a:	4259      	negs	r1, r3
 800351c:	4159      	adcs	r1, r3
 800351e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003522:	e7eb      	b.n	80034fc <__swhatbuf_r+0x24>

08003524 <__smakebuf_r>:
 8003524:	898b      	ldrh	r3, [r1, #12]
 8003526:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003528:	079d      	lsls	r5, r3, #30
 800352a:	4606      	mov	r6, r0
 800352c:	460c      	mov	r4, r1
 800352e:	d507      	bpl.n	8003540 <__smakebuf_r+0x1c>
 8003530:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8003534:	6023      	str	r3, [r4, #0]
 8003536:	6123      	str	r3, [r4, #16]
 8003538:	2301      	movs	r3, #1
 800353a:	6163      	str	r3, [r4, #20]
 800353c:	b003      	add	sp, #12
 800353e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003540:	ab01      	add	r3, sp, #4
 8003542:	466a      	mov	r2, sp
 8003544:	f7ff ffc8 	bl	80034d8 <__swhatbuf_r>
 8003548:	9f00      	ldr	r7, [sp, #0]
 800354a:	4605      	mov	r5, r0
 800354c:	4639      	mov	r1, r7
 800354e:	4630      	mov	r0, r6
 8003550:	f7ff fc14 	bl	8002d7c <_malloc_r>
 8003554:	b948      	cbnz	r0, 800356a <__smakebuf_r+0x46>
 8003556:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800355a:	059a      	lsls	r2, r3, #22
 800355c:	d4ee      	bmi.n	800353c <__smakebuf_r+0x18>
 800355e:	f023 0303 	bic.w	r3, r3, #3
 8003562:	f043 0302 	orr.w	r3, r3, #2
 8003566:	81a3      	strh	r3, [r4, #12]
 8003568:	e7e2      	b.n	8003530 <__smakebuf_r+0xc>
 800356a:	89a3      	ldrh	r3, [r4, #12]
 800356c:	6020      	str	r0, [r4, #0]
 800356e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003572:	81a3      	strh	r3, [r4, #12]
 8003574:	9b01      	ldr	r3, [sp, #4]
 8003576:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800357a:	b15b      	cbz	r3, 8003594 <__smakebuf_r+0x70>
 800357c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003580:	4630      	mov	r0, r6
 8003582:	f000 f83f 	bl	8003604 <_isatty_r>
 8003586:	b128      	cbz	r0, 8003594 <__smakebuf_r+0x70>
 8003588:	89a3      	ldrh	r3, [r4, #12]
 800358a:	f023 0303 	bic.w	r3, r3, #3
 800358e:	f043 0301 	orr.w	r3, r3, #1
 8003592:	81a3      	strh	r3, [r4, #12]
 8003594:	89a3      	ldrh	r3, [r4, #12]
 8003596:	431d      	orrs	r5, r3
 8003598:	81a5      	strh	r5, [r4, #12]
 800359a:	e7cf      	b.n	800353c <__smakebuf_r+0x18>

0800359c <_putc_r>:
 800359c:	b570      	push	{r4, r5, r6, lr}
 800359e:	460d      	mov	r5, r1
 80035a0:	4614      	mov	r4, r2
 80035a2:	4606      	mov	r6, r0
 80035a4:	b118      	cbz	r0, 80035ae <_putc_r+0x12>
 80035a6:	6a03      	ldr	r3, [r0, #32]
 80035a8:	b90b      	cbnz	r3, 80035ae <_putc_r+0x12>
 80035aa:	f7ff f8f5 	bl	8002798 <__sinit>
 80035ae:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80035b0:	07d8      	lsls	r0, r3, #31
 80035b2:	d405      	bmi.n	80035c0 <_putc_r+0x24>
 80035b4:	89a3      	ldrh	r3, [r4, #12]
 80035b6:	0599      	lsls	r1, r3, #22
 80035b8:	d402      	bmi.n	80035c0 <_putc_r+0x24>
 80035ba:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80035bc:	f7ff fa51 	bl	8002a62 <__retarget_lock_acquire_recursive>
 80035c0:	68a3      	ldr	r3, [r4, #8]
 80035c2:	3b01      	subs	r3, #1
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	60a3      	str	r3, [r4, #8]
 80035c8:	da05      	bge.n	80035d6 <_putc_r+0x3a>
 80035ca:	69a2      	ldr	r2, [r4, #24]
 80035cc:	4293      	cmp	r3, r2
 80035ce:	db12      	blt.n	80035f6 <_putc_r+0x5a>
 80035d0:	b2eb      	uxtb	r3, r5
 80035d2:	2b0a      	cmp	r3, #10
 80035d4:	d00f      	beq.n	80035f6 <_putc_r+0x5a>
 80035d6:	6823      	ldr	r3, [r4, #0]
 80035d8:	1c5a      	adds	r2, r3, #1
 80035da:	6022      	str	r2, [r4, #0]
 80035dc:	701d      	strb	r5, [r3, #0]
 80035de:	b2ed      	uxtb	r5, r5
 80035e0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80035e2:	07da      	lsls	r2, r3, #31
 80035e4:	d405      	bmi.n	80035f2 <_putc_r+0x56>
 80035e6:	89a3      	ldrh	r3, [r4, #12]
 80035e8:	059b      	lsls	r3, r3, #22
 80035ea:	d402      	bmi.n	80035f2 <_putc_r+0x56>
 80035ec:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80035ee:	f7ff fa39 	bl	8002a64 <__retarget_lock_release_recursive>
 80035f2:	4628      	mov	r0, r5
 80035f4:	bd70      	pop	{r4, r5, r6, pc}
 80035f6:	4629      	mov	r1, r5
 80035f8:	4622      	mov	r2, r4
 80035fa:	4630      	mov	r0, r6
 80035fc:	f7ff fed8 	bl	80033b0 <__swbuf_r>
 8003600:	4605      	mov	r5, r0
 8003602:	e7ed      	b.n	80035e0 <_putc_r+0x44>

08003604 <_isatty_r>:
 8003604:	b538      	push	{r3, r4, r5, lr}
 8003606:	4d06      	ldr	r5, [pc, #24]	@ (8003620 <_isatty_r+0x1c>)
 8003608:	2300      	movs	r3, #0
 800360a:	4604      	mov	r4, r0
 800360c:	4608      	mov	r0, r1
 800360e:	602b      	str	r3, [r5, #0]
 8003610:	f7fe fcda 	bl	8001fc8 <_isatty>
 8003614:	1c43      	adds	r3, r0, #1
 8003616:	d102      	bne.n	800361e <_isatty_r+0x1a>
 8003618:	682b      	ldr	r3, [r5, #0]
 800361a:	b103      	cbz	r3, 800361e <_isatty_r+0x1a>
 800361c:	6023      	str	r3, [r4, #0]
 800361e:	bd38      	pop	{r3, r4, r5, pc}
 8003620:	2000036c 	.word	0x2000036c

08003624 <_lseek_r>:
 8003624:	b538      	push	{r3, r4, r5, lr}
 8003626:	4d07      	ldr	r5, [pc, #28]	@ (8003644 <_lseek_r+0x20>)
 8003628:	4604      	mov	r4, r0
 800362a:	4608      	mov	r0, r1
 800362c:	4611      	mov	r1, r2
 800362e:	2200      	movs	r2, #0
 8003630:	602a      	str	r2, [r5, #0]
 8003632:	461a      	mov	r2, r3
 8003634:	f7fe fcd3 	bl	8001fde <_lseek>
 8003638:	1c43      	adds	r3, r0, #1
 800363a:	d102      	bne.n	8003642 <_lseek_r+0x1e>
 800363c:	682b      	ldr	r3, [r5, #0]
 800363e:	b103      	cbz	r3, 8003642 <_lseek_r+0x1e>
 8003640:	6023      	str	r3, [r4, #0]
 8003642:	bd38      	pop	{r3, r4, r5, pc}
 8003644:	2000036c 	.word	0x2000036c

08003648 <_read_r>:
 8003648:	b538      	push	{r3, r4, r5, lr}
 800364a:	4d07      	ldr	r5, [pc, #28]	@ (8003668 <_read_r+0x20>)
 800364c:	4604      	mov	r4, r0
 800364e:	4608      	mov	r0, r1
 8003650:	4611      	mov	r1, r2
 8003652:	2200      	movs	r2, #0
 8003654:	602a      	str	r2, [r5, #0]
 8003656:	461a      	mov	r2, r3
 8003658:	f7fe fc61 	bl	8001f1e <_read>
 800365c:	1c43      	adds	r3, r0, #1
 800365e:	d102      	bne.n	8003666 <_read_r+0x1e>
 8003660:	682b      	ldr	r3, [r5, #0]
 8003662:	b103      	cbz	r3, 8003666 <_read_r+0x1e>
 8003664:	6023      	str	r3, [r4, #0]
 8003666:	bd38      	pop	{r3, r4, r5, pc}
 8003668:	2000036c 	.word	0x2000036c

0800366c <_sbrk_r>:
 800366c:	b538      	push	{r3, r4, r5, lr}
 800366e:	4d06      	ldr	r5, [pc, #24]	@ (8003688 <_sbrk_r+0x1c>)
 8003670:	2300      	movs	r3, #0
 8003672:	4604      	mov	r4, r0
 8003674:	4608      	mov	r0, r1
 8003676:	602b      	str	r3, [r5, #0]
 8003678:	f7fe fcbe 	bl	8001ff8 <_sbrk>
 800367c:	1c43      	adds	r3, r0, #1
 800367e:	d102      	bne.n	8003686 <_sbrk_r+0x1a>
 8003680:	682b      	ldr	r3, [r5, #0]
 8003682:	b103      	cbz	r3, 8003686 <_sbrk_r+0x1a>
 8003684:	6023      	str	r3, [r4, #0]
 8003686:	bd38      	pop	{r3, r4, r5, pc}
 8003688:	2000036c 	.word	0x2000036c

0800368c <_write_r>:
 800368c:	b538      	push	{r3, r4, r5, lr}
 800368e:	4d07      	ldr	r5, [pc, #28]	@ (80036ac <_write_r+0x20>)
 8003690:	4604      	mov	r4, r0
 8003692:	4608      	mov	r0, r1
 8003694:	4611      	mov	r1, r2
 8003696:	2200      	movs	r2, #0
 8003698:	602a      	str	r2, [r5, #0]
 800369a:	461a      	mov	r2, r3
 800369c:	f7fe fc5c 	bl	8001f58 <_write>
 80036a0:	1c43      	adds	r3, r0, #1
 80036a2:	d102      	bne.n	80036aa <_write_r+0x1e>
 80036a4:	682b      	ldr	r3, [r5, #0]
 80036a6:	b103      	cbz	r3, 80036aa <_write_r+0x1e>
 80036a8:	6023      	str	r3, [r4, #0]
 80036aa:	bd38      	pop	{r3, r4, r5, pc}
 80036ac:	2000036c 	.word	0x2000036c

080036b0 <_close_r>:
 80036b0:	b538      	push	{r3, r4, r5, lr}
 80036b2:	4d06      	ldr	r5, [pc, #24]	@ (80036cc <_close_r+0x1c>)
 80036b4:	2300      	movs	r3, #0
 80036b6:	4604      	mov	r4, r0
 80036b8:	4608      	mov	r0, r1
 80036ba:	602b      	str	r3, [r5, #0]
 80036bc:	f7fe fc68 	bl	8001f90 <_close>
 80036c0:	1c43      	adds	r3, r0, #1
 80036c2:	d102      	bne.n	80036ca <_close_r+0x1a>
 80036c4:	682b      	ldr	r3, [r5, #0]
 80036c6:	b103      	cbz	r3, 80036ca <_close_r+0x1a>
 80036c8:	6023      	str	r3, [r4, #0]
 80036ca:	bd38      	pop	{r3, r4, r5, pc}
 80036cc:	2000036c 	.word	0x2000036c

080036d0 <_fstat_r>:
 80036d0:	b538      	push	{r3, r4, r5, lr}
 80036d2:	4d07      	ldr	r5, [pc, #28]	@ (80036f0 <_fstat_r+0x20>)
 80036d4:	2300      	movs	r3, #0
 80036d6:	4604      	mov	r4, r0
 80036d8:	4608      	mov	r0, r1
 80036da:	4611      	mov	r1, r2
 80036dc:	602b      	str	r3, [r5, #0]
 80036de:	f7fe fc63 	bl	8001fa8 <_fstat>
 80036e2:	1c43      	adds	r3, r0, #1
 80036e4:	d102      	bne.n	80036ec <_fstat_r+0x1c>
 80036e6:	682b      	ldr	r3, [r5, #0]
 80036e8:	b103      	cbz	r3, 80036ec <_fstat_r+0x1c>
 80036ea:	6023      	str	r3, [r4, #0]
 80036ec:	bd38      	pop	{r3, r4, r5, pc}
 80036ee:	bf00      	nop
 80036f0:	2000036c 	.word	0x2000036c

080036f4 <abort>:
 80036f4:	b508      	push	{r3, lr}
 80036f6:	2006      	movs	r0, #6
 80036f8:	f000 f876 	bl	80037e8 <raise>
 80036fc:	2001      	movs	r0, #1
 80036fe:	f7fe fc03 	bl	8001f08 <_exit>
	...

08003704 <_free_r>:
 8003704:	b538      	push	{r3, r4, r5, lr}
 8003706:	4605      	mov	r5, r0
 8003708:	2900      	cmp	r1, #0
 800370a:	d041      	beq.n	8003790 <_free_r+0x8c>
 800370c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003710:	1f0c      	subs	r4, r1, #4
 8003712:	2b00      	cmp	r3, #0
 8003714:	bfb8      	it	lt
 8003716:	18e4      	addlt	r4, r4, r3
 8003718:	f7ff fde8 	bl	80032ec <__malloc_lock>
 800371c:	4a1d      	ldr	r2, [pc, #116]	@ (8003794 <_free_r+0x90>)
 800371e:	6813      	ldr	r3, [r2, #0]
 8003720:	b933      	cbnz	r3, 8003730 <_free_r+0x2c>
 8003722:	6063      	str	r3, [r4, #4]
 8003724:	6014      	str	r4, [r2, #0]
 8003726:	4628      	mov	r0, r5
 8003728:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800372c:	f7ff bde4 	b.w	80032f8 <__malloc_unlock>
 8003730:	42a3      	cmp	r3, r4
 8003732:	d908      	bls.n	8003746 <_free_r+0x42>
 8003734:	6820      	ldr	r0, [r4, #0]
 8003736:	1821      	adds	r1, r4, r0
 8003738:	428b      	cmp	r3, r1
 800373a:	bf01      	itttt	eq
 800373c:	6819      	ldreq	r1, [r3, #0]
 800373e:	685b      	ldreq	r3, [r3, #4]
 8003740:	1809      	addeq	r1, r1, r0
 8003742:	6021      	streq	r1, [r4, #0]
 8003744:	e7ed      	b.n	8003722 <_free_r+0x1e>
 8003746:	461a      	mov	r2, r3
 8003748:	685b      	ldr	r3, [r3, #4]
 800374a:	b10b      	cbz	r3, 8003750 <_free_r+0x4c>
 800374c:	42a3      	cmp	r3, r4
 800374e:	d9fa      	bls.n	8003746 <_free_r+0x42>
 8003750:	6811      	ldr	r1, [r2, #0]
 8003752:	1850      	adds	r0, r2, r1
 8003754:	42a0      	cmp	r0, r4
 8003756:	d10b      	bne.n	8003770 <_free_r+0x6c>
 8003758:	6820      	ldr	r0, [r4, #0]
 800375a:	4401      	add	r1, r0
 800375c:	1850      	adds	r0, r2, r1
 800375e:	4283      	cmp	r3, r0
 8003760:	6011      	str	r1, [r2, #0]
 8003762:	d1e0      	bne.n	8003726 <_free_r+0x22>
 8003764:	6818      	ldr	r0, [r3, #0]
 8003766:	685b      	ldr	r3, [r3, #4]
 8003768:	6053      	str	r3, [r2, #4]
 800376a:	4408      	add	r0, r1
 800376c:	6010      	str	r0, [r2, #0]
 800376e:	e7da      	b.n	8003726 <_free_r+0x22>
 8003770:	d902      	bls.n	8003778 <_free_r+0x74>
 8003772:	230c      	movs	r3, #12
 8003774:	602b      	str	r3, [r5, #0]
 8003776:	e7d6      	b.n	8003726 <_free_r+0x22>
 8003778:	6820      	ldr	r0, [r4, #0]
 800377a:	1821      	adds	r1, r4, r0
 800377c:	428b      	cmp	r3, r1
 800377e:	bf04      	itt	eq
 8003780:	6819      	ldreq	r1, [r3, #0]
 8003782:	685b      	ldreq	r3, [r3, #4]
 8003784:	6063      	str	r3, [r4, #4]
 8003786:	bf04      	itt	eq
 8003788:	1809      	addeq	r1, r1, r0
 800378a:	6021      	streq	r1, [r4, #0]
 800378c:	6054      	str	r4, [r2, #4]
 800378e:	e7ca      	b.n	8003726 <_free_r+0x22>
 8003790:	bd38      	pop	{r3, r4, r5, pc}
 8003792:	bf00      	nop
 8003794:	20000368 	.word	0x20000368

08003798 <_raise_r>:
 8003798:	291f      	cmp	r1, #31
 800379a:	b538      	push	{r3, r4, r5, lr}
 800379c:	4605      	mov	r5, r0
 800379e:	460c      	mov	r4, r1
 80037a0:	d904      	bls.n	80037ac <_raise_r+0x14>
 80037a2:	2316      	movs	r3, #22
 80037a4:	6003      	str	r3, [r0, #0]
 80037a6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80037aa:	bd38      	pop	{r3, r4, r5, pc}
 80037ac:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80037ae:	b112      	cbz	r2, 80037b6 <_raise_r+0x1e>
 80037b0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80037b4:	b94b      	cbnz	r3, 80037ca <_raise_r+0x32>
 80037b6:	4628      	mov	r0, r5
 80037b8:	f000 f830 	bl	800381c <_getpid_r>
 80037bc:	4622      	mov	r2, r4
 80037be:	4601      	mov	r1, r0
 80037c0:	4628      	mov	r0, r5
 80037c2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80037c6:	f000 b817 	b.w	80037f8 <_kill_r>
 80037ca:	2b01      	cmp	r3, #1
 80037cc:	d00a      	beq.n	80037e4 <_raise_r+0x4c>
 80037ce:	1c59      	adds	r1, r3, #1
 80037d0:	d103      	bne.n	80037da <_raise_r+0x42>
 80037d2:	2316      	movs	r3, #22
 80037d4:	6003      	str	r3, [r0, #0]
 80037d6:	2001      	movs	r0, #1
 80037d8:	e7e7      	b.n	80037aa <_raise_r+0x12>
 80037da:	2100      	movs	r1, #0
 80037dc:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80037e0:	4620      	mov	r0, r4
 80037e2:	4798      	blx	r3
 80037e4:	2000      	movs	r0, #0
 80037e6:	e7e0      	b.n	80037aa <_raise_r+0x12>

080037e8 <raise>:
 80037e8:	4b02      	ldr	r3, [pc, #8]	@ (80037f4 <raise+0xc>)
 80037ea:	4601      	mov	r1, r0
 80037ec:	6818      	ldr	r0, [r3, #0]
 80037ee:	f7ff bfd3 	b.w	8003798 <_raise_r>
 80037f2:	bf00      	nop
 80037f4:	20000090 	.word	0x20000090

080037f8 <_kill_r>:
 80037f8:	b538      	push	{r3, r4, r5, lr}
 80037fa:	4d07      	ldr	r5, [pc, #28]	@ (8003818 <_kill_r+0x20>)
 80037fc:	2300      	movs	r3, #0
 80037fe:	4604      	mov	r4, r0
 8003800:	4608      	mov	r0, r1
 8003802:	4611      	mov	r1, r2
 8003804:	602b      	str	r3, [r5, #0]
 8003806:	f7fe fb6f 	bl	8001ee8 <_kill>
 800380a:	1c43      	adds	r3, r0, #1
 800380c:	d102      	bne.n	8003814 <_kill_r+0x1c>
 800380e:	682b      	ldr	r3, [r5, #0]
 8003810:	b103      	cbz	r3, 8003814 <_kill_r+0x1c>
 8003812:	6023      	str	r3, [r4, #0]
 8003814:	bd38      	pop	{r3, r4, r5, pc}
 8003816:	bf00      	nop
 8003818:	2000036c 	.word	0x2000036c

0800381c <_getpid_r>:
 800381c:	f7fe bb5c 	b.w	8001ed8 <_getpid>

08003820 <_init>:
 8003820:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003822:	bf00      	nop
 8003824:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003826:	bc08      	pop	{r3}
 8003828:	469e      	mov	lr, r3
 800382a:	4770      	bx	lr

0800382c <_fini>:
 800382c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800382e:	bf00      	nop
 8003830:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003832:	bc08      	pop	{r3}
 8003834:	469e      	mov	lr, r3
 8003836:	4770      	bx	lr
