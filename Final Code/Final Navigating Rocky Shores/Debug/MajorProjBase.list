
MajorProjBase.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000065b8  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a8  08006740  08006740  00007740  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080067e8  080067e8  0000804c  2**0
                  CONTENTS
  4 .ARM          00000000  080067e8  080067e8  0000804c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080067e8  080067e8  0000804c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080067e8  080067e8  000077e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080067ec  080067ec  000077ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000004c  20000000  080067f0  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000804c  2**0
                  CONTENTS
 10 .bss          000004b0  2000004c  2000004c  0000804c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200004fc  200004fc  0000804c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000804c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00013067  00000000  00000000  0000807c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002877  00000000  00000000  0001b0e3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000010e8  00000000  00000000  0001d960  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000d32  00000000  00000000  0001ea48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001f397  00000000  00000000  0001f77a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00015b4d  00000000  00000000  0003eb11  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c04fb  00000000  00000000  0005465e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00114b59  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000047f0  00000000  00000000  00114b9c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000066  00000000  00000000  0011938c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000004c 	.word	0x2000004c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08006728 	.word	0x08006728

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000050 	.word	0x20000050
 80001c4:	08006728 	.word	0x08006728

080001c8 <map>:
PCD_HandleTypeDef hpcd_USB_FS;

/* Utility Functions ---------------------------------------------------------*/

// Maps a value from one range to another
int map(int val, int in_min, int in_max, int out_min, int out_max) {
 80001c8:	b480      	push	{r7}
 80001ca:	b085      	sub	sp, #20
 80001cc:	af00      	add	r7, sp, #0
 80001ce:	60f8      	str	r0, [r7, #12]
 80001d0:	60b9      	str	r1, [r7, #8]
 80001d2:	607a      	str	r2, [r7, #4]
 80001d4:	603b      	str	r3, [r7, #0]
    return (val - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 80001d6:	68fa      	ldr	r2, [r7, #12]
 80001d8:	68bb      	ldr	r3, [r7, #8]
 80001da:	1ad3      	subs	r3, r2, r3
 80001dc:	69b9      	ldr	r1, [r7, #24]
 80001de:	683a      	ldr	r2, [r7, #0]
 80001e0:	1a8a      	subs	r2, r1, r2
 80001e2:	fb03 f202 	mul.w	r2, r3, r2
 80001e6:	6879      	ldr	r1, [r7, #4]
 80001e8:	68bb      	ldr	r3, [r7, #8]
 80001ea:	1acb      	subs	r3, r1, r3
 80001ec:	fb92 f2f3 	sdiv	r2, r2, r3
 80001f0:	683b      	ldr	r3, [r7, #0]
 80001f2:	4413      	add	r3, r2
}
 80001f4:	4618      	mov	r0, r3
 80001f6:	3714      	adds	r7, #20
 80001f8:	46bd      	mov	sp, r7
 80001fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001fe:	4770      	bx	lr

08000200 <get_filtered_distance>:

// Moving average distance filter
uint32_t get_filtered_distance(void) {
 8000200:	b480      	push	{r7}
 8000202:	b083      	sub	sp, #12
 8000204:	af00      	add	r7, sp, #0
    uint32_t sum = 0;
 8000206:	2300      	movs	r3, #0
 8000208:	607b      	str	r3, [r7, #4]
    for (uint8_t i = 0; i < DISTANCE_FILTER_SIZE; i++) {
 800020a:	2300      	movs	r3, #0
 800020c:	70fb      	strb	r3, [r7, #3]
 800020e:	e009      	b.n	8000224 <get_filtered_distance+0x24>
        sum += distance_buffer[i];
 8000210:	78fb      	ldrb	r3, [r7, #3]
 8000212:	4a0b      	ldr	r2, [pc, #44]	@ (8000240 <get_filtered_distance+0x40>)
 8000214:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000218:	687a      	ldr	r2, [r7, #4]
 800021a:	4413      	add	r3, r2
 800021c:	607b      	str	r3, [r7, #4]
    for (uint8_t i = 0; i < DISTANCE_FILTER_SIZE; i++) {
 800021e:	78fb      	ldrb	r3, [r7, #3]
 8000220:	3301      	adds	r3, #1
 8000222:	70fb      	strb	r3, [r7, #3]
 8000224:	78fb      	ldrb	r3, [r7, #3]
 8000226:	2b04      	cmp	r3, #4
 8000228:	d9f2      	bls.n	8000210 <get_filtered_distance+0x10>
    }
    return sum / DISTANCE_FILTER_SIZE;
 800022a:	687b      	ldr	r3, [r7, #4]
 800022c:	4a05      	ldr	r2, [pc, #20]	@ (8000244 <get_filtered_distance+0x44>)
 800022e:	fba2 2303 	umull	r2, r3, r2, r3
 8000232:	089b      	lsrs	r3, r3, #2
}
 8000234:	4618      	mov	r0, r3
 8000236:	370c      	adds	r7, #12
 8000238:	46bd      	mov	sp, r7
 800023a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800023e:	4770      	bx	lr
 8000240:	20000068 	.word	0x20000068
 8000244:	cccccccd 	.word	0xcccccccd

08000248 <enable_clocks>:

// Enable GPIO clocks
void enable_clocks() {
 8000248:	b480      	push	{r7}
 800024a:	af00      	add	r7, sp, #0
    RCC->AHBENR |= RCC_AHBENR_GPIOAEN | RCC_AHBENR_GPIOCEN | RCC_AHBENR_GPIOEEN;
 800024c:	4b05      	ldr	r3, [pc, #20]	@ (8000264 <enable_clocks+0x1c>)
 800024e:	695b      	ldr	r3, [r3, #20]
 8000250:	4a04      	ldr	r2, [pc, #16]	@ (8000264 <enable_clocks+0x1c>)
 8000252:	f443 1328 	orr.w	r3, r3, #2752512	@ 0x2a0000
 8000256:	6153      	str	r3, [r2, #20]
}
 8000258:	bf00      	nop
 800025a:	46bd      	mov	sp, r7
 800025c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000260:	4770      	bx	lr
 8000262:	bf00      	nop
 8000264:	40021000 	.word	0x40021000

08000268 <initialise_board>:

// Configure Discovery board LEDs as output (PE8â€“PE15)
void initialise_board() {
 8000268:	b480      	push	{r7}
 800026a:	b083      	sub	sp, #12
 800026c:	af00      	add	r7, sp, #0
    uint16_t *led_output_registers = ((uint16_t *)&(GPIOE->MODER)) + 1;
 800026e:	4b06      	ldr	r3, [pc, #24]	@ (8000288 <initialise_board+0x20>)
 8000270:	607b      	str	r3, [r7, #4]
    *led_output_registers = 0x5555;
 8000272:	687b      	ldr	r3, [r7, #4]
 8000274:	f245 5255 	movw	r2, #21845	@ 0x5555
 8000278:	801a      	strh	r2, [r3, #0]
}
 800027a:	bf00      	nop
 800027c:	370c      	adds	r7, #12
 800027e:	46bd      	mov	sp, r7
 8000280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000284:	4770      	bx	lr
 8000286:	bf00      	nop
 8000288:	48001002 	.word	0x48001002

0800028c <HAL_TIM_IC_CaptureCallback>:

uint16_t rise_time = 0;
uint16_t last_period = 0;

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800028c:	b580      	push	{r7, lr}
 800028e:	b086      	sub	sp, #24
 8000290:	af00      	add	r7, sp, #0
 8000292:	6078      	str	r0, [r7, #4]
    static uint32_t rising_edge_time = 0;
    static bool last_edge_was_rising = true;
    static uint8_t no_detection_counter = 0;

    if (htim->Instance == TIM1) // Only handle TIM1 input capture
 8000294:	687b      	ldr	r3, [r7, #4]
 8000296:	681b      	ldr	r3, [r3, #0]
 8000298:	4a47      	ldr	r2, [pc, #284]	@ (80003b8 <HAL_TIM_IC_CaptureCallback+0x12c>)
 800029a:	4293      	cmp	r3, r2
 800029c:	f040 8087 	bne.w	80003ae <HAL_TIM_IC_CaptureCallback+0x122>
    {
        if (last_edge_was_rising)
 80002a0:	4b46      	ldr	r3, [pc, #280]	@ (80003bc <HAL_TIM_IC_CaptureCallback+0x130>)
 80002a2:	781b      	ldrb	r3, [r3, #0]
 80002a4:	2b00      	cmp	r3, #0
 80002a6:	d01a      	beq.n	80002de <HAL_TIM_IC_CaptureCallback+0x52>
        {
            // Store rising edge timestamp
            rising_edge_time = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 80002a8:	2100      	movs	r1, #0
 80002aa:	6878      	ldr	r0, [r7, #4]
 80002ac:	f005 fb7c 	bl	80059a8 <HAL_TIM_ReadCapturedValue>
 80002b0:	4603      	mov	r3, r0
 80002b2:	4a43      	ldr	r2, [pc, #268]	@ (80003c0 <HAL_TIM_IC_CaptureCallback+0x134>)
 80002b4:	6013      	str	r3, [r2, #0]
            __HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_FALLING);
 80002b6:	687b      	ldr	r3, [r7, #4]
 80002b8:	681b      	ldr	r3, [r3, #0]
 80002ba:	6a1a      	ldr	r2, [r3, #32]
 80002bc:	687b      	ldr	r3, [r7, #4]
 80002be:	681b      	ldr	r3, [r3, #0]
 80002c0:	f022 020a 	bic.w	r2, r2, #10
 80002c4:	621a      	str	r2, [r3, #32]
 80002c6:	687b      	ldr	r3, [r7, #4]
 80002c8:	681b      	ldr	r3, [r3, #0]
 80002ca:	6a1a      	ldr	r2, [r3, #32]
 80002cc:	687b      	ldr	r3, [r7, #4]
 80002ce:	681b      	ldr	r3, [r3, #0]
 80002d0:	f042 0202 	orr.w	r2, r2, #2
 80002d4:	621a      	str	r2, [r3, #32]
            last_edge_was_rising = false;
 80002d6:	4b39      	ldr	r3, [pc, #228]	@ (80003bc <HAL_TIM_IC_CaptureCallback+0x130>)
 80002d8:	2200      	movs	r2, #0
 80002da:	701a      	strb	r2, [r3, #0]

            __HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_RISING);
            last_edge_was_rising = true;
        }
    }
}
 80002dc:	e067      	b.n	80003ae <HAL_TIM_IC_CaptureCallback+0x122>
            uint32_t falling_edge_time = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 80002de:	2100      	movs	r1, #0
 80002e0:	6878      	ldr	r0, [r7, #4]
 80002e2:	f005 fb61 	bl	80059a8 <HAL_TIM_ReadCapturedValue>
 80002e6:	60f8      	str	r0, [r7, #12]
            if (falling_edge_time >= rising_edge_time) {
 80002e8:	4b35      	ldr	r3, [pc, #212]	@ (80003c0 <HAL_TIM_IC_CaptureCallback+0x134>)
 80002ea:	681b      	ldr	r3, [r3, #0]
 80002ec:	68fa      	ldr	r2, [r7, #12]
 80002ee:	429a      	cmp	r2, r3
 80002f0:	d305      	bcc.n	80002fe <HAL_TIM_IC_CaptureCallback+0x72>
                pulse_width = falling_edge_time - rising_edge_time;
 80002f2:	4b33      	ldr	r3, [pc, #204]	@ (80003c0 <HAL_TIM_IC_CaptureCallback+0x134>)
 80002f4:	681b      	ldr	r3, [r3, #0]
 80002f6:	68fa      	ldr	r2, [r7, #12]
 80002f8:	1ad3      	subs	r3, r2, r3
 80002fa:	617b      	str	r3, [r7, #20]
 80002fc:	e009      	b.n	8000312 <HAL_TIM_IC_CaptureCallback+0x86>
                pulse_width = (htim->Instance->ARR - rising_edge_time + falling_edge_time + 1);
 80002fe:	687b      	ldr	r3, [r7, #4]
 8000300:	681b      	ldr	r3, [r3, #0]
 8000302:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000304:	4b2e      	ldr	r3, [pc, #184]	@ (80003c0 <HAL_TIM_IC_CaptureCallback+0x134>)
 8000306:	681b      	ldr	r3, [r3, #0]
 8000308:	1ad2      	subs	r2, r2, r3
 800030a:	68fb      	ldr	r3, [r7, #12]
 800030c:	4413      	add	r3, r2
 800030e:	3301      	adds	r3, #1
 8000310:	617b      	str	r3, [r7, #20]
            lidar_distance_mm = pulse_width / 10;
 8000312:	697b      	ldr	r3, [r7, #20]
 8000314:	4a2b      	ldr	r2, [pc, #172]	@ (80003c4 <HAL_TIM_IC_CaptureCallback+0x138>)
 8000316:	fba2 2303 	umull	r2, r3, r2, r3
 800031a:	08db      	lsrs	r3, r3, #3
 800031c:	4a2a      	ldr	r2, [pc, #168]	@ (80003c8 <HAL_TIM_IC_CaptureCallback+0x13c>)
 800031e:	6013      	str	r3, [r2, #0]
            if (pulse_width < NO_DETECTION_THRESHOLD) {
 8000320:	697b      	ldr	r3, [r7, #20]
 8000322:	2b31      	cmp	r3, #49	@ 0x31
 8000324:	d81c      	bhi.n	8000360 <HAL_TIM_IC_CaptureCallback+0xd4>
                no_detection_counter++;
 8000326:	4b29      	ldr	r3, [pc, #164]	@ (80003cc <HAL_TIM_IC_CaptureCallback+0x140>)
 8000328:	781b      	ldrb	r3, [r3, #0]
 800032a:	3301      	adds	r3, #1
 800032c:	b2da      	uxtb	r2, r3
 800032e:	4b27      	ldr	r3, [pc, #156]	@ (80003cc <HAL_TIM_IC_CaptureCallback+0x140>)
 8000330:	701a      	strb	r2, [r3, #0]
                if (no_detection_counter >= NO_DETECTION_COUNT_LIMIT) {
 8000332:	4b26      	ldr	r3, [pc, #152]	@ (80003cc <HAL_TIM_IC_CaptureCallback+0x140>)
 8000334:	781b      	ldrb	r3, [r3, #0]
 8000336:	2b02      	cmp	r3, #2
 8000338:	d928      	bls.n	800038c <HAL_TIM_IC_CaptureCallback+0x100>
                    for (int i = 0; i < DISTANCE_FILTER_SIZE; i++) {
 800033a:	2300      	movs	r3, #0
 800033c:	613b      	str	r3, [r7, #16]
 800033e:	e008      	b.n	8000352 <HAL_TIM_IC_CaptureCallback+0xc6>
                        distance_buffer[i] = NO_DETECTION_MM;
 8000340:	4a23      	ldr	r2, [pc, #140]	@ (80003d0 <HAL_TIM_IC_CaptureCallback+0x144>)
 8000342:	693b      	ldr	r3, [r7, #16]
 8000344:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8000348:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                    for (int i = 0; i < DISTANCE_FILTER_SIZE; i++) {
 800034c:	693b      	ldr	r3, [r7, #16]
 800034e:	3301      	adds	r3, #1
 8000350:	613b      	str	r3, [r7, #16]
 8000352:	693b      	ldr	r3, [r7, #16]
 8000354:	2b04      	cmp	r3, #4
 8000356:	ddf3      	ble.n	8000340 <HAL_TIM_IC_CaptureCallback+0xb4>
                    distance_index = 0;
 8000358:	4b1e      	ldr	r3, [pc, #120]	@ (80003d4 <HAL_TIM_IC_CaptureCallback+0x148>)
 800035a:	2200      	movs	r2, #0
 800035c:	701a      	strb	r2, [r3, #0]
 800035e:	e015      	b.n	800038c <HAL_TIM_IC_CaptureCallback+0x100>
                no_detection_counter = 0;
 8000360:	4b1a      	ldr	r3, [pc, #104]	@ (80003cc <HAL_TIM_IC_CaptureCallback+0x140>)
 8000362:	2200      	movs	r2, #0
 8000364:	701a      	strb	r2, [r3, #0]
                distance_buffer[distance_index++] = lidar_distance_mm;
 8000366:	4b1b      	ldr	r3, [pc, #108]	@ (80003d4 <HAL_TIM_IC_CaptureCallback+0x148>)
 8000368:	781b      	ldrb	r3, [r3, #0]
 800036a:	1c5a      	adds	r2, r3, #1
 800036c:	b2d1      	uxtb	r1, r2
 800036e:	4a19      	ldr	r2, [pc, #100]	@ (80003d4 <HAL_TIM_IC_CaptureCallback+0x148>)
 8000370:	7011      	strb	r1, [r2, #0]
 8000372:	4619      	mov	r1, r3
 8000374:	4b14      	ldr	r3, [pc, #80]	@ (80003c8 <HAL_TIM_IC_CaptureCallback+0x13c>)
 8000376:	681b      	ldr	r3, [r3, #0]
 8000378:	4a15      	ldr	r2, [pc, #84]	@ (80003d0 <HAL_TIM_IC_CaptureCallback+0x144>)
 800037a:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
                if (distance_index >= DISTANCE_FILTER_SIZE) distance_index = 0;
 800037e:	4b15      	ldr	r3, [pc, #84]	@ (80003d4 <HAL_TIM_IC_CaptureCallback+0x148>)
 8000380:	781b      	ldrb	r3, [r3, #0]
 8000382:	2b04      	cmp	r3, #4
 8000384:	d902      	bls.n	800038c <HAL_TIM_IC_CaptureCallback+0x100>
 8000386:	4b13      	ldr	r3, [pc, #76]	@ (80003d4 <HAL_TIM_IC_CaptureCallback+0x148>)
 8000388:	2200      	movs	r2, #0
 800038a:	701a      	strb	r2, [r3, #0]
            __HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_RISING);
 800038c:	687b      	ldr	r3, [r7, #4]
 800038e:	681b      	ldr	r3, [r3, #0]
 8000390:	6a1a      	ldr	r2, [r3, #32]
 8000392:	687b      	ldr	r3, [r7, #4]
 8000394:	681b      	ldr	r3, [r3, #0]
 8000396:	f022 020a 	bic.w	r2, r2, #10
 800039a:	621a      	str	r2, [r3, #32]
 800039c:	687b      	ldr	r3, [r7, #4]
 800039e:	681a      	ldr	r2, [r3, #0]
 80003a0:	687b      	ldr	r3, [r7, #4]
 80003a2:	681b      	ldr	r3, [r3, #0]
 80003a4:	6a12      	ldr	r2, [r2, #32]
 80003a6:	621a      	str	r2, [r3, #32]
            last_edge_was_rising = true;
 80003a8:	4b04      	ldr	r3, [pc, #16]	@ (80003bc <HAL_TIM_IC_CaptureCallback+0x130>)
 80003aa:	2201      	movs	r2, #1
 80003ac:	701a      	strb	r2, [r3, #0]
}
 80003ae:	bf00      	nop
 80003b0:	3718      	adds	r7, #24
 80003b2:	46bd      	mov	sp, r7
 80003b4:	bd80      	pop	{r7, pc}
 80003b6:	bf00      	nop
 80003b8:	40012c00 	.word	0x40012c00
 80003bc:	20000004 	.word	0x20000004
 80003c0:	200004ec 	.word	0x200004ec
 80003c4:	cccccccd 	.word	0xcccccccd
 80003c8:	20000080 	.word	0x20000080
 80003cc:	200004f0 	.word	0x200004f0
 80003d0:	20000068 	.word	0x20000068
 80003d4:	2000007c 	.word	0x2000007c

080003d8 <main>:

/* Main Entry Point ----------------------------------------------------------*/

int main(void)
{
 80003d8:	b580      	push	{r7, lr}
 80003da:	b086      	sub	sp, #24
 80003dc:	af02      	add	r7, sp, #8
    HAL_Init();
 80003de:	f000 ff41 	bl	8001264 <HAL_Init>
    SystemClock_Config();
 80003e2:	f000 f915 	bl	8000610 <SystemClock_Config>

    // HAL peripheral initializations
    MX_GPIO_Init();
 80003e6:	f000 fb51 	bl	8000a8c <MX_GPIO_Init>
    MX_I2C1_Init();
 80003ea:	f000 fa13 	bl	8000814 <MX_I2C1_Init>
    MX_USB_PCD_Init();
 80003ee:	f000 fb29 	bl	8000a44 <MX_USB_PCD_Init>
    MX_TIM2_Init();
 80003f2:	f000 fab5 	bl	8000960 <MX_TIM2_Init>
    MX_TIM1_Init();
 80003f6:	f000 fa41 	bl	800087c <MX_TIM1_Init>
    MX_ADC1_Init();
 80003fa:	f000 f96f 	bl	80006dc <MX_ADC1_Init>
    MX_ADC2_Init();
 80003fe:	f000 f9c5 	bl	800078c <MX_ADC2_Init>

    // Custom peripheral setups
    enable_clocks();
 8000402:	f7ff ff21 	bl	8000248 <enable_clocks>
    initialise_board();
 8000406:	f7ff ff2f 	bl	8000268 <initialise_board>
    initialise_ptu_i2c(&hi2c1);
 800040a:	4876      	ldr	r0, [pc, #472]	@ (80005e4 <main+0x20c>)
 800040c:	f000 fc00 	bl	8000c10 <initialise_ptu_i2c>
    SerialInitialise(BAUD_115200, &USART1_PORT, 0x00);
 8000410:	2200      	movs	r2, #0
 8000412:	4975      	ldr	r1, [pc, #468]	@ (80005e8 <main+0x210>)
 8000414:	2004      	movs	r0, #4
 8000416:	f000 fc47 	bl	8000ca8 <SerialInitialise>

    // Start PWM for PTU
    HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 800041a:	2100      	movs	r1, #0
 800041c:	4873      	ldr	r0, [pc, #460]	@ (80005ec <main+0x214>)
 800041e:	f004 fca3 	bl	8004d68 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 8000422:	2104      	movs	r1, #4
 8000424:	4871      	ldr	r0, [pc, #452]	@ (80005ec <main+0x214>)
 8000426:	f004 fc9f 	bl	8004d68 <HAL_TIM_PWM_Start>
    TIM2->ARR = PWM_PERIOD_US;
 800042a:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800042e:	f644 6220 	movw	r2, #20000	@ 0x4e20
 8000432:	62da      	str	r2, [r3, #44]	@ 0x2c
    TIM2->CR1 |= TIM_CR1_ARPE;
 8000434:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000438:	681b      	ldr	r3, [r3, #0]
 800043a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800043e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000442:	6013      	str	r3, [r2, #0]

    // Start input capture for LIDAR
    HAL_TIM_IC_Start_IT(&htim1, TIM_CHANNEL_1);
 8000444:	2100      	movs	r1, #0
 8000446:	486a      	ldr	r0, [pc, #424]	@ (80005f0 <main+0x218>)
 8000448:	f004 fdf0 	bl	800502c <HAL_TIM_IC_Start_IT>

    // Initialize distance buffer to no detection value
    for (int i = 0; i < DISTANCE_FILTER_SIZE; i++) {
 800044c:	2300      	movs	r3, #0
 800044e:	60fb      	str	r3, [r7, #12]
 8000450:	e008      	b.n	8000464 <main+0x8c>
        distance_buffer[i] = NO_DETECTION_MM;
 8000452:	4a68      	ldr	r2, [pc, #416]	@ (80005f4 <main+0x21c>)
 8000454:	68fb      	ldr	r3, [r7, #12]
 8000456:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 800045a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    for (int i = 0; i < DISTANCE_FILTER_SIZE; i++) {
 800045e:	68fb      	ldr	r3, [r7, #12]
 8000460:	3301      	adds	r3, #1
 8000462:	60fb      	str	r3, [r7, #12]
 8000464:	68fb      	ldr	r3, [r7, #12]
 8000466:	2b04      	cmp	r3, #4
 8000468:	ddf3      	ble.n	8000452 <main+0x7a>

    /* Main Loop -------------------------------------------------------------*/
    while (1)
    {
        // --- Joystick Input (X and Y) ---
        HAL_ADC_Start(&hadc1);
 800046a:	4863      	ldr	r0, [pc, #396]	@ (80005f8 <main+0x220>)
 800046c:	f001 f964 	bl	8001738 <HAL_ADC_Start>
        HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 8000470:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8000474:	4860      	ldr	r0, [pc, #384]	@ (80005f8 <main+0x220>)
 8000476:	f001 fa75 	bl	8001964 <HAL_ADC_PollForConversion>
        joy_x = HAL_ADC_GetValue(&hadc1);
 800047a:	485f      	ldr	r0, [pc, #380]	@ (80005f8 <main+0x220>)
 800047c:	f001 fb74 	bl	8001b68 <HAL_ADC_GetValue>
 8000480:	4603      	mov	r3, r0
 8000482:	4a5e      	ldr	r2, [pc, #376]	@ (80005fc <main+0x224>)
 8000484:	6013      	str	r3, [r2, #0]

        HAL_ADC_Start(&hadc2);
 8000486:	485e      	ldr	r0, [pc, #376]	@ (8000600 <main+0x228>)
 8000488:	f001 f956 	bl	8001738 <HAL_ADC_Start>
        HAL_ADC_PollForConversion(&hadc2, HAL_MAX_DELAY);
 800048c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8000490:	485b      	ldr	r0, [pc, #364]	@ (8000600 <main+0x228>)
 8000492:	f001 fa67 	bl	8001964 <HAL_ADC_PollForConversion>
        joy_y = HAL_ADC_GetValue(&hadc2);
 8000496:	485a      	ldr	r0, [pc, #360]	@ (8000600 <main+0x228>)
 8000498:	f001 fb66 	bl	8001b68 <HAL_ADC_GetValue>
 800049c:	4603      	mov	r3, r0
 800049e:	4a59      	ldr	r2, [pc, #356]	@ (8000604 <main+0x22c>)
 80004a0:	6013      	str	r3, [r2, #0]

        // --- Map ADC to PWM targets ---
        uint16_t target_pan_pwm  = map(joy_x, ADC_MIN, ADC_MAX, SERVO_MIN_PWM, SERVO_MAX_PWM);
 80004a2:	4b56      	ldr	r3, [pc, #344]	@ (80005fc <main+0x224>)
 80004a4:	681b      	ldr	r3, [r3, #0]
 80004a6:	4618      	mov	r0, r3
 80004a8:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 80004ac:	9300      	str	r3, [sp, #0]
 80004ae:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80004b2:	f640 72ff 	movw	r2, #4095	@ 0xfff
 80004b6:	2100      	movs	r1, #0
 80004b8:	f7ff fe86 	bl	80001c8 <map>
 80004bc:	4603      	mov	r3, r0
 80004be:	817b      	strh	r3, [r7, #10]
        uint16_t target_tilt_pwm = map(joy_y, ADC_MIN, ADC_MAX, SERVO_MIN_PWM, SERVO_MAX_PWM);
 80004c0:	4b50      	ldr	r3, [pc, #320]	@ (8000604 <main+0x22c>)
 80004c2:	681b      	ldr	r3, [r3, #0]
 80004c4:	4618      	mov	r0, r3
 80004c6:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 80004ca:	9300      	str	r3, [sp, #0]
 80004cc:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80004d0:	f640 72ff 	movw	r2, #4095	@ 0xfff
 80004d4:	2100      	movs	r1, #0
 80004d6:	f7ff fe77 	bl	80001c8 <map>
 80004da:	4603      	mov	r3, r0
 80004dc:	813b      	strh	r3, [r7, #8]

        // --- Smooth Pan Movement ---
        if (current_pan_pwm < target_pan_pwm) {
 80004de:	4b4a      	ldr	r3, [pc, #296]	@ (8000608 <main+0x230>)
 80004e0:	881b      	ldrh	r3, [r3, #0]
 80004e2:	897a      	ldrh	r2, [r7, #10]
 80004e4:	429a      	cmp	r2, r3
 80004e6:	d90e      	bls.n	8000506 <main+0x12e>
            current_pan_pwm += PWM_STEP_SIZE;
 80004e8:	4b47      	ldr	r3, [pc, #284]	@ (8000608 <main+0x230>)
 80004ea:	881b      	ldrh	r3, [r3, #0]
 80004ec:	3301      	adds	r3, #1
 80004ee:	b29a      	uxth	r2, r3
 80004f0:	4b45      	ldr	r3, [pc, #276]	@ (8000608 <main+0x230>)
 80004f2:	801a      	strh	r2, [r3, #0]
            if (current_pan_pwm > target_pan_pwm) current_pan_pwm = target_pan_pwm;
 80004f4:	4b44      	ldr	r3, [pc, #272]	@ (8000608 <main+0x230>)
 80004f6:	881b      	ldrh	r3, [r3, #0]
 80004f8:	897a      	ldrh	r2, [r7, #10]
 80004fa:	429a      	cmp	r2, r3
 80004fc:	d216      	bcs.n	800052c <main+0x154>
 80004fe:	4a42      	ldr	r2, [pc, #264]	@ (8000608 <main+0x230>)
 8000500:	897b      	ldrh	r3, [r7, #10]
 8000502:	8013      	strh	r3, [r2, #0]
 8000504:	e012      	b.n	800052c <main+0x154>
        } else if (current_pan_pwm > target_pan_pwm) {
 8000506:	4b40      	ldr	r3, [pc, #256]	@ (8000608 <main+0x230>)
 8000508:	881b      	ldrh	r3, [r3, #0]
 800050a:	897a      	ldrh	r2, [r7, #10]
 800050c:	429a      	cmp	r2, r3
 800050e:	d20d      	bcs.n	800052c <main+0x154>
            current_pan_pwm -= PWM_STEP_SIZE;
 8000510:	4b3d      	ldr	r3, [pc, #244]	@ (8000608 <main+0x230>)
 8000512:	881b      	ldrh	r3, [r3, #0]
 8000514:	3b01      	subs	r3, #1
 8000516:	b29a      	uxth	r2, r3
 8000518:	4b3b      	ldr	r3, [pc, #236]	@ (8000608 <main+0x230>)
 800051a:	801a      	strh	r2, [r3, #0]
            if (current_pan_pwm < target_pan_pwm) current_pan_pwm = target_pan_pwm;
 800051c:	4b3a      	ldr	r3, [pc, #232]	@ (8000608 <main+0x230>)
 800051e:	881b      	ldrh	r3, [r3, #0]
 8000520:	897a      	ldrh	r2, [r7, #10]
 8000522:	429a      	cmp	r2, r3
 8000524:	d902      	bls.n	800052c <main+0x154>
 8000526:	4a38      	ldr	r2, [pc, #224]	@ (8000608 <main+0x230>)
 8000528:	897b      	ldrh	r3, [r7, #10]
 800052a:	8013      	strh	r3, [r2, #0]
        }

        // --- Smooth Tilt Movement ---
        if (current_tilt_pwm < target_tilt_pwm) {
 800052c:	4b37      	ldr	r3, [pc, #220]	@ (800060c <main+0x234>)
 800052e:	881b      	ldrh	r3, [r3, #0]
 8000530:	893a      	ldrh	r2, [r7, #8]
 8000532:	429a      	cmp	r2, r3
 8000534:	d90e      	bls.n	8000554 <main+0x17c>
            current_tilt_pwm += PWM_STEP_SIZE;
 8000536:	4b35      	ldr	r3, [pc, #212]	@ (800060c <main+0x234>)
 8000538:	881b      	ldrh	r3, [r3, #0]
 800053a:	3301      	adds	r3, #1
 800053c:	b29a      	uxth	r2, r3
 800053e:	4b33      	ldr	r3, [pc, #204]	@ (800060c <main+0x234>)
 8000540:	801a      	strh	r2, [r3, #0]
            if (current_tilt_pwm > target_tilt_pwm) current_tilt_pwm = target_tilt_pwm;
 8000542:	4b32      	ldr	r3, [pc, #200]	@ (800060c <main+0x234>)
 8000544:	881b      	ldrh	r3, [r3, #0]
 8000546:	893a      	ldrh	r2, [r7, #8]
 8000548:	429a      	cmp	r2, r3
 800054a:	d216      	bcs.n	800057a <main+0x1a2>
 800054c:	4a2f      	ldr	r2, [pc, #188]	@ (800060c <main+0x234>)
 800054e:	893b      	ldrh	r3, [r7, #8]
 8000550:	8013      	strh	r3, [r2, #0]
 8000552:	e012      	b.n	800057a <main+0x1a2>
        } else if (current_tilt_pwm > target_tilt_pwm) {
 8000554:	4b2d      	ldr	r3, [pc, #180]	@ (800060c <main+0x234>)
 8000556:	881b      	ldrh	r3, [r3, #0]
 8000558:	893a      	ldrh	r2, [r7, #8]
 800055a:	429a      	cmp	r2, r3
 800055c:	d20d      	bcs.n	800057a <main+0x1a2>
            current_tilt_pwm -= PWM_STEP_SIZE;
 800055e:	4b2b      	ldr	r3, [pc, #172]	@ (800060c <main+0x234>)
 8000560:	881b      	ldrh	r3, [r3, #0]
 8000562:	3b01      	subs	r3, #1
 8000564:	b29a      	uxth	r2, r3
 8000566:	4b29      	ldr	r3, [pc, #164]	@ (800060c <main+0x234>)
 8000568:	801a      	strh	r2, [r3, #0]
            if (current_tilt_pwm < target_tilt_pwm) current_tilt_pwm = target_tilt_pwm;
 800056a:	4b28      	ldr	r3, [pc, #160]	@ (800060c <main+0x234>)
 800056c:	881b      	ldrh	r3, [r3, #0]
 800056e:	893a      	ldrh	r2, [r7, #8]
 8000570:	429a      	cmp	r2, r3
 8000572:	d902      	bls.n	800057a <main+0x1a2>
 8000574:	4a25      	ldr	r2, [pc, #148]	@ (800060c <main+0x234>)
 8000576:	893b      	ldrh	r3, [r7, #8]
 8000578:	8013      	strh	r3, [r2, #0]
        }

        // --- Apply PWM values to PTU ---
        TIM2->CCR1 = current_pan_pwm;
 800057a:	4b23      	ldr	r3, [pc, #140]	@ (8000608 <main+0x230>)
 800057c:	881a      	ldrh	r2, [r3, #0]
 800057e:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000582:	635a      	str	r2, [r3, #52]	@ 0x34
        TIM2->CCR2 = current_tilt_pwm;
 8000584:	4b21      	ldr	r3, [pc, #132]	@ (800060c <main+0x234>)
 8000586:	881a      	ldrh	r2, [r3, #0]
 8000588:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800058c:	639a      	str	r2, [r3, #56]	@ 0x38

        // --- Distance Filtering & LED Indicator ---
        uint32_t filtered_distance = get_filtered_distance();
 800058e:	f7ff fe37 	bl	8000200 <get_filtered_distance>
 8000592:	6078      	str	r0, [r7, #4]

        if (filtered_distance > 0 && filtered_distance < OBSTACLE_THRESHOLD_MM) {
 8000594:	687b      	ldr	r3, [r7, #4]
 8000596:	2b00      	cmp	r3, #0
 8000598:	d012      	beq.n	80005c0 <main+0x1e8>
 800059a:	687b      	ldr	r3, [r7, #4]
 800059c:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 80005a0:	d20e      	bcs.n	80005c0 <main+0x1e8>
            HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);   // Red ON
 80005a2:	2201      	movs	r2, #1
 80005a4:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80005a8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80005ac:	f002 fa1c 	bl	80029e8 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET); // Green OFF
 80005b0:	2200      	movs	r2, #0
 80005b2:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80005b6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80005ba:	f002 fa15 	bl	80029e8 <HAL_GPIO_WritePin>
 80005be:	e00d      	b.n	80005dc <main+0x204>
        } else {
            HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_SET);   // Green ON
 80005c0:	2201      	movs	r2, #1
 80005c2:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80005c6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80005ca:	f002 fa0d 	bl	80029e8 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET); // Red OFF
 80005ce:	2200      	movs	r2, #0
 80005d0:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80005d4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80005d8:	f002 fa06 	bl	80029e8 <HAL_GPIO_WritePin>
        }

        HAL_Delay(CONTROL_LOOP_DELAY_MS);
 80005dc:	2014      	movs	r0, #20
 80005de:	f000 fea7 	bl	8001330 <HAL_Delay>
    {
 80005e2:	e742      	b.n	800046a <main+0x92>
 80005e4:	2000012c 	.word	0x2000012c
 80005e8:	20000008 	.word	0x20000008
 80005ec:	200001cc 	.word	0x200001cc
 80005f0:	20000180 	.word	0x20000180
 80005f4:	20000068 	.word	0x20000068
 80005f8:	2000008c 	.word	0x2000008c
 80005fc:	20000084 	.word	0x20000084
 8000600:	200000dc 	.word	0x200000dc
 8000604:	20000088 	.word	0x20000088
 8000608:	20000000 	.word	0x20000000
 800060c:	20000002 	.word	0x20000002

08000610 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000610:	b580      	push	{r7, lr}
 8000612:	b09e      	sub	sp, #120	@ 0x78
 8000614:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000616:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 800061a:	2228      	movs	r2, #40	@ 0x28
 800061c:	2100      	movs	r1, #0
 800061e:	4618      	mov	r0, r3
 8000620:	f006 f855 	bl	80066ce <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000624:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8000628:	2200      	movs	r2, #0
 800062a:	601a      	str	r2, [r3, #0]
 800062c:	605a      	str	r2, [r3, #4]
 800062e:	609a      	str	r2, [r3, #8]
 8000630:	60da      	str	r2, [r3, #12]
 8000632:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000634:	463b      	mov	r3, r7
 8000636:	223c      	movs	r2, #60	@ 0x3c
 8000638:	2100      	movs	r1, #0
 800063a:	4618      	mov	r0, r3
 800063c:	f006 f847 	bl	80066ce <memset>

  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI | RCC_OSCILLATORTYPE_HSE;
 8000640:	2303      	movs	r3, #3
 8000642:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000644:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8000648:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800064a:	2300      	movs	r3, #0
 800064c:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800064e:	2301      	movs	r3, #1
 8000650:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000652:	2310      	movs	r3, #16
 8000654:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000656:	2302      	movs	r3, #2
 8000658:	66fb      	str	r3, [r7, #108]	@ 0x6c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800065a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800065e:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8000660:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8000664:	677b      	str	r3, [r7, #116]	@ 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) Error_Handler();
 8000666:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 800066a:	4618      	mov	r0, r3
 800066c:	f002 ff50 	bl	8003510 <HAL_RCC_OscConfig>
 8000670:	4603      	mov	r3, r0
 8000672:	2b00      	cmp	r3, #0
 8000674:	d001      	beq.n	800067a <SystemClock_Config+0x6a>
 8000676:	f000 fac5 	bl	8000c04 <Error_Handler>

  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK |
 800067a:	230f      	movs	r3, #15
 800067c:	63fb      	str	r3, [r7, #60]	@ 0x3c
                                 RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800067e:	2302      	movs	r3, #2
 8000680:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000682:	2300      	movs	r3, #0
 8000684:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000686:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800068a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800068c:	2300      	movs	r3, #0
 800068e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK) Error_Handler();
 8000690:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8000694:	2101      	movs	r1, #1
 8000696:	4618      	mov	r0, r3
 8000698:	f003 ff48 	bl	800452c <HAL_RCC_ClockConfig>
 800069c:	4603      	mov	r3, r0
 800069e:	2b00      	cmp	r3, #0
 80006a0:	d001      	beq.n	80006a6 <SystemClock_Config+0x96>
 80006a2:	f000 faaf 	bl	8000c04 <Error_Handler>

  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB | RCC_PERIPHCLK_I2C1 |
 80006a6:	4b0c      	ldr	r3, [pc, #48]	@ (80006d8 <SystemClock_Config+0xc8>)
 80006a8:	603b      	str	r3, [r7, #0]
                                       RCC_PERIPHCLK_TIM1 | RCC_PERIPHCLK_ADC12;
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12PLLCLK_DIV1;
 80006aa:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80006ae:	627b      	str	r3, [r7, #36]	@ 0x24
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 80006b0:	2300      	movs	r3, #0
 80006b2:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.USBClockSelection = RCC_USBCLKSOURCE_PLL;
 80006b4:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80006b8:	63bb      	str	r3, [r7, #56]	@ 0x38
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_HCLK;
 80006ba:	2300      	movs	r3, #0
 80006bc:	633b      	str	r3, [r7, #48]	@ 0x30
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK) Error_Handler();
 80006be:	463b      	mov	r3, r7
 80006c0:	4618      	mov	r0, r3
 80006c2:	f004 f8f5 	bl	80048b0 <HAL_RCCEx_PeriphCLKConfig>
 80006c6:	4603      	mov	r3, r0
 80006c8:	2b00      	cmp	r3, #0
 80006ca:	d001      	beq.n	80006d0 <SystemClock_Config+0xc0>
 80006cc:	f000 fa9a 	bl	8000c04 <Error_Handler>
}
 80006d0:	bf00      	nop
 80006d2:	3778      	adds	r7, #120	@ 0x78
 80006d4:	46bd      	mov	sp, r7
 80006d6:	bd80      	pop	{r7, pc}
 80006d8:	000210a0 	.word	0x000210a0

080006dc <MX_ADC1_Init>:

/**
  * @brief Initialize ADC1 (PC1 = ADC1_IN7)
  */
static void MX_ADC1_Init(void)
{
 80006dc:	b5b0      	push	{r4, r5, r7, lr}
 80006de:	b09c      	sub	sp, #112	@ 0x70
 80006e0:	af00      	add	r7, sp, #0
  ADC_MultiModeTypeDef multimode = {0};
 80006e2:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80006e6:	2200      	movs	r2, #0
 80006e8:	601a      	str	r2, [r3, #0]
 80006ea:	605a      	str	r2, [r3, #4]
 80006ec:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80006ee:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 80006f2:	2200      	movs	r2, #0
 80006f4:	601a      	str	r2, [r3, #0]
 80006f6:	605a      	str	r2, [r3, #4]
 80006f8:	609a      	str	r2, [r3, #8]
 80006fa:	60da      	str	r2, [r3, #12]
 80006fc:	611a      	str	r2, [r3, #16]
 80006fe:	615a      	str	r2, [r3, #20]

  hadc1.Instance = ADC1;
 8000700:	4b20      	ldr	r3, [pc, #128]	@ (8000784 <MX_ADC1_Init+0xa8>)
 8000702:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8000706:	601a      	str	r2, [r3, #0]
  hadc1.Init = (ADC_InitTypeDef){
 8000708:	4b1e      	ldr	r3, [pc, #120]	@ (8000784 <MX_ADC1_Init+0xa8>)
 800070a:	3304      	adds	r3, #4
 800070c:	2234      	movs	r2, #52	@ 0x34
 800070e:	2100      	movs	r1, #0
 8000710:	4618      	mov	r0, r3
 8000712:	f005 ffdc 	bl	80066ce <memset>
 8000716:	4b1b      	ldr	r3, [pc, #108]	@ (8000784 <MX_ADC1_Init+0xa8>)
 8000718:	2204      	movs	r2, #4
 800071a:	615a      	str	r2, [r3, #20]
 800071c:	4b19      	ldr	r3, [pc, #100]	@ (8000784 <MX_ADC1_Init+0xa8>)
 800071e:	2201      	movs	r2, #1
 8000720:	61da      	str	r2, [r3, #28]
 8000722:	4b18      	ldr	r3, [pc, #96]	@ (8000784 <MX_ADC1_Init+0xa8>)
 8000724:	2201      	movs	r2, #1
 8000726:	629a      	str	r2, [r3, #40]	@ 0x28
    .DMAContinuousRequests = DISABLE,
    .EOCSelection = ADC_EOC_SINGLE_CONV,
    .LowPowerAutoWait = DISABLE,
    .Overrun = ADC_OVR_DATA_OVERWRITTEN
  };
  if (HAL_ADC_Init(&hadc1) != HAL_OK) Error_Handler();
 8000728:	4816      	ldr	r0, [pc, #88]	@ (8000784 <MX_ADC1_Init+0xa8>)
 800072a:	f000 fe25 	bl	8001378 <HAL_ADC_Init>
 800072e:	4603      	mov	r3, r0
 8000730:	2b00      	cmp	r3, #0
 8000732:	d001      	beq.n	8000738 <MX_ADC1_Init+0x5c>
 8000734:	f000 fa66 	bl	8000c04 <Error_Handler>

  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000738:	2300      	movs	r3, #0
 800073a:	667b      	str	r3, [r7, #100]	@ 0x64
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK) Error_Handler();
 800073c:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000740:	4619      	mov	r1, r3
 8000742:	4810      	ldr	r0, [pc, #64]	@ (8000784 <MX_ADC1_Init+0xa8>)
 8000744:	f001 fd08 	bl	8002158 <HAL_ADCEx_MultiModeConfigChannel>
 8000748:	4603      	mov	r3, r0
 800074a:	2b00      	cmp	r3, #0
 800074c:	d001      	beq.n	8000752 <MX_ADC1_Init+0x76>
 800074e:	f000 fa59 	bl	8000c04 <Error_Handler>

  sConfig = (ADC_ChannelConfTypeDef){
 8000752:	4b0d      	ldr	r3, [pc, #52]	@ (8000788 <MX_ADC1_Init+0xac>)
 8000754:	f107 044c 	add.w	r4, r7, #76	@ 0x4c
 8000758:	461d      	mov	r5, r3
 800075a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800075c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800075e:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000762:	e884 0003 	stmia.w	r4, {r0, r1}
    .SingleDiff = ADC_SINGLE_ENDED,
    .SamplingTime = ADC_SAMPLETIME_1CYCLE_5,
    .OffsetNumber = ADC_OFFSET_NONE,
    .Offset = 0
  };
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) Error_Handler();
 8000766:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 800076a:	4619      	mov	r1, r3
 800076c:	4805      	ldr	r0, [pc, #20]	@ (8000784 <MX_ADC1_Init+0xa8>)
 800076e:	f001 fa09 	bl	8001b84 <HAL_ADC_ConfigChannel>
 8000772:	4603      	mov	r3, r0
 8000774:	2b00      	cmp	r3, #0
 8000776:	d001      	beq.n	800077c <MX_ADC1_Init+0xa0>
 8000778:	f000 fa44 	bl	8000c04 <Error_Handler>
}
 800077c:	bf00      	nop
 800077e:	3770      	adds	r7, #112	@ 0x70
 8000780:	46bd      	mov	sp, r7
 8000782:	bdb0      	pop	{r4, r5, r7, pc}
 8000784:	2000008c 	.word	0x2000008c
 8000788:	08006740 	.word	0x08006740

0800078c <MX_ADC2_Init>:

/**
  * @brief Initialize ADC2 (PA1 = ADC2_IN1)
  */
static void MX_ADC2_Init(void)
{
 800078c:	b5b0      	push	{r4, r5, r7, lr}
 800078e:	b08c      	sub	sp, #48	@ 0x30
 8000790:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 8000792:	f107 0318 	add.w	r3, r7, #24
 8000796:	2200      	movs	r2, #0
 8000798:	601a      	str	r2, [r3, #0]
 800079a:	605a      	str	r2, [r3, #4]
 800079c:	609a      	str	r2, [r3, #8]
 800079e:	60da      	str	r2, [r3, #12]
 80007a0:	611a      	str	r2, [r3, #16]
 80007a2:	615a      	str	r2, [r3, #20]

  hadc2.Instance = ADC2;
 80007a4:	4b17      	ldr	r3, [pc, #92]	@ (8000804 <MX_ADC2_Init+0x78>)
 80007a6:	4a18      	ldr	r2, [pc, #96]	@ (8000808 <MX_ADC2_Init+0x7c>)
 80007a8:	601a      	str	r2, [r3, #0]
  hadc2.Init = hadc1.Init;
 80007aa:	4a16      	ldr	r2, [pc, #88]	@ (8000804 <MX_ADC2_Init+0x78>)
 80007ac:	4b17      	ldr	r3, [pc, #92]	@ (800080c <MX_ADC2_Init+0x80>)
 80007ae:	1d14      	adds	r4, r2, #4
 80007b0:	1d1d      	adds	r5, r3, #4
 80007b2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80007b4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80007b6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80007b8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80007ba:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80007bc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80007be:	682b      	ldr	r3, [r5, #0]
 80007c0:	6023      	str	r3, [r4, #0]
  if (HAL_ADC_Init(&hadc2) != HAL_OK) Error_Handler();
 80007c2:	4810      	ldr	r0, [pc, #64]	@ (8000804 <MX_ADC2_Init+0x78>)
 80007c4:	f000 fdd8 	bl	8001378 <HAL_ADC_Init>
 80007c8:	4603      	mov	r3, r0
 80007ca:	2b00      	cmp	r3, #0
 80007cc:	d001      	beq.n	80007d2 <MX_ADC2_Init+0x46>
 80007ce:	f000 fa19 	bl	8000c04 <Error_Handler>

  sConfig = (ADC_ChannelConfTypeDef){
 80007d2:	4b0f      	ldr	r3, [pc, #60]	@ (8000810 <MX_ADC2_Init+0x84>)
 80007d4:	f107 0418 	add.w	r4, r7, #24
 80007d8:	461d      	mov	r5, r3
 80007da:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80007dc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80007de:	e895 0003 	ldmia.w	r5, {r0, r1}
 80007e2:	e884 0003 	stmia.w	r4, {r0, r1}
    .SingleDiff = ADC_SINGLE_ENDED,
    .SamplingTime = ADC_SAMPLETIME_1CYCLE_5,
    .OffsetNumber = ADC_OFFSET_NONE,
    .Offset = 0
  };
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK) Error_Handler();
 80007e6:	f107 0318 	add.w	r3, r7, #24
 80007ea:	4619      	mov	r1, r3
 80007ec:	4805      	ldr	r0, [pc, #20]	@ (8000804 <MX_ADC2_Init+0x78>)
 80007ee:	f001 f9c9 	bl	8001b84 <HAL_ADC_ConfigChannel>
 80007f2:	4603      	mov	r3, r0
 80007f4:	2b00      	cmp	r3, #0
 80007f6:	d001      	beq.n	80007fc <MX_ADC2_Init+0x70>
 80007f8:	f000 fa04 	bl	8000c04 <Error_Handler>
}
 80007fc:	bf00      	nop
 80007fe:	3730      	adds	r7, #48	@ 0x30
 8000800:	46bd      	mov	sp, r7
 8000802:	bdb0      	pop	{r4, r5, r7, pc}
 8000804:	200000dc 	.word	0x200000dc
 8000808:	50000100 	.word	0x50000100
 800080c:	2000008c 	.word	0x2000008c
 8000810:	08006758 	.word	0x08006758

08000814 <MX_I2C1_Init>:

/**
  * @brief Initialize I2C1
  */
static void MX_I2C1_Init(void)
{
 8000814:	b5b0      	push	{r4, r5, r7, lr}
 8000816:	b088      	sub	sp, #32
 8000818:	af00      	add	r7, sp, #0
  hi2c1.Instance = I2C1;
 800081a:	4b15      	ldr	r3, [pc, #84]	@ (8000870 <MX_I2C1_Init+0x5c>)
 800081c:	4a15      	ldr	r2, [pc, #84]	@ (8000874 <MX_I2C1_Init+0x60>)
 800081e:	601a      	str	r2, [r3, #0]
  hi2c1.Init = (I2C_InitTypeDef){
 8000820:	4b13      	ldr	r3, [pc, #76]	@ (8000870 <MX_I2C1_Init+0x5c>)
 8000822:	4a15      	ldr	r2, [pc, #84]	@ (8000878 <MX_I2C1_Init+0x64>)
 8000824:	1d1c      	adds	r4, r3, #4
 8000826:	4615      	mov	r5, r2
 8000828:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800082a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800082c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8000830:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    .OwnAddress2 = 0,
    .OwnAddress2Masks = I2C_OA2_NOMASK,
    .GeneralCallMode = I2C_GENERALCALL_DISABLE,
    .NoStretchMode = I2C_NOSTRETCH_DISABLE
  };
  if (HAL_I2C_Init(&hi2c1) != HAL_OK) Error_Handler();
 8000834:	480e      	ldr	r0, [pc, #56]	@ (8000870 <MX_I2C1_Init+0x5c>)
 8000836:	f002 f8ef 	bl	8002a18 <HAL_I2C_Init>
 800083a:	4603      	mov	r3, r0
 800083c:	2b00      	cmp	r3, #0
 800083e:	d001      	beq.n	8000844 <MX_I2C1_Init+0x30>
 8000840:	f000 f9e0 	bl	8000c04 <Error_Handler>
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK) Error_Handler();
 8000844:	2100      	movs	r1, #0
 8000846:	480a      	ldr	r0, [pc, #40]	@ (8000870 <MX_I2C1_Init+0x5c>)
 8000848:	f002 fd04 	bl	8003254 <HAL_I2CEx_ConfigAnalogFilter>
 800084c:	4603      	mov	r3, r0
 800084e:	2b00      	cmp	r3, #0
 8000850:	d001      	beq.n	8000856 <MX_I2C1_Init+0x42>
 8000852:	f000 f9d7 	bl	8000c04 <Error_Handler>
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK) Error_Handler();
 8000856:	2100      	movs	r1, #0
 8000858:	4805      	ldr	r0, [pc, #20]	@ (8000870 <MX_I2C1_Init+0x5c>)
 800085a:	f002 fd46 	bl	80032ea <HAL_I2CEx_ConfigDigitalFilter>
 800085e:	4603      	mov	r3, r0
 8000860:	2b00      	cmp	r3, #0
 8000862:	d001      	beq.n	8000868 <MX_I2C1_Init+0x54>
 8000864:	f000 f9ce 	bl	8000c04 <Error_Handler>
}
 8000868:	bf00      	nop
 800086a:	3720      	adds	r7, #32
 800086c:	46bd      	mov	sp, r7
 800086e:	bdb0      	pop	{r4, r5, r7, pc}
 8000870:	2000012c 	.word	0x2000012c
 8000874:	40005400 	.word	0x40005400
 8000878:	08006770 	.word	0x08006770

0800087c <MX_TIM1_Init>:

/**
  * @brief Initialize TIM1 (Input Capture)
  */
static void MX_TIM1_Init(void)
{
 800087c:	b5b0      	push	{r4, r5, r7, lr}
 800087e:	b096      	sub	sp, #88	@ 0x58
 8000880:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000882:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8000886:	2200      	movs	r2, #0
 8000888:	601a      	str	r2, [r3, #0]
 800088a:	605a      	str	r2, [r3, #4]
 800088c:	609a      	str	r2, [r3, #8]
 800088e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000890:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8000894:	2200      	movs	r2, #0
 8000896:	601a      	str	r2, [r3, #0]
 8000898:	605a      	str	r2, [r3, #4]
 800089a:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 800089c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80008a0:	2200      	movs	r2, #0
 80008a2:	601a      	str	r2, [r3, #0]
 80008a4:	605a      	str	r2, [r3, #4]
 80008a6:	609a      	str	r2, [r3, #8]
 80008a8:	60da      	str	r2, [r3, #12]

  htim1.Instance = TIM1;
 80008aa:	4b29      	ldr	r3, [pc, #164]	@ (8000950 <MX_TIM1_Init+0xd4>)
 80008ac:	4a29      	ldr	r2, [pc, #164]	@ (8000954 <MX_TIM1_Init+0xd8>)
 80008ae:	601a      	str	r2, [r3, #0]
  htim1.Init = (TIM_Base_InitTypeDef){
 80008b0:	4b27      	ldr	r3, [pc, #156]	@ (8000950 <MX_TIM1_Init+0xd4>)
 80008b2:	4a29      	ldr	r2, [pc, #164]	@ (8000958 <MX_TIM1_Init+0xdc>)
 80008b4:	1d1c      	adds	r4, r3, #4
 80008b6:	4615      	mov	r5, r2
 80008b8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80008ba:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80008bc:	e895 0003 	ldmia.w	r5, {r0, r1}
 80008c0:	e884 0003 	stmia.w	r4, {r0, r1}
    .Period = 65535,
    .ClockDivision = TIM_CLOCKDIVISION_DIV1,
    .RepetitionCounter = 0,
    .AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE
  };
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK) Error_Handler();
 80008c4:	4822      	ldr	r0, [pc, #136]	@ (8000950 <MX_TIM1_Init+0xd4>)
 80008c6:	f004 f9a1 	bl	8004c0c <HAL_TIM_Base_Init>
 80008ca:	4603      	mov	r3, r0
 80008cc:	2b00      	cmp	r3, #0
 80008ce:	d001      	beq.n	80008d4 <MX_TIM1_Init+0x58>
 80008d0:	f000 f998 	bl	8000c04 <Error_Handler>

  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80008d4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80008d8:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK) Error_Handler();
 80008da:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80008de:	4619      	mov	r1, r3
 80008e0:	481b      	ldr	r0, [pc, #108]	@ (8000950 <MX_TIM1_Init+0xd4>)
 80008e2:	f004 ff97 	bl	8005814 <HAL_TIM_ConfigClockSource>
 80008e6:	4603      	mov	r3, r0
 80008e8:	2b00      	cmp	r3, #0
 80008ea:	d001      	beq.n	80008f0 <MX_TIM1_Init+0x74>
 80008ec:	f000 f98a 	bl	8000c04 <Error_Handler>

  if (HAL_TIM_IC_Init(&htim1) != HAL_OK) Error_Handler();
 80008f0:	4817      	ldr	r0, [pc, #92]	@ (8000950 <MX_TIM1_Init+0xd4>)
 80008f2:	f004 fb39 	bl	8004f68 <HAL_TIM_IC_Init>
 80008f6:	4603      	mov	r3, r0
 80008f8:	2b00      	cmp	r3, #0
 80008fa:	d001      	beq.n	8000900 <MX_TIM1_Init+0x84>
 80008fc:	f000 f982 	bl	8000c04 <Error_Handler>

  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000900:	2300      	movs	r3, #0
 8000902:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000904:	2300      	movs	r3, #0
 8000906:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000908:	2300      	movs	r3, #0
 800090a:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK) Error_Handler();
 800090c:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8000910:	4619      	mov	r1, r3
 8000912:	480f      	ldr	r0, [pc, #60]	@ (8000950 <MX_TIM1_Init+0xd4>)
 8000914:	f005 fe04 	bl	8006520 <HAL_TIMEx_MasterConfigSynchronization>
 8000918:	4603      	mov	r3, r0
 800091a:	2b00      	cmp	r3, #0
 800091c:	d001      	beq.n	8000922 <MX_TIM1_Init+0xa6>
 800091e:	f000 f971 	bl	8000c04 <Error_Handler>

  sConfigIC = (TIM_IC_InitTypeDef){
 8000922:	4b0e      	ldr	r3, [pc, #56]	@ (800095c <MX_TIM1_Init+0xe0>)
 8000924:	f107 042c 	add.w	r4, r7, #44	@ 0x2c
 8000928:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800092a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    .ICPolarity = TIM_INPUTCHANNELPOLARITY_BOTHEDGE,
    .ICSelection = TIM_ICSELECTION_DIRECTTI,
    .ICPrescaler = TIM_ICPSC_DIV1,
    .ICFilter = 0
  };
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_1) != HAL_OK) Error_Handler();
 800092e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000932:	2200      	movs	r2, #0
 8000934:	4619      	mov	r1, r3
 8000936:	4806      	ldr	r0, [pc, #24]	@ (8000950 <MX_TIM1_Init+0xd4>)
 8000938:	f004 fdbc 	bl	80054b4 <HAL_TIM_IC_ConfigChannel>
 800093c:	4603      	mov	r3, r0
 800093e:	2b00      	cmp	r3, #0
 8000940:	d001      	beq.n	8000946 <MX_TIM1_Init+0xca>
 8000942:	f000 f95f 	bl	8000c04 <Error_Handler>
}
 8000946:	bf00      	nop
 8000948:	3758      	adds	r7, #88	@ 0x58
 800094a:	46bd      	mov	sp, r7
 800094c:	bdb0      	pop	{r4, r5, r7, pc}
 800094e:	bf00      	nop
 8000950:	20000180 	.word	0x20000180
 8000954:	40012c00 	.word	0x40012c00
 8000958:	08006790 	.word	0x08006790
 800095c:	080067a8 	.word	0x080067a8

08000960 <MX_TIM2_Init>:

/**
  * @brief Initialize TIM2 (PWM)
  */
static void MX_TIM2_Init(void)
{
 8000960:	b580      	push	{r7, lr}
 8000962:	b098      	sub	sp, #96	@ 0x60
 8000964:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000966:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800096a:	2200      	movs	r2, #0
 800096c:	601a      	str	r2, [r3, #0]
 800096e:	605a      	str	r2, [r3, #4]
 8000970:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000972:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000976:	2200      	movs	r2, #0
 8000978:	601a      	str	r2, [r3, #0]
 800097a:	605a      	str	r2, [r3, #4]
 800097c:	609a      	str	r2, [r3, #8]
 800097e:	60da      	str	r2, [r3, #12]
 8000980:	611a      	str	r2, [r3, #16]
 8000982:	615a      	str	r2, [r3, #20]
 8000984:	619a      	str	r2, [r3, #24]

  htim2.Instance = TIM2;
 8000986:	4b2e      	ldr	r3, [pc, #184]	@ (8000a40 <MX_TIM2_Init+0xe0>)
 8000988:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800098c:	601a      	str	r2, [r3, #0]
  htim2.Init = (TIM_Base_InitTypeDef){
 800098e:	4b2c      	ldr	r3, [pc, #176]	@ (8000a40 <MX_TIM2_Init+0xe0>)
 8000990:	3304      	adds	r3, #4
 8000992:	2200      	movs	r2, #0
 8000994:	601a      	str	r2, [r3, #0]
 8000996:	605a      	str	r2, [r3, #4]
 8000998:	609a      	str	r2, [r3, #8]
 800099a:	60da      	str	r2, [r3, #12]
 800099c:	611a      	str	r2, [r3, #16]
 800099e:	615a      	str	r2, [r3, #20]
 80009a0:	4b27      	ldr	r3, [pc, #156]	@ (8000a40 <MX_TIM2_Init+0xe0>)
 80009a2:	222f      	movs	r2, #47	@ 0x2f
 80009a4:	605a      	str	r2, [r3, #4]
 80009a6:	4b26      	ldr	r3, [pc, #152]	@ (8000a40 <MX_TIM2_Init+0xe0>)
 80009a8:	f644 6220 	movw	r2, #20000	@ 0x4e20
 80009ac:	60da      	str	r2, [r3, #12]
 80009ae:	4b24      	ldr	r3, [pc, #144]	@ (8000a40 <MX_TIM2_Init+0xe0>)
 80009b0:	2280      	movs	r2, #128	@ 0x80
 80009b2:	619a      	str	r2, [r3, #24]
    .CounterMode = TIM_COUNTERMODE_UP,
    .Period = 20000,
    .ClockDivision = TIM_CLOCKDIVISION_DIV1,
    .AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE
  };
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK) Error_Handler();
 80009b4:	4822      	ldr	r0, [pc, #136]	@ (8000a40 <MX_TIM2_Init+0xe0>)
 80009b6:	f004 f980 	bl	8004cba <HAL_TIM_PWM_Init>
 80009ba:	4603      	mov	r3, r0
 80009bc:	2b00      	cmp	r3, #0
 80009be:	d001      	beq.n	80009c4 <MX_TIM2_Init+0x64>
 80009c0:	f000 f920 	bl	8000c04 <Error_Handler>

  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80009c4:	2300      	movs	r3, #0
 80009c6:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80009c8:	2300      	movs	r3, #0
 80009ca:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK) Error_Handler();
 80009cc:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80009d0:	4619      	mov	r1, r3
 80009d2:	481b      	ldr	r0, [pc, #108]	@ (8000a40 <MX_TIM2_Init+0xe0>)
 80009d4:	f005 fda4 	bl	8006520 <HAL_TIMEx_MasterConfigSynchronization>
 80009d8:	4603      	mov	r3, r0
 80009da:	2b00      	cmp	r3, #0
 80009dc:	d001      	beq.n	80009e2 <MX_TIM2_Init+0x82>
 80009de:	f000 f911 	bl	8000c04 <Error_Handler>

  sConfigOC = (TIM_OC_InitTypeDef){
 80009e2:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80009e6:	2200      	movs	r2, #0
 80009e8:	601a      	str	r2, [r3, #0]
 80009ea:	605a      	str	r2, [r3, #4]
 80009ec:	609a      	str	r2, [r3, #8]
 80009ee:	60da      	str	r2, [r3, #12]
 80009f0:	611a      	str	r2, [r3, #16]
 80009f2:	615a      	str	r2, [r3, #20]
 80009f4:	619a      	str	r2, [r3, #24]
 80009f6:	2360      	movs	r3, #96	@ 0x60
 80009f8:	63bb      	str	r3, [r7, #56]	@ 0x38
 80009fa:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 80009fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
    .OCMode = TIM_OCMODE_PWM1,
    .Pulse = 2000,
    .OCPolarity = TIM_OCPOLARITY_HIGH,
    .OCFastMode = TIM_OCFAST_DISABLE
  };
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK) Error_Handler();
 8000a00:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000a04:	2200      	movs	r2, #0
 8000a06:	4619      	mov	r1, r3
 8000a08:	480d      	ldr	r0, [pc, #52]	@ (8000a40 <MX_TIM2_Init+0xe0>)
 8000a0a:	f004 fdef 	bl	80055ec <HAL_TIM_PWM_ConfigChannel>
 8000a0e:	4603      	mov	r3, r0
 8000a10:	2b00      	cmp	r3, #0
 8000a12:	d001      	beq.n	8000a18 <MX_TIM2_Init+0xb8>
 8000a14:	f000 f8f6 	bl	8000c04 <Error_Handler>
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK) Error_Handler();
 8000a18:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000a1c:	2204      	movs	r2, #4
 8000a1e:	4619      	mov	r1, r3
 8000a20:	4807      	ldr	r0, [pc, #28]	@ (8000a40 <MX_TIM2_Init+0xe0>)
 8000a22:	f004 fde3 	bl	80055ec <HAL_TIM_PWM_ConfigChannel>
 8000a26:	4603      	mov	r3, r0
 8000a28:	2b00      	cmp	r3, #0
 8000a2a:	d001      	beq.n	8000a30 <MX_TIM2_Init+0xd0>
 8000a2c:	f000 f8ea 	bl	8000c04 <Error_Handler>

  HAL_TIM_MspPostInit(&htim2);
 8000a30:	4803      	ldr	r0, [pc, #12]	@ (8000a40 <MX_TIM2_Init+0xe0>)
 8000a32:	f000 fb1d 	bl	8001070 <HAL_TIM_MspPostInit>
}
 8000a36:	bf00      	nop
 8000a38:	3760      	adds	r7, #96	@ 0x60
 8000a3a:	46bd      	mov	sp, r7
 8000a3c:	bd80      	pop	{r7, pc}
 8000a3e:	bf00      	nop
 8000a40:	200001cc 	.word	0x200001cc

08000a44 <MX_USB_PCD_Init>:

/**
  * @brief Initialize USB
  */
static void MX_USB_PCD_Init(void)
{
 8000a44:	b580      	push	{r7, lr}
 8000a46:	b082      	sub	sp, #8
 8000a48:	af00      	add	r7, sp, #0
  hpcd_USB_FS.Instance = USB;
 8000a4a:	4b0e      	ldr	r3, [pc, #56]	@ (8000a84 <MX_USB_PCD_Init+0x40>)
 8000a4c:	4a0e      	ldr	r2, [pc, #56]	@ (8000a88 <MX_USB_PCD_Init+0x44>)
 8000a4e:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init = (PCD_InitTypeDef){
 8000a50:	4b0c      	ldr	r3, [pc, #48]	@ (8000a84 <MX_USB_PCD_Init+0x40>)
 8000a52:	3304      	adds	r3, #4
 8000a54:	2200      	movs	r2, #0
 8000a56:	601a      	str	r2, [r3, #0]
 8000a58:	605a      	str	r2, [r3, #4]
 8000a5a:	4b0a      	ldr	r3, [pc, #40]	@ (8000a84 <MX_USB_PCD_Init+0x40>)
 8000a5c:	2208      	movs	r2, #8
 8000a5e:	711a      	strb	r2, [r3, #4]
 8000a60:	4b08      	ldr	r3, [pc, #32]	@ (8000a84 <MX_USB_PCD_Init+0x40>)
 8000a62:	2202      	movs	r2, #2
 8000a64:	715a      	strb	r2, [r3, #5]
 8000a66:	4b07      	ldr	r3, [pc, #28]	@ (8000a84 <MX_USB_PCD_Init+0x40>)
 8000a68:	2202      	movs	r2, #2
 8000a6a:	71da      	strb	r2, [r3, #7]
    .speed = PCD_SPEED_FULL,
    .phy_itface = PCD_PHY_EMBEDDED,
    .low_power_enable = DISABLE,
    .battery_charging_enable = DISABLE
  };
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK) Error_Handler();
 8000a6c:	4805      	ldr	r0, [pc, #20]	@ (8000a84 <MX_USB_PCD_Init+0x40>)
 8000a6e:	f002 fc88 	bl	8003382 <HAL_PCD_Init>
 8000a72:	4603      	mov	r3, r0
 8000a74:	2b00      	cmp	r3, #0
 8000a76:	d001      	beq.n	8000a7c <MX_USB_PCD_Init+0x38>
 8000a78:	f000 f8c4 	bl	8000c04 <Error_Handler>
}
 8000a7c:	bf00      	nop
 8000a7e:	3708      	adds	r7, #8
 8000a80:	46bd      	mov	sp, r7
 8000a82:	bd80      	pop	{r7, pc}
 8000a84:	20000218 	.word	0x20000218
 8000a88:	40005c00 	.word	0x40005c00

08000a8c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	b08a      	sub	sp, #40	@ 0x28
 8000a90:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a92:	f107 0314 	add.w	r3, r7, #20
 8000a96:	2200      	movs	r2, #0
 8000a98:	601a      	str	r2, [r3, #0]
 8000a9a:	605a      	str	r2, [r3, #4]
 8000a9c:	609a      	str	r2, [r3, #8]
 8000a9e:	60da      	str	r2, [r3, #12]
 8000aa0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000aa2:	4b55      	ldr	r3, [pc, #340]	@ (8000bf8 <MX_GPIO_Init+0x16c>)
 8000aa4:	695b      	ldr	r3, [r3, #20]
 8000aa6:	4a54      	ldr	r2, [pc, #336]	@ (8000bf8 <MX_GPIO_Init+0x16c>)
 8000aa8:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000aac:	6153      	str	r3, [r2, #20]
 8000aae:	4b52      	ldr	r3, [pc, #328]	@ (8000bf8 <MX_GPIO_Init+0x16c>)
 8000ab0:	695b      	ldr	r3, [r3, #20]
 8000ab2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000ab6:	613b      	str	r3, [r7, #16]
 8000ab8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();  // Needed for PC0, PC1
 8000aba:	4b4f      	ldr	r3, [pc, #316]	@ (8000bf8 <MX_GPIO_Init+0x16c>)
 8000abc:	695b      	ldr	r3, [r3, #20]
 8000abe:	4a4e      	ldr	r2, [pc, #312]	@ (8000bf8 <MX_GPIO_Init+0x16c>)
 8000ac0:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8000ac4:	6153      	str	r3, [r2, #20]
 8000ac6:	4b4c      	ldr	r3, [pc, #304]	@ (8000bf8 <MX_GPIO_Init+0x16c>)
 8000ac8:	695b      	ldr	r3, [r3, #20]
 8000aca:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8000ace:	60fb      	str	r3, [r7, #12]
 8000ad0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000ad2:	4b49      	ldr	r3, [pc, #292]	@ (8000bf8 <MX_GPIO_Init+0x16c>)
 8000ad4:	695b      	ldr	r3, [r3, #20]
 8000ad6:	4a48      	ldr	r2, [pc, #288]	@ (8000bf8 <MX_GPIO_Init+0x16c>)
 8000ad8:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000adc:	6153      	str	r3, [r2, #20]
 8000ade:	4b46      	ldr	r3, [pc, #280]	@ (8000bf8 <MX_GPIO_Init+0x16c>)
 8000ae0:	695b      	ldr	r3, [r3, #20]
 8000ae2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000ae6:	60bb      	str	r3, [r7, #8]
 8000ae8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000aea:	4b43      	ldr	r3, [pc, #268]	@ (8000bf8 <MX_GPIO_Init+0x16c>)
 8000aec:	695b      	ldr	r3, [r3, #20]
 8000aee:	4a42      	ldr	r2, [pc, #264]	@ (8000bf8 <MX_GPIO_Init+0x16c>)
 8000af0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000af4:	6153      	str	r3, [r2, #20]
 8000af6:	4b40      	ldr	r3, [pc, #256]	@ (8000bf8 <MX_GPIO_Init+0x16c>)
 8000af8:	695b      	ldr	r3, [r3, #20]
 8000afa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000afe:	607b      	str	r3, [r7, #4]
 8000b00:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b02:	4b3d      	ldr	r3, [pc, #244]	@ (8000bf8 <MX_GPIO_Init+0x16c>)
 8000b04:	695b      	ldr	r3, [r3, #20]
 8000b06:	4a3c      	ldr	r2, [pc, #240]	@ (8000bf8 <MX_GPIO_Init+0x16c>)
 8000b08:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000b0c:	6153      	str	r3, [r2, #20]
 8000b0e:	4b3a      	ldr	r3, [pc, #232]	@ (8000bf8 <MX_GPIO_Init+0x16c>)
 8000b10:	695b      	ldr	r3, [r3, #20]
 8000b12:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000b16:	603b      	str	r3, [r7, #0]
 8000b18:	683b      	ldr	r3, [r7, #0]

  /* Configure GPIO pin Output Level for GPIOE */
  HAL_GPIO_WritePin(GPIOE, CS_I2C_SPI_Pin|LD4_Pin|LD3_Pin|LD5_Pin
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	f64f 7108 	movw	r1, #65288	@ 0xff08
 8000b20:	4836      	ldr	r0, [pc, #216]	@ (8000bfc <MX_GPIO_Init+0x170>)
 8000b22:	f001 ff61 	bl	80029e8 <HAL_GPIO_WritePin>
                          |LD7_Pin|LD9_Pin|LD10_Pin|LD8_Pin
                          |LD6_Pin, GPIO_PIN_RESET);

  /* Configure GPIO pin Output Level for PA9, PA10 */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9|GPIO_PIN_10, GPIO_PIN_RESET);
 8000b26:	2200      	movs	r2, #0
 8000b28:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8000b2c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000b30:	f001 ff5a 	bl	80029e8 <HAL_GPIO_WritePin>

  /* Configure GPIO pin Output Level for PC0, PC1 (Red/Green LEDs) */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0|GPIO_PIN_1, GPIO_PIN_RESET);
 8000b34:	2200      	movs	r2, #0
 8000b36:	2103      	movs	r1, #3
 8000b38:	4831      	ldr	r0, [pc, #196]	@ (8000c00 <MX_GPIO_Init+0x174>)
 8000b3a:	f001 ff55 	bl	80029e8 <HAL_GPIO_WritePin>

  /* GPIOE: LEDs and CS pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin|LD4_Pin|LD3_Pin|LD5_Pin
 8000b3e:	f64f 7308 	movw	r3, #65288	@ 0xff08
 8000b42:	617b      	str	r3, [r7, #20]
                        |LD7_Pin|LD9_Pin|LD10_Pin|LD8_Pin
                        |LD6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b44:	2301      	movs	r3, #1
 8000b46:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b48:	2300      	movs	r3, #0
 8000b4a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b4c:	2300      	movs	r3, #0
 8000b4e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000b50:	f107 0314 	add.w	r3, r7, #20
 8000b54:	4619      	mov	r1, r3
 8000b56:	4829      	ldr	r0, [pc, #164]	@ (8000bfc <MX_GPIO_Init+0x170>)
 8000b58:	f001 fdcc 	bl	80026f4 <HAL_GPIO_Init>

  /* GPIOE: MEMS INT pins */
  GPIO_InitStruct.Pin = MEMS_INT3_Pin|MEMS_INT4_Pin|MEMS_INT1_Pin|MEMS_INT2_Pin;
 8000b5c:	2333      	movs	r3, #51	@ 0x33
 8000b5e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000b60:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8000b64:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b66:	2300      	movs	r3, #0
 8000b68:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000b6a:	f107 0314 	add.w	r3, r7, #20
 8000b6e:	4619      	mov	r1, r3
 8000b70:	4822      	ldr	r0, [pc, #136]	@ (8000bfc <MX_GPIO_Init+0x170>)
 8000b72:	f001 fdbf 	bl	80026f4 <HAL_GPIO_Init>

  /* GPIOC: Red and Green LEDs */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000b76:	2303      	movs	r3, #3
 8000b78:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b7a:	2301      	movs	r3, #1
 8000b7c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b7e:	2300      	movs	r3, #0
 8000b80:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b82:	2300      	movs	r3, #0
 8000b84:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b86:	f107 0314 	add.w	r3, r7, #20
 8000b8a:	4619      	mov	r1, r3
 8000b8c:	481c      	ldr	r0, [pc, #112]	@ (8000c00 <MX_GPIO_Init+0x174>)
 8000b8e:	f001 fdb1 	bl	80026f4 <HAL_GPIO_Init>

  /* GPIOA: Additional output pins */
  GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000b92:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8000b96:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b98:	2301      	movs	r3, #1
 8000b9a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b9c:	2300      	movs	r3, #0
 8000b9e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ba0:	2300      	movs	r3, #0
 8000ba2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ba4:	f107 0314 	add.w	r3, r7, #20
 8000ba8:	4619      	mov	r1, r3
 8000baa:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000bae:	f001 fda1 	bl	80026f4 <HAL_GPIO_Init>

  /* SPI1 MISO: Alternate function */
  GPIO_InitStruct.Pin = SPI1_MISO_Pin;
 8000bb2:	2380      	movs	r3, #128	@ 0x80
 8000bb4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bb6:	2302      	movs	r3, #2
 8000bb8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bba:	2300      	movs	r3, #0
 8000bbc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000bbe:	2303      	movs	r3, #3
 8000bc0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000bc2:	2305      	movs	r3, #5
 8000bc4:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(SPI1_MISO_GPIO_Port, &GPIO_InitStruct);
 8000bc6:	f107 0314 	add.w	r3, r7, #20
 8000bca:	4619      	mov	r1, r3
 8000bcc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000bd0:	f001 fd90 	bl	80026f4 <HAL_GPIO_Init>

  /* GPIOC: User Button */
  GPIO_InitStruct.Pin = B1_Pin;
 8000bd4:	2301      	movs	r3, #1
 8000bd6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000bd8:	2300      	movs	r3, #0
 8000bda:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bdc:	2300      	movs	r3, #0
 8000bde:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000be0:	f107 0314 	add.w	r3, r7, #20
 8000be4:	4619      	mov	r1, r3
 8000be6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000bea:	f001 fd83 	bl	80026f4 <HAL_GPIO_Init>
}
 8000bee:	bf00      	nop
 8000bf0:	3728      	adds	r7, #40	@ 0x28
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	bd80      	pop	{r7, pc}
 8000bf6:	bf00      	nop
 8000bf8:	40021000 	.word	0x40021000
 8000bfc:	48001000 	.word	0x48001000
 8000c00:	48000800 	.word	0x48000800

08000c04 <Error_Handler>:
/**
  * @brief  This function is executed in case of an error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c04:	b480      	push	{r7}
 8000c06:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c08:	b672      	cpsid	i
}
 8000c0a:	bf00      	nop
  /* Disable all interrupts to prevent further execution */
  __disable_irq();

  /* Infinite loop to halt the system for debugging */
  while (1)
 8000c0c:	bf00      	nop
 8000c0e:	e7fd      	b.n	8000c0c <Error_Handler+0x8>

08000c10 <initialise_ptu_i2c>:

#include "ptu_definitions.h"

ACCELEROMETER_CFG_STRUCT accelerometer_cfg = {ADXL345_POWER_CTL, 0x08, ADXL345_DATA_FORMAT, 0x08};

void initialise_ptu_i2c(I2C_HandleTypeDef *i2c) {
 8000c10:	b580      	push	{r7, lr}
 8000c12:	b088      	sub	sp, #32
 8000c14:	af04      	add	r7, sp, #16
 8000c16:	6078      	str	r0, [r7, #4]

	HAL_StatusTypeDef return_value = 0x00;
 8000c18:	2300      	movs	r3, #0
 8000c1a:	73fb      	strb	r3, [r7, #15]

	uint8_t reg_1 = 0b00001111;
 8000c1c:	230f      	movs	r3, #15
 8000c1e:	73bb      	strb	r3, [r7, #14]
	// Enable x, y, z and turn off power down:
	return_value = HAL_I2C_Mem_Write(i2c, gyro_wr, L3G4200D_CTRL_REG1, 1, &reg_1, 1, 10);
 8000c20:	230a      	movs	r3, #10
 8000c22:	9302      	str	r3, [sp, #8]
 8000c24:	2301      	movs	r3, #1
 8000c26:	9301      	str	r3, [sp, #4]
 8000c28:	f107 030e 	add.w	r3, r7, #14
 8000c2c:	9300      	str	r3, [sp, #0]
 8000c2e:	2301      	movs	r3, #1
 8000c30:	2220      	movs	r2, #32
 8000c32:	21d2      	movs	r1, #210	@ 0xd2
 8000c34:	6878      	ldr	r0, [r7, #4]
 8000c36:	f001 ff8b 	bl	8002b50 <HAL_I2C_Mem_Write>
 8000c3a:	4603      	mov	r3, r0
 8000c3c:	73fb      	strb	r3, [r7, #15]

	uint8_t reg_2 = 0b00000000;
 8000c3e:	2300      	movs	r3, #0
 8000c40:	737b      	strb	r3, [r7, #13]
	// If you'd like to adjust/use the HPF, you can edit the line below to configure CTRL_REG2:
	return_value = HAL_I2C_Mem_Write(i2c, gyro_wr, L3G4200D_CTRL_REG2, 1, &reg_2, 1, 10);
 8000c42:	230a      	movs	r3, #10
 8000c44:	9302      	str	r3, [sp, #8]
 8000c46:	2301      	movs	r3, #1
 8000c48:	9301      	str	r3, [sp, #4]
 8000c4a:	f107 030d 	add.w	r3, r7, #13
 8000c4e:	9300      	str	r3, [sp, #0]
 8000c50:	2301      	movs	r3, #1
 8000c52:	2221      	movs	r2, #33	@ 0x21
 8000c54:	21d2      	movs	r1, #210	@ 0xd2
 8000c56:	6878      	ldr	r0, [r7, #4]
 8000c58:	f001 ff7a 	bl	8002b50 <HAL_I2C_Mem_Write>
 8000c5c:	4603      	mov	r3, r0
 8000c5e:	73fb      	strb	r3, [r7, #15]

	// Configure CTRL_REG3 to generate data ready interrupt on INT2
	// No interrupts used on INT1, if you'd like to configure INT1
	// or INT2 otherwise, consult the datasheet:
	return_value = HAL_I2C_Mem_Write(i2c, gyro_wr, L3G4200D_CTRL_REG3, 1, &reg_2, 1, 10);
 8000c60:	230a      	movs	r3, #10
 8000c62:	9302      	str	r3, [sp, #8]
 8000c64:	2301      	movs	r3, #1
 8000c66:	9301      	str	r3, [sp, #4]
 8000c68:	f107 030d 	add.w	r3, r7, #13
 8000c6c:	9300      	str	r3, [sp, #0]
 8000c6e:	2301      	movs	r3, #1
 8000c70:	2222      	movs	r2, #34	@ 0x22
 8000c72:	21d2      	movs	r1, #210	@ 0xd2
 8000c74:	6878      	ldr	r0, [r7, #4]
 8000c76:	f001 ff6b 	bl	8002b50 <HAL_I2C_Mem_Write>
 8000c7a:	4603      	mov	r3, r0
 8000c7c:	73fb      	strb	r3, [r7, #15]
	// CTRL_REG5 controls high-pass filtering of outputs, use it
	// if you'd like:
	//HAL_I2C_Mem_Write(&hi2c1, gyro_wr, L3G4200D_CTRL_REG5, 1, &reg_2, 10);

	// reset lidar board
	uint8_t reset_value = 0x00;
 8000c7e:	2300      	movs	r3, #0
 8000c80:	733b      	strb	r3, [r7, #12]
	return_value = HAL_I2C_Mem_Write(i2c, LIDAR_WR, 0x00, 1, &reset_value, 1, 10);
 8000c82:	230a      	movs	r3, #10
 8000c84:	9302      	str	r3, [sp, #8]
 8000c86:	2301      	movs	r3, #1
 8000c88:	9301      	str	r3, [sp, #4]
 8000c8a:	f107 030c 	add.w	r3, r7, #12
 8000c8e:	9300      	str	r3, [sp, #0]
 8000c90:	2301      	movs	r3, #1
 8000c92:	2200      	movs	r2, #0
 8000c94:	21c4      	movs	r1, #196	@ 0xc4
 8000c96:	6878      	ldr	r0, [r7, #4]
 8000c98:	f001 ff5a 	bl	8002b50 <HAL_I2C_Mem_Write>
 8000c9c:	4603      	mov	r3, r0
 8000c9e:	73fb      	strb	r3, [r7, #15]
}
 8000ca0:	bf00      	nop
 8000ca2:	3710      	adds	r7, #16
 8000ca4:	46bd      	mov	sp, r7
 8000ca6:	bd80      	pop	{r7, pc}

08000ca8 <SerialInitialise>:
		0x77};


// InitialiseSerial - Initialise the serial port
// Input: baudRate is from an enumerated set
void SerialInitialise(uint32_t baudRate, SerialPort *serial_port, void (*completion_function)(uint32_t)) {
 8000ca8:	b480      	push	{r7}
 8000caa:	b087      	sub	sp, #28
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	60f8      	str	r0, [r7, #12]
 8000cb0:	60b9      	str	r1, [r7, #8]
 8000cb2:	607a      	str	r2, [r7, #4]

	serial_port->completion_function = completion_function;
 8000cb4:	68bb      	ldr	r3, [r7, #8]
 8000cb6:	687a      	ldr	r2, [r7, #4]
 8000cb8:	635a      	str	r2, [r3, #52]	@ 0x34

	// enable clock power, system configuration clock and GPIOC
	// common to all UARTs
	RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 8000cba:	4b34      	ldr	r3, [pc, #208]	@ (8000d8c <SerialInitialise+0xe4>)
 8000cbc:	69db      	ldr	r3, [r3, #28]
 8000cbe:	4a33      	ldr	r2, [pc, #204]	@ (8000d8c <SerialInitialise+0xe4>)
 8000cc0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000cc4:	61d3      	str	r3, [r2, #28]
	RCC->APB2ENR |= RCC_APB2ENR_SYSCFGEN;
 8000cc6:	4b31      	ldr	r3, [pc, #196]	@ (8000d8c <SerialInitialise+0xe4>)
 8000cc8:	699b      	ldr	r3, [r3, #24]
 8000cca:	4a30      	ldr	r2, [pc, #192]	@ (8000d8c <SerialInitialise+0xe4>)
 8000ccc:	f043 0301 	orr.w	r3, r3, #1
 8000cd0:	6193      	str	r3, [r2, #24]

	switch(serial_port->SerialPortGPIO) {
 8000cd2:	68bb      	ldr	r3, [r7, #8]
 8000cd4:	699b      	ldr	r3, [r3, #24]
 8000cd6:	2b02      	cmp	r3, #2
 8000cd8:	d106      	bne.n	8000ce8 <SerialInitialise+0x40>
	case SERIAL_GPIO_C:
		RCC->AHBENR |= RCC_AHBENR_GPIOCEN;
 8000cda:	4b2c      	ldr	r3, [pc, #176]	@ (8000d8c <SerialInitialise+0xe4>)
 8000cdc:	695b      	ldr	r3, [r3, #20]
 8000cde:	4a2b      	ldr	r2, [pc, #172]	@ (8000d8c <SerialInitialise+0xe4>)
 8000ce0:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8000ce4:	6153      	str	r3, [r2, #20]
		break;
 8000ce6:	e000      	b.n	8000cea <SerialInitialise+0x42>
	default:
		break;
 8000ce8:	bf00      	nop
	}

	// set pin mode
	*(serial_port->SerialPinModeRegister) = serial_port->SerialPinModeValue;
 8000cea:	68bb      	ldr	r3, [r7, #8]
 8000cec:	69db      	ldr	r3, [r3, #28]
 8000cee:	68ba      	ldr	r2, [r7, #8]
 8000cf0:	6a12      	ldr	r2, [r2, #32]
 8000cf2:	601a      	str	r2, [r3, #0]

	// enable high speed clock for GPIOC
	*(serial_port->SerialPinSpeedRegister) = serial_port->SerialPinSpeedValue;
 8000cf4:	68bb      	ldr	r3, [r7, #8]
 8000cf6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000cf8:	68ba      	ldr	r2, [r7, #8]
 8000cfa:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8000cfc:	601a      	str	r2, [r3, #0]

	// set alternate function to enable USART to an external pin
	*(serial_port->SerialPinAlternatePinRegister) = serial_port->SerialPinAlternatePinValue;
 8000cfe:	68bb      	ldr	r3, [r7, #8]
 8000d00:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000d02:	68ba      	ldr	r2, [r7, #8]
 8000d04:	f892 2030 	ldrb.w	r2, [r2, #48]	@ 0x30
 8000d08:	b2d2      	uxtb	r2, r2
 8000d0a:	701a      	strb	r2, [r3, #0]

	*(serial_port->TimerEnableRegister) |= serial_port->TimerEnableMask;
 8000d0c:	68bb      	ldr	r3, [r7, #8]
 8000d0e:	6959      	ldr	r1, [r3, #20]
 8000d10:	68bb      	ldr	r3, [r7, #8]
 8000d12:	691b      	ldr	r3, [r3, #16]
 8000d14:	681a      	ldr	r2, [r3, #0]
 8000d16:	68bb      	ldr	r3, [r7, #8]
 8000d18:	691b      	ldr	r3, [r3, #16]
 8000d1a:	430a      	orrs	r2, r1
 8000d1c:	601a      	str	r2, [r3, #0]

	uint16_t *baud_rate_config = ((uint16_t*)serial_port->BaudRate); // only 16 bits used!
 8000d1e:	68bb      	ldr	r3, [r7, #8]
 8000d20:	681b      	ldr	r3, [r3, #0]
 8000d22:	617b      	str	r3, [r7, #20]

	// Baud rate calculation from datasheet
	switch(baudRate){
 8000d24:	68fb      	ldr	r3, [r7, #12]
 8000d26:	2b04      	cmp	r3, #4
 8000d28:	d821      	bhi.n	8000d6e <SerialInitialise+0xc6>
 8000d2a:	a201      	add	r2, pc, #4	@ (adr r2, 8000d30 <SerialInitialise+0x88>)
 8000d2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d30:	08000d45 	.word	0x08000d45
 8000d34:	08000d4d 	.word	0x08000d4d
 8000d38:	08000d55 	.word	0x08000d55
 8000d3c:	08000d5d 	.word	0x08000d5d
 8000d40:	08000d65 	.word	0x08000d65
	case BAUD_9600:
		// NEED TO FIX THIS !
		*baud_rate_config = 0x46;  // 115200 at 8MHz
 8000d44:	697b      	ldr	r3, [r7, #20]
 8000d46:	2246      	movs	r2, #70	@ 0x46
 8000d48:	801a      	strh	r2, [r3, #0]
		break;
 8000d4a:	e010      	b.n	8000d6e <SerialInitialise+0xc6>
	case BAUD_19200:
		// NEED TO FIX THIS !
		*baud_rate_config = 0x46;  // 115200 at 8MHz
 8000d4c:	697b      	ldr	r3, [r7, #20]
 8000d4e:	2246      	movs	r2, #70	@ 0x46
 8000d50:	801a      	strh	r2, [r3, #0]
		break;
 8000d52:	e00c      	b.n	8000d6e <SerialInitialise+0xc6>
	case BAUD_38400:
		// NEED TO FIX THIS !
		*baud_rate_config = 0x46;  // 115200 at 8MHz
 8000d54:	697b      	ldr	r3, [r7, #20]
 8000d56:	2246      	movs	r2, #70	@ 0x46
 8000d58:	801a      	strh	r2, [r3, #0]
		break;
 8000d5a:	e008      	b.n	8000d6e <SerialInitialise+0xc6>
	case BAUD_57600:
		// NEED TO FIX THIS !
		*baud_rate_config = 0x46;  // 115200 at 8MHz
 8000d5c:	697b      	ldr	r3, [r7, #20]
 8000d5e:	2246      	movs	r2, #70	@ 0x46
 8000d60:	801a      	strh	r2, [r3, #0]
		break;
 8000d62:	e004      	b.n	8000d6e <SerialInitialise+0xc6>
	case BAUD_115200:
		*baud_rate_config = 0x46 * 0x06;  // 115200 at 8MHz
 8000d64:	697b      	ldr	r3, [r7, #20]
 8000d66:	f44f 72d2 	mov.w	r2, #420	@ 0x1a4
 8000d6a:	801a      	strh	r2, [r3, #0]
		break;
 8000d6c:	bf00      	nop
	}


	// enable serial port for tx and rx
	*(serial_port->ControlRegister1) |= USART_CR1_TE | USART_CR1_RE | USART_CR1_UE;
 8000d6e:	68bb      	ldr	r3, [r7, #8]
 8000d70:	685b      	ldr	r3, [r3, #4]
 8000d72:	681a      	ldr	r2, [r3, #0]
 8000d74:	68bb      	ldr	r3, [r7, #8]
 8000d76:	685b      	ldr	r3, [r3, #4]
 8000d78:	f042 020d 	orr.w	r2, r2, #13
 8000d7c:	601a      	str	r2, [r3, #0]
}
 8000d7e:	bf00      	nop
 8000d80:	371c      	adds	r7, #28
 8000d82:	46bd      	mov	sp, r7
 8000d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d88:	4770      	bx	lr
 8000d8a:	bf00      	nop
 8000d8c:	40021000 	.word	0x40021000

08000d90 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d90:	b580      	push	{r7, lr}
 8000d92:	b082      	sub	sp, #8
 8000d94:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d96:	4b0f      	ldr	r3, [pc, #60]	@ (8000dd4 <HAL_MspInit+0x44>)
 8000d98:	699b      	ldr	r3, [r3, #24]
 8000d9a:	4a0e      	ldr	r2, [pc, #56]	@ (8000dd4 <HAL_MspInit+0x44>)
 8000d9c:	f043 0301 	orr.w	r3, r3, #1
 8000da0:	6193      	str	r3, [r2, #24]
 8000da2:	4b0c      	ldr	r3, [pc, #48]	@ (8000dd4 <HAL_MspInit+0x44>)
 8000da4:	699b      	ldr	r3, [r3, #24]
 8000da6:	f003 0301 	and.w	r3, r3, #1
 8000daa:	607b      	str	r3, [r7, #4]
 8000dac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000dae:	4b09      	ldr	r3, [pc, #36]	@ (8000dd4 <HAL_MspInit+0x44>)
 8000db0:	69db      	ldr	r3, [r3, #28]
 8000db2:	4a08      	ldr	r2, [pc, #32]	@ (8000dd4 <HAL_MspInit+0x44>)
 8000db4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000db8:	61d3      	str	r3, [r2, #28]
 8000dba:	4b06      	ldr	r3, [pc, #24]	@ (8000dd4 <HAL_MspInit+0x44>)
 8000dbc:	69db      	ldr	r3, [r3, #28]
 8000dbe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000dc2:	603b      	str	r3, [r7, #0]
 8000dc4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000dc6:	2007      	movs	r0, #7
 8000dc8:	f001 fc52 	bl	8002670 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000dcc:	bf00      	nop
 8000dce:	3708      	adds	r7, #8
 8000dd0:	46bd      	mov	sp, r7
 8000dd2:	bd80      	pop	{r7, pc}
 8000dd4:	40021000 	.word	0x40021000

08000dd8 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	b08c      	sub	sp, #48	@ 0x30
 8000ddc:	af00      	add	r7, sp, #0
 8000dde:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000de0:	f107 031c 	add.w	r3, r7, #28
 8000de4:	2200      	movs	r2, #0
 8000de6:	601a      	str	r2, [r3, #0]
 8000de8:	605a      	str	r2, [r3, #4]
 8000dea:	609a      	str	r2, [r3, #8]
 8000dec:	60da      	str	r2, [r3, #12]
 8000dee:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8000df8:	d146      	bne.n	8000e88 <HAL_ADC_MspInit+0xb0>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 8000dfa:	4b3f      	ldr	r3, [pc, #252]	@ (8000ef8 <HAL_ADC_MspInit+0x120>)
 8000dfc:	681b      	ldr	r3, [r3, #0]
 8000dfe:	3301      	adds	r3, #1
 8000e00:	4a3d      	ldr	r2, [pc, #244]	@ (8000ef8 <HAL_ADC_MspInit+0x120>)
 8000e02:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8000e04:	4b3c      	ldr	r3, [pc, #240]	@ (8000ef8 <HAL_ADC_MspInit+0x120>)
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	2b01      	cmp	r3, #1
 8000e0a:	d10b      	bne.n	8000e24 <HAL_ADC_MspInit+0x4c>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8000e0c:	4b3b      	ldr	r3, [pc, #236]	@ (8000efc <HAL_ADC_MspInit+0x124>)
 8000e0e:	695b      	ldr	r3, [r3, #20]
 8000e10:	4a3a      	ldr	r2, [pc, #232]	@ (8000efc <HAL_ADC_MspInit+0x124>)
 8000e12:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000e16:	6153      	str	r3, [r2, #20]
 8000e18:	4b38      	ldr	r3, [pc, #224]	@ (8000efc <HAL_ADC_MspInit+0x124>)
 8000e1a:	695b      	ldr	r3, [r3, #20]
 8000e1c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000e20:	61bb      	str	r3, [r7, #24]
 8000e22:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e24:	4b35      	ldr	r3, [pc, #212]	@ (8000efc <HAL_ADC_MspInit+0x124>)
 8000e26:	695b      	ldr	r3, [r3, #20]
 8000e28:	4a34      	ldr	r2, [pc, #208]	@ (8000efc <HAL_ADC_MspInit+0x124>)
 8000e2a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8000e2e:	6153      	str	r3, [r2, #20]
 8000e30:	4b32      	ldr	r3, [pc, #200]	@ (8000efc <HAL_ADC_MspInit+0x124>)
 8000e32:	695b      	ldr	r3, [r3, #20]
 8000e34:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8000e38:	617b      	str	r3, [r7, #20]
 8000e3a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e3c:	4b2f      	ldr	r3, [pc, #188]	@ (8000efc <HAL_ADC_MspInit+0x124>)
 8000e3e:	695b      	ldr	r3, [r3, #20]
 8000e40:	4a2e      	ldr	r2, [pc, #184]	@ (8000efc <HAL_ADC_MspInit+0x124>)
 8000e42:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000e46:	6153      	str	r3, [r2, #20]
 8000e48:	4b2c      	ldr	r3, [pc, #176]	@ (8000efc <HAL_ADC_MspInit+0x124>)
 8000e4a:	695b      	ldr	r3, [r3, #20]
 8000e4c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000e50:	613b      	str	r3, [r7, #16]
 8000e52:	693b      	ldr	r3, [r7, #16]
    /**ADC1 GPIO Configuration
    PC1     ------> ADC1_IN7
    PA2     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000e54:	2302      	movs	r3, #2
 8000e56:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000e58:	2303      	movs	r3, #3
 8000e5a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e5c:	2300      	movs	r3, #0
 8000e5e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e60:	f107 031c 	add.w	r3, r7, #28
 8000e64:	4619      	mov	r1, r3
 8000e66:	4826      	ldr	r0, [pc, #152]	@ (8000f00 <HAL_ADC_MspInit+0x128>)
 8000e68:	f001 fc44 	bl	80026f4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000e6c:	2304      	movs	r3, #4
 8000e6e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000e70:	2303      	movs	r3, #3
 8000e72:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e74:	2300      	movs	r3, #0
 8000e76:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e78:	f107 031c 	add.w	r3, r7, #28
 8000e7c:	4619      	mov	r1, r3
 8000e7e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000e82:	f001 fc37 	bl	80026f4 <HAL_GPIO_Init>
    /* USER CODE BEGIN ADC2_MspInit 1 */

    /* USER CODE END ADC2_MspInit 1 */
  }

}
 8000e86:	e032      	b.n	8000eee <HAL_ADC_MspInit+0x116>
  else if(hadc->Instance==ADC2)
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	4a1d      	ldr	r2, [pc, #116]	@ (8000f04 <HAL_ADC_MspInit+0x12c>)
 8000e8e:	4293      	cmp	r3, r2
 8000e90:	d12d      	bne.n	8000eee <HAL_ADC_MspInit+0x116>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8000e92:	4b19      	ldr	r3, [pc, #100]	@ (8000ef8 <HAL_ADC_MspInit+0x120>)
 8000e94:	681b      	ldr	r3, [r3, #0]
 8000e96:	3301      	adds	r3, #1
 8000e98:	4a17      	ldr	r2, [pc, #92]	@ (8000ef8 <HAL_ADC_MspInit+0x120>)
 8000e9a:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8000e9c:	4b16      	ldr	r3, [pc, #88]	@ (8000ef8 <HAL_ADC_MspInit+0x120>)
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	2b01      	cmp	r3, #1
 8000ea2:	d10b      	bne.n	8000ebc <HAL_ADC_MspInit+0xe4>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8000ea4:	4b15      	ldr	r3, [pc, #84]	@ (8000efc <HAL_ADC_MspInit+0x124>)
 8000ea6:	695b      	ldr	r3, [r3, #20]
 8000ea8:	4a14      	ldr	r2, [pc, #80]	@ (8000efc <HAL_ADC_MspInit+0x124>)
 8000eaa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000eae:	6153      	str	r3, [r2, #20]
 8000eb0:	4b12      	ldr	r3, [pc, #72]	@ (8000efc <HAL_ADC_MspInit+0x124>)
 8000eb2:	695b      	ldr	r3, [r3, #20]
 8000eb4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000eb8:	60fb      	str	r3, [r7, #12]
 8000eba:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ebc:	4b0f      	ldr	r3, [pc, #60]	@ (8000efc <HAL_ADC_MspInit+0x124>)
 8000ebe:	695b      	ldr	r3, [r3, #20]
 8000ec0:	4a0e      	ldr	r2, [pc, #56]	@ (8000efc <HAL_ADC_MspInit+0x124>)
 8000ec2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000ec6:	6153      	str	r3, [r2, #20]
 8000ec8:	4b0c      	ldr	r3, [pc, #48]	@ (8000efc <HAL_ADC_MspInit+0x124>)
 8000eca:	695b      	ldr	r3, [r3, #20]
 8000ecc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000ed0:	60bb      	str	r3, [r7, #8]
 8000ed2:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000ed4:	2310      	movs	r3, #16
 8000ed6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000ed8:	2303      	movs	r3, #3
 8000eda:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000edc:	2300      	movs	r3, #0
 8000ede:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ee0:	f107 031c 	add.w	r3, r7, #28
 8000ee4:	4619      	mov	r1, r3
 8000ee6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000eea:	f001 fc03 	bl	80026f4 <HAL_GPIO_Init>
}
 8000eee:	bf00      	nop
 8000ef0:	3730      	adds	r7, #48	@ 0x30
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	bd80      	pop	{r7, pc}
 8000ef6:	bf00      	nop
 8000ef8:	200004f4 	.word	0x200004f4
 8000efc:	40021000 	.word	0x40021000
 8000f00:	48000800 	.word	0x48000800
 8000f04:	50000100 	.word	0x50000100

08000f08 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	b08a      	sub	sp, #40	@ 0x28
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f10:	f107 0314 	add.w	r3, r7, #20
 8000f14:	2200      	movs	r2, #0
 8000f16:	601a      	str	r2, [r3, #0]
 8000f18:	605a      	str	r2, [r3, #4]
 8000f1a:	609a      	str	r2, [r3, #8]
 8000f1c:	60da      	str	r2, [r3, #12]
 8000f1e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	4a17      	ldr	r2, [pc, #92]	@ (8000f84 <HAL_I2C_MspInit+0x7c>)
 8000f26:	4293      	cmp	r3, r2
 8000f28:	d127      	bne.n	8000f7a <HAL_I2C_MspInit+0x72>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f2a:	4b17      	ldr	r3, [pc, #92]	@ (8000f88 <HAL_I2C_MspInit+0x80>)
 8000f2c:	695b      	ldr	r3, [r3, #20]
 8000f2e:	4a16      	ldr	r2, [pc, #88]	@ (8000f88 <HAL_I2C_MspInit+0x80>)
 8000f30:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000f34:	6153      	str	r3, [r2, #20]
 8000f36:	4b14      	ldr	r3, [pc, #80]	@ (8000f88 <HAL_I2C_MspInit+0x80>)
 8000f38:	695b      	ldr	r3, [r3, #20]
 8000f3a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000f3e:	613b      	str	r3, [r7, #16]
 8000f40:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = I2C1_SCL_Pin|I2C1_SDA_Pin;
 8000f42:	23c0      	movs	r3, #192	@ 0xc0
 8000f44:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000f46:	2312      	movs	r3, #18
 8000f48:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000f4a:	2301      	movs	r3, #1
 8000f4c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000f4e:	2303      	movs	r3, #3
 8000f50:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000f52:	2304      	movs	r3, #4
 8000f54:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f56:	f107 0314 	add.w	r3, r7, #20
 8000f5a:	4619      	mov	r1, r3
 8000f5c:	480b      	ldr	r0, [pc, #44]	@ (8000f8c <HAL_I2C_MspInit+0x84>)
 8000f5e:	f001 fbc9 	bl	80026f4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000f62:	4b09      	ldr	r3, [pc, #36]	@ (8000f88 <HAL_I2C_MspInit+0x80>)
 8000f64:	69db      	ldr	r3, [r3, #28]
 8000f66:	4a08      	ldr	r2, [pc, #32]	@ (8000f88 <HAL_I2C_MspInit+0x80>)
 8000f68:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000f6c:	61d3      	str	r3, [r2, #28]
 8000f6e:	4b06      	ldr	r3, [pc, #24]	@ (8000f88 <HAL_I2C_MspInit+0x80>)
 8000f70:	69db      	ldr	r3, [r3, #28]
 8000f72:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000f76:	60fb      	str	r3, [r7, #12]
 8000f78:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 8000f7a:	bf00      	nop
 8000f7c:	3728      	adds	r7, #40	@ 0x28
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	bd80      	pop	{r7, pc}
 8000f82:	bf00      	nop
 8000f84:	40005400 	.word	0x40005400
 8000f88:	40021000 	.word	0x40021000
 8000f8c:	48000400 	.word	0x48000400

08000f90 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b08a      	sub	sp, #40	@ 0x28
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f98:	f107 0314 	add.w	r3, r7, #20
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	601a      	str	r2, [r3, #0]
 8000fa0:	605a      	str	r2, [r3, #4]
 8000fa2:	609a      	str	r2, [r3, #8]
 8000fa4:	60da      	str	r2, [r3, #12]
 8000fa6:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	4a1c      	ldr	r2, [pc, #112]	@ (8001020 <HAL_TIM_Base_MspInit+0x90>)
 8000fae:	4293      	cmp	r3, r2
 8000fb0:	d131      	bne.n	8001016 <HAL_TIM_Base_MspInit+0x86>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000fb2:	4b1c      	ldr	r3, [pc, #112]	@ (8001024 <HAL_TIM_Base_MspInit+0x94>)
 8000fb4:	699b      	ldr	r3, [r3, #24]
 8000fb6:	4a1b      	ldr	r2, [pc, #108]	@ (8001024 <HAL_TIM_Base_MspInit+0x94>)
 8000fb8:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000fbc:	6193      	str	r3, [r2, #24]
 8000fbe:	4b19      	ldr	r3, [pc, #100]	@ (8001024 <HAL_TIM_Base_MspInit+0x94>)
 8000fc0:	699b      	ldr	r3, [r3, #24]
 8000fc2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8000fc6:	613b      	str	r3, [r7, #16]
 8000fc8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fca:	4b16      	ldr	r3, [pc, #88]	@ (8001024 <HAL_TIM_Base_MspInit+0x94>)
 8000fcc:	695b      	ldr	r3, [r3, #20]
 8000fce:	4a15      	ldr	r2, [pc, #84]	@ (8001024 <HAL_TIM_Base_MspInit+0x94>)
 8000fd0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000fd4:	6153      	str	r3, [r2, #20]
 8000fd6:	4b13      	ldr	r3, [pc, #76]	@ (8001024 <HAL_TIM_Base_MspInit+0x94>)
 8000fd8:	695b      	ldr	r3, [r3, #20]
 8000fda:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000fde:	60fb      	str	r3, [r7, #12]
 8000fe0:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000fe2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000fe6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fe8:	2302      	movs	r3, #2
 8000fea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fec:	2300      	movs	r3, #0
 8000fee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ff0:	2300      	movs	r3, #0
 8000ff2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8000ff4:	2306      	movs	r3, #6
 8000ff6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ff8:	f107 0314 	add.w	r3, r7, #20
 8000ffc:	4619      	mov	r1, r3
 8000ffe:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001002:	f001 fb77 	bl	80026f4 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8001006:	2200      	movs	r2, #0
 8001008:	2100      	movs	r1, #0
 800100a:	201b      	movs	r0, #27
 800100c:	f001 fb3b 	bl	8002686 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8001010:	201b      	movs	r0, #27
 8001012:	f001 fb54 	bl	80026be <HAL_NVIC_EnableIRQ>

    /* USER CODE END TIM1_MspInit 1 */

  }

}
 8001016:	bf00      	nop
 8001018:	3728      	adds	r7, #40	@ 0x28
 800101a:	46bd      	mov	sp, r7
 800101c:	bd80      	pop	{r7, pc}
 800101e:	bf00      	nop
 8001020:	40012c00 	.word	0x40012c00
 8001024:	40021000 	.word	0x40021000

08001028 <HAL_TIM_PWM_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_pwm: TIM_PWM handle pointer
  * @retval None
  */
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	b084      	sub	sp, #16
 800102c:	af00      	add	r7, sp, #0
 800102e:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001038:	d113      	bne.n	8001062 <HAL_TIM_PWM_MspInit+0x3a>
  {
    /* USER CODE BEGIN TIM2_MspInit 0 */

    /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800103a:	4b0c      	ldr	r3, [pc, #48]	@ (800106c <HAL_TIM_PWM_MspInit+0x44>)
 800103c:	69db      	ldr	r3, [r3, #28]
 800103e:	4a0b      	ldr	r2, [pc, #44]	@ (800106c <HAL_TIM_PWM_MspInit+0x44>)
 8001040:	f043 0301 	orr.w	r3, r3, #1
 8001044:	61d3      	str	r3, [r2, #28]
 8001046:	4b09      	ldr	r3, [pc, #36]	@ (800106c <HAL_TIM_PWM_MspInit+0x44>)
 8001048:	69db      	ldr	r3, [r3, #28]
 800104a:	f003 0301 	and.w	r3, r3, #1
 800104e:	60fb      	str	r3, [r7, #12]
 8001050:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001052:	2200      	movs	r2, #0
 8001054:	2100      	movs	r1, #0
 8001056:	201c      	movs	r0, #28
 8001058:	f001 fb15 	bl	8002686 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800105c:	201c      	movs	r0, #28
 800105e:	f001 fb2e 	bl	80026be <HAL_NVIC_EnableIRQ>

    /* USER CODE END TIM2_MspInit 1 */

  }

}
 8001062:	bf00      	nop
 8001064:	3710      	adds	r7, #16
 8001066:	46bd      	mov	sp, r7
 8001068:	bd80      	pop	{r7, pc}
 800106a:	bf00      	nop
 800106c:	40021000 	.word	0x40021000

08001070 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	b088      	sub	sp, #32
 8001074:	af00      	add	r7, sp, #0
 8001076:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001078:	f107 030c 	add.w	r3, r7, #12
 800107c:	2200      	movs	r2, #0
 800107e:	601a      	str	r2, [r3, #0]
 8001080:	605a      	str	r2, [r3, #4]
 8001082:	609a      	str	r2, [r3, #8]
 8001084:	60da      	str	r2, [r3, #12]
 8001086:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001090:	d11d      	bne.n	80010ce <HAL_TIM_MspPostInit+0x5e>
  {
    /* USER CODE BEGIN TIM2_MspPostInit 0 */

    /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001092:	4b11      	ldr	r3, [pc, #68]	@ (80010d8 <HAL_TIM_MspPostInit+0x68>)
 8001094:	695b      	ldr	r3, [r3, #20]
 8001096:	4a10      	ldr	r2, [pc, #64]	@ (80010d8 <HAL_TIM_MspPostInit+0x68>)
 8001098:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800109c:	6153      	str	r3, [r2, #20]
 800109e:	4b0e      	ldr	r3, [pc, #56]	@ (80010d8 <HAL_TIM_MspPostInit+0x68>)
 80010a0:	695b      	ldr	r3, [r3, #20]
 80010a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80010a6:	60bb      	str	r3, [r7, #8]
 80010a8:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA1     ------> TIM2_CH2
    PA15     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_15;
 80010aa:	f248 0302 	movw	r3, #32770	@ 0x8002
 80010ae:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010b0:	2302      	movs	r3, #2
 80010b2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010b4:	2300      	movs	r3, #0
 80010b6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010b8:	2300      	movs	r3, #0
 80010ba:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80010bc:	2301      	movs	r3, #1
 80010be:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010c0:	f107 030c 	add.w	r3, r7, #12
 80010c4:	4619      	mov	r1, r3
 80010c6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80010ca:	f001 fb13 	bl	80026f4 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM2_MspPostInit 1 */

    /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80010ce:	bf00      	nop
 80010d0:	3720      	adds	r7, #32
 80010d2:	46bd      	mov	sp, r7
 80010d4:	bd80      	pop	{r7, pc}
 80010d6:	bf00      	nop
 80010d8:	40021000 	.word	0x40021000

080010dc <HAL_PCD_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hpcd: PCD handle pointer
  * @retval None
  */
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	b08a      	sub	sp, #40	@ 0x28
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010e4:	f107 0314 	add.w	r3, r7, #20
 80010e8:	2200      	movs	r2, #0
 80010ea:	601a      	str	r2, [r3, #0]
 80010ec:	605a      	str	r2, [r3, #4]
 80010ee:	609a      	str	r2, [r3, #8]
 80010f0:	60da      	str	r2, [r3, #12]
 80010f2:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB)
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	4a18      	ldr	r2, [pc, #96]	@ (800115c <HAL_PCD_MspInit+0x80>)
 80010fa:	4293      	cmp	r3, r2
 80010fc:	d129      	bne.n	8001152 <HAL_PCD_MspInit+0x76>
  {
    /* USER CODE BEGIN USB_MspInit 0 */

    /* USER CODE END USB_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010fe:	4b18      	ldr	r3, [pc, #96]	@ (8001160 <HAL_PCD_MspInit+0x84>)
 8001100:	695b      	ldr	r3, [r3, #20]
 8001102:	4a17      	ldr	r2, [pc, #92]	@ (8001160 <HAL_PCD_MspInit+0x84>)
 8001104:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001108:	6153      	str	r3, [r2, #20]
 800110a:	4b15      	ldr	r3, [pc, #84]	@ (8001160 <HAL_PCD_MspInit+0x84>)
 800110c:	695b      	ldr	r3, [r3, #20]
 800110e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001112:	613b      	str	r3, [r7, #16]
 8001114:	693b      	ldr	r3, [r7, #16]
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = DM_Pin|DP_Pin;
 8001116:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800111a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800111c:	2302      	movs	r3, #2
 800111e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001120:	2300      	movs	r3, #0
 8001122:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001124:	2303      	movs	r3, #3
 8001126:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF14_USB;
 8001128:	230e      	movs	r3, #14
 800112a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800112c:	f107 0314 	add.w	r3, r7, #20
 8001130:	4619      	mov	r1, r3
 8001132:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001136:	f001 fadd 	bl	80026f4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800113a:	4b09      	ldr	r3, [pc, #36]	@ (8001160 <HAL_PCD_MspInit+0x84>)
 800113c:	69db      	ldr	r3, [r3, #28]
 800113e:	4a08      	ldr	r2, [pc, #32]	@ (8001160 <HAL_PCD_MspInit+0x84>)
 8001140:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8001144:	61d3      	str	r3, [r2, #28]
 8001146:	4b06      	ldr	r3, [pc, #24]	@ (8001160 <HAL_PCD_MspInit+0x84>)
 8001148:	69db      	ldr	r3, [r3, #28]
 800114a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800114e:	60fb      	str	r3, [r7, #12]
 8001150:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END USB_MspInit 1 */

  }

}
 8001152:	bf00      	nop
 8001154:	3728      	adds	r7, #40	@ 0x28
 8001156:	46bd      	mov	sp, r7
 8001158:	bd80      	pop	{r7, pc}
 800115a:	bf00      	nop
 800115c:	40005c00 	.word	0x40005c00
 8001160:	40021000 	.word	0x40021000

08001164 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001164:	b480      	push	{r7}
 8001166:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001168:	bf00      	nop
 800116a:	e7fd      	b.n	8001168 <NMI_Handler+0x4>

0800116c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800116c:	b480      	push	{r7}
 800116e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001170:	bf00      	nop
 8001172:	e7fd      	b.n	8001170 <HardFault_Handler+0x4>

08001174 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001174:	b480      	push	{r7}
 8001176:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001178:	bf00      	nop
 800117a:	e7fd      	b.n	8001178 <MemManage_Handler+0x4>

0800117c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800117c:	b480      	push	{r7}
 800117e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001180:	bf00      	nop
 8001182:	e7fd      	b.n	8001180 <BusFault_Handler+0x4>

08001184 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001184:	b480      	push	{r7}
 8001186:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001188:	bf00      	nop
 800118a:	e7fd      	b.n	8001188 <UsageFault_Handler+0x4>

0800118c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800118c:	b480      	push	{r7}
 800118e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001190:	bf00      	nop
 8001192:	46bd      	mov	sp, r7
 8001194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001198:	4770      	bx	lr

0800119a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800119a:	b480      	push	{r7}
 800119c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800119e:	bf00      	nop
 80011a0:	46bd      	mov	sp, r7
 80011a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a6:	4770      	bx	lr

080011a8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80011a8:	b480      	push	{r7}
 80011aa:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80011ac:	bf00      	nop
 80011ae:	46bd      	mov	sp, r7
 80011b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b4:	4770      	bx	lr

080011b6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80011b6:	b580      	push	{r7, lr}
 80011b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80011ba:	f000 f899 	bl	80012f0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80011be:	bf00      	nop
 80011c0:	bd80      	pop	{r7, pc}
	...

080011c4 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80011c8:	4802      	ldr	r0, [pc, #8]	@ (80011d4 <TIM1_CC_IRQHandler+0x10>)
 80011ca:	f004 f871 	bl	80052b0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 80011ce:	bf00      	nop
 80011d0:	bd80      	pop	{r7, pc}
 80011d2:	bf00      	nop
 80011d4:	20000180 	.word	0x20000180

080011d8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80011dc:	4802      	ldr	r0, [pc, #8]	@ (80011e8 <TIM2_IRQHandler+0x10>)
 80011de:	f004 f867 	bl	80052b0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80011e2:	bf00      	nop
 80011e4:	bd80      	pop	{r7, pc}
 80011e6:	bf00      	nop
 80011e8:	200001cc 	.word	0x200001cc

080011ec <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80011ec:	b480      	push	{r7}
 80011ee:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80011f0:	4b06      	ldr	r3, [pc, #24]	@ (800120c <SystemInit+0x20>)
 80011f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80011f6:	4a05      	ldr	r2, [pc, #20]	@ (800120c <SystemInit+0x20>)
 80011f8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80011fc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001200:	bf00      	nop
 8001202:	46bd      	mov	sp, r7
 8001204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001208:	4770      	bx	lr
 800120a:	bf00      	nop
 800120c:	e000ed00 	.word	0xe000ed00

08001210 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001210:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001248 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8001214:	f7ff ffea 	bl	80011ec <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001218:	480c      	ldr	r0, [pc, #48]	@ (800124c <LoopForever+0x6>)
  ldr r1, =_edata
 800121a:	490d      	ldr	r1, [pc, #52]	@ (8001250 <LoopForever+0xa>)
  ldr r2, =_sidata
 800121c:	4a0d      	ldr	r2, [pc, #52]	@ (8001254 <LoopForever+0xe>)
  movs r3, #0
 800121e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001220:	e002      	b.n	8001228 <LoopCopyDataInit>

08001222 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001222:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001224:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001226:	3304      	adds	r3, #4

08001228 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001228:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800122a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800122c:	d3f9      	bcc.n	8001222 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800122e:	4a0a      	ldr	r2, [pc, #40]	@ (8001258 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001230:	4c0a      	ldr	r4, [pc, #40]	@ (800125c <LoopForever+0x16>)
  movs r3, #0
 8001232:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001234:	e001      	b.n	800123a <LoopFillZerobss>

08001236 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001236:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001238:	3204      	adds	r2, #4

0800123a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800123a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800123c:	d3fb      	bcc.n	8001236 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800123e:	f005 fa4f 	bl	80066e0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001242:	f7ff f8c9 	bl	80003d8 <main>

08001246 <LoopForever>:

LoopForever:
    b LoopForever
 8001246:	e7fe      	b.n	8001246 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001248:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 800124c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001250:	2000004c 	.word	0x2000004c
  ldr r2, =_sidata
 8001254:	080067f0 	.word	0x080067f0
  ldr r2, =_sbss
 8001258:	2000004c 	.word	0x2000004c
  ldr r4, =_ebss
 800125c:	200004fc 	.word	0x200004fc

08001260 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001260:	e7fe      	b.n	8001260 <ADC1_2_IRQHandler>
	...

08001264 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001264:	b580      	push	{r7, lr}
 8001266:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001268:	4b08      	ldr	r3, [pc, #32]	@ (800128c <HAL_Init+0x28>)
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	4a07      	ldr	r2, [pc, #28]	@ (800128c <HAL_Init+0x28>)
 800126e:	f043 0310 	orr.w	r3, r3, #16
 8001272:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001274:	2003      	movs	r0, #3
 8001276:	f001 f9fb 	bl	8002670 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800127a:	2000      	movs	r0, #0
 800127c:	f000 f808 	bl	8001290 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001280:	f7ff fd86 	bl	8000d90 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001284:	2300      	movs	r3, #0
}
 8001286:	4618      	mov	r0, r3
 8001288:	bd80      	pop	{r7, pc}
 800128a:	bf00      	nop
 800128c:	40022000 	.word	0x40022000

08001290 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001290:	b580      	push	{r7, lr}
 8001292:	b082      	sub	sp, #8
 8001294:	af00      	add	r7, sp, #0
 8001296:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001298:	4b12      	ldr	r3, [pc, #72]	@ (80012e4 <HAL_InitTick+0x54>)
 800129a:	681a      	ldr	r2, [r3, #0]
 800129c:	4b12      	ldr	r3, [pc, #72]	@ (80012e8 <HAL_InitTick+0x58>)
 800129e:	781b      	ldrb	r3, [r3, #0]
 80012a0:	4619      	mov	r1, r3
 80012a2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80012a6:	fbb3 f3f1 	udiv	r3, r3, r1
 80012aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80012ae:	4618      	mov	r0, r3
 80012b0:	f001 fa13 	bl	80026da <HAL_SYSTICK_Config>
 80012b4:	4603      	mov	r3, r0
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d001      	beq.n	80012be <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80012ba:	2301      	movs	r3, #1
 80012bc:	e00e      	b.n	80012dc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	2b0f      	cmp	r3, #15
 80012c2:	d80a      	bhi.n	80012da <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80012c4:	2200      	movs	r2, #0
 80012c6:	6879      	ldr	r1, [r7, #4]
 80012c8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80012cc:	f001 f9db 	bl	8002686 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80012d0:	4a06      	ldr	r2, [pc, #24]	@ (80012ec <HAL_InitTick+0x5c>)
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 80012d6:	2300      	movs	r3, #0
 80012d8:	e000      	b.n	80012dc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80012da:	2301      	movs	r3, #1
}
 80012dc:	4618      	mov	r0, r3
 80012de:	3708      	adds	r7, #8
 80012e0:	46bd      	mov	sp, r7
 80012e2:	bd80      	pop	{r7, pc}
 80012e4:	20000040 	.word	0x20000040
 80012e8:	20000048 	.word	0x20000048
 80012ec:	20000044 	.word	0x20000044

080012f0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80012f0:	b480      	push	{r7}
 80012f2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80012f4:	4b06      	ldr	r3, [pc, #24]	@ (8001310 <HAL_IncTick+0x20>)
 80012f6:	781b      	ldrb	r3, [r3, #0]
 80012f8:	461a      	mov	r2, r3
 80012fa:	4b06      	ldr	r3, [pc, #24]	@ (8001314 <HAL_IncTick+0x24>)
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	4413      	add	r3, r2
 8001300:	4a04      	ldr	r2, [pc, #16]	@ (8001314 <HAL_IncTick+0x24>)
 8001302:	6013      	str	r3, [r2, #0]
}
 8001304:	bf00      	nop
 8001306:	46bd      	mov	sp, r7
 8001308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800130c:	4770      	bx	lr
 800130e:	bf00      	nop
 8001310:	20000048 	.word	0x20000048
 8001314:	200004f8 	.word	0x200004f8

08001318 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001318:	b480      	push	{r7}
 800131a:	af00      	add	r7, sp, #0
  return uwTick;  
 800131c:	4b03      	ldr	r3, [pc, #12]	@ (800132c <HAL_GetTick+0x14>)
 800131e:	681b      	ldr	r3, [r3, #0]
}
 8001320:	4618      	mov	r0, r3
 8001322:	46bd      	mov	sp, r7
 8001324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001328:	4770      	bx	lr
 800132a:	bf00      	nop
 800132c:	200004f8 	.word	0x200004f8

08001330 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001330:	b580      	push	{r7, lr}
 8001332:	b084      	sub	sp, #16
 8001334:	af00      	add	r7, sp, #0
 8001336:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001338:	f7ff ffee 	bl	8001318 <HAL_GetTick>
 800133c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001342:	68fb      	ldr	r3, [r7, #12]
 8001344:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001348:	d005      	beq.n	8001356 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800134a:	4b0a      	ldr	r3, [pc, #40]	@ (8001374 <HAL_Delay+0x44>)
 800134c:	781b      	ldrb	r3, [r3, #0]
 800134e:	461a      	mov	r2, r3
 8001350:	68fb      	ldr	r3, [r7, #12]
 8001352:	4413      	add	r3, r2
 8001354:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8001356:	bf00      	nop
 8001358:	f7ff ffde 	bl	8001318 <HAL_GetTick>
 800135c:	4602      	mov	r2, r0
 800135e:	68bb      	ldr	r3, [r7, #8]
 8001360:	1ad3      	subs	r3, r2, r3
 8001362:	68fa      	ldr	r2, [r7, #12]
 8001364:	429a      	cmp	r2, r3
 8001366:	d8f7      	bhi.n	8001358 <HAL_Delay+0x28>
  {
  }
}
 8001368:	bf00      	nop
 800136a:	bf00      	nop
 800136c:	3710      	adds	r7, #16
 800136e:	46bd      	mov	sp, r7
 8001370:	bd80      	pop	{r7, pc}
 8001372:	bf00      	nop
 8001374:	20000048 	.word	0x20000048

08001378 <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001378:	b580      	push	{r7, lr}
 800137a:	b09a      	sub	sp, #104	@ 0x68
 800137c:	af00      	add	r7, sp, #0
 800137e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001380:	2300      	movs	r3, #0
 8001382:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 8001386:	2300      	movs	r3, #0
 8001388:	663b      	str	r3, [r7, #96]	@ 0x60
  __IO uint32_t wait_loop_index = 0U;
 800138a:	2300      	movs	r3, #0
 800138c:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	2b00      	cmp	r3, #0
 8001392:	d101      	bne.n	8001398 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8001394:	2301      	movs	r3, #1
 8001396:	e1c9      	b.n	800172c <HAL_ADC_Init+0x3b4>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	691b      	ldr	r3, [r3, #16]
 800139c:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013a2:	f003 0310 	and.w	r3, r3, #16
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d176      	bne.n	8001498 <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d152      	bne.n	8001458 <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	2200      	movs	r2, #0
 80013b6:	645a      	str	r2, [r3, #68]	@ 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	2200      	movs	r2, #0
 80013bc:	64da      	str	r2, [r3, #76]	@ 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	2200      	movs	r2, #0
 80013c2:	649a      	str	r2, [r3, #72]	@ 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	2200      	movs	r2, #0
 80013c8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80013cc:	6878      	ldr	r0, [r7, #4]
 80013ce:	f7ff fd03 	bl	8000dd8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	689b      	ldr	r3, [r3, #8]
 80013d8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d13b      	bne.n	8001458 <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 80013e0:	6878      	ldr	r0, [r7, #4]
 80013e2:	f001 f80f 	bl	8002404 <ADC_Disable>
 80013e6:	4603      	mov	r3, r0
 80013e8:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013f0:	f003 0310 	and.w	r3, r3, #16
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d12f      	bne.n	8001458 <HAL_ADC_Init+0xe0>
 80013f8:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d12b      	bne.n	8001458 <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001404:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001408:	f023 0302 	bic.w	r3, r3, #2
 800140c:	f043 0202 	orr.w	r2, r3, #2
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	641a      	str	r2, [r3, #64]	@ 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	689a      	ldr	r2, [r3, #8]
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001422:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	689a      	ldr	r2, [r3, #8]
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8001432:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001434:	4b86      	ldr	r3, [pc, #536]	@ (8001650 <HAL_ADC_Init+0x2d8>)
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	4a86      	ldr	r2, [pc, #536]	@ (8001654 <HAL_ADC_Init+0x2dc>)
 800143a:	fba2 2303 	umull	r2, r3, r2, r3
 800143e:	0c9a      	lsrs	r2, r3, #18
 8001440:	4613      	mov	r3, r2
 8001442:	009b      	lsls	r3, r3, #2
 8001444:	4413      	add	r3, r2
 8001446:	005b      	lsls	r3, r3, #1
 8001448:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800144a:	e002      	b.n	8001452 <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 800144c:	68bb      	ldr	r3, [r7, #8]
 800144e:	3b01      	subs	r3, #1
 8001450:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001452:	68bb      	ldr	r3, [r7, #8]
 8001454:	2b00      	cmp	r3, #0
 8001456:	d1f9      	bne.n	800144c <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	689b      	ldr	r3, [r3, #8]
 800145e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001462:	2b00      	cmp	r3, #0
 8001464:	d007      	beq.n	8001476 <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	689b      	ldr	r3, [r3, #8]
 800146c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8001470:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001474:	d110      	bne.n	8001498 <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800147a:	f023 0312 	bic.w	r3, r3, #18
 800147e:	f043 0210 	orr.w	r2, r3, #16
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	641a      	str	r2, [r3, #64]	@ 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800148a:	f043 0201 	orr.w	r2, r3, #1
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	645a      	str	r2, [r3, #68]	@ 0x44
      
      tmp_hal_status = HAL_ERROR;
 8001492:	2301      	movs	r3, #1
 8001494:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800149c:	f003 0310 	and.w	r3, r3, #16
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	f040 8136 	bne.w	8001712 <HAL_ADC_Init+0x39a>
 80014a6:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	f040 8131 	bne.w	8001712 <HAL_ADC_Init+0x39a>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	689b      	ldr	r3, [r3, #8]
 80014b6:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	f040 8129 	bne.w	8001712 <HAL_ADC_Init+0x39a>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014c4:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 80014c8:	f043 0202 	orr.w	r2, r3, #2
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	641a      	str	r2, [r3, #64]	@ 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80014d8:	d004      	beq.n	80014e4 <HAL_ADC_Init+0x16c>
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	4a5e      	ldr	r2, [pc, #376]	@ (8001658 <HAL_ADC_Init+0x2e0>)
 80014e0:	4293      	cmp	r3, r2
 80014e2:	d101      	bne.n	80014e8 <HAL_ADC_Init+0x170>
 80014e4:	4b5d      	ldr	r3, [pc, #372]	@ (800165c <HAL_ADC_Init+0x2e4>)
 80014e6:	e000      	b.n	80014ea <HAL_ADC_Init+0x172>
 80014e8:	4b5d      	ldr	r3, [pc, #372]	@ (8001660 <HAL_ADC_Init+0x2e8>)
 80014ea:	65fb      	str	r3, [r7, #92]	@ 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80014f4:	d102      	bne.n	80014fc <HAL_ADC_Init+0x184>
 80014f6:	4b58      	ldr	r3, [pc, #352]	@ (8001658 <HAL_ADC_Init+0x2e0>)
 80014f8:	60fb      	str	r3, [r7, #12]
 80014fa:	e01a      	b.n	8001532 <HAL_ADC_Init+0x1ba>
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	4a55      	ldr	r2, [pc, #340]	@ (8001658 <HAL_ADC_Init+0x2e0>)
 8001502:	4293      	cmp	r3, r2
 8001504:	d103      	bne.n	800150e <HAL_ADC_Init+0x196>
 8001506:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 800150a:	60fb      	str	r3, [r7, #12]
 800150c:	e011      	b.n	8001532 <HAL_ADC_Init+0x1ba>
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	4a54      	ldr	r2, [pc, #336]	@ (8001664 <HAL_ADC_Init+0x2ec>)
 8001514:	4293      	cmp	r3, r2
 8001516:	d102      	bne.n	800151e <HAL_ADC_Init+0x1a6>
 8001518:	4b53      	ldr	r3, [pc, #332]	@ (8001668 <HAL_ADC_Init+0x2f0>)
 800151a:	60fb      	str	r3, [r7, #12]
 800151c:	e009      	b.n	8001532 <HAL_ADC_Init+0x1ba>
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	4a51      	ldr	r2, [pc, #324]	@ (8001668 <HAL_ADC_Init+0x2f0>)
 8001524:	4293      	cmp	r3, r2
 8001526:	d102      	bne.n	800152e <HAL_ADC_Init+0x1b6>
 8001528:	4b4e      	ldr	r3, [pc, #312]	@ (8001664 <HAL_ADC_Init+0x2ec>)
 800152a:	60fb      	str	r3, [r7, #12]
 800152c:	e001      	b.n	8001532 <HAL_ADC_Init+0x1ba>
 800152e:	2300      	movs	r3, #0
 8001530:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	689b      	ldr	r3, [r3, #8]
 8001538:	f003 0303 	and.w	r3, r3, #3
 800153c:	2b01      	cmp	r3, #1
 800153e:	d108      	bne.n	8001552 <HAL_ADC_Init+0x1da>
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	f003 0301 	and.w	r3, r3, #1
 800154a:	2b01      	cmp	r3, #1
 800154c:	d101      	bne.n	8001552 <HAL_ADC_Init+0x1da>
 800154e:	2301      	movs	r3, #1
 8001550:	e000      	b.n	8001554 <HAL_ADC_Init+0x1dc>
 8001552:	2300      	movs	r3, #0
 8001554:	2b00      	cmp	r3, #0
 8001556:	d11c      	bne.n	8001592 <HAL_ADC_Init+0x21a>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001558:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 800155a:	2b00      	cmp	r3, #0
 800155c:	d010      	beq.n	8001580 <HAL_ADC_Init+0x208>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 800155e:	68fb      	ldr	r3, [r7, #12]
 8001560:	689b      	ldr	r3, [r3, #8]
 8001562:	f003 0303 	and.w	r3, r3, #3
 8001566:	2b01      	cmp	r3, #1
 8001568:	d107      	bne.n	800157a <HAL_ADC_Init+0x202>
 800156a:	68fb      	ldr	r3, [r7, #12]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	f003 0301 	and.w	r3, r3, #1
 8001572:	2b01      	cmp	r3, #1
 8001574:	d101      	bne.n	800157a <HAL_ADC_Init+0x202>
 8001576:	2301      	movs	r3, #1
 8001578:	e000      	b.n	800157c <HAL_ADC_Init+0x204>
 800157a:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 800157c:	2b00      	cmp	r3, #0
 800157e:	d108      	bne.n	8001592 <HAL_ADC_Init+0x21a>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 8001580:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001582:	689b      	ldr	r3, [r3, #8]
 8001584:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	685b      	ldr	r3, [r3, #4]
 800158c:	431a      	orrs	r2, r3
 800158e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001590:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	7e5b      	ldrb	r3, [r3, #25]
 8001596:	035b      	lsls	r3, r3, #13
 8001598:	687a      	ldr	r2, [r7, #4]
 800159a:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800159c:	2a01      	cmp	r2, #1
 800159e:	d002      	beq.n	80015a6 <HAL_ADC_Init+0x22e>
 80015a0:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80015a4:	e000      	b.n	80015a8 <HAL_ADC_Init+0x230>
 80015a6:	2200      	movs	r2, #0
 80015a8:	431a      	orrs	r2, r3
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	68db      	ldr	r3, [r3, #12]
 80015ae:	431a      	orrs	r2, r3
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	689b      	ldr	r3, [r3, #8]
 80015b4:	4313      	orrs	r3, r2
 80015b6:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80015b8:	4313      	orrs	r3, r2
 80015ba:	663b      	str	r3, [r7, #96]	@ 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	f893 3020 	ldrb.w	r3, [r3, #32]
 80015c2:	2b01      	cmp	r3, #1
 80015c4:	d11b      	bne.n	80015fe <HAL_ADC_Init+0x286>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	7e5b      	ldrb	r3, [r3, #25]
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d109      	bne.n	80015e2 <HAL_ADC_Init+0x26a>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80015d2:	3b01      	subs	r3, #1
 80015d4:	045a      	lsls	r2, r3, #17
 80015d6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80015d8:	4313      	orrs	r3, r2
 80015da:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80015de:	663b      	str	r3, [r7, #96]	@ 0x60
 80015e0:	e00d      	b.n	80015fe <HAL_ADC_Init+0x286>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015e6:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 80015ea:	f043 0220 	orr.w	r2, r3, #32
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	641a      	str	r2, [r3, #64]	@ 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80015f6:	f043 0201 	orr.w	r2, r3, #1
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	645a      	str	r2, [r3, #68]	@ 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001602:	2b01      	cmp	r3, #1
 8001604:	d03a      	beq.n	800167c <HAL_ADC_Init+0x304>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	4a16      	ldr	r2, [pc, #88]	@ (8001664 <HAL_ADC_Init+0x2ec>)
 800160c:	4293      	cmp	r3, r2
 800160e:	d004      	beq.n	800161a <HAL_ADC_Init+0x2a2>
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	4a14      	ldr	r2, [pc, #80]	@ (8001668 <HAL_ADC_Init+0x2f0>)
 8001616:	4293      	cmp	r3, r2
 8001618:	d128      	bne.n	800166c <HAL_ADC_Init+0x2f4>
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800161e:	f5b3 7f30 	cmp.w	r3, #704	@ 0x2c0
 8001622:	d012      	beq.n	800164a <HAL_ADC_Init+0x2d2>
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001628:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800162c:	d00a      	beq.n	8001644 <HAL_ADC_Init+0x2cc>
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001632:	f5b3 7fe0 	cmp.w	r3, #448	@ 0x1c0
 8001636:	d002      	beq.n	800163e <HAL_ADC_Init+0x2c6>
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800163c:	e018      	b.n	8001670 <HAL_ADC_Init+0x2f8>
 800163e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001642:	e015      	b.n	8001670 <HAL_ADC_Init+0x2f8>
 8001644:	f44f 7330 	mov.w	r3, #704	@ 0x2c0
 8001648:	e012      	b.n	8001670 <HAL_ADC_Init+0x2f8>
 800164a:	f44f 73e0 	mov.w	r3, #448	@ 0x1c0
 800164e:	e00f      	b.n	8001670 <HAL_ADC_Init+0x2f8>
 8001650:	20000040 	.word	0x20000040
 8001654:	431bde83 	.word	0x431bde83
 8001658:	50000100 	.word	0x50000100
 800165c:	50000300 	.word	0x50000300
 8001660:	50000700 	.word	0x50000700
 8001664:	50000400 	.word	0x50000400
 8001668:	50000500 	.word	0x50000500
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001670:	687a      	ldr	r2, [r7, #4]
 8001672:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8001674:	4313      	orrs	r3, r2
 8001676:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8001678:	4313      	orrs	r3, r2
 800167a:	663b      	str	r3, [r7, #96]	@ 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	689b      	ldr	r3, [r3, #8]
 8001682:	f003 030c 	and.w	r3, r3, #12
 8001686:	2b00      	cmp	r3, #0
 8001688:	d114      	bne.n	80016b4 <HAL_ADC_Init+0x33c>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	68db      	ldr	r3, [r3, #12]
 8001690:	687a      	ldr	r2, [r7, #4]
 8001692:	6812      	ldr	r2, [r2, #0]
 8001694:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8001698:	f023 0302 	bic.w	r3, r3, #2
 800169c:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	7e1b      	ldrb	r3, [r3, #24]
 80016a2:	039a      	lsls	r2, r3, #14
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80016aa:	005b      	lsls	r3, r3, #1
 80016ac:	4313      	orrs	r3, r2
 80016ae:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80016b0:	4313      	orrs	r3, r2
 80016b2:	663b      	str	r3, [r7, #96]	@ 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	68da      	ldr	r2, [r3, #12]
 80016ba:	4b1e      	ldr	r3, [pc, #120]	@ (8001734 <HAL_ADC_Init+0x3bc>)
 80016bc:	4013      	ands	r3, r2
 80016be:	687a      	ldr	r2, [r7, #4]
 80016c0:	6812      	ldr	r2, [r2, #0]
 80016c2:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 80016c4:	430b      	orrs	r3, r1
 80016c6:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	691b      	ldr	r3, [r3, #16]
 80016cc:	2b01      	cmp	r3, #1
 80016ce:	d10c      	bne.n	80016ea <HAL_ADC_Init+0x372>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016d6:	f023 010f 	bic.w	r1, r3, #15
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	69db      	ldr	r3, [r3, #28]
 80016de:	1e5a      	subs	r2, r3, #1
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	430a      	orrs	r2, r1
 80016e6:	631a      	str	r2, [r3, #48]	@ 0x30
 80016e8:	e007      	b.n	80016fa <HAL_ADC_Init+0x382>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	f022 020f 	bic.w	r2, r2, #15
 80016f8:	631a      	str	r2, [r3, #48]	@ 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	2200      	movs	r2, #0
 80016fe:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001704:	f023 0303 	bic.w	r3, r3, #3
 8001708:	f043 0201 	orr.w	r2, r3, #1
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	641a      	str	r2, [r3, #64]	@ 0x40
 8001710:	e00a      	b.n	8001728 <HAL_ADC_Init+0x3b0>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001716:	f023 0312 	bic.w	r3, r3, #18
 800171a:	f043 0210 	orr.w	r2, r3, #16
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 8001722:	2301      	movs	r3, #1
 8001724:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 8001728:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
}
 800172c:	4618      	mov	r0, r3
 800172e:	3768      	adds	r7, #104	@ 0x68
 8001730:	46bd      	mov	sp, r7
 8001732:	bd80      	pop	{r7, pc}
 8001734:	fff0c007 	.word	0xfff0c007

08001738 <HAL_ADC_Start>:
  *         if ADC is master, ADC is enabled and multimode conversion is started.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001738:	b580      	push	{r7, lr}
 800173a:	b084      	sub	sp, #16
 800173c:	af00      	add	r7, sp, #0
 800173e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001740:	2300      	movs	r3, #0
 8001742:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	689b      	ldr	r3, [r3, #8]
 800174a:	f003 0304 	and.w	r3, r3, #4
 800174e:	2b00      	cmp	r3, #0
 8001750:	f040 80f9 	bne.w	8001946 <HAL_ADC_Start+0x20e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800175a:	2b01      	cmp	r3, #1
 800175c:	d101      	bne.n	8001762 <HAL_ADC_Start+0x2a>
 800175e:	2302      	movs	r3, #2
 8001760:	e0f4      	b.n	800194c <HAL_ADC_Start+0x214>
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	2201      	movs	r2, #1
 8001766:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 800176a:	6878      	ldr	r0, [r7, #4]
 800176c:	f000 fde6 	bl	800233c <ADC_Enable>
 8001770:	4603      	mov	r3, r0
 8001772:	73fb      	strb	r3, [r7, #15]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001774:	7bfb      	ldrb	r3, [r7, #15]
 8001776:	2b00      	cmp	r3, #0
 8001778:	f040 80e0 	bne.w	800193c <HAL_ADC_Start+0x204>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001780:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8001784:	f023 0301 	bic.w	r3, r3, #1
 8001788:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	641a      	str	r2, [r3, #64]	@ 0x40
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Set group injected state (from auto-injection) and multimode state   */
      /* for all cases of multimode: independent mode, multimode ADC master   */
      /* or multimode ADC slave (for devices with several ADCs):              */
      if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001798:	d004      	beq.n	80017a4 <HAL_ADC_Start+0x6c>
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	4a6d      	ldr	r2, [pc, #436]	@ (8001954 <HAL_ADC_Start+0x21c>)
 80017a0:	4293      	cmp	r3, r2
 80017a2:	d106      	bne.n	80017b2 <HAL_ADC_Start+0x7a>
 80017a4:	4b6c      	ldr	r3, [pc, #432]	@ (8001958 <HAL_ADC_Start+0x220>)
 80017a6:	689b      	ldr	r3, [r3, #8]
 80017a8:	f003 031f 	and.w	r3, r3, #31
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d010      	beq.n	80017d2 <HAL_ADC_Start+0x9a>
 80017b0:	e005      	b.n	80017be <HAL_ADC_Start+0x86>
 80017b2:	4b6a      	ldr	r3, [pc, #424]	@ (800195c <HAL_ADC_Start+0x224>)
 80017b4:	689b      	ldr	r3, [r3, #8]
 80017b6:	f003 031f 	and.w	r3, r3, #31
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d009      	beq.n	80017d2 <HAL_ADC_Start+0x9a>
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80017c6:	d004      	beq.n	80017d2 <HAL_ADC_Start+0x9a>
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	4a64      	ldr	r2, [pc, #400]	@ (8001960 <HAL_ADC_Start+0x228>)
 80017ce:	4293      	cmp	r3, r2
 80017d0:	d115      	bne.n	80017fe <HAL_ADC_Start+0xc6>
      {
        /* Set ADC state (ADC independent or master) */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017d6:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	641a      	str	r2, [r3, #64]	@ 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	68db      	ldr	r3, [r3, #12]
 80017e4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d036      	beq.n	800185a <HAL_ADC_Start+0x122>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017f0:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80017f4:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	641a      	str	r2, [r3, #64]	@ 0x40
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 80017fc:	e02d      	b.n	800185a <HAL_ADC_Start+0x122>
        }
      }
      else
      {
        /* Set ADC state (ADC slave) */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001802:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	641a      	str	r2, [r3, #64]	@ 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001812:	d004      	beq.n	800181e <HAL_ADC_Start+0xe6>
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	4a4e      	ldr	r2, [pc, #312]	@ (8001954 <HAL_ADC_Start+0x21c>)
 800181a:	4293      	cmp	r3, r2
 800181c:	d10a      	bne.n	8001834 <HAL_ADC_Start+0xfc>
 800181e:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8001822:	68db      	ldr	r3, [r3, #12]
 8001824:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001828:	2b00      	cmp	r3, #0
 800182a:	bf14      	ite	ne
 800182c:	2301      	movne	r3, #1
 800182e:	2300      	moveq	r3, #0
 8001830:	b2db      	uxtb	r3, r3
 8001832:	e008      	b.n	8001846 <HAL_ADC_Start+0x10e>
 8001834:	4b4a      	ldr	r3, [pc, #296]	@ (8001960 <HAL_ADC_Start+0x228>)
 8001836:	68db      	ldr	r3, [r3, #12]
 8001838:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800183c:	2b00      	cmp	r3, #0
 800183e:	bf14      	ite	ne
 8001840:	2301      	movne	r3, #1
 8001842:	2300      	moveq	r3, #0
 8001844:	b2db      	uxtb	r3, r3
 8001846:	2b00      	cmp	r3, #0
 8001848:	d007      	beq.n	800185a <HAL_ADC_Start+0x122>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800184e:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001852:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	641a      	str	r2, [r3, #64]	@ 0x40
        }
      }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800185e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001862:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001866:	d106      	bne.n	8001876 <HAL_ADC_Start+0x13e>
      {
        /* Reset ADC error code fields related to conversions on group regular*/
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800186c:	f023 0206 	bic.w	r2, r3, #6
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	645a      	str	r2, [r3, #68]	@ 0x44
 8001874:	e002      	b.n	800187c <HAL_ADC_Start+0x144>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	2200      	movs	r2, #0
 800187a:	645a      	str	r2, [r3, #68]	@ 0x44
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	2200      	movs	r2, #0
 8001880:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	221c      	movs	r2, #28
 800188a:	601a      	str	r2, [r3, #0]
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Case of multimode enabled (for devices with several ADCs):           */
      /*  - if ADC is slave, ADC is enabled only (conversion is not started). */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001894:	d004      	beq.n	80018a0 <HAL_ADC_Start+0x168>
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	4a2e      	ldr	r2, [pc, #184]	@ (8001954 <HAL_ADC_Start+0x21c>)
 800189c:	4293      	cmp	r3, r2
 800189e:	d106      	bne.n	80018ae <HAL_ADC_Start+0x176>
 80018a0:	4b2d      	ldr	r3, [pc, #180]	@ (8001958 <HAL_ADC_Start+0x220>)
 80018a2:	689b      	ldr	r3, [r3, #8]
 80018a4:	f003 031f 	and.w	r3, r3, #31
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d03e      	beq.n	800192a <HAL_ADC_Start+0x1f2>
 80018ac:	e005      	b.n	80018ba <HAL_ADC_Start+0x182>
 80018ae:	4b2b      	ldr	r3, [pc, #172]	@ (800195c <HAL_ADC_Start+0x224>)
 80018b0:	689b      	ldr	r3, [r3, #8]
 80018b2:	f003 031f 	and.w	r3, r3, #31
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d037      	beq.n	800192a <HAL_ADC_Start+0x1f2>
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80018c2:	d004      	beq.n	80018ce <HAL_ADC_Start+0x196>
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	4a22      	ldr	r2, [pc, #136]	@ (8001954 <HAL_ADC_Start+0x21c>)
 80018ca:	4293      	cmp	r3, r2
 80018cc:	d106      	bne.n	80018dc <HAL_ADC_Start+0x1a4>
 80018ce:	4b22      	ldr	r3, [pc, #136]	@ (8001958 <HAL_ADC_Start+0x220>)
 80018d0:	689b      	ldr	r3, [r3, #8]
 80018d2:	f003 031f 	and.w	r3, r3, #31
 80018d6:	2b05      	cmp	r3, #5
 80018d8:	d027      	beq.n	800192a <HAL_ADC_Start+0x1f2>
 80018da:	e005      	b.n	80018e8 <HAL_ADC_Start+0x1b0>
 80018dc:	4b1f      	ldr	r3, [pc, #124]	@ (800195c <HAL_ADC_Start+0x224>)
 80018de:	689b      	ldr	r3, [r3, #8]
 80018e0:	f003 031f 	and.w	r3, r3, #31
 80018e4:	2b05      	cmp	r3, #5
 80018e6:	d020      	beq.n	800192a <HAL_ADC_Start+0x1f2>
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80018f0:	d004      	beq.n	80018fc <HAL_ADC_Start+0x1c4>
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	4a17      	ldr	r2, [pc, #92]	@ (8001954 <HAL_ADC_Start+0x21c>)
 80018f8:	4293      	cmp	r3, r2
 80018fa:	d106      	bne.n	800190a <HAL_ADC_Start+0x1d2>
 80018fc:	4b16      	ldr	r3, [pc, #88]	@ (8001958 <HAL_ADC_Start+0x220>)
 80018fe:	689b      	ldr	r3, [r3, #8]
 8001900:	f003 031f 	and.w	r3, r3, #31
 8001904:	2b09      	cmp	r3, #9
 8001906:	d010      	beq.n	800192a <HAL_ADC_Start+0x1f2>
 8001908:	e005      	b.n	8001916 <HAL_ADC_Start+0x1de>
 800190a:	4b14      	ldr	r3, [pc, #80]	@ (800195c <HAL_ADC_Start+0x224>)
 800190c:	689b      	ldr	r3, [r3, #8]
 800190e:	f003 031f 	and.w	r3, r3, #31
 8001912:	2b09      	cmp	r3, #9
 8001914:	d009      	beq.n	800192a <HAL_ADC_Start+0x1f2>
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800191e:	d004      	beq.n	800192a <HAL_ADC_Start+0x1f2>
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	4a0e      	ldr	r2, [pc, #56]	@ (8001960 <HAL_ADC_Start+0x228>)
 8001926:	4293      	cmp	r3, r2
 8001928:	d10f      	bne.n	800194a <HAL_ADC_Start+0x212>
      {
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	689a      	ldr	r2, [r3, #8]
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	f042 0204 	orr.w	r2, r2, #4
 8001938:	609a      	str	r2, [r3, #8]
 800193a:	e006      	b.n	800194a <HAL_ADC_Start+0x212>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	2200      	movs	r2, #0
 8001940:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8001944:	e001      	b.n	800194a <HAL_ADC_Start+0x212>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001946:	2302      	movs	r3, #2
 8001948:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800194a:	7bfb      	ldrb	r3, [r7, #15]
}
 800194c:	4618      	mov	r0, r3
 800194e:	3710      	adds	r7, #16
 8001950:	46bd      	mov	sp, r7
 8001952:	bd80      	pop	{r7, pc}
 8001954:	50000100 	.word	0x50000100
 8001958:	50000300 	.word	0x50000300
 800195c:	50000700 	.word	0x50000700
 8001960:	50000400 	.word	0x50000400

08001964 <HAL_ADC_PollForConversion>:
  * @note   Depending on init parameter "EOCSelection", flags EOS or EOC is 
  *         checked and cleared depending on autodelay status (bit AUTDLY).     
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8001964:	b580      	push	{r7, lr}
 8001966:	b086      	sub	sp, #24
 8001968:	af00      	add	r7, sp, #0
 800196a:	6078      	str	r0, [r7, #4]
 800196c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_EOC;
  ADC_Common_TypeDef *tmpADC_Common;
  uint32_t tmp_cfgr     = 0x0U;
 800196e:	2300      	movs	r3, #0
 8001970:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

/* If end of conversion selected to end of sequence */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	695b      	ldr	r3, [r3, #20]
 8001976:	2b08      	cmp	r3, #8
 8001978:	d102      	bne.n	8001980 <HAL_ADC_PollForConversion+0x1c>
  {
    tmp_Flag_EOC = ADC_FLAG_EOS;
 800197a:	2308      	movs	r3, #8
 800197c:	617b      	str	r3, [r7, #20]
 800197e:	e03a      	b.n	80019f6 <HAL_ADC_PollForConversion+0x92>
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001988:	d004      	beq.n	8001994 <HAL_ADC_PollForConversion+0x30>
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	4a72      	ldr	r2, [pc, #456]	@ (8001b58 <HAL_ADC_PollForConversion+0x1f4>)
 8001990:	4293      	cmp	r3, r2
 8001992:	d101      	bne.n	8001998 <HAL_ADC_PollForConversion+0x34>
 8001994:	4b71      	ldr	r3, [pc, #452]	@ (8001b5c <HAL_ADC_PollForConversion+0x1f8>)
 8001996:	e000      	b.n	800199a <HAL_ADC_PollForConversion+0x36>
 8001998:	4b71      	ldr	r3, [pc, #452]	@ (8001b60 <HAL_ADC_PollForConversion+0x1fc>)
 800199a:	60fb      	str	r3, [r7, #12]
    
    /* Check DMA configuration, depending on MultiMode set or not */
    if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI) == ADC_MODE_INDEPENDENT)
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	689b      	ldr	r3, [r3, #8]
 80019a0:	f003 031f 	and.w	r3, r3, #31
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d112      	bne.n	80019ce <HAL_ADC_PollForConversion+0x6a>
    {
      if (HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_DMAEN))
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	68db      	ldr	r3, [r3, #12]
 80019ae:	f003 0301 	and.w	r3, r3, #1
 80019b2:	2b01      	cmp	r3, #1
 80019b4:	d11d      	bne.n	80019f2 <HAL_ADC_PollForConversion+0x8e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019ba:	f043 0220 	orr.w	r2, r3, #32
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	641a      	str	r2, [r3, #64]	@ 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	2200      	movs	r2, #0
 80019c6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
        
        return HAL_ERROR;
 80019ca:	2301      	movs	r3, #1
 80019cc:	e0bf      	b.n	8001b4e <HAL_ADC_PollForConversion+0x1ea>
      }
    }
    else
    {
      /* MultiMode is enabled, Common Control Register MDMA bits must be checked */
      if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA) != RESET)
 80019ce:	68fb      	ldr	r3, [r7, #12]
 80019d0:	689b      	ldr	r3, [r3, #8]
 80019d2:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d00b      	beq.n	80019f2 <HAL_ADC_PollForConversion+0x8e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019de:	f043 0220 	orr.w	r2, r3, #32
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	641a      	str	r2, [r3, #64]	@ 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	2200      	movs	r2, #0
 80019ea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
        
        return HAL_ERROR;
 80019ee:	2301      	movs	r3, #1
 80019f0:	e0ad      	b.n	8001b4e <HAL_ADC_PollForConversion+0x1ea>
      }
    }
    
    tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 80019f2:	230c      	movs	r3, #12
 80019f4:	617b      	str	r3, [r7, #20]
  }
  
  /* Get relevant register CFGR in ADC instance of ADC master or slave      */
  /* in function of multimode state (for devices with multimode             */
  /* available).                                                            */
  if(ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80019fe:	d004      	beq.n	8001a0a <HAL_ADC_PollForConversion+0xa6>
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	4a54      	ldr	r2, [pc, #336]	@ (8001b58 <HAL_ADC_PollForConversion+0x1f4>)
 8001a06:	4293      	cmp	r3, r2
 8001a08:	d106      	bne.n	8001a18 <HAL_ADC_PollForConversion+0xb4>
 8001a0a:	4b54      	ldr	r3, [pc, #336]	@ (8001b5c <HAL_ADC_PollForConversion+0x1f8>)
 8001a0c:	689b      	ldr	r3, [r3, #8]
 8001a0e:	f003 031f 	and.w	r3, r3, #31
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d010      	beq.n	8001a38 <HAL_ADC_PollForConversion+0xd4>
 8001a16:	e005      	b.n	8001a24 <HAL_ADC_PollForConversion+0xc0>
 8001a18:	4b51      	ldr	r3, [pc, #324]	@ (8001b60 <HAL_ADC_PollForConversion+0x1fc>)
 8001a1a:	689b      	ldr	r3, [r3, #8]
 8001a1c:	f003 031f 	and.w	r3, r3, #31
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d009      	beq.n	8001a38 <HAL_ADC_PollForConversion+0xd4>
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001a2c:	d004      	beq.n	8001a38 <HAL_ADC_PollForConversion+0xd4>
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	4a4c      	ldr	r2, [pc, #304]	@ (8001b64 <HAL_ADC_PollForConversion+0x200>)
 8001a34:	4293      	cmp	r3, r2
 8001a36:	d104      	bne.n	8001a42 <HAL_ADC_PollForConversion+0xde>
  {
    tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	68db      	ldr	r3, [r3, #12]
 8001a3e:	613b      	str	r3, [r7, #16]
 8001a40:	e00f      	b.n	8001a62 <HAL_ADC_PollForConversion+0xfe>
  }
  else
  {
    tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001a4a:	d004      	beq.n	8001a56 <HAL_ADC_PollForConversion+0xf2>
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	4a41      	ldr	r2, [pc, #260]	@ (8001b58 <HAL_ADC_PollForConversion+0x1f4>)
 8001a52:	4293      	cmp	r3, r2
 8001a54:	d102      	bne.n	8001a5c <HAL_ADC_PollForConversion+0xf8>
 8001a56:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8001a5a:	e000      	b.n	8001a5e <HAL_ADC_PollForConversion+0xfa>
 8001a5c:	4b41      	ldr	r3, [pc, #260]	@ (8001b64 <HAL_ADC_PollForConversion+0x200>)
 8001a5e:	68db      	ldr	r3, [r3, #12]
 8001a60:	613b      	str	r3, [r7, #16]
  }
  
  /* Get tick count */
  tickstart = HAL_GetTick();  
 8001a62:	f7ff fc59 	bl	8001318 <HAL_GetTick>
 8001a66:	60b8      	str	r0, [r7, #8]
  
  /* Wait until End of Conversion or End of Sequence flag is raised */
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8001a68:	e021      	b.n	8001aae <HAL_ADC_PollForConversion+0x14a>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8001a6a:	683b      	ldr	r3, [r7, #0]
 8001a6c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001a70:	d01d      	beq.n	8001aae <HAL_ADC_PollForConversion+0x14a>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8001a72:	683b      	ldr	r3, [r7, #0]
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d007      	beq.n	8001a88 <HAL_ADC_PollForConversion+0x124>
 8001a78:	f7ff fc4e 	bl	8001318 <HAL_GetTick>
 8001a7c:	4602      	mov	r2, r0
 8001a7e:	68bb      	ldr	r3, [r7, #8]
 8001a80:	1ad3      	subs	r3, r2, r3
 8001a82:	683a      	ldr	r2, [r7, #0]
 8001a84:	429a      	cmp	r2, r3
 8001a86:	d212      	bcs.n	8001aae <HAL_ADC_PollForConversion+0x14a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	681a      	ldr	r2, [r3, #0]
 8001a8e:	697b      	ldr	r3, [r7, #20]
 8001a90:	4013      	ands	r3, r2
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d10b      	bne.n	8001aae <HAL_ADC_PollForConversion+0x14a>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a9a:	f043 0204 	orr.w	r2, r3, #4
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	2200      	movs	r2, #0
 8001aa6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_TIMEOUT;
 8001aaa:	2303      	movs	r3, #3
 8001aac:	e04f      	b.n	8001b4e <HAL_ADC_PollForConversion+0x1ea>
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	681a      	ldr	r2, [r3, #0]
 8001ab4:	697b      	ldr	r3, [r7, #20]
 8001ab6:	4013      	ands	r3, r2
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d0d6      	beq.n	8001a6a <HAL_ADC_PollForConversion+0x106>
      }
    }
  }
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ac0:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	641a      	str	r2, [r3, #64]	@ 0x40
  
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)           && 
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	68db      	ldr	r3, [r3, #12]
 8001ace:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d131      	bne.n	8001b3a <HAL_ADC_PollForConversion+0x1d6>
     (READ_BIT (tmp_cfgr, ADC_CFGR_CONT) == RESET)   )
 8001ad6:	693b      	ldr	r3, [r7, #16]
 8001ad8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)           && 
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d12c      	bne.n	8001b3a <HAL_ADC_PollForConversion+0x1d6>
  {
    /* If End of Sequence is reached, disable interrupts */
    if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	f003 0308 	and.w	r3, r3, #8
 8001aea:	2b08      	cmp	r3, #8
 8001aec:	d125      	bne.n	8001b3a <HAL_ADC_PollForConversion+0x1d6>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	689b      	ldr	r3, [r3, #8]
 8001af4:	f003 0304 	and.w	r3, r3, #4
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d112      	bne.n	8001b22 <HAL_ADC_PollForConversion+0x1be>
      {        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b00:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	641a      	str	r2, [r3, #64]	@ 0x40
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b0c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d112      	bne.n	8001b3a <HAL_ADC_PollForConversion+0x1d6>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b18:	f043 0201 	orr.w	r2, r3, #1
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	641a      	str	r2, [r3, #64]	@ 0x40
 8001b20:	e00b      	b.n	8001b3a <HAL_ADC_PollForConversion+0x1d6>
        }
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b26:	f043 0220 	orr.w	r2, r3, #32
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	641a      	str	r2, [r3, #64]	@ 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b32:	f043 0201 	orr.w	r2, r3, #1
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	645a      	str	r2, [r3, #68]	@ 0x44
  }
  
  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (READ_BIT (tmp_cfgr, ADC_CFGR_AUTDLY) == RESET)
 8001b3a:	693b      	ldr	r3, [r7, #16]
 8001b3c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d103      	bne.n	8001b4c <HAL_ADC_PollForConversion+0x1e8>
  {
    /* Clear regular group conversion flag */
    /* (EOC or EOS depending on HAL ADC initialization parameter) */
    __HAL_ADC_CLEAR_FLAG(hadc, tmp_Flag_EOC);
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	697a      	ldr	r2, [r7, #20]
 8001b4a:	601a      	str	r2, [r3, #0]
  }
  
  /* Return ADC state */
  return HAL_OK;
 8001b4c:	2300      	movs	r3, #0
}
 8001b4e:	4618      	mov	r0, r3
 8001b50:	3718      	adds	r7, #24
 8001b52:	46bd      	mov	sp, r7
 8001b54:	bd80      	pop	{r7, pc}
 8001b56:	bf00      	nop
 8001b58:	50000100 	.word	0x50000100
 8001b5c:	50000300 	.word	0x50000300
 8001b60:	50000700 	.word	0x50000700
 8001b64:	50000400 	.word	0x50000400

08001b68 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8001b68:	b480      	push	{r7}
 8001b6a:	b083      	sub	sp, #12
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	6078      	str	r0, [r7, #4]

  /* Note: ADC flag EOC is not cleared here by software because               */
  /*       automatically cleared by hardware when reading register DR.        */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 8001b76:	4618      	mov	r0, r3
 8001b78:	370c      	adds	r7, #12
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b80:	4770      	bx	lr
	...

08001b84 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001b84:	b480      	push	{r7}
 8001b86:	b09b      	sub	sp, #108	@ 0x6c
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	6078      	str	r0, [r7, #4]
 8001b8c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001b8e:	2300      	movs	r3, #0
 8001b90:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 8001b94:	2300      	movs	r3, #0
 8001b96:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001b9e:	2b01      	cmp	r3, #1
 8001ba0:	d101      	bne.n	8001ba6 <HAL_ADC_ConfigChannel+0x22>
 8001ba2:	2302      	movs	r3, #2
 8001ba4:	e2c8      	b.n	8002138 <HAL_ADC_ConfigChannel+0x5b4>
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	2201      	movs	r2, #1
 8001baa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	689b      	ldr	r3, [r3, #8]
 8001bb4:	f003 0304 	and.w	r3, r3, #4
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	f040 82ac 	bne.w	8002116 <HAL_ADC_ConfigChannel+0x592>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 8001bbe:	683b      	ldr	r3, [r7, #0]
 8001bc0:	685b      	ldr	r3, [r3, #4]
 8001bc2:	2b04      	cmp	r3, #4
 8001bc4:	d81c      	bhi.n	8001c00 <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001bcc:	683b      	ldr	r3, [r7, #0]
 8001bce:	685a      	ldr	r2, [r3, #4]
 8001bd0:	4613      	mov	r3, r2
 8001bd2:	005b      	lsls	r3, r3, #1
 8001bd4:	4413      	add	r3, r2
 8001bd6:	005b      	lsls	r3, r3, #1
 8001bd8:	461a      	mov	r2, r3
 8001bda:	231f      	movs	r3, #31
 8001bdc:	4093      	lsls	r3, r2
 8001bde:	43db      	mvns	r3, r3
 8001be0:	4019      	ands	r1, r3
 8001be2:	683b      	ldr	r3, [r7, #0]
 8001be4:	6818      	ldr	r0, [r3, #0]
 8001be6:	683b      	ldr	r3, [r7, #0]
 8001be8:	685a      	ldr	r2, [r3, #4]
 8001bea:	4613      	mov	r3, r2
 8001bec:	005b      	lsls	r3, r3, #1
 8001bee:	4413      	add	r3, r2
 8001bf0:	005b      	lsls	r3, r3, #1
 8001bf2:	fa00 f203 	lsl.w	r2, r0, r3
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	430a      	orrs	r2, r1
 8001bfc:	631a      	str	r2, [r3, #48]	@ 0x30
 8001bfe:	e063      	b.n	8001cc8 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 8001c00:	683b      	ldr	r3, [r7, #0]
 8001c02:	685b      	ldr	r3, [r3, #4]
 8001c04:	2b09      	cmp	r3, #9
 8001c06:	d81e      	bhi.n	8001c46 <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001c0e:	683b      	ldr	r3, [r7, #0]
 8001c10:	685a      	ldr	r2, [r3, #4]
 8001c12:	4613      	mov	r3, r2
 8001c14:	005b      	lsls	r3, r3, #1
 8001c16:	4413      	add	r3, r2
 8001c18:	005b      	lsls	r3, r3, #1
 8001c1a:	3b1e      	subs	r3, #30
 8001c1c:	221f      	movs	r2, #31
 8001c1e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c22:	43db      	mvns	r3, r3
 8001c24:	4019      	ands	r1, r3
 8001c26:	683b      	ldr	r3, [r7, #0]
 8001c28:	6818      	ldr	r0, [r3, #0]
 8001c2a:	683b      	ldr	r3, [r7, #0]
 8001c2c:	685a      	ldr	r2, [r3, #4]
 8001c2e:	4613      	mov	r3, r2
 8001c30:	005b      	lsls	r3, r3, #1
 8001c32:	4413      	add	r3, r2
 8001c34:	005b      	lsls	r3, r3, #1
 8001c36:	3b1e      	subs	r3, #30
 8001c38:	fa00 f203 	lsl.w	r2, r0, r3
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	430a      	orrs	r2, r1
 8001c42:	635a      	str	r2, [r3, #52]	@ 0x34
 8001c44:	e040      	b.n	8001cc8 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 8001c46:	683b      	ldr	r3, [r7, #0]
 8001c48:	685b      	ldr	r3, [r3, #4]
 8001c4a:	2b0e      	cmp	r3, #14
 8001c4c:	d81e      	bhi.n	8001c8c <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 8001c54:	683b      	ldr	r3, [r7, #0]
 8001c56:	685a      	ldr	r2, [r3, #4]
 8001c58:	4613      	mov	r3, r2
 8001c5a:	005b      	lsls	r3, r3, #1
 8001c5c:	4413      	add	r3, r2
 8001c5e:	005b      	lsls	r3, r3, #1
 8001c60:	3b3c      	subs	r3, #60	@ 0x3c
 8001c62:	221f      	movs	r2, #31
 8001c64:	fa02 f303 	lsl.w	r3, r2, r3
 8001c68:	43db      	mvns	r3, r3
 8001c6a:	4019      	ands	r1, r3
 8001c6c:	683b      	ldr	r3, [r7, #0]
 8001c6e:	6818      	ldr	r0, [r3, #0]
 8001c70:	683b      	ldr	r3, [r7, #0]
 8001c72:	685a      	ldr	r2, [r3, #4]
 8001c74:	4613      	mov	r3, r2
 8001c76:	005b      	lsls	r3, r3, #1
 8001c78:	4413      	add	r3, r2
 8001c7a:	005b      	lsls	r3, r3, #1
 8001c7c:	3b3c      	subs	r3, #60	@ 0x3c
 8001c7e:	fa00 f203 	lsl.w	r2, r0, r3
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	430a      	orrs	r2, r1
 8001c88:	639a      	str	r2, [r3, #56]	@ 0x38
 8001c8a:	e01d      	b.n	8001cc8 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
 8001c92:	683b      	ldr	r3, [r7, #0]
 8001c94:	685a      	ldr	r2, [r3, #4]
 8001c96:	4613      	mov	r3, r2
 8001c98:	005b      	lsls	r3, r3, #1
 8001c9a:	4413      	add	r3, r2
 8001c9c:	005b      	lsls	r3, r3, #1
 8001c9e:	3b5a      	subs	r3, #90	@ 0x5a
 8001ca0:	221f      	movs	r2, #31
 8001ca2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ca6:	43db      	mvns	r3, r3
 8001ca8:	4019      	ands	r1, r3
 8001caa:	683b      	ldr	r3, [r7, #0]
 8001cac:	6818      	ldr	r0, [r3, #0]
 8001cae:	683b      	ldr	r3, [r7, #0]
 8001cb0:	685a      	ldr	r2, [r3, #4]
 8001cb2:	4613      	mov	r3, r2
 8001cb4:	005b      	lsls	r3, r3, #1
 8001cb6:	4413      	add	r3, r2
 8001cb8:	005b      	lsls	r3, r3, #1
 8001cba:	3b5a      	subs	r3, #90	@ 0x5a
 8001cbc:	fa00 f203 	lsl.w	r2, r0, r3
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	430a      	orrs	r2, r1
 8001cc6:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	689b      	ldr	r3, [r3, #8]
 8001cce:	f003 030c 	and.w	r3, r3, #12
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	f040 80e5 	bne.w	8001ea2 <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 8001cd8:	683b      	ldr	r3, [r7, #0]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	2b09      	cmp	r3, #9
 8001cde:	d91c      	bls.n	8001d1a <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	6999      	ldr	r1, [r3, #24]
 8001ce6:	683b      	ldr	r3, [r7, #0]
 8001ce8:	681a      	ldr	r2, [r3, #0]
 8001cea:	4613      	mov	r3, r2
 8001cec:	005b      	lsls	r3, r3, #1
 8001cee:	4413      	add	r3, r2
 8001cf0:	3b1e      	subs	r3, #30
 8001cf2:	2207      	movs	r2, #7
 8001cf4:	fa02 f303 	lsl.w	r3, r2, r3
 8001cf8:	43db      	mvns	r3, r3
 8001cfa:	4019      	ands	r1, r3
 8001cfc:	683b      	ldr	r3, [r7, #0]
 8001cfe:	6898      	ldr	r0, [r3, #8]
 8001d00:	683b      	ldr	r3, [r7, #0]
 8001d02:	681a      	ldr	r2, [r3, #0]
 8001d04:	4613      	mov	r3, r2
 8001d06:	005b      	lsls	r3, r3, #1
 8001d08:	4413      	add	r3, r2
 8001d0a:	3b1e      	subs	r3, #30
 8001d0c:	fa00 f203 	lsl.w	r2, r0, r3
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	430a      	orrs	r2, r1
 8001d16:	619a      	str	r2, [r3, #24]
 8001d18:	e019      	b.n	8001d4e <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	6959      	ldr	r1, [r3, #20]
 8001d20:	683b      	ldr	r3, [r7, #0]
 8001d22:	681a      	ldr	r2, [r3, #0]
 8001d24:	4613      	mov	r3, r2
 8001d26:	005b      	lsls	r3, r3, #1
 8001d28:	4413      	add	r3, r2
 8001d2a:	2207      	movs	r2, #7
 8001d2c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d30:	43db      	mvns	r3, r3
 8001d32:	4019      	ands	r1, r3
 8001d34:	683b      	ldr	r3, [r7, #0]
 8001d36:	6898      	ldr	r0, [r3, #8]
 8001d38:	683b      	ldr	r3, [r7, #0]
 8001d3a:	681a      	ldr	r2, [r3, #0]
 8001d3c:	4613      	mov	r3, r2
 8001d3e:	005b      	lsls	r3, r3, #1
 8001d40:	4413      	add	r3, r2
 8001d42:	fa00 f203 	lsl.w	r2, r0, r3
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	430a      	orrs	r2, r1
 8001d4c:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 8001d4e:	683b      	ldr	r3, [r7, #0]
 8001d50:	695a      	ldr	r2, [r3, #20]
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	68db      	ldr	r3, [r3, #12]
 8001d58:	08db      	lsrs	r3, r3, #3
 8001d5a:	f003 0303 	and.w	r3, r3, #3
 8001d5e:	005b      	lsls	r3, r3, #1
 8001d60:	fa02 f303 	lsl.w	r3, r2, r3
 8001d64:	663b      	str	r3, [r7, #96]	@ 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 8001d66:	683b      	ldr	r3, [r7, #0]
 8001d68:	691b      	ldr	r3, [r3, #16]
 8001d6a:	3b01      	subs	r3, #1
 8001d6c:	2b03      	cmp	r3, #3
 8001d6e:	d84f      	bhi.n	8001e10 <HAL_ADC_ConfigChannel+0x28c>
 8001d70:	a201      	add	r2, pc, #4	@ (adr r2, 8001d78 <HAL_ADC_ConfigChannel+0x1f4>)
 8001d72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d76:	bf00      	nop
 8001d78:	08001d89 	.word	0x08001d89
 8001d7c:	08001dab 	.word	0x08001dab
 8001d80:	08001dcd 	.word	0x08001dcd
 8001d84:	08001def 	.word	0x08001def
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001d8e:	4b99      	ldr	r3, [pc, #612]	@ (8001ff4 <HAL_ADC_ConfigChannel+0x470>)
 8001d90:	4013      	ands	r3, r2
 8001d92:	683a      	ldr	r2, [r7, #0]
 8001d94:	6812      	ldr	r2, [r2, #0]
 8001d96:	0691      	lsls	r1, r2, #26
 8001d98:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8001d9a:	430a      	orrs	r2, r1
 8001d9c:	431a      	orrs	r2, r3
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8001da6:	661a      	str	r2, [r3, #96]	@ 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001da8:	e07b      	b.n	8001ea2 <HAL_ADC_ConfigChannel+0x31e>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8001db0:	4b90      	ldr	r3, [pc, #576]	@ (8001ff4 <HAL_ADC_ConfigChannel+0x470>)
 8001db2:	4013      	ands	r3, r2
 8001db4:	683a      	ldr	r2, [r7, #0]
 8001db6:	6812      	ldr	r2, [r2, #0]
 8001db8:	0691      	lsls	r1, r2, #26
 8001dba:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8001dbc:	430a      	orrs	r2, r1
 8001dbe:	431a      	orrs	r2, r3
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8001dc8:	665a      	str	r2, [r3, #100]	@ 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001dca:	e06a      	b.n	8001ea2 <HAL_ADC_ConfigChannel+0x31e>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8001dd2:	4b88      	ldr	r3, [pc, #544]	@ (8001ff4 <HAL_ADC_ConfigChannel+0x470>)
 8001dd4:	4013      	ands	r3, r2
 8001dd6:	683a      	ldr	r2, [r7, #0]
 8001dd8:	6812      	ldr	r2, [r2, #0]
 8001dda:	0691      	lsls	r1, r2, #26
 8001ddc:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8001dde:	430a      	orrs	r2, r1
 8001de0:	431a      	orrs	r2, r3
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8001dea:	669a      	str	r2, [r3, #104]	@ 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001dec:	e059      	b.n	8001ea2 <HAL_ADC_ConfigChannel+0x31e>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8001df4:	4b7f      	ldr	r3, [pc, #508]	@ (8001ff4 <HAL_ADC_ConfigChannel+0x470>)
 8001df6:	4013      	ands	r3, r2
 8001df8:	683a      	ldr	r2, [r7, #0]
 8001dfa:	6812      	ldr	r2, [r2, #0]
 8001dfc:	0691      	lsls	r1, r2, #26
 8001dfe:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8001e00:	430a      	orrs	r2, r1
 8001e02:	431a      	orrs	r2, r3
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8001e0c:	66da      	str	r2, [r3, #108]	@ 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001e0e:	e048      	b.n	8001ea2 <HAL_ADC_ConfigChannel+0x31e>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001e16:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001e1a:	683b      	ldr	r3, [r7, #0]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	069b      	lsls	r3, r3, #26
 8001e20:	429a      	cmp	r2, r3
 8001e22:	d107      	bne.n	8001e34 <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8001e32:	661a      	str	r2, [r3, #96]	@ 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8001e3a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001e3e:	683b      	ldr	r3, [r7, #0]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	069b      	lsls	r3, r3, #26
 8001e44:	429a      	cmp	r2, r3
 8001e46:	d107      	bne.n	8001e58 <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8001e56:	665a      	str	r2, [r3, #100]	@ 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8001e5e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001e62:	683b      	ldr	r3, [r7, #0]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	069b      	lsls	r3, r3, #26
 8001e68:	429a      	cmp	r2, r3
 8001e6a:	d107      	bne.n	8001e7c <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8001e7a:	669a      	str	r2, [r3, #104]	@ 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001e82:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001e86:	683b      	ldr	r3, [r7, #0]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	069b      	lsls	r3, r3, #26
 8001e8c:	429a      	cmp	r2, r3
 8001e8e:	d107      	bne.n	8001ea0 <HAL_ADC_ConfigChannel+0x31c>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8001e9e:	66da      	str	r2, [r3, #108]	@ 0x6c
      }
      break;
 8001ea0:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	689b      	ldr	r3, [r3, #8]
 8001ea8:	f003 0303 	and.w	r3, r3, #3
 8001eac:	2b01      	cmp	r3, #1
 8001eae:	d108      	bne.n	8001ec2 <HAL_ADC_ConfigChannel+0x33e>
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	f003 0301 	and.w	r3, r3, #1
 8001eba:	2b01      	cmp	r3, #1
 8001ebc:	d101      	bne.n	8001ec2 <HAL_ADC_ConfigChannel+0x33e>
 8001ebe:	2301      	movs	r3, #1
 8001ec0:	e000      	b.n	8001ec4 <HAL_ADC_ConfigChannel+0x340>
 8001ec2:	2300      	movs	r3, #0
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	f040 8131 	bne.w	800212c <HAL_ADC_ConfigChannel+0x5a8>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8001eca:	683b      	ldr	r3, [r7, #0]
 8001ecc:	68db      	ldr	r3, [r3, #12]
 8001ece:	2b01      	cmp	r3, #1
 8001ed0:	d00f      	beq.n	8001ef2 <HAL_ADC_ConfigChannel+0x36e>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	f8d3 10b0 	ldr.w	r1, [r3, #176]	@ 0xb0
 8001eda:	683b      	ldr	r3, [r7, #0]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	2201      	movs	r2, #1
 8001ee0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ee4:	43da      	mvns	r2, r3
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	400a      	ands	r2, r1
 8001eec:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
 8001ef0:	e049      	b.n	8001f86 <HAL_ADC_ConfigChannel+0x402>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	f8d3 10b0 	ldr.w	r1, [r3, #176]	@ 0xb0
 8001efa:	683b      	ldr	r3, [r7, #0]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	2201      	movs	r2, #1
 8001f00:	409a      	lsls	r2, r3
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	430a      	orrs	r2, r1
 8001f08:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 8001f0c:	683b      	ldr	r3, [r7, #0]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	2b09      	cmp	r3, #9
 8001f12:	d91c      	bls.n	8001f4e <HAL_ADC_ConfigChannel+0x3ca>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	6999      	ldr	r1, [r3, #24]
 8001f1a:	683b      	ldr	r3, [r7, #0]
 8001f1c:	681a      	ldr	r2, [r3, #0]
 8001f1e:	4613      	mov	r3, r2
 8001f20:	005b      	lsls	r3, r3, #1
 8001f22:	4413      	add	r3, r2
 8001f24:	3b1b      	subs	r3, #27
 8001f26:	2207      	movs	r2, #7
 8001f28:	fa02 f303 	lsl.w	r3, r2, r3
 8001f2c:	43db      	mvns	r3, r3
 8001f2e:	4019      	ands	r1, r3
 8001f30:	683b      	ldr	r3, [r7, #0]
 8001f32:	6898      	ldr	r0, [r3, #8]
 8001f34:	683b      	ldr	r3, [r7, #0]
 8001f36:	681a      	ldr	r2, [r3, #0]
 8001f38:	4613      	mov	r3, r2
 8001f3a:	005b      	lsls	r3, r3, #1
 8001f3c:	4413      	add	r3, r2
 8001f3e:	3b1b      	subs	r3, #27
 8001f40:	fa00 f203 	lsl.w	r2, r0, r3
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	430a      	orrs	r2, r1
 8001f4a:	619a      	str	r2, [r3, #24]
 8001f4c:	e01b      	b.n	8001f86 <HAL_ADC_ConfigChannel+0x402>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	6959      	ldr	r1, [r3, #20]
 8001f54:	683b      	ldr	r3, [r7, #0]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	1c5a      	adds	r2, r3, #1
 8001f5a:	4613      	mov	r3, r2
 8001f5c:	005b      	lsls	r3, r3, #1
 8001f5e:	4413      	add	r3, r2
 8001f60:	2207      	movs	r2, #7
 8001f62:	fa02 f303 	lsl.w	r3, r2, r3
 8001f66:	43db      	mvns	r3, r3
 8001f68:	4019      	ands	r1, r3
 8001f6a:	683b      	ldr	r3, [r7, #0]
 8001f6c:	6898      	ldr	r0, [r3, #8]
 8001f6e:	683b      	ldr	r3, [r7, #0]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	1c5a      	adds	r2, r3, #1
 8001f74:	4613      	mov	r3, r2
 8001f76:	005b      	lsls	r3, r3, #1
 8001f78:	4413      	add	r3, r2
 8001f7a:	fa00 f203 	lsl.w	r2, r0, r3
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	430a      	orrs	r2, r1
 8001f84:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001f8e:	d004      	beq.n	8001f9a <HAL_ADC_ConfigChannel+0x416>
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	4a18      	ldr	r2, [pc, #96]	@ (8001ff8 <HAL_ADC_ConfigChannel+0x474>)
 8001f96:	4293      	cmp	r3, r2
 8001f98:	d101      	bne.n	8001f9e <HAL_ADC_ConfigChannel+0x41a>
 8001f9a:	4b18      	ldr	r3, [pc, #96]	@ (8001ffc <HAL_ADC_ConfigChannel+0x478>)
 8001f9c:	e000      	b.n	8001fa0 <HAL_ADC_ConfigChannel+0x41c>
 8001f9e:	4b18      	ldr	r3, [pc, #96]	@ (8002000 <HAL_ADC_ConfigChannel+0x47c>)
 8001fa0:	65fb      	str	r3, [r7, #92]	@ 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001fa2:	683b      	ldr	r3, [r7, #0]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	2b10      	cmp	r3, #16
 8001fa8:	d105      	bne.n	8001fb6 <HAL_ADC_ConfigChannel+0x432>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8001faa:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001fac:	689b      	ldr	r3, [r3, #8]
 8001fae:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d015      	beq.n	8001fe2 <HAL_ADC_ConfigChannel+0x45e>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8001fb6:	683b      	ldr	r3, [r7, #0]
 8001fb8:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8001fba:	2b11      	cmp	r3, #17
 8001fbc:	d105      	bne.n	8001fca <HAL_ADC_ConfigChannel+0x446>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8001fbe:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001fc0:	689b      	ldr	r3, [r3, #8]
 8001fc2:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d00b      	beq.n	8001fe2 <HAL_ADC_ConfigChannel+0x45e>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8001fca:	683b      	ldr	r3, [r7, #0]
 8001fcc:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8001fce:	2b12      	cmp	r3, #18
 8001fd0:	f040 80ac 	bne.w	800212c <HAL_ADC_ConfigChannel+0x5a8>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 8001fd4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001fd6:	689b      	ldr	r3, [r3, #8]
 8001fd8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	f040 80a5 	bne.w	800212c <HAL_ADC_ConfigChannel+0x5a8>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001fea:	d10b      	bne.n	8002004 <HAL_ADC_ConfigChannel+0x480>
 8001fec:	4b02      	ldr	r3, [pc, #8]	@ (8001ff8 <HAL_ADC_ConfigChannel+0x474>)
 8001fee:	60fb      	str	r3, [r7, #12]
 8001ff0:	e023      	b.n	800203a <HAL_ADC_ConfigChannel+0x4b6>
 8001ff2:	bf00      	nop
 8001ff4:	83fff000 	.word	0x83fff000
 8001ff8:	50000100 	.word	0x50000100
 8001ffc:	50000300 	.word	0x50000300
 8002000:	50000700 	.word	0x50000700
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	4a4e      	ldr	r2, [pc, #312]	@ (8002144 <HAL_ADC_ConfigChannel+0x5c0>)
 800200a:	4293      	cmp	r3, r2
 800200c:	d103      	bne.n	8002016 <HAL_ADC_ConfigChannel+0x492>
 800200e:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8002012:	60fb      	str	r3, [r7, #12]
 8002014:	e011      	b.n	800203a <HAL_ADC_ConfigChannel+0x4b6>
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	4a4b      	ldr	r2, [pc, #300]	@ (8002148 <HAL_ADC_ConfigChannel+0x5c4>)
 800201c:	4293      	cmp	r3, r2
 800201e:	d102      	bne.n	8002026 <HAL_ADC_ConfigChannel+0x4a2>
 8002020:	4b4a      	ldr	r3, [pc, #296]	@ (800214c <HAL_ADC_ConfigChannel+0x5c8>)
 8002022:	60fb      	str	r3, [r7, #12]
 8002024:	e009      	b.n	800203a <HAL_ADC_ConfigChannel+0x4b6>
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	4a48      	ldr	r2, [pc, #288]	@ (800214c <HAL_ADC_ConfigChannel+0x5c8>)
 800202c:	4293      	cmp	r3, r2
 800202e:	d102      	bne.n	8002036 <HAL_ADC_ConfigChannel+0x4b2>
 8002030:	4b45      	ldr	r3, [pc, #276]	@ (8002148 <HAL_ADC_ConfigChannel+0x5c4>)
 8002032:	60fb      	str	r3, [r7, #12]
 8002034:	e001      	b.n	800203a <HAL_ADC_ConfigChannel+0x4b6>
 8002036:	2300      	movs	r3, #0
 8002038:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	689b      	ldr	r3, [r3, #8]
 8002040:	f003 0303 	and.w	r3, r3, #3
 8002044:	2b01      	cmp	r3, #1
 8002046:	d108      	bne.n	800205a <HAL_ADC_ConfigChannel+0x4d6>
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	f003 0301 	and.w	r3, r3, #1
 8002052:	2b01      	cmp	r3, #1
 8002054:	d101      	bne.n	800205a <HAL_ADC_ConfigChannel+0x4d6>
 8002056:	2301      	movs	r3, #1
 8002058:	e000      	b.n	800205c <HAL_ADC_ConfigChannel+0x4d8>
 800205a:	2300      	movs	r3, #0
 800205c:	2b00      	cmp	r3, #0
 800205e:	d150      	bne.n	8002102 <HAL_ADC_ConfigChannel+0x57e>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8002060:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8002062:	2b00      	cmp	r3, #0
 8002064:	d010      	beq.n	8002088 <HAL_ADC_ConfigChannel+0x504>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	689b      	ldr	r3, [r3, #8]
 800206a:	f003 0303 	and.w	r3, r3, #3
 800206e:	2b01      	cmp	r3, #1
 8002070:	d107      	bne.n	8002082 <HAL_ADC_ConfigChannel+0x4fe>
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	f003 0301 	and.w	r3, r3, #1
 800207a:	2b01      	cmp	r3, #1
 800207c:	d101      	bne.n	8002082 <HAL_ADC_ConfigChannel+0x4fe>
 800207e:	2301      	movs	r3, #1
 8002080:	e000      	b.n	8002084 <HAL_ADC_ConfigChannel+0x500>
 8002082:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8002084:	2b00      	cmp	r3, #0
 8002086:	d13c      	bne.n	8002102 <HAL_ADC_ConfigChannel+0x57e>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002088:	683b      	ldr	r3, [r7, #0]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	2b10      	cmp	r3, #16
 800208e:	d11d      	bne.n	80020cc <HAL_ADC_ConfigChannel+0x548>
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002098:	d118      	bne.n	80020cc <HAL_ADC_ConfigChannel+0x548>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 800209a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800209c:	689b      	ldr	r3, [r3, #8]
 800209e:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 80020a2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80020a4:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80020a6:	4b2a      	ldr	r3, [pc, #168]	@ (8002150 <HAL_ADC_ConfigChannel+0x5cc>)
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	4a2a      	ldr	r2, [pc, #168]	@ (8002154 <HAL_ADC_ConfigChannel+0x5d0>)
 80020ac:	fba2 2303 	umull	r2, r3, r2, r3
 80020b0:	0c9a      	lsrs	r2, r3, #18
 80020b2:	4613      	mov	r3, r2
 80020b4:	009b      	lsls	r3, r3, #2
 80020b6:	4413      	add	r3, r2
 80020b8:	005b      	lsls	r3, r3, #1
 80020ba:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80020bc:	e002      	b.n	80020c4 <HAL_ADC_ConfigChannel+0x540>
          {
            wait_loop_index--;
 80020be:	68bb      	ldr	r3, [r7, #8]
 80020c0:	3b01      	subs	r3, #1
 80020c2:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80020c4:	68bb      	ldr	r3, [r7, #8]
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d1f9      	bne.n	80020be <HAL_ADC_ConfigChannel+0x53a>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80020ca:	e02e      	b.n	800212a <HAL_ADC_ConfigChannel+0x5a6>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 80020cc:	683b      	ldr	r3, [r7, #0]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	2b11      	cmp	r3, #17
 80020d2:	d10b      	bne.n	80020ec <HAL_ADC_ConfigChannel+0x568>
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80020dc:	d106      	bne.n	80020ec <HAL_ADC_ConfigChannel+0x568>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 80020de:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80020e0:	689b      	ldr	r3, [r3, #8]
 80020e2:	f043 7280 	orr.w	r2, r3, #16777216	@ 0x1000000
 80020e6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80020e8:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80020ea:	e01e      	b.n	800212a <HAL_ADC_ConfigChannel+0x5a6>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 80020ec:	683b      	ldr	r3, [r7, #0]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	2b12      	cmp	r3, #18
 80020f2:	d11a      	bne.n	800212a <HAL_ADC_ConfigChannel+0x5a6>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 80020f4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80020f6:	689b      	ldr	r3, [r3, #8]
 80020f8:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 80020fc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80020fe:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002100:	e013      	b.n	800212a <HAL_ADC_ConfigChannel+0x5a6>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002106:	f043 0220 	orr.w	r2, r3, #32
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	641a      	str	r2, [r3, #64]	@ 0x40
        
        tmp_hal_status = HAL_ERROR;
 800210e:	2301      	movs	r3, #1
 8002110:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 8002114:	e00a      	b.n	800212c <HAL_ADC_ConfigChannel+0x5a8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800211a:	f043 0220 	orr.w	r2, r3, #32
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	641a      	str	r2, [r3, #64]	@ 0x40
    
    tmp_hal_status = HAL_ERROR;
 8002122:	2301      	movs	r3, #1
 8002124:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 8002128:	e000      	b.n	800212c <HAL_ADC_ConfigChannel+0x5a8>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 800212a:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	2200      	movs	r2, #0
 8002130:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8002134:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
}
 8002138:	4618      	mov	r0, r3
 800213a:	376c      	adds	r7, #108	@ 0x6c
 800213c:	46bd      	mov	sp, r7
 800213e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002142:	4770      	bx	lr
 8002144:	50000100 	.word	0x50000100
 8002148:	50000400 	.word	0x50000400
 800214c:	50000500 	.word	0x50000500
 8002150:	20000040 	.word	0x20000040
 8002154:	431bde83 	.word	0x431bde83

08002158 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param  hadc ADC handle
  * @param  multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef* hadc, ADC_MultiModeTypeDef* multimode)
{
 8002158:	b480      	push	{r7}
 800215a:	b099      	sub	sp, #100	@ 0x64
 800215c:	af00      	add	r7, sp, #0
 800215e:	6078      	str	r0, [r7, #4]
 8002160:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002162:	2300      	movs	r3, #0
 8002164:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
    assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }
  
  /* Set handle of the other ADC sharing the same common register             */
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002170:	d102      	bne.n	8002178 <HAL_ADCEx_MultiModeConfigChannel+0x20>
 8002172:	4b6d      	ldr	r3, [pc, #436]	@ (8002328 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8002174:	60bb      	str	r3, [r7, #8]
 8002176:	e01a      	b.n	80021ae <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	4a6a      	ldr	r2, [pc, #424]	@ (8002328 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 800217e:	4293      	cmp	r3, r2
 8002180:	d103      	bne.n	800218a <HAL_ADCEx_MultiModeConfigChannel+0x32>
 8002182:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8002186:	60bb      	str	r3, [r7, #8]
 8002188:	e011      	b.n	80021ae <HAL_ADCEx_MultiModeConfigChannel+0x56>
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	4a67      	ldr	r2, [pc, #412]	@ (800232c <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 8002190:	4293      	cmp	r3, r2
 8002192:	d102      	bne.n	800219a <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8002194:	4b66      	ldr	r3, [pc, #408]	@ (8002330 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 8002196:	60bb      	str	r3, [r7, #8]
 8002198:	e009      	b.n	80021ae <HAL_ADCEx_MultiModeConfigChannel+0x56>
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	4a64      	ldr	r2, [pc, #400]	@ (8002330 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 80021a0:	4293      	cmp	r3, r2
 80021a2:	d102      	bne.n	80021aa <HAL_ADCEx_MultiModeConfigChannel+0x52>
 80021a4:	4b61      	ldr	r3, [pc, #388]	@ (800232c <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 80021a6:	60bb      	str	r3, [r7, #8]
 80021a8:	e001      	b.n	80021ae <HAL_ADCEx_MultiModeConfigChannel+0x56>
 80021aa:	2300      	movs	r3, #0
 80021ac:	60bb      	str	r3, [r7, #8]
  if (tmphadcSharingSameCommonRegister.Instance == NULL)
 80021ae:	68bb      	ldr	r3, [r7, #8]
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d101      	bne.n	80021b8 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Return function status */
    return HAL_ERROR;
 80021b4:	2301      	movs	r3, #1
 80021b6:	e0b0      	b.n	800231a <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80021be:	2b01      	cmp	r3, #1
 80021c0:	d101      	bne.n	80021c6 <HAL_ADCEx_MultiModeConfigChannel+0x6e>
 80021c2:	2302      	movs	r3, #2
 80021c4:	e0a9      	b.n	800231a <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	2201      	movs	r2, #1
 80021ca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  if ( (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET) 
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	689b      	ldr	r3, [r3, #8]
 80021d4:	f003 0304 	and.w	r3, r3, #4
 80021d8:	2b00      	cmp	r3, #0
 80021da:	f040 808d 	bne.w	80022f8 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
    && (ADC_IS_CONVERSION_ONGOING_REGULAR(&tmphadcSharingSameCommonRegister) == RESET) )
 80021de:	68bb      	ldr	r3, [r7, #8]
 80021e0:	689b      	ldr	r3, [r3, #8]
 80021e2:	f003 0304 	and.w	r3, r3, #4
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	f040 8086 	bne.w	80022f8 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
  {
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80021f4:	d004      	beq.n	8002200 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	4a4b      	ldr	r2, [pc, #300]	@ (8002328 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 80021fc:	4293      	cmp	r3, r2
 80021fe:	d101      	bne.n	8002204 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8002200:	4b4c      	ldr	r3, [pc, #304]	@ (8002334 <HAL_ADCEx_MultiModeConfigChannel+0x1dc>)
 8002202:	e000      	b.n	8002206 <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8002204:	4b4c      	ldr	r3, [pc, #304]	@ (8002338 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>)
 8002206:	65bb      	str	r3, [r7, #88]	@ 0x58
    
    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8002208:	683b      	ldr	r3, [r7, #0]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	2b00      	cmp	r3, #0
 800220e:	d040      	beq.n	8002292 <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    {
      /* Configuration of ADC common group ADC1&ADC2, ADC3&ADC4 if available    */
      /* (ADC2, ADC3, ADC4 availability depends on STM32 product)               */
      /*  - DMA access mode                                                     */
      MODIFY_REG(tmpADC_Common->CCR                                          ,
 8002210:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002212:	689b      	ldr	r3, [r3, #8]
 8002214:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002218:	683b      	ldr	r3, [r7, #0]
 800221a:	6859      	ldr	r1, [r3, #4]
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8002222:	035b      	lsls	r3, r3, #13
 8002224:	430b      	orrs	r3, r1
 8002226:	431a      	orrs	r2, r3
 8002228:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800222a:	609a      	str	r2, [r3, #8]
      /*       parameters, their setting is bypassed without error reporting    */
      /*       (as it can be the expected behaviour in case of intended action  */
      /*       to update parameter above (which fulfills the ADC state          */
      /*       condition: no conversion on going on group regular)              */
      /*       on the fly).                                                     */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	689b      	ldr	r3, [r3, #8]
 8002232:	f003 0303 	and.w	r3, r3, #3
 8002236:	2b01      	cmp	r3, #1
 8002238:	d108      	bne.n	800224c <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	f003 0301 	and.w	r3, r3, #1
 8002244:	2b01      	cmp	r3, #1
 8002246:	d101      	bne.n	800224c <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 8002248:	2301      	movs	r3, #1
 800224a:	e000      	b.n	800224e <HAL_ADCEx_MultiModeConfigChannel+0xf6>
 800224c:	2300      	movs	r3, #0
 800224e:	2b00      	cmp	r3, #0
 8002250:	d15c      	bne.n	800230c <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8002252:	68bb      	ldr	r3, [r7, #8]
 8002254:	689b      	ldr	r3, [r3, #8]
 8002256:	f003 0303 	and.w	r3, r3, #3
 800225a:	2b01      	cmp	r3, #1
 800225c:	d107      	bne.n	800226e <HAL_ADCEx_MultiModeConfigChannel+0x116>
 800225e:	68bb      	ldr	r3, [r7, #8]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	f003 0301 	and.w	r3, r3, #1
 8002266:	2b01      	cmp	r3, #1
 8002268:	d101      	bne.n	800226e <HAL_ADCEx_MultiModeConfigChannel+0x116>
 800226a:	2301      	movs	r3, #1
 800226c:	e000      	b.n	8002270 <HAL_ADCEx_MultiModeConfigChannel+0x118>
 800226e:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8002270:	2b00      	cmp	r3, #0
 8002272:	d14b      	bne.n	800230c <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        MODIFY_REG(tmpADC_Common->CCR                                          ,
 8002274:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002276:	689b      	ldr	r3, [r3, #8]
 8002278:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 800227c:	f023 030f 	bic.w	r3, r3, #15
 8002280:	683a      	ldr	r2, [r7, #0]
 8002282:	6811      	ldr	r1, [r2, #0]
 8002284:	683a      	ldr	r2, [r7, #0]
 8002286:	6892      	ldr	r2, [r2, #8]
 8002288:	430a      	orrs	r2, r1
 800228a:	431a      	orrs	r2, r3
 800228c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800228e:	609a      	str	r2, [r3, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8002290:	e03c      	b.n	800230c <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
                   multimode->TwoSamplingDelay                                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8002292:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002294:	689b      	ldr	r3, [r3, #8]
 8002296:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800229a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800229c:	609a      	str	r2, [r3, #8]
      
      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	689b      	ldr	r3, [r3, #8]
 80022a4:	f003 0303 	and.w	r3, r3, #3
 80022a8:	2b01      	cmp	r3, #1
 80022aa:	d108      	bne.n	80022be <HAL_ADCEx_MultiModeConfigChannel+0x166>
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	f003 0301 	and.w	r3, r3, #1
 80022b6:	2b01      	cmp	r3, #1
 80022b8:	d101      	bne.n	80022be <HAL_ADCEx_MultiModeConfigChannel+0x166>
 80022ba:	2301      	movs	r3, #1
 80022bc:	e000      	b.n	80022c0 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 80022be:	2300      	movs	r3, #0
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d123      	bne.n	800230c <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 80022c4:	68bb      	ldr	r3, [r7, #8]
 80022c6:	689b      	ldr	r3, [r3, #8]
 80022c8:	f003 0303 	and.w	r3, r3, #3
 80022cc:	2b01      	cmp	r3, #1
 80022ce:	d107      	bne.n	80022e0 <HAL_ADCEx_MultiModeConfigChannel+0x188>
 80022d0:	68bb      	ldr	r3, [r7, #8]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	f003 0301 	and.w	r3, r3, #1
 80022d8:	2b01      	cmp	r3, #1
 80022da:	d101      	bne.n	80022e0 <HAL_ADCEx_MultiModeConfigChannel+0x188>
 80022dc:	2301      	movs	r3, #1
 80022de:	e000      	b.n	80022e2 <HAL_ADCEx_MultiModeConfigChannel+0x18a>
 80022e0:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d112      	bne.n	800230c <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI | ADC_CCR_DELAY);
 80022e6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80022e8:	689b      	ldr	r3, [r3, #8]
 80022ea:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 80022ee:	f023 030f 	bic.w	r3, r3, #15
 80022f2:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80022f4:	6093      	str	r3, [r2, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 80022f6:	e009      	b.n	800230c <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022fc:	f043 0220 	orr.w	r2, r3, #32
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	641a      	str	r2, [r3, #64]	@ 0x40
    
    tmp_hal_status = HAL_ERROR;
 8002304:	2301      	movs	r3, #1
 8002306:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800230a:	e000      	b.n	800230e <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 800230c:	bf00      	nop
  }
    
    
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	2200      	movs	r2, #0
 8002312:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8002316:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
} 
 800231a:	4618      	mov	r0, r3
 800231c:	3764      	adds	r7, #100	@ 0x64
 800231e:	46bd      	mov	sp, r7
 8002320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002324:	4770      	bx	lr
 8002326:	bf00      	nop
 8002328:	50000100 	.word	0x50000100
 800232c:	50000400 	.word	0x50000400
 8002330:	50000500 	.word	0x50000500
 8002334:	50000300 	.word	0x50000300
 8002338:	50000700 	.word	0x50000700

0800233c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 800233c:	b580      	push	{r7, lr}
 800233e:	b084      	sub	sp, #16
 8002340:	af00      	add	r7, sp, #0
 8002342:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002344:	2300      	movs	r3, #0
 8002346:	60fb      	str	r3, [r7, #12]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	689b      	ldr	r3, [r3, #8]
 800234e:	f003 0303 	and.w	r3, r3, #3
 8002352:	2b01      	cmp	r3, #1
 8002354:	d108      	bne.n	8002368 <ADC_Enable+0x2c>
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	f003 0301 	and.w	r3, r3, #1
 8002360:	2b01      	cmp	r3, #1
 8002362:	d101      	bne.n	8002368 <ADC_Enable+0x2c>
 8002364:	2301      	movs	r3, #1
 8002366:	e000      	b.n	800236a <ADC_Enable+0x2e>
 8002368:	2300      	movs	r3, #0
 800236a:	2b00      	cmp	r3, #0
 800236c:	d143      	bne.n	80023f6 <ADC_Enable+0xba>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	689a      	ldr	r2, [r3, #8]
 8002374:	4b22      	ldr	r3, [pc, #136]	@ (8002400 <ADC_Enable+0xc4>)
 8002376:	4013      	ands	r3, r2
 8002378:	2b00      	cmp	r3, #0
 800237a:	d00d      	beq.n	8002398 <ADC_Enable+0x5c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002380:	f043 0210 	orr.w	r2, r3, #16
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	641a      	str	r2, [r3, #64]	@ 0x40
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800238c:	f043 0201 	orr.w	r2, r3, #1
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	645a      	str	r2, [r3, #68]	@ 0x44
      
      return HAL_ERROR;
 8002394:	2301      	movs	r3, #1
 8002396:	e02f      	b.n	80023f8 <ADC_Enable+0xbc>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	689a      	ldr	r2, [r3, #8]
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	f042 0201 	orr.w	r2, r2, #1
 80023a6:	609a      	str	r2, [r3, #8]
    
    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();  
 80023a8:	f7fe ffb6 	bl	8001318 <HAL_GetTick>
 80023ac:	60f8      	str	r0, [r7, #12]
    
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80023ae:	e01b      	b.n	80023e8 <ADC_Enable+0xac>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80023b0:	f7fe ffb2 	bl	8001318 <HAL_GetTick>
 80023b4:	4602      	mov	r2, r0
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	1ad3      	subs	r3, r2, r3
 80023ba:	2b02      	cmp	r3, #2
 80023bc:	d914      	bls.n	80023e8 <ADC_Enable+0xac>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	f003 0301 	and.w	r3, r3, #1
 80023c8:	2b01      	cmp	r3, #1
 80023ca:	d00d      	beq.n	80023e8 <ADC_Enable+0xac>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023d0:	f043 0210 	orr.w	r2, r3, #16
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80023dc:	f043 0201 	orr.w	r2, r3, #1
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	645a      	str	r2, [r3, #68]	@ 0x44

          return HAL_ERROR;
 80023e4:	2301      	movs	r3, #1
 80023e6:	e007      	b.n	80023f8 <ADC_Enable+0xbc>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	f003 0301 	and.w	r3, r3, #1
 80023f2:	2b01      	cmp	r3, #1
 80023f4:	d1dc      	bne.n	80023b0 <ADC_Enable+0x74>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80023f6:	2300      	movs	r3, #0
}
 80023f8:	4618      	mov	r0, r3
 80023fa:	3710      	adds	r7, #16
 80023fc:	46bd      	mov	sp, r7
 80023fe:	bd80      	pop	{r7, pc}
 8002400:	8000003f 	.word	0x8000003f

08002404 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8002404:	b580      	push	{r7, lr}
 8002406:	b084      	sub	sp, #16
 8002408:	af00      	add	r7, sp, #0
 800240a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800240c:	2300      	movs	r3, #0
 800240e:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	689b      	ldr	r3, [r3, #8]
 8002416:	f003 0303 	and.w	r3, r3, #3
 800241a:	2b01      	cmp	r3, #1
 800241c:	d108      	bne.n	8002430 <ADC_Disable+0x2c>
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	f003 0301 	and.w	r3, r3, #1
 8002428:	2b01      	cmp	r3, #1
 800242a:	d101      	bne.n	8002430 <ADC_Disable+0x2c>
 800242c:	2301      	movs	r3, #1
 800242e:	e000      	b.n	8002432 <ADC_Disable+0x2e>
 8002430:	2300      	movs	r3, #0
 8002432:	2b00      	cmp	r3, #0
 8002434:	d047      	beq.n	80024c6 <ADC_Disable+0xc2>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	689b      	ldr	r3, [r3, #8]
 800243c:	f003 030d 	and.w	r3, r3, #13
 8002440:	2b01      	cmp	r3, #1
 8002442:	d10f      	bne.n	8002464 <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	689a      	ldr	r2, [r3, #8]
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	f042 0202 	orr.w	r2, r2, #2
 8002452:	609a      	str	r2, [r3, #8]
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	2203      	movs	r2, #3
 800245a:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 800245c:	f7fe ff5c 	bl	8001318 <HAL_GetTick>
 8002460:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8002462:	e029      	b.n	80024b8 <ADC_Disable+0xb4>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002468:	f043 0210 	orr.w	r2, r3, #16
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	641a      	str	r2, [r3, #64]	@ 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002474:	f043 0201 	orr.w	r2, r3, #1
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	645a      	str	r2, [r3, #68]	@ 0x44
      return HAL_ERROR;
 800247c:	2301      	movs	r3, #1
 800247e:	e023      	b.n	80024c8 <ADC_Disable+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002480:	f7fe ff4a 	bl	8001318 <HAL_GetTick>
 8002484:	4602      	mov	r2, r0
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	1ad3      	subs	r3, r2, r3
 800248a:	2b02      	cmp	r3, #2
 800248c:	d914      	bls.n	80024b8 <ADC_Disable+0xb4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	689b      	ldr	r3, [r3, #8]
 8002494:	f003 0301 	and.w	r3, r3, #1
 8002498:	2b01      	cmp	r3, #1
 800249a:	d10d      	bne.n	80024b8 <ADC_Disable+0xb4>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024a0:	f043 0210 	orr.w	r2, r3, #16
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80024ac:	f043 0201 	orr.w	r2, r3, #1
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	645a      	str	r2, [r3, #68]	@ 0x44

          return HAL_ERROR;
 80024b4:	2301      	movs	r3, #1
 80024b6:	e007      	b.n	80024c8 <ADC_Disable+0xc4>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	689b      	ldr	r3, [r3, #8]
 80024be:	f003 0301 	and.w	r3, r3, #1
 80024c2:	2b01      	cmp	r3, #1
 80024c4:	d0dc      	beq.n	8002480 <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80024c6:	2300      	movs	r3, #0
}
 80024c8:	4618      	mov	r0, r3
 80024ca:	3710      	adds	r7, #16
 80024cc:	46bd      	mov	sp, r7
 80024ce:	bd80      	pop	{r7, pc}

080024d0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80024d0:	b480      	push	{r7}
 80024d2:	b085      	sub	sp, #20
 80024d4:	af00      	add	r7, sp, #0
 80024d6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	f003 0307 	and.w	r3, r3, #7
 80024de:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80024e0:	4b0c      	ldr	r3, [pc, #48]	@ (8002514 <__NVIC_SetPriorityGrouping+0x44>)
 80024e2:	68db      	ldr	r3, [r3, #12]
 80024e4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80024e6:	68ba      	ldr	r2, [r7, #8]
 80024e8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80024ec:	4013      	ands	r3, r2
 80024ee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80024f4:	68bb      	ldr	r3, [r7, #8]
 80024f6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80024f8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80024fc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002500:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002502:	4a04      	ldr	r2, [pc, #16]	@ (8002514 <__NVIC_SetPriorityGrouping+0x44>)
 8002504:	68bb      	ldr	r3, [r7, #8]
 8002506:	60d3      	str	r3, [r2, #12]
}
 8002508:	bf00      	nop
 800250a:	3714      	adds	r7, #20
 800250c:	46bd      	mov	sp, r7
 800250e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002512:	4770      	bx	lr
 8002514:	e000ed00 	.word	0xe000ed00

08002518 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002518:	b480      	push	{r7}
 800251a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800251c:	4b04      	ldr	r3, [pc, #16]	@ (8002530 <__NVIC_GetPriorityGrouping+0x18>)
 800251e:	68db      	ldr	r3, [r3, #12]
 8002520:	0a1b      	lsrs	r3, r3, #8
 8002522:	f003 0307 	and.w	r3, r3, #7
}
 8002526:	4618      	mov	r0, r3
 8002528:	46bd      	mov	sp, r7
 800252a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800252e:	4770      	bx	lr
 8002530:	e000ed00 	.word	0xe000ed00

08002534 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002534:	b480      	push	{r7}
 8002536:	b083      	sub	sp, #12
 8002538:	af00      	add	r7, sp, #0
 800253a:	4603      	mov	r3, r0
 800253c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800253e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002542:	2b00      	cmp	r3, #0
 8002544:	db0b      	blt.n	800255e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002546:	79fb      	ldrb	r3, [r7, #7]
 8002548:	f003 021f 	and.w	r2, r3, #31
 800254c:	4907      	ldr	r1, [pc, #28]	@ (800256c <__NVIC_EnableIRQ+0x38>)
 800254e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002552:	095b      	lsrs	r3, r3, #5
 8002554:	2001      	movs	r0, #1
 8002556:	fa00 f202 	lsl.w	r2, r0, r2
 800255a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800255e:	bf00      	nop
 8002560:	370c      	adds	r7, #12
 8002562:	46bd      	mov	sp, r7
 8002564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002568:	4770      	bx	lr
 800256a:	bf00      	nop
 800256c:	e000e100 	.word	0xe000e100

08002570 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002570:	b480      	push	{r7}
 8002572:	b083      	sub	sp, #12
 8002574:	af00      	add	r7, sp, #0
 8002576:	4603      	mov	r3, r0
 8002578:	6039      	str	r1, [r7, #0]
 800257a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800257c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002580:	2b00      	cmp	r3, #0
 8002582:	db0a      	blt.n	800259a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002584:	683b      	ldr	r3, [r7, #0]
 8002586:	b2da      	uxtb	r2, r3
 8002588:	490c      	ldr	r1, [pc, #48]	@ (80025bc <__NVIC_SetPriority+0x4c>)
 800258a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800258e:	0112      	lsls	r2, r2, #4
 8002590:	b2d2      	uxtb	r2, r2
 8002592:	440b      	add	r3, r1
 8002594:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002598:	e00a      	b.n	80025b0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800259a:	683b      	ldr	r3, [r7, #0]
 800259c:	b2da      	uxtb	r2, r3
 800259e:	4908      	ldr	r1, [pc, #32]	@ (80025c0 <__NVIC_SetPriority+0x50>)
 80025a0:	79fb      	ldrb	r3, [r7, #7]
 80025a2:	f003 030f 	and.w	r3, r3, #15
 80025a6:	3b04      	subs	r3, #4
 80025a8:	0112      	lsls	r2, r2, #4
 80025aa:	b2d2      	uxtb	r2, r2
 80025ac:	440b      	add	r3, r1
 80025ae:	761a      	strb	r2, [r3, #24]
}
 80025b0:	bf00      	nop
 80025b2:	370c      	adds	r7, #12
 80025b4:	46bd      	mov	sp, r7
 80025b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ba:	4770      	bx	lr
 80025bc:	e000e100 	.word	0xe000e100
 80025c0:	e000ed00 	.word	0xe000ed00

080025c4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80025c4:	b480      	push	{r7}
 80025c6:	b089      	sub	sp, #36	@ 0x24
 80025c8:	af00      	add	r7, sp, #0
 80025ca:	60f8      	str	r0, [r7, #12]
 80025cc:	60b9      	str	r1, [r7, #8]
 80025ce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	f003 0307 	and.w	r3, r3, #7
 80025d6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80025d8:	69fb      	ldr	r3, [r7, #28]
 80025da:	f1c3 0307 	rsb	r3, r3, #7
 80025de:	2b04      	cmp	r3, #4
 80025e0:	bf28      	it	cs
 80025e2:	2304      	movcs	r3, #4
 80025e4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80025e6:	69fb      	ldr	r3, [r7, #28]
 80025e8:	3304      	adds	r3, #4
 80025ea:	2b06      	cmp	r3, #6
 80025ec:	d902      	bls.n	80025f4 <NVIC_EncodePriority+0x30>
 80025ee:	69fb      	ldr	r3, [r7, #28]
 80025f0:	3b03      	subs	r3, #3
 80025f2:	e000      	b.n	80025f6 <NVIC_EncodePriority+0x32>
 80025f4:	2300      	movs	r3, #0
 80025f6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80025f8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80025fc:	69bb      	ldr	r3, [r7, #24]
 80025fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002602:	43da      	mvns	r2, r3
 8002604:	68bb      	ldr	r3, [r7, #8]
 8002606:	401a      	ands	r2, r3
 8002608:	697b      	ldr	r3, [r7, #20]
 800260a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800260c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002610:	697b      	ldr	r3, [r7, #20]
 8002612:	fa01 f303 	lsl.w	r3, r1, r3
 8002616:	43d9      	mvns	r1, r3
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800261c:	4313      	orrs	r3, r2
         );
}
 800261e:	4618      	mov	r0, r3
 8002620:	3724      	adds	r7, #36	@ 0x24
 8002622:	46bd      	mov	sp, r7
 8002624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002628:	4770      	bx	lr
	...

0800262c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800262c:	b580      	push	{r7, lr}
 800262e:	b082      	sub	sp, #8
 8002630:	af00      	add	r7, sp, #0
 8002632:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	3b01      	subs	r3, #1
 8002638:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800263c:	d301      	bcc.n	8002642 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800263e:	2301      	movs	r3, #1
 8002640:	e00f      	b.n	8002662 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002642:	4a0a      	ldr	r2, [pc, #40]	@ (800266c <SysTick_Config+0x40>)
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	3b01      	subs	r3, #1
 8002648:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800264a:	210f      	movs	r1, #15
 800264c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002650:	f7ff ff8e 	bl	8002570 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002654:	4b05      	ldr	r3, [pc, #20]	@ (800266c <SysTick_Config+0x40>)
 8002656:	2200      	movs	r2, #0
 8002658:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800265a:	4b04      	ldr	r3, [pc, #16]	@ (800266c <SysTick_Config+0x40>)
 800265c:	2207      	movs	r2, #7
 800265e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002660:	2300      	movs	r3, #0
}
 8002662:	4618      	mov	r0, r3
 8002664:	3708      	adds	r7, #8
 8002666:	46bd      	mov	sp, r7
 8002668:	bd80      	pop	{r7, pc}
 800266a:	bf00      	nop
 800266c:	e000e010 	.word	0xe000e010

08002670 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002670:	b580      	push	{r7, lr}
 8002672:	b082      	sub	sp, #8
 8002674:	af00      	add	r7, sp, #0
 8002676:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002678:	6878      	ldr	r0, [r7, #4]
 800267a:	f7ff ff29 	bl	80024d0 <__NVIC_SetPriorityGrouping>
}
 800267e:	bf00      	nop
 8002680:	3708      	adds	r7, #8
 8002682:	46bd      	mov	sp, r7
 8002684:	bd80      	pop	{r7, pc}

08002686 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002686:	b580      	push	{r7, lr}
 8002688:	b086      	sub	sp, #24
 800268a:	af00      	add	r7, sp, #0
 800268c:	4603      	mov	r3, r0
 800268e:	60b9      	str	r1, [r7, #8]
 8002690:	607a      	str	r2, [r7, #4]
 8002692:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002694:	2300      	movs	r3, #0
 8002696:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002698:	f7ff ff3e 	bl	8002518 <__NVIC_GetPriorityGrouping>
 800269c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800269e:	687a      	ldr	r2, [r7, #4]
 80026a0:	68b9      	ldr	r1, [r7, #8]
 80026a2:	6978      	ldr	r0, [r7, #20]
 80026a4:	f7ff ff8e 	bl	80025c4 <NVIC_EncodePriority>
 80026a8:	4602      	mov	r2, r0
 80026aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80026ae:	4611      	mov	r1, r2
 80026b0:	4618      	mov	r0, r3
 80026b2:	f7ff ff5d 	bl	8002570 <__NVIC_SetPriority>
}
 80026b6:	bf00      	nop
 80026b8:	3718      	adds	r7, #24
 80026ba:	46bd      	mov	sp, r7
 80026bc:	bd80      	pop	{r7, pc}

080026be <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80026be:	b580      	push	{r7, lr}
 80026c0:	b082      	sub	sp, #8
 80026c2:	af00      	add	r7, sp, #0
 80026c4:	4603      	mov	r3, r0
 80026c6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80026c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026cc:	4618      	mov	r0, r3
 80026ce:	f7ff ff31 	bl	8002534 <__NVIC_EnableIRQ>
}
 80026d2:	bf00      	nop
 80026d4:	3708      	adds	r7, #8
 80026d6:	46bd      	mov	sp, r7
 80026d8:	bd80      	pop	{r7, pc}

080026da <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80026da:	b580      	push	{r7, lr}
 80026dc:	b082      	sub	sp, #8
 80026de:	af00      	add	r7, sp, #0
 80026e0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80026e2:	6878      	ldr	r0, [r7, #4]
 80026e4:	f7ff ffa2 	bl	800262c <SysTick_Config>
 80026e8:	4603      	mov	r3, r0
}
 80026ea:	4618      	mov	r0, r3
 80026ec:	3708      	adds	r7, #8
 80026ee:	46bd      	mov	sp, r7
 80026f0:	bd80      	pop	{r7, pc}
	...

080026f4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80026f4:	b480      	push	{r7}
 80026f6:	b087      	sub	sp, #28
 80026f8:	af00      	add	r7, sp, #0
 80026fa:	6078      	str	r0, [r7, #4]
 80026fc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80026fe:	2300      	movs	r3, #0
 8002700:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002702:	e154      	b.n	80029ae <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002704:	683b      	ldr	r3, [r7, #0]
 8002706:	681a      	ldr	r2, [r3, #0]
 8002708:	2101      	movs	r1, #1
 800270a:	697b      	ldr	r3, [r7, #20]
 800270c:	fa01 f303 	lsl.w	r3, r1, r3
 8002710:	4013      	ands	r3, r2
 8002712:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	2b00      	cmp	r3, #0
 8002718:	f000 8146 	beq.w	80029a8 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800271c:	683b      	ldr	r3, [r7, #0]
 800271e:	685b      	ldr	r3, [r3, #4]
 8002720:	f003 0303 	and.w	r3, r3, #3
 8002724:	2b01      	cmp	r3, #1
 8002726:	d005      	beq.n	8002734 <HAL_GPIO_Init+0x40>
 8002728:	683b      	ldr	r3, [r7, #0]
 800272a:	685b      	ldr	r3, [r3, #4]
 800272c:	f003 0303 	and.w	r3, r3, #3
 8002730:	2b02      	cmp	r3, #2
 8002732:	d130      	bne.n	8002796 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	689b      	ldr	r3, [r3, #8]
 8002738:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800273a:	697b      	ldr	r3, [r7, #20]
 800273c:	005b      	lsls	r3, r3, #1
 800273e:	2203      	movs	r2, #3
 8002740:	fa02 f303 	lsl.w	r3, r2, r3
 8002744:	43db      	mvns	r3, r3
 8002746:	693a      	ldr	r2, [r7, #16]
 8002748:	4013      	ands	r3, r2
 800274a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800274c:	683b      	ldr	r3, [r7, #0]
 800274e:	68da      	ldr	r2, [r3, #12]
 8002750:	697b      	ldr	r3, [r7, #20]
 8002752:	005b      	lsls	r3, r3, #1
 8002754:	fa02 f303 	lsl.w	r3, r2, r3
 8002758:	693a      	ldr	r2, [r7, #16]
 800275a:	4313      	orrs	r3, r2
 800275c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	693a      	ldr	r2, [r7, #16]
 8002762:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	685b      	ldr	r3, [r3, #4]
 8002768:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800276a:	2201      	movs	r2, #1
 800276c:	697b      	ldr	r3, [r7, #20]
 800276e:	fa02 f303 	lsl.w	r3, r2, r3
 8002772:	43db      	mvns	r3, r3
 8002774:	693a      	ldr	r2, [r7, #16]
 8002776:	4013      	ands	r3, r2
 8002778:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800277a:	683b      	ldr	r3, [r7, #0]
 800277c:	685b      	ldr	r3, [r3, #4]
 800277e:	091b      	lsrs	r3, r3, #4
 8002780:	f003 0201 	and.w	r2, r3, #1
 8002784:	697b      	ldr	r3, [r7, #20]
 8002786:	fa02 f303 	lsl.w	r3, r2, r3
 800278a:	693a      	ldr	r2, [r7, #16]
 800278c:	4313      	orrs	r3, r2
 800278e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	693a      	ldr	r2, [r7, #16]
 8002794:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002796:	683b      	ldr	r3, [r7, #0]
 8002798:	685b      	ldr	r3, [r3, #4]
 800279a:	f003 0303 	and.w	r3, r3, #3
 800279e:	2b03      	cmp	r3, #3
 80027a0:	d017      	beq.n	80027d2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	68db      	ldr	r3, [r3, #12]
 80027a6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80027a8:	697b      	ldr	r3, [r7, #20]
 80027aa:	005b      	lsls	r3, r3, #1
 80027ac:	2203      	movs	r2, #3
 80027ae:	fa02 f303 	lsl.w	r3, r2, r3
 80027b2:	43db      	mvns	r3, r3
 80027b4:	693a      	ldr	r2, [r7, #16]
 80027b6:	4013      	ands	r3, r2
 80027b8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80027ba:	683b      	ldr	r3, [r7, #0]
 80027bc:	689a      	ldr	r2, [r3, #8]
 80027be:	697b      	ldr	r3, [r7, #20]
 80027c0:	005b      	lsls	r3, r3, #1
 80027c2:	fa02 f303 	lsl.w	r3, r2, r3
 80027c6:	693a      	ldr	r2, [r7, #16]
 80027c8:	4313      	orrs	r3, r2
 80027ca:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	693a      	ldr	r2, [r7, #16]
 80027d0:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80027d2:	683b      	ldr	r3, [r7, #0]
 80027d4:	685b      	ldr	r3, [r3, #4]
 80027d6:	f003 0303 	and.w	r3, r3, #3
 80027da:	2b02      	cmp	r3, #2
 80027dc:	d123      	bne.n	8002826 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80027de:	697b      	ldr	r3, [r7, #20]
 80027e0:	08da      	lsrs	r2, r3, #3
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	3208      	adds	r2, #8
 80027e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80027ea:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80027ec:	697b      	ldr	r3, [r7, #20]
 80027ee:	f003 0307 	and.w	r3, r3, #7
 80027f2:	009b      	lsls	r3, r3, #2
 80027f4:	220f      	movs	r2, #15
 80027f6:	fa02 f303 	lsl.w	r3, r2, r3
 80027fa:	43db      	mvns	r3, r3
 80027fc:	693a      	ldr	r2, [r7, #16]
 80027fe:	4013      	ands	r3, r2
 8002800:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002802:	683b      	ldr	r3, [r7, #0]
 8002804:	691a      	ldr	r2, [r3, #16]
 8002806:	697b      	ldr	r3, [r7, #20]
 8002808:	f003 0307 	and.w	r3, r3, #7
 800280c:	009b      	lsls	r3, r3, #2
 800280e:	fa02 f303 	lsl.w	r3, r2, r3
 8002812:	693a      	ldr	r2, [r7, #16]
 8002814:	4313      	orrs	r3, r2
 8002816:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002818:	697b      	ldr	r3, [r7, #20]
 800281a:	08da      	lsrs	r2, r3, #3
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	3208      	adds	r2, #8
 8002820:	6939      	ldr	r1, [r7, #16]
 8002822:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 800282c:	697b      	ldr	r3, [r7, #20]
 800282e:	005b      	lsls	r3, r3, #1
 8002830:	2203      	movs	r2, #3
 8002832:	fa02 f303 	lsl.w	r3, r2, r3
 8002836:	43db      	mvns	r3, r3
 8002838:	693a      	ldr	r2, [r7, #16]
 800283a:	4013      	ands	r3, r2
 800283c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800283e:	683b      	ldr	r3, [r7, #0]
 8002840:	685b      	ldr	r3, [r3, #4]
 8002842:	f003 0203 	and.w	r2, r3, #3
 8002846:	697b      	ldr	r3, [r7, #20]
 8002848:	005b      	lsls	r3, r3, #1
 800284a:	fa02 f303 	lsl.w	r3, r2, r3
 800284e:	693a      	ldr	r2, [r7, #16]
 8002850:	4313      	orrs	r3, r2
 8002852:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	693a      	ldr	r2, [r7, #16]
 8002858:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800285a:	683b      	ldr	r3, [r7, #0]
 800285c:	685b      	ldr	r3, [r3, #4]
 800285e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002862:	2b00      	cmp	r3, #0
 8002864:	f000 80a0 	beq.w	80029a8 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002868:	4b58      	ldr	r3, [pc, #352]	@ (80029cc <HAL_GPIO_Init+0x2d8>)
 800286a:	699b      	ldr	r3, [r3, #24]
 800286c:	4a57      	ldr	r2, [pc, #348]	@ (80029cc <HAL_GPIO_Init+0x2d8>)
 800286e:	f043 0301 	orr.w	r3, r3, #1
 8002872:	6193      	str	r3, [r2, #24]
 8002874:	4b55      	ldr	r3, [pc, #340]	@ (80029cc <HAL_GPIO_Init+0x2d8>)
 8002876:	699b      	ldr	r3, [r3, #24]
 8002878:	f003 0301 	and.w	r3, r3, #1
 800287c:	60bb      	str	r3, [r7, #8]
 800287e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002880:	4a53      	ldr	r2, [pc, #332]	@ (80029d0 <HAL_GPIO_Init+0x2dc>)
 8002882:	697b      	ldr	r3, [r7, #20]
 8002884:	089b      	lsrs	r3, r3, #2
 8002886:	3302      	adds	r3, #2
 8002888:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800288c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800288e:	697b      	ldr	r3, [r7, #20]
 8002890:	f003 0303 	and.w	r3, r3, #3
 8002894:	009b      	lsls	r3, r3, #2
 8002896:	220f      	movs	r2, #15
 8002898:	fa02 f303 	lsl.w	r3, r2, r3
 800289c:	43db      	mvns	r3, r3
 800289e:	693a      	ldr	r2, [r7, #16]
 80028a0:	4013      	ands	r3, r2
 80028a2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80028aa:	d019      	beq.n	80028e0 <HAL_GPIO_Init+0x1ec>
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	4a49      	ldr	r2, [pc, #292]	@ (80029d4 <HAL_GPIO_Init+0x2e0>)
 80028b0:	4293      	cmp	r3, r2
 80028b2:	d013      	beq.n	80028dc <HAL_GPIO_Init+0x1e8>
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	4a48      	ldr	r2, [pc, #288]	@ (80029d8 <HAL_GPIO_Init+0x2e4>)
 80028b8:	4293      	cmp	r3, r2
 80028ba:	d00d      	beq.n	80028d8 <HAL_GPIO_Init+0x1e4>
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	4a47      	ldr	r2, [pc, #284]	@ (80029dc <HAL_GPIO_Init+0x2e8>)
 80028c0:	4293      	cmp	r3, r2
 80028c2:	d007      	beq.n	80028d4 <HAL_GPIO_Init+0x1e0>
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	4a46      	ldr	r2, [pc, #280]	@ (80029e0 <HAL_GPIO_Init+0x2ec>)
 80028c8:	4293      	cmp	r3, r2
 80028ca:	d101      	bne.n	80028d0 <HAL_GPIO_Init+0x1dc>
 80028cc:	2304      	movs	r3, #4
 80028ce:	e008      	b.n	80028e2 <HAL_GPIO_Init+0x1ee>
 80028d0:	2305      	movs	r3, #5
 80028d2:	e006      	b.n	80028e2 <HAL_GPIO_Init+0x1ee>
 80028d4:	2303      	movs	r3, #3
 80028d6:	e004      	b.n	80028e2 <HAL_GPIO_Init+0x1ee>
 80028d8:	2302      	movs	r3, #2
 80028da:	e002      	b.n	80028e2 <HAL_GPIO_Init+0x1ee>
 80028dc:	2301      	movs	r3, #1
 80028de:	e000      	b.n	80028e2 <HAL_GPIO_Init+0x1ee>
 80028e0:	2300      	movs	r3, #0
 80028e2:	697a      	ldr	r2, [r7, #20]
 80028e4:	f002 0203 	and.w	r2, r2, #3
 80028e8:	0092      	lsls	r2, r2, #2
 80028ea:	4093      	lsls	r3, r2
 80028ec:	693a      	ldr	r2, [r7, #16]
 80028ee:	4313      	orrs	r3, r2
 80028f0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80028f2:	4937      	ldr	r1, [pc, #220]	@ (80029d0 <HAL_GPIO_Init+0x2dc>)
 80028f4:	697b      	ldr	r3, [r7, #20]
 80028f6:	089b      	lsrs	r3, r3, #2
 80028f8:	3302      	adds	r3, #2
 80028fa:	693a      	ldr	r2, [r7, #16]
 80028fc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002900:	4b38      	ldr	r3, [pc, #224]	@ (80029e4 <HAL_GPIO_Init+0x2f0>)
 8002902:	689b      	ldr	r3, [r3, #8]
 8002904:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	43db      	mvns	r3, r3
 800290a:	693a      	ldr	r2, [r7, #16]
 800290c:	4013      	ands	r3, r2
 800290e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002910:	683b      	ldr	r3, [r7, #0]
 8002912:	685b      	ldr	r3, [r3, #4]
 8002914:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002918:	2b00      	cmp	r3, #0
 800291a:	d003      	beq.n	8002924 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 800291c:	693a      	ldr	r2, [r7, #16]
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	4313      	orrs	r3, r2
 8002922:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002924:	4a2f      	ldr	r2, [pc, #188]	@ (80029e4 <HAL_GPIO_Init+0x2f0>)
 8002926:	693b      	ldr	r3, [r7, #16]
 8002928:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800292a:	4b2e      	ldr	r3, [pc, #184]	@ (80029e4 <HAL_GPIO_Init+0x2f0>)
 800292c:	68db      	ldr	r3, [r3, #12]
 800292e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	43db      	mvns	r3, r3
 8002934:	693a      	ldr	r2, [r7, #16]
 8002936:	4013      	ands	r3, r2
 8002938:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800293a:	683b      	ldr	r3, [r7, #0]
 800293c:	685b      	ldr	r3, [r3, #4]
 800293e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002942:	2b00      	cmp	r3, #0
 8002944:	d003      	beq.n	800294e <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8002946:	693a      	ldr	r2, [r7, #16]
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	4313      	orrs	r3, r2
 800294c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800294e:	4a25      	ldr	r2, [pc, #148]	@ (80029e4 <HAL_GPIO_Init+0x2f0>)
 8002950:	693b      	ldr	r3, [r7, #16]
 8002952:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002954:	4b23      	ldr	r3, [pc, #140]	@ (80029e4 <HAL_GPIO_Init+0x2f0>)
 8002956:	685b      	ldr	r3, [r3, #4]
 8002958:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	43db      	mvns	r3, r3
 800295e:	693a      	ldr	r2, [r7, #16]
 8002960:	4013      	ands	r3, r2
 8002962:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002964:	683b      	ldr	r3, [r7, #0]
 8002966:	685b      	ldr	r3, [r3, #4]
 8002968:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800296c:	2b00      	cmp	r3, #0
 800296e:	d003      	beq.n	8002978 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8002970:	693a      	ldr	r2, [r7, #16]
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	4313      	orrs	r3, r2
 8002976:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002978:	4a1a      	ldr	r2, [pc, #104]	@ (80029e4 <HAL_GPIO_Init+0x2f0>)
 800297a:	693b      	ldr	r3, [r7, #16]
 800297c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800297e:	4b19      	ldr	r3, [pc, #100]	@ (80029e4 <HAL_GPIO_Init+0x2f0>)
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	43db      	mvns	r3, r3
 8002988:	693a      	ldr	r2, [r7, #16]
 800298a:	4013      	ands	r3, r2
 800298c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800298e:	683b      	ldr	r3, [r7, #0]
 8002990:	685b      	ldr	r3, [r3, #4]
 8002992:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002996:	2b00      	cmp	r3, #0
 8002998:	d003      	beq.n	80029a2 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800299a:	693a      	ldr	r2, [r7, #16]
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	4313      	orrs	r3, r2
 80029a0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80029a2:	4a10      	ldr	r2, [pc, #64]	@ (80029e4 <HAL_GPIO_Init+0x2f0>)
 80029a4:	693b      	ldr	r3, [r7, #16]
 80029a6:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80029a8:	697b      	ldr	r3, [r7, #20]
 80029aa:	3301      	adds	r3, #1
 80029ac:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80029ae:	683b      	ldr	r3, [r7, #0]
 80029b0:	681a      	ldr	r2, [r3, #0]
 80029b2:	697b      	ldr	r3, [r7, #20]
 80029b4:	fa22 f303 	lsr.w	r3, r2, r3
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	f47f aea3 	bne.w	8002704 <HAL_GPIO_Init+0x10>
  }
}
 80029be:	bf00      	nop
 80029c0:	bf00      	nop
 80029c2:	371c      	adds	r7, #28
 80029c4:	46bd      	mov	sp, r7
 80029c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ca:	4770      	bx	lr
 80029cc:	40021000 	.word	0x40021000
 80029d0:	40010000 	.word	0x40010000
 80029d4:	48000400 	.word	0x48000400
 80029d8:	48000800 	.word	0x48000800
 80029dc:	48000c00 	.word	0x48000c00
 80029e0:	48001000 	.word	0x48001000
 80029e4:	40010400 	.word	0x40010400

080029e8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80029e8:	b480      	push	{r7}
 80029ea:	b083      	sub	sp, #12
 80029ec:	af00      	add	r7, sp, #0
 80029ee:	6078      	str	r0, [r7, #4]
 80029f0:	460b      	mov	r3, r1
 80029f2:	807b      	strh	r3, [r7, #2]
 80029f4:	4613      	mov	r3, r2
 80029f6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80029f8:	787b      	ldrb	r3, [r7, #1]
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d003      	beq.n	8002a06 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80029fe:	887a      	ldrh	r2, [r7, #2]
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002a04:	e002      	b.n	8002a0c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002a06:	887a      	ldrh	r2, [r7, #2]
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002a0c:	bf00      	nop
 8002a0e:	370c      	adds	r7, #12
 8002a10:	46bd      	mov	sp, r7
 8002a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a16:	4770      	bx	lr

08002a18 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002a18:	b580      	push	{r7, lr}
 8002a1a:	b082      	sub	sp, #8
 8002a1c:	af00      	add	r7, sp, #0
 8002a1e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d101      	bne.n	8002a2a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002a26:	2301      	movs	r3, #1
 8002a28:	e08d      	b.n	8002b46 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002a30:	b2db      	uxtb	r3, r3
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d106      	bne.n	8002a44 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	2200      	movs	r2, #0
 8002a3a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002a3e:	6878      	ldr	r0, [r7, #4]
 8002a40:	f7fe fa62 	bl	8000f08 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	2224      	movs	r2, #36	@ 0x24
 8002a48:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	681a      	ldr	r2, [r3, #0]
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	f022 0201 	bic.w	r2, r2, #1
 8002a5a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	685a      	ldr	r2, [r3, #4]
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002a68:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	689a      	ldr	r2, [r3, #8]
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002a78:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	68db      	ldr	r3, [r3, #12]
 8002a7e:	2b01      	cmp	r3, #1
 8002a80:	d107      	bne.n	8002a92 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	689a      	ldr	r2, [r3, #8]
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002a8e:	609a      	str	r2, [r3, #8]
 8002a90:	e006      	b.n	8002aa0 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	689a      	ldr	r2, [r3, #8]
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8002a9e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	68db      	ldr	r3, [r3, #12]
 8002aa4:	2b02      	cmp	r3, #2
 8002aa6:	d108      	bne.n	8002aba <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	685a      	ldr	r2, [r3, #4]
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002ab6:	605a      	str	r2, [r3, #4]
 8002ab8:	e007      	b.n	8002aca <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	685a      	ldr	r2, [r3, #4]
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002ac8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	685b      	ldr	r3, [r3, #4]
 8002ad0:	687a      	ldr	r2, [r7, #4]
 8002ad2:	6812      	ldr	r2, [r2, #0]
 8002ad4:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002ad8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002adc:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	68da      	ldr	r2, [r3, #12]
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002aec:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	691a      	ldr	r2, [r3, #16]
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	695b      	ldr	r3, [r3, #20]
 8002af6:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	699b      	ldr	r3, [r3, #24]
 8002afe:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	430a      	orrs	r2, r1
 8002b06:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	69d9      	ldr	r1, [r3, #28]
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	6a1a      	ldr	r2, [r3, #32]
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	430a      	orrs	r2, r1
 8002b16:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	681a      	ldr	r2, [r3, #0]
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	f042 0201 	orr.w	r2, r2, #1
 8002b26:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	2200      	movs	r2, #0
 8002b2c:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	2220      	movs	r2, #32
 8002b32:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	2200      	movs	r2, #0
 8002b3a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	2200      	movs	r2, #0
 8002b40:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8002b44:	2300      	movs	r3, #0
}
 8002b46:	4618      	mov	r0, r3
 8002b48:	3708      	adds	r7, #8
 8002b4a:	46bd      	mov	sp, r7
 8002b4c:	bd80      	pop	{r7, pc}
	...

08002b50 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002b50:	b580      	push	{r7, lr}
 8002b52:	b088      	sub	sp, #32
 8002b54:	af02      	add	r7, sp, #8
 8002b56:	60f8      	str	r0, [r7, #12]
 8002b58:	4608      	mov	r0, r1
 8002b5a:	4611      	mov	r1, r2
 8002b5c:	461a      	mov	r2, r3
 8002b5e:	4603      	mov	r3, r0
 8002b60:	817b      	strh	r3, [r7, #10]
 8002b62:	460b      	mov	r3, r1
 8002b64:	813b      	strh	r3, [r7, #8]
 8002b66:	4613      	mov	r3, r2
 8002b68:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002b70:	b2db      	uxtb	r3, r3
 8002b72:	2b20      	cmp	r3, #32
 8002b74:	f040 80f9 	bne.w	8002d6a <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002b78:	6a3b      	ldr	r3, [r7, #32]
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d002      	beq.n	8002b84 <HAL_I2C_Mem_Write+0x34>
 8002b7e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d105      	bne.n	8002b90 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002b8a:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8002b8c:	2301      	movs	r3, #1
 8002b8e:	e0ed      	b.n	8002d6c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002b96:	2b01      	cmp	r3, #1
 8002b98:	d101      	bne.n	8002b9e <HAL_I2C_Mem_Write+0x4e>
 8002b9a:	2302      	movs	r3, #2
 8002b9c:	e0e6      	b.n	8002d6c <HAL_I2C_Mem_Write+0x21c>
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	2201      	movs	r2, #1
 8002ba2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002ba6:	f7fe fbb7 	bl	8001318 <HAL_GetTick>
 8002baa:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002bac:	697b      	ldr	r3, [r7, #20]
 8002bae:	9300      	str	r3, [sp, #0]
 8002bb0:	2319      	movs	r3, #25
 8002bb2:	2201      	movs	r2, #1
 8002bb4:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002bb8:	68f8      	ldr	r0, [r7, #12]
 8002bba:	f000 f955 	bl	8002e68 <I2C_WaitOnFlagUntilTimeout>
 8002bbe:	4603      	mov	r3, r0
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d001      	beq.n	8002bc8 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8002bc4:	2301      	movs	r3, #1
 8002bc6:	e0d1      	b.n	8002d6c <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	2221      	movs	r2, #33	@ 0x21
 8002bcc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	2240      	movs	r2, #64	@ 0x40
 8002bd4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	2200      	movs	r2, #0
 8002bdc:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	6a3a      	ldr	r2, [r7, #32]
 8002be2:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8002be8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	2200      	movs	r2, #0
 8002bee:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002bf0:	88f8      	ldrh	r0, [r7, #6]
 8002bf2:	893a      	ldrh	r2, [r7, #8]
 8002bf4:	8979      	ldrh	r1, [r7, #10]
 8002bf6:	697b      	ldr	r3, [r7, #20]
 8002bf8:	9301      	str	r3, [sp, #4]
 8002bfa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002bfc:	9300      	str	r3, [sp, #0]
 8002bfe:	4603      	mov	r3, r0
 8002c00:	68f8      	ldr	r0, [r7, #12]
 8002c02:	f000 f8b9 	bl	8002d78 <I2C_RequestMemoryWrite>
 8002c06:	4603      	mov	r3, r0
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d005      	beq.n	8002c18 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	2200      	movs	r2, #0
 8002c10:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8002c14:	2301      	movs	r3, #1
 8002c16:	e0a9      	b.n	8002d6c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002c1c:	b29b      	uxth	r3, r3
 8002c1e:	2bff      	cmp	r3, #255	@ 0xff
 8002c20:	d90e      	bls.n	8002c40 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	22ff      	movs	r2, #255	@ 0xff
 8002c26:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002c2c:	b2da      	uxtb	r2, r3
 8002c2e:	8979      	ldrh	r1, [r7, #10]
 8002c30:	2300      	movs	r3, #0
 8002c32:	9300      	str	r3, [sp, #0]
 8002c34:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002c38:	68f8      	ldr	r0, [r7, #12]
 8002c3a:	f000 fad9 	bl	80031f0 <I2C_TransferConfig>
 8002c3e:	e00f      	b.n	8002c60 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002c44:	b29a      	uxth	r2, r3
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002c4e:	b2da      	uxtb	r2, r3
 8002c50:	8979      	ldrh	r1, [r7, #10]
 8002c52:	2300      	movs	r3, #0
 8002c54:	9300      	str	r3, [sp, #0]
 8002c56:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002c5a:	68f8      	ldr	r0, [r7, #12]
 8002c5c:	f000 fac8 	bl	80031f0 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002c60:	697a      	ldr	r2, [r7, #20]
 8002c62:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002c64:	68f8      	ldr	r0, [r7, #12]
 8002c66:	f000 f958 	bl	8002f1a <I2C_WaitOnTXISFlagUntilTimeout>
 8002c6a:	4603      	mov	r3, r0
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d001      	beq.n	8002c74 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8002c70:	2301      	movs	r3, #1
 8002c72:	e07b      	b.n	8002d6c <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c78:	781a      	ldrb	r2, [r3, #0]
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c84:	1c5a      	adds	r2, r3, #1
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002c8e:	b29b      	uxth	r3, r3
 8002c90:	3b01      	subs	r3, #1
 8002c92:	b29a      	uxth	r2, r3
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002c9c:	3b01      	subs	r3, #1
 8002c9e:	b29a      	uxth	r2, r3
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002ca8:	b29b      	uxth	r3, r3
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d034      	beq.n	8002d18 <HAL_I2C_Mem_Write+0x1c8>
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d130      	bne.n	8002d18 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002cb6:	697b      	ldr	r3, [r7, #20]
 8002cb8:	9300      	str	r3, [sp, #0]
 8002cba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002cbc:	2200      	movs	r2, #0
 8002cbe:	2180      	movs	r1, #128	@ 0x80
 8002cc0:	68f8      	ldr	r0, [r7, #12]
 8002cc2:	f000 f8d1 	bl	8002e68 <I2C_WaitOnFlagUntilTimeout>
 8002cc6:	4603      	mov	r3, r0
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d001      	beq.n	8002cd0 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8002ccc:	2301      	movs	r3, #1
 8002cce:	e04d      	b.n	8002d6c <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002cd4:	b29b      	uxth	r3, r3
 8002cd6:	2bff      	cmp	r3, #255	@ 0xff
 8002cd8:	d90e      	bls.n	8002cf8 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	22ff      	movs	r2, #255	@ 0xff
 8002cde:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002ce4:	b2da      	uxtb	r2, r3
 8002ce6:	8979      	ldrh	r1, [r7, #10]
 8002ce8:	2300      	movs	r3, #0
 8002cea:	9300      	str	r3, [sp, #0]
 8002cec:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002cf0:	68f8      	ldr	r0, [r7, #12]
 8002cf2:	f000 fa7d 	bl	80031f0 <I2C_TransferConfig>
 8002cf6:	e00f      	b.n	8002d18 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002cfc:	b29a      	uxth	r2, r3
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002d06:	b2da      	uxtb	r2, r3
 8002d08:	8979      	ldrh	r1, [r7, #10]
 8002d0a:	2300      	movs	r3, #0
 8002d0c:	9300      	str	r3, [sp, #0]
 8002d0e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002d12:	68f8      	ldr	r0, [r7, #12]
 8002d14:	f000 fa6c 	bl	80031f0 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002d1c:	b29b      	uxth	r3, r3
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d19e      	bne.n	8002c60 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002d22:	697a      	ldr	r2, [r7, #20]
 8002d24:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002d26:	68f8      	ldr	r0, [r7, #12]
 8002d28:	f000 f93e 	bl	8002fa8 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002d2c:	4603      	mov	r3, r0
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d001      	beq.n	8002d36 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8002d32:	2301      	movs	r3, #1
 8002d34:	e01a      	b.n	8002d6c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	2220      	movs	r2, #32
 8002d3c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	6859      	ldr	r1, [r3, #4]
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	681a      	ldr	r2, [r3, #0]
 8002d48:	4b0a      	ldr	r3, [pc, #40]	@ (8002d74 <HAL_I2C_Mem_Write+0x224>)
 8002d4a:	400b      	ands	r3, r1
 8002d4c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	2220      	movs	r2, #32
 8002d52:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	2200      	movs	r2, #0
 8002d5a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	2200      	movs	r2, #0
 8002d62:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002d66:	2300      	movs	r3, #0
 8002d68:	e000      	b.n	8002d6c <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8002d6a:	2302      	movs	r3, #2
  }
}
 8002d6c:	4618      	mov	r0, r3
 8002d6e:	3718      	adds	r7, #24
 8002d70:	46bd      	mov	sp, r7
 8002d72:	bd80      	pop	{r7, pc}
 8002d74:	fe00e800 	.word	0xfe00e800

08002d78 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8002d78:	b580      	push	{r7, lr}
 8002d7a:	b086      	sub	sp, #24
 8002d7c:	af02      	add	r7, sp, #8
 8002d7e:	60f8      	str	r0, [r7, #12]
 8002d80:	4608      	mov	r0, r1
 8002d82:	4611      	mov	r1, r2
 8002d84:	461a      	mov	r2, r3
 8002d86:	4603      	mov	r3, r0
 8002d88:	817b      	strh	r3, [r7, #10]
 8002d8a:	460b      	mov	r3, r1
 8002d8c:	813b      	strh	r3, [r7, #8]
 8002d8e:	4613      	mov	r3, r2
 8002d90:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8002d92:	88fb      	ldrh	r3, [r7, #6]
 8002d94:	b2da      	uxtb	r2, r3
 8002d96:	8979      	ldrh	r1, [r7, #10]
 8002d98:	4b20      	ldr	r3, [pc, #128]	@ (8002e1c <I2C_RequestMemoryWrite+0xa4>)
 8002d9a:	9300      	str	r3, [sp, #0]
 8002d9c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002da0:	68f8      	ldr	r0, [r7, #12]
 8002da2:	f000 fa25 	bl	80031f0 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002da6:	69fa      	ldr	r2, [r7, #28]
 8002da8:	69b9      	ldr	r1, [r7, #24]
 8002daa:	68f8      	ldr	r0, [r7, #12]
 8002dac:	f000 f8b5 	bl	8002f1a <I2C_WaitOnTXISFlagUntilTimeout>
 8002db0:	4603      	mov	r3, r0
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d001      	beq.n	8002dba <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8002db6:	2301      	movs	r3, #1
 8002db8:	e02c      	b.n	8002e14 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002dba:	88fb      	ldrh	r3, [r7, #6]
 8002dbc:	2b01      	cmp	r3, #1
 8002dbe:	d105      	bne.n	8002dcc <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002dc0:	893b      	ldrh	r3, [r7, #8]
 8002dc2:	b2da      	uxtb	r2, r3
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	629a      	str	r2, [r3, #40]	@ 0x28
 8002dca:	e015      	b.n	8002df8 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002dcc:	893b      	ldrh	r3, [r7, #8]
 8002dce:	0a1b      	lsrs	r3, r3, #8
 8002dd0:	b29b      	uxth	r3, r3
 8002dd2:	b2da      	uxtb	r2, r3
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002dda:	69fa      	ldr	r2, [r7, #28]
 8002ddc:	69b9      	ldr	r1, [r7, #24]
 8002dde:	68f8      	ldr	r0, [r7, #12]
 8002de0:	f000 f89b 	bl	8002f1a <I2C_WaitOnTXISFlagUntilTimeout>
 8002de4:	4603      	mov	r3, r0
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d001      	beq.n	8002dee <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8002dea:	2301      	movs	r3, #1
 8002dec:	e012      	b.n	8002e14 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002dee:	893b      	ldrh	r3, [r7, #8]
 8002df0:	b2da      	uxtb	r2, r3
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8002df8:	69fb      	ldr	r3, [r7, #28]
 8002dfa:	9300      	str	r3, [sp, #0]
 8002dfc:	69bb      	ldr	r3, [r7, #24]
 8002dfe:	2200      	movs	r2, #0
 8002e00:	2180      	movs	r1, #128	@ 0x80
 8002e02:	68f8      	ldr	r0, [r7, #12]
 8002e04:	f000 f830 	bl	8002e68 <I2C_WaitOnFlagUntilTimeout>
 8002e08:	4603      	mov	r3, r0
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d001      	beq.n	8002e12 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8002e0e:	2301      	movs	r3, #1
 8002e10:	e000      	b.n	8002e14 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8002e12:	2300      	movs	r3, #0
}
 8002e14:	4618      	mov	r0, r3
 8002e16:	3710      	adds	r7, #16
 8002e18:	46bd      	mov	sp, r7
 8002e1a:	bd80      	pop	{r7, pc}
 8002e1c:	80002000 	.word	0x80002000

08002e20 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002e20:	b480      	push	{r7}
 8002e22:	b083      	sub	sp, #12
 8002e24:	af00      	add	r7, sp, #0
 8002e26:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	699b      	ldr	r3, [r3, #24]
 8002e2e:	f003 0302 	and.w	r3, r3, #2
 8002e32:	2b02      	cmp	r3, #2
 8002e34:	d103      	bne.n	8002e3e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	2200      	movs	r2, #0
 8002e3c:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	699b      	ldr	r3, [r3, #24]
 8002e44:	f003 0301 	and.w	r3, r3, #1
 8002e48:	2b01      	cmp	r3, #1
 8002e4a:	d007      	beq.n	8002e5c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	699a      	ldr	r2, [r3, #24]
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	f042 0201 	orr.w	r2, r2, #1
 8002e5a:	619a      	str	r2, [r3, #24]
  }
}
 8002e5c:	bf00      	nop
 8002e5e:	370c      	adds	r7, #12
 8002e60:	46bd      	mov	sp, r7
 8002e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e66:	4770      	bx	lr

08002e68 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002e68:	b580      	push	{r7, lr}
 8002e6a:	b084      	sub	sp, #16
 8002e6c:	af00      	add	r7, sp, #0
 8002e6e:	60f8      	str	r0, [r7, #12]
 8002e70:	60b9      	str	r1, [r7, #8]
 8002e72:	603b      	str	r3, [r7, #0]
 8002e74:	4613      	mov	r3, r2
 8002e76:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002e78:	e03b      	b.n	8002ef2 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002e7a:	69ba      	ldr	r2, [r7, #24]
 8002e7c:	6839      	ldr	r1, [r7, #0]
 8002e7e:	68f8      	ldr	r0, [r7, #12]
 8002e80:	f000 f8d6 	bl	8003030 <I2C_IsErrorOccurred>
 8002e84:	4603      	mov	r3, r0
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d001      	beq.n	8002e8e <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8002e8a:	2301      	movs	r3, #1
 8002e8c:	e041      	b.n	8002f12 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002e8e:	683b      	ldr	r3, [r7, #0]
 8002e90:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002e94:	d02d      	beq.n	8002ef2 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002e96:	f7fe fa3f 	bl	8001318 <HAL_GetTick>
 8002e9a:	4602      	mov	r2, r0
 8002e9c:	69bb      	ldr	r3, [r7, #24]
 8002e9e:	1ad3      	subs	r3, r2, r3
 8002ea0:	683a      	ldr	r2, [r7, #0]
 8002ea2:	429a      	cmp	r2, r3
 8002ea4:	d302      	bcc.n	8002eac <I2C_WaitOnFlagUntilTimeout+0x44>
 8002ea6:	683b      	ldr	r3, [r7, #0]
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d122      	bne.n	8002ef2 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	699a      	ldr	r2, [r3, #24]
 8002eb2:	68bb      	ldr	r3, [r7, #8]
 8002eb4:	4013      	ands	r3, r2
 8002eb6:	68ba      	ldr	r2, [r7, #8]
 8002eb8:	429a      	cmp	r2, r3
 8002eba:	bf0c      	ite	eq
 8002ebc:	2301      	moveq	r3, #1
 8002ebe:	2300      	movne	r3, #0
 8002ec0:	b2db      	uxtb	r3, r3
 8002ec2:	461a      	mov	r2, r3
 8002ec4:	79fb      	ldrb	r3, [r7, #7]
 8002ec6:	429a      	cmp	r2, r3
 8002ec8:	d113      	bne.n	8002ef2 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ece:	f043 0220 	orr.w	r2, r3, #32
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	2220      	movs	r2, #32
 8002eda:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	2200      	movs	r2, #0
 8002ee2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	2200      	movs	r2, #0
 8002eea:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8002eee:	2301      	movs	r3, #1
 8002ef0:	e00f      	b.n	8002f12 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	699a      	ldr	r2, [r3, #24]
 8002ef8:	68bb      	ldr	r3, [r7, #8]
 8002efa:	4013      	ands	r3, r2
 8002efc:	68ba      	ldr	r2, [r7, #8]
 8002efe:	429a      	cmp	r2, r3
 8002f00:	bf0c      	ite	eq
 8002f02:	2301      	moveq	r3, #1
 8002f04:	2300      	movne	r3, #0
 8002f06:	b2db      	uxtb	r3, r3
 8002f08:	461a      	mov	r2, r3
 8002f0a:	79fb      	ldrb	r3, [r7, #7]
 8002f0c:	429a      	cmp	r2, r3
 8002f0e:	d0b4      	beq.n	8002e7a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002f10:	2300      	movs	r3, #0
}
 8002f12:	4618      	mov	r0, r3
 8002f14:	3710      	adds	r7, #16
 8002f16:	46bd      	mov	sp, r7
 8002f18:	bd80      	pop	{r7, pc}

08002f1a <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002f1a:	b580      	push	{r7, lr}
 8002f1c:	b084      	sub	sp, #16
 8002f1e:	af00      	add	r7, sp, #0
 8002f20:	60f8      	str	r0, [r7, #12]
 8002f22:	60b9      	str	r1, [r7, #8]
 8002f24:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002f26:	e033      	b.n	8002f90 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002f28:	687a      	ldr	r2, [r7, #4]
 8002f2a:	68b9      	ldr	r1, [r7, #8]
 8002f2c:	68f8      	ldr	r0, [r7, #12]
 8002f2e:	f000 f87f 	bl	8003030 <I2C_IsErrorOccurred>
 8002f32:	4603      	mov	r3, r0
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d001      	beq.n	8002f3c <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002f38:	2301      	movs	r3, #1
 8002f3a:	e031      	b.n	8002fa0 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002f3c:	68bb      	ldr	r3, [r7, #8]
 8002f3e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002f42:	d025      	beq.n	8002f90 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f44:	f7fe f9e8 	bl	8001318 <HAL_GetTick>
 8002f48:	4602      	mov	r2, r0
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	1ad3      	subs	r3, r2, r3
 8002f4e:	68ba      	ldr	r2, [r7, #8]
 8002f50:	429a      	cmp	r2, r3
 8002f52:	d302      	bcc.n	8002f5a <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8002f54:	68bb      	ldr	r3, [r7, #8]
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d11a      	bne.n	8002f90 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	699b      	ldr	r3, [r3, #24]
 8002f60:	f003 0302 	and.w	r3, r3, #2
 8002f64:	2b02      	cmp	r3, #2
 8002f66:	d013      	beq.n	8002f90 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f6c:	f043 0220 	orr.w	r2, r3, #32
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	2220      	movs	r2, #32
 8002f78:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	2200      	movs	r2, #0
 8002f80:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	2200      	movs	r2, #0
 8002f88:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8002f8c:	2301      	movs	r3, #1
 8002f8e:	e007      	b.n	8002fa0 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	699b      	ldr	r3, [r3, #24]
 8002f96:	f003 0302 	and.w	r3, r3, #2
 8002f9a:	2b02      	cmp	r3, #2
 8002f9c:	d1c4      	bne.n	8002f28 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002f9e:	2300      	movs	r3, #0
}
 8002fa0:	4618      	mov	r0, r3
 8002fa2:	3710      	adds	r7, #16
 8002fa4:	46bd      	mov	sp, r7
 8002fa6:	bd80      	pop	{r7, pc}

08002fa8 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002fa8:	b580      	push	{r7, lr}
 8002faa:	b084      	sub	sp, #16
 8002fac:	af00      	add	r7, sp, #0
 8002fae:	60f8      	str	r0, [r7, #12]
 8002fb0:	60b9      	str	r1, [r7, #8]
 8002fb2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002fb4:	e02f      	b.n	8003016 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002fb6:	687a      	ldr	r2, [r7, #4]
 8002fb8:	68b9      	ldr	r1, [r7, #8]
 8002fba:	68f8      	ldr	r0, [r7, #12]
 8002fbc:	f000 f838 	bl	8003030 <I2C_IsErrorOccurred>
 8002fc0:	4603      	mov	r3, r0
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d001      	beq.n	8002fca <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002fc6:	2301      	movs	r3, #1
 8002fc8:	e02d      	b.n	8003026 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002fca:	f7fe f9a5 	bl	8001318 <HAL_GetTick>
 8002fce:	4602      	mov	r2, r0
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	1ad3      	subs	r3, r2, r3
 8002fd4:	68ba      	ldr	r2, [r7, #8]
 8002fd6:	429a      	cmp	r2, r3
 8002fd8:	d302      	bcc.n	8002fe0 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8002fda:	68bb      	ldr	r3, [r7, #8]
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d11a      	bne.n	8003016 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	699b      	ldr	r3, [r3, #24]
 8002fe6:	f003 0320 	and.w	r3, r3, #32
 8002fea:	2b20      	cmp	r3, #32
 8002fec:	d013      	beq.n	8003016 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ff2:	f043 0220 	orr.w	r2, r3, #32
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	2220      	movs	r2, #32
 8002ffe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	2200      	movs	r2, #0
 8003006:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	2200      	movs	r2, #0
 800300e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8003012:	2301      	movs	r3, #1
 8003014:	e007      	b.n	8003026 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	699b      	ldr	r3, [r3, #24]
 800301c:	f003 0320 	and.w	r3, r3, #32
 8003020:	2b20      	cmp	r3, #32
 8003022:	d1c8      	bne.n	8002fb6 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003024:	2300      	movs	r3, #0
}
 8003026:	4618      	mov	r0, r3
 8003028:	3710      	adds	r7, #16
 800302a:	46bd      	mov	sp, r7
 800302c:	bd80      	pop	{r7, pc}
	...

08003030 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003030:	b580      	push	{r7, lr}
 8003032:	b08a      	sub	sp, #40	@ 0x28
 8003034:	af00      	add	r7, sp, #0
 8003036:	60f8      	str	r0, [r7, #12]
 8003038:	60b9      	str	r1, [r7, #8]
 800303a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800303c:	2300      	movs	r3, #0
 800303e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	699b      	ldr	r3, [r3, #24]
 8003048:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800304a:	2300      	movs	r3, #0
 800304c:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8003052:	69bb      	ldr	r3, [r7, #24]
 8003054:	f003 0310 	and.w	r3, r3, #16
 8003058:	2b00      	cmp	r3, #0
 800305a:	d068      	beq.n	800312e <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	2210      	movs	r2, #16
 8003062:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003064:	e049      	b.n	80030fa <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003066:	68bb      	ldr	r3, [r7, #8]
 8003068:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800306c:	d045      	beq.n	80030fa <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800306e:	f7fe f953 	bl	8001318 <HAL_GetTick>
 8003072:	4602      	mov	r2, r0
 8003074:	69fb      	ldr	r3, [r7, #28]
 8003076:	1ad3      	subs	r3, r2, r3
 8003078:	68ba      	ldr	r2, [r7, #8]
 800307a:	429a      	cmp	r2, r3
 800307c:	d302      	bcc.n	8003084 <I2C_IsErrorOccurred+0x54>
 800307e:	68bb      	ldr	r3, [r7, #8]
 8003080:	2b00      	cmp	r3, #0
 8003082:	d13a      	bne.n	80030fa <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	685b      	ldr	r3, [r3, #4]
 800308a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800308e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003096:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	699b      	ldr	r3, [r3, #24]
 800309e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80030a2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80030a6:	d121      	bne.n	80030ec <I2C_IsErrorOccurred+0xbc>
 80030a8:	697b      	ldr	r3, [r7, #20]
 80030aa:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80030ae:	d01d      	beq.n	80030ec <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 80030b0:	7cfb      	ldrb	r3, [r7, #19]
 80030b2:	2b20      	cmp	r3, #32
 80030b4:	d01a      	beq.n	80030ec <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	685a      	ldr	r2, [r3, #4]
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80030c4:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80030c6:	f7fe f927 	bl	8001318 <HAL_GetTick>
 80030ca:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80030cc:	e00e      	b.n	80030ec <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80030ce:	f7fe f923 	bl	8001318 <HAL_GetTick>
 80030d2:	4602      	mov	r2, r0
 80030d4:	69fb      	ldr	r3, [r7, #28]
 80030d6:	1ad3      	subs	r3, r2, r3
 80030d8:	2b19      	cmp	r3, #25
 80030da:	d907      	bls.n	80030ec <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 80030dc:	6a3b      	ldr	r3, [r7, #32]
 80030de:	f043 0320 	orr.w	r3, r3, #32
 80030e2:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80030e4:	2301      	movs	r3, #1
 80030e6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 80030ea:	e006      	b.n	80030fa <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	699b      	ldr	r3, [r3, #24]
 80030f2:	f003 0320 	and.w	r3, r3, #32
 80030f6:	2b20      	cmp	r3, #32
 80030f8:	d1e9      	bne.n	80030ce <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	699b      	ldr	r3, [r3, #24]
 8003100:	f003 0320 	and.w	r3, r3, #32
 8003104:	2b20      	cmp	r3, #32
 8003106:	d003      	beq.n	8003110 <I2C_IsErrorOccurred+0xe0>
 8003108:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800310c:	2b00      	cmp	r3, #0
 800310e:	d0aa      	beq.n	8003066 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8003110:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003114:	2b00      	cmp	r3, #0
 8003116:	d103      	bne.n	8003120 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	2220      	movs	r2, #32
 800311e:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8003120:	6a3b      	ldr	r3, [r7, #32]
 8003122:	f043 0304 	orr.w	r3, r3, #4
 8003126:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8003128:	2301      	movs	r3, #1
 800312a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	699b      	ldr	r3, [r3, #24]
 8003134:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8003136:	69bb      	ldr	r3, [r7, #24]
 8003138:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800313c:	2b00      	cmp	r3, #0
 800313e:	d00b      	beq.n	8003158 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8003140:	6a3b      	ldr	r3, [r7, #32]
 8003142:	f043 0301 	orr.w	r3, r3, #1
 8003146:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003150:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003152:	2301      	movs	r3, #1
 8003154:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8003158:	69bb      	ldr	r3, [r7, #24]
 800315a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800315e:	2b00      	cmp	r3, #0
 8003160:	d00b      	beq.n	800317a <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8003162:	6a3b      	ldr	r3, [r7, #32]
 8003164:	f043 0308 	orr.w	r3, r3, #8
 8003168:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003172:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003174:	2301      	movs	r3, #1
 8003176:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800317a:	69bb      	ldr	r3, [r7, #24]
 800317c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003180:	2b00      	cmp	r3, #0
 8003182:	d00b      	beq.n	800319c <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8003184:	6a3b      	ldr	r3, [r7, #32]
 8003186:	f043 0302 	orr.w	r3, r3, #2
 800318a:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003194:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003196:	2301      	movs	r3, #1
 8003198:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 800319c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d01c      	beq.n	80031de <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80031a4:	68f8      	ldr	r0, [r7, #12]
 80031a6:	f7ff fe3b 	bl	8002e20 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	6859      	ldr	r1, [r3, #4]
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	681a      	ldr	r2, [r3, #0]
 80031b4:	4b0d      	ldr	r3, [pc, #52]	@ (80031ec <I2C_IsErrorOccurred+0x1bc>)
 80031b6:	400b      	ands	r3, r1
 80031b8:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80031be:	6a3b      	ldr	r3, [r7, #32]
 80031c0:	431a      	orrs	r2, r3
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	2220      	movs	r2, #32
 80031ca:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	2200      	movs	r2, #0
 80031d2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	2200      	movs	r2, #0
 80031da:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 80031de:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 80031e2:	4618      	mov	r0, r3
 80031e4:	3728      	adds	r7, #40	@ 0x28
 80031e6:	46bd      	mov	sp, r7
 80031e8:	bd80      	pop	{r7, pc}
 80031ea:	bf00      	nop
 80031ec:	fe00e800 	.word	0xfe00e800

080031f0 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80031f0:	b480      	push	{r7}
 80031f2:	b087      	sub	sp, #28
 80031f4:	af00      	add	r7, sp, #0
 80031f6:	60f8      	str	r0, [r7, #12]
 80031f8:	607b      	str	r3, [r7, #4]
 80031fa:	460b      	mov	r3, r1
 80031fc:	817b      	strh	r3, [r7, #10]
 80031fe:	4613      	mov	r3, r2
 8003200:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003202:	897b      	ldrh	r3, [r7, #10]
 8003204:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003208:	7a7b      	ldrb	r3, [r7, #9]
 800320a:	041b      	lsls	r3, r3, #16
 800320c:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003210:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003216:	6a3b      	ldr	r3, [r7, #32]
 8003218:	4313      	orrs	r3, r2
 800321a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800321e:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	685a      	ldr	r2, [r3, #4]
 8003226:	6a3b      	ldr	r3, [r7, #32]
 8003228:	0d5b      	lsrs	r3, r3, #21
 800322a:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 800322e:	4b08      	ldr	r3, [pc, #32]	@ (8003250 <I2C_TransferConfig+0x60>)
 8003230:	430b      	orrs	r3, r1
 8003232:	43db      	mvns	r3, r3
 8003234:	ea02 0103 	and.w	r1, r2, r3
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	697a      	ldr	r2, [r7, #20]
 800323e:	430a      	orrs	r2, r1
 8003240:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8003242:	bf00      	nop
 8003244:	371c      	adds	r7, #28
 8003246:	46bd      	mov	sp, r7
 8003248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800324c:	4770      	bx	lr
 800324e:	bf00      	nop
 8003250:	03ff63ff 	.word	0x03ff63ff

08003254 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003254:	b480      	push	{r7}
 8003256:	b083      	sub	sp, #12
 8003258:	af00      	add	r7, sp, #0
 800325a:	6078      	str	r0, [r7, #4]
 800325c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003264:	b2db      	uxtb	r3, r3
 8003266:	2b20      	cmp	r3, #32
 8003268:	d138      	bne.n	80032dc <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003270:	2b01      	cmp	r3, #1
 8003272:	d101      	bne.n	8003278 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003274:	2302      	movs	r3, #2
 8003276:	e032      	b.n	80032de <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	2201      	movs	r2, #1
 800327c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	2224      	movs	r2, #36	@ 0x24
 8003284:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	681a      	ldr	r2, [r3, #0]
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	f022 0201 	bic.w	r2, r2, #1
 8003296:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	681a      	ldr	r2, [r3, #0]
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80032a6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	6819      	ldr	r1, [r3, #0]
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	683a      	ldr	r2, [r7, #0]
 80032b4:	430a      	orrs	r2, r1
 80032b6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	681a      	ldr	r2, [r3, #0]
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	f042 0201 	orr.w	r2, r2, #1
 80032c6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	2220      	movs	r2, #32
 80032cc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	2200      	movs	r2, #0
 80032d4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80032d8:	2300      	movs	r3, #0
 80032da:	e000      	b.n	80032de <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80032dc:	2302      	movs	r3, #2
  }
}
 80032de:	4618      	mov	r0, r3
 80032e0:	370c      	adds	r7, #12
 80032e2:	46bd      	mov	sp, r7
 80032e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e8:	4770      	bx	lr

080032ea <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80032ea:	b480      	push	{r7}
 80032ec:	b085      	sub	sp, #20
 80032ee:	af00      	add	r7, sp, #0
 80032f0:	6078      	str	r0, [r7, #4]
 80032f2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80032fa:	b2db      	uxtb	r3, r3
 80032fc:	2b20      	cmp	r3, #32
 80032fe:	d139      	bne.n	8003374 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003306:	2b01      	cmp	r3, #1
 8003308:	d101      	bne.n	800330e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800330a:	2302      	movs	r3, #2
 800330c:	e033      	b.n	8003376 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	2201      	movs	r2, #1
 8003312:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	2224      	movs	r2, #36	@ 0x24
 800331a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	681a      	ldr	r2, [r3, #0]
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	f022 0201 	bic.w	r2, r2, #1
 800332c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800333c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800333e:	683b      	ldr	r3, [r7, #0]
 8003340:	021b      	lsls	r3, r3, #8
 8003342:	68fa      	ldr	r2, [r7, #12]
 8003344:	4313      	orrs	r3, r2
 8003346:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	68fa      	ldr	r2, [r7, #12]
 800334e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	681a      	ldr	r2, [r3, #0]
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	f042 0201 	orr.w	r2, r2, #1
 800335e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	2220      	movs	r2, #32
 8003364:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	2200      	movs	r2, #0
 800336c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003370:	2300      	movs	r3, #0
 8003372:	e000      	b.n	8003376 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003374:	2302      	movs	r3, #2
  }
}
 8003376:	4618      	mov	r0, r3
 8003378:	3714      	adds	r7, #20
 800337a:	46bd      	mov	sp, r7
 800337c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003380:	4770      	bx	lr

08003382 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003382:	b580      	push	{r7, lr}
 8003384:	b084      	sub	sp, #16
 8003386:	af00      	add	r7, sp, #0
 8003388:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	2b00      	cmp	r3, #0
 800338e:	d101      	bne.n	8003394 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003390:	2301      	movs	r3, #1
 8003392:	e0b9      	b.n	8003508 <HAL_PCD_Init+0x186>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	f893 3291 	ldrb.w	r3, [r3, #657]	@ 0x291
 800339a:	b2db      	uxtb	r3, r3
 800339c:	2b00      	cmp	r3, #0
 800339e:	d106      	bne.n	80033ae <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	2200      	movs	r2, #0
 80033a4:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80033a8:	6878      	ldr	r0, [r7, #4]
 80033aa:	f7fd fe97 	bl	80010dc <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	2203      	movs	r2, #3
 80033b2:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	4618      	mov	r0, r3
 80033bc:	f003 f94e 	bl	800665c <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80033c0:	2300      	movs	r3, #0
 80033c2:	73fb      	strb	r3, [r7, #15]
 80033c4:	e03e      	b.n	8003444 <HAL_PCD_Init+0xc2>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80033c6:	7bfa      	ldrb	r2, [r7, #15]
 80033c8:	6879      	ldr	r1, [r7, #4]
 80033ca:	4613      	mov	r3, r2
 80033cc:	009b      	lsls	r3, r3, #2
 80033ce:	4413      	add	r3, r2
 80033d0:	00db      	lsls	r3, r3, #3
 80033d2:	440b      	add	r3, r1
 80033d4:	3311      	adds	r3, #17
 80033d6:	2201      	movs	r2, #1
 80033d8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80033da:	7bfa      	ldrb	r2, [r7, #15]
 80033dc:	6879      	ldr	r1, [r7, #4]
 80033de:	4613      	mov	r3, r2
 80033e0:	009b      	lsls	r3, r3, #2
 80033e2:	4413      	add	r3, r2
 80033e4:	00db      	lsls	r3, r3, #3
 80033e6:	440b      	add	r3, r1
 80033e8:	3310      	adds	r3, #16
 80033ea:	7bfa      	ldrb	r2, [r7, #15]
 80033ec:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80033ee:	7bfa      	ldrb	r2, [r7, #15]
 80033f0:	6879      	ldr	r1, [r7, #4]
 80033f2:	4613      	mov	r3, r2
 80033f4:	009b      	lsls	r3, r3, #2
 80033f6:	4413      	add	r3, r2
 80033f8:	00db      	lsls	r3, r3, #3
 80033fa:	440b      	add	r3, r1
 80033fc:	3313      	adds	r3, #19
 80033fe:	2200      	movs	r2, #0
 8003400:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003402:	7bfa      	ldrb	r2, [r7, #15]
 8003404:	6879      	ldr	r1, [r7, #4]
 8003406:	4613      	mov	r3, r2
 8003408:	009b      	lsls	r3, r3, #2
 800340a:	4413      	add	r3, r2
 800340c:	00db      	lsls	r3, r3, #3
 800340e:	440b      	add	r3, r1
 8003410:	3320      	adds	r3, #32
 8003412:	2200      	movs	r2, #0
 8003414:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003416:	7bfa      	ldrb	r2, [r7, #15]
 8003418:	6879      	ldr	r1, [r7, #4]
 800341a:	4613      	mov	r3, r2
 800341c:	009b      	lsls	r3, r3, #2
 800341e:	4413      	add	r3, r2
 8003420:	00db      	lsls	r3, r3, #3
 8003422:	440b      	add	r3, r1
 8003424:	3324      	adds	r3, #36	@ 0x24
 8003426:	2200      	movs	r2, #0
 8003428:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800342a:	7bfb      	ldrb	r3, [r7, #15]
 800342c:	6879      	ldr	r1, [r7, #4]
 800342e:	1c5a      	adds	r2, r3, #1
 8003430:	4613      	mov	r3, r2
 8003432:	009b      	lsls	r3, r3, #2
 8003434:	4413      	add	r3, r2
 8003436:	00db      	lsls	r3, r3, #3
 8003438:	440b      	add	r3, r1
 800343a:	2200      	movs	r2, #0
 800343c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800343e:	7bfb      	ldrb	r3, [r7, #15]
 8003440:	3301      	adds	r3, #1
 8003442:	73fb      	strb	r3, [r7, #15]
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	791b      	ldrb	r3, [r3, #4]
 8003448:	7bfa      	ldrb	r2, [r7, #15]
 800344a:	429a      	cmp	r2, r3
 800344c:	d3bb      	bcc.n	80033c6 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800344e:	2300      	movs	r3, #0
 8003450:	73fb      	strb	r3, [r7, #15]
 8003452:	e044      	b.n	80034de <HAL_PCD_Init+0x15c>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003454:	7bfa      	ldrb	r2, [r7, #15]
 8003456:	6879      	ldr	r1, [r7, #4]
 8003458:	4613      	mov	r3, r2
 800345a:	009b      	lsls	r3, r3, #2
 800345c:	4413      	add	r3, r2
 800345e:	00db      	lsls	r3, r3, #3
 8003460:	440b      	add	r3, r1
 8003462:	f203 1351 	addw	r3, r3, #337	@ 0x151
 8003466:	2200      	movs	r2, #0
 8003468:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800346a:	7bfa      	ldrb	r2, [r7, #15]
 800346c:	6879      	ldr	r1, [r7, #4]
 800346e:	4613      	mov	r3, r2
 8003470:	009b      	lsls	r3, r3, #2
 8003472:	4413      	add	r3, r2
 8003474:	00db      	lsls	r3, r3, #3
 8003476:	440b      	add	r3, r1
 8003478:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800347c:	7bfa      	ldrb	r2, [r7, #15]
 800347e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003480:	7bfa      	ldrb	r2, [r7, #15]
 8003482:	6879      	ldr	r1, [r7, #4]
 8003484:	4613      	mov	r3, r2
 8003486:	009b      	lsls	r3, r3, #2
 8003488:	4413      	add	r3, r2
 800348a:	00db      	lsls	r3, r3, #3
 800348c:	440b      	add	r3, r1
 800348e:	f203 1353 	addw	r3, r3, #339	@ 0x153
 8003492:	2200      	movs	r2, #0
 8003494:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003496:	7bfa      	ldrb	r2, [r7, #15]
 8003498:	6879      	ldr	r1, [r7, #4]
 800349a:	4613      	mov	r3, r2
 800349c:	009b      	lsls	r3, r3, #2
 800349e:	4413      	add	r3, r2
 80034a0:	00db      	lsls	r3, r3, #3
 80034a2:	440b      	add	r3, r1
 80034a4:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 80034a8:	2200      	movs	r2, #0
 80034aa:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80034ac:	7bfa      	ldrb	r2, [r7, #15]
 80034ae:	6879      	ldr	r1, [r7, #4]
 80034b0:	4613      	mov	r3, r2
 80034b2:	009b      	lsls	r3, r3, #2
 80034b4:	4413      	add	r3, r2
 80034b6:	00db      	lsls	r3, r3, #3
 80034b8:	440b      	add	r3, r1
 80034ba:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80034be:	2200      	movs	r2, #0
 80034c0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80034c2:	7bfa      	ldrb	r2, [r7, #15]
 80034c4:	6879      	ldr	r1, [r7, #4]
 80034c6:	4613      	mov	r3, r2
 80034c8:	009b      	lsls	r3, r3, #2
 80034ca:	4413      	add	r3, r2
 80034cc:	00db      	lsls	r3, r3, #3
 80034ce:	440b      	add	r3, r1
 80034d0:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 80034d4:	2200      	movs	r2, #0
 80034d6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80034d8:	7bfb      	ldrb	r3, [r7, #15]
 80034da:	3301      	adds	r3, #1
 80034dc:	73fb      	strb	r3, [r7, #15]
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	791b      	ldrb	r3, [r3, #4]
 80034e2:	7bfa      	ldrb	r2, [r7, #15]
 80034e4:	429a      	cmp	r2, r3
 80034e6:	d3b5      	bcc.n	8003454 <HAL_PCD_Init+0xd2>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	6818      	ldr	r0, [r3, #0]
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	3304      	adds	r3, #4
 80034f0:	e893 0006 	ldmia.w	r3, {r1, r2}
 80034f4:	f003 f8cd 	bl	8006692 <USB_DevInit>

  hpcd->USB_Address = 0U;
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	2200      	movs	r2, #0
 80034fc:	731a      	strb	r2, [r3, #12]
  hpcd->State = HAL_PCD_STATE_READY;
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	2201      	movs	r2, #1
 8003502:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
  return HAL_OK;
 8003506:	2300      	movs	r3, #0
}
 8003508:	4618      	mov	r0, r3
 800350a:	3710      	adds	r7, #16
 800350c:	46bd      	mov	sp, r7
 800350e:	bd80      	pop	{r7, pc}

08003510 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003510:	b580      	push	{r7, lr}
 8003512:	f5ad 7d00 	sub.w	sp, sp, #512	@ 0x200
 8003516:	af00      	add	r7, sp, #0
 8003518:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800351c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003520:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003522:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003526:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	2b00      	cmp	r3, #0
 800352e:	d102      	bne.n	8003536 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8003530:	2301      	movs	r3, #1
 8003532:	f000 bff4 	b.w	800451e <HAL_RCC_OscConfig+0x100e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003536:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800353a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	f003 0301 	and.w	r3, r3, #1
 8003546:	2b00      	cmp	r3, #0
 8003548:	f000 816d 	beq.w	8003826 <HAL_RCC_OscConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800354c:	4bb4      	ldr	r3, [pc, #720]	@ (8003820 <HAL_RCC_OscConfig+0x310>)
 800354e:	685b      	ldr	r3, [r3, #4]
 8003550:	f003 030c 	and.w	r3, r3, #12
 8003554:	2b04      	cmp	r3, #4
 8003556:	d00c      	beq.n	8003572 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003558:	4bb1      	ldr	r3, [pc, #708]	@ (8003820 <HAL_RCC_OscConfig+0x310>)
 800355a:	685b      	ldr	r3, [r3, #4]
 800355c:	f003 030c 	and.w	r3, r3, #12
 8003560:	2b08      	cmp	r3, #8
 8003562:	d157      	bne.n	8003614 <HAL_RCC_OscConfig+0x104>
 8003564:	4bae      	ldr	r3, [pc, #696]	@ (8003820 <HAL_RCC_OscConfig+0x310>)
 8003566:	685b      	ldr	r3, [r3, #4]
 8003568:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800356c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003570:	d150      	bne.n	8003614 <HAL_RCC_OscConfig+0x104>
 8003572:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003576:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800357a:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
 800357e:	fa93 f3a3 	rbit	r3, r3
 8003582:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003586:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800358a:	fab3 f383 	clz	r3, r3
 800358e:	b2db      	uxtb	r3, r3
 8003590:	2b3f      	cmp	r3, #63	@ 0x3f
 8003592:	d802      	bhi.n	800359a <HAL_RCC_OscConfig+0x8a>
 8003594:	4ba2      	ldr	r3, [pc, #648]	@ (8003820 <HAL_RCC_OscConfig+0x310>)
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	e015      	b.n	80035c6 <HAL_RCC_OscConfig+0xb6>
 800359a:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800359e:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035a2:	f8d7 31e8 	ldr.w	r3, [r7, #488]	@ 0x1e8
 80035a6:	fa93 f3a3 	rbit	r3, r3
 80035aa:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
 80035ae:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80035b2:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 80035b6:	f8d7 31e0 	ldr.w	r3, [r7, #480]	@ 0x1e0
 80035ba:	fa93 f3a3 	rbit	r3, r3
 80035be:	f8c7 31dc 	str.w	r3, [r7, #476]	@ 0x1dc
 80035c2:	4b97      	ldr	r3, [pc, #604]	@ (8003820 <HAL_RCC_OscConfig+0x310>)
 80035c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035c6:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80035ca:	f8c7 21d8 	str.w	r2, [r7, #472]	@ 0x1d8
 80035ce:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 80035d2:	fa92 f2a2 	rbit	r2, r2
 80035d6:	f8c7 21d4 	str.w	r2, [r7, #468]	@ 0x1d4
  return result;
 80035da:	f8d7 21d4 	ldr.w	r2, [r7, #468]	@ 0x1d4
 80035de:	fab2 f282 	clz	r2, r2
 80035e2:	b2d2      	uxtb	r2, r2
 80035e4:	f042 0220 	orr.w	r2, r2, #32
 80035e8:	b2d2      	uxtb	r2, r2
 80035ea:	f002 021f 	and.w	r2, r2, #31
 80035ee:	2101      	movs	r1, #1
 80035f0:	fa01 f202 	lsl.w	r2, r1, r2
 80035f4:	4013      	ands	r3, r2
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	f000 8114 	beq.w	8003824 <HAL_RCC_OscConfig+0x314>
 80035fc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003600:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	685b      	ldr	r3, [r3, #4]
 8003608:	2b00      	cmp	r3, #0
 800360a:	f040 810b 	bne.w	8003824 <HAL_RCC_OscConfig+0x314>
      {
        return HAL_ERROR;
 800360e:	2301      	movs	r3, #1
 8003610:	f000 bf85 	b.w	800451e <HAL_RCC_OscConfig+0x100e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003614:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003618:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	685b      	ldr	r3, [r3, #4]
 8003620:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003624:	d106      	bne.n	8003634 <HAL_RCC_OscConfig+0x124>
 8003626:	4b7e      	ldr	r3, [pc, #504]	@ (8003820 <HAL_RCC_OscConfig+0x310>)
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	4a7d      	ldr	r2, [pc, #500]	@ (8003820 <HAL_RCC_OscConfig+0x310>)
 800362c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003630:	6013      	str	r3, [r2, #0]
 8003632:	e036      	b.n	80036a2 <HAL_RCC_OscConfig+0x192>
 8003634:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003638:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	685b      	ldr	r3, [r3, #4]
 8003640:	2b00      	cmp	r3, #0
 8003642:	d10c      	bne.n	800365e <HAL_RCC_OscConfig+0x14e>
 8003644:	4b76      	ldr	r3, [pc, #472]	@ (8003820 <HAL_RCC_OscConfig+0x310>)
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	4a75      	ldr	r2, [pc, #468]	@ (8003820 <HAL_RCC_OscConfig+0x310>)
 800364a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800364e:	6013      	str	r3, [r2, #0]
 8003650:	4b73      	ldr	r3, [pc, #460]	@ (8003820 <HAL_RCC_OscConfig+0x310>)
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	4a72      	ldr	r2, [pc, #456]	@ (8003820 <HAL_RCC_OscConfig+0x310>)
 8003656:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800365a:	6013      	str	r3, [r2, #0]
 800365c:	e021      	b.n	80036a2 <HAL_RCC_OscConfig+0x192>
 800365e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003662:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	685b      	ldr	r3, [r3, #4]
 800366a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800366e:	d10c      	bne.n	800368a <HAL_RCC_OscConfig+0x17a>
 8003670:	4b6b      	ldr	r3, [pc, #428]	@ (8003820 <HAL_RCC_OscConfig+0x310>)
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	4a6a      	ldr	r2, [pc, #424]	@ (8003820 <HAL_RCC_OscConfig+0x310>)
 8003676:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800367a:	6013      	str	r3, [r2, #0]
 800367c:	4b68      	ldr	r3, [pc, #416]	@ (8003820 <HAL_RCC_OscConfig+0x310>)
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	4a67      	ldr	r2, [pc, #412]	@ (8003820 <HAL_RCC_OscConfig+0x310>)
 8003682:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003686:	6013      	str	r3, [r2, #0]
 8003688:	e00b      	b.n	80036a2 <HAL_RCC_OscConfig+0x192>
 800368a:	4b65      	ldr	r3, [pc, #404]	@ (8003820 <HAL_RCC_OscConfig+0x310>)
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	4a64      	ldr	r2, [pc, #400]	@ (8003820 <HAL_RCC_OscConfig+0x310>)
 8003690:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003694:	6013      	str	r3, [r2, #0]
 8003696:	4b62      	ldr	r3, [pc, #392]	@ (8003820 <HAL_RCC_OscConfig+0x310>)
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	4a61      	ldr	r2, [pc, #388]	@ (8003820 <HAL_RCC_OscConfig+0x310>)
 800369c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80036a0:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80036a2:	4b5f      	ldr	r3, [pc, #380]	@ (8003820 <HAL_RCC_OscConfig+0x310>)
 80036a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80036a6:	f023 020f 	bic.w	r2, r3, #15
 80036aa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80036ae:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	689b      	ldr	r3, [r3, #8]
 80036b6:	495a      	ldr	r1, [pc, #360]	@ (8003820 <HAL_RCC_OscConfig+0x310>)
 80036b8:	4313      	orrs	r3, r2
 80036ba:	62cb      	str	r3, [r1, #44]	@ 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80036bc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80036c0:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	685b      	ldr	r3, [r3, #4]
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d054      	beq.n	8003776 <HAL_RCC_OscConfig+0x266>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036cc:	f7fd fe24 	bl	8001318 <HAL_GetTick>
 80036d0:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80036d4:	e00a      	b.n	80036ec <HAL_RCC_OscConfig+0x1dc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80036d6:	f7fd fe1f 	bl	8001318 <HAL_GetTick>
 80036da:	4602      	mov	r2, r0
 80036dc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80036e0:	1ad3      	subs	r3, r2, r3
 80036e2:	2b64      	cmp	r3, #100	@ 0x64
 80036e4:	d902      	bls.n	80036ec <HAL_RCC_OscConfig+0x1dc>
          {
            return HAL_TIMEOUT;
 80036e6:	2303      	movs	r3, #3
 80036e8:	f000 bf19 	b.w	800451e <HAL_RCC_OscConfig+0x100e>
 80036ec:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80036f0:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036f4:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 80036f8:	fa93 f3a3 	rbit	r3, r3
 80036fc:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
  return result;
 8003700:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003704:	fab3 f383 	clz	r3, r3
 8003708:	b2db      	uxtb	r3, r3
 800370a:	2b3f      	cmp	r3, #63	@ 0x3f
 800370c:	d802      	bhi.n	8003714 <HAL_RCC_OscConfig+0x204>
 800370e:	4b44      	ldr	r3, [pc, #272]	@ (8003820 <HAL_RCC_OscConfig+0x310>)
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	e015      	b.n	8003740 <HAL_RCC_OscConfig+0x230>
 8003714:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003718:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800371c:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 8003720:	fa93 f3a3 	rbit	r3, r3
 8003724:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 8003728:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800372c:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 8003730:	f8d7 31c0 	ldr.w	r3, [r7, #448]	@ 0x1c0
 8003734:	fa93 f3a3 	rbit	r3, r3
 8003738:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
 800373c:	4b38      	ldr	r3, [pc, #224]	@ (8003820 <HAL_RCC_OscConfig+0x310>)
 800373e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003740:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8003744:	f8c7 21b8 	str.w	r2, [r7, #440]	@ 0x1b8
 8003748:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 800374c:	fa92 f2a2 	rbit	r2, r2
 8003750:	f8c7 21b4 	str.w	r2, [r7, #436]	@ 0x1b4
  return result;
 8003754:	f8d7 21b4 	ldr.w	r2, [r7, #436]	@ 0x1b4
 8003758:	fab2 f282 	clz	r2, r2
 800375c:	b2d2      	uxtb	r2, r2
 800375e:	f042 0220 	orr.w	r2, r2, #32
 8003762:	b2d2      	uxtb	r2, r2
 8003764:	f002 021f 	and.w	r2, r2, #31
 8003768:	2101      	movs	r1, #1
 800376a:	fa01 f202 	lsl.w	r2, r1, r2
 800376e:	4013      	ands	r3, r2
 8003770:	2b00      	cmp	r3, #0
 8003772:	d0b0      	beq.n	80036d6 <HAL_RCC_OscConfig+0x1c6>
 8003774:	e057      	b.n	8003826 <HAL_RCC_OscConfig+0x316>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003776:	f7fd fdcf 	bl	8001318 <HAL_GetTick>
 800377a:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800377e:	e00a      	b.n	8003796 <HAL_RCC_OscConfig+0x286>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003780:	f7fd fdca 	bl	8001318 <HAL_GetTick>
 8003784:	4602      	mov	r2, r0
 8003786:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800378a:	1ad3      	subs	r3, r2, r3
 800378c:	2b64      	cmp	r3, #100	@ 0x64
 800378e:	d902      	bls.n	8003796 <HAL_RCC_OscConfig+0x286>
          {
            return HAL_TIMEOUT;
 8003790:	2303      	movs	r3, #3
 8003792:	f000 bec4 	b.w	800451e <HAL_RCC_OscConfig+0x100e>
 8003796:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800379a:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800379e:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
 80037a2:	fa93 f3a3 	rbit	r3, r3
 80037a6:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
  return result;
 80037aa:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80037ae:	fab3 f383 	clz	r3, r3
 80037b2:	b2db      	uxtb	r3, r3
 80037b4:	2b3f      	cmp	r3, #63	@ 0x3f
 80037b6:	d802      	bhi.n	80037be <HAL_RCC_OscConfig+0x2ae>
 80037b8:	4b19      	ldr	r3, [pc, #100]	@ (8003820 <HAL_RCC_OscConfig+0x310>)
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	e015      	b.n	80037ea <HAL_RCC_OscConfig+0x2da>
 80037be:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80037c2:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037c6:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 80037ca:	fa93 f3a3 	rbit	r3, r3
 80037ce:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 80037d2:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80037d6:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 80037da:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 80037de:	fa93 f3a3 	rbit	r3, r3
 80037e2:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
 80037e6:	4b0e      	ldr	r3, [pc, #56]	@ (8003820 <HAL_RCC_OscConfig+0x310>)
 80037e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037ea:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80037ee:	f8c7 2198 	str.w	r2, [r7, #408]	@ 0x198
 80037f2:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 80037f6:	fa92 f2a2 	rbit	r2, r2
 80037fa:	f8c7 2194 	str.w	r2, [r7, #404]	@ 0x194
  return result;
 80037fe:	f8d7 2194 	ldr.w	r2, [r7, #404]	@ 0x194
 8003802:	fab2 f282 	clz	r2, r2
 8003806:	b2d2      	uxtb	r2, r2
 8003808:	f042 0220 	orr.w	r2, r2, #32
 800380c:	b2d2      	uxtb	r2, r2
 800380e:	f002 021f 	and.w	r2, r2, #31
 8003812:	2101      	movs	r1, #1
 8003814:	fa01 f202 	lsl.w	r2, r1, r2
 8003818:	4013      	ands	r3, r2
 800381a:	2b00      	cmp	r3, #0
 800381c:	d1b0      	bne.n	8003780 <HAL_RCC_OscConfig+0x270>
 800381e:	e002      	b.n	8003826 <HAL_RCC_OscConfig+0x316>
 8003820:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003824:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003826:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800382a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	f003 0302 	and.w	r3, r3, #2
 8003836:	2b00      	cmp	r3, #0
 8003838:	f000 816c 	beq.w	8003b14 <HAL_RCC_OscConfig+0x604>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800383c:	4bcc      	ldr	r3, [pc, #816]	@ (8003b70 <HAL_RCC_OscConfig+0x660>)
 800383e:	685b      	ldr	r3, [r3, #4]
 8003840:	f003 030c 	and.w	r3, r3, #12
 8003844:	2b00      	cmp	r3, #0
 8003846:	d00b      	beq.n	8003860 <HAL_RCC_OscConfig+0x350>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8003848:	4bc9      	ldr	r3, [pc, #804]	@ (8003b70 <HAL_RCC_OscConfig+0x660>)
 800384a:	685b      	ldr	r3, [r3, #4]
 800384c:	f003 030c 	and.w	r3, r3, #12
 8003850:	2b08      	cmp	r3, #8
 8003852:	d16d      	bne.n	8003930 <HAL_RCC_OscConfig+0x420>
 8003854:	4bc6      	ldr	r3, [pc, #792]	@ (8003b70 <HAL_RCC_OscConfig+0x660>)
 8003856:	685b      	ldr	r3, [r3, #4]
 8003858:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800385c:	2b00      	cmp	r3, #0
 800385e:	d167      	bne.n	8003930 <HAL_RCC_OscConfig+0x420>
 8003860:	2302      	movs	r3, #2
 8003862:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003866:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 800386a:	fa93 f3a3 	rbit	r3, r3
 800386e:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
  return result;
 8003872:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003876:	fab3 f383 	clz	r3, r3
 800387a:	b2db      	uxtb	r3, r3
 800387c:	2b3f      	cmp	r3, #63	@ 0x3f
 800387e:	d802      	bhi.n	8003886 <HAL_RCC_OscConfig+0x376>
 8003880:	4bbb      	ldr	r3, [pc, #748]	@ (8003b70 <HAL_RCC_OscConfig+0x660>)
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	e013      	b.n	80038ae <HAL_RCC_OscConfig+0x39e>
 8003886:	2302      	movs	r3, #2
 8003888:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800388c:	f8d7 3188 	ldr.w	r3, [r7, #392]	@ 0x188
 8003890:	fa93 f3a3 	rbit	r3, r3
 8003894:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 8003898:	2302      	movs	r3, #2
 800389a:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 800389e:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 80038a2:	fa93 f3a3 	rbit	r3, r3
 80038a6:	f8c7 317c 	str.w	r3, [r7, #380]	@ 0x17c
 80038aa:	4bb1      	ldr	r3, [pc, #708]	@ (8003b70 <HAL_RCC_OscConfig+0x660>)
 80038ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038ae:	2202      	movs	r2, #2
 80038b0:	f8c7 2178 	str.w	r2, [r7, #376]	@ 0x178
 80038b4:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 80038b8:	fa92 f2a2 	rbit	r2, r2
 80038bc:	f8c7 2174 	str.w	r2, [r7, #372]	@ 0x174
  return result;
 80038c0:	f8d7 2174 	ldr.w	r2, [r7, #372]	@ 0x174
 80038c4:	fab2 f282 	clz	r2, r2
 80038c8:	b2d2      	uxtb	r2, r2
 80038ca:	f042 0220 	orr.w	r2, r2, #32
 80038ce:	b2d2      	uxtb	r2, r2
 80038d0:	f002 021f 	and.w	r2, r2, #31
 80038d4:	2101      	movs	r1, #1
 80038d6:	fa01 f202 	lsl.w	r2, r1, r2
 80038da:	4013      	ands	r3, r2
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d00a      	beq.n	80038f6 <HAL_RCC_OscConfig+0x3e6>
 80038e0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80038e4:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	691b      	ldr	r3, [r3, #16]
 80038ec:	2b01      	cmp	r3, #1
 80038ee:	d002      	beq.n	80038f6 <HAL_RCC_OscConfig+0x3e6>
      {
        return HAL_ERROR;
 80038f0:	2301      	movs	r3, #1
 80038f2:	f000 be14 	b.w	800451e <HAL_RCC_OscConfig+0x100e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80038f6:	4b9e      	ldr	r3, [pc, #632]	@ (8003b70 <HAL_RCC_OscConfig+0x660>)
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80038fe:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003902:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	695b      	ldr	r3, [r3, #20]
 800390a:	21f8      	movs	r1, #248	@ 0xf8
 800390c:	f8c7 1170 	str.w	r1, [r7, #368]	@ 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003910:	f8d7 1170 	ldr.w	r1, [r7, #368]	@ 0x170
 8003914:	fa91 f1a1 	rbit	r1, r1
 8003918:	f8c7 116c 	str.w	r1, [r7, #364]	@ 0x16c
  return result;
 800391c:	f8d7 116c 	ldr.w	r1, [r7, #364]	@ 0x16c
 8003920:	fab1 f181 	clz	r1, r1
 8003924:	b2c9      	uxtb	r1, r1
 8003926:	408b      	lsls	r3, r1
 8003928:	4991      	ldr	r1, [pc, #580]	@ (8003b70 <HAL_RCC_OscConfig+0x660>)
 800392a:	4313      	orrs	r3, r2
 800392c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800392e:	e0f1      	b.n	8003b14 <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003930:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003934:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	691b      	ldr	r3, [r3, #16]
 800393c:	2b00      	cmp	r3, #0
 800393e:	f000 8083 	beq.w	8003a48 <HAL_RCC_OscConfig+0x538>
 8003942:	2301      	movs	r3, #1
 8003944:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003948:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
 800394c:	fa93 f3a3 	rbit	r3, r3
 8003950:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
  return result;
 8003954:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003958:	fab3 f383 	clz	r3, r3
 800395c:	b2db      	uxtb	r3, r3
 800395e:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8003962:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8003966:	009b      	lsls	r3, r3, #2
 8003968:	461a      	mov	r2, r3
 800396a:	2301      	movs	r3, #1
 800396c:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800396e:	f7fd fcd3 	bl	8001318 <HAL_GetTick>
 8003972:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003976:	e00a      	b.n	800398e <HAL_RCC_OscConfig+0x47e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003978:	f7fd fcce 	bl	8001318 <HAL_GetTick>
 800397c:	4602      	mov	r2, r0
 800397e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8003982:	1ad3      	subs	r3, r2, r3
 8003984:	2b02      	cmp	r3, #2
 8003986:	d902      	bls.n	800398e <HAL_RCC_OscConfig+0x47e>
          {
            return HAL_TIMEOUT;
 8003988:	2303      	movs	r3, #3
 800398a:	f000 bdc8 	b.w	800451e <HAL_RCC_OscConfig+0x100e>
 800398e:	2302      	movs	r3, #2
 8003990:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003994:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 8003998:	fa93 f3a3 	rbit	r3, r3
 800399c:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
  return result;
 80039a0:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80039a4:	fab3 f383 	clz	r3, r3
 80039a8:	b2db      	uxtb	r3, r3
 80039aa:	2b3f      	cmp	r3, #63	@ 0x3f
 80039ac:	d802      	bhi.n	80039b4 <HAL_RCC_OscConfig+0x4a4>
 80039ae:	4b70      	ldr	r3, [pc, #448]	@ (8003b70 <HAL_RCC_OscConfig+0x660>)
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	e013      	b.n	80039dc <HAL_RCC_OscConfig+0x4cc>
 80039b4:	2302      	movs	r3, #2
 80039b6:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039ba:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 80039be:	fa93 f3a3 	rbit	r3, r3
 80039c2:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 80039c6:	2302      	movs	r3, #2
 80039c8:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 80039cc:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 80039d0:	fa93 f3a3 	rbit	r3, r3
 80039d4:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
 80039d8:	4b65      	ldr	r3, [pc, #404]	@ (8003b70 <HAL_RCC_OscConfig+0x660>)
 80039da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039dc:	2202      	movs	r2, #2
 80039de:	f8c7 2148 	str.w	r2, [r7, #328]	@ 0x148
 80039e2:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 80039e6:	fa92 f2a2 	rbit	r2, r2
 80039ea:	f8c7 2144 	str.w	r2, [r7, #324]	@ 0x144
  return result;
 80039ee:	f8d7 2144 	ldr.w	r2, [r7, #324]	@ 0x144
 80039f2:	fab2 f282 	clz	r2, r2
 80039f6:	b2d2      	uxtb	r2, r2
 80039f8:	f042 0220 	orr.w	r2, r2, #32
 80039fc:	b2d2      	uxtb	r2, r2
 80039fe:	f002 021f 	and.w	r2, r2, #31
 8003a02:	2101      	movs	r1, #1
 8003a04:	fa01 f202 	lsl.w	r2, r1, r2
 8003a08:	4013      	ands	r3, r2
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d0b4      	beq.n	8003978 <HAL_RCC_OscConfig+0x468>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a0e:	4b58      	ldr	r3, [pc, #352]	@ (8003b70 <HAL_RCC_OscConfig+0x660>)
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003a16:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003a1a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	695b      	ldr	r3, [r3, #20]
 8003a22:	21f8      	movs	r1, #248	@ 0xf8
 8003a24:	f8c7 1140 	str.w	r1, [r7, #320]	@ 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a28:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 8003a2c:	fa91 f1a1 	rbit	r1, r1
 8003a30:	f8c7 113c 	str.w	r1, [r7, #316]	@ 0x13c
  return result;
 8003a34:	f8d7 113c 	ldr.w	r1, [r7, #316]	@ 0x13c
 8003a38:	fab1 f181 	clz	r1, r1
 8003a3c:	b2c9      	uxtb	r1, r1
 8003a3e:	408b      	lsls	r3, r1
 8003a40:	494b      	ldr	r1, [pc, #300]	@ (8003b70 <HAL_RCC_OscConfig+0x660>)
 8003a42:	4313      	orrs	r3, r2
 8003a44:	600b      	str	r3, [r1, #0]
 8003a46:	e065      	b.n	8003b14 <HAL_RCC_OscConfig+0x604>
 8003a48:	2301      	movs	r3, #1
 8003a4a:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a4e:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8003a52:	fa93 f3a3 	rbit	r3, r3
 8003a56:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  return result;
 8003a5a:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003a5e:	fab3 f383 	clz	r3, r3
 8003a62:	b2db      	uxtb	r3, r3
 8003a64:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8003a68:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8003a6c:	009b      	lsls	r3, r3, #2
 8003a6e:	461a      	mov	r2, r3
 8003a70:	2300      	movs	r3, #0
 8003a72:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a74:	f7fd fc50 	bl	8001318 <HAL_GetTick>
 8003a78:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003a7c:	e00a      	b.n	8003a94 <HAL_RCC_OscConfig+0x584>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003a7e:	f7fd fc4b 	bl	8001318 <HAL_GetTick>
 8003a82:	4602      	mov	r2, r0
 8003a84:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8003a88:	1ad3      	subs	r3, r2, r3
 8003a8a:	2b02      	cmp	r3, #2
 8003a8c:	d902      	bls.n	8003a94 <HAL_RCC_OscConfig+0x584>
          {
            return HAL_TIMEOUT;
 8003a8e:	2303      	movs	r3, #3
 8003a90:	f000 bd45 	b.w	800451e <HAL_RCC_OscConfig+0x100e>
 8003a94:	2302      	movs	r3, #2
 8003a96:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a9a:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8003a9e:	fa93 f3a3 	rbit	r3, r3
 8003aa2:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  return result;
 8003aa6:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003aaa:	fab3 f383 	clz	r3, r3
 8003aae:	b2db      	uxtb	r3, r3
 8003ab0:	2b3f      	cmp	r3, #63	@ 0x3f
 8003ab2:	d802      	bhi.n	8003aba <HAL_RCC_OscConfig+0x5aa>
 8003ab4:	4b2e      	ldr	r3, [pc, #184]	@ (8003b70 <HAL_RCC_OscConfig+0x660>)
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	e013      	b.n	8003ae2 <HAL_RCC_OscConfig+0x5d2>
 8003aba:	2302      	movs	r3, #2
 8003abc:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ac0:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8003ac4:	fa93 f3a3 	rbit	r3, r3
 8003ac8:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 8003acc:	2302      	movs	r3, #2
 8003ace:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 8003ad2:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8003ad6:	fa93 f3a3 	rbit	r3, r3
 8003ada:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 8003ade:	4b24      	ldr	r3, [pc, #144]	@ (8003b70 <HAL_RCC_OscConfig+0x660>)
 8003ae0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ae2:	2202      	movs	r2, #2
 8003ae4:	f8c7 2118 	str.w	r2, [r7, #280]	@ 0x118
 8003ae8:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 8003aec:	fa92 f2a2 	rbit	r2, r2
 8003af0:	f8c7 2114 	str.w	r2, [r7, #276]	@ 0x114
  return result;
 8003af4:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 8003af8:	fab2 f282 	clz	r2, r2
 8003afc:	b2d2      	uxtb	r2, r2
 8003afe:	f042 0220 	orr.w	r2, r2, #32
 8003b02:	b2d2      	uxtb	r2, r2
 8003b04:	f002 021f 	and.w	r2, r2, #31
 8003b08:	2101      	movs	r1, #1
 8003b0a:	fa01 f202 	lsl.w	r2, r1, r2
 8003b0e:	4013      	ands	r3, r2
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d1b4      	bne.n	8003a7e <HAL_RCC_OscConfig+0x56e>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003b14:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003b18:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	f003 0308 	and.w	r3, r3, #8
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	f000 8115 	beq.w	8003d54 <HAL_RCC_OscConfig+0x844>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003b2a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003b2e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	699b      	ldr	r3, [r3, #24]
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d07e      	beq.n	8003c38 <HAL_RCC_OscConfig+0x728>
 8003b3a:	2301      	movs	r3, #1
 8003b3c:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b40:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8003b44:	fa93 f3a3 	rbit	r3, r3
 8003b48:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
  return result;
 8003b4c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003b50:	fab3 f383 	clz	r3, r3
 8003b54:	b2db      	uxtb	r3, r3
 8003b56:	461a      	mov	r2, r3
 8003b58:	4b06      	ldr	r3, [pc, #24]	@ (8003b74 <HAL_RCC_OscConfig+0x664>)
 8003b5a:	4413      	add	r3, r2
 8003b5c:	009b      	lsls	r3, r3, #2
 8003b5e:	461a      	mov	r2, r3
 8003b60:	2301      	movs	r3, #1
 8003b62:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003b64:	f7fd fbd8 	bl	8001318 <HAL_GetTick>
 8003b68:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003b6c:	e00f      	b.n	8003b8e <HAL_RCC_OscConfig+0x67e>
 8003b6e:	bf00      	nop
 8003b70:	40021000 	.word	0x40021000
 8003b74:	10908120 	.word	0x10908120
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003b78:	f7fd fbce 	bl	8001318 <HAL_GetTick>
 8003b7c:	4602      	mov	r2, r0
 8003b7e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8003b82:	1ad3      	subs	r3, r2, r3
 8003b84:	2b02      	cmp	r3, #2
 8003b86:	d902      	bls.n	8003b8e <HAL_RCC_OscConfig+0x67e>
        {
          return HAL_TIMEOUT;
 8003b88:	2303      	movs	r3, #3
 8003b8a:	f000 bcc8 	b.w	800451e <HAL_RCC_OscConfig+0x100e>
 8003b8e:	2302      	movs	r3, #2
 8003b90:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b94:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8003b98:	fa93 f3a3 	rbit	r3, r3
 8003b9c:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8003ba0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003ba4:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8003ba8:	2202      	movs	r2, #2
 8003baa:	601a      	str	r2, [r3, #0]
 8003bac:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003bb0:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	fa93 f2a3 	rbit	r2, r3
 8003bba:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003bbe:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8003bc2:	601a      	str	r2, [r3, #0]
 8003bc4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003bc8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003bcc:	2202      	movs	r2, #2
 8003bce:	601a      	str	r2, [r3, #0]
 8003bd0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003bd4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	fa93 f2a3 	rbit	r2, r3
 8003bde:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003be2:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8003be6:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003be8:	4bb0      	ldr	r3, [pc, #704]	@ (8003eac <HAL_RCC_OscConfig+0x99c>)
 8003bea:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003bec:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003bf0:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8003bf4:	2102      	movs	r1, #2
 8003bf6:	6019      	str	r1, [r3, #0]
 8003bf8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003bfc:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	fa93 f1a3 	rbit	r1, r3
 8003c06:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003c0a:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8003c0e:	6019      	str	r1, [r3, #0]
  return result;
 8003c10:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003c14:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	fab3 f383 	clz	r3, r3
 8003c1e:	b2db      	uxtb	r3, r3
 8003c20:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8003c24:	b2db      	uxtb	r3, r3
 8003c26:	f003 031f 	and.w	r3, r3, #31
 8003c2a:	2101      	movs	r1, #1
 8003c2c:	fa01 f303 	lsl.w	r3, r1, r3
 8003c30:	4013      	ands	r3, r2
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d0a0      	beq.n	8003b78 <HAL_RCC_OscConfig+0x668>
 8003c36:	e08d      	b.n	8003d54 <HAL_RCC_OscConfig+0x844>
 8003c38:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003c3c:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8003c40:	2201      	movs	r2, #1
 8003c42:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c44:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003c48:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	fa93 f2a3 	rbit	r2, r3
 8003c52:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003c56:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8003c5a:	601a      	str	r2, [r3, #0]
  return result;
 8003c5c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003c60:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8003c64:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003c66:	fab3 f383 	clz	r3, r3
 8003c6a:	b2db      	uxtb	r3, r3
 8003c6c:	461a      	mov	r2, r3
 8003c6e:	4b90      	ldr	r3, [pc, #576]	@ (8003eb0 <HAL_RCC_OscConfig+0x9a0>)
 8003c70:	4413      	add	r3, r2
 8003c72:	009b      	lsls	r3, r3, #2
 8003c74:	461a      	mov	r2, r3
 8003c76:	2300      	movs	r3, #0
 8003c78:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003c7a:	f7fd fb4d 	bl	8001318 <HAL_GetTick>
 8003c7e:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003c82:	e00a      	b.n	8003c9a <HAL_RCC_OscConfig+0x78a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003c84:	f7fd fb48 	bl	8001318 <HAL_GetTick>
 8003c88:	4602      	mov	r2, r0
 8003c8a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8003c8e:	1ad3      	subs	r3, r2, r3
 8003c90:	2b02      	cmp	r3, #2
 8003c92:	d902      	bls.n	8003c9a <HAL_RCC_OscConfig+0x78a>
        {
          return HAL_TIMEOUT;
 8003c94:	2303      	movs	r3, #3
 8003c96:	f000 bc42 	b.w	800451e <HAL_RCC_OscConfig+0x100e>
 8003c9a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003c9e:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8003ca2:	2202      	movs	r2, #2
 8003ca4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ca6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003caa:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	fa93 f2a3 	rbit	r2, r3
 8003cb4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003cb8:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8003cbc:	601a      	str	r2, [r3, #0]
 8003cbe:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003cc2:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8003cc6:	2202      	movs	r2, #2
 8003cc8:	601a      	str	r2, [r3, #0]
 8003cca:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003cce:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	fa93 f2a3 	rbit	r2, r3
 8003cd8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003cdc:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8003ce0:	601a      	str	r2, [r3, #0]
 8003ce2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003ce6:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8003cea:	2202      	movs	r2, #2
 8003cec:	601a      	str	r2, [r3, #0]
 8003cee:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003cf2:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	fa93 f2a3 	rbit	r2, r3
 8003cfc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003d00:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8003d04:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003d06:	4b69      	ldr	r3, [pc, #420]	@ (8003eac <HAL_RCC_OscConfig+0x99c>)
 8003d08:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003d0a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003d0e:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8003d12:	2102      	movs	r1, #2
 8003d14:	6019      	str	r1, [r3, #0]
 8003d16:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003d1a:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	fa93 f1a3 	rbit	r1, r3
 8003d24:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003d28:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8003d2c:	6019      	str	r1, [r3, #0]
  return result;
 8003d2e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003d32:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	fab3 f383 	clz	r3, r3
 8003d3c:	b2db      	uxtb	r3, r3
 8003d3e:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8003d42:	b2db      	uxtb	r3, r3
 8003d44:	f003 031f 	and.w	r3, r3, #31
 8003d48:	2101      	movs	r1, #1
 8003d4a:	fa01 f303 	lsl.w	r3, r1, r3
 8003d4e:	4013      	ands	r3, r2
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d197      	bne.n	8003c84 <HAL_RCC_OscConfig+0x774>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003d54:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003d58:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	f003 0304 	and.w	r3, r3, #4
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	f000 819e 	beq.w	80040a6 <HAL_RCC_OscConfig+0xb96>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003d6a:	2300      	movs	r3, #0
 8003d6c:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003d70:	4b4e      	ldr	r3, [pc, #312]	@ (8003eac <HAL_RCC_OscConfig+0x99c>)
 8003d72:	69db      	ldr	r3, [r3, #28]
 8003d74:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d116      	bne.n	8003daa <HAL_RCC_OscConfig+0x89a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003d7c:	4b4b      	ldr	r3, [pc, #300]	@ (8003eac <HAL_RCC_OscConfig+0x99c>)
 8003d7e:	69db      	ldr	r3, [r3, #28]
 8003d80:	4a4a      	ldr	r2, [pc, #296]	@ (8003eac <HAL_RCC_OscConfig+0x99c>)
 8003d82:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003d86:	61d3      	str	r3, [r2, #28]
 8003d88:	4b48      	ldr	r3, [pc, #288]	@ (8003eac <HAL_RCC_OscConfig+0x99c>)
 8003d8a:	69db      	ldr	r3, [r3, #28]
 8003d8c:	f003 5280 	and.w	r2, r3, #268435456	@ 0x10000000
 8003d90:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003d94:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 8003d98:	601a      	str	r2, [r3, #0]
 8003d9a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003d9e:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 8003da2:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8003da4:	2301      	movs	r3, #1
 8003da6:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003daa:	4b42      	ldr	r3, [pc, #264]	@ (8003eb4 <HAL_RCC_OscConfig+0x9a4>)
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d11a      	bne.n	8003dec <HAL_RCC_OscConfig+0x8dc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003db6:	4b3f      	ldr	r3, [pc, #252]	@ (8003eb4 <HAL_RCC_OscConfig+0x9a4>)
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	4a3e      	ldr	r2, [pc, #248]	@ (8003eb4 <HAL_RCC_OscConfig+0x9a4>)
 8003dbc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003dc0:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003dc2:	f7fd faa9 	bl	8001318 <HAL_GetTick>
 8003dc6:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003dca:	e009      	b.n	8003de0 <HAL_RCC_OscConfig+0x8d0>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003dcc:	f7fd faa4 	bl	8001318 <HAL_GetTick>
 8003dd0:	4602      	mov	r2, r0
 8003dd2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8003dd6:	1ad3      	subs	r3, r2, r3
 8003dd8:	2b64      	cmp	r3, #100	@ 0x64
 8003dda:	d901      	bls.n	8003de0 <HAL_RCC_OscConfig+0x8d0>
        {
          return HAL_TIMEOUT;
 8003ddc:	2303      	movs	r3, #3
 8003dde:	e39e      	b.n	800451e <HAL_RCC_OscConfig+0x100e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003de0:	4b34      	ldr	r3, [pc, #208]	@ (8003eb4 <HAL_RCC_OscConfig+0x9a4>)
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d0ef      	beq.n	8003dcc <HAL_RCC_OscConfig+0x8bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003dec:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003df0:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	68db      	ldr	r3, [r3, #12]
 8003df8:	2b01      	cmp	r3, #1
 8003dfa:	d106      	bne.n	8003e0a <HAL_RCC_OscConfig+0x8fa>
 8003dfc:	4b2b      	ldr	r3, [pc, #172]	@ (8003eac <HAL_RCC_OscConfig+0x99c>)
 8003dfe:	6a1b      	ldr	r3, [r3, #32]
 8003e00:	4a2a      	ldr	r2, [pc, #168]	@ (8003eac <HAL_RCC_OscConfig+0x99c>)
 8003e02:	f043 0301 	orr.w	r3, r3, #1
 8003e06:	6213      	str	r3, [r2, #32]
 8003e08:	e035      	b.n	8003e76 <HAL_RCC_OscConfig+0x966>
 8003e0a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003e0e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	68db      	ldr	r3, [r3, #12]
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d10c      	bne.n	8003e34 <HAL_RCC_OscConfig+0x924>
 8003e1a:	4b24      	ldr	r3, [pc, #144]	@ (8003eac <HAL_RCC_OscConfig+0x99c>)
 8003e1c:	6a1b      	ldr	r3, [r3, #32]
 8003e1e:	4a23      	ldr	r2, [pc, #140]	@ (8003eac <HAL_RCC_OscConfig+0x99c>)
 8003e20:	f023 0301 	bic.w	r3, r3, #1
 8003e24:	6213      	str	r3, [r2, #32]
 8003e26:	4b21      	ldr	r3, [pc, #132]	@ (8003eac <HAL_RCC_OscConfig+0x99c>)
 8003e28:	6a1b      	ldr	r3, [r3, #32]
 8003e2a:	4a20      	ldr	r2, [pc, #128]	@ (8003eac <HAL_RCC_OscConfig+0x99c>)
 8003e2c:	f023 0304 	bic.w	r3, r3, #4
 8003e30:	6213      	str	r3, [r2, #32]
 8003e32:	e020      	b.n	8003e76 <HAL_RCC_OscConfig+0x966>
 8003e34:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003e38:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	68db      	ldr	r3, [r3, #12]
 8003e40:	2b05      	cmp	r3, #5
 8003e42:	d10c      	bne.n	8003e5e <HAL_RCC_OscConfig+0x94e>
 8003e44:	4b19      	ldr	r3, [pc, #100]	@ (8003eac <HAL_RCC_OscConfig+0x99c>)
 8003e46:	6a1b      	ldr	r3, [r3, #32]
 8003e48:	4a18      	ldr	r2, [pc, #96]	@ (8003eac <HAL_RCC_OscConfig+0x99c>)
 8003e4a:	f043 0304 	orr.w	r3, r3, #4
 8003e4e:	6213      	str	r3, [r2, #32]
 8003e50:	4b16      	ldr	r3, [pc, #88]	@ (8003eac <HAL_RCC_OscConfig+0x99c>)
 8003e52:	6a1b      	ldr	r3, [r3, #32]
 8003e54:	4a15      	ldr	r2, [pc, #84]	@ (8003eac <HAL_RCC_OscConfig+0x99c>)
 8003e56:	f043 0301 	orr.w	r3, r3, #1
 8003e5a:	6213      	str	r3, [r2, #32]
 8003e5c:	e00b      	b.n	8003e76 <HAL_RCC_OscConfig+0x966>
 8003e5e:	4b13      	ldr	r3, [pc, #76]	@ (8003eac <HAL_RCC_OscConfig+0x99c>)
 8003e60:	6a1b      	ldr	r3, [r3, #32]
 8003e62:	4a12      	ldr	r2, [pc, #72]	@ (8003eac <HAL_RCC_OscConfig+0x99c>)
 8003e64:	f023 0301 	bic.w	r3, r3, #1
 8003e68:	6213      	str	r3, [r2, #32]
 8003e6a:	4b10      	ldr	r3, [pc, #64]	@ (8003eac <HAL_RCC_OscConfig+0x99c>)
 8003e6c:	6a1b      	ldr	r3, [r3, #32]
 8003e6e:	4a0f      	ldr	r2, [pc, #60]	@ (8003eac <HAL_RCC_OscConfig+0x99c>)
 8003e70:	f023 0304 	bic.w	r3, r3, #4
 8003e74:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003e76:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003e7a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	68db      	ldr	r3, [r3, #12]
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	f000 8087 	beq.w	8003f96 <HAL_RCC_OscConfig+0xa86>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003e88:	f7fd fa46 	bl	8001318 <HAL_GetTick>
 8003e8c:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e90:	e012      	b.n	8003eb8 <HAL_RCC_OscConfig+0x9a8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003e92:	f7fd fa41 	bl	8001318 <HAL_GetTick>
 8003e96:	4602      	mov	r2, r0
 8003e98:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8003e9c:	1ad3      	subs	r3, r2, r3
 8003e9e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003ea2:	4293      	cmp	r3, r2
 8003ea4:	d908      	bls.n	8003eb8 <HAL_RCC_OscConfig+0x9a8>
        {
          return HAL_TIMEOUT;
 8003ea6:	2303      	movs	r3, #3
 8003ea8:	e339      	b.n	800451e <HAL_RCC_OscConfig+0x100e>
 8003eaa:	bf00      	nop
 8003eac:	40021000 	.word	0x40021000
 8003eb0:	10908120 	.word	0x10908120
 8003eb4:	40007000 	.word	0x40007000
 8003eb8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003ebc:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8003ec0:	2202      	movs	r2, #2
 8003ec2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ec4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003ec8:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	fa93 f2a3 	rbit	r2, r3
 8003ed2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003ed6:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8003eda:	601a      	str	r2, [r3, #0]
 8003edc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003ee0:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8003ee4:	2202      	movs	r2, #2
 8003ee6:	601a      	str	r2, [r3, #0]
 8003ee8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003eec:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	fa93 f2a3 	rbit	r2, r3
 8003ef6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003efa:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8003efe:	601a      	str	r2, [r3, #0]
  return result;
 8003f00:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003f04:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8003f08:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f0a:	fab3 f383 	clz	r3, r3
 8003f0e:	b2db      	uxtb	r3, r3
 8003f10:	f023 035f 	bic.w	r3, r3, #95	@ 0x5f
 8003f14:	b2db      	uxtb	r3, r3
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d102      	bne.n	8003f20 <HAL_RCC_OscConfig+0xa10>
 8003f1a:	4b98      	ldr	r3, [pc, #608]	@ (800417c <HAL_RCC_OscConfig+0xc6c>)
 8003f1c:	6a1b      	ldr	r3, [r3, #32]
 8003f1e:	e013      	b.n	8003f48 <HAL_RCC_OscConfig+0xa38>
 8003f20:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003f24:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8003f28:	2202      	movs	r2, #2
 8003f2a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f2c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003f30:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	fa93 f2a3 	rbit	r2, r3
 8003f3a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003f3e:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8003f42:	601a      	str	r2, [r3, #0]
 8003f44:	4b8d      	ldr	r3, [pc, #564]	@ (800417c <HAL_RCC_OscConfig+0xc6c>)
 8003f46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f48:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003f4c:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 8003f50:	2102      	movs	r1, #2
 8003f52:	6011      	str	r1, [r2, #0]
 8003f54:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003f58:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 8003f5c:	6812      	ldr	r2, [r2, #0]
 8003f5e:	fa92 f1a2 	rbit	r1, r2
 8003f62:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003f66:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8003f6a:	6011      	str	r1, [r2, #0]
  return result;
 8003f6c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003f70:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8003f74:	6812      	ldr	r2, [r2, #0]
 8003f76:	fab2 f282 	clz	r2, r2
 8003f7a:	b2d2      	uxtb	r2, r2
 8003f7c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003f80:	b2d2      	uxtb	r2, r2
 8003f82:	f002 021f 	and.w	r2, r2, #31
 8003f86:	2101      	movs	r1, #1
 8003f88:	fa01 f202 	lsl.w	r2, r1, r2
 8003f8c:	4013      	ands	r3, r2
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	f43f af7f 	beq.w	8003e92 <HAL_RCC_OscConfig+0x982>
 8003f94:	e07d      	b.n	8004092 <HAL_RCC_OscConfig+0xb82>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003f96:	f7fd f9bf 	bl	8001318 <HAL_GetTick>
 8003f9a:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003f9e:	e00b      	b.n	8003fb8 <HAL_RCC_OscConfig+0xaa8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003fa0:	f7fd f9ba 	bl	8001318 <HAL_GetTick>
 8003fa4:	4602      	mov	r2, r0
 8003fa6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8003faa:	1ad3      	subs	r3, r2, r3
 8003fac:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003fb0:	4293      	cmp	r3, r2
 8003fb2:	d901      	bls.n	8003fb8 <HAL_RCC_OscConfig+0xaa8>
        {
          return HAL_TIMEOUT;
 8003fb4:	2303      	movs	r3, #3
 8003fb6:	e2b2      	b.n	800451e <HAL_RCC_OscConfig+0x100e>
 8003fb8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003fbc:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8003fc0:	2202      	movs	r2, #2
 8003fc2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003fc4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003fc8:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	fa93 f2a3 	rbit	r2, r3
 8003fd2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003fd6:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 8003fda:	601a      	str	r2, [r3, #0]
 8003fdc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003fe0:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8003fe4:	2202      	movs	r2, #2
 8003fe6:	601a      	str	r2, [r3, #0]
 8003fe8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003fec:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	fa93 f2a3 	rbit	r2, r3
 8003ff6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003ffa:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8003ffe:	601a      	str	r2, [r3, #0]
  return result;
 8004000:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004004:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8004008:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800400a:	fab3 f383 	clz	r3, r3
 800400e:	b2db      	uxtb	r3, r3
 8004010:	f023 035f 	bic.w	r3, r3, #95	@ 0x5f
 8004014:	b2db      	uxtb	r3, r3
 8004016:	2b00      	cmp	r3, #0
 8004018:	d102      	bne.n	8004020 <HAL_RCC_OscConfig+0xb10>
 800401a:	4b58      	ldr	r3, [pc, #352]	@ (800417c <HAL_RCC_OscConfig+0xc6c>)
 800401c:	6a1b      	ldr	r3, [r3, #32]
 800401e:	e013      	b.n	8004048 <HAL_RCC_OscConfig+0xb38>
 8004020:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004024:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8004028:	2202      	movs	r2, #2
 800402a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800402c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004030:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	fa93 f2a3 	rbit	r2, r3
 800403a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800403e:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 8004042:	601a      	str	r2, [r3, #0]
 8004044:	4b4d      	ldr	r3, [pc, #308]	@ (800417c <HAL_RCC_OscConfig+0xc6c>)
 8004046:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004048:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800404c:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 8004050:	2102      	movs	r1, #2
 8004052:	6011      	str	r1, [r2, #0]
 8004054:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004058:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 800405c:	6812      	ldr	r2, [r2, #0]
 800405e:	fa92 f1a2 	rbit	r1, r2
 8004062:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004066:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 800406a:	6011      	str	r1, [r2, #0]
  return result;
 800406c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004070:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8004074:	6812      	ldr	r2, [r2, #0]
 8004076:	fab2 f282 	clz	r2, r2
 800407a:	b2d2      	uxtb	r2, r2
 800407c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004080:	b2d2      	uxtb	r2, r2
 8004082:	f002 021f 	and.w	r2, r2, #31
 8004086:	2101      	movs	r1, #1
 8004088:	fa01 f202 	lsl.w	r2, r1, r2
 800408c:	4013      	ands	r3, r2
 800408e:	2b00      	cmp	r3, #0
 8004090:	d186      	bne.n	8003fa0 <HAL_RCC_OscConfig+0xa90>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004092:	f897 31ff 	ldrb.w	r3, [r7, #511]	@ 0x1ff
 8004096:	2b01      	cmp	r3, #1
 8004098:	d105      	bne.n	80040a6 <HAL_RCC_OscConfig+0xb96>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800409a:	4b38      	ldr	r3, [pc, #224]	@ (800417c <HAL_RCC_OscConfig+0xc6c>)
 800409c:	69db      	ldr	r3, [r3, #28]
 800409e:	4a37      	ldr	r2, [pc, #220]	@ (800417c <HAL_RCC_OscConfig+0xc6c>)
 80040a0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80040a4:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80040a6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80040aa:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	69db      	ldr	r3, [r3, #28]
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	f000 8232 	beq.w	800451c <HAL_RCC_OscConfig+0x100c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80040b8:	4b30      	ldr	r3, [pc, #192]	@ (800417c <HAL_RCC_OscConfig+0xc6c>)
 80040ba:	685b      	ldr	r3, [r3, #4]
 80040bc:	f003 030c 	and.w	r3, r3, #12
 80040c0:	2b08      	cmp	r3, #8
 80040c2:	f000 8201 	beq.w	80044c8 <HAL_RCC_OscConfig+0xfb8>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80040c6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80040ca:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	69db      	ldr	r3, [r3, #28]
 80040d2:	2b02      	cmp	r3, #2
 80040d4:	f040 8157 	bne.w	8004386 <HAL_RCC_OscConfig+0xe76>
 80040d8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80040dc:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 80040e0:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80040e4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040e6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80040ea:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	fa93 f2a3 	rbit	r2, r3
 80040f4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80040f8:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 80040fc:	601a      	str	r2, [r3, #0]
  return result;
 80040fe:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004102:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8004106:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004108:	fab3 f383 	clz	r3, r3
 800410c:	b2db      	uxtb	r3, r3
 800410e:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8004112:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8004116:	009b      	lsls	r3, r3, #2
 8004118:	461a      	mov	r2, r3
 800411a:	2300      	movs	r3, #0
 800411c:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800411e:	f7fd f8fb 	bl	8001318 <HAL_GetTick>
 8004122:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004126:	e009      	b.n	800413c <HAL_RCC_OscConfig+0xc2c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004128:	f7fd f8f6 	bl	8001318 <HAL_GetTick>
 800412c:	4602      	mov	r2, r0
 800412e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8004132:	1ad3      	subs	r3, r2, r3
 8004134:	2b02      	cmp	r3, #2
 8004136:	d901      	bls.n	800413c <HAL_RCC_OscConfig+0xc2c>
          {
            return HAL_TIMEOUT;
 8004138:	2303      	movs	r3, #3
 800413a:	e1f0      	b.n	800451e <HAL_RCC_OscConfig+0x100e>
 800413c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004140:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8004144:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004148:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800414a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800414e:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	fa93 f2a3 	rbit	r2, r3
 8004158:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800415c:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8004160:	601a      	str	r2, [r3, #0]
  return result;
 8004162:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004166:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 800416a:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800416c:	fab3 f383 	clz	r3, r3
 8004170:	b2db      	uxtb	r3, r3
 8004172:	2b3f      	cmp	r3, #63	@ 0x3f
 8004174:	d804      	bhi.n	8004180 <HAL_RCC_OscConfig+0xc70>
 8004176:	4b01      	ldr	r3, [pc, #4]	@ (800417c <HAL_RCC_OscConfig+0xc6c>)
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	e029      	b.n	80041d0 <HAL_RCC_OscConfig+0xcc0>
 800417c:	40021000 	.word	0x40021000
 8004180:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004184:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8004188:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800418c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800418e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004192:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	fa93 f2a3 	rbit	r2, r3
 800419c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80041a0:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 80041a4:	601a      	str	r2, [r3, #0]
 80041a6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80041aa:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 80041ae:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80041b2:	601a      	str	r2, [r3, #0]
 80041b4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80041b8:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	fa93 f2a3 	rbit	r2, r3
 80041c2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80041c6:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 80041ca:	601a      	str	r2, [r3, #0]
 80041cc:	4bc3      	ldr	r3, [pc, #780]	@ (80044dc <HAL_RCC_OscConfig+0xfcc>)
 80041ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041d0:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80041d4:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 80041d8:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 80041dc:	6011      	str	r1, [r2, #0]
 80041de:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80041e2:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 80041e6:	6812      	ldr	r2, [r2, #0]
 80041e8:	fa92 f1a2 	rbit	r1, r2
 80041ec:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80041f0:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 80041f4:	6011      	str	r1, [r2, #0]
  return result;
 80041f6:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80041fa:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 80041fe:	6812      	ldr	r2, [r2, #0]
 8004200:	fab2 f282 	clz	r2, r2
 8004204:	b2d2      	uxtb	r2, r2
 8004206:	f042 0220 	orr.w	r2, r2, #32
 800420a:	b2d2      	uxtb	r2, r2
 800420c:	f002 021f 	and.w	r2, r2, #31
 8004210:	2101      	movs	r1, #1
 8004212:	fa01 f202 	lsl.w	r2, r1, r2
 8004216:	4013      	ands	r3, r2
 8004218:	2b00      	cmp	r3, #0
 800421a:	d185      	bne.n	8004128 <HAL_RCC_OscConfig+0xc18>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800421c:	4baf      	ldr	r3, [pc, #700]	@ (80044dc <HAL_RCC_OscConfig+0xfcc>)
 800421e:	685b      	ldr	r3, [r3, #4]
 8004220:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8004224:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004228:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8004230:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004234:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	6a1b      	ldr	r3, [r3, #32]
 800423c:	430b      	orrs	r3, r1
 800423e:	49a7      	ldr	r1, [pc, #668]	@ (80044dc <HAL_RCC_OscConfig+0xfcc>)
 8004240:	4313      	orrs	r3, r2
 8004242:	604b      	str	r3, [r1, #4]
 8004244:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004248:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 800424c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8004250:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004252:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004256:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	fa93 f2a3 	rbit	r2, r3
 8004260:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004264:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8004268:	601a      	str	r2, [r3, #0]
  return result;
 800426a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800426e:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8004272:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004274:	fab3 f383 	clz	r3, r3
 8004278:	b2db      	uxtb	r3, r3
 800427a:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 800427e:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8004282:	009b      	lsls	r3, r3, #2
 8004284:	461a      	mov	r2, r3
 8004286:	2301      	movs	r3, #1
 8004288:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800428a:	f7fd f845 	bl	8001318 <HAL_GetTick>
 800428e:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004292:	e009      	b.n	80042a8 <HAL_RCC_OscConfig+0xd98>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004294:	f7fd f840 	bl	8001318 <HAL_GetTick>
 8004298:	4602      	mov	r2, r0
 800429a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800429e:	1ad3      	subs	r3, r2, r3
 80042a0:	2b02      	cmp	r3, #2
 80042a2:	d901      	bls.n	80042a8 <HAL_RCC_OscConfig+0xd98>
          {
            return HAL_TIMEOUT;
 80042a4:	2303      	movs	r3, #3
 80042a6:	e13a      	b.n	800451e <HAL_RCC_OscConfig+0x100e>
 80042a8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80042ac:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 80042b0:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80042b4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042b6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80042ba:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	fa93 f2a3 	rbit	r2, r3
 80042c4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80042c8:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 80042cc:	601a      	str	r2, [r3, #0]
  return result;
 80042ce:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80042d2:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 80042d6:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80042d8:	fab3 f383 	clz	r3, r3
 80042dc:	b2db      	uxtb	r3, r3
 80042de:	2b3f      	cmp	r3, #63	@ 0x3f
 80042e0:	d802      	bhi.n	80042e8 <HAL_RCC_OscConfig+0xdd8>
 80042e2:	4b7e      	ldr	r3, [pc, #504]	@ (80044dc <HAL_RCC_OscConfig+0xfcc>)
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	e027      	b.n	8004338 <HAL_RCC_OscConfig+0xe28>
 80042e8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80042ec:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 80042f0:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80042f4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042f6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80042fa:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	fa93 f2a3 	rbit	r2, r3
 8004304:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004308:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 800430c:	601a      	str	r2, [r3, #0]
 800430e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004312:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8004316:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800431a:	601a      	str	r2, [r3, #0]
 800431c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004320:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	fa93 f2a3 	rbit	r2, r3
 800432a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800432e:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8004332:	601a      	str	r2, [r3, #0]
 8004334:	4b69      	ldr	r3, [pc, #420]	@ (80044dc <HAL_RCC_OscConfig+0xfcc>)
 8004336:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004338:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800433c:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 8004340:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8004344:	6011      	str	r1, [r2, #0]
 8004346:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800434a:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 800434e:	6812      	ldr	r2, [r2, #0]
 8004350:	fa92 f1a2 	rbit	r1, r2
 8004354:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004358:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 800435c:	6011      	str	r1, [r2, #0]
  return result;
 800435e:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004362:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8004366:	6812      	ldr	r2, [r2, #0]
 8004368:	fab2 f282 	clz	r2, r2
 800436c:	b2d2      	uxtb	r2, r2
 800436e:	f042 0220 	orr.w	r2, r2, #32
 8004372:	b2d2      	uxtb	r2, r2
 8004374:	f002 021f 	and.w	r2, r2, #31
 8004378:	2101      	movs	r1, #1
 800437a:	fa01 f202 	lsl.w	r2, r1, r2
 800437e:	4013      	ands	r3, r2
 8004380:	2b00      	cmp	r3, #0
 8004382:	d087      	beq.n	8004294 <HAL_RCC_OscConfig+0xd84>
 8004384:	e0ca      	b.n	800451c <HAL_RCC_OscConfig+0x100c>
 8004386:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800438a:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 800438e:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8004392:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004394:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004398:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	fa93 f2a3 	rbit	r2, r3
 80043a2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80043a6:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 80043aa:	601a      	str	r2, [r3, #0]
  return result;
 80043ac:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80043b0:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 80043b4:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80043b6:	fab3 f383 	clz	r3, r3
 80043ba:	b2db      	uxtb	r3, r3
 80043bc:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80043c0:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80043c4:	009b      	lsls	r3, r3, #2
 80043c6:	461a      	mov	r2, r3
 80043c8:	2300      	movs	r3, #0
 80043ca:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80043cc:	f7fc ffa4 	bl	8001318 <HAL_GetTick>
 80043d0:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80043d4:	e009      	b.n	80043ea <HAL_RCC_OscConfig+0xeda>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80043d6:	f7fc ff9f 	bl	8001318 <HAL_GetTick>
 80043da:	4602      	mov	r2, r0
 80043dc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80043e0:	1ad3      	subs	r3, r2, r3
 80043e2:	2b02      	cmp	r3, #2
 80043e4:	d901      	bls.n	80043ea <HAL_RCC_OscConfig+0xeda>
          {
            return HAL_TIMEOUT;
 80043e6:	2303      	movs	r3, #3
 80043e8:	e099      	b.n	800451e <HAL_RCC_OscConfig+0x100e>
 80043ea:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80043ee:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 80043f2:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80043f6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043f8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80043fc:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	fa93 f2a3 	rbit	r2, r3
 8004406:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800440a:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 800440e:	601a      	str	r2, [r3, #0]
  return result;
 8004410:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004414:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8004418:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800441a:	fab3 f383 	clz	r3, r3
 800441e:	b2db      	uxtb	r3, r3
 8004420:	2b3f      	cmp	r3, #63	@ 0x3f
 8004422:	d802      	bhi.n	800442a <HAL_RCC_OscConfig+0xf1a>
 8004424:	4b2d      	ldr	r3, [pc, #180]	@ (80044dc <HAL_RCC_OscConfig+0xfcc>)
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	e027      	b.n	800447a <HAL_RCC_OscConfig+0xf6a>
 800442a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800442e:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8004432:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004436:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004438:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800443c:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	fa93 f2a3 	rbit	r2, r3
 8004446:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800444a:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 800444e:	601a      	str	r2, [r3, #0]
 8004450:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004454:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8004458:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800445c:	601a      	str	r2, [r3, #0]
 800445e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004462:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	fa93 f2a3 	rbit	r2, r3
 800446c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004470:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 8004474:	601a      	str	r2, [r3, #0]
 8004476:	4b19      	ldr	r3, [pc, #100]	@ (80044dc <HAL_RCC_OscConfig+0xfcc>)
 8004478:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800447a:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800447e:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 8004482:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8004486:	6011      	str	r1, [r2, #0]
 8004488:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800448c:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 8004490:	6812      	ldr	r2, [r2, #0]
 8004492:	fa92 f1a2 	rbit	r1, r2
 8004496:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800449a:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 800449e:	6011      	str	r1, [r2, #0]
  return result;
 80044a0:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80044a4:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 80044a8:	6812      	ldr	r2, [r2, #0]
 80044aa:	fab2 f282 	clz	r2, r2
 80044ae:	b2d2      	uxtb	r2, r2
 80044b0:	f042 0220 	orr.w	r2, r2, #32
 80044b4:	b2d2      	uxtb	r2, r2
 80044b6:	f002 021f 	and.w	r2, r2, #31
 80044ba:	2101      	movs	r1, #1
 80044bc:	fa01 f202 	lsl.w	r2, r1, r2
 80044c0:	4013      	ands	r3, r2
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d187      	bne.n	80043d6 <HAL_RCC_OscConfig+0xec6>
 80044c6:	e029      	b.n	800451c <HAL_RCC_OscConfig+0x100c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80044c8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80044cc:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	69db      	ldr	r3, [r3, #28]
 80044d4:	2b01      	cmp	r3, #1
 80044d6:	d103      	bne.n	80044e0 <HAL_RCC_OscConfig+0xfd0>
      {
        return HAL_ERROR;
 80044d8:	2301      	movs	r3, #1
 80044da:	e020      	b.n	800451e <HAL_RCC_OscConfig+0x100e>
 80044dc:	40021000 	.word	0x40021000
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80044e0:	4b11      	ldr	r3, [pc, #68]	@ (8004528 <HAL_RCC_OscConfig+0x1018>)
 80044e2:	685b      	ldr	r3, [r3, #4]
 80044e4:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80044e8:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 80044ec:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80044f0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80044f4:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	6a1b      	ldr	r3, [r3, #32]
 80044fc:	429a      	cmp	r2, r3
 80044fe:	d10b      	bne.n	8004518 <HAL_RCC_OscConfig+0x1008>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8004500:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8004504:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8004508:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800450c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8004514:	429a      	cmp	r2, r3
 8004516:	d001      	beq.n	800451c <HAL_RCC_OscConfig+0x100c>
#endif
        {
          return HAL_ERROR;
 8004518:	2301      	movs	r3, #1
 800451a:	e000      	b.n	800451e <HAL_RCC_OscConfig+0x100e>
        }
      }
    }
  }

  return HAL_OK;
 800451c:	2300      	movs	r3, #0
}
 800451e:	4618      	mov	r0, r3
 8004520:	f507 7700 	add.w	r7, r7, #512	@ 0x200
 8004524:	46bd      	mov	sp, r7
 8004526:	bd80      	pop	{r7, pc}
 8004528:	40021000 	.word	0x40021000

0800452c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800452c:	b580      	push	{r7, lr}
 800452e:	b09e      	sub	sp, #120	@ 0x78
 8004530:	af00      	add	r7, sp, #0
 8004532:	6078      	str	r0, [r7, #4]
 8004534:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8004536:	2300      	movs	r3, #0
 8004538:	677b      	str	r3, [r7, #116]	@ 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	2b00      	cmp	r3, #0
 800453e:	d101      	bne.n	8004544 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004540:	2301      	movs	r3, #1
 8004542:	e154      	b.n	80047ee <HAL_RCC_ClockConfig+0x2c2>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004544:	4b89      	ldr	r3, [pc, #548]	@ (800476c <HAL_RCC_ClockConfig+0x240>)
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	f003 0307 	and.w	r3, r3, #7
 800454c:	683a      	ldr	r2, [r7, #0]
 800454e:	429a      	cmp	r2, r3
 8004550:	d910      	bls.n	8004574 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004552:	4b86      	ldr	r3, [pc, #536]	@ (800476c <HAL_RCC_ClockConfig+0x240>)
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	f023 0207 	bic.w	r2, r3, #7
 800455a:	4984      	ldr	r1, [pc, #528]	@ (800476c <HAL_RCC_ClockConfig+0x240>)
 800455c:	683b      	ldr	r3, [r7, #0]
 800455e:	4313      	orrs	r3, r2
 8004560:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004562:	4b82      	ldr	r3, [pc, #520]	@ (800476c <HAL_RCC_ClockConfig+0x240>)
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	f003 0307 	and.w	r3, r3, #7
 800456a:	683a      	ldr	r2, [r7, #0]
 800456c:	429a      	cmp	r2, r3
 800456e:	d001      	beq.n	8004574 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004570:	2301      	movs	r3, #1
 8004572:	e13c      	b.n	80047ee <HAL_RCC_ClockConfig+0x2c2>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	f003 0302 	and.w	r3, r3, #2
 800457c:	2b00      	cmp	r3, #0
 800457e:	d008      	beq.n	8004592 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004580:	4b7b      	ldr	r3, [pc, #492]	@ (8004770 <HAL_RCC_ClockConfig+0x244>)
 8004582:	685b      	ldr	r3, [r3, #4]
 8004584:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	689b      	ldr	r3, [r3, #8]
 800458c:	4978      	ldr	r1, [pc, #480]	@ (8004770 <HAL_RCC_ClockConfig+0x244>)
 800458e:	4313      	orrs	r3, r2
 8004590:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	f003 0301 	and.w	r3, r3, #1
 800459a:	2b00      	cmp	r3, #0
 800459c:	f000 80cd 	beq.w	800473a <HAL_RCC_ClockConfig+0x20e>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	685b      	ldr	r3, [r3, #4]
 80045a4:	2b01      	cmp	r3, #1
 80045a6:	d137      	bne.n	8004618 <HAL_RCC_ClockConfig+0xec>
 80045a8:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80045ac:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80045ae:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80045b0:	fa93 f3a3 	rbit	r3, r3
 80045b4:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 80045b6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80045b8:	fab3 f383 	clz	r3, r3
 80045bc:	b2db      	uxtb	r3, r3
 80045be:	2b3f      	cmp	r3, #63	@ 0x3f
 80045c0:	d802      	bhi.n	80045c8 <HAL_RCC_ClockConfig+0x9c>
 80045c2:	4b6b      	ldr	r3, [pc, #428]	@ (8004770 <HAL_RCC_ClockConfig+0x244>)
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	e00f      	b.n	80045e8 <HAL_RCC_ClockConfig+0xbc>
 80045c8:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80045cc:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80045ce:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80045d0:	fa93 f3a3 	rbit	r3, r3
 80045d4:	667b      	str	r3, [r7, #100]	@ 0x64
 80045d6:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80045da:	663b      	str	r3, [r7, #96]	@ 0x60
 80045dc:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80045de:	fa93 f3a3 	rbit	r3, r3
 80045e2:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80045e4:	4b62      	ldr	r3, [pc, #392]	@ (8004770 <HAL_RCC_ClockConfig+0x244>)
 80045e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045e8:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80045ec:	65ba      	str	r2, [r7, #88]	@ 0x58
 80045ee:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80045f0:	fa92 f2a2 	rbit	r2, r2
 80045f4:	657a      	str	r2, [r7, #84]	@ 0x54
  return result;
 80045f6:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80045f8:	fab2 f282 	clz	r2, r2
 80045fc:	b2d2      	uxtb	r2, r2
 80045fe:	f042 0220 	orr.w	r2, r2, #32
 8004602:	b2d2      	uxtb	r2, r2
 8004604:	f002 021f 	and.w	r2, r2, #31
 8004608:	2101      	movs	r1, #1
 800460a:	fa01 f202 	lsl.w	r2, r1, r2
 800460e:	4013      	ands	r3, r2
 8004610:	2b00      	cmp	r3, #0
 8004612:	d171      	bne.n	80046f8 <HAL_RCC_ClockConfig+0x1cc>
      {
        return HAL_ERROR;
 8004614:	2301      	movs	r3, #1
 8004616:	e0ea      	b.n	80047ee <HAL_RCC_ClockConfig+0x2c2>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	685b      	ldr	r3, [r3, #4]
 800461c:	2b02      	cmp	r3, #2
 800461e:	d137      	bne.n	8004690 <HAL_RCC_ClockConfig+0x164>
 8004620:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004624:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004626:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004628:	fa93 f3a3 	rbit	r3, r3
 800462c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 800462e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004630:	fab3 f383 	clz	r3, r3
 8004634:	b2db      	uxtb	r3, r3
 8004636:	2b3f      	cmp	r3, #63	@ 0x3f
 8004638:	d802      	bhi.n	8004640 <HAL_RCC_ClockConfig+0x114>
 800463a:	4b4d      	ldr	r3, [pc, #308]	@ (8004770 <HAL_RCC_ClockConfig+0x244>)
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	e00f      	b.n	8004660 <HAL_RCC_ClockConfig+0x134>
 8004640:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004644:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004646:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004648:	fa93 f3a3 	rbit	r3, r3
 800464c:	647b      	str	r3, [r7, #68]	@ 0x44
 800464e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004652:	643b      	str	r3, [r7, #64]	@ 0x40
 8004654:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004656:	fa93 f3a3 	rbit	r3, r3
 800465a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800465c:	4b44      	ldr	r3, [pc, #272]	@ (8004770 <HAL_RCC_ClockConfig+0x244>)
 800465e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004660:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004664:	63ba      	str	r2, [r7, #56]	@ 0x38
 8004666:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8004668:	fa92 f2a2 	rbit	r2, r2
 800466c:	637a      	str	r2, [r7, #52]	@ 0x34
  return result;
 800466e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004670:	fab2 f282 	clz	r2, r2
 8004674:	b2d2      	uxtb	r2, r2
 8004676:	f042 0220 	orr.w	r2, r2, #32
 800467a:	b2d2      	uxtb	r2, r2
 800467c:	f002 021f 	and.w	r2, r2, #31
 8004680:	2101      	movs	r1, #1
 8004682:	fa01 f202 	lsl.w	r2, r1, r2
 8004686:	4013      	ands	r3, r2
 8004688:	2b00      	cmp	r3, #0
 800468a:	d135      	bne.n	80046f8 <HAL_RCC_ClockConfig+0x1cc>
      {
        return HAL_ERROR;
 800468c:	2301      	movs	r3, #1
 800468e:	e0ae      	b.n	80047ee <HAL_RCC_ClockConfig+0x2c2>
 8004690:	2302      	movs	r3, #2
 8004692:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004694:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004696:	fa93 f3a3 	rbit	r3, r3
 800469a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 800469c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800469e:	fab3 f383 	clz	r3, r3
 80046a2:	b2db      	uxtb	r3, r3
 80046a4:	2b3f      	cmp	r3, #63	@ 0x3f
 80046a6:	d802      	bhi.n	80046ae <HAL_RCC_ClockConfig+0x182>
 80046a8:	4b31      	ldr	r3, [pc, #196]	@ (8004770 <HAL_RCC_ClockConfig+0x244>)
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	e00d      	b.n	80046ca <HAL_RCC_ClockConfig+0x19e>
 80046ae:	2302      	movs	r3, #2
 80046b0:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80046b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80046b4:	fa93 f3a3 	rbit	r3, r3
 80046b8:	627b      	str	r3, [r7, #36]	@ 0x24
 80046ba:	2302      	movs	r3, #2
 80046bc:	623b      	str	r3, [r7, #32]
 80046be:	6a3b      	ldr	r3, [r7, #32]
 80046c0:	fa93 f3a3 	rbit	r3, r3
 80046c4:	61fb      	str	r3, [r7, #28]
 80046c6:	4b2a      	ldr	r3, [pc, #168]	@ (8004770 <HAL_RCC_ClockConfig+0x244>)
 80046c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046ca:	2202      	movs	r2, #2
 80046cc:	61ba      	str	r2, [r7, #24]
 80046ce:	69ba      	ldr	r2, [r7, #24]
 80046d0:	fa92 f2a2 	rbit	r2, r2
 80046d4:	617a      	str	r2, [r7, #20]
  return result;
 80046d6:	697a      	ldr	r2, [r7, #20]
 80046d8:	fab2 f282 	clz	r2, r2
 80046dc:	b2d2      	uxtb	r2, r2
 80046de:	f042 0220 	orr.w	r2, r2, #32
 80046e2:	b2d2      	uxtb	r2, r2
 80046e4:	f002 021f 	and.w	r2, r2, #31
 80046e8:	2101      	movs	r1, #1
 80046ea:	fa01 f202 	lsl.w	r2, r1, r2
 80046ee:	4013      	ands	r3, r2
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d101      	bne.n	80046f8 <HAL_RCC_ClockConfig+0x1cc>
      {
        return HAL_ERROR;
 80046f4:	2301      	movs	r3, #1
 80046f6:	e07a      	b.n	80047ee <HAL_RCC_ClockConfig+0x2c2>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80046f8:	4b1d      	ldr	r3, [pc, #116]	@ (8004770 <HAL_RCC_ClockConfig+0x244>)
 80046fa:	685b      	ldr	r3, [r3, #4]
 80046fc:	f023 0203 	bic.w	r2, r3, #3
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	685b      	ldr	r3, [r3, #4]
 8004704:	491a      	ldr	r1, [pc, #104]	@ (8004770 <HAL_RCC_ClockConfig+0x244>)
 8004706:	4313      	orrs	r3, r2
 8004708:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800470a:	f7fc fe05 	bl	8001318 <HAL_GetTick>
 800470e:	6778      	str	r0, [r7, #116]	@ 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004710:	e00a      	b.n	8004728 <HAL_RCC_ClockConfig+0x1fc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004712:	f7fc fe01 	bl	8001318 <HAL_GetTick>
 8004716:	4602      	mov	r2, r0
 8004718:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800471a:	1ad3      	subs	r3, r2, r3
 800471c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004720:	4293      	cmp	r3, r2
 8004722:	d901      	bls.n	8004728 <HAL_RCC_ClockConfig+0x1fc>
      {
        return HAL_TIMEOUT;
 8004724:	2303      	movs	r3, #3
 8004726:	e062      	b.n	80047ee <HAL_RCC_ClockConfig+0x2c2>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004728:	4b11      	ldr	r3, [pc, #68]	@ (8004770 <HAL_RCC_ClockConfig+0x244>)
 800472a:	685b      	ldr	r3, [r3, #4]
 800472c:	f003 020c 	and.w	r2, r3, #12
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	685b      	ldr	r3, [r3, #4]
 8004734:	009b      	lsls	r3, r3, #2
 8004736:	429a      	cmp	r2, r3
 8004738:	d1eb      	bne.n	8004712 <HAL_RCC_ClockConfig+0x1e6>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800473a:	4b0c      	ldr	r3, [pc, #48]	@ (800476c <HAL_RCC_ClockConfig+0x240>)
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	f003 0307 	and.w	r3, r3, #7
 8004742:	683a      	ldr	r2, [r7, #0]
 8004744:	429a      	cmp	r2, r3
 8004746:	d215      	bcs.n	8004774 <HAL_RCC_ClockConfig+0x248>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004748:	4b08      	ldr	r3, [pc, #32]	@ (800476c <HAL_RCC_ClockConfig+0x240>)
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	f023 0207 	bic.w	r2, r3, #7
 8004750:	4906      	ldr	r1, [pc, #24]	@ (800476c <HAL_RCC_ClockConfig+0x240>)
 8004752:	683b      	ldr	r3, [r7, #0]
 8004754:	4313      	orrs	r3, r2
 8004756:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004758:	4b04      	ldr	r3, [pc, #16]	@ (800476c <HAL_RCC_ClockConfig+0x240>)
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	f003 0307 	and.w	r3, r3, #7
 8004760:	683a      	ldr	r2, [r7, #0]
 8004762:	429a      	cmp	r2, r3
 8004764:	d006      	beq.n	8004774 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8004766:	2301      	movs	r3, #1
 8004768:	e041      	b.n	80047ee <HAL_RCC_ClockConfig+0x2c2>
 800476a:	bf00      	nop
 800476c:	40022000 	.word	0x40022000
 8004770:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	f003 0304 	and.w	r3, r3, #4
 800477c:	2b00      	cmp	r3, #0
 800477e:	d008      	beq.n	8004792 <HAL_RCC_ClockConfig+0x266>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004780:	4b1d      	ldr	r3, [pc, #116]	@ (80047f8 <HAL_RCC_ClockConfig+0x2cc>)
 8004782:	685b      	ldr	r3, [r3, #4]
 8004784:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	68db      	ldr	r3, [r3, #12]
 800478c:	491a      	ldr	r1, [pc, #104]	@ (80047f8 <HAL_RCC_ClockConfig+0x2cc>)
 800478e:	4313      	orrs	r3, r2
 8004790:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	f003 0308 	and.w	r3, r3, #8
 800479a:	2b00      	cmp	r3, #0
 800479c:	d009      	beq.n	80047b2 <HAL_RCC_ClockConfig+0x286>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800479e:	4b16      	ldr	r3, [pc, #88]	@ (80047f8 <HAL_RCC_ClockConfig+0x2cc>)
 80047a0:	685b      	ldr	r3, [r3, #4]
 80047a2:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	691b      	ldr	r3, [r3, #16]
 80047aa:	00db      	lsls	r3, r3, #3
 80047ac:	4912      	ldr	r1, [pc, #72]	@ (80047f8 <HAL_RCC_ClockConfig+0x2cc>)
 80047ae:	4313      	orrs	r3, r2
 80047b0:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80047b2:	f000 f829 	bl	8004808 <HAL_RCC_GetSysClockFreq>
 80047b6:	4601      	mov	r1, r0
 80047b8:	4b0f      	ldr	r3, [pc, #60]	@ (80047f8 <HAL_RCC_ClockConfig+0x2cc>)
 80047ba:	685b      	ldr	r3, [r3, #4]
 80047bc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80047c0:	22f0      	movs	r2, #240	@ 0xf0
 80047c2:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80047c4:	693a      	ldr	r2, [r7, #16]
 80047c6:	fa92 f2a2 	rbit	r2, r2
 80047ca:	60fa      	str	r2, [r7, #12]
  return result;
 80047cc:	68fa      	ldr	r2, [r7, #12]
 80047ce:	fab2 f282 	clz	r2, r2
 80047d2:	b2d2      	uxtb	r2, r2
 80047d4:	40d3      	lsrs	r3, r2
 80047d6:	4a09      	ldr	r2, [pc, #36]	@ (80047fc <HAL_RCC_ClockConfig+0x2d0>)
 80047d8:	5cd3      	ldrb	r3, [r2, r3]
 80047da:	fa21 f303 	lsr.w	r3, r1, r3
 80047de:	4a08      	ldr	r2, [pc, #32]	@ (8004800 <HAL_RCC_ClockConfig+0x2d4>)
 80047e0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 80047e2:	4b08      	ldr	r3, [pc, #32]	@ (8004804 <HAL_RCC_ClockConfig+0x2d8>)
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	4618      	mov	r0, r3
 80047e8:	f7fc fd52 	bl	8001290 <HAL_InitTick>
  
  return HAL_OK;
 80047ec:	2300      	movs	r3, #0
}
 80047ee:	4618      	mov	r0, r3
 80047f0:	3778      	adds	r7, #120	@ 0x78
 80047f2:	46bd      	mov	sp, r7
 80047f4:	bd80      	pop	{r7, pc}
 80047f6:	bf00      	nop
 80047f8:	40021000 	.word	0x40021000
 80047fc:	080067b8 	.word	0x080067b8
 8004800:	20000040 	.word	0x20000040
 8004804:	20000044 	.word	0x20000044

08004808 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004808:	b480      	push	{r7}
 800480a:	b087      	sub	sp, #28
 800480c:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800480e:	2300      	movs	r3, #0
 8004810:	60fb      	str	r3, [r7, #12]
 8004812:	2300      	movs	r3, #0
 8004814:	60bb      	str	r3, [r7, #8]
 8004816:	2300      	movs	r3, #0
 8004818:	617b      	str	r3, [r7, #20]
 800481a:	2300      	movs	r3, #0
 800481c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800481e:	2300      	movs	r3, #0
 8004820:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8004822:	4b1e      	ldr	r3, [pc, #120]	@ (800489c <HAL_RCC_GetSysClockFreq+0x94>)
 8004824:	685b      	ldr	r3, [r3, #4]
 8004826:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	f003 030c 	and.w	r3, r3, #12
 800482e:	2b04      	cmp	r3, #4
 8004830:	d002      	beq.n	8004838 <HAL_RCC_GetSysClockFreq+0x30>
 8004832:	2b08      	cmp	r3, #8
 8004834:	d003      	beq.n	800483e <HAL_RCC_GetSysClockFreq+0x36>
 8004836:	e026      	b.n	8004886 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004838:	4b19      	ldr	r3, [pc, #100]	@ (80048a0 <HAL_RCC_GetSysClockFreq+0x98>)
 800483a:	613b      	str	r3, [r7, #16]
      break;
 800483c:	e026      	b.n	800488c <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	0c9b      	lsrs	r3, r3, #18
 8004842:	f003 030f 	and.w	r3, r3, #15
 8004846:	4a17      	ldr	r2, [pc, #92]	@ (80048a4 <HAL_RCC_GetSysClockFreq+0x9c>)
 8004848:	5cd3      	ldrb	r3, [r2, r3]
 800484a:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_Pos];
 800484c:	4b13      	ldr	r3, [pc, #76]	@ (800489c <HAL_RCC_GetSysClockFreq+0x94>)
 800484e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004850:	f003 030f 	and.w	r3, r3, #15
 8004854:	4a14      	ldr	r2, [pc, #80]	@ (80048a8 <HAL_RCC_GetSysClockFreq+0xa0>)
 8004856:	5cd3      	ldrb	r3, [r2, r3]
 8004858:	60bb      	str	r3, [r7, #8]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004860:	2b00      	cmp	r3, #0
 8004862:	d008      	beq.n	8004876 <HAL_RCC_GetSysClockFreq+0x6e>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8004864:	4a0e      	ldr	r2, [pc, #56]	@ (80048a0 <HAL_RCC_GetSysClockFreq+0x98>)
 8004866:	68bb      	ldr	r3, [r7, #8]
 8004868:	fbb2 f2f3 	udiv	r2, r2, r3
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	fb02 f303 	mul.w	r3, r2, r3
 8004872:	617b      	str	r3, [r7, #20]
 8004874:	e004      	b.n	8004880 <HAL_RCC_GetSysClockFreq+0x78>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	4a0c      	ldr	r2, [pc, #48]	@ (80048ac <HAL_RCC_GetSysClockFreq+0xa4>)
 800487a:	fb02 f303 	mul.w	r3, r2, r3
 800487e:	617b      	str	r3, [r7, #20]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8004880:	697b      	ldr	r3, [r7, #20]
 8004882:	613b      	str	r3, [r7, #16]
      break;
 8004884:	e002      	b.n	800488c <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004886:	4b06      	ldr	r3, [pc, #24]	@ (80048a0 <HAL_RCC_GetSysClockFreq+0x98>)
 8004888:	613b      	str	r3, [r7, #16]
      break;
 800488a:	bf00      	nop
    }
  }
  return sysclockfreq;
 800488c:	693b      	ldr	r3, [r7, #16]
}
 800488e:	4618      	mov	r0, r3
 8004890:	371c      	adds	r7, #28
 8004892:	46bd      	mov	sp, r7
 8004894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004898:	4770      	bx	lr
 800489a:	bf00      	nop
 800489c:	40021000 	.word	0x40021000
 80048a0:	007a1200 	.word	0x007a1200
 80048a4:	080067c8 	.word	0x080067c8
 80048a8:	080067d8 	.word	0x080067d8
 80048ac:	003d0900 	.word	0x003d0900

080048b0 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80048b0:	b580      	push	{r7, lr}
 80048b2:	b092      	sub	sp, #72	@ 0x48
 80048b4:	af00      	add	r7, sp, #0
 80048b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80048b8:	2300      	movs	r3, #0
 80048ba:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t temp_reg = 0U;
 80048bc:	2300      	movs	r3, #0
 80048be:	63fb      	str	r3, [r7, #60]	@ 0x3c
  FlagStatus       pwrclkchanged = RESET;
 80048c0:	2300      	movs	r3, #0
 80048c2:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	f000 80d2 	beq.w	8004a78 <HAL_RCCEx_PeriphCLKConfig+0x1c8>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80048d4:	4b4d      	ldr	r3, [pc, #308]	@ (8004a0c <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 80048d6:	69db      	ldr	r3, [r3, #28]
 80048d8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d10e      	bne.n	80048fe <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80048e0:	4b4a      	ldr	r3, [pc, #296]	@ (8004a0c <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 80048e2:	69db      	ldr	r3, [r3, #28]
 80048e4:	4a49      	ldr	r2, [pc, #292]	@ (8004a0c <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 80048e6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80048ea:	61d3      	str	r3, [r2, #28]
 80048ec:	4b47      	ldr	r3, [pc, #284]	@ (8004a0c <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 80048ee:	69db      	ldr	r3, [r3, #28]
 80048f0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80048f4:	60bb      	str	r3, [r7, #8]
 80048f6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80048f8:	2301      	movs	r3, #1
 80048fa:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80048fe:	4b44      	ldr	r3, [pc, #272]	@ (8004a10 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004906:	2b00      	cmp	r3, #0
 8004908:	d118      	bne.n	800493c <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800490a:	4b41      	ldr	r3, [pc, #260]	@ (8004a10 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	4a40      	ldr	r2, [pc, #256]	@ (8004a10 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004910:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004914:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004916:	f7fc fcff 	bl	8001318 <HAL_GetTick>
 800491a:	6438      	str	r0, [r7, #64]	@ 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800491c:	e008      	b.n	8004930 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800491e:	f7fc fcfb 	bl	8001318 <HAL_GetTick>
 8004922:	4602      	mov	r2, r0
 8004924:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004926:	1ad3      	subs	r3, r2, r3
 8004928:	2b64      	cmp	r3, #100	@ 0x64
 800492a:	d901      	bls.n	8004930 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 800492c:	2303      	movs	r3, #3
 800492e:	e167      	b.n	8004c00 <HAL_RCCEx_PeriphCLKConfig+0x350>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004930:	4b37      	ldr	r3, [pc, #220]	@ (8004a10 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004938:	2b00      	cmp	r3, #0
 800493a:	d0f0      	beq.n	800491e <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800493c:	4b33      	ldr	r3, [pc, #204]	@ (8004a0c <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 800493e:	6a1b      	ldr	r3, [r3, #32]
 8004940:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004944:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004946:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004948:	2b00      	cmp	r3, #0
 800494a:	f000 8082 	beq.w	8004a52 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	685b      	ldr	r3, [r3, #4]
 8004952:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004956:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8004958:	429a      	cmp	r2, r3
 800495a:	d07a      	beq.n	8004a52 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800495c:	4b2b      	ldr	r3, [pc, #172]	@ (8004a0c <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 800495e:	6a1b      	ldr	r3, [r3, #32]
 8004960:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004964:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004966:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800496a:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800496c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800496e:	fa93 f3a3 	rbit	r3, r3
 8004972:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8004974:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004976:	fab3 f383 	clz	r3, r3
 800497a:	b2db      	uxtb	r3, r3
 800497c:	461a      	mov	r2, r3
 800497e:	4b25      	ldr	r3, [pc, #148]	@ (8004a14 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004980:	4413      	add	r3, r2
 8004982:	009b      	lsls	r3, r3, #2
 8004984:	461a      	mov	r2, r3
 8004986:	2301      	movs	r3, #1
 8004988:	6013      	str	r3, [r2, #0]
 800498a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800498e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004990:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004992:	fa93 f3a3 	rbit	r3, r3
 8004996:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8004998:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 800499a:	fab3 f383 	clz	r3, r3
 800499e:	b2db      	uxtb	r3, r3
 80049a0:	461a      	mov	r2, r3
 80049a2:	4b1c      	ldr	r3, [pc, #112]	@ (8004a14 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80049a4:	4413      	add	r3, r2
 80049a6:	009b      	lsls	r3, r3, #2
 80049a8:	461a      	mov	r2, r3
 80049aa:	2300      	movs	r3, #0
 80049ac:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80049ae:	4a17      	ldr	r2, [pc, #92]	@ (8004a0c <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 80049b0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80049b2:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80049b4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80049b6:	f003 0301 	and.w	r3, r3, #1
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d049      	beq.n	8004a52 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80049be:	f7fc fcab 	bl	8001318 <HAL_GetTick>
 80049c2:	6438      	str	r0, [r7, #64]	@ 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80049c4:	e00a      	b.n	80049dc <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80049c6:	f7fc fca7 	bl	8001318 <HAL_GetTick>
 80049ca:	4602      	mov	r2, r0
 80049cc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80049ce:	1ad3      	subs	r3, r2, r3
 80049d0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80049d4:	4293      	cmp	r3, r2
 80049d6:	d901      	bls.n	80049dc <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 80049d8:	2303      	movs	r3, #3
 80049da:	e111      	b.n	8004c00 <HAL_RCCEx_PeriphCLKConfig+0x350>
 80049dc:	2302      	movs	r3, #2
 80049de:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80049e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80049e2:	fa93 f3a3 	rbit	r3, r3
 80049e6:	627b      	str	r3, [r7, #36]	@ 0x24
 80049e8:	2302      	movs	r3, #2
 80049ea:	623b      	str	r3, [r7, #32]
 80049ec:	6a3b      	ldr	r3, [r7, #32]
 80049ee:	fa93 f3a3 	rbit	r3, r3
 80049f2:	61fb      	str	r3, [r7, #28]
  return result;
 80049f4:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80049f6:	fab3 f383 	clz	r3, r3
 80049fa:	b2db      	uxtb	r3, r3
 80049fc:	f023 035f 	bic.w	r3, r3, #95	@ 0x5f
 8004a00:	b2db      	uxtb	r3, r3
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d108      	bne.n	8004a18 <HAL_RCCEx_PeriphCLKConfig+0x168>
 8004a06:	4b01      	ldr	r3, [pc, #4]	@ (8004a0c <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8004a08:	6a1b      	ldr	r3, [r3, #32]
 8004a0a:	e00d      	b.n	8004a28 <HAL_RCCEx_PeriphCLKConfig+0x178>
 8004a0c:	40021000 	.word	0x40021000
 8004a10:	40007000 	.word	0x40007000
 8004a14:	10908100 	.word	0x10908100
 8004a18:	2302      	movs	r3, #2
 8004a1a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a1c:	69bb      	ldr	r3, [r7, #24]
 8004a1e:	fa93 f3a3 	rbit	r3, r3
 8004a22:	617b      	str	r3, [r7, #20]
 8004a24:	4b78      	ldr	r3, [pc, #480]	@ (8004c08 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004a26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a28:	2202      	movs	r2, #2
 8004a2a:	613a      	str	r2, [r7, #16]
 8004a2c:	693a      	ldr	r2, [r7, #16]
 8004a2e:	fa92 f2a2 	rbit	r2, r2
 8004a32:	60fa      	str	r2, [r7, #12]
  return result;
 8004a34:	68fa      	ldr	r2, [r7, #12]
 8004a36:	fab2 f282 	clz	r2, r2
 8004a3a:	b2d2      	uxtb	r2, r2
 8004a3c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004a40:	b2d2      	uxtb	r2, r2
 8004a42:	f002 021f 	and.w	r2, r2, #31
 8004a46:	2101      	movs	r1, #1
 8004a48:	fa01 f202 	lsl.w	r2, r1, r2
 8004a4c:	4013      	ands	r3, r2
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d0b9      	beq.n	80049c6 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8004a52:	4b6d      	ldr	r3, [pc, #436]	@ (8004c08 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004a54:	6a1b      	ldr	r3, [r3, #32]
 8004a56:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	685b      	ldr	r3, [r3, #4]
 8004a5e:	496a      	ldr	r1, [pc, #424]	@ (8004c08 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004a60:	4313      	orrs	r3, r2
 8004a62:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004a64:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8004a68:	2b01      	cmp	r3, #1
 8004a6a:	d105      	bne.n	8004a78 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004a6c:	4b66      	ldr	r3, [pc, #408]	@ (8004c08 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004a6e:	69db      	ldr	r3, [r3, #28]
 8004a70:	4a65      	ldr	r2, [pc, #404]	@ (8004c08 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004a72:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004a76:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	f003 0301 	and.w	r3, r3, #1
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d008      	beq.n	8004a96 <HAL_RCCEx_PeriphCLKConfig+0x1e6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004a84:	4b60      	ldr	r3, [pc, #384]	@ (8004c08 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004a86:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a88:	f023 0203 	bic.w	r2, r3, #3
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	689b      	ldr	r3, [r3, #8]
 8004a90:	495d      	ldr	r1, [pc, #372]	@ (8004c08 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004a92:	4313      	orrs	r3, r2
 8004a94:	630b      	str	r3, [r1, #48]	@ 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	f003 0302 	and.w	r3, r3, #2
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d008      	beq.n	8004ab4 <HAL_RCCEx_PeriphCLKConfig+0x204>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004aa2:	4b59      	ldr	r3, [pc, #356]	@ (8004c08 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004aa4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004aa6:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	68db      	ldr	r3, [r3, #12]
 8004aae:	4956      	ldr	r1, [pc, #344]	@ (8004c08 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004ab0:	4313      	orrs	r3, r2
 8004ab2:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	f003 0304 	and.w	r3, r3, #4
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d008      	beq.n	8004ad2 <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004ac0:	4b51      	ldr	r3, [pc, #324]	@ (8004c08 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004ac2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ac4:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	691b      	ldr	r3, [r3, #16]
 8004acc:	494e      	ldr	r1, [pc, #312]	@ (8004c08 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004ace:	4313      	orrs	r3, r2
 8004ad0:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	f003 0320 	and.w	r3, r3, #32
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d008      	beq.n	8004af0 <HAL_RCCEx_PeriphCLKConfig+0x240>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004ade:	4b4a      	ldr	r3, [pc, #296]	@ (8004c08 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004ae0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ae2:	f023 0210 	bic.w	r2, r3, #16
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	69db      	ldr	r3, [r3, #28]
 8004aea:	4947      	ldr	r1, [pc, #284]	@ (8004c08 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004aec:	4313      	orrs	r3, r2
 8004aee:	630b      	str	r3, [r1, #48]	@ 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d008      	beq.n	8004b0e <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8004afc:	4b42      	ldr	r3, [pc, #264]	@ (8004c08 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004afe:	685b      	ldr	r3, [r3, #4]
 8004b00:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b08:	493f      	ldr	r1, [pc, #252]	@ (8004c08 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004b0a:	4313      	orrs	r3, r2
 8004b0c:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d008      	beq.n	8004b2c <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004b1a:	4b3b      	ldr	r3, [pc, #236]	@ (8004c08 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004b1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b1e:	f023 0220 	bic.w	r2, r3, #32
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	6a1b      	ldr	r3, [r3, #32]
 8004b26:	4938      	ldr	r1, [pc, #224]	@ (8004c08 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004b28:	4313      	orrs	r3, r2
 8004b2a:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	f003 0308 	and.w	r3, r3, #8
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d008      	beq.n	8004b4a <HAL_RCCEx_PeriphCLKConfig+0x29a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004b38:	4b33      	ldr	r3, [pc, #204]	@ (8004c08 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004b3a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b3c:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	695b      	ldr	r3, [r3, #20]
 8004b44:	4930      	ldr	r1, [pc, #192]	@ (8004c08 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004b46:	4313      	orrs	r3, r2
 8004b48:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	f003 0310 	and.w	r3, r3, #16
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d008      	beq.n	8004b68 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004b56:	4b2c      	ldr	r3, [pc, #176]	@ (8004c08 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004b58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b5a:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	699b      	ldr	r3, [r3, #24]
 8004b62:	4929      	ldr	r1, [pc, #164]	@ (8004c08 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004b64:	4313      	orrs	r3, r2
 8004b66:	630b      	str	r3, [r1, #48]	@ 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d008      	beq.n	8004b86 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004b74:	4b24      	ldr	r3, [pc, #144]	@ (8004c08 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004b76:	685b      	ldr	r3, [r3, #4]
 8004b78:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b80:	4921      	ldr	r1, [pc, #132]	@ (8004c08 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004b82:	4313      	orrs	r3, r2
 8004b84:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d008      	beq.n	8004ba4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8004b92:	4b1d      	ldr	r3, [pc, #116]	@ (8004c08 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004b94:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b96:	f423 72f8 	bic.w	r2, r3, #496	@ 0x1f0
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b9e:	491a      	ldr	r1, [pc, #104]	@ (8004c08 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004ba0:	4313      	orrs	r3, r2
 8004ba2:	62cb      	str	r3, [r1, #44]	@ 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d008      	beq.n	8004bc2 <HAL_RCCEx_PeriphCLKConfig+0x312>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8004bb0:	4b15      	ldr	r3, [pc, #84]	@ (8004c08 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004bb2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004bb4:	f423 5278 	bic.w	r2, r3, #15872	@ 0x3e00
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004bbc:	4912      	ldr	r1, [pc, #72]	@ (8004c08 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004bbe:	4313      	orrs	r3, r2
 8004bc0:	62cb      	str	r3, [r1, #44]	@ 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d008      	beq.n	8004be0 <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8004bce:	4b0e      	ldr	r3, [pc, #56]	@ (8004c08 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004bd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004bd2:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004bda:	490b      	ldr	r1, [pc, #44]	@ (8004c08 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004bdc:	4313      	orrs	r3, r2
 8004bde:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d008      	beq.n	8004bfe <HAL_RCCEx_PeriphCLKConfig+0x34e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8004bec:	4b06      	ldr	r3, [pc, #24]	@ (8004c08 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004bee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004bf0:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004bf8:	4903      	ldr	r1, [pc, #12]	@ (8004c08 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004bfa:	4313      	orrs	r3, r2
 8004bfc:	630b      	str	r3, [r1, #48]	@ 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8004bfe:	2300      	movs	r3, #0
}
 8004c00:	4618      	mov	r0, r3
 8004c02:	3748      	adds	r7, #72	@ 0x48
 8004c04:	46bd      	mov	sp, r7
 8004c06:	bd80      	pop	{r7, pc}
 8004c08:	40021000 	.word	0x40021000

08004c0c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004c0c:	b580      	push	{r7, lr}
 8004c0e:	b082      	sub	sp, #8
 8004c10:	af00      	add	r7, sp, #0
 8004c12:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d101      	bne.n	8004c1e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004c1a:	2301      	movs	r3, #1
 8004c1c:	e049      	b.n	8004cb2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004c24:	b2db      	uxtb	r3, r3
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d106      	bne.n	8004c38 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	2200      	movs	r2, #0
 8004c2e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004c32:	6878      	ldr	r0, [r7, #4]
 8004c34:	f7fc f9ac 	bl	8000f90 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	2202      	movs	r2, #2
 8004c3c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681a      	ldr	r2, [r3, #0]
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	3304      	adds	r3, #4
 8004c48:	4619      	mov	r1, r3
 8004c4a:	4610      	mov	r0, r2
 8004c4c:	f000 ff18 	bl	8005a80 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	2201      	movs	r2, #1
 8004c54:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	2201      	movs	r2, #1
 8004c5c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	2201      	movs	r2, #1
 8004c64:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	2201      	movs	r2, #1
 8004c6c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	2201      	movs	r2, #1
 8004c74:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	2201      	movs	r2, #1
 8004c7c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	2201      	movs	r2, #1
 8004c84:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	2201      	movs	r2, #1
 8004c8c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	2201      	movs	r2, #1
 8004c94:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	2201      	movs	r2, #1
 8004c9c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	2201      	movs	r2, #1
 8004ca4:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	2201      	movs	r2, #1
 8004cac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004cb0:	2300      	movs	r3, #0
}
 8004cb2:	4618      	mov	r0, r3
 8004cb4:	3708      	adds	r7, #8
 8004cb6:	46bd      	mov	sp, r7
 8004cb8:	bd80      	pop	{r7, pc}

08004cba <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004cba:	b580      	push	{r7, lr}
 8004cbc:	b082      	sub	sp, #8
 8004cbe:	af00      	add	r7, sp, #0
 8004cc0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d101      	bne.n	8004ccc <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004cc8:	2301      	movs	r3, #1
 8004cca:	e049      	b.n	8004d60 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004cd2:	b2db      	uxtb	r3, r3
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d106      	bne.n	8004ce6 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	2200      	movs	r2, #0
 8004cdc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004ce0:	6878      	ldr	r0, [r7, #4]
 8004ce2:	f7fc f9a1 	bl	8001028 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	2202      	movs	r2, #2
 8004cea:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	681a      	ldr	r2, [r3, #0]
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	3304      	adds	r3, #4
 8004cf6:	4619      	mov	r1, r3
 8004cf8:	4610      	mov	r0, r2
 8004cfa:	f000 fec1 	bl	8005a80 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	2201      	movs	r2, #1
 8004d02:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	2201      	movs	r2, #1
 8004d0a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	2201      	movs	r2, #1
 8004d12:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	2201      	movs	r2, #1
 8004d1a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	2201      	movs	r2, #1
 8004d22:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	2201      	movs	r2, #1
 8004d2a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	2201      	movs	r2, #1
 8004d32:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	2201      	movs	r2, #1
 8004d3a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	2201      	movs	r2, #1
 8004d42:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	2201      	movs	r2, #1
 8004d4a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	2201      	movs	r2, #1
 8004d52:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	2201      	movs	r2, #1
 8004d5a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004d5e:	2300      	movs	r3, #0
}
 8004d60:	4618      	mov	r0, r3
 8004d62:	3708      	adds	r7, #8
 8004d64:	46bd      	mov	sp, r7
 8004d66:	bd80      	pop	{r7, pc}

08004d68 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004d68:	b580      	push	{r7, lr}
 8004d6a:	b084      	sub	sp, #16
 8004d6c:	af00      	add	r7, sp, #0
 8004d6e:	6078      	str	r0, [r7, #4]
 8004d70:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004d72:	683b      	ldr	r3, [r7, #0]
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d109      	bne.n	8004d8c <HAL_TIM_PWM_Start+0x24>
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004d7e:	b2db      	uxtb	r3, r3
 8004d80:	2b01      	cmp	r3, #1
 8004d82:	bf14      	ite	ne
 8004d84:	2301      	movne	r3, #1
 8004d86:	2300      	moveq	r3, #0
 8004d88:	b2db      	uxtb	r3, r3
 8004d8a:	e03c      	b.n	8004e06 <HAL_TIM_PWM_Start+0x9e>
 8004d8c:	683b      	ldr	r3, [r7, #0]
 8004d8e:	2b04      	cmp	r3, #4
 8004d90:	d109      	bne.n	8004da6 <HAL_TIM_PWM_Start+0x3e>
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8004d98:	b2db      	uxtb	r3, r3
 8004d9a:	2b01      	cmp	r3, #1
 8004d9c:	bf14      	ite	ne
 8004d9e:	2301      	movne	r3, #1
 8004da0:	2300      	moveq	r3, #0
 8004da2:	b2db      	uxtb	r3, r3
 8004da4:	e02f      	b.n	8004e06 <HAL_TIM_PWM_Start+0x9e>
 8004da6:	683b      	ldr	r3, [r7, #0]
 8004da8:	2b08      	cmp	r3, #8
 8004daa:	d109      	bne.n	8004dc0 <HAL_TIM_PWM_Start+0x58>
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004db2:	b2db      	uxtb	r3, r3
 8004db4:	2b01      	cmp	r3, #1
 8004db6:	bf14      	ite	ne
 8004db8:	2301      	movne	r3, #1
 8004dba:	2300      	moveq	r3, #0
 8004dbc:	b2db      	uxtb	r3, r3
 8004dbe:	e022      	b.n	8004e06 <HAL_TIM_PWM_Start+0x9e>
 8004dc0:	683b      	ldr	r3, [r7, #0]
 8004dc2:	2b0c      	cmp	r3, #12
 8004dc4:	d109      	bne.n	8004dda <HAL_TIM_PWM_Start+0x72>
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004dcc:	b2db      	uxtb	r3, r3
 8004dce:	2b01      	cmp	r3, #1
 8004dd0:	bf14      	ite	ne
 8004dd2:	2301      	movne	r3, #1
 8004dd4:	2300      	moveq	r3, #0
 8004dd6:	b2db      	uxtb	r3, r3
 8004dd8:	e015      	b.n	8004e06 <HAL_TIM_PWM_Start+0x9e>
 8004dda:	683b      	ldr	r3, [r7, #0]
 8004ddc:	2b10      	cmp	r3, #16
 8004dde:	d109      	bne.n	8004df4 <HAL_TIM_PWM_Start+0x8c>
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004de6:	b2db      	uxtb	r3, r3
 8004de8:	2b01      	cmp	r3, #1
 8004dea:	bf14      	ite	ne
 8004dec:	2301      	movne	r3, #1
 8004dee:	2300      	moveq	r3, #0
 8004df0:	b2db      	uxtb	r3, r3
 8004df2:	e008      	b.n	8004e06 <HAL_TIM_PWM_Start+0x9e>
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8004dfa:	b2db      	uxtb	r3, r3
 8004dfc:	2b01      	cmp	r3, #1
 8004dfe:	bf14      	ite	ne
 8004e00:	2301      	movne	r3, #1
 8004e02:	2300      	moveq	r3, #0
 8004e04:	b2db      	uxtb	r3, r3
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d001      	beq.n	8004e0e <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8004e0a:	2301      	movs	r3, #1
 8004e0c:	e097      	b.n	8004f3e <HAL_TIM_PWM_Start+0x1d6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004e0e:	683b      	ldr	r3, [r7, #0]
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d104      	bne.n	8004e1e <HAL_TIM_PWM_Start+0xb6>
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	2202      	movs	r2, #2
 8004e18:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004e1c:	e023      	b.n	8004e66 <HAL_TIM_PWM_Start+0xfe>
 8004e1e:	683b      	ldr	r3, [r7, #0]
 8004e20:	2b04      	cmp	r3, #4
 8004e22:	d104      	bne.n	8004e2e <HAL_TIM_PWM_Start+0xc6>
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	2202      	movs	r2, #2
 8004e28:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004e2c:	e01b      	b.n	8004e66 <HAL_TIM_PWM_Start+0xfe>
 8004e2e:	683b      	ldr	r3, [r7, #0]
 8004e30:	2b08      	cmp	r3, #8
 8004e32:	d104      	bne.n	8004e3e <HAL_TIM_PWM_Start+0xd6>
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	2202      	movs	r2, #2
 8004e38:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004e3c:	e013      	b.n	8004e66 <HAL_TIM_PWM_Start+0xfe>
 8004e3e:	683b      	ldr	r3, [r7, #0]
 8004e40:	2b0c      	cmp	r3, #12
 8004e42:	d104      	bne.n	8004e4e <HAL_TIM_PWM_Start+0xe6>
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	2202      	movs	r2, #2
 8004e48:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004e4c:	e00b      	b.n	8004e66 <HAL_TIM_PWM_Start+0xfe>
 8004e4e:	683b      	ldr	r3, [r7, #0]
 8004e50:	2b10      	cmp	r3, #16
 8004e52:	d104      	bne.n	8004e5e <HAL_TIM_PWM_Start+0xf6>
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	2202      	movs	r2, #2
 8004e58:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004e5c:	e003      	b.n	8004e66 <HAL_TIM_PWM_Start+0xfe>
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	2202      	movs	r2, #2
 8004e62:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	2201      	movs	r2, #1
 8004e6c:	6839      	ldr	r1, [r7, #0]
 8004e6e:	4618      	mov	r0, r3
 8004e70:	f001 fb30 	bl	80064d4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	4a33      	ldr	r2, [pc, #204]	@ (8004f48 <HAL_TIM_PWM_Start+0x1e0>)
 8004e7a:	4293      	cmp	r3, r2
 8004e7c:	d013      	beq.n	8004ea6 <HAL_TIM_PWM_Start+0x13e>
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	4a32      	ldr	r2, [pc, #200]	@ (8004f4c <HAL_TIM_PWM_Start+0x1e4>)
 8004e84:	4293      	cmp	r3, r2
 8004e86:	d00e      	beq.n	8004ea6 <HAL_TIM_PWM_Start+0x13e>
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	4a30      	ldr	r2, [pc, #192]	@ (8004f50 <HAL_TIM_PWM_Start+0x1e8>)
 8004e8e:	4293      	cmp	r3, r2
 8004e90:	d009      	beq.n	8004ea6 <HAL_TIM_PWM_Start+0x13e>
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	4a2f      	ldr	r2, [pc, #188]	@ (8004f54 <HAL_TIM_PWM_Start+0x1ec>)
 8004e98:	4293      	cmp	r3, r2
 8004e9a:	d004      	beq.n	8004ea6 <HAL_TIM_PWM_Start+0x13e>
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	4a2d      	ldr	r2, [pc, #180]	@ (8004f58 <HAL_TIM_PWM_Start+0x1f0>)
 8004ea2:	4293      	cmp	r3, r2
 8004ea4:	d101      	bne.n	8004eaa <HAL_TIM_PWM_Start+0x142>
 8004ea6:	2301      	movs	r3, #1
 8004ea8:	e000      	b.n	8004eac <HAL_TIM_PWM_Start+0x144>
 8004eaa:	2300      	movs	r3, #0
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d007      	beq.n	8004ec0 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004ebe:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	4a20      	ldr	r2, [pc, #128]	@ (8004f48 <HAL_TIM_PWM_Start+0x1e0>)
 8004ec6:	4293      	cmp	r3, r2
 8004ec8:	d018      	beq.n	8004efc <HAL_TIM_PWM_Start+0x194>
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004ed2:	d013      	beq.n	8004efc <HAL_TIM_PWM_Start+0x194>
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	4a20      	ldr	r2, [pc, #128]	@ (8004f5c <HAL_TIM_PWM_Start+0x1f4>)
 8004eda:	4293      	cmp	r3, r2
 8004edc:	d00e      	beq.n	8004efc <HAL_TIM_PWM_Start+0x194>
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	4a1f      	ldr	r2, [pc, #124]	@ (8004f60 <HAL_TIM_PWM_Start+0x1f8>)
 8004ee4:	4293      	cmp	r3, r2
 8004ee6:	d009      	beq.n	8004efc <HAL_TIM_PWM_Start+0x194>
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	4a17      	ldr	r2, [pc, #92]	@ (8004f4c <HAL_TIM_PWM_Start+0x1e4>)
 8004eee:	4293      	cmp	r3, r2
 8004ef0:	d004      	beq.n	8004efc <HAL_TIM_PWM_Start+0x194>
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	4a16      	ldr	r2, [pc, #88]	@ (8004f50 <HAL_TIM_PWM_Start+0x1e8>)
 8004ef8:	4293      	cmp	r3, r2
 8004efa:	d115      	bne.n	8004f28 <HAL_TIM_PWM_Start+0x1c0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	689a      	ldr	r2, [r3, #8]
 8004f02:	4b18      	ldr	r3, [pc, #96]	@ (8004f64 <HAL_TIM_PWM_Start+0x1fc>)
 8004f04:	4013      	ands	r3, r2
 8004f06:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	2b06      	cmp	r3, #6
 8004f0c:	d015      	beq.n	8004f3a <HAL_TIM_PWM_Start+0x1d2>
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004f14:	d011      	beq.n	8004f3a <HAL_TIM_PWM_Start+0x1d2>
    {
      __HAL_TIM_ENABLE(htim);
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	681a      	ldr	r2, [r3, #0]
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	f042 0201 	orr.w	r2, r2, #1
 8004f24:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004f26:	e008      	b.n	8004f3a <HAL_TIM_PWM_Start+0x1d2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	681a      	ldr	r2, [r3, #0]
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	f042 0201 	orr.w	r2, r2, #1
 8004f36:	601a      	str	r2, [r3, #0]
 8004f38:	e000      	b.n	8004f3c <HAL_TIM_PWM_Start+0x1d4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004f3a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004f3c:	2300      	movs	r3, #0
}
 8004f3e:	4618      	mov	r0, r3
 8004f40:	3710      	adds	r7, #16
 8004f42:	46bd      	mov	sp, r7
 8004f44:	bd80      	pop	{r7, pc}
 8004f46:	bf00      	nop
 8004f48:	40012c00 	.word	0x40012c00
 8004f4c:	40013400 	.word	0x40013400
 8004f50:	40014000 	.word	0x40014000
 8004f54:	40014400 	.word	0x40014400
 8004f58:	40014800 	.word	0x40014800
 8004f5c:	40000400 	.word	0x40000400
 8004f60:	40000800 	.word	0x40000800
 8004f64:	00010007 	.word	0x00010007

08004f68 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8004f68:	b580      	push	{r7, lr}
 8004f6a:	b082      	sub	sp, #8
 8004f6c:	af00      	add	r7, sp, #0
 8004f6e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d101      	bne.n	8004f7a <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8004f76:	2301      	movs	r3, #1
 8004f78:	e049      	b.n	800500e <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004f80:	b2db      	uxtb	r3, r3
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d106      	bne.n	8004f94 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	2200      	movs	r2, #0
 8004f8a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8004f8e:	6878      	ldr	r0, [r7, #4]
 8004f90:	f000 f841 	bl	8005016 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	2202      	movs	r2, #2
 8004f98:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681a      	ldr	r2, [r3, #0]
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	3304      	adds	r3, #4
 8004fa4:	4619      	mov	r1, r3
 8004fa6:	4610      	mov	r0, r2
 8004fa8:	f000 fd6a 	bl	8005a80 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	2201      	movs	r2, #1
 8004fb0:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	2201      	movs	r2, #1
 8004fb8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	2201      	movs	r2, #1
 8004fc0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	2201      	movs	r2, #1
 8004fc8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	2201      	movs	r2, #1
 8004fd0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	2201      	movs	r2, #1
 8004fd8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	2201      	movs	r2, #1
 8004fe0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	2201      	movs	r2, #1
 8004fe8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	2201      	movs	r2, #1
 8004ff0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	2201      	movs	r2, #1
 8004ff8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	2201      	movs	r2, #1
 8005000:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	2201      	movs	r2, #1
 8005008:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800500c:	2300      	movs	r3, #0
}
 800500e:	4618      	mov	r0, r3
 8005010:	3708      	adds	r7, #8
 8005012:	46bd      	mov	sp, r7
 8005014:	bd80      	pop	{r7, pc}

08005016 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8005016:	b480      	push	{r7}
 8005018:	b083      	sub	sp, #12
 800501a:	af00      	add	r7, sp, #0
 800501c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 800501e:	bf00      	nop
 8005020:	370c      	adds	r7, #12
 8005022:	46bd      	mov	sp, r7
 8005024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005028:	4770      	bx	lr
	...

0800502c <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800502c:	b580      	push	{r7, lr}
 800502e:	b084      	sub	sp, #16
 8005030:	af00      	add	r7, sp, #0
 8005032:	6078      	str	r0, [r7, #4]
 8005034:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005036:	2300      	movs	r3, #0
 8005038:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 800503a:	683b      	ldr	r3, [r7, #0]
 800503c:	2b00      	cmp	r3, #0
 800503e:	d104      	bne.n	800504a <HAL_TIM_IC_Start_IT+0x1e>
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005046:	b2db      	uxtb	r3, r3
 8005048:	e023      	b.n	8005092 <HAL_TIM_IC_Start_IT+0x66>
 800504a:	683b      	ldr	r3, [r7, #0]
 800504c:	2b04      	cmp	r3, #4
 800504e:	d104      	bne.n	800505a <HAL_TIM_IC_Start_IT+0x2e>
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8005056:	b2db      	uxtb	r3, r3
 8005058:	e01b      	b.n	8005092 <HAL_TIM_IC_Start_IT+0x66>
 800505a:	683b      	ldr	r3, [r7, #0]
 800505c:	2b08      	cmp	r3, #8
 800505e:	d104      	bne.n	800506a <HAL_TIM_IC_Start_IT+0x3e>
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005066:	b2db      	uxtb	r3, r3
 8005068:	e013      	b.n	8005092 <HAL_TIM_IC_Start_IT+0x66>
 800506a:	683b      	ldr	r3, [r7, #0]
 800506c:	2b0c      	cmp	r3, #12
 800506e:	d104      	bne.n	800507a <HAL_TIM_IC_Start_IT+0x4e>
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005076:	b2db      	uxtb	r3, r3
 8005078:	e00b      	b.n	8005092 <HAL_TIM_IC_Start_IT+0x66>
 800507a:	683b      	ldr	r3, [r7, #0]
 800507c:	2b10      	cmp	r3, #16
 800507e:	d104      	bne.n	800508a <HAL_TIM_IC_Start_IT+0x5e>
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005086:	b2db      	uxtb	r3, r3
 8005088:	e003      	b.n	8005092 <HAL_TIM_IC_Start_IT+0x66>
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8005090:	b2db      	uxtb	r3, r3
 8005092:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8005094:	683b      	ldr	r3, [r7, #0]
 8005096:	2b00      	cmp	r3, #0
 8005098:	d104      	bne.n	80050a4 <HAL_TIM_IC_Start_IT+0x78>
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80050a0:	b2db      	uxtb	r3, r3
 80050a2:	e013      	b.n	80050cc <HAL_TIM_IC_Start_IT+0xa0>
 80050a4:	683b      	ldr	r3, [r7, #0]
 80050a6:	2b04      	cmp	r3, #4
 80050a8:	d104      	bne.n	80050b4 <HAL_TIM_IC_Start_IT+0x88>
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80050b0:	b2db      	uxtb	r3, r3
 80050b2:	e00b      	b.n	80050cc <HAL_TIM_IC_Start_IT+0xa0>
 80050b4:	683b      	ldr	r3, [r7, #0]
 80050b6:	2b08      	cmp	r3, #8
 80050b8:	d104      	bne.n	80050c4 <HAL_TIM_IC_Start_IT+0x98>
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 80050c0:	b2db      	uxtb	r3, r3
 80050c2:	e003      	b.n	80050cc <HAL_TIM_IC_Start_IT+0xa0>
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	f893 3047 	ldrb.w	r3, [r3, #71]	@ 0x47
 80050ca:	b2db      	uxtb	r3, r3
 80050cc:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 80050ce:	7bbb      	ldrb	r3, [r7, #14]
 80050d0:	2b01      	cmp	r3, #1
 80050d2:	d102      	bne.n	80050da <HAL_TIM_IC_Start_IT+0xae>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 80050d4:	7b7b      	ldrb	r3, [r7, #13]
 80050d6:	2b01      	cmp	r3, #1
 80050d8:	d001      	beq.n	80050de <HAL_TIM_IC_Start_IT+0xb2>
  {
    return HAL_ERROR;
 80050da:	2301      	movs	r3, #1
 80050dc:	e0d8      	b.n	8005290 <HAL_TIM_IC_Start_IT+0x264>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80050de:	683b      	ldr	r3, [r7, #0]
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d104      	bne.n	80050ee <HAL_TIM_IC_Start_IT+0xc2>
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	2202      	movs	r2, #2
 80050e8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80050ec:	e023      	b.n	8005136 <HAL_TIM_IC_Start_IT+0x10a>
 80050ee:	683b      	ldr	r3, [r7, #0]
 80050f0:	2b04      	cmp	r3, #4
 80050f2:	d104      	bne.n	80050fe <HAL_TIM_IC_Start_IT+0xd2>
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	2202      	movs	r2, #2
 80050f8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80050fc:	e01b      	b.n	8005136 <HAL_TIM_IC_Start_IT+0x10a>
 80050fe:	683b      	ldr	r3, [r7, #0]
 8005100:	2b08      	cmp	r3, #8
 8005102:	d104      	bne.n	800510e <HAL_TIM_IC_Start_IT+0xe2>
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	2202      	movs	r2, #2
 8005108:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800510c:	e013      	b.n	8005136 <HAL_TIM_IC_Start_IT+0x10a>
 800510e:	683b      	ldr	r3, [r7, #0]
 8005110:	2b0c      	cmp	r3, #12
 8005112:	d104      	bne.n	800511e <HAL_TIM_IC_Start_IT+0xf2>
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	2202      	movs	r2, #2
 8005118:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800511c:	e00b      	b.n	8005136 <HAL_TIM_IC_Start_IT+0x10a>
 800511e:	683b      	ldr	r3, [r7, #0]
 8005120:	2b10      	cmp	r3, #16
 8005122:	d104      	bne.n	800512e <HAL_TIM_IC_Start_IT+0x102>
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	2202      	movs	r2, #2
 8005128:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800512c:	e003      	b.n	8005136 <HAL_TIM_IC_Start_IT+0x10a>
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	2202      	movs	r2, #2
 8005132:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005136:	683b      	ldr	r3, [r7, #0]
 8005138:	2b00      	cmp	r3, #0
 800513a:	d104      	bne.n	8005146 <HAL_TIM_IC_Start_IT+0x11a>
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	2202      	movs	r2, #2
 8005140:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005144:	e013      	b.n	800516e <HAL_TIM_IC_Start_IT+0x142>
 8005146:	683b      	ldr	r3, [r7, #0]
 8005148:	2b04      	cmp	r3, #4
 800514a:	d104      	bne.n	8005156 <HAL_TIM_IC_Start_IT+0x12a>
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	2202      	movs	r2, #2
 8005150:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005154:	e00b      	b.n	800516e <HAL_TIM_IC_Start_IT+0x142>
 8005156:	683b      	ldr	r3, [r7, #0]
 8005158:	2b08      	cmp	r3, #8
 800515a:	d104      	bne.n	8005166 <HAL_TIM_IC_Start_IT+0x13a>
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	2202      	movs	r2, #2
 8005160:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005164:	e003      	b.n	800516e <HAL_TIM_IC_Start_IT+0x142>
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	2202      	movs	r2, #2
 800516a:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  switch (Channel)
 800516e:	683b      	ldr	r3, [r7, #0]
 8005170:	2b0c      	cmp	r3, #12
 8005172:	d841      	bhi.n	80051f8 <HAL_TIM_IC_Start_IT+0x1cc>
 8005174:	a201      	add	r2, pc, #4	@ (adr r2, 800517c <HAL_TIM_IC_Start_IT+0x150>)
 8005176:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800517a:	bf00      	nop
 800517c:	080051b1 	.word	0x080051b1
 8005180:	080051f9 	.word	0x080051f9
 8005184:	080051f9 	.word	0x080051f9
 8005188:	080051f9 	.word	0x080051f9
 800518c:	080051c3 	.word	0x080051c3
 8005190:	080051f9 	.word	0x080051f9
 8005194:	080051f9 	.word	0x080051f9
 8005198:	080051f9 	.word	0x080051f9
 800519c:	080051d5 	.word	0x080051d5
 80051a0:	080051f9 	.word	0x080051f9
 80051a4:	080051f9 	.word	0x080051f9
 80051a8:	080051f9 	.word	0x080051f9
 80051ac:	080051e7 	.word	0x080051e7
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	68da      	ldr	r2, [r3, #12]
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	f042 0202 	orr.w	r2, r2, #2
 80051be:	60da      	str	r2, [r3, #12]
      break;
 80051c0:	e01d      	b.n	80051fe <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	68da      	ldr	r2, [r3, #12]
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	f042 0204 	orr.w	r2, r2, #4
 80051d0:	60da      	str	r2, [r3, #12]
      break;
 80051d2:	e014      	b.n	80051fe <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	68da      	ldr	r2, [r3, #12]
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	f042 0208 	orr.w	r2, r2, #8
 80051e2:	60da      	str	r2, [r3, #12]
      break;
 80051e4:	e00b      	b.n	80051fe <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	68da      	ldr	r2, [r3, #12]
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	f042 0210 	orr.w	r2, r2, #16
 80051f4:	60da      	str	r2, [r3, #12]
      break;
 80051f6:	e002      	b.n	80051fe <HAL_TIM_IC_Start_IT+0x1d2>
    }

    default:
      status = HAL_ERROR;
 80051f8:	2301      	movs	r3, #1
 80051fa:	73fb      	strb	r3, [r7, #15]
      break;
 80051fc:	bf00      	nop
  }

  if (status == HAL_OK)
 80051fe:	7bfb      	ldrb	r3, [r7, #15]
 8005200:	2b00      	cmp	r3, #0
 8005202:	d144      	bne.n	800528e <HAL_TIM_IC_Start_IT+0x262>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	2201      	movs	r2, #1
 800520a:	6839      	ldr	r1, [r7, #0]
 800520c:	4618      	mov	r0, r3
 800520e:	f001 f961 	bl	80064d4 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	4a20      	ldr	r2, [pc, #128]	@ (8005298 <HAL_TIM_IC_Start_IT+0x26c>)
 8005218:	4293      	cmp	r3, r2
 800521a:	d018      	beq.n	800524e <HAL_TIM_IC_Start_IT+0x222>
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005224:	d013      	beq.n	800524e <HAL_TIM_IC_Start_IT+0x222>
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	4a1c      	ldr	r2, [pc, #112]	@ (800529c <HAL_TIM_IC_Start_IT+0x270>)
 800522c:	4293      	cmp	r3, r2
 800522e:	d00e      	beq.n	800524e <HAL_TIM_IC_Start_IT+0x222>
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	4a1a      	ldr	r2, [pc, #104]	@ (80052a0 <HAL_TIM_IC_Start_IT+0x274>)
 8005236:	4293      	cmp	r3, r2
 8005238:	d009      	beq.n	800524e <HAL_TIM_IC_Start_IT+0x222>
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	4a19      	ldr	r2, [pc, #100]	@ (80052a4 <HAL_TIM_IC_Start_IT+0x278>)
 8005240:	4293      	cmp	r3, r2
 8005242:	d004      	beq.n	800524e <HAL_TIM_IC_Start_IT+0x222>
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	4a17      	ldr	r2, [pc, #92]	@ (80052a8 <HAL_TIM_IC_Start_IT+0x27c>)
 800524a:	4293      	cmp	r3, r2
 800524c:	d115      	bne.n	800527a <HAL_TIM_IC_Start_IT+0x24e>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	689a      	ldr	r2, [r3, #8]
 8005254:	4b15      	ldr	r3, [pc, #84]	@ (80052ac <HAL_TIM_IC_Start_IT+0x280>)
 8005256:	4013      	ands	r3, r2
 8005258:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800525a:	68bb      	ldr	r3, [r7, #8]
 800525c:	2b06      	cmp	r3, #6
 800525e:	d015      	beq.n	800528c <HAL_TIM_IC_Start_IT+0x260>
 8005260:	68bb      	ldr	r3, [r7, #8]
 8005262:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005266:	d011      	beq.n	800528c <HAL_TIM_IC_Start_IT+0x260>
      {
        __HAL_TIM_ENABLE(htim);
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	681a      	ldr	r2, [r3, #0]
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	f042 0201 	orr.w	r2, r2, #1
 8005276:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005278:	e008      	b.n	800528c <HAL_TIM_IC_Start_IT+0x260>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	681a      	ldr	r2, [r3, #0]
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	f042 0201 	orr.w	r2, r2, #1
 8005288:	601a      	str	r2, [r3, #0]
 800528a:	e000      	b.n	800528e <HAL_TIM_IC_Start_IT+0x262>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800528c:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 800528e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005290:	4618      	mov	r0, r3
 8005292:	3710      	adds	r7, #16
 8005294:	46bd      	mov	sp, r7
 8005296:	bd80      	pop	{r7, pc}
 8005298:	40012c00 	.word	0x40012c00
 800529c:	40000400 	.word	0x40000400
 80052a0:	40000800 	.word	0x40000800
 80052a4:	40013400 	.word	0x40013400
 80052a8:	40014000 	.word	0x40014000
 80052ac:	00010007 	.word	0x00010007

080052b0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80052b0:	b580      	push	{r7, lr}
 80052b2:	b084      	sub	sp, #16
 80052b4:	af00      	add	r7, sp, #0
 80052b6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	68db      	ldr	r3, [r3, #12]
 80052be:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	691b      	ldr	r3, [r3, #16]
 80052c6:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80052c8:	68bb      	ldr	r3, [r7, #8]
 80052ca:	f003 0302 	and.w	r3, r3, #2
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d020      	beq.n	8005314 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	f003 0302 	and.w	r3, r3, #2
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d01b      	beq.n	8005314 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	f06f 0202 	mvn.w	r2, #2
 80052e4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	2201      	movs	r2, #1
 80052ea:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	699b      	ldr	r3, [r3, #24]
 80052f2:	f003 0303 	and.w	r3, r3, #3
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d003      	beq.n	8005302 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80052fa:	6878      	ldr	r0, [r7, #4]
 80052fc:	f7fa ffc6 	bl	800028c <HAL_TIM_IC_CaptureCallback>
 8005300:	e005      	b.n	800530e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005302:	6878      	ldr	r0, [r7, #4]
 8005304:	f000 fb9e 	bl	8005a44 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005308:	6878      	ldr	r0, [r7, #4]
 800530a:	f000 fba5 	bl	8005a58 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	2200      	movs	r2, #0
 8005312:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005314:	68bb      	ldr	r3, [r7, #8]
 8005316:	f003 0304 	and.w	r3, r3, #4
 800531a:	2b00      	cmp	r3, #0
 800531c:	d020      	beq.n	8005360 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	f003 0304 	and.w	r3, r3, #4
 8005324:	2b00      	cmp	r3, #0
 8005326:	d01b      	beq.n	8005360 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	f06f 0204 	mvn.w	r2, #4
 8005330:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	2202      	movs	r2, #2
 8005336:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	699b      	ldr	r3, [r3, #24]
 800533e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005342:	2b00      	cmp	r3, #0
 8005344:	d003      	beq.n	800534e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005346:	6878      	ldr	r0, [r7, #4]
 8005348:	f7fa ffa0 	bl	800028c <HAL_TIM_IC_CaptureCallback>
 800534c:	e005      	b.n	800535a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800534e:	6878      	ldr	r0, [r7, #4]
 8005350:	f000 fb78 	bl	8005a44 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005354:	6878      	ldr	r0, [r7, #4]
 8005356:	f000 fb7f 	bl	8005a58 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	2200      	movs	r2, #0
 800535e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005360:	68bb      	ldr	r3, [r7, #8]
 8005362:	f003 0308 	and.w	r3, r3, #8
 8005366:	2b00      	cmp	r3, #0
 8005368:	d020      	beq.n	80053ac <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	f003 0308 	and.w	r3, r3, #8
 8005370:	2b00      	cmp	r3, #0
 8005372:	d01b      	beq.n	80053ac <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	f06f 0208 	mvn.w	r2, #8
 800537c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	2204      	movs	r2, #4
 8005382:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	69db      	ldr	r3, [r3, #28]
 800538a:	f003 0303 	and.w	r3, r3, #3
 800538e:	2b00      	cmp	r3, #0
 8005390:	d003      	beq.n	800539a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005392:	6878      	ldr	r0, [r7, #4]
 8005394:	f7fa ff7a 	bl	800028c <HAL_TIM_IC_CaptureCallback>
 8005398:	e005      	b.n	80053a6 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800539a:	6878      	ldr	r0, [r7, #4]
 800539c:	f000 fb52 	bl	8005a44 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80053a0:	6878      	ldr	r0, [r7, #4]
 80053a2:	f000 fb59 	bl	8005a58 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	2200      	movs	r2, #0
 80053aa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80053ac:	68bb      	ldr	r3, [r7, #8]
 80053ae:	f003 0310 	and.w	r3, r3, #16
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d020      	beq.n	80053f8 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	f003 0310 	and.w	r3, r3, #16
 80053bc:	2b00      	cmp	r3, #0
 80053be:	d01b      	beq.n	80053f8 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	f06f 0210 	mvn.w	r2, #16
 80053c8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	2208      	movs	r2, #8
 80053ce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	69db      	ldr	r3, [r3, #28]
 80053d6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d003      	beq.n	80053e6 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80053de:	6878      	ldr	r0, [r7, #4]
 80053e0:	f7fa ff54 	bl	800028c <HAL_TIM_IC_CaptureCallback>
 80053e4:	e005      	b.n	80053f2 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80053e6:	6878      	ldr	r0, [r7, #4]
 80053e8:	f000 fb2c 	bl	8005a44 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80053ec:	6878      	ldr	r0, [r7, #4]
 80053ee:	f000 fb33 	bl	8005a58 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	2200      	movs	r2, #0
 80053f6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80053f8:	68bb      	ldr	r3, [r7, #8]
 80053fa:	f003 0301 	and.w	r3, r3, #1
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d00c      	beq.n	800541c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	f003 0301 	and.w	r3, r3, #1
 8005408:	2b00      	cmp	r3, #0
 800540a:	d007      	beq.n	800541c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	f06f 0201 	mvn.w	r2, #1
 8005414:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005416:	6878      	ldr	r0, [r7, #4]
 8005418:	f000 fb0a 	bl	8005a30 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800541c:	68bb      	ldr	r3, [r7, #8]
 800541e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005422:	2b00      	cmp	r3, #0
 8005424:	d00c      	beq.n	8005440 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800542c:	2b00      	cmp	r3, #0
 800542e:	d007      	beq.n	8005440 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8005438:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800543a:	6878      	ldr	r0, [r7, #4]
 800543c:	f001 f8fa 	bl	8006634 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8005440:	68bb      	ldr	r3, [r7, #8]
 8005442:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005446:	2b00      	cmp	r3, #0
 8005448:	d00c      	beq.n	8005464 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005450:	2b00      	cmp	r3, #0
 8005452:	d007      	beq.n	8005464 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800545c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800545e:	6878      	ldr	r0, [r7, #4]
 8005460:	f001 f8f2 	bl	8006648 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005464:	68bb      	ldr	r3, [r7, #8]
 8005466:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800546a:	2b00      	cmp	r3, #0
 800546c:	d00c      	beq.n	8005488 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005474:	2b00      	cmp	r3, #0
 8005476:	d007      	beq.n	8005488 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8005480:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005482:	6878      	ldr	r0, [r7, #4]
 8005484:	f000 faf2 	bl	8005a6c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005488:	68bb      	ldr	r3, [r7, #8]
 800548a:	f003 0320 	and.w	r3, r3, #32
 800548e:	2b00      	cmp	r3, #0
 8005490:	d00c      	beq.n	80054ac <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	f003 0320 	and.w	r3, r3, #32
 8005498:	2b00      	cmp	r3, #0
 800549a:	d007      	beq.n	80054ac <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	f06f 0220 	mvn.w	r2, #32
 80054a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80054a6:	6878      	ldr	r0, [r7, #4]
 80054a8:	f001 f8ba 	bl	8006620 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80054ac:	bf00      	nop
 80054ae:	3710      	adds	r7, #16
 80054b0:	46bd      	mov	sp, r7
 80054b2:	bd80      	pop	{r7, pc}

080054b4 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 80054b4:	b580      	push	{r7, lr}
 80054b6:	b086      	sub	sp, #24
 80054b8:	af00      	add	r7, sp, #0
 80054ba:	60f8      	str	r0, [r7, #12]
 80054bc:	60b9      	str	r1, [r7, #8]
 80054be:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80054c0:	2300      	movs	r3, #0
 80054c2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80054ca:	2b01      	cmp	r3, #1
 80054cc:	d101      	bne.n	80054d2 <HAL_TIM_IC_ConfigChannel+0x1e>
 80054ce:	2302      	movs	r3, #2
 80054d0:	e088      	b.n	80055e4 <HAL_TIM_IC_ConfigChannel+0x130>
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	2201      	movs	r2, #1
 80054d6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	2b00      	cmp	r3, #0
 80054de:	d11b      	bne.n	8005518 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80054e4:	68bb      	ldr	r3, [r7, #8]
 80054e6:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80054e8:	68bb      	ldr	r3, [r7, #8]
 80054ea:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80054ec:	68bb      	ldr	r3, [r7, #8]
 80054ee:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 80054f0:	f000 fe38 	bl	8006164 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	699a      	ldr	r2, [r3, #24]
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	f022 020c 	bic.w	r2, r2, #12
 8005502:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	6999      	ldr	r1, [r3, #24]
 800550a:	68bb      	ldr	r3, [r7, #8]
 800550c:	689a      	ldr	r2, [r3, #8]
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	430a      	orrs	r2, r1
 8005514:	619a      	str	r2, [r3, #24]
 8005516:	e060      	b.n	80055da <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	2b04      	cmp	r3, #4
 800551c:	d11c      	bne.n	8005558 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8005522:	68bb      	ldr	r3, [r7, #8]
 8005524:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8005526:	68bb      	ldr	r3, [r7, #8]
 8005528:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800552a:	68bb      	ldr	r3, [r7, #8]
 800552c:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 800552e:	f000 feb0 	bl	8006292 <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	699a      	ldr	r2, [r3, #24]
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8005540:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	6999      	ldr	r1, [r3, #24]
 8005548:	68bb      	ldr	r3, [r7, #8]
 800554a:	689b      	ldr	r3, [r3, #8]
 800554c:	021a      	lsls	r2, r3, #8
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	430a      	orrs	r2, r1
 8005554:	619a      	str	r2, [r3, #24]
 8005556:	e040      	b.n	80055da <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	2b08      	cmp	r3, #8
 800555c:	d11b      	bne.n	8005596 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8005562:	68bb      	ldr	r3, [r7, #8]
 8005564:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8005566:	68bb      	ldr	r3, [r7, #8]
 8005568:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800556a:	68bb      	ldr	r3, [r7, #8]
 800556c:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 800556e:	f000 fefd 	bl	800636c <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	69da      	ldr	r2, [r3, #28]
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	f022 020c 	bic.w	r2, r2, #12
 8005580:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	69d9      	ldr	r1, [r3, #28]
 8005588:	68bb      	ldr	r3, [r7, #8]
 800558a:	689a      	ldr	r2, [r3, #8]
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	430a      	orrs	r2, r1
 8005592:	61da      	str	r2, [r3, #28]
 8005594:	e021      	b.n	80055da <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	2b0c      	cmp	r3, #12
 800559a:	d11c      	bne.n	80055d6 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80055a0:	68bb      	ldr	r3, [r7, #8]
 80055a2:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80055a4:	68bb      	ldr	r3, [r7, #8]
 80055a6:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80055a8:	68bb      	ldr	r3, [r7, #8]
 80055aa:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 80055ac:	f000 ff1a 	bl	80063e4 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	69da      	ldr	r2, [r3, #28]
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 80055be:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	69d9      	ldr	r1, [r3, #28]
 80055c6:	68bb      	ldr	r3, [r7, #8]
 80055c8:	689b      	ldr	r3, [r3, #8]
 80055ca:	021a      	lsls	r2, r3, #8
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	430a      	orrs	r2, r1
 80055d2:	61da      	str	r2, [r3, #28]
 80055d4:	e001      	b.n	80055da <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 80055d6:	2301      	movs	r3, #1
 80055d8:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	2200      	movs	r2, #0
 80055de:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80055e2:	7dfb      	ldrb	r3, [r7, #23]
}
 80055e4:	4618      	mov	r0, r3
 80055e6:	3718      	adds	r7, #24
 80055e8:	46bd      	mov	sp, r7
 80055ea:	bd80      	pop	{r7, pc}

080055ec <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80055ec:	b580      	push	{r7, lr}
 80055ee:	b086      	sub	sp, #24
 80055f0:	af00      	add	r7, sp, #0
 80055f2:	60f8      	str	r0, [r7, #12]
 80055f4:	60b9      	str	r1, [r7, #8]
 80055f6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80055f8:	2300      	movs	r3, #0
 80055fa:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005602:	2b01      	cmp	r3, #1
 8005604:	d101      	bne.n	800560a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005606:	2302      	movs	r3, #2
 8005608:	e0ff      	b.n	800580a <HAL_TIM_PWM_ConfigChannel+0x21e>
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	2201      	movs	r2, #1
 800560e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	2b14      	cmp	r3, #20
 8005616:	f200 80f0 	bhi.w	80057fa <HAL_TIM_PWM_ConfigChannel+0x20e>
 800561a:	a201      	add	r2, pc, #4	@ (adr r2, 8005620 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800561c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005620:	08005675 	.word	0x08005675
 8005624:	080057fb 	.word	0x080057fb
 8005628:	080057fb 	.word	0x080057fb
 800562c:	080057fb 	.word	0x080057fb
 8005630:	080056b5 	.word	0x080056b5
 8005634:	080057fb 	.word	0x080057fb
 8005638:	080057fb 	.word	0x080057fb
 800563c:	080057fb 	.word	0x080057fb
 8005640:	080056f7 	.word	0x080056f7
 8005644:	080057fb 	.word	0x080057fb
 8005648:	080057fb 	.word	0x080057fb
 800564c:	080057fb 	.word	0x080057fb
 8005650:	08005737 	.word	0x08005737
 8005654:	080057fb 	.word	0x080057fb
 8005658:	080057fb 	.word	0x080057fb
 800565c:	080057fb 	.word	0x080057fb
 8005660:	08005779 	.word	0x08005779
 8005664:	080057fb 	.word	0x080057fb
 8005668:	080057fb 	.word	0x080057fb
 800566c:	080057fb 	.word	0x080057fb
 8005670:	080057b9 	.word	0x080057b9
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	68b9      	ldr	r1, [r7, #8]
 800567a:	4618      	mov	r0, r3
 800567c:	f000 fa9c 	bl	8005bb8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	699a      	ldr	r2, [r3, #24]
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	f042 0208 	orr.w	r2, r2, #8
 800568e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	699a      	ldr	r2, [r3, #24]
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	f022 0204 	bic.w	r2, r2, #4
 800569e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	6999      	ldr	r1, [r3, #24]
 80056a6:	68bb      	ldr	r3, [r7, #8]
 80056a8:	691a      	ldr	r2, [r3, #16]
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	430a      	orrs	r2, r1
 80056b0:	619a      	str	r2, [r3, #24]
      break;
 80056b2:	e0a5      	b.n	8005800 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	68b9      	ldr	r1, [r7, #8]
 80056ba:	4618      	mov	r0, r3
 80056bc:	f000 fb0c 	bl	8005cd8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	699a      	ldr	r2, [r3, #24]
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80056ce:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	699a      	ldr	r2, [r3, #24]
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80056de:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	6999      	ldr	r1, [r3, #24]
 80056e6:	68bb      	ldr	r3, [r7, #8]
 80056e8:	691b      	ldr	r3, [r3, #16]
 80056ea:	021a      	lsls	r2, r3, #8
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	430a      	orrs	r2, r1
 80056f2:	619a      	str	r2, [r3, #24]
      break;
 80056f4:	e084      	b.n	8005800 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	68b9      	ldr	r1, [r7, #8]
 80056fc:	4618      	mov	r0, r3
 80056fe:	f000 fb75 	bl	8005dec <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	69da      	ldr	r2, [r3, #28]
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	f042 0208 	orr.w	r2, r2, #8
 8005710:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	69da      	ldr	r2, [r3, #28]
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	f022 0204 	bic.w	r2, r2, #4
 8005720:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	69d9      	ldr	r1, [r3, #28]
 8005728:	68bb      	ldr	r3, [r7, #8]
 800572a:	691a      	ldr	r2, [r3, #16]
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	430a      	orrs	r2, r1
 8005732:	61da      	str	r2, [r3, #28]
      break;
 8005734:	e064      	b.n	8005800 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	68b9      	ldr	r1, [r7, #8]
 800573c:	4618      	mov	r0, r3
 800573e:	f000 fbdd 	bl	8005efc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	69da      	ldr	r2, [r3, #28]
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005750:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	69da      	ldr	r2, [r3, #28]
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005760:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	69d9      	ldr	r1, [r3, #28]
 8005768:	68bb      	ldr	r3, [r7, #8]
 800576a:	691b      	ldr	r3, [r3, #16]
 800576c:	021a      	lsls	r2, r3, #8
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	430a      	orrs	r2, r1
 8005774:	61da      	str	r2, [r3, #28]
      break;
 8005776:	e043      	b.n	8005800 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	68b9      	ldr	r1, [r7, #8]
 800577e:	4618      	mov	r0, r3
 8005780:	f000 fc26 	bl	8005fd0 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	f042 0208 	orr.w	r2, r2, #8
 8005792:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	f022 0204 	bic.w	r2, r2, #4
 80057a2:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80057aa:	68bb      	ldr	r3, [r7, #8]
 80057ac:	691a      	ldr	r2, [r3, #16]
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	430a      	orrs	r2, r1
 80057b4:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 80057b6:	e023      	b.n	8005800 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	68b9      	ldr	r1, [r7, #8]
 80057be:	4618      	mov	r0, r3
 80057c0:	f000 fc6a 	bl	8006098 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80057d2:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80057e2:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80057ea:	68bb      	ldr	r3, [r7, #8]
 80057ec:	691b      	ldr	r3, [r3, #16]
 80057ee:	021a      	lsls	r2, r3, #8
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	430a      	orrs	r2, r1
 80057f6:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 80057f8:	e002      	b.n	8005800 <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 80057fa:	2301      	movs	r3, #1
 80057fc:	75fb      	strb	r3, [r7, #23]
      break;
 80057fe:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	2200      	movs	r2, #0
 8005804:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005808:	7dfb      	ldrb	r3, [r7, #23]
}
 800580a:	4618      	mov	r0, r3
 800580c:	3718      	adds	r7, #24
 800580e:	46bd      	mov	sp, r7
 8005810:	bd80      	pop	{r7, pc}
 8005812:	bf00      	nop

08005814 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005814:	b580      	push	{r7, lr}
 8005816:	b084      	sub	sp, #16
 8005818:	af00      	add	r7, sp, #0
 800581a:	6078      	str	r0, [r7, #4]
 800581c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800581e:	2300      	movs	r3, #0
 8005820:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005828:	2b01      	cmp	r3, #1
 800582a:	d101      	bne.n	8005830 <HAL_TIM_ConfigClockSource+0x1c>
 800582c:	2302      	movs	r3, #2
 800582e:	e0b6      	b.n	800599e <HAL_TIM_ConfigClockSource+0x18a>
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	2201      	movs	r2, #1
 8005834:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	2202      	movs	r2, #2
 800583c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	689b      	ldr	r3, [r3, #8]
 8005846:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005848:	68bb      	ldr	r3, [r7, #8]
 800584a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800584e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8005852:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005854:	68bb      	ldr	r3, [r7, #8]
 8005856:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800585a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	68ba      	ldr	r2, [r7, #8]
 8005862:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005864:	683b      	ldr	r3, [r7, #0]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800586c:	d03e      	beq.n	80058ec <HAL_TIM_ConfigClockSource+0xd8>
 800586e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005872:	f200 8087 	bhi.w	8005984 <HAL_TIM_ConfigClockSource+0x170>
 8005876:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800587a:	f000 8086 	beq.w	800598a <HAL_TIM_ConfigClockSource+0x176>
 800587e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005882:	d87f      	bhi.n	8005984 <HAL_TIM_ConfigClockSource+0x170>
 8005884:	2b70      	cmp	r3, #112	@ 0x70
 8005886:	d01a      	beq.n	80058be <HAL_TIM_ConfigClockSource+0xaa>
 8005888:	2b70      	cmp	r3, #112	@ 0x70
 800588a:	d87b      	bhi.n	8005984 <HAL_TIM_ConfigClockSource+0x170>
 800588c:	2b60      	cmp	r3, #96	@ 0x60
 800588e:	d050      	beq.n	8005932 <HAL_TIM_ConfigClockSource+0x11e>
 8005890:	2b60      	cmp	r3, #96	@ 0x60
 8005892:	d877      	bhi.n	8005984 <HAL_TIM_ConfigClockSource+0x170>
 8005894:	2b50      	cmp	r3, #80	@ 0x50
 8005896:	d03c      	beq.n	8005912 <HAL_TIM_ConfigClockSource+0xfe>
 8005898:	2b50      	cmp	r3, #80	@ 0x50
 800589a:	d873      	bhi.n	8005984 <HAL_TIM_ConfigClockSource+0x170>
 800589c:	2b40      	cmp	r3, #64	@ 0x40
 800589e:	d058      	beq.n	8005952 <HAL_TIM_ConfigClockSource+0x13e>
 80058a0:	2b40      	cmp	r3, #64	@ 0x40
 80058a2:	d86f      	bhi.n	8005984 <HAL_TIM_ConfigClockSource+0x170>
 80058a4:	2b30      	cmp	r3, #48	@ 0x30
 80058a6:	d064      	beq.n	8005972 <HAL_TIM_ConfigClockSource+0x15e>
 80058a8:	2b30      	cmp	r3, #48	@ 0x30
 80058aa:	d86b      	bhi.n	8005984 <HAL_TIM_ConfigClockSource+0x170>
 80058ac:	2b20      	cmp	r3, #32
 80058ae:	d060      	beq.n	8005972 <HAL_TIM_ConfigClockSource+0x15e>
 80058b0:	2b20      	cmp	r3, #32
 80058b2:	d867      	bhi.n	8005984 <HAL_TIM_ConfigClockSource+0x170>
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	d05c      	beq.n	8005972 <HAL_TIM_ConfigClockSource+0x15e>
 80058b8:	2b10      	cmp	r3, #16
 80058ba:	d05a      	beq.n	8005972 <HAL_TIM_ConfigClockSource+0x15e>
 80058bc:	e062      	b.n	8005984 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80058c2:	683b      	ldr	r3, [r7, #0]
 80058c4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80058c6:	683b      	ldr	r3, [r7, #0]
 80058c8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80058ca:	683b      	ldr	r3, [r7, #0]
 80058cc:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80058ce:	f000 fde1 	bl	8006494 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	689b      	ldr	r3, [r3, #8]
 80058d8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80058da:	68bb      	ldr	r3, [r7, #8]
 80058dc:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80058e0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	68ba      	ldr	r2, [r7, #8]
 80058e8:	609a      	str	r2, [r3, #8]
      break;
 80058ea:	e04f      	b.n	800598c <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80058f0:	683b      	ldr	r3, [r7, #0]
 80058f2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80058f4:	683b      	ldr	r3, [r7, #0]
 80058f6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80058f8:	683b      	ldr	r3, [r7, #0]
 80058fa:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80058fc:	f000 fdca 	bl	8006494 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	689a      	ldr	r2, [r3, #8]
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800590e:	609a      	str	r2, [r3, #8]
      break;
 8005910:	e03c      	b.n	800598c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005916:	683b      	ldr	r3, [r7, #0]
 8005918:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800591a:	683b      	ldr	r3, [r7, #0]
 800591c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800591e:	461a      	mov	r2, r3
 8005920:	f000 fc88 	bl	8006234 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	2150      	movs	r1, #80	@ 0x50
 800592a:	4618      	mov	r0, r3
 800592c:	f000 fd97 	bl	800645e <TIM_ITRx_SetConfig>
      break;
 8005930:	e02c      	b.n	800598c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005936:	683b      	ldr	r3, [r7, #0]
 8005938:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800593a:	683b      	ldr	r3, [r7, #0]
 800593c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800593e:	461a      	mov	r2, r3
 8005940:	f000 fce4 	bl	800630c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	2160      	movs	r1, #96	@ 0x60
 800594a:	4618      	mov	r0, r3
 800594c:	f000 fd87 	bl	800645e <TIM_ITRx_SetConfig>
      break;
 8005950:	e01c      	b.n	800598c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005956:	683b      	ldr	r3, [r7, #0]
 8005958:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800595a:	683b      	ldr	r3, [r7, #0]
 800595c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800595e:	461a      	mov	r2, r3
 8005960:	f000 fc68 	bl	8006234 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	2140      	movs	r1, #64	@ 0x40
 800596a:	4618      	mov	r0, r3
 800596c:	f000 fd77 	bl	800645e <TIM_ITRx_SetConfig>
      break;
 8005970:	e00c      	b.n	800598c <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	681a      	ldr	r2, [r3, #0]
 8005976:	683b      	ldr	r3, [r7, #0]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	4619      	mov	r1, r3
 800597c:	4610      	mov	r0, r2
 800597e:	f000 fd6e 	bl	800645e <TIM_ITRx_SetConfig>
      break;
 8005982:	e003      	b.n	800598c <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8005984:	2301      	movs	r3, #1
 8005986:	73fb      	strb	r3, [r7, #15]
      break;
 8005988:	e000      	b.n	800598c <HAL_TIM_ConfigClockSource+0x178>
      break;
 800598a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	2201      	movs	r2, #1
 8005990:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	2200      	movs	r2, #0
 8005998:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800599c:	7bfb      	ldrb	r3, [r7, #15]
}
 800599e:	4618      	mov	r0, r3
 80059a0:	3710      	adds	r7, #16
 80059a2:	46bd      	mov	sp, r7
 80059a4:	bd80      	pop	{r7, pc}
	...

080059a8 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80059a8:	b480      	push	{r7}
 80059aa:	b085      	sub	sp, #20
 80059ac:	af00      	add	r7, sp, #0
 80059ae:	6078      	str	r0, [r7, #4]
 80059b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 80059b2:	2300      	movs	r3, #0
 80059b4:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 80059b6:	683b      	ldr	r3, [r7, #0]
 80059b8:	2b0c      	cmp	r3, #12
 80059ba:	d831      	bhi.n	8005a20 <HAL_TIM_ReadCapturedValue+0x78>
 80059bc:	a201      	add	r2, pc, #4	@ (adr r2, 80059c4 <HAL_TIM_ReadCapturedValue+0x1c>)
 80059be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059c2:	bf00      	nop
 80059c4:	080059f9 	.word	0x080059f9
 80059c8:	08005a21 	.word	0x08005a21
 80059cc:	08005a21 	.word	0x08005a21
 80059d0:	08005a21 	.word	0x08005a21
 80059d4:	08005a03 	.word	0x08005a03
 80059d8:	08005a21 	.word	0x08005a21
 80059dc:	08005a21 	.word	0x08005a21
 80059e0:	08005a21 	.word	0x08005a21
 80059e4:	08005a0d 	.word	0x08005a0d
 80059e8:	08005a21 	.word	0x08005a21
 80059ec:	08005a21 	.word	0x08005a21
 80059f0:	08005a21 	.word	0x08005a21
 80059f4:	08005a17 	.word	0x08005a17
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80059fe:	60fb      	str	r3, [r7, #12]

      break;
 8005a00:	e00f      	b.n	8005a22 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005a08:	60fb      	str	r3, [r7, #12]

      break;
 8005a0a:	e00a      	b.n	8005a22 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005a12:	60fb      	str	r3, [r7, #12]

      break;
 8005a14:	e005      	b.n	8005a22 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a1c:	60fb      	str	r3, [r7, #12]

      break;
 8005a1e:	e000      	b.n	8005a22 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8005a20:	bf00      	nop
  }

  return tmpreg;
 8005a22:	68fb      	ldr	r3, [r7, #12]
}
 8005a24:	4618      	mov	r0, r3
 8005a26:	3714      	adds	r7, #20
 8005a28:	46bd      	mov	sp, r7
 8005a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a2e:	4770      	bx	lr

08005a30 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005a30:	b480      	push	{r7}
 8005a32:	b083      	sub	sp, #12
 8005a34:	af00      	add	r7, sp, #0
 8005a36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8005a38:	bf00      	nop
 8005a3a:	370c      	adds	r7, #12
 8005a3c:	46bd      	mov	sp, r7
 8005a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a42:	4770      	bx	lr

08005a44 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005a44:	b480      	push	{r7}
 8005a46:	b083      	sub	sp, #12
 8005a48:	af00      	add	r7, sp, #0
 8005a4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005a4c:	bf00      	nop
 8005a4e:	370c      	adds	r7, #12
 8005a50:	46bd      	mov	sp, r7
 8005a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a56:	4770      	bx	lr

08005a58 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005a58:	b480      	push	{r7}
 8005a5a:	b083      	sub	sp, #12
 8005a5c:	af00      	add	r7, sp, #0
 8005a5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005a60:	bf00      	nop
 8005a62:	370c      	adds	r7, #12
 8005a64:	46bd      	mov	sp, r7
 8005a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a6a:	4770      	bx	lr

08005a6c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005a6c:	b480      	push	{r7}
 8005a6e:	b083      	sub	sp, #12
 8005a70:	af00      	add	r7, sp, #0
 8005a72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005a74:	bf00      	nop
 8005a76:	370c      	adds	r7, #12
 8005a78:	46bd      	mov	sp, r7
 8005a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a7e:	4770      	bx	lr

08005a80 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005a80:	b480      	push	{r7}
 8005a82:	b085      	sub	sp, #20
 8005a84:	af00      	add	r7, sp, #0
 8005a86:	6078      	str	r0, [r7, #4]
 8005a88:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	4a42      	ldr	r2, [pc, #264]	@ (8005b9c <TIM_Base_SetConfig+0x11c>)
 8005a94:	4293      	cmp	r3, r2
 8005a96:	d00f      	beq.n	8005ab8 <TIM_Base_SetConfig+0x38>
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005a9e:	d00b      	beq.n	8005ab8 <TIM_Base_SetConfig+0x38>
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	4a3f      	ldr	r2, [pc, #252]	@ (8005ba0 <TIM_Base_SetConfig+0x120>)
 8005aa4:	4293      	cmp	r3, r2
 8005aa6:	d007      	beq.n	8005ab8 <TIM_Base_SetConfig+0x38>
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	4a3e      	ldr	r2, [pc, #248]	@ (8005ba4 <TIM_Base_SetConfig+0x124>)
 8005aac:	4293      	cmp	r3, r2
 8005aae:	d003      	beq.n	8005ab8 <TIM_Base_SetConfig+0x38>
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	4a3d      	ldr	r2, [pc, #244]	@ (8005ba8 <TIM_Base_SetConfig+0x128>)
 8005ab4:	4293      	cmp	r3, r2
 8005ab6:	d108      	bne.n	8005aca <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005abe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005ac0:	683b      	ldr	r3, [r7, #0]
 8005ac2:	685b      	ldr	r3, [r3, #4]
 8005ac4:	68fa      	ldr	r2, [r7, #12]
 8005ac6:	4313      	orrs	r3, r2
 8005ac8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	4a33      	ldr	r2, [pc, #204]	@ (8005b9c <TIM_Base_SetConfig+0x11c>)
 8005ace:	4293      	cmp	r3, r2
 8005ad0:	d01b      	beq.n	8005b0a <TIM_Base_SetConfig+0x8a>
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005ad8:	d017      	beq.n	8005b0a <TIM_Base_SetConfig+0x8a>
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	4a30      	ldr	r2, [pc, #192]	@ (8005ba0 <TIM_Base_SetConfig+0x120>)
 8005ade:	4293      	cmp	r3, r2
 8005ae0:	d013      	beq.n	8005b0a <TIM_Base_SetConfig+0x8a>
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	4a2f      	ldr	r2, [pc, #188]	@ (8005ba4 <TIM_Base_SetConfig+0x124>)
 8005ae6:	4293      	cmp	r3, r2
 8005ae8:	d00f      	beq.n	8005b0a <TIM_Base_SetConfig+0x8a>
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	4a2e      	ldr	r2, [pc, #184]	@ (8005ba8 <TIM_Base_SetConfig+0x128>)
 8005aee:	4293      	cmp	r3, r2
 8005af0:	d00b      	beq.n	8005b0a <TIM_Base_SetConfig+0x8a>
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	4a2d      	ldr	r2, [pc, #180]	@ (8005bac <TIM_Base_SetConfig+0x12c>)
 8005af6:	4293      	cmp	r3, r2
 8005af8:	d007      	beq.n	8005b0a <TIM_Base_SetConfig+0x8a>
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	4a2c      	ldr	r2, [pc, #176]	@ (8005bb0 <TIM_Base_SetConfig+0x130>)
 8005afe:	4293      	cmp	r3, r2
 8005b00:	d003      	beq.n	8005b0a <TIM_Base_SetConfig+0x8a>
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	4a2b      	ldr	r2, [pc, #172]	@ (8005bb4 <TIM_Base_SetConfig+0x134>)
 8005b06:	4293      	cmp	r3, r2
 8005b08:	d108      	bne.n	8005b1c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005b10:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005b12:	683b      	ldr	r3, [r7, #0]
 8005b14:	68db      	ldr	r3, [r3, #12]
 8005b16:	68fa      	ldr	r2, [r7, #12]
 8005b18:	4313      	orrs	r3, r2
 8005b1a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005b22:	683b      	ldr	r3, [r7, #0]
 8005b24:	695b      	ldr	r3, [r3, #20]
 8005b26:	4313      	orrs	r3, r2
 8005b28:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	68fa      	ldr	r2, [r7, #12]
 8005b2e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005b30:	683b      	ldr	r3, [r7, #0]
 8005b32:	689a      	ldr	r2, [r3, #8]
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005b38:	683b      	ldr	r3, [r7, #0]
 8005b3a:	681a      	ldr	r2, [r3, #0]
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	4a16      	ldr	r2, [pc, #88]	@ (8005b9c <TIM_Base_SetConfig+0x11c>)
 8005b44:	4293      	cmp	r3, r2
 8005b46:	d00f      	beq.n	8005b68 <TIM_Base_SetConfig+0xe8>
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	4a17      	ldr	r2, [pc, #92]	@ (8005ba8 <TIM_Base_SetConfig+0x128>)
 8005b4c:	4293      	cmp	r3, r2
 8005b4e:	d00b      	beq.n	8005b68 <TIM_Base_SetConfig+0xe8>
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	4a16      	ldr	r2, [pc, #88]	@ (8005bac <TIM_Base_SetConfig+0x12c>)
 8005b54:	4293      	cmp	r3, r2
 8005b56:	d007      	beq.n	8005b68 <TIM_Base_SetConfig+0xe8>
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	4a15      	ldr	r2, [pc, #84]	@ (8005bb0 <TIM_Base_SetConfig+0x130>)
 8005b5c:	4293      	cmp	r3, r2
 8005b5e:	d003      	beq.n	8005b68 <TIM_Base_SetConfig+0xe8>
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	4a14      	ldr	r2, [pc, #80]	@ (8005bb4 <TIM_Base_SetConfig+0x134>)
 8005b64:	4293      	cmp	r3, r2
 8005b66:	d103      	bne.n	8005b70 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005b68:	683b      	ldr	r3, [r7, #0]
 8005b6a:	691a      	ldr	r2, [r3, #16]
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	2201      	movs	r2, #1
 8005b74:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	691b      	ldr	r3, [r3, #16]
 8005b7a:	f003 0301 	and.w	r3, r3, #1
 8005b7e:	2b01      	cmp	r3, #1
 8005b80:	d105      	bne.n	8005b8e <TIM_Base_SetConfig+0x10e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	691b      	ldr	r3, [r3, #16]
 8005b86:	f023 0201 	bic.w	r2, r3, #1
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	611a      	str	r2, [r3, #16]
  }
}
 8005b8e:	bf00      	nop
 8005b90:	3714      	adds	r7, #20
 8005b92:	46bd      	mov	sp, r7
 8005b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b98:	4770      	bx	lr
 8005b9a:	bf00      	nop
 8005b9c:	40012c00 	.word	0x40012c00
 8005ba0:	40000400 	.word	0x40000400
 8005ba4:	40000800 	.word	0x40000800
 8005ba8:	40013400 	.word	0x40013400
 8005bac:	40014000 	.word	0x40014000
 8005bb0:	40014400 	.word	0x40014400
 8005bb4:	40014800 	.word	0x40014800

08005bb8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005bb8:	b480      	push	{r7}
 8005bba:	b087      	sub	sp, #28
 8005bbc:	af00      	add	r7, sp, #0
 8005bbe:	6078      	str	r0, [r7, #4]
 8005bc0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	6a1b      	ldr	r3, [r3, #32]
 8005bc6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	6a1b      	ldr	r3, [r3, #32]
 8005bcc:	f023 0201 	bic.w	r2, r3, #1
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	685b      	ldr	r3, [r3, #4]
 8005bd8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	699b      	ldr	r3, [r3, #24]
 8005bde:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005be6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005bea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	f023 0303 	bic.w	r3, r3, #3
 8005bf2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005bf4:	683b      	ldr	r3, [r7, #0]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	68fa      	ldr	r2, [r7, #12]
 8005bfa:	4313      	orrs	r3, r2
 8005bfc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005bfe:	697b      	ldr	r3, [r7, #20]
 8005c00:	f023 0302 	bic.w	r3, r3, #2
 8005c04:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005c06:	683b      	ldr	r3, [r7, #0]
 8005c08:	689b      	ldr	r3, [r3, #8]
 8005c0a:	697a      	ldr	r2, [r7, #20]
 8005c0c:	4313      	orrs	r3, r2
 8005c0e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	4a2c      	ldr	r2, [pc, #176]	@ (8005cc4 <TIM_OC1_SetConfig+0x10c>)
 8005c14:	4293      	cmp	r3, r2
 8005c16:	d00f      	beq.n	8005c38 <TIM_OC1_SetConfig+0x80>
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	4a2b      	ldr	r2, [pc, #172]	@ (8005cc8 <TIM_OC1_SetConfig+0x110>)
 8005c1c:	4293      	cmp	r3, r2
 8005c1e:	d00b      	beq.n	8005c38 <TIM_OC1_SetConfig+0x80>
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	4a2a      	ldr	r2, [pc, #168]	@ (8005ccc <TIM_OC1_SetConfig+0x114>)
 8005c24:	4293      	cmp	r3, r2
 8005c26:	d007      	beq.n	8005c38 <TIM_OC1_SetConfig+0x80>
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	4a29      	ldr	r2, [pc, #164]	@ (8005cd0 <TIM_OC1_SetConfig+0x118>)
 8005c2c:	4293      	cmp	r3, r2
 8005c2e:	d003      	beq.n	8005c38 <TIM_OC1_SetConfig+0x80>
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	4a28      	ldr	r2, [pc, #160]	@ (8005cd4 <TIM_OC1_SetConfig+0x11c>)
 8005c34:	4293      	cmp	r3, r2
 8005c36:	d10c      	bne.n	8005c52 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005c38:	697b      	ldr	r3, [r7, #20]
 8005c3a:	f023 0308 	bic.w	r3, r3, #8
 8005c3e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005c40:	683b      	ldr	r3, [r7, #0]
 8005c42:	68db      	ldr	r3, [r3, #12]
 8005c44:	697a      	ldr	r2, [r7, #20]
 8005c46:	4313      	orrs	r3, r2
 8005c48:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005c4a:	697b      	ldr	r3, [r7, #20]
 8005c4c:	f023 0304 	bic.w	r3, r3, #4
 8005c50:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	4a1b      	ldr	r2, [pc, #108]	@ (8005cc4 <TIM_OC1_SetConfig+0x10c>)
 8005c56:	4293      	cmp	r3, r2
 8005c58:	d00f      	beq.n	8005c7a <TIM_OC1_SetConfig+0xc2>
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	4a1a      	ldr	r2, [pc, #104]	@ (8005cc8 <TIM_OC1_SetConfig+0x110>)
 8005c5e:	4293      	cmp	r3, r2
 8005c60:	d00b      	beq.n	8005c7a <TIM_OC1_SetConfig+0xc2>
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	4a19      	ldr	r2, [pc, #100]	@ (8005ccc <TIM_OC1_SetConfig+0x114>)
 8005c66:	4293      	cmp	r3, r2
 8005c68:	d007      	beq.n	8005c7a <TIM_OC1_SetConfig+0xc2>
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	4a18      	ldr	r2, [pc, #96]	@ (8005cd0 <TIM_OC1_SetConfig+0x118>)
 8005c6e:	4293      	cmp	r3, r2
 8005c70:	d003      	beq.n	8005c7a <TIM_OC1_SetConfig+0xc2>
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	4a17      	ldr	r2, [pc, #92]	@ (8005cd4 <TIM_OC1_SetConfig+0x11c>)
 8005c76:	4293      	cmp	r3, r2
 8005c78:	d111      	bne.n	8005c9e <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005c7a:	693b      	ldr	r3, [r7, #16]
 8005c7c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005c80:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005c82:	693b      	ldr	r3, [r7, #16]
 8005c84:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005c88:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005c8a:	683b      	ldr	r3, [r7, #0]
 8005c8c:	695b      	ldr	r3, [r3, #20]
 8005c8e:	693a      	ldr	r2, [r7, #16]
 8005c90:	4313      	orrs	r3, r2
 8005c92:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005c94:	683b      	ldr	r3, [r7, #0]
 8005c96:	699b      	ldr	r3, [r3, #24]
 8005c98:	693a      	ldr	r2, [r7, #16]
 8005c9a:	4313      	orrs	r3, r2
 8005c9c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	693a      	ldr	r2, [r7, #16]
 8005ca2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	68fa      	ldr	r2, [r7, #12]
 8005ca8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005caa:	683b      	ldr	r3, [r7, #0]
 8005cac:	685a      	ldr	r2, [r3, #4]
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	697a      	ldr	r2, [r7, #20]
 8005cb6:	621a      	str	r2, [r3, #32]
}
 8005cb8:	bf00      	nop
 8005cba:	371c      	adds	r7, #28
 8005cbc:	46bd      	mov	sp, r7
 8005cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cc2:	4770      	bx	lr
 8005cc4:	40012c00 	.word	0x40012c00
 8005cc8:	40013400 	.word	0x40013400
 8005ccc:	40014000 	.word	0x40014000
 8005cd0:	40014400 	.word	0x40014400
 8005cd4:	40014800 	.word	0x40014800

08005cd8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005cd8:	b480      	push	{r7}
 8005cda:	b087      	sub	sp, #28
 8005cdc:	af00      	add	r7, sp, #0
 8005cde:	6078      	str	r0, [r7, #4]
 8005ce0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	6a1b      	ldr	r3, [r3, #32]
 8005ce6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	6a1b      	ldr	r3, [r3, #32]
 8005cec:	f023 0210 	bic.w	r2, r3, #16
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	685b      	ldr	r3, [r3, #4]
 8005cf8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	699b      	ldr	r3, [r3, #24]
 8005cfe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005d06:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005d0a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005d12:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005d14:	683b      	ldr	r3, [r7, #0]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	021b      	lsls	r3, r3, #8
 8005d1a:	68fa      	ldr	r2, [r7, #12]
 8005d1c:	4313      	orrs	r3, r2
 8005d1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005d20:	697b      	ldr	r3, [r7, #20]
 8005d22:	f023 0320 	bic.w	r3, r3, #32
 8005d26:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005d28:	683b      	ldr	r3, [r7, #0]
 8005d2a:	689b      	ldr	r3, [r3, #8]
 8005d2c:	011b      	lsls	r3, r3, #4
 8005d2e:	697a      	ldr	r2, [r7, #20]
 8005d30:	4313      	orrs	r3, r2
 8005d32:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	4a28      	ldr	r2, [pc, #160]	@ (8005dd8 <TIM_OC2_SetConfig+0x100>)
 8005d38:	4293      	cmp	r3, r2
 8005d3a:	d003      	beq.n	8005d44 <TIM_OC2_SetConfig+0x6c>
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	4a27      	ldr	r2, [pc, #156]	@ (8005ddc <TIM_OC2_SetConfig+0x104>)
 8005d40:	4293      	cmp	r3, r2
 8005d42:	d10d      	bne.n	8005d60 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005d44:	697b      	ldr	r3, [r7, #20]
 8005d46:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005d4a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005d4c:	683b      	ldr	r3, [r7, #0]
 8005d4e:	68db      	ldr	r3, [r3, #12]
 8005d50:	011b      	lsls	r3, r3, #4
 8005d52:	697a      	ldr	r2, [r7, #20]
 8005d54:	4313      	orrs	r3, r2
 8005d56:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005d58:	697b      	ldr	r3, [r7, #20]
 8005d5a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005d5e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	4a1d      	ldr	r2, [pc, #116]	@ (8005dd8 <TIM_OC2_SetConfig+0x100>)
 8005d64:	4293      	cmp	r3, r2
 8005d66:	d00f      	beq.n	8005d88 <TIM_OC2_SetConfig+0xb0>
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	4a1c      	ldr	r2, [pc, #112]	@ (8005ddc <TIM_OC2_SetConfig+0x104>)
 8005d6c:	4293      	cmp	r3, r2
 8005d6e:	d00b      	beq.n	8005d88 <TIM_OC2_SetConfig+0xb0>
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	4a1b      	ldr	r2, [pc, #108]	@ (8005de0 <TIM_OC2_SetConfig+0x108>)
 8005d74:	4293      	cmp	r3, r2
 8005d76:	d007      	beq.n	8005d88 <TIM_OC2_SetConfig+0xb0>
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	4a1a      	ldr	r2, [pc, #104]	@ (8005de4 <TIM_OC2_SetConfig+0x10c>)
 8005d7c:	4293      	cmp	r3, r2
 8005d7e:	d003      	beq.n	8005d88 <TIM_OC2_SetConfig+0xb0>
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	4a19      	ldr	r2, [pc, #100]	@ (8005de8 <TIM_OC2_SetConfig+0x110>)
 8005d84:	4293      	cmp	r3, r2
 8005d86:	d113      	bne.n	8005db0 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005d88:	693b      	ldr	r3, [r7, #16]
 8005d8a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005d8e:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005d90:	693b      	ldr	r3, [r7, #16]
 8005d92:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005d96:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005d98:	683b      	ldr	r3, [r7, #0]
 8005d9a:	695b      	ldr	r3, [r3, #20]
 8005d9c:	009b      	lsls	r3, r3, #2
 8005d9e:	693a      	ldr	r2, [r7, #16]
 8005da0:	4313      	orrs	r3, r2
 8005da2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005da4:	683b      	ldr	r3, [r7, #0]
 8005da6:	699b      	ldr	r3, [r3, #24]
 8005da8:	009b      	lsls	r3, r3, #2
 8005daa:	693a      	ldr	r2, [r7, #16]
 8005dac:	4313      	orrs	r3, r2
 8005dae:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	693a      	ldr	r2, [r7, #16]
 8005db4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	68fa      	ldr	r2, [r7, #12]
 8005dba:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005dbc:	683b      	ldr	r3, [r7, #0]
 8005dbe:	685a      	ldr	r2, [r3, #4]
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	697a      	ldr	r2, [r7, #20]
 8005dc8:	621a      	str	r2, [r3, #32]
}
 8005dca:	bf00      	nop
 8005dcc:	371c      	adds	r7, #28
 8005dce:	46bd      	mov	sp, r7
 8005dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dd4:	4770      	bx	lr
 8005dd6:	bf00      	nop
 8005dd8:	40012c00 	.word	0x40012c00
 8005ddc:	40013400 	.word	0x40013400
 8005de0:	40014000 	.word	0x40014000
 8005de4:	40014400 	.word	0x40014400
 8005de8:	40014800 	.word	0x40014800

08005dec <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005dec:	b480      	push	{r7}
 8005dee:	b087      	sub	sp, #28
 8005df0:	af00      	add	r7, sp, #0
 8005df2:	6078      	str	r0, [r7, #4]
 8005df4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	6a1b      	ldr	r3, [r3, #32]
 8005dfa:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	6a1b      	ldr	r3, [r3, #32]
 8005e00:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	685b      	ldr	r3, [r3, #4]
 8005e0c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	69db      	ldr	r3, [r3, #28]
 8005e12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005e1a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005e1e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	f023 0303 	bic.w	r3, r3, #3
 8005e26:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005e28:	683b      	ldr	r3, [r7, #0]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	68fa      	ldr	r2, [r7, #12]
 8005e2e:	4313      	orrs	r3, r2
 8005e30:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005e32:	697b      	ldr	r3, [r7, #20]
 8005e34:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005e38:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005e3a:	683b      	ldr	r3, [r7, #0]
 8005e3c:	689b      	ldr	r3, [r3, #8]
 8005e3e:	021b      	lsls	r3, r3, #8
 8005e40:	697a      	ldr	r2, [r7, #20]
 8005e42:	4313      	orrs	r3, r2
 8005e44:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	4a27      	ldr	r2, [pc, #156]	@ (8005ee8 <TIM_OC3_SetConfig+0xfc>)
 8005e4a:	4293      	cmp	r3, r2
 8005e4c:	d003      	beq.n	8005e56 <TIM_OC3_SetConfig+0x6a>
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	4a26      	ldr	r2, [pc, #152]	@ (8005eec <TIM_OC3_SetConfig+0x100>)
 8005e52:	4293      	cmp	r3, r2
 8005e54:	d10d      	bne.n	8005e72 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005e56:	697b      	ldr	r3, [r7, #20]
 8005e58:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005e5c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005e5e:	683b      	ldr	r3, [r7, #0]
 8005e60:	68db      	ldr	r3, [r3, #12]
 8005e62:	021b      	lsls	r3, r3, #8
 8005e64:	697a      	ldr	r2, [r7, #20]
 8005e66:	4313      	orrs	r3, r2
 8005e68:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005e6a:	697b      	ldr	r3, [r7, #20]
 8005e6c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005e70:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	4a1c      	ldr	r2, [pc, #112]	@ (8005ee8 <TIM_OC3_SetConfig+0xfc>)
 8005e76:	4293      	cmp	r3, r2
 8005e78:	d00f      	beq.n	8005e9a <TIM_OC3_SetConfig+0xae>
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	4a1b      	ldr	r2, [pc, #108]	@ (8005eec <TIM_OC3_SetConfig+0x100>)
 8005e7e:	4293      	cmp	r3, r2
 8005e80:	d00b      	beq.n	8005e9a <TIM_OC3_SetConfig+0xae>
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	4a1a      	ldr	r2, [pc, #104]	@ (8005ef0 <TIM_OC3_SetConfig+0x104>)
 8005e86:	4293      	cmp	r3, r2
 8005e88:	d007      	beq.n	8005e9a <TIM_OC3_SetConfig+0xae>
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	4a19      	ldr	r2, [pc, #100]	@ (8005ef4 <TIM_OC3_SetConfig+0x108>)
 8005e8e:	4293      	cmp	r3, r2
 8005e90:	d003      	beq.n	8005e9a <TIM_OC3_SetConfig+0xae>
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	4a18      	ldr	r2, [pc, #96]	@ (8005ef8 <TIM_OC3_SetConfig+0x10c>)
 8005e96:	4293      	cmp	r3, r2
 8005e98:	d113      	bne.n	8005ec2 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005e9a:	693b      	ldr	r3, [r7, #16]
 8005e9c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005ea0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005ea2:	693b      	ldr	r3, [r7, #16]
 8005ea4:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005ea8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005eaa:	683b      	ldr	r3, [r7, #0]
 8005eac:	695b      	ldr	r3, [r3, #20]
 8005eae:	011b      	lsls	r3, r3, #4
 8005eb0:	693a      	ldr	r2, [r7, #16]
 8005eb2:	4313      	orrs	r3, r2
 8005eb4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005eb6:	683b      	ldr	r3, [r7, #0]
 8005eb8:	699b      	ldr	r3, [r3, #24]
 8005eba:	011b      	lsls	r3, r3, #4
 8005ebc:	693a      	ldr	r2, [r7, #16]
 8005ebe:	4313      	orrs	r3, r2
 8005ec0:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	693a      	ldr	r2, [r7, #16]
 8005ec6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	68fa      	ldr	r2, [r7, #12]
 8005ecc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005ece:	683b      	ldr	r3, [r7, #0]
 8005ed0:	685a      	ldr	r2, [r3, #4]
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	697a      	ldr	r2, [r7, #20]
 8005eda:	621a      	str	r2, [r3, #32]
}
 8005edc:	bf00      	nop
 8005ede:	371c      	adds	r7, #28
 8005ee0:	46bd      	mov	sp, r7
 8005ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ee6:	4770      	bx	lr
 8005ee8:	40012c00 	.word	0x40012c00
 8005eec:	40013400 	.word	0x40013400
 8005ef0:	40014000 	.word	0x40014000
 8005ef4:	40014400 	.word	0x40014400
 8005ef8:	40014800 	.word	0x40014800

08005efc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005efc:	b480      	push	{r7}
 8005efe:	b087      	sub	sp, #28
 8005f00:	af00      	add	r7, sp, #0
 8005f02:	6078      	str	r0, [r7, #4]
 8005f04:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	6a1b      	ldr	r3, [r3, #32]
 8005f0a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	6a1b      	ldr	r3, [r3, #32]
 8005f10:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	685b      	ldr	r3, [r3, #4]
 8005f1c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	69db      	ldr	r3, [r3, #28]
 8005f22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005f2a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005f2e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005f36:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005f38:	683b      	ldr	r3, [r7, #0]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	021b      	lsls	r3, r3, #8
 8005f3e:	68fa      	ldr	r2, [r7, #12]
 8005f40:	4313      	orrs	r3, r2
 8005f42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005f44:	693b      	ldr	r3, [r7, #16]
 8005f46:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005f4a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005f4c:	683b      	ldr	r3, [r7, #0]
 8005f4e:	689b      	ldr	r3, [r3, #8]
 8005f50:	031b      	lsls	r3, r3, #12
 8005f52:	693a      	ldr	r2, [r7, #16]
 8005f54:	4313      	orrs	r3, r2
 8005f56:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	4a18      	ldr	r2, [pc, #96]	@ (8005fbc <TIM_OC4_SetConfig+0xc0>)
 8005f5c:	4293      	cmp	r3, r2
 8005f5e:	d00f      	beq.n	8005f80 <TIM_OC4_SetConfig+0x84>
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	4a17      	ldr	r2, [pc, #92]	@ (8005fc0 <TIM_OC4_SetConfig+0xc4>)
 8005f64:	4293      	cmp	r3, r2
 8005f66:	d00b      	beq.n	8005f80 <TIM_OC4_SetConfig+0x84>
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	4a16      	ldr	r2, [pc, #88]	@ (8005fc4 <TIM_OC4_SetConfig+0xc8>)
 8005f6c:	4293      	cmp	r3, r2
 8005f6e:	d007      	beq.n	8005f80 <TIM_OC4_SetConfig+0x84>
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	4a15      	ldr	r2, [pc, #84]	@ (8005fc8 <TIM_OC4_SetConfig+0xcc>)
 8005f74:	4293      	cmp	r3, r2
 8005f76:	d003      	beq.n	8005f80 <TIM_OC4_SetConfig+0x84>
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	4a14      	ldr	r2, [pc, #80]	@ (8005fcc <TIM_OC4_SetConfig+0xd0>)
 8005f7c:	4293      	cmp	r3, r2
 8005f7e:	d109      	bne.n	8005f94 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005f80:	697b      	ldr	r3, [r7, #20]
 8005f82:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005f86:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005f88:	683b      	ldr	r3, [r7, #0]
 8005f8a:	695b      	ldr	r3, [r3, #20]
 8005f8c:	019b      	lsls	r3, r3, #6
 8005f8e:	697a      	ldr	r2, [r7, #20]
 8005f90:	4313      	orrs	r3, r2
 8005f92:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	697a      	ldr	r2, [r7, #20]
 8005f98:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	68fa      	ldr	r2, [r7, #12]
 8005f9e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005fa0:	683b      	ldr	r3, [r7, #0]
 8005fa2:	685a      	ldr	r2, [r3, #4]
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	693a      	ldr	r2, [r7, #16]
 8005fac:	621a      	str	r2, [r3, #32]
}
 8005fae:	bf00      	nop
 8005fb0:	371c      	adds	r7, #28
 8005fb2:	46bd      	mov	sp, r7
 8005fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fb8:	4770      	bx	lr
 8005fba:	bf00      	nop
 8005fbc:	40012c00 	.word	0x40012c00
 8005fc0:	40013400 	.word	0x40013400
 8005fc4:	40014000 	.word	0x40014000
 8005fc8:	40014400 	.word	0x40014400
 8005fcc:	40014800 	.word	0x40014800

08005fd0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005fd0:	b480      	push	{r7}
 8005fd2:	b087      	sub	sp, #28
 8005fd4:	af00      	add	r7, sp, #0
 8005fd6:	6078      	str	r0, [r7, #4]
 8005fd8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	6a1b      	ldr	r3, [r3, #32]
 8005fde:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	6a1b      	ldr	r3, [r3, #32]
 8005fe4:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	685b      	ldr	r3, [r3, #4]
 8005ff0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005ff6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005ffe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006002:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006004:	683b      	ldr	r3, [r7, #0]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	68fa      	ldr	r2, [r7, #12]
 800600a:	4313      	orrs	r3, r2
 800600c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800600e:	693b      	ldr	r3, [r7, #16]
 8006010:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8006014:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8006016:	683b      	ldr	r3, [r7, #0]
 8006018:	689b      	ldr	r3, [r3, #8]
 800601a:	041b      	lsls	r3, r3, #16
 800601c:	693a      	ldr	r2, [r7, #16]
 800601e:	4313      	orrs	r3, r2
 8006020:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	4a17      	ldr	r2, [pc, #92]	@ (8006084 <TIM_OC5_SetConfig+0xb4>)
 8006026:	4293      	cmp	r3, r2
 8006028:	d00f      	beq.n	800604a <TIM_OC5_SetConfig+0x7a>
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	4a16      	ldr	r2, [pc, #88]	@ (8006088 <TIM_OC5_SetConfig+0xb8>)
 800602e:	4293      	cmp	r3, r2
 8006030:	d00b      	beq.n	800604a <TIM_OC5_SetConfig+0x7a>
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	4a15      	ldr	r2, [pc, #84]	@ (800608c <TIM_OC5_SetConfig+0xbc>)
 8006036:	4293      	cmp	r3, r2
 8006038:	d007      	beq.n	800604a <TIM_OC5_SetConfig+0x7a>
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	4a14      	ldr	r2, [pc, #80]	@ (8006090 <TIM_OC5_SetConfig+0xc0>)
 800603e:	4293      	cmp	r3, r2
 8006040:	d003      	beq.n	800604a <TIM_OC5_SetConfig+0x7a>
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	4a13      	ldr	r2, [pc, #76]	@ (8006094 <TIM_OC5_SetConfig+0xc4>)
 8006046:	4293      	cmp	r3, r2
 8006048:	d109      	bne.n	800605e <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800604a:	697b      	ldr	r3, [r7, #20]
 800604c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006050:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8006052:	683b      	ldr	r3, [r7, #0]
 8006054:	695b      	ldr	r3, [r3, #20]
 8006056:	021b      	lsls	r3, r3, #8
 8006058:	697a      	ldr	r2, [r7, #20]
 800605a:	4313      	orrs	r3, r2
 800605c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	697a      	ldr	r2, [r7, #20]
 8006062:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	68fa      	ldr	r2, [r7, #12]
 8006068:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800606a:	683b      	ldr	r3, [r7, #0]
 800606c:	685a      	ldr	r2, [r3, #4]
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	693a      	ldr	r2, [r7, #16]
 8006076:	621a      	str	r2, [r3, #32]
}
 8006078:	bf00      	nop
 800607a:	371c      	adds	r7, #28
 800607c:	46bd      	mov	sp, r7
 800607e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006082:	4770      	bx	lr
 8006084:	40012c00 	.word	0x40012c00
 8006088:	40013400 	.word	0x40013400
 800608c:	40014000 	.word	0x40014000
 8006090:	40014400 	.word	0x40014400
 8006094:	40014800 	.word	0x40014800

08006098 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006098:	b480      	push	{r7}
 800609a:	b087      	sub	sp, #28
 800609c:	af00      	add	r7, sp, #0
 800609e:	6078      	str	r0, [r7, #4]
 80060a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	6a1b      	ldr	r3, [r3, #32]
 80060a6:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	6a1b      	ldr	r3, [r3, #32]
 80060ac:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	685b      	ldr	r3, [r3, #4]
 80060b8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80060be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80060c6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80060ca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80060cc:	683b      	ldr	r3, [r7, #0]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	021b      	lsls	r3, r3, #8
 80060d2:	68fa      	ldr	r2, [r7, #12]
 80060d4:	4313      	orrs	r3, r2
 80060d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80060d8:	693b      	ldr	r3, [r7, #16]
 80060da:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80060de:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80060e0:	683b      	ldr	r3, [r7, #0]
 80060e2:	689b      	ldr	r3, [r3, #8]
 80060e4:	051b      	lsls	r3, r3, #20
 80060e6:	693a      	ldr	r2, [r7, #16]
 80060e8:	4313      	orrs	r3, r2
 80060ea:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	4a18      	ldr	r2, [pc, #96]	@ (8006150 <TIM_OC6_SetConfig+0xb8>)
 80060f0:	4293      	cmp	r3, r2
 80060f2:	d00f      	beq.n	8006114 <TIM_OC6_SetConfig+0x7c>
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	4a17      	ldr	r2, [pc, #92]	@ (8006154 <TIM_OC6_SetConfig+0xbc>)
 80060f8:	4293      	cmp	r3, r2
 80060fa:	d00b      	beq.n	8006114 <TIM_OC6_SetConfig+0x7c>
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	4a16      	ldr	r2, [pc, #88]	@ (8006158 <TIM_OC6_SetConfig+0xc0>)
 8006100:	4293      	cmp	r3, r2
 8006102:	d007      	beq.n	8006114 <TIM_OC6_SetConfig+0x7c>
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	4a15      	ldr	r2, [pc, #84]	@ (800615c <TIM_OC6_SetConfig+0xc4>)
 8006108:	4293      	cmp	r3, r2
 800610a:	d003      	beq.n	8006114 <TIM_OC6_SetConfig+0x7c>
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	4a14      	ldr	r2, [pc, #80]	@ (8006160 <TIM_OC6_SetConfig+0xc8>)
 8006110:	4293      	cmp	r3, r2
 8006112:	d109      	bne.n	8006128 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8006114:	697b      	ldr	r3, [r7, #20]
 8006116:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800611a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800611c:	683b      	ldr	r3, [r7, #0]
 800611e:	695b      	ldr	r3, [r3, #20]
 8006120:	029b      	lsls	r3, r3, #10
 8006122:	697a      	ldr	r2, [r7, #20]
 8006124:	4313      	orrs	r3, r2
 8006126:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	697a      	ldr	r2, [r7, #20]
 800612c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	68fa      	ldr	r2, [r7, #12]
 8006132:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8006134:	683b      	ldr	r3, [r7, #0]
 8006136:	685a      	ldr	r2, [r3, #4]
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	693a      	ldr	r2, [r7, #16]
 8006140:	621a      	str	r2, [r3, #32]
}
 8006142:	bf00      	nop
 8006144:	371c      	adds	r7, #28
 8006146:	46bd      	mov	sp, r7
 8006148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800614c:	4770      	bx	lr
 800614e:	bf00      	nop
 8006150:	40012c00 	.word	0x40012c00
 8006154:	40013400 	.word	0x40013400
 8006158:	40014000 	.word	0x40014000
 800615c:	40014400 	.word	0x40014400
 8006160:	40014800 	.word	0x40014800

08006164 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8006164:	b480      	push	{r7}
 8006166:	b087      	sub	sp, #28
 8006168:	af00      	add	r7, sp, #0
 800616a:	60f8      	str	r0, [r7, #12]
 800616c:	60b9      	str	r1, [r7, #8]
 800616e:	607a      	str	r2, [r7, #4]
 8006170:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	6a1b      	ldr	r3, [r3, #32]
 8006176:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	6a1b      	ldr	r3, [r3, #32]
 800617c:	f023 0201 	bic.w	r2, r3, #1
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	699b      	ldr	r3, [r3, #24]
 8006188:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	4a24      	ldr	r2, [pc, #144]	@ (8006220 <TIM_TI1_SetConfig+0xbc>)
 800618e:	4293      	cmp	r3, r2
 8006190:	d013      	beq.n	80061ba <TIM_TI1_SetConfig+0x56>
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006198:	d00f      	beq.n	80061ba <TIM_TI1_SetConfig+0x56>
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	4a21      	ldr	r2, [pc, #132]	@ (8006224 <TIM_TI1_SetConfig+0xc0>)
 800619e:	4293      	cmp	r3, r2
 80061a0:	d00b      	beq.n	80061ba <TIM_TI1_SetConfig+0x56>
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	4a20      	ldr	r2, [pc, #128]	@ (8006228 <TIM_TI1_SetConfig+0xc4>)
 80061a6:	4293      	cmp	r3, r2
 80061a8:	d007      	beq.n	80061ba <TIM_TI1_SetConfig+0x56>
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	4a1f      	ldr	r2, [pc, #124]	@ (800622c <TIM_TI1_SetConfig+0xc8>)
 80061ae:	4293      	cmp	r3, r2
 80061b0:	d003      	beq.n	80061ba <TIM_TI1_SetConfig+0x56>
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	4a1e      	ldr	r2, [pc, #120]	@ (8006230 <TIM_TI1_SetConfig+0xcc>)
 80061b6:	4293      	cmp	r3, r2
 80061b8:	d101      	bne.n	80061be <TIM_TI1_SetConfig+0x5a>
 80061ba:	2301      	movs	r3, #1
 80061bc:	e000      	b.n	80061c0 <TIM_TI1_SetConfig+0x5c>
 80061be:	2300      	movs	r3, #0
 80061c0:	2b00      	cmp	r3, #0
 80061c2:	d008      	beq.n	80061d6 <TIM_TI1_SetConfig+0x72>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 80061c4:	697b      	ldr	r3, [r7, #20]
 80061c6:	f023 0303 	bic.w	r3, r3, #3
 80061ca:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 80061cc:	697a      	ldr	r2, [r7, #20]
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	4313      	orrs	r3, r2
 80061d2:	617b      	str	r3, [r7, #20]
 80061d4:	e003      	b.n	80061de <TIM_TI1_SetConfig+0x7a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 80061d6:	697b      	ldr	r3, [r7, #20]
 80061d8:	f043 0301 	orr.w	r3, r3, #1
 80061dc:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80061de:	697b      	ldr	r3, [r7, #20]
 80061e0:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80061e4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80061e6:	683b      	ldr	r3, [r7, #0]
 80061e8:	011b      	lsls	r3, r3, #4
 80061ea:	b2db      	uxtb	r3, r3
 80061ec:	697a      	ldr	r2, [r7, #20]
 80061ee:	4313      	orrs	r3, r2
 80061f0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80061f2:	693b      	ldr	r3, [r7, #16]
 80061f4:	f023 030a 	bic.w	r3, r3, #10
 80061f8:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80061fa:	68bb      	ldr	r3, [r7, #8]
 80061fc:	f003 030a 	and.w	r3, r3, #10
 8006200:	693a      	ldr	r2, [r7, #16]
 8006202:	4313      	orrs	r3, r2
 8006204:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	697a      	ldr	r2, [r7, #20]
 800620a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	693a      	ldr	r2, [r7, #16]
 8006210:	621a      	str	r2, [r3, #32]
}
 8006212:	bf00      	nop
 8006214:	371c      	adds	r7, #28
 8006216:	46bd      	mov	sp, r7
 8006218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800621c:	4770      	bx	lr
 800621e:	bf00      	nop
 8006220:	40012c00 	.word	0x40012c00
 8006224:	40000400 	.word	0x40000400
 8006228:	40000800 	.word	0x40000800
 800622c:	40013400 	.word	0x40013400
 8006230:	40014000 	.word	0x40014000

08006234 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006234:	b480      	push	{r7}
 8006236:	b087      	sub	sp, #28
 8006238:	af00      	add	r7, sp, #0
 800623a:	60f8      	str	r0, [r7, #12]
 800623c:	60b9      	str	r1, [r7, #8]
 800623e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	6a1b      	ldr	r3, [r3, #32]
 8006244:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	6a1b      	ldr	r3, [r3, #32]
 800624a:	f023 0201 	bic.w	r2, r3, #1
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	699b      	ldr	r3, [r3, #24]
 8006256:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006258:	693b      	ldr	r3, [r7, #16]
 800625a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800625e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	011b      	lsls	r3, r3, #4
 8006264:	693a      	ldr	r2, [r7, #16]
 8006266:	4313      	orrs	r3, r2
 8006268:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800626a:	697b      	ldr	r3, [r7, #20]
 800626c:	f023 030a 	bic.w	r3, r3, #10
 8006270:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006272:	697a      	ldr	r2, [r7, #20]
 8006274:	68bb      	ldr	r3, [r7, #8]
 8006276:	4313      	orrs	r3, r2
 8006278:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	693a      	ldr	r2, [r7, #16]
 800627e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	697a      	ldr	r2, [r7, #20]
 8006284:	621a      	str	r2, [r3, #32]
}
 8006286:	bf00      	nop
 8006288:	371c      	adds	r7, #28
 800628a:	46bd      	mov	sp, r7
 800628c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006290:	4770      	bx	lr

08006292 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006292:	b480      	push	{r7}
 8006294:	b087      	sub	sp, #28
 8006296:	af00      	add	r7, sp, #0
 8006298:	60f8      	str	r0, [r7, #12]
 800629a:	60b9      	str	r1, [r7, #8]
 800629c:	607a      	str	r2, [r7, #4]
 800629e:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	6a1b      	ldr	r3, [r3, #32]
 80062a4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	6a1b      	ldr	r3, [r3, #32]
 80062aa:	f023 0210 	bic.w	r2, r3, #16
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	699b      	ldr	r3, [r3, #24]
 80062b6:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 80062b8:	693b      	ldr	r3, [r7, #16]
 80062ba:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80062be:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	021b      	lsls	r3, r3, #8
 80062c4:	693a      	ldr	r2, [r7, #16]
 80062c6:	4313      	orrs	r3, r2
 80062c8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80062ca:	693b      	ldr	r3, [r7, #16]
 80062cc:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80062d0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 80062d2:	683b      	ldr	r3, [r7, #0]
 80062d4:	031b      	lsls	r3, r3, #12
 80062d6:	b29b      	uxth	r3, r3
 80062d8:	693a      	ldr	r2, [r7, #16]
 80062da:	4313      	orrs	r3, r2
 80062dc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80062de:	697b      	ldr	r3, [r7, #20]
 80062e0:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80062e4:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80062e6:	68bb      	ldr	r3, [r7, #8]
 80062e8:	011b      	lsls	r3, r3, #4
 80062ea:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 80062ee:	697a      	ldr	r2, [r7, #20]
 80062f0:	4313      	orrs	r3, r2
 80062f2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	693a      	ldr	r2, [r7, #16]
 80062f8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	697a      	ldr	r2, [r7, #20]
 80062fe:	621a      	str	r2, [r3, #32]
}
 8006300:	bf00      	nop
 8006302:	371c      	adds	r7, #28
 8006304:	46bd      	mov	sp, r7
 8006306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800630a:	4770      	bx	lr

0800630c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800630c:	b480      	push	{r7}
 800630e:	b087      	sub	sp, #28
 8006310:	af00      	add	r7, sp, #0
 8006312:	60f8      	str	r0, [r7, #12]
 8006314:	60b9      	str	r1, [r7, #8]
 8006316:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	6a1b      	ldr	r3, [r3, #32]
 800631c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	6a1b      	ldr	r3, [r3, #32]
 8006322:	f023 0210 	bic.w	r2, r3, #16
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	699b      	ldr	r3, [r3, #24]
 800632e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006330:	693b      	ldr	r3, [r7, #16]
 8006332:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006336:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	031b      	lsls	r3, r3, #12
 800633c:	693a      	ldr	r2, [r7, #16]
 800633e:	4313      	orrs	r3, r2
 8006340:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006342:	697b      	ldr	r3, [r7, #20]
 8006344:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8006348:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800634a:	68bb      	ldr	r3, [r7, #8]
 800634c:	011b      	lsls	r3, r3, #4
 800634e:	697a      	ldr	r2, [r7, #20]
 8006350:	4313      	orrs	r3, r2
 8006352:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	693a      	ldr	r2, [r7, #16]
 8006358:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	697a      	ldr	r2, [r7, #20]
 800635e:	621a      	str	r2, [r3, #32]
}
 8006360:	bf00      	nop
 8006362:	371c      	adds	r7, #28
 8006364:	46bd      	mov	sp, r7
 8006366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800636a:	4770      	bx	lr

0800636c <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800636c:	b480      	push	{r7}
 800636e:	b087      	sub	sp, #28
 8006370:	af00      	add	r7, sp, #0
 8006372:	60f8      	str	r0, [r7, #12]
 8006374:	60b9      	str	r1, [r7, #8]
 8006376:	607a      	str	r2, [r7, #4]
 8006378:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	6a1b      	ldr	r3, [r3, #32]
 800637e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	6a1b      	ldr	r3, [r3, #32]
 8006384:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	69db      	ldr	r3, [r3, #28]
 8006390:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8006392:	693b      	ldr	r3, [r7, #16]
 8006394:	f023 0303 	bic.w	r3, r3, #3
 8006398:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 800639a:	693a      	ldr	r2, [r7, #16]
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	4313      	orrs	r3, r2
 80063a0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 80063a2:	693b      	ldr	r3, [r7, #16]
 80063a4:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80063a8:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 80063aa:	683b      	ldr	r3, [r7, #0]
 80063ac:	011b      	lsls	r3, r3, #4
 80063ae:	b2db      	uxtb	r3, r3
 80063b0:	693a      	ldr	r2, [r7, #16]
 80063b2:	4313      	orrs	r3, r2
 80063b4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 80063b6:	697b      	ldr	r3, [r7, #20]
 80063b8:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 80063bc:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 80063be:	68bb      	ldr	r3, [r7, #8]
 80063c0:	021b      	lsls	r3, r3, #8
 80063c2:	f403 6320 	and.w	r3, r3, #2560	@ 0xa00
 80063c6:	697a      	ldr	r2, [r7, #20]
 80063c8:	4313      	orrs	r3, r2
 80063ca:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	693a      	ldr	r2, [r7, #16]
 80063d0:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	697a      	ldr	r2, [r7, #20]
 80063d6:	621a      	str	r2, [r3, #32]
}
 80063d8:	bf00      	nop
 80063da:	371c      	adds	r7, #28
 80063dc:	46bd      	mov	sp, r7
 80063de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063e2:	4770      	bx	lr

080063e4 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80063e4:	b480      	push	{r7}
 80063e6:	b087      	sub	sp, #28
 80063e8:	af00      	add	r7, sp, #0
 80063ea:	60f8      	str	r0, [r7, #12]
 80063ec:	60b9      	str	r1, [r7, #8]
 80063ee:	607a      	str	r2, [r7, #4]
 80063f0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	6a1b      	ldr	r3, [r3, #32]
 80063f6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	6a1b      	ldr	r3, [r3, #32]
 80063fc:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	69db      	ldr	r3, [r3, #28]
 8006408:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800640a:	693b      	ldr	r3, [r7, #16]
 800640c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006410:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	021b      	lsls	r3, r3, #8
 8006416:	693a      	ldr	r2, [r7, #16]
 8006418:	4313      	orrs	r3, r2
 800641a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 800641c:	693b      	ldr	r3, [r7, #16]
 800641e:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006422:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8006424:	683b      	ldr	r3, [r7, #0]
 8006426:	031b      	lsls	r3, r3, #12
 8006428:	b29b      	uxth	r3, r3
 800642a:	693a      	ldr	r2, [r7, #16]
 800642c:	4313      	orrs	r3, r2
 800642e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8006430:	697b      	ldr	r3, [r7, #20]
 8006432:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 8006436:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8006438:	68bb      	ldr	r3, [r7, #8]
 800643a:	031b      	lsls	r3, r3, #12
 800643c:	f403 4320 	and.w	r3, r3, #40960	@ 0xa000
 8006440:	697a      	ldr	r2, [r7, #20]
 8006442:	4313      	orrs	r3, r2
 8006444:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	693a      	ldr	r2, [r7, #16]
 800644a:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	697a      	ldr	r2, [r7, #20]
 8006450:	621a      	str	r2, [r3, #32]
}
 8006452:	bf00      	nop
 8006454:	371c      	adds	r7, #28
 8006456:	46bd      	mov	sp, r7
 8006458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800645c:	4770      	bx	lr

0800645e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800645e:	b480      	push	{r7}
 8006460:	b085      	sub	sp, #20
 8006462:	af00      	add	r7, sp, #0
 8006464:	6078      	str	r0, [r7, #4]
 8006466:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	689b      	ldr	r3, [r3, #8]
 800646c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006474:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006476:	683a      	ldr	r2, [r7, #0]
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	4313      	orrs	r3, r2
 800647c:	f043 0307 	orr.w	r3, r3, #7
 8006480:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	68fa      	ldr	r2, [r7, #12]
 8006486:	609a      	str	r2, [r3, #8]
}
 8006488:	bf00      	nop
 800648a:	3714      	adds	r7, #20
 800648c:	46bd      	mov	sp, r7
 800648e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006492:	4770      	bx	lr

08006494 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006494:	b480      	push	{r7}
 8006496:	b087      	sub	sp, #28
 8006498:	af00      	add	r7, sp, #0
 800649a:	60f8      	str	r0, [r7, #12]
 800649c:	60b9      	str	r1, [r7, #8]
 800649e:	607a      	str	r2, [r7, #4]
 80064a0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	689b      	ldr	r3, [r3, #8]
 80064a6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80064a8:	697b      	ldr	r3, [r7, #20]
 80064aa:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80064ae:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80064b0:	683b      	ldr	r3, [r7, #0]
 80064b2:	021a      	lsls	r2, r3, #8
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	431a      	orrs	r2, r3
 80064b8:	68bb      	ldr	r3, [r7, #8]
 80064ba:	4313      	orrs	r3, r2
 80064bc:	697a      	ldr	r2, [r7, #20]
 80064be:	4313      	orrs	r3, r2
 80064c0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	697a      	ldr	r2, [r7, #20]
 80064c6:	609a      	str	r2, [r3, #8]
}
 80064c8:	bf00      	nop
 80064ca:	371c      	adds	r7, #28
 80064cc:	46bd      	mov	sp, r7
 80064ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064d2:	4770      	bx	lr

080064d4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80064d4:	b480      	push	{r7}
 80064d6:	b087      	sub	sp, #28
 80064d8:	af00      	add	r7, sp, #0
 80064da:	60f8      	str	r0, [r7, #12]
 80064dc:	60b9      	str	r1, [r7, #8]
 80064de:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80064e0:	68bb      	ldr	r3, [r7, #8]
 80064e2:	f003 031f 	and.w	r3, r3, #31
 80064e6:	2201      	movs	r2, #1
 80064e8:	fa02 f303 	lsl.w	r3, r2, r3
 80064ec:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	6a1a      	ldr	r2, [r3, #32]
 80064f2:	697b      	ldr	r3, [r7, #20]
 80064f4:	43db      	mvns	r3, r3
 80064f6:	401a      	ands	r2, r3
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	6a1a      	ldr	r2, [r3, #32]
 8006500:	68bb      	ldr	r3, [r7, #8]
 8006502:	f003 031f 	and.w	r3, r3, #31
 8006506:	6879      	ldr	r1, [r7, #4]
 8006508:	fa01 f303 	lsl.w	r3, r1, r3
 800650c:	431a      	orrs	r2, r3
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	621a      	str	r2, [r3, #32]
}
 8006512:	bf00      	nop
 8006514:	371c      	adds	r7, #28
 8006516:	46bd      	mov	sp, r7
 8006518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800651c:	4770      	bx	lr
	...

08006520 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006520:	b480      	push	{r7}
 8006522:	b085      	sub	sp, #20
 8006524:	af00      	add	r7, sp, #0
 8006526:	6078      	str	r0, [r7, #4]
 8006528:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006530:	2b01      	cmp	r3, #1
 8006532:	d101      	bne.n	8006538 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006534:	2302      	movs	r3, #2
 8006536:	e063      	b.n	8006600 <HAL_TIMEx_MasterConfigSynchronization+0xe0>
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	2201      	movs	r2, #1
 800653c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	2202      	movs	r2, #2
 8006544:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	685b      	ldr	r3, [r3, #4]
 800654e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	689b      	ldr	r3, [r3, #8]
 8006556:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	4a2b      	ldr	r2, [pc, #172]	@ (800660c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800655e:	4293      	cmp	r3, r2
 8006560:	d004      	beq.n	800656c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	4a2a      	ldr	r2, [pc, #168]	@ (8006610 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006568:	4293      	cmp	r3, r2
 800656a:	d108      	bne.n	800657e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8006572:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006574:	683b      	ldr	r3, [r7, #0]
 8006576:	685b      	ldr	r3, [r3, #4]
 8006578:	68fa      	ldr	r2, [r7, #12]
 800657a:	4313      	orrs	r3, r2
 800657c:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006584:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006586:	683b      	ldr	r3, [r7, #0]
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	68fa      	ldr	r2, [r7, #12]
 800658c:	4313      	orrs	r3, r2
 800658e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	68fa      	ldr	r2, [r7, #12]
 8006596:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	4a1b      	ldr	r2, [pc, #108]	@ (800660c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800659e:	4293      	cmp	r3, r2
 80065a0:	d018      	beq.n	80065d4 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80065aa:	d013      	beq.n	80065d4 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	4a18      	ldr	r2, [pc, #96]	@ (8006614 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80065b2:	4293      	cmp	r3, r2
 80065b4:	d00e      	beq.n	80065d4 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	4a17      	ldr	r2, [pc, #92]	@ (8006618 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80065bc:	4293      	cmp	r3, r2
 80065be:	d009      	beq.n	80065d4 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	4a12      	ldr	r2, [pc, #72]	@ (8006610 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80065c6:	4293      	cmp	r3, r2
 80065c8:	d004      	beq.n	80065d4 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	4a13      	ldr	r2, [pc, #76]	@ (800661c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80065d0:	4293      	cmp	r3, r2
 80065d2:	d10c      	bne.n	80065ee <HAL_TIMEx_MasterConfigSynchronization+0xce>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80065d4:	68bb      	ldr	r3, [r7, #8]
 80065d6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80065da:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80065dc:	683b      	ldr	r3, [r7, #0]
 80065de:	689b      	ldr	r3, [r3, #8]
 80065e0:	68ba      	ldr	r2, [r7, #8]
 80065e2:	4313      	orrs	r3, r2
 80065e4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	68ba      	ldr	r2, [r7, #8]
 80065ec:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	2201      	movs	r2, #1
 80065f2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	2200      	movs	r2, #0
 80065fa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80065fe:	2300      	movs	r3, #0
}
 8006600:	4618      	mov	r0, r3
 8006602:	3714      	adds	r7, #20
 8006604:	46bd      	mov	sp, r7
 8006606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800660a:	4770      	bx	lr
 800660c:	40012c00 	.word	0x40012c00
 8006610:	40013400 	.word	0x40013400
 8006614:	40000400 	.word	0x40000400
 8006618:	40000800 	.word	0x40000800
 800661c:	40014000 	.word	0x40014000

08006620 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006620:	b480      	push	{r7}
 8006622:	b083      	sub	sp, #12
 8006624:	af00      	add	r7, sp, #0
 8006626:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006628:	bf00      	nop
 800662a:	370c      	adds	r7, #12
 800662c:	46bd      	mov	sp, r7
 800662e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006632:	4770      	bx	lr

08006634 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006634:	b480      	push	{r7}
 8006636:	b083      	sub	sp, #12
 8006638:	af00      	add	r7, sp, #0
 800663a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800663c:	bf00      	nop
 800663e:	370c      	adds	r7, #12
 8006640:	46bd      	mov	sp, r7
 8006642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006646:	4770      	bx	lr

08006648 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006648:	b480      	push	{r7}
 800664a:	b083      	sub	sp, #12
 800664c:	af00      	add	r7, sp, #0
 800664e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006650:	bf00      	nop
 8006652:	370c      	adds	r7, #12
 8006654:	46bd      	mov	sp, r7
 8006656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800665a:	4770      	bx	lr

0800665c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 800665c:	b480      	push	{r7}
 800665e:	b085      	sub	sp, #20
 8006660:	af00      	add	r7, sp, #0
 8006662:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8006664:	f44f 433f 	mov.w	r3, #48896	@ 0xbf00
 8006668:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8006670:	b29a      	uxth	r2, r3
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	b29b      	uxth	r3, r3
 8006676:	43db      	mvns	r3, r3
 8006678:	b29b      	uxth	r3, r3
 800667a:	4013      	ands	r3, r2
 800667c:	b29a      	uxth	r2, r3
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8006684:	2300      	movs	r3, #0
}
 8006686:	4618      	mov	r0, r3
 8006688:	3714      	adds	r7, #20
 800668a:	46bd      	mov	sp, r7
 800668c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006690:	4770      	bx	lr

08006692 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8006692:	b480      	push	{r7}
 8006694:	b085      	sub	sp, #20
 8006696:	af00      	add	r7, sp, #0
 8006698:	60f8      	str	r0, [r7, #12]
 800669a:	1d3b      	adds	r3, r7, #4
 800669c:	e883 0006 	stmia.w	r3, {r1, r2}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	2201      	movs	r2, #1
 80066a4:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	2200      	movs	r2, #0
 80066ac:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	2200      	movs	r2, #0
 80066b4:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	2200      	movs	r2, #0
 80066bc:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 80066c0:	2300      	movs	r3, #0
}
 80066c2:	4618      	mov	r0, r3
 80066c4:	3714      	adds	r7, #20
 80066c6:	46bd      	mov	sp, r7
 80066c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066cc:	4770      	bx	lr

080066ce <memset>:
 80066ce:	4402      	add	r2, r0
 80066d0:	4603      	mov	r3, r0
 80066d2:	4293      	cmp	r3, r2
 80066d4:	d100      	bne.n	80066d8 <memset+0xa>
 80066d6:	4770      	bx	lr
 80066d8:	f803 1b01 	strb.w	r1, [r3], #1
 80066dc:	e7f9      	b.n	80066d2 <memset+0x4>
	...

080066e0 <__libc_init_array>:
 80066e0:	b570      	push	{r4, r5, r6, lr}
 80066e2:	4d0d      	ldr	r5, [pc, #52]	@ (8006718 <__libc_init_array+0x38>)
 80066e4:	4c0d      	ldr	r4, [pc, #52]	@ (800671c <__libc_init_array+0x3c>)
 80066e6:	1b64      	subs	r4, r4, r5
 80066e8:	10a4      	asrs	r4, r4, #2
 80066ea:	2600      	movs	r6, #0
 80066ec:	42a6      	cmp	r6, r4
 80066ee:	d109      	bne.n	8006704 <__libc_init_array+0x24>
 80066f0:	4d0b      	ldr	r5, [pc, #44]	@ (8006720 <__libc_init_array+0x40>)
 80066f2:	4c0c      	ldr	r4, [pc, #48]	@ (8006724 <__libc_init_array+0x44>)
 80066f4:	f000 f818 	bl	8006728 <_init>
 80066f8:	1b64      	subs	r4, r4, r5
 80066fa:	10a4      	asrs	r4, r4, #2
 80066fc:	2600      	movs	r6, #0
 80066fe:	42a6      	cmp	r6, r4
 8006700:	d105      	bne.n	800670e <__libc_init_array+0x2e>
 8006702:	bd70      	pop	{r4, r5, r6, pc}
 8006704:	f855 3b04 	ldr.w	r3, [r5], #4
 8006708:	4798      	blx	r3
 800670a:	3601      	adds	r6, #1
 800670c:	e7ee      	b.n	80066ec <__libc_init_array+0xc>
 800670e:	f855 3b04 	ldr.w	r3, [r5], #4
 8006712:	4798      	blx	r3
 8006714:	3601      	adds	r6, #1
 8006716:	e7f2      	b.n	80066fe <__libc_init_array+0x1e>
 8006718:	080067e8 	.word	0x080067e8
 800671c:	080067e8 	.word	0x080067e8
 8006720:	080067e8 	.word	0x080067e8
 8006724:	080067ec 	.word	0x080067ec

08006728 <_init>:
 8006728:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800672a:	bf00      	nop
 800672c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800672e:	bc08      	pop	{r3}
 8006730:	469e      	mov	lr, r3
 8006732:	4770      	bx	lr

08006734 <_fini>:
 8006734:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006736:	bf00      	nop
 8006738:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800673a:	bc08      	pop	{r3}
 800673c:	469e      	mov	lr, r3
 800673e:	4770      	bx	lr
