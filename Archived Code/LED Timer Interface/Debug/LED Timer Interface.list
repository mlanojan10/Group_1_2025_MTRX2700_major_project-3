
LED Timer Interface.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000ef8  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000084  08001098  08001098  00002098  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800111c  0800111c  00003054  2**0
                  CONTENTS
  4 .ARM          00000008  0800111c  0800111c  0000211c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08001124  08001124  00003054  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001124  08001124  00002124  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08001128  08001128  00002128  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000054  20000000  0800112c  00003000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00003054  2**0
                  CONTENTS
 10 .bss          00000168  20000054  20000054  00003054  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200001bc  200001bc  00003054  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00003054  2**0
                  CONTENTS, READONLY
 13 .debug_info   000011fe  00000000  00000000  00003084  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000005d0  00000000  00000000  00004282  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000100  00000000  00000000  00004858  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000000a4  00000000  00000000  00004958  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001556b  00000000  00000000  000049fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00001a95  00000000  00000000  00019f67  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000766b2  00000000  00000000  0001b9fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000920ae  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000075c  00000000  00000000  000920f4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006b  00000000  00000000  00092850  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000054 	.word	0x20000054
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08001080 	.word	0x08001080

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000058 	.word	0x20000058
 80001dc:	08001080 	.word	0x08001080

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <gpio_init>:
volatile uint8_t blink_state = 1;

// LED pins from PE15 to PE8 (countdown order)
const uint8_t led_pins[LED_COUNT] = {15, 14, 13, 12, 3, 10, 2, 8};

void gpio_init(void) {
 8000280:	b480      	push	{r7}
 8000282:	b083      	sub	sp, #12
 8000284:	af00      	add	r7, sp, #0
    RCC->AHBENR |= RCC_AHBENR_GPIOEEN;
 8000286:	4b1e      	ldr	r3, [pc, #120]	@ (8000300 <gpio_init+0x80>)
 8000288:	695b      	ldr	r3, [r3, #20]
 800028a:	4a1d      	ldr	r2, [pc, #116]	@ (8000300 <gpio_init+0x80>)
 800028c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000290:	6153      	str	r3, [r2, #20]

    for (int i = 0; i < LED_COUNT; ++i) {
 8000292:	2300      	movs	r3, #0
 8000294:	607b      	str	r3, [r7, #4]
 8000296:	e028      	b.n	80002ea <gpio_init+0x6a>
        uint8_t pin = led_pins[i];
 8000298:	4a1a      	ldr	r2, [pc, #104]	@ (8000304 <gpio_init+0x84>)
 800029a:	687b      	ldr	r3, [r7, #4]
 800029c:	4413      	add	r3, r2
 800029e:	781b      	ldrb	r3, [r3, #0]
 80002a0:	70fb      	strb	r3, [r7, #3]
        GPIOE->MODER &= ~(3 << (2 * pin));
 80002a2:	4b19      	ldr	r3, [pc, #100]	@ (8000308 <gpio_init+0x88>)
 80002a4:	681b      	ldr	r3, [r3, #0]
 80002a6:	78fa      	ldrb	r2, [r7, #3]
 80002a8:	0052      	lsls	r2, r2, #1
 80002aa:	2103      	movs	r1, #3
 80002ac:	fa01 f202 	lsl.w	r2, r1, r2
 80002b0:	43d2      	mvns	r2, r2
 80002b2:	4611      	mov	r1, r2
 80002b4:	4a14      	ldr	r2, [pc, #80]	@ (8000308 <gpio_init+0x88>)
 80002b6:	400b      	ands	r3, r1
 80002b8:	6013      	str	r3, [r2, #0]
        GPIOE->MODER |=  (1 << (2 * pin));
 80002ba:	4b13      	ldr	r3, [pc, #76]	@ (8000308 <gpio_init+0x88>)
 80002bc:	681b      	ldr	r3, [r3, #0]
 80002be:	78fa      	ldrb	r2, [r7, #3]
 80002c0:	0052      	lsls	r2, r2, #1
 80002c2:	2101      	movs	r1, #1
 80002c4:	fa01 f202 	lsl.w	r2, r1, r2
 80002c8:	4611      	mov	r1, r2
 80002ca:	4a0f      	ldr	r2, [pc, #60]	@ (8000308 <gpio_init+0x88>)
 80002cc:	430b      	orrs	r3, r1
 80002ce:	6013      	str	r3, [r2, #0]
        GPIOE->ODR    |= (1 << pin);  // Turn on
 80002d0:	4b0d      	ldr	r3, [pc, #52]	@ (8000308 <gpio_init+0x88>)
 80002d2:	695b      	ldr	r3, [r3, #20]
 80002d4:	78fa      	ldrb	r2, [r7, #3]
 80002d6:	2101      	movs	r1, #1
 80002d8:	fa01 f202 	lsl.w	r2, r1, r2
 80002dc:	4611      	mov	r1, r2
 80002de:	4a0a      	ldr	r2, [pc, #40]	@ (8000308 <gpio_init+0x88>)
 80002e0:	430b      	orrs	r3, r1
 80002e2:	6153      	str	r3, [r2, #20]
    for (int i = 0; i < LED_COUNT; ++i) {
 80002e4:	687b      	ldr	r3, [r7, #4]
 80002e6:	3301      	adds	r3, #1
 80002e8:	607b      	str	r3, [r7, #4]
 80002ea:	687b      	ldr	r3, [r7, #4]
 80002ec:	2b07      	cmp	r3, #7
 80002ee:	ddd3      	ble.n	8000298 <gpio_init+0x18>
    }
}
 80002f0:	bf00      	nop
 80002f2:	bf00      	nop
 80002f4:	370c      	adds	r7, #12
 80002f6:	46bd      	mov	sp, r7
 80002f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002fc:	4770      	bx	lr
 80002fe:	bf00      	nop
 8000300:	40021000 	.word	0x40021000
 8000304:	080010e0 	.word	0x080010e0
 8000308:	48001000 	.word	0x48001000

0800030c <update_LEDs>:

void update_LEDs(uint16_t seconds) {
 800030c:	b480      	push	{r7}
 800030e:	b085      	sub	sp, #20
 8000310:	af00      	add	r7, sp, #0
 8000312:	4603      	mov	r3, r0
 8000314:	80fb      	strh	r3, [r7, #6]
    uint8_t led_index = seconds / SECONDS_PER_LED;
 8000316:	88fb      	ldrh	r3, [r7, #6]
 8000318:	4a2a      	ldr	r2, [pc, #168]	@ (80003c4 <update_LEDs+0xb8>)
 800031a:	fba2 2303 	umull	r2, r3, r2, r3
 800031e:	095b      	lsrs	r3, r3, #5
 8000320:	b29b      	uxth	r3, r3
 8000322:	72fb      	strb	r3, [r7, #11]

    for (int i = 0; i < LED_COUNT; ++i) {
 8000324:	2300      	movs	r3, #0
 8000326:	60fb      	str	r3, [r7, #12]
 8000328:	e041      	b.n	80003ae <update_LEDs+0xa2>
        uint8_t pin = led_pins[i];
 800032a:	4a27      	ldr	r2, [pc, #156]	@ (80003c8 <update_LEDs+0xbc>)
 800032c:	68fb      	ldr	r3, [r7, #12]
 800032e:	4413      	add	r3, r2
 8000330:	781b      	ldrb	r3, [r3, #0]
 8000332:	72bb      	strb	r3, [r7, #10]

        if (i < led_index) {
 8000334:	7afb      	ldrb	r3, [r7, #11]
 8000336:	68fa      	ldr	r2, [r7, #12]
 8000338:	429a      	cmp	r2, r3
 800033a:	da0b      	bge.n	8000354 <update_LEDs+0x48>
            GPIOE->ODR &= ~(1 << pin);
 800033c:	4b23      	ldr	r3, [pc, #140]	@ (80003cc <update_LEDs+0xc0>)
 800033e:	695b      	ldr	r3, [r3, #20]
 8000340:	7aba      	ldrb	r2, [r7, #10]
 8000342:	2101      	movs	r1, #1
 8000344:	fa01 f202 	lsl.w	r2, r1, r2
 8000348:	43d2      	mvns	r2, r2
 800034a:	4611      	mov	r1, r2
 800034c:	4a1f      	ldr	r2, [pc, #124]	@ (80003cc <update_LEDs+0xc0>)
 800034e:	400b      	ands	r3, r1
 8000350:	6153      	str	r3, [r2, #20]
 8000352:	e029      	b.n	80003a8 <update_LEDs+0x9c>
        } else if (i > led_index) {
 8000354:	7afb      	ldrb	r3, [r7, #11]
 8000356:	68fa      	ldr	r2, [r7, #12]
 8000358:	429a      	cmp	r2, r3
 800035a:	dd0a      	ble.n	8000372 <update_LEDs+0x66>
            GPIOE->ODR |= (1 << pin);
 800035c:	4b1b      	ldr	r3, [pc, #108]	@ (80003cc <update_LEDs+0xc0>)
 800035e:	695b      	ldr	r3, [r3, #20]
 8000360:	7aba      	ldrb	r2, [r7, #10]
 8000362:	2101      	movs	r1, #1
 8000364:	fa01 f202 	lsl.w	r2, r1, r2
 8000368:	4611      	mov	r1, r2
 800036a:	4a18      	ldr	r2, [pc, #96]	@ (80003cc <update_LEDs+0xc0>)
 800036c:	430b      	orrs	r3, r1
 800036e:	6153      	str	r3, [r2, #20]
 8000370:	e01a      	b.n	80003a8 <update_LEDs+0x9c>
        } else {
            if (blink_state) GPIOE->ODR |= (1 << pin);
 8000372:	4b17      	ldr	r3, [pc, #92]	@ (80003d0 <update_LEDs+0xc4>)
 8000374:	781b      	ldrb	r3, [r3, #0]
 8000376:	b2db      	uxtb	r3, r3
 8000378:	2b00      	cmp	r3, #0
 800037a:	d00a      	beq.n	8000392 <update_LEDs+0x86>
 800037c:	4b13      	ldr	r3, [pc, #76]	@ (80003cc <update_LEDs+0xc0>)
 800037e:	695b      	ldr	r3, [r3, #20]
 8000380:	7aba      	ldrb	r2, [r7, #10]
 8000382:	2101      	movs	r1, #1
 8000384:	fa01 f202 	lsl.w	r2, r1, r2
 8000388:	4611      	mov	r1, r2
 800038a:	4a10      	ldr	r2, [pc, #64]	@ (80003cc <update_LEDs+0xc0>)
 800038c:	430b      	orrs	r3, r1
 800038e:	6153      	str	r3, [r2, #20]
 8000390:	e00a      	b.n	80003a8 <update_LEDs+0x9c>
            else GPIOE->ODR &= ~(1 << pin);
 8000392:	4b0e      	ldr	r3, [pc, #56]	@ (80003cc <update_LEDs+0xc0>)
 8000394:	695b      	ldr	r3, [r3, #20]
 8000396:	7aba      	ldrb	r2, [r7, #10]
 8000398:	2101      	movs	r1, #1
 800039a:	fa01 f202 	lsl.w	r2, r1, r2
 800039e:	43d2      	mvns	r2, r2
 80003a0:	4611      	mov	r1, r2
 80003a2:	4a0a      	ldr	r2, [pc, #40]	@ (80003cc <update_LEDs+0xc0>)
 80003a4:	400b      	ands	r3, r1
 80003a6:	6153      	str	r3, [r2, #20]
    for (int i = 0; i < LED_COUNT; ++i) {
 80003a8:	68fb      	ldr	r3, [r7, #12]
 80003aa:	3301      	adds	r3, #1
 80003ac:	60fb      	str	r3, [r7, #12]
 80003ae:	68fb      	ldr	r3, [r7, #12]
 80003b0:	2b07      	cmp	r3, #7
 80003b2:	ddba      	ble.n	800032a <update_LEDs+0x1e>
        }
    }
}
 80003b4:	bf00      	nop
 80003b6:	bf00      	nop
 80003b8:	3714      	adds	r7, #20
 80003ba:	46bd      	mov	sp, r7
 80003bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003c0:	4770      	bx	lr
 80003c2:	bf00      	nop
 80003c4:	88888889 	.word	0x88888889
 80003c8:	080010e0 	.word	0x080010e0
 80003cc:	48001000 	.word	0x48001000
 80003d0:	20000000 	.word	0x20000000

080003d4 <main>:
#include "uart.h"
#include "led.h"
#include "timer.h"

int main(void) {
 80003d4:	b580      	push	{r7, lr}
 80003d6:	af00      	add	r7, sp, #0
    gpio_init();
 80003d8:	f7ff ff52 	bl	8000280 <gpio_init>
    uart_init();
 80003dc:	f000 f8fc 	bl	80005d8 <uart_init>
    timer2_init();
 80003e0:	f000 f88e 	bl	8000500 <timer2_init>

    uart_send_string("\n--- 8-Minute Timer Started ---\n");
 80003e4:	4805      	ldr	r0, [pc, #20]	@ (80003fc <main+0x28>)
 80003e6:	f000 f947 	bl	8000678 <uart_send_string>
    uart_send_time(seconds_remaining);
 80003ea:	4b05      	ldr	r3, [pc, #20]	@ (8000400 <main+0x2c>)
 80003ec:	881b      	ldrh	r3, [r3, #0]
 80003ee:	b29b      	uxth	r3, r3
 80003f0:	4618      	mov	r0, r3
 80003f2:	f000 f957 	bl	80006a4 <uart_send_time>

    while (1) {
 80003f6:	bf00      	nop
 80003f8:	e7fd      	b.n	80003f6 <main+0x22>
 80003fa:	bf00      	nop
 80003fc:	08001098 	.word	0x08001098
 8000400:	20000002 	.word	0x20000002

08000404 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000404:	b580      	push	{r7, lr}
 8000406:	b086      	sub	sp, #24
 8000408:	af00      	add	r7, sp, #0
 800040a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800040c:	4a14      	ldr	r2, [pc, #80]	@ (8000460 <_sbrk+0x5c>)
 800040e:	4b15      	ldr	r3, [pc, #84]	@ (8000464 <_sbrk+0x60>)
 8000410:	1ad3      	subs	r3, r2, r3
 8000412:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000414:	697b      	ldr	r3, [r7, #20]
 8000416:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000418:	4b13      	ldr	r3, [pc, #76]	@ (8000468 <_sbrk+0x64>)
 800041a:	681b      	ldr	r3, [r3, #0]
 800041c:	2b00      	cmp	r3, #0
 800041e:	d102      	bne.n	8000426 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000420:	4b11      	ldr	r3, [pc, #68]	@ (8000468 <_sbrk+0x64>)
 8000422:	4a12      	ldr	r2, [pc, #72]	@ (800046c <_sbrk+0x68>)
 8000424:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000426:	4b10      	ldr	r3, [pc, #64]	@ (8000468 <_sbrk+0x64>)
 8000428:	681a      	ldr	r2, [r3, #0]
 800042a:	687b      	ldr	r3, [r7, #4]
 800042c:	4413      	add	r3, r2
 800042e:	693a      	ldr	r2, [r7, #16]
 8000430:	429a      	cmp	r2, r3
 8000432:	d207      	bcs.n	8000444 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000434:	f000 f9ac 	bl	8000790 <__errno>
 8000438:	4603      	mov	r3, r0
 800043a:	220c      	movs	r2, #12
 800043c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800043e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000442:	e009      	b.n	8000458 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000444:	4b08      	ldr	r3, [pc, #32]	@ (8000468 <_sbrk+0x64>)
 8000446:	681b      	ldr	r3, [r3, #0]
 8000448:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800044a:	4b07      	ldr	r3, [pc, #28]	@ (8000468 <_sbrk+0x64>)
 800044c:	681a      	ldr	r2, [r3, #0]
 800044e:	687b      	ldr	r3, [r7, #4]
 8000450:	4413      	add	r3, r2
 8000452:	4a05      	ldr	r2, [pc, #20]	@ (8000468 <_sbrk+0x64>)
 8000454:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000456:	68fb      	ldr	r3, [r7, #12]
}
 8000458:	4618      	mov	r0, r3
 800045a:	3718      	adds	r7, #24
 800045c:	46bd      	mov	sp, r7
 800045e:	bd80      	pop	{r7, pc}
 8000460:	2000a000 	.word	0x2000a000
 8000464:	00000400 	.word	0x00000400
 8000468:	20000070 	.word	0x20000070
 800046c:	200001c0 	.word	0x200001c0

08000470 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000470:	b480      	push	{r7}
 8000472:	b083      	sub	sp, #12
 8000474:	af00      	add	r7, sp, #0
 8000476:	4603      	mov	r3, r0
 8000478:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800047a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800047e:	2b00      	cmp	r3, #0
 8000480:	db0b      	blt.n	800049a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000482:	79fb      	ldrb	r3, [r7, #7]
 8000484:	f003 021f 	and.w	r2, r3, #31
 8000488:	4907      	ldr	r1, [pc, #28]	@ (80004a8 <__NVIC_EnableIRQ+0x38>)
 800048a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800048e:	095b      	lsrs	r3, r3, #5
 8000490:	2001      	movs	r0, #1
 8000492:	fa00 f202 	lsl.w	r2, r0, r2
 8000496:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800049a:	bf00      	nop
 800049c:	370c      	adds	r7, #12
 800049e:	46bd      	mov	sp, r7
 80004a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004a4:	4770      	bx	lr
 80004a6:	bf00      	nop
 80004a8:	e000e100 	.word	0xe000e100

080004ac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80004ac:	b480      	push	{r7}
 80004ae:	b083      	sub	sp, #12
 80004b0:	af00      	add	r7, sp, #0
 80004b2:	4603      	mov	r3, r0
 80004b4:	6039      	str	r1, [r7, #0]
 80004b6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80004b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80004bc:	2b00      	cmp	r3, #0
 80004be:	db0a      	blt.n	80004d6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80004c0:	683b      	ldr	r3, [r7, #0]
 80004c2:	b2da      	uxtb	r2, r3
 80004c4:	490c      	ldr	r1, [pc, #48]	@ (80004f8 <__NVIC_SetPriority+0x4c>)
 80004c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80004ca:	0112      	lsls	r2, r2, #4
 80004cc:	b2d2      	uxtb	r2, r2
 80004ce:	440b      	add	r3, r1
 80004d0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80004d4:	e00a      	b.n	80004ec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80004d6:	683b      	ldr	r3, [r7, #0]
 80004d8:	b2da      	uxtb	r2, r3
 80004da:	4908      	ldr	r1, [pc, #32]	@ (80004fc <__NVIC_SetPriority+0x50>)
 80004dc:	79fb      	ldrb	r3, [r7, #7]
 80004de:	f003 030f 	and.w	r3, r3, #15
 80004e2:	3b04      	subs	r3, #4
 80004e4:	0112      	lsls	r2, r2, #4
 80004e6:	b2d2      	uxtb	r2, r2
 80004e8:	440b      	add	r3, r1
 80004ea:	761a      	strb	r2, [r3, #24]
}
 80004ec:	bf00      	nop
 80004ee:	370c      	adds	r7, #12
 80004f0:	46bd      	mov	sp, r7
 80004f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004f6:	4770      	bx	lr
 80004f8:	e000e100 	.word	0xe000e100
 80004fc:	e000ed00 	.word	0xe000ed00

08000500 <timer2_init>:
#include "uart.h"
#include "config.h"

volatile uint16_t seconds_remaining = MAX_SECONDS;

void timer2_init(void) {
 8000500:	b580      	push	{r7, lr}
 8000502:	af00      	add	r7, sp, #0
    RCC->APB1ENR |= RCC_APB1ENR_TIM2EN;
 8000504:	4b14      	ldr	r3, [pc, #80]	@ (8000558 <timer2_init+0x58>)
 8000506:	69db      	ldr	r3, [r3, #28]
 8000508:	4a13      	ldr	r2, [pc, #76]	@ (8000558 <timer2_init+0x58>)
 800050a:	f043 0301 	orr.w	r3, r3, #1
 800050e:	61d3      	str	r3, [r2, #28]
    TIM2->PSC = TIMER_PRESCALER;
 8000510:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000514:	f641 723f 	movw	r2, #7999	@ 0x1f3f
 8000518:	629a      	str	r2, [r3, #40]	@ 0x28
    TIM2->ARR = TIMER_AUTO_RELOAD;
 800051a:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800051e:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000522:	62da      	str	r2, [r3, #44]	@ 0x2c
    TIM2->DIER |= TIM_DIER_UIE;
 8000524:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000528:	68db      	ldr	r3, [r3, #12]
 800052a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800052e:	f043 0301 	orr.w	r3, r3, #1
 8000532:	60d3      	str	r3, [r2, #12]
    TIM2->CR1 |= TIM_CR1_CEN;
 8000534:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000538:	681b      	ldr	r3, [r3, #0]
 800053a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800053e:	f043 0301 	orr.w	r3, r3, #1
 8000542:	6013      	str	r3, [r2, #0]

    NVIC_SetPriority(TIM2_IRQn, 1);
 8000544:	2101      	movs	r1, #1
 8000546:	201c      	movs	r0, #28
 8000548:	f7ff ffb0 	bl	80004ac <__NVIC_SetPriority>
    NVIC_EnableIRQ(TIM2_IRQn);
 800054c:	201c      	movs	r0, #28
 800054e:	f7ff ff8f 	bl	8000470 <__NVIC_EnableIRQ>
}
 8000552:	bf00      	nop
 8000554:	bd80      	pop	{r7, pc}
 8000556:	bf00      	nop
 8000558:	40021000 	.word	0x40021000

0800055c <TIM2_IRQHandler>:

void TIM2_IRQHandler(void) {
 800055c:	b580      	push	{r7, lr}
 800055e:	af00      	add	r7, sp, #0
    if (TIM2->SR & TIM_SR_UIF) {
 8000560:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000564:	691b      	ldr	r3, [r3, #16]
 8000566:	f003 0301 	and.w	r3, r3, #1
 800056a:	2b00      	cmp	r3, #0
 800056c:	d02b      	beq.n	80005c6 <TIM2_IRQHandler+0x6a>
        TIM2->SR &= ~TIM_SR_UIF;
 800056e:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000572:	691b      	ldr	r3, [r3, #16]
 8000574:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000578:	f023 0301 	bic.w	r3, r3, #1
 800057c:	6113      	str	r3, [r2, #16]

        blink_state ^= 1;
 800057e:	4b13      	ldr	r3, [pc, #76]	@ (80005cc <TIM2_IRQHandler+0x70>)
 8000580:	781b      	ldrb	r3, [r3, #0]
 8000582:	b2db      	uxtb	r3, r3
 8000584:	f083 0301 	eor.w	r3, r3, #1
 8000588:	b2da      	uxtb	r2, r3
 800058a:	4b10      	ldr	r3, [pc, #64]	@ (80005cc <TIM2_IRQHandler+0x70>)
 800058c:	701a      	strb	r2, [r3, #0]

        if (seconds_remaining > 0) {
 800058e:	4b10      	ldr	r3, [pc, #64]	@ (80005d0 <TIM2_IRQHandler+0x74>)
 8000590:	881b      	ldrh	r3, [r3, #0]
 8000592:	b29b      	uxth	r3, r3
 8000594:	2b00      	cmp	r3, #0
 8000596:	d013      	beq.n	80005c0 <TIM2_IRQHandler+0x64>
            seconds_remaining--;
 8000598:	4b0d      	ldr	r3, [pc, #52]	@ (80005d0 <TIM2_IRQHandler+0x74>)
 800059a:	881b      	ldrh	r3, [r3, #0]
 800059c:	b29b      	uxth	r3, r3
 800059e:	3b01      	subs	r3, #1
 80005a0:	b29a      	uxth	r2, r3
 80005a2:	4b0b      	ldr	r3, [pc, #44]	@ (80005d0 <TIM2_IRQHandler+0x74>)
 80005a4:	801a      	strh	r2, [r3, #0]
            update_LEDs(seconds_remaining);
 80005a6:	4b0a      	ldr	r3, [pc, #40]	@ (80005d0 <TIM2_IRQHandler+0x74>)
 80005a8:	881b      	ldrh	r3, [r3, #0]
 80005aa:	b29b      	uxth	r3, r3
 80005ac:	4618      	mov	r0, r3
 80005ae:	f7ff fead 	bl	800030c <update_LEDs>
            uart_send_time(seconds_remaining);
 80005b2:	4b07      	ldr	r3, [pc, #28]	@ (80005d0 <TIM2_IRQHandler+0x74>)
 80005b4:	881b      	ldrh	r3, [r3, #0]
 80005b6:	b29b      	uxth	r3, r3
 80005b8:	4618      	mov	r0, r3
 80005ba:	f000 f873 	bl	80006a4 <uart_send_time>
        } else {
            uart_send_string("\r00:00 - Game Over!\n");
        }
    }
}
 80005be:	e002      	b.n	80005c6 <TIM2_IRQHandler+0x6a>
            uart_send_string("\r00:00 - Game Over!\n");
 80005c0:	4804      	ldr	r0, [pc, #16]	@ (80005d4 <TIM2_IRQHandler+0x78>)
 80005c2:	f000 f859 	bl	8000678 <uart_send_string>
}
 80005c6:	bf00      	nop
 80005c8:	bd80      	pop	{r7, pc}
 80005ca:	bf00      	nop
 80005cc:	20000000 	.word	0x20000000
 80005d0:	20000002 	.word	0x20000002
 80005d4:	080010bc 	.word	0x080010bc

080005d8 <uart_init>:
#include "stm32f303xc.h"
#include "uart.h"
#include "config.h"
#include <stdio.h>

void uart_init(void) {
 80005d8:	b480      	push	{r7}
 80005da:	af00      	add	r7, sp, #0
    RCC->AHBENR  |= RCC_AHBENR_GPIOAEN;
 80005dc:	4b18      	ldr	r3, [pc, #96]	@ (8000640 <uart_init+0x68>)
 80005de:	695b      	ldr	r3, [r3, #20]
 80005e0:	4a17      	ldr	r2, [pc, #92]	@ (8000640 <uart_init+0x68>)
 80005e2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80005e6:	6153      	str	r3, [r2, #20]
    RCC->APB2ENR |= RCC_APB2ENR_USART1EN;
 80005e8:	4b15      	ldr	r3, [pc, #84]	@ (8000640 <uart_init+0x68>)
 80005ea:	699b      	ldr	r3, [r3, #24]
 80005ec:	4a14      	ldr	r2, [pc, #80]	@ (8000640 <uart_init+0x68>)
 80005ee:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80005f2:	6193      	str	r3, [r2, #24]

    GPIOA->MODER &= ~(3 << (2 * UART_TX_PIN));
 80005f4:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80005f8:	681b      	ldr	r3, [r3, #0]
 80005fa:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 80005fe:	f423 2340 	bic.w	r3, r3, #786432	@ 0xc0000
 8000602:	6013      	str	r3, [r2, #0]
    GPIOA->MODER |=  (2 << (2 * UART_TX_PIN));
 8000604:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000608:	681b      	ldr	r3, [r3, #0]
 800060a:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 800060e:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8000612:	6013      	str	r3, [r2, #0]
    GPIOA->AFR[1] |= (UART_TX_AF << ((UART_TX_PIN - 8) * 4));
 8000614:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000618:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800061a:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 800061e:	f043 0370 	orr.w	r3, r3, #112	@ 0x70
 8000622:	6253      	str	r3, [r2, #36]	@ 0x24

    USART1->BRR  = SYSTEM_CLOCK_HZ / UART_BAUDRATE;
 8000624:	4b07      	ldr	r3, [pc, #28]	@ (8000644 <uart_init+0x6c>)
 8000626:	2245      	movs	r2, #69	@ 0x45
 8000628:	60da      	str	r2, [r3, #12]
    USART1->CR1 |= USART_CR1_TE | USART_CR1_UE;
 800062a:	4b06      	ldr	r3, [pc, #24]	@ (8000644 <uart_init+0x6c>)
 800062c:	681b      	ldr	r3, [r3, #0]
 800062e:	4a05      	ldr	r2, [pc, #20]	@ (8000644 <uart_init+0x6c>)
 8000630:	f043 0309 	orr.w	r3, r3, #9
 8000634:	6013      	str	r3, [r2, #0]
}
 8000636:	bf00      	nop
 8000638:	46bd      	mov	sp, r7
 800063a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800063e:	4770      	bx	lr
 8000640:	40021000 	.word	0x40021000
 8000644:	40013800 	.word	0x40013800

08000648 <uart_send_char>:

void uart_send_char(char c) {
 8000648:	b480      	push	{r7}
 800064a:	b083      	sub	sp, #12
 800064c:	af00      	add	r7, sp, #0
 800064e:	4603      	mov	r3, r0
 8000650:	71fb      	strb	r3, [r7, #7]
    while (!(USART1->ISR & USART_ISR_TXE));
 8000652:	bf00      	nop
 8000654:	4b07      	ldr	r3, [pc, #28]	@ (8000674 <uart_send_char+0x2c>)
 8000656:	69db      	ldr	r3, [r3, #28]
 8000658:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800065c:	2b00      	cmp	r3, #0
 800065e:	d0f9      	beq.n	8000654 <uart_send_char+0xc>
    USART1->TDR = c;
 8000660:	4b04      	ldr	r3, [pc, #16]	@ (8000674 <uart_send_char+0x2c>)
 8000662:	79fa      	ldrb	r2, [r7, #7]
 8000664:	b292      	uxth	r2, r2
 8000666:	851a      	strh	r2, [r3, #40]	@ 0x28
}
 8000668:	bf00      	nop
 800066a:	370c      	adds	r7, #12
 800066c:	46bd      	mov	sp, r7
 800066e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000672:	4770      	bx	lr
 8000674:	40013800 	.word	0x40013800

08000678 <uart_send_string>:

void uart_send_string(const char *s) {
 8000678:	b580      	push	{r7, lr}
 800067a:	b082      	sub	sp, #8
 800067c:	af00      	add	r7, sp, #0
 800067e:	6078      	str	r0, [r7, #4]
    while (*s) uart_send_char(*s++);
 8000680:	e006      	b.n	8000690 <uart_send_string+0x18>
 8000682:	687b      	ldr	r3, [r7, #4]
 8000684:	1c5a      	adds	r2, r3, #1
 8000686:	607a      	str	r2, [r7, #4]
 8000688:	781b      	ldrb	r3, [r3, #0]
 800068a:	4618      	mov	r0, r3
 800068c:	f7ff ffdc 	bl	8000648 <uart_send_char>
 8000690:	687b      	ldr	r3, [r7, #4]
 8000692:	781b      	ldrb	r3, [r3, #0]
 8000694:	2b00      	cmp	r3, #0
 8000696:	d1f4      	bne.n	8000682 <uart_send_string+0xa>
}
 8000698:	bf00      	nop
 800069a:	bf00      	nop
 800069c:	3708      	adds	r7, #8
 800069e:	46bd      	mov	sp, r7
 80006a0:	bd80      	pop	{r7, pc}
	...

080006a4 <uart_send_time>:

void uart_send_time(uint16_t seconds) {
 80006a4:	b580      	push	{r7, lr}
 80006a6:	b088      	sub	sp, #32
 80006a8:	af00      	add	r7, sp, #0
 80006aa:	4603      	mov	r3, r0
 80006ac:	80fb      	strh	r3, [r7, #6]
    char buf[16];
    uint8_t min = seconds / 60;
 80006ae:	88fb      	ldrh	r3, [r7, #6]
 80006b0:	4a10      	ldr	r2, [pc, #64]	@ (80006f4 <uart_send_time+0x50>)
 80006b2:	fba2 2303 	umull	r2, r3, r2, r3
 80006b6:	095b      	lsrs	r3, r3, #5
 80006b8:	b29b      	uxth	r3, r3
 80006ba:	77fb      	strb	r3, [r7, #31]
    uint8_t sec = seconds % 60;
 80006bc:	88fa      	ldrh	r2, [r7, #6]
 80006be:	4b0d      	ldr	r3, [pc, #52]	@ (80006f4 <uart_send_time+0x50>)
 80006c0:	fba3 1302 	umull	r1, r3, r3, r2
 80006c4:	0959      	lsrs	r1, r3, #5
 80006c6:	460b      	mov	r3, r1
 80006c8:	011b      	lsls	r3, r3, #4
 80006ca:	1a5b      	subs	r3, r3, r1
 80006cc:	009b      	lsls	r3, r3, #2
 80006ce:	1ad3      	subs	r3, r2, r3
 80006d0:	b29b      	uxth	r3, r3
 80006d2:	77bb      	strb	r3, [r7, #30]
    sprintf(buf, "\r%02u:%02u", min, sec);
 80006d4:	7ffa      	ldrb	r2, [r7, #31]
 80006d6:	7fbb      	ldrb	r3, [r7, #30]
 80006d8:	f107 000c 	add.w	r0, r7, #12
 80006dc:	4906      	ldr	r1, [pc, #24]	@ (80006f8 <uart_send_time+0x54>)
 80006de:	f000 f837 	bl	8000750 <siprintf>
    uart_send_string(buf);
 80006e2:	f107 030c 	add.w	r3, r7, #12
 80006e6:	4618      	mov	r0, r3
 80006e8:	f7ff ffc6 	bl	8000678 <uart_send_string>
}
 80006ec:	bf00      	nop
 80006ee:	3720      	adds	r7, #32
 80006f0:	46bd      	mov	sp, r7
 80006f2:	bd80      	pop	{r7, pc}
 80006f4:	88888889 	.word	0x88888889
 80006f8:	080010d4 	.word	0x080010d4

080006fc <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80006fc:	480d      	ldr	r0, [pc, #52]	@ (8000734 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80006fe:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000700:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000704:	480c      	ldr	r0, [pc, #48]	@ (8000738 <LoopForever+0x6>)
  ldr r1, =_edata
 8000706:	490d      	ldr	r1, [pc, #52]	@ (800073c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000708:	4a0d      	ldr	r2, [pc, #52]	@ (8000740 <LoopForever+0xe>)
  movs r3, #0
 800070a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800070c:	e002      	b.n	8000714 <LoopCopyDataInit>

0800070e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800070e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000710:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000712:	3304      	adds	r3, #4

08000714 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000714:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000716:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000718:	d3f9      	bcc.n	800070e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800071a:	4a0a      	ldr	r2, [pc, #40]	@ (8000744 <LoopForever+0x12>)
  ldr r4, =_ebss
 800071c:	4c0a      	ldr	r4, [pc, #40]	@ (8000748 <LoopForever+0x16>)
  movs r3, #0
 800071e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000720:	e001      	b.n	8000726 <LoopFillZerobss>

08000722 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000722:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000724:	3204      	adds	r2, #4

08000726 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000726:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000728:	d3fb      	bcc.n	8000722 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800072a:	f000 f837 	bl	800079c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800072e:	f7ff fe51 	bl	80003d4 <main>

08000732 <LoopForever>:

LoopForever:
  b LoopForever
 8000732:	e7fe      	b.n	8000732 <LoopForever>
  ldr   r0, =_estack
 8000734:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 8000738:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800073c:	20000054 	.word	0x20000054
  ldr r2, =_sidata
 8000740:	0800112c 	.word	0x0800112c
  ldr r2, =_sbss
 8000744:	20000054 	.word	0x20000054
  ldr r4, =_ebss
 8000748:	200001bc 	.word	0x200001bc

0800074c <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800074c:	e7fe      	b.n	800074c <ADC1_2_IRQHandler>
	...

08000750 <siprintf>:
 8000750:	b40e      	push	{r1, r2, r3}
 8000752:	b500      	push	{lr}
 8000754:	b09c      	sub	sp, #112	@ 0x70
 8000756:	ab1d      	add	r3, sp, #116	@ 0x74
 8000758:	9002      	str	r0, [sp, #8]
 800075a:	9006      	str	r0, [sp, #24]
 800075c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8000760:	4809      	ldr	r0, [pc, #36]	@ (8000788 <siprintf+0x38>)
 8000762:	9107      	str	r1, [sp, #28]
 8000764:	9104      	str	r1, [sp, #16]
 8000766:	4909      	ldr	r1, [pc, #36]	@ (800078c <siprintf+0x3c>)
 8000768:	f853 2b04 	ldr.w	r2, [r3], #4
 800076c:	9105      	str	r1, [sp, #20]
 800076e:	6800      	ldr	r0, [r0, #0]
 8000770:	9301      	str	r3, [sp, #4]
 8000772:	a902      	add	r1, sp, #8
 8000774:	f000 f894 	bl	80008a0 <_svfiprintf_r>
 8000778:	9b02      	ldr	r3, [sp, #8]
 800077a:	2200      	movs	r2, #0
 800077c:	701a      	strb	r2, [r3, #0]
 800077e:	b01c      	add	sp, #112	@ 0x70
 8000780:	f85d eb04 	ldr.w	lr, [sp], #4
 8000784:	b003      	add	sp, #12
 8000786:	4770      	bx	lr
 8000788:	20000004 	.word	0x20000004
 800078c:	ffff0208 	.word	0xffff0208

08000790 <__errno>:
 8000790:	4b01      	ldr	r3, [pc, #4]	@ (8000798 <__errno+0x8>)
 8000792:	6818      	ldr	r0, [r3, #0]
 8000794:	4770      	bx	lr
 8000796:	bf00      	nop
 8000798:	20000004 	.word	0x20000004

0800079c <__libc_init_array>:
 800079c:	b570      	push	{r4, r5, r6, lr}
 800079e:	4d0d      	ldr	r5, [pc, #52]	@ (80007d4 <__libc_init_array+0x38>)
 80007a0:	4c0d      	ldr	r4, [pc, #52]	@ (80007d8 <__libc_init_array+0x3c>)
 80007a2:	1b64      	subs	r4, r4, r5
 80007a4:	10a4      	asrs	r4, r4, #2
 80007a6:	2600      	movs	r6, #0
 80007a8:	42a6      	cmp	r6, r4
 80007aa:	d109      	bne.n	80007c0 <__libc_init_array+0x24>
 80007ac:	4d0b      	ldr	r5, [pc, #44]	@ (80007dc <__libc_init_array+0x40>)
 80007ae:	4c0c      	ldr	r4, [pc, #48]	@ (80007e0 <__libc_init_array+0x44>)
 80007b0:	f000 fc66 	bl	8001080 <_init>
 80007b4:	1b64      	subs	r4, r4, r5
 80007b6:	10a4      	asrs	r4, r4, #2
 80007b8:	2600      	movs	r6, #0
 80007ba:	42a6      	cmp	r6, r4
 80007bc:	d105      	bne.n	80007ca <__libc_init_array+0x2e>
 80007be:	bd70      	pop	{r4, r5, r6, pc}
 80007c0:	f855 3b04 	ldr.w	r3, [r5], #4
 80007c4:	4798      	blx	r3
 80007c6:	3601      	adds	r6, #1
 80007c8:	e7ee      	b.n	80007a8 <__libc_init_array+0xc>
 80007ca:	f855 3b04 	ldr.w	r3, [r5], #4
 80007ce:	4798      	blx	r3
 80007d0:	3601      	adds	r6, #1
 80007d2:	e7f2      	b.n	80007ba <__libc_init_array+0x1e>
 80007d4:	08001124 	.word	0x08001124
 80007d8:	08001124 	.word	0x08001124
 80007dc:	08001124 	.word	0x08001124
 80007e0:	08001128 	.word	0x08001128

080007e4 <__retarget_lock_acquire_recursive>:
 80007e4:	4770      	bx	lr

080007e6 <__retarget_lock_release_recursive>:
 80007e6:	4770      	bx	lr

080007e8 <__ssputs_r>:
 80007e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80007ec:	688e      	ldr	r6, [r1, #8]
 80007ee:	461f      	mov	r7, r3
 80007f0:	42be      	cmp	r6, r7
 80007f2:	680b      	ldr	r3, [r1, #0]
 80007f4:	4682      	mov	sl, r0
 80007f6:	460c      	mov	r4, r1
 80007f8:	4690      	mov	r8, r2
 80007fa:	d82d      	bhi.n	8000858 <__ssputs_r+0x70>
 80007fc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8000800:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8000804:	d026      	beq.n	8000854 <__ssputs_r+0x6c>
 8000806:	6965      	ldr	r5, [r4, #20]
 8000808:	6909      	ldr	r1, [r1, #16]
 800080a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800080e:	eba3 0901 	sub.w	r9, r3, r1
 8000812:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8000816:	1c7b      	adds	r3, r7, #1
 8000818:	444b      	add	r3, r9
 800081a:	106d      	asrs	r5, r5, #1
 800081c:	429d      	cmp	r5, r3
 800081e:	bf38      	it	cc
 8000820:	461d      	movcc	r5, r3
 8000822:	0553      	lsls	r3, r2, #21
 8000824:	d527      	bpl.n	8000876 <__ssputs_r+0x8e>
 8000826:	4629      	mov	r1, r5
 8000828:	f000 f958 	bl	8000adc <_malloc_r>
 800082c:	4606      	mov	r6, r0
 800082e:	b360      	cbz	r0, 800088a <__ssputs_r+0xa2>
 8000830:	6921      	ldr	r1, [r4, #16]
 8000832:	464a      	mov	r2, r9
 8000834:	f000 fbc4 	bl	8000fc0 <memcpy>
 8000838:	89a3      	ldrh	r3, [r4, #12]
 800083a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800083e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000842:	81a3      	strh	r3, [r4, #12]
 8000844:	6126      	str	r6, [r4, #16]
 8000846:	6165      	str	r5, [r4, #20]
 8000848:	444e      	add	r6, r9
 800084a:	eba5 0509 	sub.w	r5, r5, r9
 800084e:	6026      	str	r6, [r4, #0]
 8000850:	60a5      	str	r5, [r4, #8]
 8000852:	463e      	mov	r6, r7
 8000854:	42be      	cmp	r6, r7
 8000856:	d900      	bls.n	800085a <__ssputs_r+0x72>
 8000858:	463e      	mov	r6, r7
 800085a:	6820      	ldr	r0, [r4, #0]
 800085c:	4632      	mov	r2, r6
 800085e:	4641      	mov	r1, r8
 8000860:	f000 fb84 	bl	8000f6c <memmove>
 8000864:	68a3      	ldr	r3, [r4, #8]
 8000866:	1b9b      	subs	r3, r3, r6
 8000868:	60a3      	str	r3, [r4, #8]
 800086a:	6823      	ldr	r3, [r4, #0]
 800086c:	4433      	add	r3, r6
 800086e:	6023      	str	r3, [r4, #0]
 8000870:	2000      	movs	r0, #0
 8000872:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000876:	462a      	mov	r2, r5
 8000878:	f000 fb4a 	bl	8000f10 <_realloc_r>
 800087c:	4606      	mov	r6, r0
 800087e:	2800      	cmp	r0, #0
 8000880:	d1e0      	bne.n	8000844 <__ssputs_r+0x5c>
 8000882:	6921      	ldr	r1, [r4, #16]
 8000884:	4650      	mov	r0, sl
 8000886:	f000 fba9 	bl	8000fdc <_free_r>
 800088a:	230c      	movs	r3, #12
 800088c:	f8ca 3000 	str.w	r3, [sl]
 8000890:	89a3      	ldrh	r3, [r4, #12]
 8000892:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000896:	81a3      	strh	r3, [r4, #12]
 8000898:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800089c:	e7e9      	b.n	8000872 <__ssputs_r+0x8a>
	...

080008a0 <_svfiprintf_r>:
 80008a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80008a4:	4698      	mov	r8, r3
 80008a6:	898b      	ldrh	r3, [r1, #12]
 80008a8:	061b      	lsls	r3, r3, #24
 80008aa:	b09d      	sub	sp, #116	@ 0x74
 80008ac:	4607      	mov	r7, r0
 80008ae:	460d      	mov	r5, r1
 80008b0:	4614      	mov	r4, r2
 80008b2:	d510      	bpl.n	80008d6 <_svfiprintf_r+0x36>
 80008b4:	690b      	ldr	r3, [r1, #16]
 80008b6:	b973      	cbnz	r3, 80008d6 <_svfiprintf_r+0x36>
 80008b8:	2140      	movs	r1, #64	@ 0x40
 80008ba:	f000 f90f 	bl	8000adc <_malloc_r>
 80008be:	6028      	str	r0, [r5, #0]
 80008c0:	6128      	str	r0, [r5, #16]
 80008c2:	b930      	cbnz	r0, 80008d2 <_svfiprintf_r+0x32>
 80008c4:	230c      	movs	r3, #12
 80008c6:	603b      	str	r3, [r7, #0]
 80008c8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80008cc:	b01d      	add	sp, #116	@ 0x74
 80008ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80008d2:	2340      	movs	r3, #64	@ 0x40
 80008d4:	616b      	str	r3, [r5, #20]
 80008d6:	2300      	movs	r3, #0
 80008d8:	9309      	str	r3, [sp, #36]	@ 0x24
 80008da:	2320      	movs	r3, #32
 80008dc:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80008e0:	f8cd 800c 	str.w	r8, [sp, #12]
 80008e4:	2330      	movs	r3, #48	@ 0x30
 80008e6:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8000a84 <_svfiprintf_r+0x1e4>
 80008ea:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80008ee:	f04f 0901 	mov.w	r9, #1
 80008f2:	4623      	mov	r3, r4
 80008f4:	469a      	mov	sl, r3
 80008f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80008fa:	b10a      	cbz	r2, 8000900 <_svfiprintf_r+0x60>
 80008fc:	2a25      	cmp	r2, #37	@ 0x25
 80008fe:	d1f9      	bne.n	80008f4 <_svfiprintf_r+0x54>
 8000900:	ebba 0b04 	subs.w	fp, sl, r4
 8000904:	d00b      	beq.n	800091e <_svfiprintf_r+0x7e>
 8000906:	465b      	mov	r3, fp
 8000908:	4622      	mov	r2, r4
 800090a:	4629      	mov	r1, r5
 800090c:	4638      	mov	r0, r7
 800090e:	f7ff ff6b 	bl	80007e8 <__ssputs_r>
 8000912:	3001      	adds	r0, #1
 8000914:	f000 80a7 	beq.w	8000a66 <_svfiprintf_r+0x1c6>
 8000918:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800091a:	445a      	add	r2, fp
 800091c:	9209      	str	r2, [sp, #36]	@ 0x24
 800091e:	f89a 3000 	ldrb.w	r3, [sl]
 8000922:	2b00      	cmp	r3, #0
 8000924:	f000 809f 	beq.w	8000a66 <_svfiprintf_r+0x1c6>
 8000928:	2300      	movs	r3, #0
 800092a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800092e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8000932:	f10a 0a01 	add.w	sl, sl, #1
 8000936:	9304      	str	r3, [sp, #16]
 8000938:	9307      	str	r3, [sp, #28]
 800093a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800093e:	931a      	str	r3, [sp, #104]	@ 0x68
 8000940:	4654      	mov	r4, sl
 8000942:	2205      	movs	r2, #5
 8000944:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000948:	484e      	ldr	r0, [pc, #312]	@ (8000a84 <_svfiprintf_r+0x1e4>)
 800094a:	f7ff fc49 	bl	80001e0 <memchr>
 800094e:	9a04      	ldr	r2, [sp, #16]
 8000950:	b9d8      	cbnz	r0, 800098a <_svfiprintf_r+0xea>
 8000952:	06d0      	lsls	r0, r2, #27
 8000954:	bf44      	itt	mi
 8000956:	2320      	movmi	r3, #32
 8000958:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800095c:	0711      	lsls	r1, r2, #28
 800095e:	bf44      	itt	mi
 8000960:	232b      	movmi	r3, #43	@ 0x2b
 8000962:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8000966:	f89a 3000 	ldrb.w	r3, [sl]
 800096a:	2b2a      	cmp	r3, #42	@ 0x2a
 800096c:	d015      	beq.n	800099a <_svfiprintf_r+0xfa>
 800096e:	9a07      	ldr	r2, [sp, #28]
 8000970:	4654      	mov	r4, sl
 8000972:	2000      	movs	r0, #0
 8000974:	f04f 0c0a 	mov.w	ip, #10
 8000978:	4621      	mov	r1, r4
 800097a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800097e:	3b30      	subs	r3, #48	@ 0x30
 8000980:	2b09      	cmp	r3, #9
 8000982:	d94b      	bls.n	8000a1c <_svfiprintf_r+0x17c>
 8000984:	b1b0      	cbz	r0, 80009b4 <_svfiprintf_r+0x114>
 8000986:	9207      	str	r2, [sp, #28]
 8000988:	e014      	b.n	80009b4 <_svfiprintf_r+0x114>
 800098a:	eba0 0308 	sub.w	r3, r0, r8
 800098e:	fa09 f303 	lsl.w	r3, r9, r3
 8000992:	4313      	orrs	r3, r2
 8000994:	9304      	str	r3, [sp, #16]
 8000996:	46a2      	mov	sl, r4
 8000998:	e7d2      	b.n	8000940 <_svfiprintf_r+0xa0>
 800099a:	9b03      	ldr	r3, [sp, #12]
 800099c:	1d19      	adds	r1, r3, #4
 800099e:	681b      	ldr	r3, [r3, #0]
 80009a0:	9103      	str	r1, [sp, #12]
 80009a2:	2b00      	cmp	r3, #0
 80009a4:	bfbb      	ittet	lt
 80009a6:	425b      	neglt	r3, r3
 80009a8:	f042 0202 	orrlt.w	r2, r2, #2
 80009ac:	9307      	strge	r3, [sp, #28]
 80009ae:	9307      	strlt	r3, [sp, #28]
 80009b0:	bfb8      	it	lt
 80009b2:	9204      	strlt	r2, [sp, #16]
 80009b4:	7823      	ldrb	r3, [r4, #0]
 80009b6:	2b2e      	cmp	r3, #46	@ 0x2e
 80009b8:	d10a      	bne.n	80009d0 <_svfiprintf_r+0x130>
 80009ba:	7863      	ldrb	r3, [r4, #1]
 80009bc:	2b2a      	cmp	r3, #42	@ 0x2a
 80009be:	d132      	bne.n	8000a26 <_svfiprintf_r+0x186>
 80009c0:	9b03      	ldr	r3, [sp, #12]
 80009c2:	1d1a      	adds	r2, r3, #4
 80009c4:	681b      	ldr	r3, [r3, #0]
 80009c6:	9203      	str	r2, [sp, #12]
 80009c8:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80009cc:	3402      	adds	r4, #2
 80009ce:	9305      	str	r3, [sp, #20]
 80009d0:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8000a94 <_svfiprintf_r+0x1f4>
 80009d4:	7821      	ldrb	r1, [r4, #0]
 80009d6:	2203      	movs	r2, #3
 80009d8:	4650      	mov	r0, sl
 80009da:	f7ff fc01 	bl	80001e0 <memchr>
 80009de:	b138      	cbz	r0, 80009f0 <_svfiprintf_r+0x150>
 80009e0:	9b04      	ldr	r3, [sp, #16]
 80009e2:	eba0 000a 	sub.w	r0, r0, sl
 80009e6:	2240      	movs	r2, #64	@ 0x40
 80009e8:	4082      	lsls	r2, r0
 80009ea:	4313      	orrs	r3, r2
 80009ec:	3401      	adds	r4, #1
 80009ee:	9304      	str	r3, [sp, #16]
 80009f0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80009f4:	4824      	ldr	r0, [pc, #144]	@ (8000a88 <_svfiprintf_r+0x1e8>)
 80009f6:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80009fa:	2206      	movs	r2, #6
 80009fc:	f7ff fbf0 	bl	80001e0 <memchr>
 8000a00:	2800      	cmp	r0, #0
 8000a02:	d036      	beq.n	8000a72 <_svfiprintf_r+0x1d2>
 8000a04:	4b21      	ldr	r3, [pc, #132]	@ (8000a8c <_svfiprintf_r+0x1ec>)
 8000a06:	bb1b      	cbnz	r3, 8000a50 <_svfiprintf_r+0x1b0>
 8000a08:	9b03      	ldr	r3, [sp, #12]
 8000a0a:	3307      	adds	r3, #7
 8000a0c:	f023 0307 	bic.w	r3, r3, #7
 8000a10:	3308      	adds	r3, #8
 8000a12:	9303      	str	r3, [sp, #12]
 8000a14:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8000a16:	4433      	add	r3, r6
 8000a18:	9309      	str	r3, [sp, #36]	@ 0x24
 8000a1a:	e76a      	b.n	80008f2 <_svfiprintf_r+0x52>
 8000a1c:	fb0c 3202 	mla	r2, ip, r2, r3
 8000a20:	460c      	mov	r4, r1
 8000a22:	2001      	movs	r0, #1
 8000a24:	e7a8      	b.n	8000978 <_svfiprintf_r+0xd8>
 8000a26:	2300      	movs	r3, #0
 8000a28:	3401      	adds	r4, #1
 8000a2a:	9305      	str	r3, [sp, #20]
 8000a2c:	4619      	mov	r1, r3
 8000a2e:	f04f 0c0a 	mov.w	ip, #10
 8000a32:	4620      	mov	r0, r4
 8000a34:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000a38:	3a30      	subs	r2, #48	@ 0x30
 8000a3a:	2a09      	cmp	r2, #9
 8000a3c:	d903      	bls.n	8000a46 <_svfiprintf_r+0x1a6>
 8000a3e:	2b00      	cmp	r3, #0
 8000a40:	d0c6      	beq.n	80009d0 <_svfiprintf_r+0x130>
 8000a42:	9105      	str	r1, [sp, #20]
 8000a44:	e7c4      	b.n	80009d0 <_svfiprintf_r+0x130>
 8000a46:	fb0c 2101 	mla	r1, ip, r1, r2
 8000a4a:	4604      	mov	r4, r0
 8000a4c:	2301      	movs	r3, #1
 8000a4e:	e7f0      	b.n	8000a32 <_svfiprintf_r+0x192>
 8000a50:	ab03      	add	r3, sp, #12
 8000a52:	9300      	str	r3, [sp, #0]
 8000a54:	462a      	mov	r2, r5
 8000a56:	4b0e      	ldr	r3, [pc, #56]	@ (8000a90 <_svfiprintf_r+0x1f0>)
 8000a58:	a904      	add	r1, sp, #16
 8000a5a:	4638      	mov	r0, r7
 8000a5c:	f3af 8000 	nop.w
 8000a60:	1c42      	adds	r2, r0, #1
 8000a62:	4606      	mov	r6, r0
 8000a64:	d1d6      	bne.n	8000a14 <_svfiprintf_r+0x174>
 8000a66:	89ab      	ldrh	r3, [r5, #12]
 8000a68:	065b      	lsls	r3, r3, #25
 8000a6a:	f53f af2d 	bmi.w	80008c8 <_svfiprintf_r+0x28>
 8000a6e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8000a70:	e72c      	b.n	80008cc <_svfiprintf_r+0x2c>
 8000a72:	ab03      	add	r3, sp, #12
 8000a74:	9300      	str	r3, [sp, #0]
 8000a76:	462a      	mov	r2, r5
 8000a78:	4b05      	ldr	r3, [pc, #20]	@ (8000a90 <_svfiprintf_r+0x1f0>)
 8000a7a:	a904      	add	r1, sp, #16
 8000a7c:	4638      	mov	r0, r7
 8000a7e:	f000 f91b 	bl	8000cb8 <_printf_i>
 8000a82:	e7ed      	b.n	8000a60 <_svfiprintf_r+0x1c0>
 8000a84:	080010e8 	.word	0x080010e8
 8000a88:	080010f2 	.word	0x080010f2
 8000a8c:	00000000 	.word	0x00000000
 8000a90:	080007e9 	.word	0x080007e9
 8000a94:	080010ee 	.word	0x080010ee

08000a98 <sbrk_aligned>:
 8000a98:	b570      	push	{r4, r5, r6, lr}
 8000a9a:	4e0f      	ldr	r6, [pc, #60]	@ (8000ad8 <sbrk_aligned+0x40>)
 8000a9c:	460c      	mov	r4, r1
 8000a9e:	6831      	ldr	r1, [r6, #0]
 8000aa0:	4605      	mov	r5, r0
 8000aa2:	b911      	cbnz	r1, 8000aaa <sbrk_aligned+0x12>
 8000aa4:	f000 fa7c 	bl	8000fa0 <_sbrk_r>
 8000aa8:	6030      	str	r0, [r6, #0]
 8000aaa:	4621      	mov	r1, r4
 8000aac:	4628      	mov	r0, r5
 8000aae:	f000 fa77 	bl	8000fa0 <_sbrk_r>
 8000ab2:	1c43      	adds	r3, r0, #1
 8000ab4:	d103      	bne.n	8000abe <sbrk_aligned+0x26>
 8000ab6:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8000aba:	4620      	mov	r0, r4
 8000abc:	bd70      	pop	{r4, r5, r6, pc}
 8000abe:	1cc4      	adds	r4, r0, #3
 8000ac0:	f024 0403 	bic.w	r4, r4, #3
 8000ac4:	42a0      	cmp	r0, r4
 8000ac6:	d0f8      	beq.n	8000aba <sbrk_aligned+0x22>
 8000ac8:	1a21      	subs	r1, r4, r0
 8000aca:	4628      	mov	r0, r5
 8000acc:	f000 fa68 	bl	8000fa0 <_sbrk_r>
 8000ad0:	3001      	adds	r0, #1
 8000ad2:	d1f2      	bne.n	8000aba <sbrk_aligned+0x22>
 8000ad4:	e7ef      	b.n	8000ab6 <sbrk_aligned+0x1e>
 8000ad6:	bf00      	nop
 8000ad8:	200001b0 	.word	0x200001b0

08000adc <_malloc_r>:
 8000adc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000ae0:	1ccd      	adds	r5, r1, #3
 8000ae2:	f025 0503 	bic.w	r5, r5, #3
 8000ae6:	3508      	adds	r5, #8
 8000ae8:	2d0c      	cmp	r5, #12
 8000aea:	bf38      	it	cc
 8000aec:	250c      	movcc	r5, #12
 8000aee:	2d00      	cmp	r5, #0
 8000af0:	4606      	mov	r6, r0
 8000af2:	db01      	blt.n	8000af8 <_malloc_r+0x1c>
 8000af4:	42a9      	cmp	r1, r5
 8000af6:	d904      	bls.n	8000b02 <_malloc_r+0x26>
 8000af8:	230c      	movs	r3, #12
 8000afa:	6033      	str	r3, [r6, #0]
 8000afc:	2000      	movs	r0, #0
 8000afe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000b02:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8000bd8 <_malloc_r+0xfc>
 8000b06:	f000 f9f7 	bl	8000ef8 <__malloc_lock>
 8000b0a:	f8d8 3000 	ldr.w	r3, [r8]
 8000b0e:	461c      	mov	r4, r3
 8000b10:	bb44      	cbnz	r4, 8000b64 <_malloc_r+0x88>
 8000b12:	4629      	mov	r1, r5
 8000b14:	4630      	mov	r0, r6
 8000b16:	f7ff ffbf 	bl	8000a98 <sbrk_aligned>
 8000b1a:	1c43      	adds	r3, r0, #1
 8000b1c:	4604      	mov	r4, r0
 8000b1e:	d158      	bne.n	8000bd2 <_malloc_r+0xf6>
 8000b20:	f8d8 4000 	ldr.w	r4, [r8]
 8000b24:	4627      	mov	r7, r4
 8000b26:	2f00      	cmp	r7, #0
 8000b28:	d143      	bne.n	8000bb2 <_malloc_r+0xd6>
 8000b2a:	2c00      	cmp	r4, #0
 8000b2c:	d04b      	beq.n	8000bc6 <_malloc_r+0xea>
 8000b2e:	6823      	ldr	r3, [r4, #0]
 8000b30:	4639      	mov	r1, r7
 8000b32:	4630      	mov	r0, r6
 8000b34:	eb04 0903 	add.w	r9, r4, r3
 8000b38:	f000 fa32 	bl	8000fa0 <_sbrk_r>
 8000b3c:	4581      	cmp	r9, r0
 8000b3e:	d142      	bne.n	8000bc6 <_malloc_r+0xea>
 8000b40:	6821      	ldr	r1, [r4, #0]
 8000b42:	1a6d      	subs	r5, r5, r1
 8000b44:	4629      	mov	r1, r5
 8000b46:	4630      	mov	r0, r6
 8000b48:	f7ff ffa6 	bl	8000a98 <sbrk_aligned>
 8000b4c:	3001      	adds	r0, #1
 8000b4e:	d03a      	beq.n	8000bc6 <_malloc_r+0xea>
 8000b50:	6823      	ldr	r3, [r4, #0]
 8000b52:	442b      	add	r3, r5
 8000b54:	6023      	str	r3, [r4, #0]
 8000b56:	f8d8 3000 	ldr.w	r3, [r8]
 8000b5a:	685a      	ldr	r2, [r3, #4]
 8000b5c:	bb62      	cbnz	r2, 8000bb8 <_malloc_r+0xdc>
 8000b5e:	f8c8 7000 	str.w	r7, [r8]
 8000b62:	e00f      	b.n	8000b84 <_malloc_r+0xa8>
 8000b64:	6822      	ldr	r2, [r4, #0]
 8000b66:	1b52      	subs	r2, r2, r5
 8000b68:	d420      	bmi.n	8000bac <_malloc_r+0xd0>
 8000b6a:	2a0b      	cmp	r2, #11
 8000b6c:	d917      	bls.n	8000b9e <_malloc_r+0xc2>
 8000b6e:	1961      	adds	r1, r4, r5
 8000b70:	42a3      	cmp	r3, r4
 8000b72:	6025      	str	r5, [r4, #0]
 8000b74:	bf18      	it	ne
 8000b76:	6059      	strne	r1, [r3, #4]
 8000b78:	6863      	ldr	r3, [r4, #4]
 8000b7a:	bf08      	it	eq
 8000b7c:	f8c8 1000 	streq.w	r1, [r8]
 8000b80:	5162      	str	r2, [r4, r5]
 8000b82:	604b      	str	r3, [r1, #4]
 8000b84:	4630      	mov	r0, r6
 8000b86:	f000 f9bd 	bl	8000f04 <__malloc_unlock>
 8000b8a:	f104 000b 	add.w	r0, r4, #11
 8000b8e:	1d23      	adds	r3, r4, #4
 8000b90:	f020 0007 	bic.w	r0, r0, #7
 8000b94:	1ac2      	subs	r2, r0, r3
 8000b96:	bf1c      	itt	ne
 8000b98:	1a1b      	subne	r3, r3, r0
 8000b9a:	50a3      	strne	r3, [r4, r2]
 8000b9c:	e7af      	b.n	8000afe <_malloc_r+0x22>
 8000b9e:	6862      	ldr	r2, [r4, #4]
 8000ba0:	42a3      	cmp	r3, r4
 8000ba2:	bf0c      	ite	eq
 8000ba4:	f8c8 2000 	streq.w	r2, [r8]
 8000ba8:	605a      	strne	r2, [r3, #4]
 8000baa:	e7eb      	b.n	8000b84 <_malloc_r+0xa8>
 8000bac:	4623      	mov	r3, r4
 8000bae:	6864      	ldr	r4, [r4, #4]
 8000bb0:	e7ae      	b.n	8000b10 <_malloc_r+0x34>
 8000bb2:	463c      	mov	r4, r7
 8000bb4:	687f      	ldr	r7, [r7, #4]
 8000bb6:	e7b6      	b.n	8000b26 <_malloc_r+0x4a>
 8000bb8:	461a      	mov	r2, r3
 8000bba:	685b      	ldr	r3, [r3, #4]
 8000bbc:	42a3      	cmp	r3, r4
 8000bbe:	d1fb      	bne.n	8000bb8 <_malloc_r+0xdc>
 8000bc0:	2300      	movs	r3, #0
 8000bc2:	6053      	str	r3, [r2, #4]
 8000bc4:	e7de      	b.n	8000b84 <_malloc_r+0xa8>
 8000bc6:	230c      	movs	r3, #12
 8000bc8:	6033      	str	r3, [r6, #0]
 8000bca:	4630      	mov	r0, r6
 8000bcc:	f000 f99a 	bl	8000f04 <__malloc_unlock>
 8000bd0:	e794      	b.n	8000afc <_malloc_r+0x20>
 8000bd2:	6005      	str	r5, [r0, #0]
 8000bd4:	e7d6      	b.n	8000b84 <_malloc_r+0xa8>
 8000bd6:	bf00      	nop
 8000bd8:	200001b4 	.word	0x200001b4

08000bdc <_printf_common>:
 8000bdc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000be0:	4616      	mov	r6, r2
 8000be2:	4698      	mov	r8, r3
 8000be4:	688a      	ldr	r2, [r1, #8]
 8000be6:	690b      	ldr	r3, [r1, #16]
 8000be8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8000bec:	4293      	cmp	r3, r2
 8000bee:	bfb8      	it	lt
 8000bf0:	4613      	movlt	r3, r2
 8000bf2:	6033      	str	r3, [r6, #0]
 8000bf4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8000bf8:	4607      	mov	r7, r0
 8000bfa:	460c      	mov	r4, r1
 8000bfc:	b10a      	cbz	r2, 8000c02 <_printf_common+0x26>
 8000bfe:	3301      	adds	r3, #1
 8000c00:	6033      	str	r3, [r6, #0]
 8000c02:	6823      	ldr	r3, [r4, #0]
 8000c04:	0699      	lsls	r1, r3, #26
 8000c06:	bf42      	ittt	mi
 8000c08:	6833      	ldrmi	r3, [r6, #0]
 8000c0a:	3302      	addmi	r3, #2
 8000c0c:	6033      	strmi	r3, [r6, #0]
 8000c0e:	6825      	ldr	r5, [r4, #0]
 8000c10:	f015 0506 	ands.w	r5, r5, #6
 8000c14:	d106      	bne.n	8000c24 <_printf_common+0x48>
 8000c16:	f104 0a19 	add.w	sl, r4, #25
 8000c1a:	68e3      	ldr	r3, [r4, #12]
 8000c1c:	6832      	ldr	r2, [r6, #0]
 8000c1e:	1a9b      	subs	r3, r3, r2
 8000c20:	42ab      	cmp	r3, r5
 8000c22:	dc26      	bgt.n	8000c72 <_printf_common+0x96>
 8000c24:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8000c28:	6822      	ldr	r2, [r4, #0]
 8000c2a:	3b00      	subs	r3, #0
 8000c2c:	bf18      	it	ne
 8000c2e:	2301      	movne	r3, #1
 8000c30:	0692      	lsls	r2, r2, #26
 8000c32:	d42b      	bmi.n	8000c8c <_printf_common+0xb0>
 8000c34:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8000c38:	4641      	mov	r1, r8
 8000c3a:	4638      	mov	r0, r7
 8000c3c:	47c8      	blx	r9
 8000c3e:	3001      	adds	r0, #1
 8000c40:	d01e      	beq.n	8000c80 <_printf_common+0xa4>
 8000c42:	6823      	ldr	r3, [r4, #0]
 8000c44:	6922      	ldr	r2, [r4, #16]
 8000c46:	f003 0306 	and.w	r3, r3, #6
 8000c4a:	2b04      	cmp	r3, #4
 8000c4c:	bf02      	ittt	eq
 8000c4e:	68e5      	ldreq	r5, [r4, #12]
 8000c50:	6833      	ldreq	r3, [r6, #0]
 8000c52:	1aed      	subeq	r5, r5, r3
 8000c54:	68a3      	ldr	r3, [r4, #8]
 8000c56:	bf0c      	ite	eq
 8000c58:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8000c5c:	2500      	movne	r5, #0
 8000c5e:	4293      	cmp	r3, r2
 8000c60:	bfc4      	itt	gt
 8000c62:	1a9b      	subgt	r3, r3, r2
 8000c64:	18ed      	addgt	r5, r5, r3
 8000c66:	2600      	movs	r6, #0
 8000c68:	341a      	adds	r4, #26
 8000c6a:	42b5      	cmp	r5, r6
 8000c6c:	d11a      	bne.n	8000ca4 <_printf_common+0xc8>
 8000c6e:	2000      	movs	r0, #0
 8000c70:	e008      	b.n	8000c84 <_printf_common+0xa8>
 8000c72:	2301      	movs	r3, #1
 8000c74:	4652      	mov	r2, sl
 8000c76:	4641      	mov	r1, r8
 8000c78:	4638      	mov	r0, r7
 8000c7a:	47c8      	blx	r9
 8000c7c:	3001      	adds	r0, #1
 8000c7e:	d103      	bne.n	8000c88 <_printf_common+0xac>
 8000c80:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000c84:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c88:	3501      	adds	r5, #1
 8000c8a:	e7c6      	b.n	8000c1a <_printf_common+0x3e>
 8000c8c:	18e1      	adds	r1, r4, r3
 8000c8e:	1c5a      	adds	r2, r3, #1
 8000c90:	2030      	movs	r0, #48	@ 0x30
 8000c92:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8000c96:	4422      	add	r2, r4
 8000c98:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8000c9c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8000ca0:	3302      	adds	r3, #2
 8000ca2:	e7c7      	b.n	8000c34 <_printf_common+0x58>
 8000ca4:	2301      	movs	r3, #1
 8000ca6:	4622      	mov	r2, r4
 8000ca8:	4641      	mov	r1, r8
 8000caa:	4638      	mov	r0, r7
 8000cac:	47c8      	blx	r9
 8000cae:	3001      	adds	r0, #1
 8000cb0:	d0e6      	beq.n	8000c80 <_printf_common+0xa4>
 8000cb2:	3601      	adds	r6, #1
 8000cb4:	e7d9      	b.n	8000c6a <_printf_common+0x8e>
	...

08000cb8 <_printf_i>:
 8000cb8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8000cbc:	7e0f      	ldrb	r7, [r1, #24]
 8000cbe:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8000cc0:	2f78      	cmp	r7, #120	@ 0x78
 8000cc2:	4691      	mov	r9, r2
 8000cc4:	4680      	mov	r8, r0
 8000cc6:	460c      	mov	r4, r1
 8000cc8:	469a      	mov	sl, r3
 8000cca:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8000cce:	d807      	bhi.n	8000ce0 <_printf_i+0x28>
 8000cd0:	2f62      	cmp	r7, #98	@ 0x62
 8000cd2:	d80a      	bhi.n	8000cea <_printf_i+0x32>
 8000cd4:	2f00      	cmp	r7, #0
 8000cd6:	f000 80d2 	beq.w	8000e7e <_printf_i+0x1c6>
 8000cda:	2f58      	cmp	r7, #88	@ 0x58
 8000cdc:	f000 80b9 	beq.w	8000e52 <_printf_i+0x19a>
 8000ce0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8000ce4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8000ce8:	e03a      	b.n	8000d60 <_printf_i+0xa8>
 8000cea:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8000cee:	2b15      	cmp	r3, #21
 8000cf0:	d8f6      	bhi.n	8000ce0 <_printf_i+0x28>
 8000cf2:	a101      	add	r1, pc, #4	@ (adr r1, 8000cf8 <_printf_i+0x40>)
 8000cf4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8000cf8:	08000d51 	.word	0x08000d51
 8000cfc:	08000d65 	.word	0x08000d65
 8000d00:	08000ce1 	.word	0x08000ce1
 8000d04:	08000ce1 	.word	0x08000ce1
 8000d08:	08000ce1 	.word	0x08000ce1
 8000d0c:	08000ce1 	.word	0x08000ce1
 8000d10:	08000d65 	.word	0x08000d65
 8000d14:	08000ce1 	.word	0x08000ce1
 8000d18:	08000ce1 	.word	0x08000ce1
 8000d1c:	08000ce1 	.word	0x08000ce1
 8000d20:	08000ce1 	.word	0x08000ce1
 8000d24:	08000e65 	.word	0x08000e65
 8000d28:	08000d8f 	.word	0x08000d8f
 8000d2c:	08000e1f 	.word	0x08000e1f
 8000d30:	08000ce1 	.word	0x08000ce1
 8000d34:	08000ce1 	.word	0x08000ce1
 8000d38:	08000e87 	.word	0x08000e87
 8000d3c:	08000ce1 	.word	0x08000ce1
 8000d40:	08000d8f 	.word	0x08000d8f
 8000d44:	08000ce1 	.word	0x08000ce1
 8000d48:	08000ce1 	.word	0x08000ce1
 8000d4c:	08000e27 	.word	0x08000e27
 8000d50:	6833      	ldr	r3, [r6, #0]
 8000d52:	1d1a      	adds	r2, r3, #4
 8000d54:	681b      	ldr	r3, [r3, #0]
 8000d56:	6032      	str	r2, [r6, #0]
 8000d58:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8000d5c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8000d60:	2301      	movs	r3, #1
 8000d62:	e09d      	b.n	8000ea0 <_printf_i+0x1e8>
 8000d64:	6833      	ldr	r3, [r6, #0]
 8000d66:	6820      	ldr	r0, [r4, #0]
 8000d68:	1d19      	adds	r1, r3, #4
 8000d6a:	6031      	str	r1, [r6, #0]
 8000d6c:	0606      	lsls	r6, r0, #24
 8000d6e:	d501      	bpl.n	8000d74 <_printf_i+0xbc>
 8000d70:	681d      	ldr	r5, [r3, #0]
 8000d72:	e003      	b.n	8000d7c <_printf_i+0xc4>
 8000d74:	0645      	lsls	r5, r0, #25
 8000d76:	d5fb      	bpl.n	8000d70 <_printf_i+0xb8>
 8000d78:	f9b3 5000 	ldrsh.w	r5, [r3]
 8000d7c:	2d00      	cmp	r5, #0
 8000d7e:	da03      	bge.n	8000d88 <_printf_i+0xd0>
 8000d80:	232d      	movs	r3, #45	@ 0x2d
 8000d82:	426d      	negs	r5, r5
 8000d84:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8000d88:	4859      	ldr	r0, [pc, #356]	@ (8000ef0 <_printf_i+0x238>)
 8000d8a:	230a      	movs	r3, #10
 8000d8c:	e011      	b.n	8000db2 <_printf_i+0xfa>
 8000d8e:	6821      	ldr	r1, [r4, #0]
 8000d90:	6833      	ldr	r3, [r6, #0]
 8000d92:	0608      	lsls	r0, r1, #24
 8000d94:	f853 5b04 	ldr.w	r5, [r3], #4
 8000d98:	d402      	bmi.n	8000da0 <_printf_i+0xe8>
 8000d9a:	0649      	lsls	r1, r1, #25
 8000d9c:	bf48      	it	mi
 8000d9e:	b2ad      	uxthmi	r5, r5
 8000da0:	2f6f      	cmp	r7, #111	@ 0x6f
 8000da2:	4853      	ldr	r0, [pc, #332]	@ (8000ef0 <_printf_i+0x238>)
 8000da4:	6033      	str	r3, [r6, #0]
 8000da6:	bf14      	ite	ne
 8000da8:	230a      	movne	r3, #10
 8000daa:	2308      	moveq	r3, #8
 8000dac:	2100      	movs	r1, #0
 8000dae:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8000db2:	6866      	ldr	r6, [r4, #4]
 8000db4:	60a6      	str	r6, [r4, #8]
 8000db6:	2e00      	cmp	r6, #0
 8000db8:	bfa2      	ittt	ge
 8000dba:	6821      	ldrge	r1, [r4, #0]
 8000dbc:	f021 0104 	bicge.w	r1, r1, #4
 8000dc0:	6021      	strge	r1, [r4, #0]
 8000dc2:	b90d      	cbnz	r5, 8000dc8 <_printf_i+0x110>
 8000dc4:	2e00      	cmp	r6, #0
 8000dc6:	d04b      	beq.n	8000e60 <_printf_i+0x1a8>
 8000dc8:	4616      	mov	r6, r2
 8000dca:	fbb5 f1f3 	udiv	r1, r5, r3
 8000dce:	fb03 5711 	mls	r7, r3, r1, r5
 8000dd2:	5dc7      	ldrb	r7, [r0, r7]
 8000dd4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8000dd8:	462f      	mov	r7, r5
 8000dda:	42bb      	cmp	r3, r7
 8000ddc:	460d      	mov	r5, r1
 8000dde:	d9f4      	bls.n	8000dca <_printf_i+0x112>
 8000de0:	2b08      	cmp	r3, #8
 8000de2:	d10b      	bne.n	8000dfc <_printf_i+0x144>
 8000de4:	6823      	ldr	r3, [r4, #0]
 8000de6:	07df      	lsls	r7, r3, #31
 8000de8:	d508      	bpl.n	8000dfc <_printf_i+0x144>
 8000dea:	6923      	ldr	r3, [r4, #16]
 8000dec:	6861      	ldr	r1, [r4, #4]
 8000dee:	4299      	cmp	r1, r3
 8000df0:	bfde      	ittt	le
 8000df2:	2330      	movle	r3, #48	@ 0x30
 8000df4:	f806 3c01 	strble.w	r3, [r6, #-1]
 8000df8:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8000dfc:	1b92      	subs	r2, r2, r6
 8000dfe:	6122      	str	r2, [r4, #16]
 8000e00:	f8cd a000 	str.w	sl, [sp]
 8000e04:	464b      	mov	r3, r9
 8000e06:	aa03      	add	r2, sp, #12
 8000e08:	4621      	mov	r1, r4
 8000e0a:	4640      	mov	r0, r8
 8000e0c:	f7ff fee6 	bl	8000bdc <_printf_common>
 8000e10:	3001      	adds	r0, #1
 8000e12:	d14a      	bne.n	8000eaa <_printf_i+0x1f2>
 8000e14:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000e18:	b004      	add	sp, #16
 8000e1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e1e:	6823      	ldr	r3, [r4, #0]
 8000e20:	f043 0320 	orr.w	r3, r3, #32
 8000e24:	6023      	str	r3, [r4, #0]
 8000e26:	4833      	ldr	r0, [pc, #204]	@ (8000ef4 <_printf_i+0x23c>)
 8000e28:	2778      	movs	r7, #120	@ 0x78
 8000e2a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8000e2e:	6823      	ldr	r3, [r4, #0]
 8000e30:	6831      	ldr	r1, [r6, #0]
 8000e32:	061f      	lsls	r7, r3, #24
 8000e34:	f851 5b04 	ldr.w	r5, [r1], #4
 8000e38:	d402      	bmi.n	8000e40 <_printf_i+0x188>
 8000e3a:	065f      	lsls	r7, r3, #25
 8000e3c:	bf48      	it	mi
 8000e3e:	b2ad      	uxthmi	r5, r5
 8000e40:	6031      	str	r1, [r6, #0]
 8000e42:	07d9      	lsls	r1, r3, #31
 8000e44:	bf44      	itt	mi
 8000e46:	f043 0320 	orrmi.w	r3, r3, #32
 8000e4a:	6023      	strmi	r3, [r4, #0]
 8000e4c:	b11d      	cbz	r5, 8000e56 <_printf_i+0x19e>
 8000e4e:	2310      	movs	r3, #16
 8000e50:	e7ac      	b.n	8000dac <_printf_i+0xf4>
 8000e52:	4827      	ldr	r0, [pc, #156]	@ (8000ef0 <_printf_i+0x238>)
 8000e54:	e7e9      	b.n	8000e2a <_printf_i+0x172>
 8000e56:	6823      	ldr	r3, [r4, #0]
 8000e58:	f023 0320 	bic.w	r3, r3, #32
 8000e5c:	6023      	str	r3, [r4, #0]
 8000e5e:	e7f6      	b.n	8000e4e <_printf_i+0x196>
 8000e60:	4616      	mov	r6, r2
 8000e62:	e7bd      	b.n	8000de0 <_printf_i+0x128>
 8000e64:	6833      	ldr	r3, [r6, #0]
 8000e66:	6825      	ldr	r5, [r4, #0]
 8000e68:	6961      	ldr	r1, [r4, #20]
 8000e6a:	1d18      	adds	r0, r3, #4
 8000e6c:	6030      	str	r0, [r6, #0]
 8000e6e:	062e      	lsls	r6, r5, #24
 8000e70:	681b      	ldr	r3, [r3, #0]
 8000e72:	d501      	bpl.n	8000e78 <_printf_i+0x1c0>
 8000e74:	6019      	str	r1, [r3, #0]
 8000e76:	e002      	b.n	8000e7e <_printf_i+0x1c6>
 8000e78:	0668      	lsls	r0, r5, #25
 8000e7a:	d5fb      	bpl.n	8000e74 <_printf_i+0x1bc>
 8000e7c:	8019      	strh	r1, [r3, #0]
 8000e7e:	2300      	movs	r3, #0
 8000e80:	6123      	str	r3, [r4, #16]
 8000e82:	4616      	mov	r6, r2
 8000e84:	e7bc      	b.n	8000e00 <_printf_i+0x148>
 8000e86:	6833      	ldr	r3, [r6, #0]
 8000e88:	1d1a      	adds	r2, r3, #4
 8000e8a:	6032      	str	r2, [r6, #0]
 8000e8c:	681e      	ldr	r6, [r3, #0]
 8000e8e:	6862      	ldr	r2, [r4, #4]
 8000e90:	2100      	movs	r1, #0
 8000e92:	4630      	mov	r0, r6
 8000e94:	f7ff f9a4 	bl	80001e0 <memchr>
 8000e98:	b108      	cbz	r0, 8000e9e <_printf_i+0x1e6>
 8000e9a:	1b80      	subs	r0, r0, r6
 8000e9c:	6060      	str	r0, [r4, #4]
 8000e9e:	6863      	ldr	r3, [r4, #4]
 8000ea0:	6123      	str	r3, [r4, #16]
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8000ea8:	e7aa      	b.n	8000e00 <_printf_i+0x148>
 8000eaa:	6923      	ldr	r3, [r4, #16]
 8000eac:	4632      	mov	r2, r6
 8000eae:	4649      	mov	r1, r9
 8000eb0:	4640      	mov	r0, r8
 8000eb2:	47d0      	blx	sl
 8000eb4:	3001      	adds	r0, #1
 8000eb6:	d0ad      	beq.n	8000e14 <_printf_i+0x15c>
 8000eb8:	6823      	ldr	r3, [r4, #0]
 8000eba:	079b      	lsls	r3, r3, #30
 8000ebc:	d413      	bmi.n	8000ee6 <_printf_i+0x22e>
 8000ebe:	68e0      	ldr	r0, [r4, #12]
 8000ec0:	9b03      	ldr	r3, [sp, #12]
 8000ec2:	4298      	cmp	r0, r3
 8000ec4:	bfb8      	it	lt
 8000ec6:	4618      	movlt	r0, r3
 8000ec8:	e7a6      	b.n	8000e18 <_printf_i+0x160>
 8000eca:	2301      	movs	r3, #1
 8000ecc:	4632      	mov	r2, r6
 8000ece:	4649      	mov	r1, r9
 8000ed0:	4640      	mov	r0, r8
 8000ed2:	47d0      	blx	sl
 8000ed4:	3001      	adds	r0, #1
 8000ed6:	d09d      	beq.n	8000e14 <_printf_i+0x15c>
 8000ed8:	3501      	adds	r5, #1
 8000eda:	68e3      	ldr	r3, [r4, #12]
 8000edc:	9903      	ldr	r1, [sp, #12]
 8000ede:	1a5b      	subs	r3, r3, r1
 8000ee0:	42ab      	cmp	r3, r5
 8000ee2:	dcf2      	bgt.n	8000eca <_printf_i+0x212>
 8000ee4:	e7eb      	b.n	8000ebe <_printf_i+0x206>
 8000ee6:	2500      	movs	r5, #0
 8000ee8:	f104 0619 	add.w	r6, r4, #25
 8000eec:	e7f5      	b.n	8000eda <_printf_i+0x222>
 8000eee:	bf00      	nop
 8000ef0:	080010f9 	.word	0x080010f9
 8000ef4:	0800110a 	.word	0x0800110a

08000ef8 <__malloc_lock>:
 8000ef8:	4801      	ldr	r0, [pc, #4]	@ (8000f00 <__malloc_lock+0x8>)
 8000efa:	f7ff bc73 	b.w	80007e4 <__retarget_lock_acquire_recursive>
 8000efe:	bf00      	nop
 8000f00:	200001ac 	.word	0x200001ac

08000f04 <__malloc_unlock>:
 8000f04:	4801      	ldr	r0, [pc, #4]	@ (8000f0c <__malloc_unlock+0x8>)
 8000f06:	f7ff bc6e 	b.w	80007e6 <__retarget_lock_release_recursive>
 8000f0a:	bf00      	nop
 8000f0c:	200001ac 	.word	0x200001ac

08000f10 <_realloc_r>:
 8000f10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000f14:	4680      	mov	r8, r0
 8000f16:	4615      	mov	r5, r2
 8000f18:	460c      	mov	r4, r1
 8000f1a:	b921      	cbnz	r1, 8000f26 <_realloc_r+0x16>
 8000f1c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8000f20:	4611      	mov	r1, r2
 8000f22:	f7ff bddb 	b.w	8000adc <_malloc_r>
 8000f26:	b92a      	cbnz	r2, 8000f34 <_realloc_r+0x24>
 8000f28:	f000 f858 	bl	8000fdc <_free_r>
 8000f2c:	2400      	movs	r4, #0
 8000f2e:	4620      	mov	r0, r4
 8000f30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000f34:	f000 f89c 	bl	8001070 <_malloc_usable_size_r>
 8000f38:	4285      	cmp	r5, r0
 8000f3a:	4606      	mov	r6, r0
 8000f3c:	d802      	bhi.n	8000f44 <_realloc_r+0x34>
 8000f3e:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8000f42:	d8f4      	bhi.n	8000f2e <_realloc_r+0x1e>
 8000f44:	4629      	mov	r1, r5
 8000f46:	4640      	mov	r0, r8
 8000f48:	f7ff fdc8 	bl	8000adc <_malloc_r>
 8000f4c:	4607      	mov	r7, r0
 8000f4e:	2800      	cmp	r0, #0
 8000f50:	d0ec      	beq.n	8000f2c <_realloc_r+0x1c>
 8000f52:	42b5      	cmp	r5, r6
 8000f54:	462a      	mov	r2, r5
 8000f56:	4621      	mov	r1, r4
 8000f58:	bf28      	it	cs
 8000f5a:	4632      	movcs	r2, r6
 8000f5c:	f000 f830 	bl	8000fc0 <memcpy>
 8000f60:	4621      	mov	r1, r4
 8000f62:	4640      	mov	r0, r8
 8000f64:	f000 f83a 	bl	8000fdc <_free_r>
 8000f68:	463c      	mov	r4, r7
 8000f6a:	e7e0      	b.n	8000f2e <_realloc_r+0x1e>

08000f6c <memmove>:
 8000f6c:	4288      	cmp	r0, r1
 8000f6e:	b510      	push	{r4, lr}
 8000f70:	eb01 0402 	add.w	r4, r1, r2
 8000f74:	d902      	bls.n	8000f7c <memmove+0x10>
 8000f76:	4284      	cmp	r4, r0
 8000f78:	4623      	mov	r3, r4
 8000f7a:	d807      	bhi.n	8000f8c <memmove+0x20>
 8000f7c:	1e43      	subs	r3, r0, #1
 8000f7e:	42a1      	cmp	r1, r4
 8000f80:	d008      	beq.n	8000f94 <memmove+0x28>
 8000f82:	f811 2b01 	ldrb.w	r2, [r1], #1
 8000f86:	f803 2f01 	strb.w	r2, [r3, #1]!
 8000f8a:	e7f8      	b.n	8000f7e <memmove+0x12>
 8000f8c:	4402      	add	r2, r0
 8000f8e:	4601      	mov	r1, r0
 8000f90:	428a      	cmp	r2, r1
 8000f92:	d100      	bne.n	8000f96 <memmove+0x2a>
 8000f94:	bd10      	pop	{r4, pc}
 8000f96:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8000f9a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8000f9e:	e7f7      	b.n	8000f90 <memmove+0x24>

08000fa0 <_sbrk_r>:
 8000fa0:	b538      	push	{r3, r4, r5, lr}
 8000fa2:	4d06      	ldr	r5, [pc, #24]	@ (8000fbc <_sbrk_r+0x1c>)
 8000fa4:	2300      	movs	r3, #0
 8000fa6:	4604      	mov	r4, r0
 8000fa8:	4608      	mov	r0, r1
 8000faa:	602b      	str	r3, [r5, #0]
 8000fac:	f7ff fa2a 	bl	8000404 <_sbrk>
 8000fb0:	1c43      	adds	r3, r0, #1
 8000fb2:	d102      	bne.n	8000fba <_sbrk_r+0x1a>
 8000fb4:	682b      	ldr	r3, [r5, #0]
 8000fb6:	b103      	cbz	r3, 8000fba <_sbrk_r+0x1a>
 8000fb8:	6023      	str	r3, [r4, #0]
 8000fba:	bd38      	pop	{r3, r4, r5, pc}
 8000fbc:	200001b8 	.word	0x200001b8

08000fc0 <memcpy>:
 8000fc0:	440a      	add	r2, r1
 8000fc2:	4291      	cmp	r1, r2
 8000fc4:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8000fc8:	d100      	bne.n	8000fcc <memcpy+0xc>
 8000fca:	4770      	bx	lr
 8000fcc:	b510      	push	{r4, lr}
 8000fce:	f811 4b01 	ldrb.w	r4, [r1], #1
 8000fd2:	f803 4f01 	strb.w	r4, [r3, #1]!
 8000fd6:	4291      	cmp	r1, r2
 8000fd8:	d1f9      	bne.n	8000fce <memcpy+0xe>
 8000fda:	bd10      	pop	{r4, pc}

08000fdc <_free_r>:
 8000fdc:	b538      	push	{r3, r4, r5, lr}
 8000fde:	4605      	mov	r5, r0
 8000fe0:	2900      	cmp	r1, #0
 8000fe2:	d041      	beq.n	8001068 <_free_r+0x8c>
 8000fe4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8000fe8:	1f0c      	subs	r4, r1, #4
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	bfb8      	it	lt
 8000fee:	18e4      	addlt	r4, r4, r3
 8000ff0:	f7ff ff82 	bl	8000ef8 <__malloc_lock>
 8000ff4:	4a1d      	ldr	r2, [pc, #116]	@ (800106c <_free_r+0x90>)
 8000ff6:	6813      	ldr	r3, [r2, #0]
 8000ff8:	b933      	cbnz	r3, 8001008 <_free_r+0x2c>
 8000ffa:	6063      	str	r3, [r4, #4]
 8000ffc:	6014      	str	r4, [r2, #0]
 8000ffe:	4628      	mov	r0, r5
 8001000:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001004:	f7ff bf7e 	b.w	8000f04 <__malloc_unlock>
 8001008:	42a3      	cmp	r3, r4
 800100a:	d908      	bls.n	800101e <_free_r+0x42>
 800100c:	6820      	ldr	r0, [r4, #0]
 800100e:	1821      	adds	r1, r4, r0
 8001010:	428b      	cmp	r3, r1
 8001012:	bf01      	itttt	eq
 8001014:	6819      	ldreq	r1, [r3, #0]
 8001016:	685b      	ldreq	r3, [r3, #4]
 8001018:	1809      	addeq	r1, r1, r0
 800101a:	6021      	streq	r1, [r4, #0]
 800101c:	e7ed      	b.n	8000ffa <_free_r+0x1e>
 800101e:	461a      	mov	r2, r3
 8001020:	685b      	ldr	r3, [r3, #4]
 8001022:	b10b      	cbz	r3, 8001028 <_free_r+0x4c>
 8001024:	42a3      	cmp	r3, r4
 8001026:	d9fa      	bls.n	800101e <_free_r+0x42>
 8001028:	6811      	ldr	r1, [r2, #0]
 800102a:	1850      	adds	r0, r2, r1
 800102c:	42a0      	cmp	r0, r4
 800102e:	d10b      	bne.n	8001048 <_free_r+0x6c>
 8001030:	6820      	ldr	r0, [r4, #0]
 8001032:	4401      	add	r1, r0
 8001034:	1850      	adds	r0, r2, r1
 8001036:	4283      	cmp	r3, r0
 8001038:	6011      	str	r1, [r2, #0]
 800103a:	d1e0      	bne.n	8000ffe <_free_r+0x22>
 800103c:	6818      	ldr	r0, [r3, #0]
 800103e:	685b      	ldr	r3, [r3, #4]
 8001040:	6053      	str	r3, [r2, #4]
 8001042:	4408      	add	r0, r1
 8001044:	6010      	str	r0, [r2, #0]
 8001046:	e7da      	b.n	8000ffe <_free_r+0x22>
 8001048:	d902      	bls.n	8001050 <_free_r+0x74>
 800104a:	230c      	movs	r3, #12
 800104c:	602b      	str	r3, [r5, #0]
 800104e:	e7d6      	b.n	8000ffe <_free_r+0x22>
 8001050:	6820      	ldr	r0, [r4, #0]
 8001052:	1821      	adds	r1, r4, r0
 8001054:	428b      	cmp	r3, r1
 8001056:	bf04      	itt	eq
 8001058:	6819      	ldreq	r1, [r3, #0]
 800105a:	685b      	ldreq	r3, [r3, #4]
 800105c:	6063      	str	r3, [r4, #4]
 800105e:	bf04      	itt	eq
 8001060:	1809      	addeq	r1, r1, r0
 8001062:	6021      	streq	r1, [r4, #0]
 8001064:	6054      	str	r4, [r2, #4]
 8001066:	e7ca      	b.n	8000ffe <_free_r+0x22>
 8001068:	bd38      	pop	{r3, r4, r5, pc}
 800106a:	bf00      	nop
 800106c:	200001b4 	.word	0x200001b4

08001070 <_malloc_usable_size_r>:
 8001070:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001074:	1f18      	subs	r0, r3, #4
 8001076:	2b00      	cmp	r3, #0
 8001078:	bfbc      	itt	lt
 800107a:	580b      	ldrlt	r3, [r1, r0]
 800107c:	18c0      	addlt	r0, r0, r3
 800107e:	4770      	bx	lr

08001080 <_init>:
 8001080:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001082:	bf00      	nop
 8001084:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001086:	bc08      	pop	{r3}
 8001088:	469e      	mov	lr, r3
 800108a:	4770      	bx	lr

0800108c <_fini>:
 800108c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800108e:	bf00      	nop
 8001090:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001092:	bc08      	pop	{r3}
 8001094:	469e      	mov	lr, r3
 8001096:	4770      	bx	lr
