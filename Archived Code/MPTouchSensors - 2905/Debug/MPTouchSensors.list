
MPTouchSensors.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000032f8  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000024c  08003488  08003488  00004488  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080036d4  080036d4  000050a4  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080036d4  080036d4  000046d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080036dc  080036dc  000050a4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080036dc  080036dc  000046dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080036e0  080036e0  000046e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000000a4  20000000  080036e4  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000050a4  2**0
                  CONTENTS
 10 .bss          000001b0  200000a4  200000a4  000050a4  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000254  20000254  000050a4  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000050a4  2**0
                  CONTENTS, READONLY
 13 .debug_info   00005f87  00000000  00000000  000050d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000018c4  00000000  00000000  0000b05b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000005e0  00000000  00000000  0000c920  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000440  00000000  00000000  0000cf00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001d945  00000000  00000000  0000d340  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00008bb8  00000000  00000000  0002ac85  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ac746  00000000  00000000  0003383d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000dff83  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000019fc  00000000  00000000  000dffc8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000069  00000000  00000000  000e19c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200000a4 	.word	0x200000a4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08003470 	.word	0x08003470

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200000a8 	.word	0x200000a8
 80001cc:	08003470 	.word	0x08003470

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <touch_threshold>:
extern SerialPort USART1_PORT;

static uint8_t pattern[PATTERN_LENGTH] = {0, 2, 4, 1, 5, 7};  // example LED indices corresponding to sensors

static inline uint32_t touch_threshold(uint8_t group)
{
 8000270:	b480      	push	{r7}
 8000272:	b083      	sub	sp, #12
 8000274:	af00      	add	r7, sp, #0
 8000276:	4603      	mov	r3, r0
 8000278:	71fb      	strb	r3, [r7, #7]
    if (group == 5)
 800027a:	79fb      	ldrb	r3, [r7, #7]
 800027c:	2b05      	cmp	r3, #5
 800027e:	d102      	bne.n	8000286 <touch_threshold+0x16>
        return 900;
 8000280:	f44f 7361 	mov.w	r3, #900	@ 0x384
 8000284:	e001      	b.n	800028a <touch_threshold+0x1a>
    else
        return 1300;
 8000286:	f240 5314 	movw	r3, #1300	@ 0x514
}
 800028a:	4618      	mov	r0, r3
 800028c:	370c      	adds	r7, #12
 800028e:	46bd      	mov	sp, r7
 8000290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000294:	4770      	bx	lr
	...

08000298 <StartMinigame>:
    // Return 0 if no touch detected (optional)
    return 0;
}


void StartMinigame(TSC_HandleTypeDef *htsc) {
 8000298:	b580      	push	{r7, lr}
 800029a:	b09a      	sub	sp, #104	@ 0x68
 800029c:	af02      	add	r7, sp, #8
 800029e:	6078      	str	r0, [r7, #4]
    LED_Init();
 80002a0:	f000 f972 	bl	8000588 <LED_Init>
    UI_PrintWelcomeMessage();
 80002a4:	f000 fdf4 	bl	8000e90 <UI_PrintWelcomeMessage>
    HAL_Delay(5000);
 80002a8:	f241 3088 	movw	r0, #5000	@ 0x1388
 80002ac:	f000 fe92 	bl	8000fd4 <HAL_Delay>

    char uart_msg[64];


    while (1) {
        LED_DisplayPattern(pattern, PATTERN_LENGTH, 400);
 80002b0:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 80002b4:	2106      	movs	r1, #6
 80002b6:	4869      	ldr	r0, [pc, #420]	@ (800045c <StartMinigame+0x1c4>)
 80002b8:	f000 f9c4 	bl	8000644 <LED_DisplayPattern>

        uint8_t user_input[PATTERN_LENGTH];

        for (uint8_t i = 0; i < PATTERN_LENGTH; i++) {
 80002bc:	2300      	movs	r3, #0
 80002be:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 80002c2:	e0a8      	b.n	8000416 <StartMinigame+0x17e>
            // Map pattern index to TSC group (1-based), skipping group 4
            uint8_t group = pattern[i] + 1;
 80002c4:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80002c8:	4a64      	ldr	r2, [pc, #400]	@ (800045c <StartMinigame+0x1c4>)
 80002ca:	5cd3      	ldrb	r3, [r2, r3]
 80002cc:	3301      	adds	r3, #1
 80002ce:	f887 305e 	strb.w	r3, [r7, #94]	@ 0x5e
            if (group == 4) group++;
 80002d2:	f897 305e 	ldrb.w	r3, [r7, #94]	@ 0x5e
 80002d6:	2b04      	cmp	r3, #4
 80002d8:	d104      	bne.n	80002e4 <StartMinigame+0x4c>
 80002da:	f897 305e 	ldrb.w	r3, [r7, #94]	@ 0x5e
 80002de:	3301      	adds	r3, #1
 80002e0:	f887 305e 	strb.w	r3, [r7, #94]	@ 0x5e
            if (group == 7) group++;
 80002e4:	f897 305e 	ldrb.w	r3, [r7, #94]	@ 0x5e
 80002e8:	2b07      	cmp	r3, #7
 80002ea:	d104      	bne.n	80002f6 <StartMinigame+0x5e>
 80002ec:	f897 305e 	ldrb.w	r3, [r7, #94]	@ 0x5e
 80002f0:	3301      	adds	r3, #1
 80002f2:	f887 305e 	strb.w	r3, [r7, #94]	@ 0x5e

            // Disable all groups first (clear enable mask)
            htsc->Instance->IOGCSR &= ~TSC_IOGCSR_G7E_Msk;
 80002f6:	687b      	ldr	r3, [r7, #4]
 80002f8:	681b      	ldr	r3, [r3, #0]
 80002fa:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80002fc:	687b      	ldr	r3, [r7, #4]
 80002fe:	681b      	ldr	r3, [r3, #0]
 8000300:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8000304:	631a      	str	r2, [r3, #48]	@ 0x30
            htsc->Instance->IOGCSR |= (1 << group);
 8000306:	687b      	ldr	r3, [r7, #4]
 8000308:	681b      	ldr	r3, [r3, #0]
 800030a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800030c:	f897 305e 	ldrb.w	r3, [r7, #94]	@ 0x5e
 8000310:	2101      	movs	r1, #1
 8000312:	fa01 f303 	lsl.w	r3, r1, r3
 8000316:	4619      	mov	r1, r3
 8000318:	687b      	ldr	r3, [r7, #4]
 800031a:	681b      	ldr	r3, [r3, #0]
 800031c:	430a      	orrs	r2, r1
 800031e:	631a      	str	r2, [r3, #48]	@ 0x30

            // Discharge IOs before acquisition
            HAL_TSC_IODischarge(htsc, ENABLE);
 8000320:	2101      	movs	r1, #1
 8000322:	6878      	ldr	r0, [r7, #4]
 8000324:	f002 fb9b 	bl	8002a5e <HAL_TSC_IODischarge>
            HAL_Delay(1);
 8000328:	2001      	movs	r0, #1
 800032a:	f000 fe53 	bl	8000fd4 <HAL_Delay>
            HAL_TSC_IODischarge(htsc, DISABLE);
 800032e:	2100      	movs	r1, #0
 8000330:	6878      	ldr	r0, [r7, #4]
 8000332:	f002 fb94 	bl	8002a5e <HAL_TSC_IODischarge>

            // Start acquisition
            HAL_TSC_Start(htsc);
 8000336:	6878      	ldr	r0, [r7, #4]
 8000338:	f002 fb38 	bl	80029ac <HAL_TSC_Start>

            // Wait for acquisition complete
            while ((htsc->Instance->ISR & TSC_ISR_EOAF) == 0) {}
 800033c:	bf00      	nop
 800033e:	687b      	ldr	r3, [r7, #4]
 8000340:	681b      	ldr	r3, [r3, #0]
 8000342:	68db      	ldr	r3, [r3, #12]
 8000344:	f003 0301 	and.w	r3, r3, #1
 8000348:	2b00      	cmp	r3, #0
 800034a:	d0f8      	beq.n	800033e <StartMinigame+0xa6>

            // Clear acquisition flag
            htsc->Instance->ICR = TSC_ISR_EOAF;
 800034c:	687b      	ldr	r3, [r7, #4]
 800034e:	681b      	ldr	r3, [r3, #0]
 8000350:	2201      	movs	r2, #1
 8000352:	609a      	str	r2, [r3, #8]

            // Read raw sampling value
            uint32_t tsc_value = HAL_TSC_GroupGetValue(htsc, group - 1);
 8000354:	f897 305e 	ldrb.w	r3, [r7, #94]	@ 0x5e
 8000358:	3b01      	subs	r3, #1
 800035a:	4619      	mov	r1, r3
 800035c:	6878      	ldr	r0, [r7, #4]
 800035e:	f002 fb6c 	bl	8002a3a <HAL_TSC_GroupGetValue>
 8000362:	65b8      	str	r0, [r7, #88]	@ 0x58

            // Print raw value for debugging
            snprintf(uart_msg, sizeof(uart_msg), "Group %d raw: %lu\r\n", group, tsc_value);
 8000364:	f897 205e 	ldrb.w	r2, [r7, #94]	@ 0x5e
 8000368:	f107 0014 	add.w	r0, r7, #20
 800036c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800036e:	9300      	str	r3, [sp, #0]
 8000370:	4613      	mov	r3, r2
 8000372:	4a3b      	ldr	r2, [pc, #236]	@ (8000460 <StartMinigame+0x1c8>)
 8000374:	2140      	movs	r1, #64	@ 0x40
 8000376:	f002 fbc7 	bl	8002b08 <sniprintf>
            SerialOutputString((uint8_t *)uart_msg, &USART1_PORT);
 800037a:	f107 0314 	add.w	r3, r7, #20
 800037e:	4939      	ldr	r1, [pc, #228]	@ (8000464 <StartMinigame+0x1cc>)
 8000380:	4618      	mov	r0, r3
 8000382:	f000 fbe2 	bl	8000b4a <SerialOutputString>

            // Check touch threshold internally
            bool touch_detected = (tsc_value < touch_threshold(group));
 8000386:	f897 305e 	ldrb.w	r3, [r7, #94]	@ 0x5e
 800038a:	4618      	mov	r0, r3
 800038c:	f7ff ff70 	bl	8000270 <touch_threshold>
 8000390:	4602      	mov	r2, r0
 8000392:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8000394:	4293      	cmp	r3, r2
 8000396:	bf34      	ite	cc
 8000398:	2301      	movcc	r3, #1
 800039a:	2300      	movcs	r3, #0
 800039c:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

            if (touch_detected) {
 80003a0:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80003a4:	2b00      	cmp	r3, #0
 80003a6:	d00d      	beq.n	80003c4 <StartMinigame+0x12c>
                snprintf(uart_msg, sizeof(uart_msg), "Group %d TOUCHED!\r\n", group);
 80003a8:	f897 305e 	ldrb.w	r3, [r7, #94]	@ 0x5e
 80003ac:	f107 0014 	add.w	r0, r7, #20
 80003b0:	4a2d      	ldr	r2, [pc, #180]	@ (8000468 <StartMinigame+0x1d0>)
 80003b2:	2140      	movs	r1, #64	@ 0x40
 80003b4:	f002 fba8 	bl	8002b08 <sniprintf>
                SerialOutputString((uint8_t *)uart_msg, &USART1_PORT);
 80003b8:	f107 0314 	add.w	r3, r7, #20
 80003bc:	4929      	ldr	r1, [pc, #164]	@ (8000464 <StartMinigame+0x1cc>)
 80003be:	4618      	mov	r0, r3
 80003c0:	f000 fbc3 	bl	8000b4a <SerialOutputString>
            }

            // Store detected or no-touch (e.g., 0xFF if no touch)
            user_input[i] = touch_detected ? pattern[i] : 0xFF;
 80003c4:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80003c8:	2b00      	cmp	r3, #0
 80003ca:	d004      	beq.n	80003d6 <StartMinigame+0x13e>
 80003cc:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80003d0:	4a22      	ldr	r2, [pc, #136]	@ (800045c <StartMinigame+0x1c4>)
 80003d2:	5cd2      	ldrb	r2, [r2, r3]
 80003d4:	e000      	b.n	80003d8 <StartMinigame+0x140>
 80003d6:	22ff      	movs	r2, #255	@ 0xff
 80003d8:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80003dc:	3360      	adds	r3, #96	@ 0x60
 80003de:	443b      	add	r3, r7
 80003e0:	f803 2c54 	strb.w	r2, [r3, #-84]

            // Turn ON PC7 for 1 second
            GPIOC->ODR |= (1 << 7);
 80003e4:	4b21      	ldr	r3, [pc, #132]	@ (800046c <StartMinigame+0x1d4>)
 80003e6:	695b      	ldr	r3, [r3, #20]
 80003e8:	4a20      	ldr	r2, [pc, #128]	@ (800046c <StartMinigame+0x1d4>)
 80003ea:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80003ee:	6153      	str	r3, [r2, #20]
            HAL_Delay(1000);
 80003f0:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80003f4:	f000 fdee 	bl	8000fd4 <HAL_Delay>

            // Turn OFF PC7
            GPIOC->ODR &= ~(1 << 7);
 80003f8:	4b1c      	ldr	r3, [pc, #112]	@ (800046c <StartMinigame+0x1d4>)
 80003fa:	695b      	ldr	r3, [r3, #20]
 80003fc:	4a1b      	ldr	r2, [pc, #108]	@ (800046c <StartMinigame+0x1d4>)
 80003fe:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8000402:	6153      	str	r3, [r2, #20]
            HAL_Delay(1000);
 8000404:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000408:	f000 fde4 	bl	8000fd4 <HAL_Delay>
        for (uint8_t i = 0; i < PATTERN_LENGTH; i++) {
 800040c:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8000410:	3301      	adds	r3, #1
 8000412:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8000416:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800041a:	2b05      	cmp	r3, #5
 800041c:	f67f af52 	bls.w	80002c4 <StartMinigame+0x2c>
        }

        bool success = Game_CheckPattern(pattern, user_input, PATTERN_LENGTH);
 8000420:	f107 030c 	add.w	r3, r7, #12
 8000424:	2206      	movs	r2, #6
 8000426:	4619      	mov	r1, r3
 8000428:	480c      	ldr	r0, [pc, #48]	@ (800045c <StartMinigame+0x1c4>)
 800042a:	f000 f86f 	bl	800050c <Game_CheckPattern>
 800042e:	4603      	mov	r3, r0
 8000430:	f887 305d 	strb.w	r3, [r7, #93]	@ 0x5d
        Game_ShowResult(success, &USART1_PORT);
 8000434:	f897 305d 	ldrb.w	r3, [r7, #93]	@ 0x5d
 8000438:	490a      	ldr	r1, [pc, #40]	@ (8000464 <StartMinigame+0x1cc>)
 800043a:	4618      	mov	r0, r3
 800043c:	f000 f818 	bl	8000470 <Game_ShowResult>

        if (success) {
 8000440:	f897 305d 	ldrb.w	r3, [r7, #93]	@ 0x5d
 8000444:	2b00      	cmp	r3, #0
 8000446:	d104      	bne.n	8000452 <StartMinigame+0x1ba>
            break; // Exit the loop on correct input
        }

        HAL_Delay(1000); // Wait before next round
 8000448:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800044c:	f000 fdc2 	bl	8000fd4 <HAL_Delay>
    while (1) {
 8000450:	e72e      	b.n	80002b0 <StartMinigame+0x18>
    }
}
 8000452:	bf00      	nop
 8000454:	3760      	adds	r7, #96	@ 0x60
 8000456:	46bd      	mov	sp, r7
 8000458:	bd80      	pop	{r7, pc}
 800045a:	bf00      	nop
 800045c:	20000000 	.word	0x20000000
 8000460:	08003488 	.word	0x08003488
 8000464:	20000008 	.word	0x20000008
 8000468:	0800349c 	.word	0x0800349c
 800046c:	48000800 	.word	0x48000800

08000470 <Game_ShowResult>:
    SerialOutputString((uint8_t *)"Watch the LEDs closely.\r\n", serial);
    SerialOutputString((uint8_t *)"Repeat the pattern using the touch sensors.\r\n", serial);
    SerialOutputString((uint8_t *)"You have two seconds per sensor.\r\n\r\n", serial);
}

void Game_ShowResult(bool success, SerialPort *serial) {
 8000470:	b580      	push	{r7, lr}
 8000472:	b082      	sub	sp, #8
 8000474:	af00      	add	r7, sp, #0
 8000476:	4603      	mov	r3, r0
 8000478:	6039      	str	r1, [r7, #0]
 800047a:	71fb      	strb	r3, [r7, #7]
    if (success) {
 800047c:	79fb      	ldrb	r3, [r7, #7]
 800047e:	2b00      	cmp	r3, #0
 8000480:	d024      	beq.n	80004cc <Game_ShowResult+0x5c>
        SerialOutputString((uint8_t *)"\r\n Correct pattern! You win!\r\n\r\n", serial);
 8000482:	6839      	ldr	r1, [r7, #0]
 8000484:	481d      	ldr	r0, [pc, #116]	@ (80004fc <Game_ShowResult+0x8c>)
 8000486:	f000 fb60 	bl	8000b4a <SerialOutputString>
        GPIOC->ODR |= (1 << 9);  // Turn on PC8 Simulate "won"
 800048a:	4b1d      	ldr	r3, [pc, #116]	@ (8000500 <Game_ShowResult+0x90>)
 800048c:	695b      	ldr	r3, [r3, #20]
 800048e:	4a1c      	ldr	r2, [pc, #112]	@ (8000500 <Game_ShowResult+0x90>)
 8000490:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000494:	6153      	str	r3, [r2, #20]
        HAL_Delay(2000);          // Wait 2000 ms = 2 seconds
 8000496:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 800049a:	f000 fd9b 	bl	8000fd4 <HAL_Delay>
        GPIOC->ODR &= ~(1 << 9);  // Turn off PC8
 800049e:	4b18      	ldr	r3, [pc, #96]	@ (8000500 <Game_ShowResult+0x90>)
 80004a0:	695b      	ldr	r3, [r3, #20]
 80004a2:	4a17      	ldr	r2, [pc, #92]	@ (8000500 <Game_ShowResult+0x90>)
 80004a4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80004a8:	6153      	str	r3, [r2, #20]

        GPIOD->ODR |= (1 << 3);    // Set PD3 HIGH
 80004aa:	4b16      	ldr	r3, [pc, #88]	@ (8000504 <Game_ShowResult+0x94>)
 80004ac:	695b      	ldr	r3, [r3, #20]
 80004ae:	4a15      	ldr	r2, [pc, #84]	@ (8000504 <Game_ShowResult+0x94>)
 80004b0:	f043 0308 	orr.w	r3, r3, #8
 80004b4:	6153      	str	r3, [r2, #20]
        HAL_Delay(500);             // Wait 500 ms
 80004b6:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80004ba:	f000 fd8b 	bl	8000fd4 <HAL_Delay>
        GPIOD->ODR &= ~(1 << 3);    // Set PD3 LOW
 80004be:	4b11      	ldr	r3, [pc, #68]	@ (8000504 <Game_ShowResult+0x94>)
 80004c0:	695b      	ldr	r3, [r3, #20]
 80004c2:	4a10      	ldr	r2, [pc, #64]	@ (8000504 <Game_ShowResult+0x94>)
 80004c4:	f023 0308 	bic.w	r3, r3, #8
 80004c8:	6153      	str	r3, [r2, #20]
        SerialOutputString((uint8_t *)"\r\n Wrong pattern. Restarting...\r\n\r\n", serial);
        GPIOC->ODR |= (1 << 8);  // Simulate "lost"
        HAL_Delay(2000);          // Wait 2000 ms = 2 seconds
        GPIOC->ODR &= ~(1 << 8);  // Turn off PC9
    }
}
 80004ca:	e013      	b.n	80004f4 <Game_ShowResult+0x84>
        SerialOutputString((uint8_t *)"\r\n Wrong pattern. Restarting...\r\n\r\n", serial);
 80004cc:	6839      	ldr	r1, [r7, #0]
 80004ce:	480e      	ldr	r0, [pc, #56]	@ (8000508 <Game_ShowResult+0x98>)
 80004d0:	f000 fb3b 	bl	8000b4a <SerialOutputString>
        GPIOC->ODR |= (1 << 8);  // Simulate "lost"
 80004d4:	4b0a      	ldr	r3, [pc, #40]	@ (8000500 <Game_ShowResult+0x90>)
 80004d6:	695b      	ldr	r3, [r3, #20]
 80004d8:	4a09      	ldr	r2, [pc, #36]	@ (8000500 <Game_ShowResult+0x90>)
 80004da:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80004de:	6153      	str	r3, [r2, #20]
        HAL_Delay(2000);          // Wait 2000 ms = 2 seconds
 80004e0:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80004e4:	f000 fd76 	bl	8000fd4 <HAL_Delay>
        GPIOC->ODR &= ~(1 << 8);  // Turn off PC9
 80004e8:	4b05      	ldr	r3, [pc, #20]	@ (8000500 <Game_ShowResult+0x90>)
 80004ea:	695b      	ldr	r3, [r3, #20]
 80004ec:	4a04      	ldr	r2, [pc, #16]	@ (8000500 <Game_ShowResult+0x90>)
 80004ee:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80004f2:	6153      	str	r3, [r2, #20]
}
 80004f4:	bf00      	nop
 80004f6:	3708      	adds	r7, #8
 80004f8:	46bd      	mov	sp, r7
 80004fa:	bd80      	pop	{r7, pc}
 80004fc:	08003524 	.word	0x08003524
 8000500:	48000800 	.word	0x48000800
 8000504:	48000c00 	.word	0x48000c00
 8000508:	08003548 	.word	0x08003548

0800050c <Game_CheckPattern>:

bool Game_CheckPattern(uint8_t *correct_pattern, uint8_t *user_input, uint8_t length) {
 800050c:	b480      	push	{r7}
 800050e:	b087      	sub	sp, #28
 8000510:	af00      	add	r7, sp, #0
 8000512:	60f8      	str	r0, [r7, #12]
 8000514:	60b9      	str	r1, [r7, #8]
 8000516:	4613      	mov	r3, r2
 8000518:	71fb      	strb	r3, [r7, #7]
    for (uint8_t i = 0; i < length; i++) {
 800051a:	2300      	movs	r3, #0
 800051c:	75fb      	strb	r3, [r7, #23]
 800051e:	e00e      	b.n	800053e <Game_CheckPattern+0x32>
        if (correct_pattern[i] != user_input[i]) {
 8000520:	7dfb      	ldrb	r3, [r7, #23]
 8000522:	68fa      	ldr	r2, [r7, #12]
 8000524:	4413      	add	r3, r2
 8000526:	781a      	ldrb	r2, [r3, #0]
 8000528:	7dfb      	ldrb	r3, [r7, #23]
 800052a:	68b9      	ldr	r1, [r7, #8]
 800052c:	440b      	add	r3, r1
 800052e:	781b      	ldrb	r3, [r3, #0]
 8000530:	429a      	cmp	r2, r3
 8000532:	d001      	beq.n	8000538 <Game_CheckPattern+0x2c>
            return false;
 8000534:	2300      	movs	r3, #0
 8000536:	e007      	b.n	8000548 <Game_CheckPattern+0x3c>
    for (uint8_t i = 0; i < length; i++) {
 8000538:	7dfb      	ldrb	r3, [r7, #23]
 800053a:	3301      	adds	r3, #1
 800053c:	75fb      	strb	r3, [r7, #23]
 800053e:	7dfa      	ldrb	r2, [r7, #23]
 8000540:	79fb      	ldrb	r3, [r7, #7]
 8000542:	429a      	cmp	r2, r3
 8000544:	d3ec      	bcc.n	8000520 <Game_CheckPattern+0x14>
        }
    }
    return true;
 8000546:	2301      	movs	r3, #1
}
 8000548:	4618      	mov	r0, r3
 800054a:	371c      	adds	r7, #28
 800054c:	46bd      	mov	sp, r7
 800054e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000552:	4770      	bx	lr

08000554 <delay_ms>:
#include "led_control.h"
#include "stm32f3xx_hal.h"
#include <stdint.h>

// Simple busy wait delay function, approx 1 ms delay per loop
static void delay_ms(uint32_t ms) {
 8000554:	b480      	push	{r7}
 8000556:	b085      	sub	sp, #20
 8000558:	af00      	add	r7, sp, #0
 800055a:	6078      	str	r0, [r7, #4]
    for (uint32_t i = 0; i < ms * 8000; i++) {
 800055c:	2300      	movs	r3, #0
 800055e:	60fb      	str	r3, [r7, #12]
 8000560:	e003      	b.n	800056a <delay_ms+0x16>
        __NOP();
 8000562:	bf00      	nop
    for (uint32_t i = 0; i < ms * 8000; i++) {
 8000564:	68fb      	ldr	r3, [r7, #12]
 8000566:	3301      	adds	r3, #1
 8000568:	60fb      	str	r3, [r7, #12]
 800056a:	687b      	ldr	r3, [r7, #4]
 800056c:	f44f 52fa 	mov.w	r2, #8000	@ 0x1f40
 8000570:	fb02 f303 	mul.w	r3, r2, r3
 8000574:	68fa      	ldr	r2, [r7, #12]
 8000576:	429a      	cmp	r2, r3
 8000578:	d3f3      	bcc.n	8000562 <delay_ms+0xe>
    }
}
 800057a:	bf00      	nop
 800057c:	bf00      	nop
 800057e:	3714      	adds	r7, #20
 8000580:	46bd      	mov	sp, r7
 8000582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000586:	4770      	bx	lr

08000588 <LED_Init>:

// Initialize LEDs on GPIOE pins 8–15
void LED_Init(void) {
 8000588:	b480      	push	{r7}
 800058a:	af00      	add	r7, sp, #0
    RCC->AHBENR |= RCC_AHBENR_GPIOEEN;
 800058c:	4b0c      	ldr	r3, [pc, #48]	@ (80005c0 <LED_Init+0x38>)
 800058e:	695b      	ldr	r3, [r3, #20]
 8000590:	4a0b      	ldr	r2, [pc, #44]	@ (80005c0 <LED_Init+0x38>)
 8000592:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000596:	6153      	str	r3, [r2, #20]
    GPIOE->MODER |= 0x55550000; // Set PE8–PE15 to output mode
 8000598:	4b0a      	ldr	r3, [pc, #40]	@ (80005c4 <LED_Init+0x3c>)
 800059a:	681b      	ldr	r3, [r3, #0]
 800059c:	4a09      	ldr	r2, [pc, #36]	@ (80005c4 <LED_Init+0x3c>)
 800059e:	f043 43aa 	orr.w	r3, r3, #1426063360	@ 0x55000000
 80005a2:	f443 03aa 	orr.w	r3, r3, #5570560	@ 0x550000
 80005a6:	6013      	str	r3, [r2, #0]
    GPIOE->ODR &= ~0xFF00;      // Turn off LEDs initially
 80005a8:	4b06      	ldr	r3, [pc, #24]	@ (80005c4 <LED_Init+0x3c>)
 80005aa:	695b      	ldr	r3, [r3, #20]
 80005ac:	4a05      	ldr	r2, [pc, #20]	@ (80005c4 <LED_Init+0x3c>)
 80005ae:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80005b2:	6153      	str	r3, [r2, #20]
}
 80005b4:	bf00      	nop
 80005b6:	46bd      	mov	sp, r7
 80005b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005bc:	4770      	bx	lr
 80005be:	bf00      	nop
 80005c0:	40021000 	.word	0x40021000
 80005c4:	48001000 	.word	0x48001000

080005c8 <LED_Set>:

void LED_Set(uint8_t index, uint8_t state) {
 80005c8:	b480      	push	{r7}
 80005ca:	b083      	sub	sp, #12
 80005cc:	af00      	add	r7, sp, #0
 80005ce:	4603      	mov	r3, r0
 80005d0:	460a      	mov	r2, r1
 80005d2:	71fb      	strb	r3, [r7, #7]
 80005d4:	4613      	mov	r3, r2
 80005d6:	71bb      	strb	r3, [r7, #6]
    if (index < 8) {
 80005d8:	79fb      	ldrb	r3, [r7, #7]
 80005da:	2b07      	cmp	r3, #7
 80005dc:	d81a      	bhi.n	8000614 <LED_Set+0x4c>
        if (state)
 80005de:	79bb      	ldrb	r3, [r7, #6]
 80005e0:	2b00      	cmp	r3, #0
 80005e2:	d00b      	beq.n	80005fc <LED_Set+0x34>
            GPIOE->ODR |= (1 << (8 + index));
 80005e4:	4b0e      	ldr	r3, [pc, #56]	@ (8000620 <LED_Set+0x58>)
 80005e6:	695b      	ldr	r3, [r3, #20]
 80005e8:	79fa      	ldrb	r2, [r7, #7]
 80005ea:	3208      	adds	r2, #8
 80005ec:	2101      	movs	r1, #1
 80005ee:	fa01 f202 	lsl.w	r2, r1, r2
 80005f2:	4611      	mov	r1, r2
 80005f4:	4a0a      	ldr	r2, [pc, #40]	@ (8000620 <LED_Set+0x58>)
 80005f6:	430b      	orrs	r3, r1
 80005f8:	6153      	str	r3, [r2, #20]
        else
            GPIOE->ODR &= ~(1 << (8 + index));
    }
}
 80005fa:	e00b      	b.n	8000614 <LED_Set+0x4c>
            GPIOE->ODR &= ~(1 << (8 + index));
 80005fc:	4b08      	ldr	r3, [pc, #32]	@ (8000620 <LED_Set+0x58>)
 80005fe:	695b      	ldr	r3, [r3, #20]
 8000600:	79fa      	ldrb	r2, [r7, #7]
 8000602:	3208      	adds	r2, #8
 8000604:	2101      	movs	r1, #1
 8000606:	fa01 f202 	lsl.w	r2, r1, r2
 800060a:	43d2      	mvns	r2, r2
 800060c:	4611      	mov	r1, r2
 800060e:	4a04      	ldr	r2, [pc, #16]	@ (8000620 <LED_Set+0x58>)
 8000610:	400b      	ands	r3, r1
 8000612:	6153      	str	r3, [r2, #20]
}
 8000614:	bf00      	nop
 8000616:	370c      	adds	r7, #12
 8000618:	46bd      	mov	sp, r7
 800061a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800061e:	4770      	bx	lr
 8000620:	48001000 	.word	0x48001000

08000624 <LED_ClearAll>:

void LED_ClearAll(void) {
 8000624:	b480      	push	{r7}
 8000626:	af00      	add	r7, sp, #0
    GPIOE->ODR &= ~0xFF00;
 8000628:	4b05      	ldr	r3, [pc, #20]	@ (8000640 <LED_ClearAll+0x1c>)
 800062a:	695b      	ldr	r3, [r3, #20]
 800062c:	4a04      	ldr	r2, [pc, #16]	@ (8000640 <LED_ClearAll+0x1c>)
 800062e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8000632:	6153      	str	r3, [r2, #20]
}
 8000634:	bf00      	nop
 8000636:	46bd      	mov	sp, r7
 8000638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800063c:	4770      	bx	lr
 800063e:	bf00      	nop
 8000640:	48001000 	.word	0x48001000

08000644 <LED_DisplayPattern>:

void LED_DisplayPattern(const uint8_t *pattern, uint8_t length, uint32_t delay_time_ms) {
 8000644:	b580      	push	{r7, lr}
 8000646:	b086      	sub	sp, #24
 8000648:	af00      	add	r7, sp, #0
 800064a:	60f8      	str	r0, [r7, #12]
 800064c:	460b      	mov	r3, r1
 800064e:	607a      	str	r2, [r7, #4]
 8000650:	72fb      	strb	r3, [r7, #11]
    for (uint8_t i = 0; i < length; i++) {
 8000652:	2300      	movs	r3, #0
 8000654:	75fb      	strb	r3, [r7, #23]
 8000656:	e014      	b.n	8000682 <LED_DisplayPattern+0x3e>
        LED_ClearAll();
 8000658:	f7ff ffe4 	bl	8000624 <LED_ClearAll>
        LED_Set(pattern[i], 1);
 800065c:	7dfb      	ldrb	r3, [r7, #23]
 800065e:	68fa      	ldr	r2, [r7, #12]
 8000660:	4413      	add	r3, r2
 8000662:	781b      	ldrb	r3, [r3, #0]
 8000664:	2101      	movs	r1, #1
 8000666:	4618      	mov	r0, r3
 8000668:	f7ff ffae 	bl	80005c8 <LED_Set>
        delay_ms(delay_time_ms);
 800066c:	6878      	ldr	r0, [r7, #4]
 800066e:	f7ff ff71 	bl	8000554 <delay_ms>
        LED_ClearAll();
 8000672:	f7ff ffd7 	bl	8000624 <LED_ClearAll>
        delay_ms(100); // short off interval between LEDs
 8000676:	2064      	movs	r0, #100	@ 0x64
 8000678:	f7ff ff6c 	bl	8000554 <delay_ms>
    for (uint8_t i = 0; i < length; i++) {
 800067c:	7dfb      	ldrb	r3, [r7, #23]
 800067e:	3301      	adds	r3, #1
 8000680:	75fb      	strb	r3, [r7, #23]
 8000682:	7dfa      	ldrb	r2, [r7, #23]
 8000684:	7afb      	ldrb	r3, [r7, #11]
 8000686:	429a      	cmp	r2, r3
 8000688:	d3e6      	bcc.n	8000658 <LED_DisplayPattern+0x14>
    }
}
 800068a:	bf00      	nop
 800068c:	bf00      	nop
 800068e:	3718      	adds	r7, #24
 8000690:	46bd      	mov	sp, r7
 8000692:	bd80      	pop	{r7, pc}

08000694 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000694:	b580      	push	{r7, lr}
 8000696:	b082      	sub	sp, #8
 8000698:	af00      	add	r7, sp, #0
    HAL_Init();
 800069a:	f000 fc35 	bl	8000f08 <HAL_Init>
    SystemClock_Config();
 800069e:	f000 f88b 	bl	80007b8 <SystemClock_Config>
    MX_GPIO_Init();
 80006a2:	f000 f911 	bl	80008c8 <MX_GPIO_Init>
    MX_TSC_Init();
 80006a6:	f000 f8c9 	bl	800083c <MX_TSC_Init>

    // Initialise UART on USART1 at 115200 baud (adjust as needed)
    SerialInitialise(BAUD_115200, &USART1_PORT, NULL);
 80006aa:	2200      	movs	r2, #0
 80006ac:	493a      	ldr	r1, [pc, #232]	@ (8000798 <main+0x104>)
 80006ae:	2004      	movs	r0, #4
 80006b0:	f000 f9be 	bl	8000a30 <SerialInitialise>

    // --- Enable GPIOC Clock ---
    RCC->AHBENR |= RCC_AHBENR_GPIOCEN;
 80006b4:	4b39      	ldr	r3, [pc, #228]	@ (800079c <main+0x108>)
 80006b6:	695b      	ldr	r3, [r3, #20]
 80006b8:	4a38      	ldr	r2, [pc, #224]	@ (800079c <main+0x108>)
 80006ba:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80006be:	6153      	str	r3, [r2, #20]

    // --- Configure PC7, PC8, and PC9 as outputs ---
    GPIOC->MODER &= ~((0b11 << (7 * 2)) | (0b11 << (8 * 2)) | (0b11 << (9 * 2)));  // Clear modes
 80006c0:	4b37      	ldr	r3, [pc, #220]	@ (80007a0 <main+0x10c>)
 80006c2:	681b      	ldr	r3, [r3, #0]
 80006c4:	4a36      	ldr	r2, [pc, #216]	@ (80007a0 <main+0x10c>)
 80006c6:	f423 237c 	bic.w	r3, r3, #1032192	@ 0xfc000
 80006ca:	6013      	str	r3, [r2, #0]
    GPIOC->MODER |=  ((0b01 << (7 * 2)) | (0b01 << (8 * 2)) | (0b01 << (9 * 2)));  // Set as output
 80006cc:	4b34      	ldr	r3, [pc, #208]	@ (80007a0 <main+0x10c>)
 80006ce:	681b      	ldr	r3, [r3, #0]
 80006d0:	4a33      	ldr	r2, [pc, #204]	@ (80007a0 <main+0x10c>)
 80006d2:	f443 23a8 	orr.w	r3, r3, #344064	@ 0x54000
 80006d6:	6013      	str	r3, [r2, #0]

    // Enable GPIOD clock
    RCC->AHBENR |= RCC_AHBENR_GPIODEN;
 80006d8:	4b30      	ldr	r3, [pc, #192]	@ (800079c <main+0x108>)
 80006da:	695b      	ldr	r3, [r3, #20]
 80006dc:	4a2f      	ldr	r2, [pc, #188]	@ (800079c <main+0x108>)
 80006de:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80006e2:	6153      	str	r3, [r2, #20]

    // --- Configure PD4 as input with pull-down ---
    GPIOD->MODER &= ~(0b11 << (4 * 2));   // Clear mode for PD4
 80006e4:	4b2f      	ldr	r3, [pc, #188]	@ (80007a4 <main+0x110>)
 80006e6:	681b      	ldr	r3, [r3, #0]
 80006e8:	4a2e      	ldr	r2, [pc, #184]	@ (80007a4 <main+0x110>)
 80006ea:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80006ee:	6013      	str	r3, [r2, #0]
    GPIOD->PUPDR &= ~(0b11 << (4 * 2));   // Clear pull-up/down
 80006f0:	4b2c      	ldr	r3, [pc, #176]	@ (80007a4 <main+0x110>)
 80006f2:	68db      	ldr	r3, [r3, #12]
 80006f4:	4a2b      	ldr	r2, [pc, #172]	@ (80007a4 <main+0x110>)
 80006f6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80006fa:	60d3      	str	r3, [r2, #12]
    GPIOD->PUPDR |=  (0b10 << (4 * 2));   // Enable pull-down
 80006fc:	4b29      	ldr	r3, [pc, #164]	@ (80007a4 <main+0x110>)
 80006fe:	68db      	ldr	r3, [r3, #12]
 8000700:	4a28      	ldr	r2, [pc, #160]	@ (80007a4 <main+0x110>)
 8000702:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000706:	60d3      	str	r3, [r2, #12]

    // --- Configure PD3 as output ---
    GPIOD->MODER &= ~(0b11 << (3 * 2));   // Clear mode for PD3
 8000708:	4b26      	ldr	r3, [pc, #152]	@ (80007a4 <main+0x110>)
 800070a:	681b      	ldr	r3, [r3, #0]
 800070c:	4a25      	ldr	r2, [pc, #148]	@ (80007a4 <main+0x110>)
 800070e:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8000712:	6013      	str	r3, [r2, #0]
    GPIOD->MODER |=  (0b01 << (3 * 2));   // Set PD3 as output
 8000714:	4b23      	ldr	r3, [pc, #140]	@ (80007a4 <main+0x110>)
 8000716:	681b      	ldr	r3, [r3, #0]
 8000718:	4a22      	ldr	r2, [pc, #136]	@ (80007a4 <main+0x110>)
 800071a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800071e:	6013      	str	r3, [r2, #0]

    // Ensure PD3 starts LOW
    GPIOD->ODR &= ~(1 << 3);
 8000720:	4b20      	ldr	r3, [pc, #128]	@ (80007a4 <main+0x110>)
 8000722:	695b      	ldr	r3, [r3, #20]
 8000724:	4a1f      	ldr	r2, [pc, #124]	@ (80007a4 <main+0x110>)
 8000726:	f023 0308 	bic.w	r3, r3, #8
 800072a:	6153      	str	r3, [r2, #20]

    // Optional: settle time
    volatile uint32_t dummy = GPIOD->IDR;
 800072c:	4b1d      	ldr	r3, [pc, #116]	@ (80007a4 <main+0x110>)
 800072e:	691b      	ldr	r3, [r3, #16]
 8000730:	603b      	str	r3, [r7, #0]
    HAL_Delay(10);
 8000732:	200a      	movs	r0, #10
 8000734:	f000 fc4e 	bl	8000fd4 <HAL_Delay>

    // Initialize the timer variable
    uint32_t lastPrintTime = HAL_GetTick();
 8000738:	f000 fc40 	bl	8000fbc <HAL_GetTick>
 800073c:	6078      	str	r0, [r7, #4]

    while (1)
    {
    	if (HAL_GetTick() - lastPrintTime >= 10000)  // Every 10 sec
 800073e:	f000 fc3d 	bl	8000fbc <HAL_GetTick>
 8000742:	4602      	mov	r2, r0
 8000744:	687b      	ldr	r3, [r7, #4]
 8000746:	1ad3      	subs	r3, r2, r3
 8000748:	f242 720f 	movw	r2, #9999	@ 0x270f
 800074c:	4293      	cmp	r3, r2
 800074e:	d906      	bls.n	800075e <main+0xca>
        {
    		SerialOutputString((uint8_t *)"Waiting...\r\n", &USART1_PORT);
 8000750:	4911      	ldr	r1, [pc, #68]	@ (8000798 <main+0x104>)
 8000752:	4815      	ldr	r0, [pc, #84]	@ (80007a8 <main+0x114>)
 8000754:	f000 f9f9 	bl	8000b4a <SerialOutputString>
    		lastPrintTime = HAL_GetTick();  // Reset timer
 8000758:	f000 fc30 	bl	8000fbc <HAL_GetTick>
 800075c:	6078      	str	r0, [r7, #4]
        }
        GPIOD->ODR |= (1 << 3);
 800075e:	4b11      	ldr	r3, [pc, #68]	@ (80007a4 <main+0x110>)
 8000760:	695b      	ldr	r3, [r3, #20]
 8000762:	4a10      	ldr	r2, [pc, #64]	@ (80007a4 <main+0x110>)
 8000764:	f043 0308 	orr.w	r3, r3, #8
 8000768:	6153      	str	r3, [r2, #20]
        if (GPIOD->IDR & (1 << 4))  // Check PD4 HIGH
 800076a:	4b0e      	ldr	r3, [pc, #56]	@ (80007a4 <main+0x110>)
 800076c:	691b      	ldr	r3, [r3, #16]
 800076e:	f003 0310 	and.w	r3, r3, #16
 8000772:	2b00      	cmp	r3, #0
 8000774:	d0e3      	beq.n	800073e <main+0xaa>
        {
        	SerialOutputString((uint8_t *)"Received\r\n", &USART1_PORT);
 8000776:	4908      	ldr	r1, [pc, #32]	@ (8000798 <main+0x104>)
 8000778:	480c      	ldr	r0, [pc, #48]	@ (80007ac <main+0x118>)
 800077a:	f000 f9e6 	bl	8000b4a <SerialOutputString>
        	SerialOutputString((uint8_t *)"Touch Sensor Test Starting\r\n", &USART1_PORT);
 800077e:	4906      	ldr	r1, [pc, #24]	@ (8000798 <main+0x104>)
 8000780:	480b      	ldr	r0, [pc, #44]	@ (80007b0 <main+0x11c>)
 8000782:	f000 f9e2 	bl	8000b4a <SerialOutputString>
        	StartMinigame(&htsc);
 8000786:	480b      	ldr	r0, [pc, #44]	@ (80007b4 <main+0x120>)
 8000788:	f7ff fd86 	bl	8000298 <StartMinigame>
        	break;  // Optional: exit loop or replace with continuous minigame logic
 800078c:	bf00      	nop
 800078e:	2300      	movs	r3, #0
        }
    }
}
 8000790:	4618      	mov	r0, r3
 8000792:	3708      	adds	r7, #8
 8000794:	46bd      	mov	sp, r7
 8000796:	bd80      	pop	{r7, pc}
 8000798:	20000008 	.word	0x20000008
 800079c:	40021000 	.word	0x40021000
 80007a0:	48000800 	.word	0x48000800
 80007a4:	48000c00 	.word	0x48000c00
 80007a8:	0800356c 	.word	0x0800356c
 80007ac:	0800357c 	.word	0x0800357c
 80007b0:	08003588 	.word	0x08003588
 80007b4:	200000c0 	.word	0x200000c0

080007b8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007b8:	b580      	push	{r7, lr}
 80007ba:	b090      	sub	sp, #64	@ 0x40
 80007bc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007be:	f107 0318 	add.w	r3, r7, #24
 80007c2:	2228      	movs	r2, #40	@ 0x28
 80007c4:	2100      	movs	r1, #0
 80007c6:	4618      	mov	r0, r3
 80007c8:	f002 f9d4 	bl	8002b74 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007cc:	1d3b      	adds	r3, r7, #4
 80007ce:	2200      	movs	r2, #0
 80007d0:	601a      	str	r2, [r3, #0]
 80007d2:	605a      	str	r2, [r3, #4]
 80007d4:	609a      	str	r2, [r3, #8]
 80007d6:	60da      	str	r2, [r3, #12]
 80007d8:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80007da:	2302      	movs	r3, #2
 80007dc:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80007de:	2301      	movs	r3, #1
 80007e0:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80007e2:	2310      	movs	r3, #16
 80007e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007e6:	2302      	movs	r3, #2
 80007e8:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80007ea:	2300      	movs	r3, #0
 80007ec:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 80007ee:	f44f 1320 	mov.w	r3, #2621440	@ 0x280000
 80007f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007f4:	f107 0318 	add.w	r3, r7, #24
 80007f8:	4618      	mov	r0, r3
 80007fa:	f000 fe87 	bl	800150c <HAL_RCC_OscConfig>
 80007fe:	4603      	mov	r3, r0
 8000800:	2b00      	cmp	r3, #0
 8000802:	d001      	beq.n	8000808 <SystemClock_Config+0x50>
  {
    Error_Handler();
 8000804:	f000 f90e 	bl	8000a24 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000808:	230f      	movs	r3, #15
 800080a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800080c:	2302      	movs	r3, #2
 800080e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000810:	2300      	movs	r3, #0
 8000812:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000814:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000818:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800081a:	2300      	movs	r3, #0
 800081c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800081e:	1d3b      	adds	r3, r7, #4
 8000820:	2101      	movs	r1, #1
 8000822:	4618      	mov	r0, r3
 8000824:	f001 fe80 	bl	8002528 <HAL_RCC_ClockConfig>
 8000828:	4603      	mov	r3, r0
 800082a:	2b00      	cmp	r3, #0
 800082c:	d001      	beq.n	8000832 <SystemClock_Config+0x7a>
  {
    Error_Handler();
 800082e:	f000 f8f9 	bl	8000a24 <Error_Handler>
  }
}
 8000832:	bf00      	nop
 8000834:	3740      	adds	r7, #64	@ 0x40
 8000836:	46bd      	mov	sp, r7
 8000838:	bd80      	pop	{r7, pc}
	...

0800083c <MX_TSC_Init>:
  * @brief TSC Initialization Function
  * @param None
  * @retval None
  */
static void MX_TSC_Init(void)
{
 800083c:	b580      	push	{r7, lr}
 800083e:	af00      	add	r7, sp, #0

  /* USER CODE END TSC_Init 1 */

  /** Configure the TSC peripheral
  */
  htsc.Instance = TSC;
 8000840:	4b1d      	ldr	r3, [pc, #116]	@ (80008b8 <MX_TSC_Init+0x7c>)
 8000842:	4a1e      	ldr	r2, [pc, #120]	@ (80008bc <MX_TSC_Init+0x80>)
 8000844:	601a      	str	r2, [r3, #0]
  htsc.Init.CTPulseHighLength = TSC_CTPH_2CYCLES;
 8000846:	4b1c      	ldr	r3, [pc, #112]	@ (80008b8 <MX_TSC_Init+0x7c>)
 8000848:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800084c:	605a      	str	r2, [r3, #4]
  htsc.Init.CTPulseLowLength = TSC_CTPL_2CYCLES;
 800084e:	4b1a      	ldr	r3, [pc, #104]	@ (80008b8 <MX_TSC_Init+0x7c>)
 8000850:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8000854:	609a      	str	r2, [r3, #8]
  htsc.Init.SpreadSpectrum = DISABLE;
 8000856:	4b18      	ldr	r3, [pc, #96]	@ (80008b8 <MX_TSC_Init+0x7c>)
 8000858:	2200      	movs	r2, #0
 800085a:	731a      	strb	r2, [r3, #12]
  htsc.Init.SpreadSpectrumDeviation = 1;
 800085c:	4b16      	ldr	r3, [pc, #88]	@ (80008b8 <MX_TSC_Init+0x7c>)
 800085e:	2201      	movs	r2, #1
 8000860:	611a      	str	r2, [r3, #16]
  htsc.Init.SpreadSpectrumPrescaler = TSC_SS_PRESC_DIV1;
 8000862:	4b15      	ldr	r3, [pc, #84]	@ (80008b8 <MX_TSC_Init+0x7c>)
 8000864:	2200      	movs	r2, #0
 8000866:	615a      	str	r2, [r3, #20]
  htsc.Init.PulseGeneratorPrescaler = TSC_PG_PRESC_DIV4;
 8000868:	4b13      	ldr	r3, [pc, #76]	@ (80008b8 <MX_TSC_Init+0x7c>)
 800086a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800086e:	619a      	str	r2, [r3, #24]
  htsc.Init.MaxCountValue = TSC_MCV_8191;
 8000870:	4b11      	ldr	r3, [pc, #68]	@ (80008b8 <MX_TSC_Init+0x7c>)
 8000872:	22a0      	movs	r2, #160	@ 0xa0
 8000874:	61da      	str	r2, [r3, #28]
  htsc.Init.IODefaultMode = TSC_IODEF_OUT_PP_LOW;
 8000876:	4b10      	ldr	r3, [pc, #64]	@ (80008b8 <MX_TSC_Init+0x7c>)
 8000878:	2200      	movs	r2, #0
 800087a:	621a      	str	r2, [r3, #32]
  htsc.Init.SynchroPinPolarity = TSC_SYNC_POLARITY_FALLING;
 800087c:	4b0e      	ldr	r3, [pc, #56]	@ (80008b8 <MX_TSC_Init+0x7c>)
 800087e:	2200      	movs	r2, #0
 8000880:	625a      	str	r2, [r3, #36]	@ 0x24
  htsc.Init.AcquisitionMode = TSC_ACQ_MODE_NORMAL;
 8000882:	4b0d      	ldr	r3, [pc, #52]	@ (80008b8 <MX_TSC_Init+0x7c>)
 8000884:	2200      	movs	r2, #0
 8000886:	629a      	str	r2, [r3, #40]	@ 0x28
  htsc.Init.MaxCountInterrupt = DISABLE;
 8000888:	4b0b      	ldr	r3, [pc, #44]	@ (80008b8 <MX_TSC_Init+0x7c>)
 800088a:	2200      	movs	r2, #0
 800088c:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
  htsc.Init.ChannelIOs = TSC_GROUP1_IO2|TSC_GROUP1_IO4|TSC_GROUP2_IO2|TSC_GROUP2_IO4
 8000890:	4b09      	ldr	r3, [pc, #36]	@ (80008b8 <MX_TSC_Init+0x7c>)
 8000892:	4a0b      	ldr	r2, [pc, #44]	@ (80008c0 <MX_TSC_Init+0x84>)
 8000894:	631a      	str	r2, [r3, #48]	@ 0x30
                    |TSC_GROUP3_IO2|TSC_GROUP3_IO4|TSC_GROUP5_IO2|TSC_GROUP5_IO4
                    |TSC_GROUP6_IO2|TSC_GROUP6_IO4|TSC_GROUP7_IO2|TSC_GROUP7_IO4
                    |TSC_GROUP8_IO2|TSC_GROUP8_IO4;
  htsc.Init.ShieldIOs = 0;
 8000896:	4b08      	ldr	r3, [pc, #32]	@ (80008b8 <MX_TSC_Init+0x7c>)
 8000898:	2200      	movs	r2, #0
 800089a:	635a      	str	r2, [r3, #52]	@ 0x34
  htsc.Init.SamplingIOs = TSC_GROUP1_IO3|TSC_GROUP2_IO3|TSC_GROUP3_IO3|TSC_GROUP5_IO3
 800089c:	4b06      	ldr	r3, [pc, #24]	@ (80008b8 <MX_TSC_Init+0x7c>)
 800089e:	4a09      	ldr	r2, [pc, #36]	@ (80008c4 <MX_TSC_Init+0x88>)
 80008a0:	639a      	str	r2, [r3, #56]	@ 0x38
                    |TSC_GROUP6_IO3|TSC_GROUP7_IO3|TSC_GROUP8_IO3;
  if (HAL_TSC_Init(&htsc) != HAL_OK)
 80008a2:	4805      	ldr	r0, [pc, #20]	@ (80008b8 <MX_TSC_Init+0x7c>)
 80008a4:	f002 f802 	bl	80028ac <HAL_TSC_Init>
 80008a8:	4603      	mov	r3, r0
 80008aa:	2b00      	cmp	r3, #0
 80008ac:	d001      	beq.n	80008b2 <MX_TSC_Init+0x76>
  {
    Error_Handler();
 80008ae:	f000 f8b9 	bl	8000a24 <Error_Handler>
  }
  /* USER CODE BEGIN TSC_Init 2 */

  /* USER CODE END TSC_Init 2 */

}
 80008b2:	bf00      	nop
 80008b4:	bd80      	pop	{r7, pc}
 80008b6:	bf00      	nop
 80008b8:	200000c0 	.word	0x200000c0
 80008bc:	40024000 	.word	0x40024000
 80008c0:	aaaa0aaa 	.word	0xaaaa0aaa
 80008c4:	44440444 	.word	0x44440444

080008c8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008c8:	b580      	push	{r7, lr}
 80008ca:	b08c      	sub	sp, #48	@ 0x30
 80008cc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008ce:	f107 031c 	add.w	r3, r7, #28
 80008d2:	2200      	movs	r2, #0
 80008d4:	601a      	str	r2, [r3, #0]
 80008d6:	605a      	str	r2, [r3, #4]
 80008d8:	609a      	str	r2, [r3, #8]
 80008da:	60da      	str	r2, [r3, #12]
 80008dc:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80008de:	4b4f      	ldr	r3, [pc, #316]	@ (8000a1c <MX_GPIO_Init+0x154>)
 80008e0:	695b      	ldr	r3, [r3, #20]
 80008e2:	4a4e      	ldr	r2, [pc, #312]	@ (8000a1c <MX_GPIO_Init+0x154>)
 80008e4:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80008e8:	6153      	str	r3, [r2, #20]
 80008ea:	4b4c      	ldr	r3, [pc, #304]	@ (8000a1c <MX_GPIO_Init+0x154>)
 80008ec:	695b      	ldr	r3, [r3, #20]
 80008ee:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80008f2:	61bb      	str	r3, [r7, #24]
 80008f4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008f6:	4b49      	ldr	r3, [pc, #292]	@ (8000a1c <MX_GPIO_Init+0x154>)
 80008f8:	695b      	ldr	r3, [r3, #20]
 80008fa:	4a48      	ldr	r2, [pc, #288]	@ (8000a1c <MX_GPIO_Init+0x154>)
 80008fc:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8000900:	6153      	str	r3, [r2, #20]
 8000902:	4b46      	ldr	r3, [pc, #280]	@ (8000a1c <MX_GPIO_Init+0x154>)
 8000904:	695b      	ldr	r3, [r3, #20]
 8000906:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800090a:	617b      	str	r3, [r7, #20]
 800090c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800090e:	4b43      	ldr	r3, [pc, #268]	@ (8000a1c <MX_GPIO_Init+0x154>)
 8000910:	695b      	ldr	r3, [r3, #20]
 8000912:	4a42      	ldr	r2, [pc, #264]	@ (8000a1c <MX_GPIO_Init+0x154>)
 8000914:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000918:	6153      	str	r3, [r2, #20]
 800091a:	4b40      	ldr	r3, [pc, #256]	@ (8000a1c <MX_GPIO_Init+0x154>)
 800091c:	695b      	ldr	r3, [r3, #20]
 800091e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000922:	613b      	str	r3, [r7, #16]
 8000924:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000926:	4b3d      	ldr	r3, [pc, #244]	@ (8000a1c <MX_GPIO_Init+0x154>)
 8000928:	695b      	ldr	r3, [r3, #20]
 800092a:	4a3c      	ldr	r2, [pc, #240]	@ (8000a1c <MX_GPIO_Init+0x154>)
 800092c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000930:	6153      	str	r3, [r2, #20]
 8000932:	4b3a      	ldr	r3, [pc, #232]	@ (8000a1c <MX_GPIO_Init+0x154>)
 8000934:	695b      	ldr	r3, [r3, #20]
 8000936:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800093a:	60fb      	str	r3, [r7, #12]
 800093c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800093e:	4b37      	ldr	r3, [pc, #220]	@ (8000a1c <MX_GPIO_Init+0x154>)
 8000940:	695b      	ldr	r3, [r3, #20]
 8000942:	4a36      	ldr	r2, [pc, #216]	@ (8000a1c <MX_GPIO_Init+0x154>)
 8000944:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000948:	6153      	str	r3, [r2, #20]
 800094a:	4b34      	ldr	r3, [pc, #208]	@ (8000a1c <MX_GPIO_Init+0x154>)
 800094c:	695b      	ldr	r3, [r3, #20]
 800094e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000952:	60bb      	str	r3, [r7, #8]
 8000954:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000956:	4b31      	ldr	r3, [pc, #196]	@ (8000a1c <MX_GPIO_Init+0x154>)
 8000958:	695b      	ldr	r3, [r3, #20]
 800095a:	4a30      	ldr	r2, [pc, #192]	@ (8000a1c <MX_GPIO_Init+0x154>)
 800095c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000960:	6153      	str	r3, [r2, #20]
 8000962:	4b2e      	ldr	r3, [pc, #184]	@ (8000a1c <MX_GPIO_Init+0x154>)
 8000964:	695b      	ldr	r3, [r3, #20]
 8000966:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800096a:	607b      	str	r3, [r7, #4]
 800096c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, LD4_Pin|LD3_Pin|LD5_Pin|LD7_Pin
 800096e:	2200      	movs	r2, #0
 8000970:	f44f 417f 	mov.w	r1, #65280	@ 0xff00
 8000974:	482a      	ldr	r0, [pc, #168]	@ (8000a20 <MX_GPIO_Init+0x158>)
 8000976:	f000 fdb1 	bl	80014dc <HAL_GPIO_WritePin>
                          |LD9_Pin|LD10_Pin|LD8_Pin|LD6_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800097a:	2301      	movs	r3, #1
 800097c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800097e:	2300      	movs	r3, #0
 8000980:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000982:	2300      	movs	r3, #0
 8000984:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000986:	f107 031c 	add.w	r3, r7, #28
 800098a:	4619      	mov	r1, r3
 800098c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000990:	f000 fc2a 	bl	80011e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD7_Pin
                           LD9_Pin LD10_Pin LD8_Pin LD6_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD7_Pin
 8000994:	f44f 437f 	mov.w	r3, #65280	@ 0xff00
 8000998:	61fb      	str	r3, [r7, #28]
                          |LD9_Pin|LD10_Pin|LD8_Pin|LD6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800099a:	2301      	movs	r3, #1
 800099c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800099e:	2300      	movs	r3, #0
 80009a0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009a2:	2300      	movs	r3, #0
 80009a4:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80009a6:	f107 031c 	add.w	r3, r7, #28
 80009aa:	4619      	mov	r1, r3
 80009ac:	481c      	ldr	r0, [pc, #112]	@ (8000a20 <MX_GPIO_Init+0x158>)
 80009ae:	f000 fc1b 	bl	80011e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : DM_Pin DP_Pin */
  GPIO_InitStruct.Pin = DM_Pin|DP_Pin;
 80009b2:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 80009b6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009b8:	2302      	movs	r3, #2
 80009ba:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009bc:	2300      	movs	r3, #0
 80009be:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80009c0:	2303      	movs	r3, #3
 80009c2:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF14_USB;
 80009c4:	230e      	movs	r3, #14
 80009c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009c8:	f107 031c 	add.w	r3, r7, #28
 80009cc:	4619      	mov	r1, r3
 80009ce:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80009d2:	f000 fc09 	bl	80011e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 80009d6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80009da:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009dc:	2302      	movs	r3, #2
 80009de:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009e0:	2300      	movs	r3, #0
 80009e2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009e4:	2300      	movs	r3, #0
 80009e6:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80009e8:	2301      	movs	r3, #1
 80009ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009ec:	f107 031c 	add.w	r3, r7, #28
 80009f0:	4619      	mov	r1, r3
 80009f2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80009f6:	f000 fbf7 	bl	80011e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : MEMS_INT1_Pin MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT1_Pin|MEMS_INT2_Pin;
 80009fa:	2303      	movs	r3, #3
 80009fc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80009fe:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8000a02:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a04:	2300      	movs	r3, #0
 8000a06:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000a08:	f107 031c 	add.w	r3, r7, #28
 8000a0c:	4619      	mov	r1, r3
 8000a0e:	4804      	ldr	r0, [pc, #16]	@ (8000a20 <MX_GPIO_Init+0x158>)
 8000a10:	f000 fbea 	bl	80011e8 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000a14:	bf00      	nop
 8000a16:	3730      	adds	r7, #48	@ 0x30
 8000a18:	46bd      	mov	sp, r7
 8000a1a:	bd80      	pop	{r7, pc}
 8000a1c:	40021000 	.word	0x40021000
 8000a20:	48001000 	.word	0x48001000

08000a24 <Error_Handler>:
/* USER CODE BEGIN 4 */

/* USER CODE END 4 */

void Error_Handler(void)
{
 8000a24:	b480      	push	{r7}
 8000a26:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a28:	b672      	cpsid	i
}
 8000a2a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a2c:	bf00      	nop
 8000a2e:	e7fd      	b.n	8000a2c <Error_Handler+0x8>

08000a30 <SerialInitialise>:
		0x77};


// InitialiseSerial - Initialise the serial port
// Input: baudRate is from an enumerated set
void SerialInitialise(uint32_t baudRate, SerialPort *serial_port, void (*completion_function)(uint32_t)) {
 8000a30:	b480      	push	{r7}
 8000a32:	b087      	sub	sp, #28
 8000a34:	af00      	add	r7, sp, #0
 8000a36:	60f8      	str	r0, [r7, #12]
 8000a38:	60b9      	str	r1, [r7, #8]
 8000a3a:	607a      	str	r2, [r7, #4]

	serial_port->completion_function = completion_function;
 8000a3c:	68bb      	ldr	r3, [r7, #8]
 8000a3e:	687a      	ldr	r2, [r7, #4]
 8000a40:	63da      	str	r2, [r3, #60]	@ 0x3c

	// enable clock power, system configuration clock and GPIOC
	// common to all UARTs
	RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 8000a42:	4b34      	ldr	r3, [pc, #208]	@ (8000b14 <SerialInitialise+0xe4>)
 8000a44:	69db      	ldr	r3, [r3, #28]
 8000a46:	4a33      	ldr	r2, [pc, #204]	@ (8000b14 <SerialInitialise+0xe4>)
 8000a48:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000a4c:	61d3      	str	r3, [r2, #28]
	RCC->APB2ENR |= RCC_APB2ENR_SYSCFGEN;
 8000a4e:	4b31      	ldr	r3, [pc, #196]	@ (8000b14 <SerialInitialise+0xe4>)
 8000a50:	699b      	ldr	r3, [r3, #24]
 8000a52:	4a30      	ldr	r2, [pc, #192]	@ (8000b14 <SerialInitialise+0xe4>)
 8000a54:	f043 0301 	orr.w	r3, r3, #1
 8000a58:	6193      	str	r3, [r2, #24]

	switch(serial_port->SerialPortGPIO) {
 8000a5a:	68bb      	ldr	r3, [r7, #8]
 8000a5c:	6a1b      	ldr	r3, [r3, #32]
 8000a5e:	2b02      	cmp	r3, #2
 8000a60:	d106      	bne.n	8000a70 <SerialInitialise+0x40>
	case SERIAL_GPIO_C:
		RCC->AHBENR |= RCC_AHBENR_GPIOCEN;
 8000a62:	4b2c      	ldr	r3, [pc, #176]	@ (8000b14 <SerialInitialise+0xe4>)
 8000a64:	695b      	ldr	r3, [r3, #20]
 8000a66:	4a2b      	ldr	r2, [pc, #172]	@ (8000b14 <SerialInitialise+0xe4>)
 8000a68:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8000a6c:	6153      	str	r3, [r2, #20]
		break;
 8000a6e:	e000      	b.n	8000a72 <SerialInitialise+0x42>
	default:
		break;
 8000a70:	bf00      	nop
	}

	// set pin mode
	*(serial_port->SerialPinModeRegister) = serial_port->SerialPinModeValue;
 8000a72:	68bb      	ldr	r3, [r7, #8]
 8000a74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000a76:	68ba      	ldr	r2, [r7, #8]
 8000a78:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8000a7a:	601a      	str	r2, [r3, #0]

	// enable high speed clock for GPIOC
	*(serial_port->SerialPinSpeedRegister) = serial_port->SerialPinSpeedValue;
 8000a7c:	68bb      	ldr	r3, [r7, #8]
 8000a7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000a80:	68ba      	ldr	r2, [r7, #8]
 8000a82:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8000a84:	601a      	str	r2, [r3, #0]

	// set alternate function to enable USART to an external pin
	*(serial_port->SerialPinAlternatePinRegister) = serial_port->SerialPinAlternatePinValue;
 8000a86:	68bb      	ldr	r3, [r7, #8]
 8000a88:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000a8a:	68ba      	ldr	r2, [r7, #8]
 8000a8c:	f892 2038 	ldrb.w	r2, [r2, #56]	@ 0x38
 8000a90:	b2d2      	uxtb	r2, r2
 8000a92:	701a      	strb	r2, [r3, #0]

	*(serial_port->TimerEnableRegister) |= serial_port->TimerEnableMask;
 8000a94:	68bb      	ldr	r3, [r7, #8]
 8000a96:	69d9      	ldr	r1, [r3, #28]
 8000a98:	68bb      	ldr	r3, [r7, #8]
 8000a9a:	699b      	ldr	r3, [r3, #24]
 8000a9c:	681a      	ldr	r2, [r3, #0]
 8000a9e:	68bb      	ldr	r3, [r7, #8]
 8000aa0:	699b      	ldr	r3, [r3, #24]
 8000aa2:	430a      	orrs	r2, r1
 8000aa4:	601a      	str	r2, [r3, #0]

	uint16_t *baud_rate_config = ((uint16_t*)serial_port->BaudRate); // only 16 bits used!
 8000aa6:	68bb      	ldr	r3, [r7, #8]
 8000aa8:	681b      	ldr	r3, [r3, #0]
 8000aaa:	617b      	str	r3, [r7, #20]

	// Baud rate calculation from datasheet
	switch(baudRate){
 8000aac:	68fb      	ldr	r3, [r7, #12]
 8000aae:	2b04      	cmp	r3, #4
 8000ab0:	d821      	bhi.n	8000af6 <SerialInitialise+0xc6>
 8000ab2:	a201      	add	r2, pc, #4	@ (adr r2, 8000ab8 <SerialInitialise+0x88>)
 8000ab4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ab8:	08000acd 	.word	0x08000acd
 8000abc:	08000ad5 	.word	0x08000ad5
 8000ac0:	08000add 	.word	0x08000add
 8000ac4:	08000ae5 	.word	0x08000ae5
 8000ac8:	08000aed 	.word	0x08000aed
	case BAUD_9600:
		// NEED TO FIX THIS !
		*baud_rate_config = 0x46;  // 115200 at 8MHz
 8000acc:	697b      	ldr	r3, [r7, #20]
 8000ace:	2246      	movs	r2, #70	@ 0x46
 8000ad0:	801a      	strh	r2, [r3, #0]
		break;
 8000ad2:	e010      	b.n	8000af6 <SerialInitialise+0xc6>
	case BAUD_19200:
		// NEED TO FIX THIS !
		*baud_rate_config = 0x46;  // 115200 at 8MHz
 8000ad4:	697b      	ldr	r3, [r7, #20]
 8000ad6:	2246      	movs	r2, #70	@ 0x46
 8000ad8:	801a      	strh	r2, [r3, #0]
		break;
 8000ada:	e00c      	b.n	8000af6 <SerialInitialise+0xc6>
	case BAUD_38400:
		// NEED TO FIX THIS !
		*baud_rate_config = 0x46;  // 115200 at 8MHz
 8000adc:	697b      	ldr	r3, [r7, #20]
 8000ade:	2246      	movs	r2, #70	@ 0x46
 8000ae0:	801a      	strh	r2, [r3, #0]
		break;
 8000ae2:	e008      	b.n	8000af6 <SerialInitialise+0xc6>
	case BAUD_57600:
		// NEED TO FIX THIS !
		*baud_rate_config = 0x46;  // 115200 at 8MHz
 8000ae4:	697b      	ldr	r3, [r7, #20]
 8000ae6:	2246      	movs	r2, #70	@ 0x46
 8000ae8:	801a      	strh	r2, [r3, #0]
		break;
 8000aea:	e004      	b.n	8000af6 <SerialInitialise+0xc6>
	case BAUD_115200:
		*baud_rate_config = 0x46 * 0x06;  // 115200 at 8MHz
 8000aec:	697b      	ldr	r3, [r7, #20]
 8000aee:	f44f 72d2 	mov.w	r2, #420	@ 0x1a4
 8000af2:	801a      	strh	r2, [r3, #0]
		break;
 8000af4:	bf00      	nop
	}


	// enable serial port for tx and rx
	*(serial_port->ControlRegister1) |= USART_CR1_TE | USART_CR1_RE | USART_CR1_UE;
 8000af6:	68bb      	ldr	r3, [r7, #8]
 8000af8:	685b      	ldr	r3, [r3, #4]
 8000afa:	681a      	ldr	r2, [r3, #0]
 8000afc:	68bb      	ldr	r3, [r7, #8]
 8000afe:	685b      	ldr	r3, [r3, #4]
 8000b00:	f042 020d 	orr.w	r2, r2, #13
 8000b04:	601a      	str	r2, [r3, #0]
}
 8000b06:	bf00      	nop
 8000b08:	371c      	adds	r7, #28
 8000b0a:	46bd      	mov	sp, r7
 8000b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b10:	4770      	bx	lr
 8000b12:	bf00      	nop
 8000b14:	40021000 	.word	0x40021000

08000b18 <SerialOutputChar>:


void SerialOutputChar(uint8_t data, SerialPort *serial_port) {
 8000b18:	b480      	push	{r7}
 8000b1a:	b083      	sub	sp, #12
 8000b1c:	af00      	add	r7, sp, #0
 8000b1e:	4603      	mov	r3, r0
 8000b20:	6039      	str	r1, [r7, #0]
 8000b22:	71fb      	strb	r3, [r7, #7]
	while((*(serial_port->StatusRegister) & USART_ISR_TXE) == 0){
 8000b24:	bf00      	nop
 8000b26:	683b      	ldr	r3, [r7, #0]
 8000b28:	68db      	ldr	r3, [r3, #12]
 8000b2a:	681b      	ldr	r3, [r3, #0]
 8000b2c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000b30:	2b00      	cmp	r3, #0
 8000b32:	d0f8      	beq.n	8000b26 <SerialOutputChar+0xe>
	}

	*(serial_port->DataOutputRegister) = data;
 8000b34:	683b      	ldr	r3, [r7, #0]
 8000b36:	691b      	ldr	r3, [r3, #16]
 8000b38:	79fa      	ldrb	r2, [r7, #7]
 8000b3a:	b292      	uxth	r2, r2
 8000b3c:	801a      	strh	r2, [r3, #0]
}
 8000b3e:	bf00      	nop
 8000b40:	370c      	adds	r7, #12
 8000b42:	46bd      	mov	sp, r7
 8000b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b48:	4770      	bx	lr

08000b4a <SerialOutputString>:



void SerialOutputString(uint8_t *pt, SerialPort *serial_port) {
 8000b4a:	b580      	push	{r7, lr}
 8000b4c:	b084      	sub	sp, #16
 8000b4e:	af00      	add	r7, sp, #0
 8000b50:	6078      	str	r0, [r7, #4]
 8000b52:	6039      	str	r1, [r7, #0]

	uint32_t counter = 0;
 8000b54:	2300      	movs	r3, #0
 8000b56:	60fb      	str	r3, [r7, #12]
	while(*pt) {
 8000b58:	e00b      	b.n	8000b72 <SerialOutputString+0x28>
		SerialOutputChar(*pt, serial_port);
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	781b      	ldrb	r3, [r3, #0]
 8000b5e:	6839      	ldr	r1, [r7, #0]
 8000b60:	4618      	mov	r0, r3
 8000b62:	f7ff ffd9 	bl	8000b18 <SerialOutputChar>
		counter++;
 8000b66:	68fb      	ldr	r3, [r7, #12]
 8000b68:	3301      	adds	r3, #1
 8000b6a:	60fb      	str	r3, [r7, #12]
		pt++;
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	3301      	adds	r3, #1
 8000b70:	607b      	str	r3, [r7, #4]
	while(*pt) {
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	781b      	ldrb	r3, [r3, #0]
 8000b76:	2b00      	cmp	r3, #0
 8000b78:	d1ef      	bne.n	8000b5a <SerialOutputString+0x10>
	}

	if (serial_port->completion_function != 0x00)
 8000b7a:	683b      	ldr	r3, [r7, #0]
 8000b7c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000b7e:	2b00      	cmp	r3, #0
 8000b80:	d003      	beq.n	8000b8a <SerialOutputString+0x40>
		serial_port->completion_function(counter);
 8000b82:	683b      	ldr	r3, [r7, #0]
 8000b84:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000b86:	68f8      	ldr	r0, [r7, #12]
 8000b88:	4798      	blx	r3
}
 8000b8a:	bf00      	nop
 8000b8c:	3710      	adds	r7, #16
 8000b8e:	46bd      	mov	sp, r7
 8000b90:	bd80      	pop	{r7, pc}
	...

08000b94 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	b082      	sub	sp, #8
 8000b98:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b9a:	4b0f      	ldr	r3, [pc, #60]	@ (8000bd8 <HAL_MspInit+0x44>)
 8000b9c:	699b      	ldr	r3, [r3, #24]
 8000b9e:	4a0e      	ldr	r2, [pc, #56]	@ (8000bd8 <HAL_MspInit+0x44>)
 8000ba0:	f043 0301 	orr.w	r3, r3, #1
 8000ba4:	6193      	str	r3, [r2, #24]
 8000ba6:	4b0c      	ldr	r3, [pc, #48]	@ (8000bd8 <HAL_MspInit+0x44>)
 8000ba8:	699b      	ldr	r3, [r3, #24]
 8000baa:	f003 0301 	and.w	r3, r3, #1
 8000bae:	607b      	str	r3, [r7, #4]
 8000bb0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000bb2:	4b09      	ldr	r3, [pc, #36]	@ (8000bd8 <HAL_MspInit+0x44>)
 8000bb4:	69db      	ldr	r3, [r3, #28]
 8000bb6:	4a08      	ldr	r2, [pc, #32]	@ (8000bd8 <HAL_MspInit+0x44>)
 8000bb8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000bbc:	61d3      	str	r3, [r2, #28]
 8000bbe:	4b06      	ldr	r3, [pc, #24]	@ (8000bd8 <HAL_MspInit+0x44>)
 8000bc0:	69db      	ldr	r3, [r3, #28]
 8000bc2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000bc6:	603b      	str	r3, [r7, #0]
 8000bc8:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000bca:	2007      	movs	r0, #7
 8000bcc:	f000 fad8 	bl	8001180 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000bd0:	bf00      	nop
 8000bd2:	3708      	adds	r7, #8
 8000bd4:	46bd      	mov	sp, r7
 8000bd6:	bd80      	pop	{r7, pc}
 8000bd8:	40021000 	.word	0x40021000

08000bdc <HAL_TSC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htsc: TSC handle pointer
  * @retval None
  */
void HAL_TSC_MspInit(TSC_HandleTypeDef* htsc)
{
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	b08c      	sub	sp, #48	@ 0x30
 8000be0:	af00      	add	r7, sp, #0
 8000be2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000be4:	f107 031c 	add.w	r3, r7, #28
 8000be8:	2200      	movs	r2, #0
 8000bea:	601a      	str	r2, [r3, #0]
 8000bec:	605a      	str	r2, [r3, #4]
 8000bee:	609a      	str	r2, [r3, #8]
 8000bf0:	60da      	str	r2, [r3, #12]
 8000bf2:	611a      	str	r2, [r3, #16]
  if(htsc->Instance==TSC)
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	681b      	ldr	r3, [r3, #0]
 8000bf8:	4a64      	ldr	r2, [pc, #400]	@ (8000d8c <HAL_TSC_MspInit+0x1b0>)
 8000bfa:	4293      	cmp	r3, r2
 8000bfc:	f040 80c2 	bne.w	8000d84 <HAL_TSC_MspInit+0x1a8>
  {
    /* USER CODE BEGIN TSC_MspInit 0 */

    /* USER CODE END TSC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TSC_CLK_ENABLE();
 8000c00:	4b63      	ldr	r3, [pc, #396]	@ (8000d90 <HAL_TSC_MspInit+0x1b4>)
 8000c02:	695b      	ldr	r3, [r3, #20]
 8000c04:	4a62      	ldr	r2, [pc, #392]	@ (8000d90 <HAL_TSC_MspInit+0x1b4>)
 8000c06:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8000c0a:	6153      	str	r3, [r2, #20]
 8000c0c:	4b60      	ldr	r3, [pc, #384]	@ (8000d90 <HAL_TSC_MspInit+0x1b4>)
 8000c0e:	695b      	ldr	r3, [r3, #20]
 8000c10:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8000c14:	61bb      	str	r3, [r7, #24]
 8000c16:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8000c18:	4b5d      	ldr	r3, [pc, #372]	@ (8000d90 <HAL_TSC_MspInit+0x1b4>)
 8000c1a:	695b      	ldr	r3, [r3, #20]
 8000c1c:	4a5c      	ldr	r2, [pc, #368]	@ (8000d90 <HAL_TSC_MspInit+0x1b4>)
 8000c1e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000c22:	6153      	str	r3, [r2, #20]
 8000c24:	4b5a      	ldr	r3, [pc, #360]	@ (8000d90 <HAL_TSC_MspInit+0x1b4>)
 8000c26:	695b      	ldr	r3, [r3, #20]
 8000c28:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000c2c:	617b      	str	r3, [r7, #20]
 8000c2e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c30:	4b57      	ldr	r3, [pc, #348]	@ (8000d90 <HAL_TSC_MspInit+0x1b4>)
 8000c32:	695b      	ldr	r3, [r3, #20]
 8000c34:	4a56      	ldr	r2, [pc, #344]	@ (8000d90 <HAL_TSC_MspInit+0x1b4>)
 8000c36:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000c3a:	6153      	str	r3, [r2, #20]
 8000c3c:	4b54      	ldr	r3, [pc, #336]	@ (8000d90 <HAL_TSC_MspInit+0x1b4>)
 8000c3e:	695b      	ldr	r3, [r3, #20]
 8000c40:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000c44:	613b      	str	r3, [r7, #16]
 8000c46:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c48:	4b51      	ldr	r3, [pc, #324]	@ (8000d90 <HAL_TSC_MspInit+0x1b4>)
 8000c4a:	695b      	ldr	r3, [r3, #20]
 8000c4c:	4a50      	ldr	r2, [pc, #320]	@ (8000d90 <HAL_TSC_MspInit+0x1b4>)
 8000c4e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000c52:	6153      	str	r3, [r2, #20]
 8000c54:	4b4e      	ldr	r3, [pc, #312]	@ (8000d90 <HAL_TSC_MspInit+0x1b4>)
 8000c56:	695b      	ldr	r3, [r3, #20]
 8000c58:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000c5c:	60fb      	str	r3, [r7, #12]
 8000c5e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c60:	4b4b      	ldr	r3, [pc, #300]	@ (8000d90 <HAL_TSC_MspInit+0x1b4>)
 8000c62:	695b      	ldr	r3, [r3, #20]
 8000c64:	4a4a      	ldr	r2, [pc, #296]	@ (8000d90 <HAL_TSC_MspInit+0x1b4>)
 8000c66:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000c6a:	6153      	str	r3, [r2, #20]
 8000c6c:	4b48      	ldr	r3, [pc, #288]	@ (8000d90 <HAL_TSC_MspInit+0x1b4>)
 8000c6e:	695b      	ldr	r3, [r3, #20]
 8000c70:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000c74:	60bb      	str	r3, [r7, #8]
 8000c76:	68bb      	ldr	r3, [r7, #8]
    PD15     ------> TSC_G8_IO4
    PB4     ------> TSC_G5_IO2
    PB6     ------> TSC_G5_IO3
    PB7     ------> TSC_G5_IO4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5;
 8000c78:	2328      	movs	r3, #40	@ 0x28
 8000c7a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c7c:	2302      	movs	r3, #2
 8000c7e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c80:	2300      	movs	r3, #0
 8000c82:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c84:	2300      	movs	r3, #0
 8000c86:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TSC;
 8000c88:	2303      	movs	r3, #3
 8000c8a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000c8c:	f107 031c 	add.w	r3, r7, #28
 8000c90:	4619      	mov	r1, r3
 8000c92:	4840      	ldr	r0, [pc, #256]	@ (8000d94 <HAL_TSC_MspInit+0x1b8>)
 8000c94:	f000 faa8 	bl	80011e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000c98:	2310      	movs	r3, #16
 8000c9a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000c9c:	2312      	movs	r3, #18
 8000c9e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ca0:	2300      	movs	r3, #0
 8000ca2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ca4:	2300      	movs	r3, #0
 8000ca6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TSC;
 8000ca8:	2303      	movs	r3, #3
 8000caa:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000cac:	f107 031c 	add.w	r3, r7, #28
 8000cb0:	4619      	mov	r1, r3
 8000cb2:	4838      	ldr	r0, [pc, #224]	@ (8000d94 <HAL_TSC_MspInit+0x1b8>)
 8000cb4:	f000 fa98 	bl	80011e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_3|GPIO_PIN_5|GPIO_PIN_7;
 8000cb8:	23aa      	movs	r3, #170	@ 0xaa
 8000cba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cbc:	2302      	movs	r3, #2
 8000cbe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cc0:	2300      	movs	r3, #0
 8000cc2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TSC;
 8000cc8:	2303      	movs	r3, #3
 8000cca:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ccc:	f107 031c 	add.w	r3, r7, #28
 8000cd0:	4619      	mov	r1, r3
 8000cd2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000cd6:	f000 fa87 	bl	80011e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_6;
 8000cda:	2344      	movs	r3, #68	@ 0x44
 8000cdc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000cde:	2312      	movs	r3, #18
 8000ce0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ce2:	2300      	movs	r3, #0
 8000ce4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TSC;
 8000cea:	2303      	movs	r3, #3
 8000cec:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cee:	f107 031c 	add.w	r3, r7, #28
 8000cf2:	4619      	mov	r1, r3
 8000cf4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000cf8:	f000 fa76 	bl	80011e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_12|GPIO_PIN_14
 8000cfc:	f245 0395 	movw	r3, #20629	@ 0x5095
 8000d00:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_4|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d02:	2302      	movs	r3, #2
 8000d04:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d06:	2300      	movs	r3, #0
 8000d08:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d0a:	2300      	movs	r3, #0
 8000d0c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TSC;
 8000d0e:	2303      	movs	r3, #3
 8000d10:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d12:	f107 031c 	add.w	r3, r7, #28
 8000d16:	4619      	mov	r1, r3
 8000d18:	481f      	ldr	r0, [pc, #124]	@ (8000d98 <HAL_TSC_MspInit+0x1bc>)
 8000d1a:	f000 fa65 	bl	80011e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_13|GPIO_PIN_6;
 8000d1e:	f242 0342 	movw	r3, #8258	@ 0x2042
 8000d22:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000d24:	2312      	movs	r3, #18
 8000d26:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d28:	2300      	movs	r3, #0
 8000d2a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d2c:	2300      	movs	r3, #0
 8000d2e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TSC;
 8000d30:	2303      	movs	r3, #3
 8000d32:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d34:	f107 031c 	add.w	r3, r7, #28
 8000d38:	4619      	mov	r1, r3
 8000d3a:	4817      	ldr	r0, [pc, #92]	@ (8000d98 <HAL_TSC_MspInit+0x1bc>)
 8000d3c:	f000 fa54 	bl	80011e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 8000d40:	f44f 4320 	mov.w	r3, #40960	@ 0xa000
 8000d44:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d46:	2302      	movs	r3, #2
 8000d48:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d4e:	2300      	movs	r3, #0
 8000d50:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TSC;
 8000d52:	2303      	movs	r3, #3
 8000d54:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000d56:	f107 031c 	add.w	r3, r7, #28
 8000d5a:	4619      	mov	r1, r3
 8000d5c:	480f      	ldr	r0, [pc, #60]	@ (8000d9c <HAL_TSC_MspInit+0x1c0>)
 8000d5e:	f000 fa43 	bl	80011e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8000d62:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8000d66:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000d68:	2312      	movs	r3, #18
 8000d6a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d6c:	2300      	movs	r3, #0
 8000d6e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d70:	2300      	movs	r3, #0
 8000d72:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TSC;
 8000d74:	2303      	movs	r3, #3
 8000d76:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000d78:	f107 031c 	add.w	r3, r7, #28
 8000d7c:	4619      	mov	r1, r3
 8000d7e:	4807      	ldr	r0, [pc, #28]	@ (8000d9c <HAL_TSC_MspInit+0x1c0>)
 8000d80:	f000 fa32 	bl	80011e8 <HAL_GPIO_Init>

    /* USER CODE END TSC_MspInit 1 */

  }

}
 8000d84:	bf00      	nop
 8000d86:	3730      	adds	r7, #48	@ 0x30
 8000d88:	46bd      	mov	sp, r7
 8000d8a:	bd80      	pop	{r7, pc}
 8000d8c:	40024000 	.word	0x40024000
 8000d90:	40021000 	.word	0x40021000
 8000d94:	48001000 	.word	0x48001000
 8000d98:	48000400 	.word	0x48000400
 8000d9c:	48000c00 	.word	0x48000c00

08000da0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000da0:	b480      	push	{r7}
 8000da2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000da4:	bf00      	nop
 8000da6:	e7fd      	b.n	8000da4 <NMI_Handler+0x4>

08000da8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000da8:	b480      	push	{r7}
 8000daa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000dac:	bf00      	nop
 8000dae:	e7fd      	b.n	8000dac <HardFault_Handler+0x4>

08000db0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000db0:	b480      	push	{r7}
 8000db2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000db4:	bf00      	nop
 8000db6:	e7fd      	b.n	8000db4 <MemManage_Handler+0x4>

08000db8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000db8:	b480      	push	{r7}
 8000dba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000dbc:	bf00      	nop
 8000dbe:	e7fd      	b.n	8000dbc <BusFault_Handler+0x4>

08000dc0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000dc0:	b480      	push	{r7}
 8000dc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000dc4:	bf00      	nop
 8000dc6:	e7fd      	b.n	8000dc4 <UsageFault_Handler+0x4>

08000dc8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000dc8:	b480      	push	{r7}
 8000dca:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000dcc:	bf00      	nop
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd4:	4770      	bx	lr

08000dd6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000dd6:	b480      	push	{r7}
 8000dd8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000dda:	bf00      	nop
 8000ddc:	46bd      	mov	sp, r7
 8000dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de2:	4770      	bx	lr

08000de4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000de4:	b480      	push	{r7}
 8000de6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000de8:	bf00      	nop
 8000dea:	46bd      	mov	sp, r7
 8000dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df0:	4770      	bx	lr

08000df2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000df2:	b580      	push	{r7, lr}
 8000df4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000df6:	f000 f8cd 	bl	8000f94 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000dfa:	bf00      	nop
 8000dfc:	bd80      	pop	{r7, pc}
	...

08000e00 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000e00:	b580      	push	{r7, lr}
 8000e02:	b086      	sub	sp, #24
 8000e04:	af00      	add	r7, sp, #0
 8000e06:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000e08:	4a14      	ldr	r2, [pc, #80]	@ (8000e5c <_sbrk+0x5c>)
 8000e0a:	4b15      	ldr	r3, [pc, #84]	@ (8000e60 <_sbrk+0x60>)
 8000e0c:	1ad3      	subs	r3, r2, r3
 8000e0e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000e10:	697b      	ldr	r3, [r7, #20]
 8000e12:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000e14:	4b13      	ldr	r3, [pc, #76]	@ (8000e64 <_sbrk+0x64>)
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	2b00      	cmp	r3, #0
 8000e1a:	d102      	bne.n	8000e22 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000e1c:	4b11      	ldr	r3, [pc, #68]	@ (8000e64 <_sbrk+0x64>)
 8000e1e:	4a12      	ldr	r2, [pc, #72]	@ (8000e68 <_sbrk+0x68>)
 8000e20:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000e22:	4b10      	ldr	r3, [pc, #64]	@ (8000e64 <_sbrk+0x64>)
 8000e24:	681a      	ldr	r2, [r3, #0]
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	4413      	add	r3, r2
 8000e2a:	693a      	ldr	r2, [r7, #16]
 8000e2c:	429a      	cmp	r2, r3
 8000e2e:	d207      	bcs.n	8000e40 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000e30:	f001 fea8 	bl	8002b84 <__errno>
 8000e34:	4603      	mov	r3, r0
 8000e36:	220c      	movs	r2, #12
 8000e38:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000e3a:	f04f 33ff 	mov.w	r3, #4294967295
 8000e3e:	e009      	b.n	8000e54 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000e40:	4b08      	ldr	r3, [pc, #32]	@ (8000e64 <_sbrk+0x64>)
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000e46:	4b07      	ldr	r3, [pc, #28]	@ (8000e64 <_sbrk+0x64>)
 8000e48:	681a      	ldr	r2, [r3, #0]
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	4413      	add	r3, r2
 8000e4e:	4a05      	ldr	r2, [pc, #20]	@ (8000e64 <_sbrk+0x64>)
 8000e50:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000e52:	68fb      	ldr	r3, [r7, #12]
}
 8000e54:	4618      	mov	r0, r3
 8000e56:	3718      	adds	r7, #24
 8000e58:	46bd      	mov	sp, r7
 8000e5a:	bd80      	pop	{r7, pc}
 8000e5c:	2000a000 	.word	0x2000a000
 8000e60:	00000400 	.word	0x00000400
 8000e64:	20000104 	.word	0x20000104
 8000e68:	20000258 	.word	0x20000258

08000e6c <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e6c:	b480      	push	{r7}
 8000e6e:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000e70:	4b06      	ldr	r3, [pc, #24]	@ (8000e8c <SystemInit+0x20>)
 8000e72:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000e76:	4a05      	ldr	r2, [pc, #20]	@ (8000e8c <SystemInit+0x20>)
 8000e78:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000e7c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e80:	bf00      	nop
 8000e82:	46bd      	mov	sp, r7
 8000e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e88:	4770      	bx	lr
 8000e8a:	bf00      	nop
 8000e8c:	e000ed00 	.word	0xe000ed00

08000e90 <UI_PrintWelcomeMessage>:
#include <stdio.h>


extern SerialPort USART1_PORT;

void UI_PrintWelcomeMessage(void) {
 8000e90:	b580      	push	{r7, lr}
 8000e92:	af00      	add	r7, sp, #0
    SerialOutputString((uint8_t*)"Watch the LEDs closely and touch the sensors in the same pattern.\r\n", &USART1_PORT);
 8000e94:	4904      	ldr	r1, [pc, #16]	@ (8000ea8 <UI_PrintWelcomeMessage+0x18>)
 8000e96:	4805      	ldr	r0, [pc, #20]	@ (8000eac <UI_PrintWelcomeMessage+0x1c>)
 8000e98:	f7ff fe57 	bl	8000b4a <SerialOutputString>
    SerialOutputString((uint8_t*)"You have two seconds per sensor.\r\n", &USART1_PORT);
 8000e9c:	4902      	ldr	r1, [pc, #8]	@ (8000ea8 <UI_PrintWelcomeMessage+0x18>)
 8000e9e:	4804      	ldr	r0, [pc, #16]	@ (8000eb0 <UI_PrintWelcomeMessage+0x20>)
 8000ea0:	f7ff fe53 	bl	8000b4a <SerialOutputString>
}
 8000ea4:	bf00      	nop
 8000ea6:	bd80      	pop	{r7, pc}
 8000ea8:	20000008 	.word	0x20000008
 8000eac:	080035a8 	.word	0x080035a8
 8000eb0:	080035ec 	.word	0x080035ec

08000eb4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000eb4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000eec <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8000eb8:	f7ff ffd8 	bl	8000e6c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000ebc:	480c      	ldr	r0, [pc, #48]	@ (8000ef0 <LoopForever+0x6>)
  ldr r1, =_edata
 8000ebe:	490d      	ldr	r1, [pc, #52]	@ (8000ef4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000ec0:	4a0d      	ldr	r2, [pc, #52]	@ (8000ef8 <LoopForever+0xe>)
  movs r3, #0
 8000ec2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ec4:	e002      	b.n	8000ecc <LoopCopyDataInit>

08000ec6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ec6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ec8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000eca:	3304      	adds	r3, #4

08000ecc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ecc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ece:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ed0:	d3f9      	bcc.n	8000ec6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ed2:	4a0a      	ldr	r2, [pc, #40]	@ (8000efc <LoopForever+0x12>)
  ldr r4, =_ebss
 8000ed4:	4c0a      	ldr	r4, [pc, #40]	@ (8000f00 <LoopForever+0x16>)
  movs r3, #0
 8000ed6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ed8:	e001      	b.n	8000ede <LoopFillZerobss>

08000eda <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000eda:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000edc:	3204      	adds	r2, #4

08000ede <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ede:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ee0:	d3fb      	bcc.n	8000eda <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000ee2:	f001 fe55 	bl	8002b90 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000ee6:	f7ff fbd5 	bl	8000694 <main>

08000eea <LoopForever>:

LoopForever:
    b LoopForever
 8000eea:	e7fe      	b.n	8000eea <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000eec:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 8000ef0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ef4:	200000a4 	.word	0x200000a4
  ldr r2, =_sidata
 8000ef8:	080036e4 	.word	0x080036e4
  ldr r2, =_sbss
 8000efc:	200000a4 	.word	0x200000a4
  ldr r4, =_ebss
 8000f00:	20000254 	.word	0x20000254

08000f04 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000f04:	e7fe      	b.n	8000f04 <ADC1_2_IRQHandler>
	...

08000f08 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f0c:	4b08      	ldr	r3, [pc, #32]	@ (8000f30 <HAL_Init+0x28>)
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	4a07      	ldr	r2, [pc, #28]	@ (8000f30 <HAL_Init+0x28>)
 8000f12:	f043 0310 	orr.w	r3, r3, #16
 8000f16:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f18:	2003      	movs	r0, #3
 8000f1a:	f000 f931 	bl	8001180 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f1e:	2000      	movs	r0, #0
 8000f20:	f000 f808 	bl	8000f34 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f24:	f7ff fe36 	bl	8000b94 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f28:	2300      	movs	r3, #0
}
 8000f2a:	4618      	mov	r0, r3
 8000f2c:	bd80      	pop	{r7, pc}
 8000f2e:	bf00      	nop
 8000f30:	40022000 	.word	0x40022000

08000f34 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	b082      	sub	sp, #8
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f3c:	4b12      	ldr	r3, [pc, #72]	@ (8000f88 <HAL_InitTick+0x54>)
 8000f3e:	681a      	ldr	r2, [r3, #0]
 8000f40:	4b12      	ldr	r3, [pc, #72]	@ (8000f8c <HAL_InitTick+0x58>)
 8000f42:	781b      	ldrb	r3, [r3, #0]
 8000f44:	4619      	mov	r1, r3
 8000f46:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000f4a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f4e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f52:	4618      	mov	r0, r3
 8000f54:	f000 f93b 	bl	80011ce <HAL_SYSTICK_Config>
 8000f58:	4603      	mov	r3, r0
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	d001      	beq.n	8000f62 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000f5e:	2301      	movs	r3, #1
 8000f60:	e00e      	b.n	8000f80 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	2b0f      	cmp	r3, #15
 8000f66:	d80a      	bhi.n	8000f7e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f68:	2200      	movs	r2, #0
 8000f6a:	6879      	ldr	r1, [r7, #4]
 8000f6c:	f04f 30ff 	mov.w	r0, #4294967295
 8000f70:	f000 f911 	bl	8001196 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f74:	4a06      	ldr	r2, [pc, #24]	@ (8000f90 <HAL_InitTick+0x5c>)
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	e000      	b.n	8000f80 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000f7e:	2301      	movs	r3, #1
}
 8000f80:	4618      	mov	r0, r3
 8000f82:	3708      	adds	r7, #8
 8000f84:	46bd      	mov	sp, r7
 8000f86:	bd80      	pop	{r7, pc}
 8000f88:	20000048 	.word	0x20000048
 8000f8c:	20000050 	.word	0x20000050
 8000f90:	2000004c 	.word	0x2000004c

08000f94 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f94:	b480      	push	{r7}
 8000f96:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f98:	4b06      	ldr	r3, [pc, #24]	@ (8000fb4 <HAL_IncTick+0x20>)
 8000f9a:	781b      	ldrb	r3, [r3, #0]
 8000f9c:	461a      	mov	r2, r3
 8000f9e:	4b06      	ldr	r3, [pc, #24]	@ (8000fb8 <HAL_IncTick+0x24>)
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	4413      	add	r3, r2
 8000fa4:	4a04      	ldr	r2, [pc, #16]	@ (8000fb8 <HAL_IncTick+0x24>)
 8000fa6:	6013      	str	r3, [r2, #0]
}
 8000fa8:	bf00      	nop
 8000faa:	46bd      	mov	sp, r7
 8000fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb0:	4770      	bx	lr
 8000fb2:	bf00      	nop
 8000fb4:	20000050 	.word	0x20000050
 8000fb8:	20000108 	.word	0x20000108

08000fbc <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000fbc:	b480      	push	{r7}
 8000fbe:	af00      	add	r7, sp, #0
  return uwTick;  
 8000fc0:	4b03      	ldr	r3, [pc, #12]	@ (8000fd0 <HAL_GetTick+0x14>)
 8000fc2:	681b      	ldr	r3, [r3, #0]
}
 8000fc4:	4618      	mov	r0, r3
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fcc:	4770      	bx	lr
 8000fce:	bf00      	nop
 8000fd0:	20000108 	.word	0x20000108

08000fd4 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	b084      	sub	sp, #16
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000fdc:	f7ff ffee 	bl	8000fbc <HAL_GetTick>
 8000fe0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000fe6:	68fb      	ldr	r3, [r7, #12]
 8000fe8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000fec:	d005      	beq.n	8000ffa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000fee:	4b0a      	ldr	r3, [pc, #40]	@ (8001018 <HAL_Delay+0x44>)
 8000ff0:	781b      	ldrb	r3, [r3, #0]
 8000ff2:	461a      	mov	r2, r3
 8000ff4:	68fb      	ldr	r3, [r7, #12]
 8000ff6:	4413      	add	r3, r2
 8000ff8:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000ffa:	bf00      	nop
 8000ffc:	f7ff ffde 	bl	8000fbc <HAL_GetTick>
 8001000:	4602      	mov	r2, r0
 8001002:	68bb      	ldr	r3, [r7, #8]
 8001004:	1ad3      	subs	r3, r2, r3
 8001006:	68fa      	ldr	r2, [r7, #12]
 8001008:	429a      	cmp	r2, r3
 800100a:	d8f7      	bhi.n	8000ffc <HAL_Delay+0x28>
  {
  }
}
 800100c:	bf00      	nop
 800100e:	bf00      	nop
 8001010:	3710      	adds	r7, #16
 8001012:	46bd      	mov	sp, r7
 8001014:	bd80      	pop	{r7, pc}
 8001016:	bf00      	nop
 8001018:	20000050 	.word	0x20000050

0800101c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800101c:	b480      	push	{r7}
 800101e:	b085      	sub	sp, #20
 8001020:	af00      	add	r7, sp, #0
 8001022:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	f003 0307 	and.w	r3, r3, #7
 800102a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800102c:	4b0c      	ldr	r3, [pc, #48]	@ (8001060 <__NVIC_SetPriorityGrouping+0x44>)
 800102e:	68db      	ldr	r3, [r3, #12]
 8001030:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001032:	68ba      	ldr	r2, [r7, #8]
 8001034:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001038:	4013      	ands	r3, r2
 800103a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800103c:	68fb      	ldr	r3, [r7, #12]
 800103e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001040:	68bb      	ldr	r3, [r7, #8]
 8001042:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001044:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001048:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800104c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800104e:	4a04      	ldr	r2, [pc, #16]	@ (8001060 <__NVIC_SetPriorityGrouping+0x44>)
 8001050:	68bb      	ldr	r3, [r7, #8]
 8001052:	60d3      	str	r3, [r2, #12]
}
 8001054:	bf00      	nop
 8001056:	3714      	adds	r7, #20
 8001058:	46bd      	mov	sp, r7
 800105a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800105e:	4770      	bx	lr
 8001060:	e000ed00 	.word	0xe000ed00

08001064 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001064:	b480      	push	{r7}
 8001066:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001068:	4b04      	ldr	r3, [pc, #16]	@ (800107c <__NVIC_GetPriorityGrouping+0x18>)
 800106a:	68db      	ldr	r3, [r3, #12]
 800106c:	0a1b      	lsrs	r3, r3, #8
 800106e:	f003 0307 	and.w	r3, r3, #7
}
 8001072:	4618      	mov	r0, r3
 8001074:	46bd      	mov	sp, r7
 8001076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107a:	4770      	bx	lr
 800107c:	e000ed00 	.word	0xe000ed00

08001080 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001080:	b480      	push	{r7}
 8001082:	b083      	sub	sp, #12
 8001084:	af00      	add	r7, sp, #0
 8001086:	4603      	mov	r3, r0
 8001088:	6039      	str	r1, [r7, #0]
 800108a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800108c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001090:	2b00      	cmp	r3, #0
 8001092:	db0a      	blt.n	80010aa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001094:	683b      	ldr	r3, [r7, #0]
 8001096:	b2da      	uxtb	r2, r3
 8001098:	490c      	ldr	r1, [pc, #48]	@ (80010cc <__NVIC_SetPriority+0x4c>)
 800109a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800109e:	0112      	lsls	r2, r2, #4
 80010a0:	b2d2      	uxtb	r2, r2
 80010a2:	440b      	add	r3, r1
 80010a4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80010a8:	e00a      	b.n	80010c0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010aa:	683b      	ldr	r3, [r7, #0]
 80010ac:	b2da      	uxtb	r2, r3
 80010ae:	4908      	ldr	r1, [pc, #32]	@ (80010d0 <__NVIC_SetPriority+0x50>)
 80010b0:	79fb      	ldrb	r3, [r7, #7]
 80010b2:	f003 030f 	and.w	r3, r3, #15
 80010b6:	3b04      	subs	r3, #4
 80010b8:	0112      	lsls	r2, r2, #4
 80010ba:	b2d2      	uxtb	r2, r2
 80010bc:	440b      	add	r3, r1
 80010be:	761a      	strb	r2, [r3, #24]
}
 80010c0:	bf00      	nop
 80010c2:	370c      	adds	r7, #12
 80010c4:	46bd      	mov	sp, r7
 80010c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ca:	4770      	bx	lr
 80010cc:	e000e100 	.word	0xe000e100
 80010d0:	e000ed00 	.word	0xe000ed00

080010d4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80010d4:	b480      	push	{r7}
 80010d6:	b089      	sub	sp, #36	@ 0x24
 80010d8:	af00      	add	r7, sp, #0
 80010da:	60f8      	str	r0, [r7, #12]
 80010dc:	60b9      	str	r1, [r7, #8]
 80010de:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80010e0:	68fb      	ldr	r3, [r7, #12]
 80010e2:	f003 0307 	and.w	r3, r3, #7
 80010e6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80010e8:	69fb      	ldr	r3, [r7, #28]
 80010ea:	f1c3 0307 	rsb	r3, r3, #7
 80010ee:	2b04      	cmp	r3, #4
 80010f0:	bf28      	it	cs
 80010f2:	2304      	movcs	r3, #4
 80010f4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80010f6:	69fb      	ldr	r3, [r7, #28]
 80010f8:	3304      	adds	r3, #4
 80010fa:	2b06      	cmp	r3, #6
 80010fc:	d902      	bls.n	8001104 <NVIC_EncodePriority+0x30>
 80010fe:	69fb      	ldr	r3, [r7, #28]
 8001100:	3b03      	subs	r3, #3
 8001102:	e000      	b.n	8001106 <NVIC_EncodePriority+0x32>
 8001104:	2300      	movs	r3, #0
 8001106:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001108:	f04f 32ff 	mov.w	r2, #4294967295
 800110c:	69bb      	ldr	r3, [r7, #24]
 800110e:	fa02 f303 	lsl.w	r3, r2, r3
 8001112:	43da      	mvns	r2, r3
 8001114:	68bb      	ldr	r3, [r7, #8]
 8001116:	401a      	ands	r2, r3
 8001118:	697b      	ldr	r3, [r7, #20]
 800111a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800111c:	f04f 31ff 	mov.w	r1, #4294967295
 8001120:	697b      	ldr	r3, [r7, #20]
 8001122:	fa01 f303 	lsl.w	r3, r1, r3
 8001126:	43d9      	mvns	r1, r3
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800112c:	4313      	orrs	r3, r2
         );
}
 800112e:	4618      	mov	r0, r3
 8001130:	3724      	adds	r7, #36	@ 0x24
 8001132:	46bd      	mov	sp, r7
 8001134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001138:	4770      	bx	lr
	...

0800113c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800113c:	b580      	push	{r7, lr}
 800113e:	b082      	sub	sp, #8
 8001140:	af00      	add	r7, sp, #0
 8001142:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	3b01      	subs	r3, #1
 8001148:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800114c:	d301      	bcc.n	8001152 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800114e:	2301      	movs	r3, #1
 8001150:	e00f      	b.n	8001172 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001152:	4a0a      	ldr	r2, [pc, #40]	@ (800117c <SysTick_Config+0x40>)
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	3b01      	subs	r3, #1
 8001158:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800115a:	210f      	movs	r1, #15
 800115c:	f04f 30ff 	mov.w	r0, #4294967295
 8001160:	f7ff ff8e 	bl	8001080 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001164:	4b05      	ldr	r3, [pc, #20]	@ (800117c <SysTick_Config+0x40>)
 8001166:	2200      	movs	r2, #0
 8001168:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800116a:	4b04      	ldr	r3, [pc, #16]	@ (800117c <SysTick_Config+0x40>)
 800116c:	2207      	movs	r2, #7
 800116e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001170:	2300      	movs	r3, #0
}
 8001172:	4618      	mov	r0, r3
 8001174:	3708      	adds	r7, #8
 8001176:	46bd      	mov	sp, r7
 8001178:	bd80      	pop	{r7, pc}
 800117a:	bf00      	nop
 800117c:	e000e010 	.word	0xe000e010

08001180 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001180:	b580      	push	{r7, lr}
 8001182:	b082      	sub	sp, #8
 8001184:	af00      	add	r7, sp, #0
 8001186:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001188:	6878      	ldr	r0, [r7, #4]
 800118a:	f7ff ff47 	bl	800101c <__NVIC_SetPriorityGrouping>
}
 800118e:	bf00      	nop
 8001190:	3708      	adds	r7, #8
 8001192:	46bd      	mov	sp, r7
 8001194:	bd80      	pop	{r7, pc}

08001196 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001196:	b580      	push	{r7, lr}
 8001198:	b086      	sub	sp, #24
 800119a:	af00      	add	r7, sp, #0
 800119c:	4603      	mov	r3, r0
 800119e:	60b9      	str	r1, [r7, #8]
 80011a0:	607a      	str	r2, [r7, #4]
 80011a2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80011a4:	2300      	movs	r3, #0
 80011a6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80011a8:	f7ff ff5c 	bl	8001064 <__NVIC_GetPriorityGrouping>
 80011ac:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80011ae:	687a      	ldr	r2, [r7, #4]
 80011b0:	68b9      	ldr	r1, [r7, #8]
 80011b2:	6978      	ldr	r0, [r7, #20]
 80011b4:	f7ff ff8e 	bl	80010d4 <NVIC_EncodePriority>
 80011b8:	4602      	mov	r2, r0
 80011ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80011be:	4611      	mov	r1, r2
 80011c0:	4618      	mov	r0, r3
 80011c2:	f7ff ff5d 	bl	8001080 <__NVIC_SetPriority>
}
 80011c6:	bf00      	nop
 80011c8:	3718      	adds	r7, #24
 80011ca:	46bd      	mov	sp, r7
 80011cc:	bd80      	pop	{r7, pc}

080011ce <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80011ce:	b580      	push	{r7, lr}
 80011d0:	b082      	sub	sp, #8
 80011d2:	af00      	add	r7, sp, #0
 80011d4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80011d6:	6878      	ldr	r0, [r7, #4]
 80011d8:	f7ff ffb0 	bl	800113c <SysTick_Config>
 80011dc:	4603      	mov	r3, r0
}
 80011de:	4618      	mov	r0, r3
 80011e0:	3708      	adds	r7, #8
 80011e2:	46bd      	mov	sp, r7
 80011e4:	bd80      	pop	{r7, pc}
	...

080011e8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80011e8:	b480      	push	{r7}
 80011ea:	b087      	sub	sp, #28
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	6078      	str	r0, [r7, #4]
 80011f0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80011f2:	2300      	movs	r3, #0
 80011f4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80011f6:	e154      	b.n	80014a2 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80011f8:	683b      	ldr	r3, [r7, #0]
 80011fa:	681a      	ldr	r2, [r3, #0]
 80011fc:	2101      	movs	r1, #1
 80011fe:	697b      	ldr	r3, [r7, #20]
 8001200:	fa01 f303 	lsl.w	r3, r1, r3
 8001204:	4013      	ands	r3, r2
 8001206:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001208:	68fb      	ldr	r3, [r7, #12]
 800120a:	2b00      	cmp	r3, #0
 800120c:	f000 8146 	beq.w	800149c <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001210:	683b      	ldr	r3, [r7, #0]
 8001212:	685b      	ldr	r3, [r3, #4]
 8001214:	f003 0303 	and.w	r3, r3, #3
 8001218:	2b01      	cmp	r3, #1
 800121a:	d005      	beq.n	8001228 <HAL_GPIO_Init+0x40>
 800121c:	683b      	ldr	r3, [r7, #0]
 800121e:	685b      	ldr	r3, [r3, #4]
 8001220:	f003 0303 	and.w	r3, r3, #3
 8001224:	2b02      	cmp	r3, #2
 8001226:	d130      	bne.n	800128a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	689b      	ldr	r3, [r3, #8]
 800122c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800122e:	697b      	ldr	r3, [r7, #20]
 8001230:	005b      	lsls	r3, r3, #1
 8001232:	2203      	movs	r2, #3
 8001234:	fa02 f303 	lsl.w	r3, r2, r3
 8001238:	43db      	mvns	r3, r3
 800123a:	693a      	ldr	r2, [r7, #16]
 800123c:	4013      	ands	r3, r2
 800123e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001240:	683b      	ldr	r3, [r7, #0]
 8001242:	68da      	ldr	r2, [r3, #12]
 8001244:	697b      	ldr	r3, [r7, #20]
 8001246:	005b      	lsls	r3, r3, #1
 8001248:	fa02 f303 	lsl.w	r3, r2, r3
 800124c:	693a      	ldr	r2, [r7, #16]
 800124e:	4313      	orrs	r3, r2
 8001250:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	693a      	ldr	r2, [r7, #16]
 8001256:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	685b      	ldr	r3, [r3, #4]
 800125c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800125e:	2201      	movs	r2, #1
 8001260:	697b      	ldr	r3, [r7, #20]
 8001262:	fa02 f303 	lsl.w	r3, r2, r3
 8001266:	43db      	mvns	r3, r3
 8001268:	693a      	ldr	r2, [r7, #16]
 800126a:	4013      	ands	r3, r2
 800126c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800126e:	683b      	ldr	r3, [r7, #0]
 8001270:	685b      	ldr	r3, [r3, #4]
 8001272:	091b      	lsrs	r3, r3, #4
 8001274:	f003 0201 	and.w	r2, r3, #1
 8001278:	697b      	ldr	r3, [r7, #20]
 800127a:	fa02 f303 	lsl.w	r3, r2, r3
 800127e:	693a      	ldr	r2, [r7, #16]
 8001280:	4313      	orrs	r3, r2
 8001282:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	693a      	ldr	r2, [r7, #16]
 8001288:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800128a:	683b      	ldr	r3, [r7, #0]
 800128c:	685b      	ldr	r3, [r3, #4]
 800128e:	f003 0303 	and.w	r3, r3, #3
 8001292:	2b03      	cmp	r3, #3
 8001294:	d017      	beq.n	80012c6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	68db      	ldr	r3, [r3, #12]
 800129a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 800129c:	697b      	ldr	r3, [r7, #20]
 800129e:	005b      	lsls	r3, r3, #1
 80012a0:	2203      	movs	r2, #3
 80012a2:	fa02 f303 	lsl.w	r3, r2, r3
 80012a6:	43db      	mvns	r3, r3
 80012a8:	693a      	ldr	r2, [r7, #16]
 80012aa:	4013      	ands	r3, r2
 80012ac:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80012ae:	683b      	ldr	r3, [r7, #0]
 80012b0:	689a      	ldr	r2, [r3, #8]
 80012b2:	697b      	ldr	r3, [r7, #20]
 80012b4:	005b      	lsls	r3, r3, #1
 80012b6:	fa02 f303 	lsl.w	r3, r2, r3
 80012ba:	693a      	ldr	r2, [r7, #16]
 80012bc:	4313      	orrs	r3, r2
 80012be:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	693a      	ldr	r2, [r7, #16]
 80012c4:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80012c6:	683b      	ldr	r3, [r7, #0]
 80012c8:	685b      	ldr	r3, [r3, #4]
 80012ca:	f003 0303 	and.w	r3, r3, #3
 80012ce:	2b02      	cmp	r3, #2
 80012d0:	d123      	bne.n	800131a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80012d2:	697b      	ldr	r3, [r7, #20]
 80012d4:	08da      	lsrs	r2, r3, #3
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	3208      	adds	r2, #8
 80012da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80012de:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80012e0:	697b      	ldr	r3, [r7, #20]
 80012e2:	f003 0307 	and.w	r3, r3, #7
 80012e6:	009b      	lsls	r3, r3, #2
 80012e8:	220f      	movs	r2, #15
 80012ea:	fa02 f303 	lsl.w	r3, r2, r3
 80012ee:	43db      	mvns	r3, r3
 80012f0:	693a      	ldr	r2, [r7, #16]
 80012f2:	4013      	ands	r3, r2
 80012f4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80012f6:	683b      	ldr	r3, [r7, #0]
 80012f8:	691a      	ldr	r2, [r3, #16]
 80012fa:	697b      	ldr	r3, [r7, #20]
 80012fc:	f003 0307 	and.w	r3, r3, #7
 8001300:	009b      	lsls	r3, r3, #2
 8001302:	fa02 f303 	lsl.w	r3, r2, r3
 8001306:	693a      	ldr	r2, [r7, #16]
 8001308:	4313      	orrs	r3, r2
 800130a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800130c:	697b      	ldr	r3, [r7, #20]
 800130e:	08da      	lsrs	r2, r3, #3
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	3208      	adds	r2, #8
 8001314:	6939      	ldr	r1, [r7, #16]
 8001316:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001320:	697b      	ldr	r3, [r7, #20]
 8001322:	005b      	lsls	r3, r3, #1
 8001324:	2203      	movs	r2, #3
 8001326:	fa02 f303 	lsl.w	r3, r2, r3
 800132a:	43db      	mvns	r3, r3
 800132c:	693a      	ldr	r2, [r7, #16]
 800132e:	4013      	ands	r3, r2
 8001330:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001332:	683b      	ldr	r3, [r7, #0]
 8001334:	685b      	ldr	r3, [r3, #4]
 8001336:	f003 0203 	and.w	r2, r3, #3
 800133a:	697b      	ldr	r3, [r7, #20]
 800133c:	005b      	lsls	r3, r3, #1
 800133e:	fa02 f303 	lsl.w	r3, r2, r3
 8001342:	693a      	ldr	r2, [r7, #16]
 8001344:	4313      	orrs	r3, r2
 8001346:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	693a      	ldr	r2, [r7, #16]
 800134c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800134e:	683b      	ldr	r3, [r7, #0]
 8001350:	685b      	ldr	r3, [r3, #4]
 8001352:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001356:	2b00      	cmp	r3, #0
 8001358:	f000 80a0 	beq.w	800149c <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800135c:	4b58      	ldr	r3, [pc, #352]	@ (80014c0 <HAL_GPIO_Init+0x2d8>)
 800135e:	699b      	ldr	r3, [r3, #24]
 8001360:	4a57      	ldr	r2, [pc, #348]	@ (80014c0 <HAL_GPIO_Init+0x2d8>)
 8001362:	f043 0301 	orr.w	r3, r3, #1
 8001366:	6193      	str	r3, [r2, #24]
 8001368:	4b55      	ldr	r3, [pc, #340]	@ (80014c0 <HAL_GPIO_Init+0x2d8>)
 800136a:	699b      	ldr	r3, [r3, #24]
 800136c:	f003 0301 	and.w	r3, r3, #1
 8001370:	60bb      	str	r3, [r7, #8]
 8001372:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001374:	4a53      	ldr	r2, [pc, #332]	@ (80014c4 <HAL_GPIO_Init+0x2dc>)
 8001376:	697b      	ldr	r3, [r7, #20]
 8001378:	089b      	lsrs	r3, r3, #2
 800137a:	3302      	adds	r3, #2
 800137c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001380:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001382:	697b      	ldr	r3, [r7, #20]
 8001384:	f003 0303 	and.w	r3, r3, #3
 8001388:	009b      	lsls	r3, r3, #2
 800138a:	220f      	movs	r2, #15
 800138c:	fa02 f303 	lsl.w	r3, r2, r3
 8001390:	43db      	mvns	r3, r3
 8001392:	693a      	ldr	r2, [r7, #16]
 8001394:	4013      	ands	r3, r2
 8001396:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800139e:	d019      	beq.n	80013d4 <HAL_GPIO_Init+0x1ec>
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	4a49      	ldr	r2, [pc, #292]	@ (80014c8 <HAL_GPIO_Init+0x2e0>)
 80013a4:	4293      	cmp	r3, r2
 80013a6:	d013      	beq.n	80013d0 <HAL_GPIO_Init+0x1e8>
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	4a48      	ldr	r2, [pc, #288]	@ (80014cc <HAL_GPIO_Init+0x2e4>)
 80013ac:	4293      	cmp	r3, r2
 80013ae:	d00d      	beq.n	80013cc <HAL_GPIO_Init+0x1e4>
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	4a47      	ldr	r2, [pc, #284]	@ (80014d0 <HAL_GPIO_Init+0x2e8>)
 80013b4:	4293      	cmp	r3, r2
 80013b6:	d007      	beq.n	80013c8 <HAL_GPIO_Init+0x1e0>
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	4a46      	ldr	r2, [pc, #280]	@ (80014d4 <HAL_GPIO_Init+0x2ec>)
 80013bc:	4293      	cmp	r3, r2
 80013be:	d101      	bne.n	80013c4 <HAL_GPIO_Init+0x1dc>
 80013c0:	2304      	movs	r3, #4
 80013c2:	e008      	b.n	80013d6 <HAL_GPIO_Init+0x1ee>
 80013c4:	2305      	movs	r3, #5
 80013c6:	e006      	b.n	80013d6 <HAL_GPIO_Init+0x1ee>
 80013c8:	2303      	movs	r3, #3
 80013ca:	e004      	b.n	80013d6 <HAL_GPIO_Init+0x1ee>
 80013cc:	2302      	movs	r3, #2
 80013ce:	e002      	b.n	80013d6 <HAL_GPIO_Init+0x1ee>
 80013d0:	2301      	movs	r3, #1
 80013d2:	e000      	b.n	80013d6 <HAL_GPIO_Init+0x1ee>
 80013d4:	2300      	movs	r3, #0
 80013d6:	697a      	ldr	r2, [r7, #20]
 80013d8:	f002 0203 	and.w	r2, r2, #3
 80013dc:	0092      	lsls	r2, r2, #2
 80013de:	4093      	lsls	r3, r2
 80013e0:	693a      	ldr	r2, [r7, #16]
 80013e2:	4313      	orrs	r3, r2
 80013e4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80013e6:	4937      	ldr	r1, [pc, #220]	@ (80014c4 <HAL_GPIO_Init+0x2dc>)
 80013e8:	697b      	ldr	r3, [r7, #20]
 80013ea:	089b      	lsrs	r3, r3, #2
 80013ec:	3302      	adds	r3, #2
 80013ee:	693a      	ldr	r2, [r7, #16]
 80013f0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80013f4:	4b38      	ldr	r3, [pc, #224]	@ (80014d8 <HAL_GPIO_Init+0x2f0>)
 80013f6:	689b      	ldr	r3, [r3, #8]
 80013f8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80013fa:	68fb      	ldr	r3, [r7, #12]
 80013fc:	43db      	mvns	r3, r3
 80013fe:	693a      	ldr	r2, [r7, #16]
 8001400:	4013      	ands	r3, r2
 8001402:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001404:	683b      	ldr	r3, [r7, #0]
 8001406:	685b      	ldr	r3, [r3, #4]
 8001408:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800140c:	2b00      	cmp	r3, #0
 800140e:	d003      	beq.n	8001418 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8001410:	693a      	ldr	r2, [r7, #16]
 8001412:	68fb      	ldr	r3, [r7, #12]
 8001414:	4313      	orrs	r3, r2
 8001416:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001418:	4a2f      	ldr	r2, [pc, #188]	@ (80014d8 <HAL_GPIO_Init+0x2f0>)
 800141a:	693b      	ldr	r3, [r7, #16]
 800141c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800141e:	4b2e      	ldr	r3, [pc, #184]	@ (80014d8 <HAL_GPIO_Init+0x2f0>)
 8001420:	68db      	ldr	r3, [r3, #12]
 8001422:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001424:	68fb      	ldr	r3, [r7, #12]
 8001426:	43db      	mvns	r3, r3
 8001428:	693a      	ldr	r2, [r7, #16]
 800142a:	4013      	ands	r3, r2
 800142c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800142e:	683b      	ldr	r3, [r7, #0]
 8001430:	685b      	ldr	r3, [r3, #4]
 8001432:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001436:	2b00      	cmp	r3, #0
 8001438:	d003      	beq.n	8001442 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 800143a:	693a      	ldr	r2, [r7, #16]
 800143c:	68fb      	ldr	r3, [r7, #12]
 800143e:	4313      	orrs	r3, r2
 8001440:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001442:	4a25      	ldr	r2, [pc, #148]	@ (80014d8 <HAL_GPIO_Init+0x2f0>)
 8001444:	693b      	ldr	r3, [r7, #16]
 8001446:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001448:	4b23      	ldr	r3, [pc, #140]	@ (80014d8 <HAL_GPIO_Init+0x2f0>)
 800144a:	685b      	ldr	r3, [r3, #4]
 800144c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800144e:	68fb      	ldr	r3, [r7, #12]
 8001450:	43db      	mvns	r3, r3
 8001452:	693a      	ldr	r2, [r7, #16]
 8001454:	4013      	ands	r3, r2
 8001456:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001458:	683b      	ldr	r3, [r7, #0]
 800145a:	685b      	ldr	r3, [r3, #4]
 800145c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001460:	2b00      	cmp	r3, #0
 8001462:	d003      	beq.n	800146c <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8001464:	693a      	ldr	r2, [r7, #16]
 8001466:	68fb      	ldr	r3, [r7, #12]
 8001468:	4313      	orrs	r3, r2
 800146a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800146c:	4a1a      	ldr	r2, [pc, #104]	@ (80014d8 <HAL_GPIO_Init+0x2f0>)
 800146e:	693b      	ldr	r3, [r7, #16]
 8001470:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001472:	4b19      	ldr	r3, [pc, #100]	@ (80014d8 <HAL_GPIO_Init+0x2f0>)
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001478:	68fb      	ldr	r3, [r7, #12]
 800147a:	43db      	mvns	r3, r3
 800147c:	693a      	ldr	r2, [r7, #16]
 800147e:	4013      	ands	r3, r2
 8001480:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001482:	683b      	ldr	r3, [r7, #0]
 8001484:	685b      	ldr	r3, [r3, #4]
 8001486:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800148a:	2b00      	cmp	r3, #0
 800148c:	d003      	beq.n	8001496 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800148e:	693a      	ldr	r2, [r7, #16]
 8001490:	68fb      	ldr	r3, [r7, #12]
 8001492:	4313      	orrs	r3, r2
 8001494:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001496:	4a10      	ldr	r2, [pc, #64]	@ (80014d8 <HAL_GPIO_Init+0x2f0>)
 8001498:	693b      	ldr	r3, [r7, #16]
 800149a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800149c:	697b      	ldr	r3, [r7, #20]
 800149e:	3301      	adds	r3, #1
 80014a0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80014a2:	683b      	ldr	r3, [r7, #0]
 80014a4:	681a      	ldr	r2, [r3, #0]
 80014a6:	697b      	ldr	r3, [r7, #20]
 80014a8:	fa22 f303 	lsr.w	r3, r2, r3
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	f47f aea3 	bne.w	80011f8 <HAL_GPIO_Init+0x10>
  }
}
 80014b2:	bf00      	nop
 80014b4:	bf00      	nop
 80014b6:	371c      	adds	r7, #28
 80014b8:	46bd      	mov	sp, r7
 80014ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014be:	4770      	bx	lr
 80014c0:	40021000 	.word	0x40021000
 80014c4:	40010000 	.word	0x40010000
 80014c8:	48000400 	.word	0x48000400
 80014cc:	48000800 	.word	0x48000800
 80014d0:	48000c00 	.word	0x48000c00
 80014d4:	48001000 	.word	0x48001000
 80014d8:	40010400 	.word	0x40010400

080014dc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80014dc:	b480      	push	{r7}
 80014de:	b083      	sub	sp, #12
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	6078      	str	r0, [r7, #4]
 80014e4:	460b      	mov	r3, r1
 80014e6:	807b      	strh	r3, [r7, #2]
 80014e8:	4613      	mov	r3, r2
 80014ea:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80014ec:	787b      	ldrb	r3, [r7, #1]
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d003      	beq.n	80014fa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80014f2:	887a      	ldrh	r2, [r7, #2]
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80014f8:	e002      	b.n	8001500 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80014fa:	887a      	ldrh	r2, [r7, #2]
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001500:	bf00      	nop
 8001502:	370c      	adds	r7, #12
 8001504:	46bd      	mov	sp, r7
 8001506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800150a:	4770      	bx	lr

0800150c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800150c:	b580      	push	{r7, lr}
 800150e:	f5ad 7d00 	sub.w	sp, sp, #512	@ 0x200
 8001512:	af00      	add	r7, sp, #0
 8001514:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001518:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800151c:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800151e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001522:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	2b00      	cmp	r3, #0
 800152a:	d102      	bne.n	8001532 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 800152c:	2301      	movs	r3, #1
 800152e:	f000 bff4 	b.w	800251a <HAL_RCC_OscConfig+0x100e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001532:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001536:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	f003 0301 	and.w	r3, r3, #1
 8001542:	2b00      	cmp	r3, #0
 8001544:	f000 816d 	beq.w	8001822 <HAL_RCC_OscConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001548:	4bb4      	ldr	r3, [pc, #720]	@ (800181c <HAL_RCC_OscConfig+0x310>)
 800154a:	685b      	ldr	r3, [r3, #4]
 800154c:	f003 030c 	and.w	r3, r3, #12
 8001550:	2b04      	cmp	r3, #4
 8001552:	d00c      	beq.n	800156e <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001554:	4bb1      	ldr	r3, [pc, #708]	@ (800181c <HAL_RCC_OscConfig+0x310>)
 8001556:	685b      	ldr	r3, [r3, #4]
 8001558:	f003 030c 	and.w	r3, r3, #12
 800155c:	2b08      	cmp	r3, #8
 800155e:	d157      	bne.n	8001610 <HAL_RCC_OscConfig+0x104>
 8001560:	4bae      	ldr	r3, [pc, #696]	@ (800181c <HAL_RCC_OscConfig+0x310>)
 8001562:	685b      	ldr	r3, [r3, #4]
 8001564:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001568:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800156c:	d150      	bne.n	8001610 <HAL_RCC_OscConfig+0x104>
 800156e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001572:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001576:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
 800157a:	fa93 f3a3 	rbit	r3, r3
 800157e:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001582:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001586:	fab3 f383 	clz	r3, r3
 800158a:	b2db      	uxtb	r3, r3
 800158c:	2b3f      	cmp	r3, #63	@ 0x3f
 800158e:	d802      	bhi.n	8001596 <HAL_RCC_OscConfig+0x8a>
 8001590:	4ba2      	ldr	r3, [pc, #648]	@ (800181c <HAL_RCC_OscConfig+0x310>)
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	e015      	b.n	80015c2 <HAL_RCC_OscConfig+0xb6>
 8001596:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800159a:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800159e:	f8d7 31e8 	ldr.w	r3, [r7, #488]	@ 0x1e8
 80015a2:	fa93 f3a3 	rbit	r3, r3
 80015a6:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
 80015aa:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80015ae:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 80015b2:	f8d7 31e0 	ldr.w	r3, [r7, #480]	@ 0x1e0
 80015b6:	fa93 f3a3 	rbit	r3, r3
 80015ba:	f8c7 31dc 	str.w	r3, [r7, #476]	@ 0x1dc
 80015be:	4b97      	ldr	r3, [pc, #604]	@ (800181c <HAL_RCC_OscConfig+0x310>)
 80015c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80015c2:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80015c6:	f8c7 21d8 	str.w	r2, [r7, #472]	@ 0x1d8
 80015ca:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 80015ce:	fa92 f2a2 	rbit	r2, r2
 80015d2:	f8c7 21d4 	str.w	r2, [r7, #468]	@ 0x1d4
  return result;
 80015d6:	f8d7 21d4 	ldr.w	r2, [r7, #468]	@ 0x1d4
 80015da:	fab2 f282 	clz	r2, r2
 80015de:	b2d2      	uxtb	r2, r2
 80015e0:	f042 0220 	orr.w	r2, r2, #32
 80015e4:	b2d2      	uxtb	r2, r2
 80015e6:	f002 021f 	and.w	r2, r2, #31
 80015ea:	2101      	movs	r1, #1
 80015ec:	fa01 f202 	lsl.w	r2, r1, r2
 80015f0:	4013      	ands	r3, r2
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	f000 8114 	beq.w	8001820 <HAL_RCC_OscConfig+0x314>
 80015f8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80015fc:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	685b      	ldr	r3, [r3, #4]
 8001604:	2b00      	cmp	r3, #0
 8001606:	f040 810b 	bne.w	8001820 <HAL_RCC_OscConfig+0x314>
      {
        return HAL_ERROR;
 800160a:	2301      	movs	r3, #1
 800160c:	f000 bf85 	b.w	800251a <HAL_RCC_OscConfig+0x100e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001610:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001614:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	685b      	ldr	r3, [r3, #4]
 800161c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001620:	d106      	bne.n	8001630 <HAL_RCC_OscConfig+0x124>
 8001622:	4b7e      	ldr	r3, [pc, #504]	@ (800181c <HAL_RCC_OscConfig+0x310>)
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	4a7d      	ldr	r2, [pc, #500]	@ (800181c <HAL_RCC_OscConfig+0x310>)
 8001628:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800162c:	6013      	str	r3, [r2, #0]
 800162e:	e036      	b.n	800169e <HAL_RCC_OscConfig+0x192>
 8001630:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001634:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	685b      	ldr	r3, [r3, #4]
 800163c:	2b00      	cmp	r3, #0
 800163e:	d10c      	bne.n	800165a <HAL_RCC_OscConfig+0x14e>
 8001640:	4b76      	ldr	r3, [pc, #472]	@ (800181c <HAL_RCC_OscConfig+0x310>)
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	4a75      	ldr	r2, [pc, #468]	@ (800181c <HAL_RCC_OscConfig+0x310>)
 8001646:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800164a:	6013      	str	r3, [r2, #0]
 800164c:	4b73      	ldr	r3, [pc, #460]	@ (800181c <HAL_RCC_OscConfig+0x310>)
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	4a72      	ldr	r2, [pc, #456]	@ (800181c <HAL_RCC_OscConfig+0x310>)
 8001652:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001656:	6013      	str	r3, [r2, #0]
 8001658:	e021      	b.n	800169e <HAL_RCC_OscConfig+0x192>
 800165a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800165e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	685b      	ldr	r3, [r3, #4]
 8001666:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800166a:	d10c      	bne.n	8001686 <HAL_RCC_OscConfig+0x17a>
 800166c:	4b6b      	ldr	r3, [pc, #428]	@ (800181c <HAL_RCC_OscConfig+0x310>)
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	4a6a      	ldr	r2, [pc, #424]	@ (800181c <HAL_RCC_OscConfig+0x310>)
 8001672:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001676:	6013      	str	r3, [r2, #0]
 8001678:	4b68      	ldr	r3, [pc, #416]	@ (800181c <HAL_RCC_OscConfig+0x310>)
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	4a67      	ldr	r2, [pc, #412]	@ (800181c <HAL_RCC_OscConfig+0x310>)
 800167e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001682:	6013      	str	r3, [r2, #0]
 8001684:	e00b      	b.n	800169e <HAL_RCC_OscConfig+0x192>
 8001686:	4b65      	ldr	r3, [pc, #404]	@ (800181c <HAL_RCC_OscConfig+0x310>)
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	4a64      	ldr	r2, [pc, #400]	@ (800181c <HAL_RCC_OscConfig+0x310>)
 800168c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001690:	6013      	str	r3, [r2, #0]
 8001692:	4b62      	ldr	r3, [pc, #392]	@ (800181c <HAL_RCC_OscConfig+0x310>)
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	4a61      	ldr	r2, [pc, #388]	@ (800181c <HAL_RCC_OscConfig+0x310>)
 8001698:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800169c:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800169e:	4b5f      	ldr	r3, [pc, #380]	@ (800181c <HAL_RCC_OscConfig+0x310>)
 80016a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80016a2:	f023 020f 	bic.w	r2, r3, #15
 80016a6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80016aa:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	689b      	ldr	r3, [r3, #8]
 80016b2:	495a      	ldr	r1, [pc, #360]	@ (800181c <HAL_RCC_OscConfig+0x310>)
 80016b4:	4313      	orrs	r3, r2
 80016b6:	62cb      	str	r3, [r1, #44]	@ 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80016b8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80016bc:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	685b      	ldr	r3, [r3, #4]
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d054      	beq.n	8001772 <HAL_RCC_OscConfig+0x266>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016c8:	f7ff fc78 	bl	8000fbc <HAL_GetTick>
 80016cc:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80016d0:	e00a      	b.n	80016e8 <HAL_RCC_OscConfig+0x1dc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80016d2:	f7ff fc73 	bl	8000fbc <HAL_GetTick>
 80016d6:	4602      	mov	r2, r0
 80016d8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80016dc:	1ad3      	subs	r3, r2, r3
 80016de:	2b64      	cmp	r3, #100	@ 0x64
 80016e0:	d902      	bls.n	80016e8 <HAL_RCC_OscConfig+0x1dc>
          {
            return HAL_TIMEOUT;
 80016e2:	2303      	movs	r3, #3
 80016e4:	f000 bf19 	b.w	800251a <HAL_RCC_OscConfig+0x100e>
 80016e8:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80016ec:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016f0:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 80016f4:	fa93 f3a3 	rbit	r3, r3
 80016f8:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
  return result;
 80016fc:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001700:	fab3 f383 	clz	r3, r3
 8001704:	b2db      	uxtb	r3, r3
 8001706:	2b3f      	cmp	r3, #63	@ 0x3f
 8001708:	d802      	bhi.n	8001710 <HAL_RCC_OscConfig+0x204>
 800170a:	4b44      	ldr	r3, [pc, #272]	@ (800181c <HAL_RCC_OscConfig+0x310>)
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	e015      	b.n	800173c <HAL_RCC_OscConfig+0x230>
 8001710:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001714:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001718:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 800171c:	fa93 f3a3 	rbit	r3, r3
 8001720:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 8001724:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001728:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 800172c:	f8d7 31c0 	ldr.w	r3, [r7, #448]	@ 0x1c0
 8001730:	fa93 f3a3 	rbit	r3, r3
 8001734:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
 8001738:	4b38      	ldr	r3, [pc, #224]	@ (800181c <HAL_RCC_OscConfig+0x310>)
 800173a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800173c:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001740:	f8c7 21b8 	str.w	r2, [r7, #440]	@ 0x1b8
 8001744:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 8001748:	fa92 f2a2 	rbit	r2, r2
 800174c:	f8c7 21b4 	str.w	r2, [r7, #436]	@ 0x1b4
  return result;
 8001750:	f8d7 21b4 	ldr.w	r2, [r7, #436]	@ 0x1b4
 8001754:	fab2 f282 	clz	r2, r2
 8001758:	b2d2      	uxtb	r2, r2
 800175a:	f042 0220 	orr.w	r2, r2, #32
 800175e:	b2d2      	uxtb	r2, r2
 8001760:	f002 021f 	and.w	r2, r2, #31
 8001764:	2101      	movs	r1, #1
 8001766:	fa01 f202 	lsl.w	r2, r1, r2
 800176a:	4013      	ands	r3, r2
 800176c:	2b00      	cmp	r3, #0
 800176e:	d0b0      	beq.n	80016d2 <HAL_RCC_OscConfig+0x1c6>
 8001770:	e057      	b.n	8001822 <HAL_RCC_OscConfig+0x316>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001772:	f7ff fc23 	bl	8000fbc <HAL_GetTick>
 8001776:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800177a:	e00a      	b.n	8001792 <HAL_RCC_OscConfig+0x286>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800177c:	f7ff fc1e 	bl	8000fbc <HAL_GetTick>
 8001780:	4602      	mov	r2, r0
 8001782:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001786:	1ad3      	subs	r3, r2, r3
 8001788:	2b64      	cmp	r3, #100	@ 0x64
 800178a:	d902      	bls.n	8001792 <HAL_RCC_OscConfig+0x286>
          {
            return HAL_TIMEOUT;
 800178c:	2303      	movs	r3, #3
 800178e:	f000 bec4 	b.w	800251a <HAL_RCC_OscConfig+0x100e>
 8001792:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001796:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800179a:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
 800179e:	fa93 f3a3 	rbit	r3, r3
 80017a2:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
  return result;
 80017a6:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80017aa:	fab3 f383 	clz	r3, r3
 80017ae:	b2db      	uxtb	r3, r3
 80017b0:	2b3f      	cmp	r3, #63	@ 0x3f
 80017b2:	d802      	bhi.n	80017ba <HAL_RCC_OscConfig+0x2ae>
 80017b4:	4b19      	ldr	r3, [pc, #100]	@ (800181c <HAL_RCC_OscConfig+0x310>)
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	e015      	b.n	80017e6 <HAL_RCC_OscConfig+0x2da>
 80017ba:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80017be:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017c2:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 80017c6:	fa93 f3a3 	rbit	r3, r3
 80017ca:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 80017ce:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80017d2:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 80017d6:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 80017da:	fa93 f3a3 	rbit	r3, r3
 80017de:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
 80017e2:	4b0e      	ldr	r3, [pc, #56]	@ (800181c <HAL_RCC_OscConfig+0x310>)
 80017e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80017e6:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80017ea:	f8c7 2198 	str.w	r2, [r7, #408]	@ 0x198
 80017ee:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 80017f2:	fa92 f2a2 	rbit	r2, r2
 80017f6:	f8c7 2194 	str.w	r2, [r7, #404]	@ 0x194
  return result;
 80017fa:	f8d7 2194 	ldr.w	r2, [r7, #404]	@ 0x194
 80017fe:	fab2 f282 	clz	r2, r2
 8001802:	b2d2      	uxtb	r2, r2
 8001804:	f042 0220 	orr.w	r2, r2, #32
 8001808:	b2d2      	uxtb	r2, r2
 800180a:	f002 021f 	and.w	r2, r2, #31
 800180e:	2101      	movs	r1, #1
 8001810:	fa01 f202 	lsl.w	r2, r1, r2
 8001814:	4013      	ands	r3, r2
 8001816:	2b00      	cmp	r3, #0
 8001818:	d1b0      	bne.n	800177c <HAL_RCC_OscConfig+0x270>
 800181a:	e002      	b.n	8001822 <HAL_RCC_OscConfig+0x316>
 800181c:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001820:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001822:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001826:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	f003 0302 	and.w	r3, r3, #2
 8001832:	2b00      	cmp	r3, #0
 8001834:	f000 816c 	beq.w	8001b10 <HAL_RCC_OscConfig+0x604>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001838:	4bcc      	ldr	r3, [pc, #816]	@ (8001b6c <HAL_RCC_OscConfig+0x660>)
 800183a:	685b      	ldr	r3, [r3, #4]
 800183c:	f003 030c 	and.w	r3, r3, #12
 8001840:	2b00      	cmp	r3, #0
 8001842:	d00b      	beq.n	800185c <HAL_RCC_OscConfig+0x350>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001844:	4bc9      	ldr	r3, [pc, #804]	@ (8001b6c <HAL_RCC_OscConfig+0x660>)
 8001846:	685b      	ldr	r3, [r3, #4]
 8001848:	f003 030c 	and.w	r3, r3, #12
 800184c:	2b08      	cmp	r3, #8
 800184e:	d16d      	bne.n	800192c <HAL_RCC_OscConfig+0x420>
 8001850:	4bc6      	ldr	r3, [pc, #792]	@ (8001b6c <HAL_RCC_OscConfig+0x660>)
 8001852:	685b      	ldr	r3, [r3, #4]
 8001854:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001858:	2b00      	cmp	r3, #0
 800185a:	d167      	bne.n	800192c <HAL_RCC_OscConfig+0x420>
 800185c:	2302      	movs	r3, #2
 800185e:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001862:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 8001866:	fa93 f3a3 	rbit	r3, r3
 800186a:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
  return result;
 800186e:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001872:	fab3 f383 	clz	r3, r3
 8001876:	b2db      	uxtb	r3, r3
 8001878:	2b3f      	cmp	r3, #63	@ 0x3f
 800187a:	d802      	bhi.n	8001882 <HAL_RCC_OscConfig+0x376>
 800187c:	4bbb      	ldr	r3, [pc, #748]	@ (8001b6c <HAL_RCC_OscConfig+0x660>)
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	e013      	b.n	80018aa <HAL_RCC_OscConfig+0x39e>
 8001882:	2302      	movs	r3, #2
 8001884:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001888:	f8d7 3188 	ldr.w	r3, [r7, #392]	@ 0x188
 800188c:	fa93 f3a3 	rbit	r3, r3
 8001890:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 8001894:	2302      	movs	r3, #2
 8001896:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 800189a:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 800189e:	fa93 f3a3 	rbit	r3, r3
 80018a2:	f8c7 317c 	str.w	r3, [r7, #380]	@ 0x17c
 80018a6:	4bb1      	ldr	r3, [pc, #708]	@ (8001b6c <HAL_RCC_OscConfig+0x660>)
 80018a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80018aa:	2202      	movs	r2, #2
 80018ac:	f8c7 2178 	str.w	r2, [r7, #376]	@ 0x178
 80018b0:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 80018b4:	fa92 f2a2 	rbit	r2, r2
 80018b8:	f8c7 2174 	str.w	r2, [r7, #372]	@ 0x174
  return result;
 80018bc:	f8d7 2174 	ldr.w	r2, [r7, #372]	@ 0x174
 80018c0:	fab2 f282 	clz	r2, r2
 80018c4:	b2d2      	uxtb	r2, r2
 80018c6:	f042 0220 	orr.w	r2, r2, #32
 80018ca:	b2d2      	uxtb	r2, r2
 80018cc:	f002 021f 	and.w	r2, r2, #31
 80018d0:	2101      	movs	r1, #1
 80018d2:	fa01 f202 	lsl.w	r2, r1, r2
 80018d6:	4013      	ands	r3, r2
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d00a      	beq.n	80018f2 <HAL_RCC_OscConfig+0x3e6>
 80018dc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80018e0:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	691b      	ldr	r3, [r3, #16]
 80018e8:	2b01      	cmp	r3, #1
 80018ea:	d002      	beq.n	80018f2 <HAL_RCC_OscConfig+0x3e6>
      {
        return HAL_ERROR;
 80018ec:	2301      	movs	r3, #1
 80018ee:	f000 be14 	b.w	800251a <HAL_RCC_OscConfig+0x100e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80018f2:	4b9e      	ldr	r3, [pc, #632]	@ (8001b6c <HAL_RCC_OscConfig+0x660>)
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80018fa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80018fe:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	695b      	ldr	r3, [r3, #20]
 8001906:	21f8      	movs	r1, #248	@ 0xf8
 8001908:	f8c7 1170 	str.w	r1, [r7, #368]	@ 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800190c:	f8d7 1170 	ldr.w	r1, [r7, #368]	@ 0x170
 8001910:	fa91 f1a1 	rbit	r1, r1
 8001914:	f8c7 116c 	str.w	r1, [r7, #364]	@ 0x16c
  return result;
 8001918:	f8d7 116c 	ldr.w	r1, [r7, #364]	@ 0x16c
 800191c:	fab1 f181 	clz	r1, r1
 8001920:	b2c9      	uxtb	r1, r1
 8001922:	408b      	lsls	r3, r1
 8001924:	4991      	ldr	r1, [pc, #580]	@ (8001b6c <HAL_RCC_OscConfig+0x660>)
 8001926:	4313      	orrs	r3, r2
 8001928:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800192a:	e0f1      	b.n	8001b10 <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800192c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001930:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	691b      	ldr	r3, [r3, #16]
 8001938:	2b00      	cmp	r3, #0
 800193a:	f000 8083 	beq.w	8001a44 <HAL_RCC_OscConfig+0x538>
 800193e:	2301      	movs	r3, #1
 8001940:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001944:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
 8001948:	fa93 f3a3 	rbit	r3, r3
 800194c:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
  return result;
 8001950:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001954:	fab3 f383 	clz	r3, r3
 8001958:	b2db      	uxtb	r3, r3
 800195a:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 800195e:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8001962:	009b      	lsls	r3, r3, #2
 8001964:	461a      	mov	r2, r3
 8001966:	2301      	movs	r3, #1
 8001968:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800196a:	f7ff fb27 	bl	8000fbc <HAL_GetTick>
 800196e:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001972:	e00a      	b.n	800198a <HAL_RCC_OscConfig+0x47e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001974:	f7ff fb22 	bl	8000fbc <HAL_GetTick>
 8001978:	4602      	mov	r2, r0
 800197a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800197e:	1ad3      	subs	r3, r2, r3
 8001980:	2b02      	cmp	r3, #2
 8001982:	d902      	bls.n	800198a <HAL_RCC_OscConfig+0x47e>
          {
            return HAL_TIMEOUT;
 8001984:	2303      	movs	r3, #3
 8001986:	f000 bdc8 	b.w	800251a <HAL_RCC_OscConfig+0x100e>
 800198a:	2302      	movs	r3, #2
 800198c:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001990:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 8001994:	fa93 f3a3 	rbit	r3, r3
 8001998:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
  return result;
 800199c:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019a0:	fab3 f383 	clz	r3, r3
 80019a4:	b2db      	uxtb	r3, r3
 80019a6:	2b3f      	cmp	r3, #63	@ 0x3f
 80019a8:	d802      	bhi.n	80019b0 <HAL_RCC_OscConfig+0x4a4>
 80019aa:	4b70      	ldr	r3, [pc, #448]	@ (8001b6c <HAL_RCC_OscConfig+0x660>)
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	e013      	b.n	80019d8 <HAL_RCC_OscConfig+0x4cc>
 80019b0:	2302      	movs	r3, #2
 80019b2:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019b6:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 80019ba:	fa93 f3a3 	rbit	r3, r3
 80019be:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 80019c2:	2302      	movs	r3, #2
 80019c4:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 80019c8:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 80019cc:	fa93 f3a3 	rbit	r3, r3
 80019d0:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
 80019d4:	4b65      	ldr	r3, [pc, #404]	@ (8001b6c <HAL_RCC_OscConfig+0x660>)
 80019d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019d8:	2202      	movs	r2, #2
 80019da:	f8c7 2148 	str.w	r2, [r7, #328]	@ 0x148
 80019de:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 80019e2:	fa92 f2a2 	rbit	r2, r2
 80019e6:	f8c7 2144 	str.w	r2, [r7, #324]	@ 0x144
  return result;
 80019ea:	f8d7 2144 	ldr.w	r2, [r7, #324]	@ 0x144
 80019ee:	fab2 f282 	clz	r2, r2
 80019f2:	b2d2      	uxtb	r2, r2
 80019f4:	f042 0220 	orr.w	r2, r2, #32
 80019f8:	b2d2      	uxtb	r2, r2
 80019fa:	f002 021f 	and.w	r2, r2, #31
 80019fe:	2101      	movs	r1, #1
 8001a00:	fa01 f202 	lsl.w	r2, r1, r2
 8001a04:	4013      	ands	r3, r2
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d0b4      	beq.n	8001974 <HAL_RCC_OscConfig+0x468>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a0a:	4b58      	ldr	r3, [pc, #352]	@ (8001b6c <HAL_RCC_OscConfig+0x660>)
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001a12:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001a16:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	695b      	ldr	r3, [r3, #20]
 8001a1e:	21f8      	movs	r1, #248	@ 0xf8
 8001a20:	f8c7 1140 	str.w	r1, [r7, #320]	@ 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a24:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 8001a28:	fa91 f1a1 	rbit	r1, r1
 8001a2c:	f8c7 113c 	str.w	r1, [r7, #316]	@ 0x13c
  return result;
 8001a30:	f8d7 113c 	ldr.w	r1, [r7, #316]	@ 0x13c
 8001a34:	fab1 f181 	clz	r1, r1
 8001a38:	b2c9      	uxtb	r1, r1
 8001a3a:	408b      	lsls	r3, r1
 8001a3c:	494b      	ldr	r1, [pc, #300]	@ (8001b6c <HAL_RCC_OscConfig+0x660>)
 8001a3e:	4313      	orrs	r3, r2
 8001a40:	600b      	str	r3, [r1, #0]
 8001a42:	e065      	b.n	8001b10 <HAL_RCC_OscConfig+0x604>
 8001a44:	2301      	movs	r3, #1
 8001a46:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a4a:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8001a4e:	fa93 f3a3 	rbit	r3, r3
 8001a52:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  return result;
 8001a56:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001a5a:	fab3 f383 	clz	r3, r3
 8001a5e:	b2db      	uxtb	r3, r3
 8001a60:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8001a64:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8001a68:	009b      	lsls	r3, r3, #2
 8001a6a:	461a      	mov	r2, r3
 8001a6c:	2300      	movs	r3, #0
 8001a6e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a70:	f7ff faa4 	bl	8000fbc <HAL_GetTick>
 8001a74:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a78:	e00a      	b.n	8001a90 <HAL_RCC_OscConfig+0x584>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001a7a:	f7ff fa9f 	bl	8000fbc <HAL_GetTick>
 8001a7e:	4602      	mov	r2, r0
 8001a80:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001a84:	1ad3      	subs	r3, r2, r3
 8001a86:	2b02      	cmp	r3, #2
 8001a88:	d902      	bls.n	8001a90 <HAL_RCC_OscConfig+0x584>
          {
            return HAL_TIMEOUT;
 8001a8a:	2303      	movs	r3, #3
 8001a8c:	f000 bd45 	b.w	800251a <HAL_RCC_OscConfig+0x100e>
 8001a90:	2302      	movs	r3, #2
 8001a92:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a96:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8001a9a:	fa93 f3a3 	rbit	r3, r3
 8001a9e:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  return result;
 8001aa2:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001aa6:	fab3 f383 	clz	r3, r3
 8001aaa:	b2db      	uxtb	r3, r3
 8001aac:	2b3f      	cmp	r3, #63	@ 0x3f
 8001aae:	d802      	bhi.n	8001ab6 <HAL_RCC_OscConfig+0x5aa>
 8001ab0:	4b2e      	ldr	r3, [pc, #184]	@ (8001b6c <HAL_RCC_OscConfig+0x660>)
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	e013      	b.n	8001ade <HAL_RCC_OscConfig+0x5d2>
 8001ab6:	2302      	movs	r3, #2
 8001ab8:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001abc:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8001ac0:	fa93 f3a3 	rbit	r3, r3
 8001ac4:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 8001ac8:	2302      	movs	r3, #2
 8001aca:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 8001ace:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8001ad2:	fa93 f3a3 	rbit	r3, r3
 8001ad6:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 8001ada:	4b24      	ldr	r3, [pc, #144]	@ (8001b6c <HAL_RCC_OscConfig+0x660>)
 8001adc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ade:	2202      	movs	r2, #2
 8001ae0:	f8c7 2118 	str.w	r2, [r7, #280]	@ 0x118
 8001ae4:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 8001ae8:	fa92 f2a2 	rbit	r2, r2
 8001aec:	f8c7 2114 	str.w	r2, [r7, #276]	@ 0x114
  return result;
 8001af0:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 8001af4:	fab2 f282 	clz	r2, r2
 8001af8:	b2d2      	uxtb	r2, r2
 8001afa:	f042 0220 	orr.w	r2, r2, #32
 8001afe:	b2d2      	uxtb	r2, r2
 8001b00:	f002 021f 	and.w	r2, r2, #31
 8001b04:	2101      	movs	r1, #1
 8001b06:	fa01 f202 	lsl.w	r2, r1, r2
 8001b0a:	4013      	ands	r3, r2
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d1b4      	bne.n	8001a7a <HAL_RCC_OscConfig+0x56e>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001b10:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001b14:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	f003 0308 	and.w	r3, r3, #8
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	f000 8115 	beq.w	8001d50 <HAL_RCC_OscConfig+0x844>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001b26:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001b2a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	699b      	ldr	r3, [r3, #24]
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d07e      	beq.n	8001c34 <HAL_RCC_OscConfig+0x728>
 8001b36:	2301      	movs	r3, #1
 8001b38:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b3c:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8001b40:	fa93 f3a3 	rbit	r3, r3
 8001b44:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
  return result;
 8001b48:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001b4c:	fab3 f383 	clz	r3, r3
 8001b50:	b2db      	uxtb	r3, r3
 8001b52:	461a      	mov	r2, r3
 8001b54:	4b06      	ldr	r3, [pc, #24]	@ (8001b70 <HAL_RCC_OscConfig+0x664>)
 8001b56:	4413      	add	r3, r2
 8001b58:	009b      	lsls	r3, r3, #2
 8001b5a:	461a      	mov	r2, r3
 8001b5c:	2301      	movs	r3, #1
 8001b5e:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b60:	f7ff fa2c 	bl	8000fbc <HAL_GetTick>
 8001b64:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001b68:	e00f      	b.n	8001b8a <HAL_RCC_OscConfig+0x67e>
 8001b6a:	bf00      	nop
 8001b6c:	40021000 	.word	0x40021000
 8001b70:	10908120 	.word	0x10908120
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001b74:	f7ff fa22 	bl	8000fbc <HAL_GetTick>
 8001b78:	4602      	mov	r2, r0
 8001b7a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001b7e:	1ad3      	subs	r3, r2, r3
 8001b80:	2b02      	cmp	r3, #2
 8001b82:	d902      	bls.n	8001b8a <HAL_RCC_OscConfig+0x67e>
        {
          return HAL_TIMEOUT;
 8001b84:	2303      	movs	r3, #3
 8001b86:	f000 bcc8 	b.w	800251a <HAL_RCC_OscConfig+0x100e>
 8001b8a:	2302      	movs	r3, #2
 8001b8c:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b90:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8001b94:	fa93 f3a3 	rbit	r3, r3
 8001b98:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8001b9c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001ba0:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8001ba4:	2202      	movs	r2, #2
 8001ba6:	601a      	str	r2, [r3, #0]
 8001ba8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001bac:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	fa93 f2a3 	rbit	r2, r3
 8001bb6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001bba:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8001bbe:	601a      	str	r2, [r3, #0]
 8001bc0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001bc4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8001bc8:	2202      	movs	r2, #2
 8001bca:	601a      	str	r2, [r3, #0]
 8001bcc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001bd0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	fa93 f2a3 	rbit	r2, r3
 8001bda:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001bde:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001be2:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001be4:	4bb0      	ldr	r3, [pc, #704]	@ (8001ea8 <HAL_RCC_OscConfig+0x99c>)
 8001be6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001be8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001bec:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8001bf0:	2102      	movs	r1, #2
 8001bf2:	6019      	str	r1, [r3, #0]
 8001bf4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001bf8:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	fa93 f1a3 	rbit	r1, r3
 8001c02:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001c06:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8001c0a:	6019      	str	r1, [r3, #0]
  return result;
 8001c0c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001c10:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	fab3 f383 	clz	r3, r3
 8001c1a:	b2db      	uxtb	r3, r3
 8001c1c:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8001c20:	b2db      	uxtb	r3, r3
 8001c22:	f003 031f 	and.w	r3, r3, #31
 8001c26:	2101      	movs	r1, #1
 8001c28:	fa01 f303 	lsl.w	r3, r1, r3
 8001c2c:	4013      	ands	r3, r2
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d0a0      	beq.n	8001b74 <HAL_RCC_OscConfig+0x668>
 8001c32:	e08d      	b.n	8001d50 <HAL_RCC_OscConfig+0x844>
 8001c34:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001c38:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8001c3c:	2201      	movs	r2, #1
 8001c3e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c40:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001c44:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	fa93 f2a3 	rbit	r2, r3
 8001c4e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001c52:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8001c56:	601a      	str	r2, [r3, #0]
  return result;
 8001c58:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001c5c:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8001c60:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001c62:	fab3 f383 	clz	r3, r3
 8001c66:	b2db      	uxtb	r3, r3
 8001c68:	461a      	mov	r2, r3
 8001c6a:	4b90      	ldr	r3, [pc, #576]	@ (8001eac <HAL_RCC_OscConfig+0x9a0>)
 8001c6c:	4413      	add	r3, r2
 8001c6e:	009b      	lsls	r3, r3, #2
 8001c70:	461a      	mov	r2, r3
 8001c72:	2300      	movs	r3, #0
 8001c74:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c76:	f7ff f9a1 	bl	8000fbc <HAL_GetTick>
 8001c7a:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c7e:	e00a      	b.n	8001c96 <HAL_RCC_OscConfig+0x78a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001c80:	f7ff f99c 	bl	8000fbc <HAL_GetTick>
 8001c84:	4602      	mov	r2, r0
 8001c86:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001c8a:	1ad3      	subs	r3, r2, r3
 8001c8c:	2b02      	cmp	r3, #2
 8001c8e:	d902      	bls.n	8001c96 <HAL_RCC_OscConfig+0x78a>
        {
          return HAL_TIMEOUT;
 8001c90:	2303      	movs	r3, #3
 8001c92:	f000 bc42 	b.w	800251a <HAL_RCC_OscConfig+0x100e>
 8001c96:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001c9a:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8001c9e:	2202      	movs	r2, #2
 8001ca0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ca2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001ca6:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	fa93 f2a3 	rbit	r2, r3
 8001cb0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001cb4:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8001cb8:	601a      	str	r2, [r3, #0]
 8001cba:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001cbe:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8001cc2:	2202      	movs	r2, #2
 8001cc4:	601a      	str	r2, [r3, #0]
 8001cc6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001cca:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	fa93 f2a3 	rbit	r2, r3
 8001cd4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001cd8:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8001cdc:	601a      	str	r2, [r3, #0]
 8001cde:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001ce2:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8001ce6:	2202      	movs	r2, #2
 8001ce8:	601a      	str	r2, [r3, #0]
 8001cea:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001cee:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	fa93 f2a3 	rbit	r2, r3
 8001cf8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001cfc:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8001d00:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d02:	4b69      	ldr	r3, [pc, #420]	@ (8001ea8 <HAL_RCC_OscConfig+0x99c>)
 8001d04:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001d06:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001d0a:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8001d0e:	2102      	movs	r1, #2
 8001d10:	6019      	str	r1, [r3, #0]
 8001d12:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001d16:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	fa93 f1a3 	rbit	r1, r3
 8001d20:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001d24:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8001d28:	6019      	str	r1, [r3, #0]
  return result;
 8001d2a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001d2e:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	fab3 f383 	clz	r3, r3
 8001d38:	b2db      	uxtb	r3, r3
 8001d3a:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8001d3e:	b2db      	uxtb	r3, r3
 8001d40:	f003 031f 	and.w	r3, r3, #31
 8001d44:	2101      	movs	r1, #1
 8001d46:	fa01 f303 	lsl.w	r3, r1, r3
 8001d4a:	4013      	ands	r3, r2
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d197      	bne.n	8001c80 <HAL_RCC_OscConfig+0x774>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001d50:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001d54:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	f003 0304 	and.w	r3, r3, #4
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	f000 819e 	beq.w	80020a2 <HAL_RCC_OscConfig+0xb96>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001d66:	2300      	movs	r3, #0
 8001d68:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001d6c:	4b4e      	ldr	r3, [pc, #312]	@ (8001ea8 <HAL_RCC_OscConfig+0x99c>)
 8001d6e:	69db      	ldr	r3, [r3, #28]
 8001d70:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d116      	bne.n	8001da6 <HAL_RCC_OscConfig+0x89a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001d78:	4b4b      	ldr	r3, [pc, #300]	@ (8001ea8 <HAL_RCC_OscConfig+0x99c>)
 8001d7a:	69db      	ldr	r3, [r3, #28]
 8001d7c:	4a4a      	ldr	r2, [pc, #296]	@ (8001ea8 <HAL_RCC_OscConfig+0x99c>)
 8001d7e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001d82:	61d3      	str	r3, [r2, #28]
 8001d84:	4b48      	ldr	r3, [pc, #288]	@ (8001ea8 <HAL_RCC_OscConfig+0x99c>)
 8001d86:	69db      	ldr	r3, [r3, #28]
 8001d88:	f003 5280 	and.w	r2, r3, #268435456	@ 0x10000000
 8001d8c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001d90:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 8001d94:	601a      	str	r2, [r3, #0]
 8001d96:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001d9a:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 8001d9e:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8001da0:	2301      	movs	r3, #1
 8001da2:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001da6:	4b42      	ldr	r3, [pc, #264]	@ (8001eb0 <HAL_RCC_OscConfig+0x9a4>)
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d11a      	bne.n	8001de8 <HAL_RCC_OscConfig+0x8dc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001db2:	4b3f      	ldr	r3, [pc, #252]	@ (8001eb0 <HAL_RCC_OscConfig+0x9a4>)
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	4a3e      	ldr	r2, [pc, #248]	@ (8001eb0 <HAL_RCC_OscConfig+0x9a4>)
 8001db8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001dbc:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001dbe:	f7ff f8fd 	bl	8000fbc <HAL_GetTick>
 8001dc2:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001dc6:	e009      	b.n	8001ddc <HAL_RCC_OscConfig+0x8d0>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001dc8:	f7ff f8f8 	bl	8000fbc <HAL_GetTick>
 8001dcc:	4602      	mov	r2, r0
 8001dce:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001dd2:	1ad3      	subs	r3, r2, r3
 8001dd4:	2b64      	cmp	r3, #100	@ 0x64
 8001dd6:	d901      	bls.n	8001ddc <HAL_RCC_OscConfig+0x8d0>
        {
          return HAL_TIMEOUT;
 8001dd8:	2303      	movs	r3, #3
 8001dda:	e39e      	b.n	800251a <HAL_RCC_OscConfig+0x100e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ddc:	4b34      	ldr	r3, [pc, #208]	@ (8001eb0 <HAL_RCC_OscConfig+0x9a4>)
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d0ef      	beq.n	8001dc8 <HAL_RCC_OscConfig+0x8bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001de8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001dec:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	68db      	ldr	r3, [r3, #12]
 8001df4:	2b01      	cmp	r3, #1
 8001df6:	d106      	bne.n	8001e06 <HAL_RCC_OscConfig+0x8fa>
 8001df8:	4b2b      	ldr	r3, [pc, #172]	@ (8001ea8 <HAL_RCC_OscConfig+0x99c>)
 8001dfa:	6a1b      	ldr	r3, [r3, #32]
 8001dfc:	4a2a      	ldr	r2, [pc, #168]	@ (8001ea8 <HAL_RCC_OscConfig+0x99c>)
 8001dfe:	f043 0301 	orr.w	r3, r3, #1
 8001e02:	6213      	str	r3, [r2, #32]
 8001e04:	e035      	b.n	8001e72 <HAL_RCC_OscConfig+0x966>
 8001e06:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001e0a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	68db      	ldr	r3, [r3, #12]
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d10c      	bne.n	8001e30 <HAL_RCC_OscConfig+0x924>
 8001e16:	4b24      	ldr	r3, [pc, #144]	@ (8001ea8 <HAL_RCC_OscConfig+0x99c>)
 8001e18:	6a1b      	ldr	r3, [r3, #32]
 8001e1a:	4a23      	ldr	r2, [pc, #140]	@ (8001ea8 <HAL_RCC_OscConfig+0x99c>)
 8001e1c:	f023 0301 	bic.w	r3, r3, #1
 8001e20:	6213      	str	r3, [r2, #32]
 8001e22:	4b21      	ldr	r3, [pc, #132]	@ (8001ea8 <HAL_RCC_OscConfig+0x99c>)
 8001e24:	6a1b      	ldr	r3, [r3, #32]
 8001e26:	4a20      	ldr	r2, [pc, #128]	@ (8001ea8 <HAL_RCC_OscConfig+0x99c>)
 8001e28:	f023 0304 	bic.w	r3, r3, #4
 8001e2c:	6213      	str	r3, [r2, #32]
 8001e2e:	e020      	b.n	8001e72 <HAL_RCC_OscConfig+0x966>
 8001e30:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001e34:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	68db      	ldr	r3, [r3, #12]
 8001e3c:	2b05      	cmp	r3, #5
 8001e3e:	d10c      	bne.n	8001e5a <HAL_RCC_OscConfig+0x94e>
 8001e40:	4b19      	ldr	r3, [pc, #100]	@ (8001ea8 <HAL_RCC_OscConfig+0x99c>)
 8001e42:	6a1b      	ldr	r3, [r3, #32]
 8001e44:	4a18      	ldr	r2, [pc, #96]	@ (8001ea8 <HAL_RCC_OscConfig+0x99c>)
 8001e46:	f043 0304 	orr.w	r3, r3, #4
 8001e4a:	6213      	str	r3, [r2, #32]
 8001e4c:	4b16      	ldr	r3, [pc, #88]	@ (8001ea8 <HAL_RCC_OscConfig+0x99c>)
 8001e4e:	6a1b      	ldr	r3, [r3, #32]
 8001e50:	4a15      	ldr	r2, [pc, #84]	@ (8001ea8 <HAL_RCC_OscConfig+0x99c>)
 8001e52:	f043 0301 	orr.w	r3, r3, #1
 8001e56:	6213      	str	r3, [r2, #32]
 8001e58:	e00b      	b.n	8001e72 <HAL_RCC_OscConfig+0x966>
 8001e5a:	4b13      	ldr	r3, [pc, #76]	@ (8001ea8 <HAL_RCC_OscConfig+0x99c>)
 8001e5c:	6a1b      	ldr	r3, [r3, #32]
 8001e5e:	4a12      	ldr	r2, [pc, #72]	@ (8001ea8 <HAL_RCC_OscConfig+0x99c>)
 8001e60:	f023 0301 	bic.w	r3, r3, #1
 8001e64:	6213      	str	r3, [r2, #32]
 8001e66:	4b10      	ldr	r3, [pc, #64]	@ (8001ea8 <HAL_RCC_OscConfig+0x99c>)
 8001e68:	6a1b      	ldr	r3, [r3, #32]
 8001e6a:	4a0f      	ldr	r2, [pc, #60]	@ (8001ea8 <HAL_RCC_OscConfig+0x99c>)
 8001e6c:	f023 0304 	bic.w	r3, r3, #4
 8001e70:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001e72:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001e76:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	68db      	ldr	r3, [r3, #12]
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	f000 8087 	beq.w	8001f92 <HAL_RCC_OscConfig+0xa86>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e84:	f7ff f89a 	bl	8000fbc <HAL_GetTick>
 8001e88:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e8c:	e012      	b.n	8001eb4 <HAL_RCC_OscConfig+0x9a8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001e8e:	f7ff f895 	bl	8000fbc <HAL_GetTick>
 8001e92:	4602      	mov	r2, r0
 8001e94:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001e98:	1ad3      	subs	r3, r2, r3
 8001e9a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001e9e:	4293      	cmp	r3, r2
 8001ea0:	d908      	bls.n	8001eb4 <HAL_RCC_OscConfig+0x9a8>
        {
          return HAL_TIMEOUT;
 8001ea2:	2303      	movs	r3, #3
 8001ea4:	e339      	b.n	800251a <HAL_RCC_OscConfig+0x100e>
 8001ea6:	bf00      	nop
 8001ea8:	40021000 	.word	0x40021000
 8001eac:	10908120 	.word	0x10908120
 8001eb0:	40007000 	.word	0x40007000
 8001eb4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001eb8:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8001ebc:	2202      	movs	r2, #2
 8001ebe:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ec0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001ec4:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	fa93 f2a3 	rbit	r2, r3
 8001ece:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001ed2:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8001ed6:	601a      	str	r2, [r3, #0]
 8001ed8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001edc:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8001ee0:	2202      	movs	r2, #2
 8001ee2:	601a      	str	r2, [r3, #0]
 8001ee4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001ee8:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	fa93 f2a3 	rbit	r2, r3
 8001ef2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001ef6:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8001efa:	601a      	str	r2, [r3, #0]
  return result;
 8001efc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001f00:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8001f04:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f06:	fab3 f383 	clz	r3, r3
 8001f0a:	b2db      	uxtb	r3, r3
 8001f0c:	f023 035f 	bic.w	r3, r3, #95	@ 0x5f
 8001f10:	b2db      	uxtb	r3, r3
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d102      	bne.n	8001f1c <HAL_RCC_OscConfig+0xa10>
 8001f16:	4b98      	ldr	r3, [pc, #608]	@ (8002178 <HAL_RCC_OscConfig+0xc6c>)
 8001f18:	6a1b      	ldr	r3, [r3, #32]
 8001f1a:	e013      	b.n	8001f44 <HAL_RCC_OscConfig+0xa38>
 8001f1c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001f20:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8001f24:	2202      	movs	r2, #2
 8001f26:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f28:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001f2c:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	fa93 f2a3 	rbit	r2, r3
 8001f36:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001f3a:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8001f3e:	601a      	str	r2, [r3, #0]
 8001f40:	4b8d      	ldr	r3, [pc, #564]	@ (8002178 <HAL_RCC_OscConfig+0xc6c>)
 8001f42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f44:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001f48:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 8001f4c:	2102      	movs	r1, #2
 8001f4e:	6011      	str	r1, [r2, #0]
 8001f50:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001f54:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 8001f58:	6812      	ldr	r2, [r2, #0]
 8001f5a:	fa92 f1a2 	rbit	r1, r2
 8001f5e:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001f62:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8001f66:	6011      	str	r1, [r2, #0]
  return result;
 8001f68:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001f6c:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8001f70:	6812      	ldr	r2, [r2, #0]
 8001f72:	fab2 f282 	clz	r2, r2
 8001f76:	b2d2      	uxtb	r2, r2
 8001f78:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001f7c:	b2d2      	uxtb	r2, r2
 8001f7e:	f002 021f 	and.w	r2, r2, #31
 8001f82:	2101      	movs	r1, #1
 8001f84:	fa01 f202 	lsl.w	r2, r1, r2
 8001f88:	4013      	ands	r3, r2
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	f43f af7f 	beq.w	8001e8e <HAL_RCC_OscConfig+0x982>
 8001f90:	e07d      	b.n	800208e <HAL_RCC_OscConfig+0xb82>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f92:	f7ff f813 	bl	8000fbc <HAL_GetTick>
 8001f96:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f9a:	e00b      	b.n	8001fb4 <HAL_RCC_OscConfig+0xaa8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001f9c:	f7ff f80e 	bl	8000fbc <HAL_GetTick>
 8001fa0:	4602      	mov	r2, r0
 8001fa2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001fa6:	1ad3      	subs	r3, r2, r3
 8001fa8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001fac:	4293      	cmp	r3, r2
 8001fae:	d901      	bls.n	8001fb4 <HAL_RCC_OscConfig+0xaa8>
        {
          return HAL_TIMEOUT;
 8001fb0:	2303      	movs	r3, #3
 8001fb2:	e2b2      	b.n	800251a <HAL_RCC_OscConfig+0x100e>
 8001fb4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001fb8:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8001fbc:	2202      	movs	r2, #2
 8001fbe:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fc0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001fc4:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	fa93 f2a3 	rbit	r2, r3
 8001fce:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001fd2:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 8001fd6:	601a      	str	r2, [r3, #0]
 8001fd8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001fdc:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8001fe0:	2202      	movs	r2, #2
 8001fe2:	601a      	str	r2, [r3, #0]
 8001fe4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001fe8:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	fa93 f2a3 	rbit	r2, r3
 8001ff2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001ff6:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8001ffa:	601a      	str	r2, [r3, #0]
  return result;
 8001ffc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002000:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8002004:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002006:	fab3 f383 	clz	r3, r3
 800200a:	b2db      	uxtb	r3, r3
 800200c:	f023 035f 	bic.w	r3, r3, #95	@ 0x5f
 8002010:	b2db      	uxtb	r3, r3
 8002012:	2b00      	cmp	r3, #0
 8002014:	d102      	bne.n	800201c <HAL_RCC_OscConfig+0xb10>
 8002016:	4b58      	ldr	r3, [pc, #352]	@ (8002178 <HAL_RCC_OscConfig+0xc6c>)
 8002018:	6a1b      	ldr	r3, [r3, #32]
 800201a:	e013      	b.n	8002044 <HAL_RCC_OscConfig+0xb38>
 800201c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002020:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8002024:	2202      	movs	r2, #2
 8002026:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002028:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800202c:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	fa93 f2a3 	rbit	r2, r3
 8002036:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800203a:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 800203e:	601a      	str	r2, [r3, #0]
 8002040:	4b4d      	ldr	r3, [pc, #308]	@ (8002178 <HAL_RCC_OscConfig+0xc6c>)
 8002042:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002044:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002048:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 800204c:	2102      	movs	r1, #2
 800204e:	6011      	str	r1, [r2, #0]
 8002050:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002054:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 8002058:	6812      	ldr	r2, [r2, #0]
 800205a:	fa92 f1a2 	rbit	r1, r2
 800205e:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002062:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8002066:	6011      	str	r1, [r2, #0]
  return result;
 8002068:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800206c:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8002070:	6812      	ldr	r2, [r2, #0]
 8002072:	fab2 f282 	clz	r2, r2
 8002076:	b2d2      	uxtb	r2, r2
 8002078:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800207c:	b2d2      	uxtb	r2, r2
 800207e:	f002 021f 	and.w	r2, r2, #31
 8002082:	2101      	movs	r1, #1
 8002084:	fa01 f202 	lsl.w	r2, r1, r2
 8002088:	4013      	ands	r3, r2
 800208a:	2b00      	cmp	r3, #0
 800208c:	d186      	bne.n	8001f9c <HAL_RCC_OscConfig+0xa90>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800208e:	f897 31ff 	ldrb.w	r3, [r7, #511]	@ 0x1ff
 8002092:	2b01      	cmp	r3, #1
 8002094:	d105      	bne.n	80020a2 <HAL_RCC_OscConfig+0xb96>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002096:	4b38      	ldr	r3, [pc, #224]	@ (8002178 <HAL_RCC_OscConfig+0xc6c>)
 8002098:	69db      	ldr	r3, [r3, #28]
 800209a:	4a37      	ldr	r2, [pc, #220]	@ (8002178 <HAL_RCC_OscConfig+0xc6c>)
 800209c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80020a0:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80020a2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80020a6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	69db      	ldr	r3, [r3, #28]
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	f000 8232 	beq.w	8002518 <HAL_RCC_OscConfig+0x100c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80020b4:	4b30      	ldr	r3, [pc, #192]	@ (8002178 <HAL_RCC_OscConfig+0xc6c>)
 80020b6:	685b      	ldr	r3, [r3, #4]
 80020b8:	f003 030c 	and.w	r3, r3, #12
 80020bc:	2b08      	cmp	r3, #8
 80020be:	f000 8201 	beq.w	80024c4 <HAL_RCC_OscConfig+0xfb8>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80020c2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80020c6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	69db      	ldr	r3, [r3, #28]
 80020ce:	2b02      	cmp	r3, #2
 80020d0:	f040 8157 	bne.w	8002382 <HAL_RCC_OscConfig+0xe76>
 80020d4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80020d8:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 80020dc:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80020e0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020e2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80020e6:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	fa93 f2a3 	rbit	r2, r3
 80020f0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80020f4:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 80020f8:	601a      	str	r2, [r3, #0]
  return result;
 80020fa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80020fe:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8002102:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002104:	fab3 f383 	clz	r3, r3
 8002108:	b2db      	uxtb	r3, r3
 800210a:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 800210e:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8002112:	009b      	lsls	r3, r3, #2
 8002114:	461a      	mov	r2, r3
 8002116:	2300      	movs	r3, #0
 8002118:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800211a:	f7fe ff4f 	bl	8000fbc <HAL_GetTick>
 800211e:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002122:	e009      	b.n	8002138 <HAL_RCC_OscConfig+0xc2c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002124:	f7fe ff4a 	bl	8000fbc <HAL_GetTick>
 8002128:	4602      	mov	r2, r0
 800212a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800212e:	1ad3      	subs	r3, r2, r3
 8002130:	2b02      	cmp	r3, #2
 8002132:	d901      	bls.n	8002138 <HAL_RCC_OscConfig+0xc2c>
          {
            return HAL_TIMEOUT;
 8002134:	2303      	movs	r3, #3
 8002136:	e1f0      	b.n	800251a <HAL_RCC_OscConfig+0x100e>
 8002138:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800213c:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8002140:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002144:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002146:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800214a:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	fa93 f2a3 	rbit	r2, r3
 8002154:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002158:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 800215c:	601a      	str	r2, [r3, #0]
  return result;
 800215e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002162:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8002166:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002168:	fab3 f383 	clz	r3, r3
 800216c:	b2db      	uxtb	r3, r3
 800216e:	2b3f      	cmp	r3, #63	@ 0x3f
 8002170:	d804      	bhi.n	800217c <HAL_RCC_OscConfig+0xc70>
 8002172:	4b01      	ldr	r3, [pc, #4]	@ (8002178 <HAL_RCC_OscConfig+0xc6c>)
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	e029      	b.n	80021cc <HAL_RCC_OscConfig+0xcc0>
 8002178:	40021000 	.word	0x40021000
 800217c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002180:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8002184:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002188:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800218a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800218e:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	fa93 f2a3 	rbit	r2, r3
 8002198:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800219c:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 80021a0:	601a      	str	r2, [r3, #0]
 80021a2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80021a6:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 80021aa:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80021ae:	601a      	str	r2, [r3, #0]
 80021b0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80021b4:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	fa93 f2a3 	rbit	r2, r3
 80021be:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80021c2:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 80021c6:	601a      	str	r2, [r3, #0]
 80021c8:	4bc3      	ldr	r3, [pc, #780]	@ (80024d8 <HAL_RCC_OscConfig+0xfcc>)
 80021ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021cc:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80021d0:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 80021d4:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 80021d8:	6011      	str	r1, [r2, #0]
 80021da:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80021de:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 80021e2:	6812      	ldr	r2, [r2, #0]
 80021e4:	fa92 f1a2 	rbit	r1, r2
 80021e8:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80021ec:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 80021f0:	6011      	str	r1, [r2, #0]
  return result;
 80021f2:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80021f6:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 80021fa:	6812      	ldr	r2, [r2, #0]
 80021fc:	fab2 f282 	clz	r2, r2
 8002200:	b2d2      	uxtb	r2, r2
 8002202:	f042 0220 	orr.w	r2, r2, #32
 8002206:	b2d2      	uxtb	r2, r2
 8002208:	f002 021f 	and.w	r2, r2, #31
 800220c:	2101      	movs	r1, #1
 800220e:	fa01 f202 	lsl.w	r2, r1, r2
 8002212:	4013      	ands	r3, r2
 8002214:	2b00      	cmp	r3, #0
 8002216:	d185      	bne.n	8002124 <HAL_RCC_OscConfig+0xc18>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002218:	4baf      	ldr	r3, [pc, #700]	@ (80024d8 <HAL_RCC_OscConfig+0xfcc>)
 800221a:	685b      	ldr	r3, [r3, #4]
 800221c:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8002220:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002224:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 800222c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002230:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	6a1b      	ldr	r3, [r3, #32]
 8002238:	430b      	orrs	r3, r1
 800223a:	49a7      	ldr	r1, [pc, #668]	@ (80024d8 <HAL_RCC_OscConfig+0xfcc>)
 800223c:	4313      	orrs	r3, r2
 800223e:	604b      	str	r3, [r1, #4]
 8002240:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002244:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 8002248:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800224c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800224e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002252:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	fa93 f2a3 	rbit	r2, r3
 800225c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002260:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8002264:	601a      	str	r2, [r3, #0]
  return result;
 8002266:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800226a:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 800226e:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002270:	fab3 f383 	clz	r3, r3
 8002274:	b2db      	uxtb	r3, r3
 8002276:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 800227a:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 800227e:	009b      	lsls	r3, r3, #2
 8002280:	461a      	mov	r2, r3
 8002282:	2301      	movs	r3, #1
 8002284:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002286:	f7fe fe99 	bl	8000fbc <HAL_GetTick>
 800228a:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800228e:	e009      	b.n	80022a4 <HAL_RCC_OscConfig+0xd98>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002290:	f7fe fe94 	bl	8000fbc <HAL_GetTick>
 8002294:	4602      	mov	r2, r0
 8002296:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800229a:	1ad3      	subs	r3, r2, r3
 800229c:	2b02      	cmp	r3, #2
 800229e:	d901      	bls.n	80022a4 <HAL_RCC_OscConfig+0xd98>
          {
            return HAL_TIMEOUT;
 80022a0:	2303      	movs	r3, #3
 80022a2:	e13a      	b.n	800251a <HAL_RCC_OscConfig+0x100e>
 80022a4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80022a8:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 80022ac:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80022b0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022b2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80022b6:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	fa93 f2a3 	rbit	r2, r3
 80022c0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80022c4:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 80022c8:	601a      	str	r2, [r3, #0]
  return result;
 80022ca:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80022ce:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 80022d2:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80022d4:	fab3 f383 	clz	r3, r3
 80022d8:	b2db      	uxtb	r3, r3
 80022da:	2b3f      	cmp	r3, #63	@ 0x3f
 80022dc:	d802      	bhi.n	80022e4 <HAL_RCC_OscConfig+0xdd8>
 80022de:	4b7e      	ldr	r3, [pc, #504]	@ (80024d8 <HAL_RCC_OscConfig+0xfcc>)
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	e027      	b.n	8002334 <HAL_RCC_OscConfig+0xe28>
 80022e4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80022e8:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 80022ec:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80022f0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022f2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80022f6:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	fa93 f2a3 	rbit	r2, r3
 8002300:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002304:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002308:	601a      	str	r2, [r3, #0]
 800230a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800230e:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8002312:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002316:	601a      	str	r2, [r3, #0]
 8002318:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800231c:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	fa93 f2a3 	rbit	r2, r3
 8002326:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800232a:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 800232e:	601a      	str	r2, [r3, #0]
 8002330:	4b69      	ldr	r3, [pc, #420]	@ (80024d8 <HAL_RCC_OscConfig+0xfcc>)
 8002332:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002334:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002338:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 800233c:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8002340:	6011      	str	r1, [r2, #0]
 8002342:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002346:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 800234a:	6812      	ldr	r2, [r2, #0]
 800234c:	fa92 f1a2 	rbit	r1, r2
 8002350:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002354:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8002358:	6011      	str	r1, [r2, #0]
  return result;
 800235a:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800235e:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8002362:	6812      	ldr	r2, [r2, #0]
 8002364:	fab2 f282 	clz	r2, r2
 8002368:	b2d2      	uxtb	r2, r2
 800236a:	f042 0220 	orr.w	r2, r2, #32
 800236e:	b2d2      	uxtb	r2, r2
 8002370:	f002 021f 	and.w	r2, r2, #31
 8002374:	2101      	movs	r1, #1
 8002376:	fa01 f202 	lsl.w	r2, r1, r2
 800237a:	4013      	ands	r3, r2
 800237c:	2b00      	cmp	r3, #0
 800237e:	d087      	beq.n	8002290 <HAL_RCC_OscConfig+0xd84>
 8002380:	e0ca      	b.n	8002518 <HAL_RCC_OscConfig+0x100c>
 8002382:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002386:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 800238a:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800238e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002390:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002394:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	fa93 f2a3 	rbit	r2, r3
 800239e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80023a2:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 80023a6:	601a      	str	r2, [r3, #0]
  return result;
 80023a8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80023ac:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 80023b0:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80023b2:	fab3 f383 	clz	r3, r3
 80023b6:	b2db      	uxtb	r3, r3
 80023b8:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80023bc:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80023c0:	009b      	lsls	r3, r3, #2
 80023c2:	461a      	mov	r2, r3
 80023c4:	2300      	movs	r3, #0
 80023c6:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023c8:	f7fe fdf8 	bl	8000fbc <HAL_GetTick>
 80023cc:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80023d0:	e009      	b.n	80023e6 <HAL_RCC_OscConfig+0xeda>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80023d2:	f7fe fdf3 	bl	8000fbc <HAL_GetTick>
 80023d6:	4602      	mov	r2, r0
 80023d8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80023dc:	1ad3      	subs	r3, r2, r3
 80023de:	2b02      	cmp	r3, #2
 80023e0:	d901      	bls.n	80023e6 <HAL_RCC_OscConfig+0xeda>
          {
            return HAL_TIMEOUT;
 80023e2:	2303      	movs	r3, #3
 80023e4:	e099      	b.n	800251a <HAL_RCC_OscConfig+0x100e>
 80023e6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80023ea:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 80023ee:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80023f2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023f4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80023f8:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	fa93 f2a3 	rbit	r2, r3
 8002402:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002406:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 800240a:	601a      	str	r2, [r3, #0]
  return result;
 800240c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002410:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8002414:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002416:	fab3 f383 	clz	r3, r3
 800241a:	b2db      	uxtb	r3, r3
 800241c:	2b3f      	cmp	r3, #63	@ 0x3f
 800241e:	d802      	bhi.n	8002426 <HAL_RCC_OscConfig+0xf1a>
 8002420:	4b2d      	ldr	r3, [pc, #180]	@ (80024d8 <HAL_RCC_OscConfig+0xfcc>)
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	e027      	b.n	8002476 <HAL_RCC_OscConfig+0xf6a>
 8002426:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800242a:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 800242e:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002432:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002434:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002438:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	fa93 f2a3 	rbit	r2, r3
 8002442:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002446:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 800244a:	601a      	str	r2, [r3, #0]
 800244c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002450:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8002454:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002458:	601a      	str	r2, [r3, #0]
 800245a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800245e:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	fa93 f2a3 	rbit	r2, r3
 8002468:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800246c:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 8002470:	601a      	str	r2, [r3, #0]
 8002472:	4b19      	ldr	r3, [pc, #100]	@ (80024d8 <HAL_RCC_OscConfig+0xfcc>)
 8002474:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002476:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800247a:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 800247e:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8002482:	6011      	str	r1, [r2, #0]
 8002484:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002488:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 800248c:	6812      	ldr	r2, [r2, #0]
 800248e:	fa92 f1a2 	rbit	r1, r2
 8002492:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002496:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 800249a:	6011      	str	r1, [r2, #0]
  return result;
 800249c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80024a0:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 80024a4:	6812      	ldr	r2, [r2, #0]
 80024a6:	fab2 f282 	clz	r2, r2
 80024aa:	b2d2      	uxtb	r2, r2
 80024ac:	f042 0220 	orr.w	r2, r2, #32
 80024b0:	b2d2      	uxtb	r2, r2
 80024b2:	f002 021f 	and.w	r2, r2, #31
 80024b6:	2101      	movs	r1, #1
 80024b8:	fa01 f202 	lsl.w	r2, r1, r2
 80024bc:	4013      	ands	r3, r2
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d187      	bne.n	80023d2 <HAL_RCC_OscConfig+0xec6>
 80024c2:	e029      	b.n	8002518 <HAL_RCC_OscConfig+0x100c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80024c4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80024c8:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	69db      	ldr	r3, [r3, #28]
 80024d0:	2b01      	cmp	r3, #1
 80024d2:	d103      	bne.n	80024dc <HAL_RCC_OscConfig+0xfd0>
      {
        return HAL_ERROR;
 80024d4:	2301      	movs	r3, #1
 80024d6:	e020      	b.n	800251a <HAL_RCC_OscConfig+0x100e>
 80024d8:	40021000 	.word	0x40021000
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80024dc:	4b11      	ldr	r3, [pc, #68]	@ (8002524 <HAL_RCC_OscConfig+0x1018>)
 80024de:	685b      	ldr	r3, [r3, #4]
 80024e0:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80024e4:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 80024e8:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80024ec:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80024f0:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	6a1b      	ldr	r3, [r3, #32]
 80024f8:	429a      	cmp	r2, r3
 80024fa:	d10b      	bne.n	8002514 <HAL_RCC_OscConfig+0x1008>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 80024fc:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8002500:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8002504:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002508:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002510:	429a      	cmp	r2, r3
 8002512:	d001      	beq.n	8002518 <HAL_RCC_OscConfig+0x100c>
#endif
        {
          return HAL_ERROR;
 8002514:	2301      	movs	r3, #1
 8002516:	e000      	b.n	800251a <HAL_RCC_OscConfig+0x100e>
        }
      }
    }
  }

  return HAL_OK;
 8002518:	2300      	movs	r3, #0
}
 800251a:	4618      	mov	r0, r3
 800251c:	f507 7700 	add.w	r7, r7, #512	@ 0x200
 8002520:	46bd      	mov	sp, r7
 8002522:	bd80      	pop	{r7, pc}
 8002524:	40021000 	.word	0x40021000

08002528 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002528:	b580      	push	{r7, lr}
 800252a:	b09e      	sub	sp, #120	@ 0x78
 800252c:	af00      	add	r7, sp, #0
 800252e:	6078      	str	r0, [r7, #4]
 8002530:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002532:	2300      	movs	r3, #0
 8002534:	677b      	str	r3, [r7, #116]	@ 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	2b00      	cmp	r3, #0
 800253a:	d101      	bne.n	8002540 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800253c:	2301      	movs	r3, #1
 800253e:	e154      	b.n	80027ea <HAL_RCC_ClockConfig+0x2c2>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002540:	4b89      	ldr	r3, [pc, #548]	@ (8002768 <HAL_RCC_ClockConfig+0x240>)
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	f003 0307 	and.w	r3, r3, #7
 8002548:	683a      	ldr	r2, [r7, #0]
 800254a:	429a      	cmp	r2, r3
 800254c:	d910      	bls.n	8002570 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800254e:	4b86      	ldr	r3, [pc, #536]	@ (8002768 <HAL_RCC_ClockConfig+0x240>)
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	f023 0207 	bic.w	r2, r3, #7
 8002556:	4984      	ldr	r1, [pc, #528]	@ (8002768 <HAL_RCC_ClockConfig+0x240>)
 8002558:	683b      	ldr	r3, [r7, #0]
 800255a:	4313      	orrs	r3, r2
 800255c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800255e:	4b82      	ldr	r3, [pc, #520]	@ (8002768 <HAL_RCC_ClockConfig+0x240>)
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	f003 0307 	and.w	r3, r3, #7
 8002566:	683a      	ldr	r2, [r7, #0]
 8002568:	429a      	cmp	r2, r3
 800256a:	d001      	beq.n	8002570 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800256c:	2301      	movs	r3, #1
 800256e:	e13c      	b.n	80027ea <HAL_RCC_ClockConfig+0x2c2>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	f003 0302 	and.w	r3, r3, #2
 8002578:	2b00      	cmp	r3, #0
 800257a:	d008      	beq.n	800258e <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800257c:	4b7b      	ldr	r3, [pc, #492]	@ (800276c <HAL_RCC_ClockConfig+0x244>)
 800257e:	685b      	ldr	r3, [r3, #4]
 8002580:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	689b      	ldr	r3, [r3, #8]
 8002588:	4978      	ldr	r1, [pc, #480]	@ (800276c <HAL_RCC_ClockConfig+0x244>)
 800258a:	4313      	orrs	r3, r2
 800258c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	f003 0301 	and.w	r3, r3, #1
 8002596:	2b00      	cmp	r3, #0
 8002598:	f000 80cd 	beq.w	8002736 <HAL_RCC_ClockConfig+0x20e>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	685b      	ldr	r3, [r3, #4]
 80025a0:	2b01      	cmp	r3, #1
 80025a2:	d137      	bne.n	8002614 <HAL_RCC_ClockConfig+0xec>
 80025a4:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80025a8:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025aa:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80025ac:	fa93 f3a3 	rbit	r3, r3
 80025b0:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 80025b2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025b4:	fab3 f383 	clz	r3, r3
 80025b8:	b2db      	uxtb	r3, r3
 80025ba:	2b3f      	cmp	r3, #63	@ 0x3f
 80025bc:	d802      	bhi.n	80025c4 <HAL_RCC_ClockConfig+0x9c>
 80025be:	4b6b      	ldr	r3, [pc, #428]	@ (800276c <HAL_RCC_ClockConfig+0x244>)
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	e00f      	b.n	80025e4 <HAL_RCC_ClockConfig+0xbc>
 80025c4:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80025c8:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025ca:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80025cc:	fa93 f3a3 	rbit	r3, r3
 80025d0:	667b      	str	r3, [r7, #100]	@ 0x64
 80025d2:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80025d6:	663b      	str	r3, [r7, #96]	@ 0x60
 80025d8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80025da:	fa93 f3a3 	rbit	r3, r3
 80025de:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80025e0:	4b62      	ldr	r3, [pc, #392]	@ (800276c <HAL_RCC_ClockConfig+0x244>)
 80025e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025e4:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80025e8:	65ba      	str	r2, [r7, #88]	@ 0x58
 80025ea:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80025ec:	fa92 f2a2 	rbit	r2, r2
 80025f0:	657a      	str	r2, [r7, #84]	@ 0x54
  return result;
 80025f2:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80025f4:	fab2 f282 	clz	r2, r2
 80025f8:	b2d2      	uxtb	r2, r2
 80025fa:	f042 0220 	orr.w	r2, r2, #32
 80025fe:	b2d2      	uxtb	r2, r2
 8002600:	f002 021f 	and.w	r2, r2, #31
 8002604:	2101      	movs	r1, #1
 8002606:	fa01 f202 	lsl.w	r2, r1, r2
 800260a:	4013      	ands	r3, r2
 800260c:	2b00      	cmp	r3, #0
 800260e:	d171      	bne.n	80026f4 <HAL_RCC_ClockConfig+0x1cc>
      {
        return HAL_ERROR;
 8002610:	2301      	movs	r3, #1
 8002612:	e0ea      	b.n	80027ea <HAL_RCC_ClockConfig+0x2c2>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	685b      	ldr	r3, [r3, #4]
 8002618:	2b02      	cmp	r3, #2
 800261a:	d137      	bne.n	800268c <HAL_RCC_ClockConfig+0x164>
 800261c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002620:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002622:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002624:	fa93 f3a3 	rbit	r3, r3
 8002628:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 800262a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800262c:	fab3 f383 	clz	r3, r3
 8002630:	b2db      	uxtb	r3, r3
 8002632:	2b3f      	cmp	r3, #63	@ 0x3f
 8002634:	d802      	bhi.n	800263c <HAL_RCC_ClockConfig+0x114>
 8002636:	4b4d      	ldr	r3, [pc, #308]	@ (800276c <HAL_RCC_ClockConfig+0x244>)
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	e00f      	b.n	800265c <HAL_RCC_ClockConfig+0x134>
 800263c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002640:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002642:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002644:	fa93 f3a3 	rbit	r3, r3
 8002648:	647b      	str	r3, [r7, #68]	@ 0x44
 800264a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800264e:	643b      	str	r3, [r7, #64]	@ 0x40
 8002650:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002652:	fa93 f3a3 	rbit	r3, r3
 8002656:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002658:	4b44      	ldr	r3, [pc, #272]	@ (800276c <HAL_RCC_ClockConfig+0x244>)
 800265a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800265c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002660:	63ba      	str	r2, [r7, #56]	@ 0x38
 8002662:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8002664:	fa92 f2a2 	rbit	r2, r2
 8002668:	637a      	str	r2, [r7, #52]	@ 0x34
  return result;
 800266a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800266c:	fab2 f282 	clz	r2, r2
 8002670:	b2d2      	uxtb	r2, r2
 8002672:	f042 0220 	orr.w	r2, r2, #32
 8002676:	b2d2      	uxtb	r2, r2
 8002678:	f002 021f 	and.w	r2, r2, #31
 800267c:	2101      	movs	r1, #1
 800267e:	fa01 f202 	lsl.w	r2, r1, r2
 8002682:	4013      	ands	r3, r2
 8002684:	2b00      	cmp	r3, #0
 8002686:	d135      	bne.n	80026f4 <HAL_RCC_ClockConfig+0x1cc>
      {
        return HAL_ERROR;
 8002688:	2301      	movs	r3, #1
 800268a:	e0ae      	b.n	80027ea <HAL_RCC_ClockConfig+0x2c2>
 800268c:	2302      	movs	r3, #2
 800268e:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002690:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002692:	fa93 f3a3 	rbit	r3, r3
 8002696:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8002698:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800269a:	fab3 f383 	clz	r3, r3
 800269e:	b2db      	uxtb	r3, r3
 80026a0:	2b3f      	cmp	r3, #63	@ 0x3f
 80026a2:	d802      	bhi.n	80026aa <HAL_RCC_ClockConfig+0x182>
 80026a4:	4b31      	ldr	r3, [pc, #196]	@ (800276c <HAL_RCC_ClockConfig+0x244>)
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	e00d      	b.n	80026c6 <HAL_RCC_ClockConfig+0x19e>
 80026aa:	2302      	movs	r3, #2
 80026ac:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80026b0:	fa93 f3a3 	rbit	r3, r3
 80026b4:	627b      	str	r3, [r7, #36]	@ 0x24
 80026b6:	2302      	movs	r3, #2
 80026b8:	623b      	str	r3, [r7, #32]
 80026ba:	6a3b      	ldr	r3, [r7, #32]
 80026bc:	fa93 f3a3 	rbit	r3, r3
 80026c0:	61fb      	str	r3, [r7, #28]
 80026c2:	4b2a      	ldr	r3, [pc, #168]	@ (800276c <HAL_RCC_ClockConfig+0x244>)
 80026c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026c6:	2202      	movs	r2, #2
 80026c8:	61ba      	str	r2, [r7, #24]
 80026ca:	69ba      	ldr	r2, [r7, #24]
 80026cc:	fa92 f2a2 	rbit	r2, r2
 80026d0:	617a      	str	r2, [r7, #20]
  return result;
 80026d2:	697a      	ldr	r2, [r7, #20]
 80026d4:	fab2 f282 	clz	r2, r2
 80026d8:	b2d2      	uxtb	r2, r2
 80026da:	f042 0220 	orr.w	r2, r2, #32
 80026de:	b2d2      	uxtb	r2, r2
 80026e0:	f002 021f 	and.w	r2, r2, #31
 80026e4:	2101      	movs	r1, #1
 80026e6:	fa01 f202 	lsl.w	r2, r1, r2
 80026ea:	4013      	ands	r3, r2
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d101      	bne.n	80026f4 <HAL_RCC_ClockConfig+0x1cc>
      {
        return HAL_ERROR;
 80026f0:	2301      	movs	r3, #1
 80026f2:	e07a      	b.n	80027ea <HAL_RCC_ClockConfig+0x2c2>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80026f4:	4b1d      	ldr	r3, [pc, #116]	@ (800276c <HAL_RCC_ClockConfig+0x244>)
 80026f6:	685b      	ldr	r3, [r3, #4]
 80026f8:	f023 0203 	bic.w	r2, r3, #3
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	685b      	ldr	r3, [r3, #4]
 8002700:	491a      	ldr	r1, [pc, #104]	@ (800276c <HAL_RCC_ClockConfig+0x244>)
 8002702:	4313      	orrs	r3, r2
 8002704:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002706:	f7fe fc59 	bl	8000fbc <HAL_GetTick>
 800270a:	6778      	str	r0, [r7, #116]	@ 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800270c:	e00a      	b.n	8002724 <HAL_RCC_ClockConfig+0x1fc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800270e:	f7fe fc55 	bl	8000fbc <HAL_GetTick>
 8002712:	4602      	mov	r2, r0
 8002714:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002716:	1ad3      	subs	r3, r2, r3
 8002718:	f241 3288 	movw	r2, #5000	@ 0x1388
 800271c:	4293      	cmp	r3, r2
 800271e:	d901      	bls.n	8002724 <HAL_RCC_ClockConfig+0x1fc>
      {
        return HAL_TIMEOUT;
 8002720:	2303      	movs	r3, #3
 8002722:	e062      	b.n	80027ea <HAL_RCC_ClockConfig+0x2c2>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002724:	4b11      	ldr	r3, [pc, #68]	@ (800276c <HAL_RCC_ClockConfig+0x244>)
 8002726:	685b      	ldr	r3, [r3, #4]
 8002728:	f003 020c 	and.w	r2, r3, #12
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	685b      	ldr	r3, [r3, #4]
 8002730:	009b      	lsls	r3, r3, #2
 8002732:	429a      	cmp	r2, r3
 8002734:	d1eb      	bne.n	800270e <HAL_RCC_ClockConfig+0x1e6>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002736:	4b0c      	ldr	r3, [pc, #48]	@ (8002768 <HAL_RCC_ClockConfig+0x240>)
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	f003 0307 	and.w	r3, r3, #7
 800273e:	683a      	ldr	r2, [r7, #0]
 8002740:	429a      	cmp	r2, r3
 8002742:	d215      	bcs.n	8002770 <HAL_RCC_ClockConfig+0x248>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002744:	4b08      	ldr	r3, [pc, #32]	@ (8002768 <HAL_RCC_ClockConfig+0x240>)
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	f023 0207 	bic.w	r2, r3, #7
 800274c:	4906      	ldr	r1, [pc, #24]	@ (8002768 <HAL_RCC_ClockConfig+0x240>)
 800274e:	683b      	ldr	r3, [r7, #0]
 8002750:	4313      	orrs	r3, r2
 8002752:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002754:	4b04      	ldr	r3, [pc, #16]	@ (8002768 <HAL_RCC_ClockConfig+0x240>)
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	f003 0307 	and.w	r3, r3, #7
 800275c:	683a      	ldr	r2, [r7, #0]
 800275e:	429a      	cmp	r2, r3
 8002760:	d006      	beq.n	8002770 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8002762:	2301      	movs	r3, #1
 8002764:	e041      	b.n	80027ea <HAL_RCC_ClockConfig+0x2c2>
 8002766:	bf00      	nop
 8002768:	40022000 	.word	0x40022000
 800276c:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	f003 0304 	and.w	r3, r3, #4
 8002778:	2b00      	cmp	r3, #0
 800277a:	d008      	beq.n	800278e <HAL_RCC_ClockConfig+0x266>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800277c:	4b1d      	ldr	r3, [pc, #116]	@ (80027f4 <HAL_RCC_ClockConfig+0x2cc>)
 800277e:	685b      	ldr	r3, [r3, #4]
 8002780:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	68db      	ldr	r3, [r3, #12]
 8002788:	491a      	ldr	r1, [pc, #104]	@ (80027f4 <HAL_RCC_ClockConfig+0x2cc>)
 800278a:	4313      	orrs	r3, r2
 800278c:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	f003 0308 	and.w	r3, r3, #8
 8002796:	2b00      	cmp	r3, #0
 8002798:	d009      	beq.n	80027ae <HAL_RCC_ClockConfig+0x286>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800279a:	4b16      	ldr	r3, [pc, #88]	@ (80027f4 <HAL_RCC_ClockConfig+0x2cc>)
 800279c:	685b      	ldr	r3, [r3, #4]
 800279e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	691b      	ldr	r3, [r3, #16]
 80027a6:	00db      	lsls	r3, r3, #3
 80027a8:	4912      	ldr	r1, [pc, #72]	@ (80027f4 <HAL_RCC_ClockConfig+0x2cc>)
 80027aa:	4313      	orrs	r3, r2
 80027ac:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80027ae:	f000 f829 	bl	8002804 <HAL_RCC_GetSysClockFreq>
 80027b2:	4601      	mov	r1, r0
 80027b4:	4b0f      	ldr	r3, [pc, #60]	@ (80027f4 <HAL_RCC_ClockConfig+0x2cc>)
 80027b6:	685b      	ldr	r3, [r3, #4]
 80027b8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80027bc:	22f0      	movs	r2, #240	@ 0xf0
 80027be:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027c0:	693a      	ldr	r2, [r7, #16]
 80027c2:	fa92 f2a2 	rbit	r2, r2
 80027c6:	60fa      	str	r2, [r7, #12]
  return result;
 80027c8:	68fa      	ldr	r2, [r7, #12]
 80027ca:	fab2 f282 	clz	r2, r2
 80027ce:	b2d2      	uxtb	r2, r2
 80027d0:	40d3      	lsrs	r3, r2
 80027d2:	4a09      	ldr	r2, [pc, #36]	@ (80027f8 <HAL_RCC_ClockConfig+0x2d0>)
 80027d4:	5cd3      	ldrb	r3, [r2, r3]
 80027d6:	fa21 f303 	lsr.w	r3, r1, r3
 80027da:	4a08      	ldr	r2, [pc, #32]	@ (80027fc <HAL_RCC_ClockConfig+0x2d4>)
 80027dc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 80027de:	4b08      	ldr	r3, [pc, #32]	@ (8002800 <HAL_RCC_ClockConfig+0x2d8>)
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	4618      	mov	r0, r3
 80027e4:	f7fe fba6 	bl	8000f34 <HAL_InitTick>
  
  return HAL_OK;
 80027e8:	2300      	movs	r3, #0
}
 80027ea:	4618      	mov	r0, r3
 80027ec:	3778      	adds	r7, #120	@ 0x78
 80027ee:	46bd      	mov	sp, r7
 80027f0:	bd80      	pop	{r7, pc}
 80027f2:	bf00      	nop
 80027f4:	40021000 	.word	0x40021000
 80027f8:	08003670 	.word	0x08003670
 80027fc:	20000048 	.word	0x20000048
 8002800:	2000004c 	.word	0x2000004c

08002804 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002804:	b480      	push	{r7}
 8002806:	b087      	sub	sp, #28
 8002808:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800280a:	2300      	movs	r3, #0
 800280c:	60fb      	str	r3, [r7, #12]
 800280e:	2300      	movs	r3, #0
 8002810:	60bb      	str	r3, [r7, #8]
 8002812:	2300      	movs	r3, #0
 8002814:	617b      	str	r3, [r7, #20]
 8002816:	2300      	movs	r3, #0
 8002818:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800281a:	2300      	movs	r3, #0
 800281c:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 800281e:	4b1e      	ldr	r3, [pc, #120]	@ (8002898 <HAL_RCC_GetSysClockFreq+0x94>)
 8002820:	685b      	ldr	r3, [r3, #4]
 8002822:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	f003 030c 	and.w	r3, r3, #12
 800282a:	2b04      	cmp	r3, #4
 800282c:	d002      	beq.n	8002834 <HAL_RCC_GetSysClockFreq+0x30>
 800282e:	2b08      	cmp	r3, #8
 8002830:	d003      	beq.n	800283a <HAL_RCC_GetSysClockFreq+0x36>
 8002832:	e026      	b.n	8002882 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002834:	4b19      	ldr	r3, [pc, #100]	@ (800289c <HAL_RCC_GetSysClockFreq+0x98>)
 8002836:	613b      	str	r3, [r7, #16]
      break;
 8002838:	e026      	b.n	8002888 <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	0c9b      	lsrs	r3, r3, #18
 800283e:	f003 030f 	and.w	r3, r3, #15
 8002842:	4a17      	ldr	r2, [pc, #92]	@ (80028a0 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002844:	5cd3      	ldrb	r3, [r2, r3]
 8002846:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_Pos];
 8002848:	4b13      	ldr	r3, [pc, #76]	@ (8002898 <HAL_RCC_GetSysClockFreq+0x94>)
 800284a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800284c:	f003 030f 	and.w	r3, r3, #15
 8002850:	4a14      	ldr	r2, [pc, #80]	@ (80028a4 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002852:	5cd3      	ldrb	r3, [r2, r3]
 8002854:	60bb      	str	r3, [r7, #8]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800285c:	2b00      	cmp	r3, #0
 800285e:	d008      	beq.n	8002872 <HAL_RCC_GetSysClockFreq+0x6e>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002860:	4a0e      	ldr	r2, [pc, #56]	@ (800289c <HAL_RCC_GetSysClockFreq+0x98>)
 8002862:	68bb      	ldr	r3, [r7, #8]
 8002864:	fbb2 f2f3 	udiv	r2, r2, r3
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	fb02 f303 	mul.w	r3, r2, r3
 800286e:	617b      	str	r3, [r7, #20]
 8002870:	e004      	b.n	800287c <HAL_RCC_GetSysClockFreq+0x78>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	4a0c      	ldr	r2, [pc, #48]	@ (80028a8 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002876:	fb02 f303 	mul.w	r3, r2, r3
 800287a:	617b      	str	r3, [r7, #20]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 800287c:	697b      	ldr	r3, [r7, #20]
 800287e:	613b      	str	r3, [r7, #16]
      break;
 8002880:	e002      	b.n	8002888 <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002882:	4b06      	ldr	r3, [pc, #24]	@ (800289c <HAL_RCC_GetSysClockFreq+0x98>)
 8002884:	613b      	str	r3, [r7, #16]
      break;
 8002886:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002888:	693b      	ldr	r3, [r7, #16]
}
 800288a:	4618      	mov	r0, r3
 800288c:	371c      	adds	r7, #28
 800288e:	46bd      	mov	sp, r7
 8002890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002894:	4770      	bx	lr
 8002896:	bf00      	nop
 8002898:	40021000 	.word	0x40021000
 800289c:	007a1200 	.word	0x007a1200
 80028a0:	08003680 	.word	0x08003680
 80028a4:	08003690 	.word	0x08003690
 80028a8:	003d0900 	.word	0x003d0900

080028ac <HAL_TSC_Init>:
  *         in the TSC_InitTypeDef structure and initialize the associated handle.
  * @param  htsc TSC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TSC_Init(TSC_HandleTypeDef *htsc)
{
 80028ac:	b590      	push	{r4, r7, lr}
 80028ae:	b083      	sub	sp, #12
 80028b0:	af00      	add	r7, sp, #0
 80028b2:	6078      	str	r0, [r7, #4]
  /* Check TSC handle allocation */
  if (htsc == NULL)
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d101      	bne.n	80028be <HAL_TSC_Init+0x12>
  {
    return HAL_ERROR;
 80028ba:	2301      	movs	r3, #1
 80028bc:	e072      	b.n	80029a4 <HAL_TSC_Init+0xf8>
  assert_param(IS_TSC_MCE_IT(htsc->Init.MaxCountInterrupt));
  assert_param(IS_TSC_GROUP(htsc->Init.ChannelIOs));
  assert_param(IS_TSC_GROUP(htsc->Init.ShieldIOs));
  assert_param(IS_TSC_GROUP(htsc->Init.SamplingIOs));

  if (htsc->State == HAL_TSC_STATE_RESET)
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80028c4:	b2db      	uxtb	r3, r3
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d106      	bne.n	80028d8 <HAL_TSC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htsc->Lock = HAL_UNLOCKED;
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	2200      	movs	r2, #0
 80028ce:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    htsc->MspInitCallback(htsc);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX */
    HAL_TSC_MspInit(htsc);
 80028d2:	6878      	ldr	r0, [r7, #4]
 80028d4:	f7fe f982 	bl	8000bdc <HAL_TSC_MspInit>
#endif /* USE_HAL_TSC_REGISTER_CALLBACKS */
  }

  /* Initialize the TSC state */
  htsc->State = HAL_TSC_STATE_BUSY;
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	2202      	movs	r2, #2
 80028dc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /*--------------------------------------------------------------------------*/
  /* Set TSC parameters */

  /* Enable TSC */
  htsc->Instance->CR = TSC_CR_TSCE;
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	2201      	movs	r2, #1
 80028e6:	601a      	str	r2, [r3, #0]

  /* Set all functions */
  htsc->Instance->CR |= (htsc->Init.CTPulseHighLength |
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	6819      	ldr	r1, [r3, #0]
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	685a      	ldr	r2, [r3, #4]
                         htsc->Init.CTPulseLowLength |
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	689b      	ldr	r3, [r3, #8]
  htsc->Instance->CR |= (htsc->Init.CTPulseHighLength |
 80028f6:	431a      	orrs	r2, r3
                         (htsc->Init.SpreadSpectrumDeviation << TSC_CR_SSD_Pos) |
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	691b      	ldr	r3, [r3, #16]
 80028fc:	045b      	lsls	r3, r3, #17
                         htsc->Init.CTPulseLowLength |
 80028fe:	431a      	orrs	r2, r3
                         htsc->Init.SpreadSpectrumPrescaler |
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	695b      	ldr	r3, [r3, #20]
                         (htsc->Init.SpreadSpectrumDeviation << TSC_CR_SSD_Pos) |
 8002904:	431a      	orrs	r2, r3
                         htsc->Init.PulseGeneratorPrescaler |
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	699b      	ldr	r3, [r3, #24]
                         htsc->Init.SpreadSpectrumPrescaler |
 800290a:	431a      	orrs	r2, r3
                         htsc->Init.MaxCountValue |
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	69db      	ldr	r3, [r3, #28]
                         htsc->Init.PulseGeneratorPrescaler |
 8002910:	431a      	orrs	r2, r3
                         htsc->Init.SynchroPinPolarity |
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                         htsc->Init.MaxCountValue |
 8002916:	431a      	orrs	r2, r3
                         htsc->Init.AcquisitionMode);
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
                         htsc->Init.SynchroPinPolarity |
 800291c:	431a      	orrs	r2, r3
  htsc->Instance->CR |= (htsc->Init.CTPulseHighLength |
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	430a      	orrs	r2, r1
 8002924:	601a      	str	r2, [r3, #0]

  /* Spread spectrum */
  if (htsc->Init.SpreadSpectrum == ENABLE)
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	7b1b      	ldrb	r3, [r3, #12]
 800292a:	2b01      	cmp	r3, #1
 800292c:	d107      	bne.n	800293e <HAL_TSC_Init+0x92>
  {
    htsc->Instance->CR |= TSC_CR_SSE;
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	681a      	ldr	r2, [r3, #0]
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 800293c:	601a      	str	r2, [r3, #0]
  }

  /* Disable Schmitt trigger hysteresis on all used TSC IOs */
  htsc->Instance->IOHCR = (~(htsc->Init.ChannelIOs | htsc->Init.ShieldIOs | htsc->Init.SamplingIOs));
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002946:	431a      	orrs	r2, r3
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800294c:	431a      	orrs	r2, r3
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	43d2      	mvns	r2, r2
 8002954:	611a      	str	r2, [r3, #16]

  /* Set channel and shield IOs */
  htsc->Instance->IOCCR = (htsc->Init.ChannelIOs | htsc->Init.ShieldIOs);
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	430a      	orrs	r2, r1
 8002964:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set sampling IOs */
  htsc->Instance->IOSCR = htsc->Init.SamplingIOs;
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	687a      	ldr	r2, [r7, #4]
 800296c:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800296e:	621a      	str	r2, [r3, #32]

  /* Set the groups to be acquired */
  htsc->Instance->IOGCSR = TSC_extract_groups(htsc->Init.ChannelIOs);
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681c      	ldr	r4, [r3, #0]
 8002978:	4610      	mov	r0, r2
 800297a:	f000 f8a0 	bl	8002abe <TSC_extract_groups>
 800297e:	4603      	mov	r3, r0
 8002980:	6323      	str	r3, [r4, #48]	@ 0x30

  /* Disable interrupts */
  htsc->Instance->IER &= (~(TSC_IT_EOA | TSC_IT_MCE));
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	685a      	ldr	r2, [r3, #4]
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	f022 0203 	bic.w	r2, r2, #3
 8002990:	605a      	str	r2, [r3, #4]

  /* Clear flags */
  htsc->Instance->ICR = (TSC_FLAG_EOA | TSC_FLAG_MCE);
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	2203      	movs	r2, #3
 8002998:	609a      	str	r2, [r3, #8]

  /*--------------------------------------------------------------------------*/

  /* Initialize the TSC state */
  htsc->State = HAL_TSC_STATE_READY;
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	2201      	movs	r2, #1
 800299e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 80029a2:	2300      	movs	r3, #0
}
 80029a4:	4618      	mov	r0, r3
 80029a6:	370c      	adds	r7, #12
 80029a8:	46bd      	mov	sp, r7
 80029aa:	bd90      	pop	{r4, r7, pc}

080029ac <HAL_TSC_Start>:
  * @param  htsc Pointer to a TSC_HandleTypeDef structure that contains
  *         the configuration information for the specified TSC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TSC_Start(TSC_HandleTypeDef *htsc)
{
 80029ac:	b480      	push	{r7}
 80029ae:	b083      	sub	sp, #12
 80029b0:	af00      	add	r7, sp, #0
 80029b2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TSC_ALL_INSTANCE(htsc->Instance));

  /* Process locked */
  __HAL_LOCK(htsc);
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80029ba:	2b01      	cmp	r3, #1
 80029bc:	d101      	bne.n	80029c2 <HAL_TSC_Start+0x16>
 80029be:	2302      	movs	r3, #2
 80029c0:	e035      	b.n	8002a2e <HAL_TSC_Start+0x82>
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	2201      	movs	r2, #1
 80029c6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Change TSC state */
  htsc->State = HAL_TSC_STATE_BUSY;
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	2202      	movs	r2, #2
 80029ce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Clear interrupts */
  __HAL_TSC_DISABLE_IT(htsc, (TSC_IT_EOA | TSC_IT_MCE));
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	685a      	ldr	r2, [r3, #4]
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	f022 0203 	bic.w	r2, r2, #3
 80029e0:	605a      	str	r2, [r3, #4]

  /* Clear flags */
  __HAL_TSC_CLEAR_FLAG(htsc, (TSC_FLAG_EOA | TSC_FLAG_MCE));
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	2203      	movs	r2, #3
 80029e8:	609a      	str	r2, [r3, #8]

  /* Set touch sensing IOs not acquired to the specified IODefaultMode */
  if (htsc->Init.IODefaultMode == TSC_IODEF_OUT_PP_LOW)
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	6a1b      	ldr	r3, [r3, #32]
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d108      	bne.n	8002a04 <HAL_TSC_Start+0x58>
  {
    __HAL_TSC_SET_IODEF_OUTPPLOW(htsc);
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	681a      	ldr	r2, [r3, #0]
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	f022 0210 	bic.w	r2, r2, #16
 8002a00:	601a      	str	r2, [r3, #0]
 8002a02:	e007      	b.n	8002a14 <HAL_TSC_Start+0x68>
  }
  else
  {
    __HAL_TSC_SET_IODEF_INFLOAT(htsc);
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	681a      	ldr	r2, [r3, #0]
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	f042 0210 	orr.w	r2, r2, #16
 8002a12:	601a      	str	r2, [r3, #0]
  }

  /* Launch the acquisition */
  __HAL_TSC_START_ACQ(htsc);
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	681a      	ldr	r2, [r3, #0]
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	f042 0202 	orr.w	r2, r2, #2
 8002a22:	601a      	str	r2, [r3, #0]

  /* Process unlocked */
  __HAL_UNLOCK(htsc);
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	2200      	movs	r2, #0
 8002a28:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 8002a2c:	2300      	movs	r3, #0
}
 8002a2e:	4618      	mov	r0, r3
 8002a30:	370c      	adds	r7, #12
 8002a32:	46bd      	mov	sp, r7
 8002a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a38:	4770      	bx	lr

08002a3a <HAL_TSC_GroupGetValue>:
  *         the configuration information for the specified TSC.
  * @param  gx_index Index of the group
  * @retval Acquisition measure
  */
uint32_t HAL_TSC_GroupGetValue(const TSC_HandleTypeDef *htsc, uint32_t gx_index)
{
 8002a3a:	b480      	push	{r7}
 8002a3c:	b083      	sub	sp, #12
 8002a3e:	af00      	add	r7, sp, #0
 8002a40:	6078      	str	r0, [r7, #4]
 8002a42:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TSC_ALL_INSTANCE(htsc->Instance));
  assert_param(IS_TSC_GROUP_INDEX(gx_index));

  /* Return the group acquisition counter */
  return htsc->Instance->IOGXCR[gx_index];
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681a      	ldr	r2, [r3, #0]
 8002a48:	683b      	ldr	r3, [r7, #0]
 8002a4a:	330c      	adds	r3, #12
 8002a4c:	009b      	lsls	r3, r3, #2
 8002a4e:	4413      	add	r3, r2
 8002a50:	685b      	ldr	r3, [r3, #4]
}
 8002a52:	4618      	mov	r0, r3
 8002a54:	370c      	adds	r7, #12
 8002a56:	46bd      	mov	sp, r7
 8002a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a5c:	4770      	bx	lr

08002a5e <HAL_TSC_IODischarge>:
  *         the configuration information for the specified TSC.
  * @param  choice This parameter can be set to ENABLE or DISABLE.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TSC_IODischarge(TSC_HandleTypeDef *htsc, FunctionalState choice)
{
 8002a5e:	b480      	push	{r7}
 8002a60:	b083      	sub	sp, #12
 8002a62:	af00      	add	r7, sp, #0
 8002a64:	6078      	str	r0, [r7, #4]
 8002a66:	460b      	mov	r3, r1
 8002a68:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TSC_ALL_INSTANCE(htsc->Instance));

  /* Process locked */
  __HAL_LOCK(htsc);
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002a70:	2b01      	cmp	r3, #1
 8002a72:	d101      	bne.n	8002a78 <HAL_TSC_IODischarge+0x1a>
 8002a74:	2302      	movs	r3, #2
 8002a76:	e01c      	b.n	8002ab2 <HAL_TSC_IODischarge+0x54>
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	2201      	movs	r2, #1
 8002a7c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  if (choice == ENABLE)
 8002a80:	78fb      	ldrb	r3, [r7, #3]
 8002a82:	2b01      	cmp	r3, #1
 8002a84:	d108      	bne.n	8002a98 <HAL_TSC_IODischarge+0x3a>
  {
    __HAL_TSC_SET_IODEF_OUTPPLOW(htsc);
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	681a      	ldr	r2, [r3, #0]
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	f022 0210 	bic.w	r2, r2, #16
 8002a94:	601a      	str	r2, [r3, #0]
 8002a96:	e007      	b.n	8002aa8 <HAL_TSC_IODischarge+0x4a>
  }
  else
  {
    __HAL_TSC_SET_IODEF_INFLOAT(htsc);
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	681a      	ldr	r2, [r3, #0]
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	f042 0210 	orr.w	r2, r2, #16
 8002aa6:	601a      	str	r2, [r3, #0]
  }

  /* Process unlocked */
  __HAL_UNLOCK(htsc);
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	2200      	movs	r2, #0
 8002aac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return the group acquisition counter */
  return HAL_OK;
 8002ab0:	2300      	movs	r3, #0
}
 8002ab2:	4618      	mov	r0, r3
 8002ab4:	370c      	adds	r7, #12
 8002ab6:	46bd      	mov	sp, r7
 8002ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002abc:	4770      	bx	lr

08002abe <TSC_extract_groups>:
  * @brief  Utility function used to set the acquired groups mask.
  * @param  iomask Channels IOs mask
  * @retval Acquired groups mask
  */
static uint32_t TSC_extract_groups(uint32_t iomask)
{
 8002abe:	b480      	push	{r7}
 8002ac0:	b085      	sub	sp, #20
 8002ac2:	af00      	add	r7, sp, #0
 8002ac4:	6078      	str	r0, [r7, #4]
  uint32_t groups = 0UL;
 8002ac6:	2300      	movs	r3, #0
 8002ac8:	60fb      	str	r3, [r7, #12]
  uint32_t idx;

  for (idx = 0UL; idx < (uint32_t)TSC_NB_OF_GROUPS; idx++)
 8002aca:	2300      	movs	r3, #0
 8002acc:	60bb      	str	r3, [r7, #8]
 8002ace:	e011      	b.n	8002af4 <TSC_extract_groups+0x36>
  {
    if ((iomask & (0x0FUL << (idx * 4UL))) != 0UL)
 8002ad0:	68bb      	ldr	r3, [r7, #8]
 8002ad2:	009b      	lsls	r3, r3, #2
 8002ad4:	220f      	movs	r2, #15
 8002ad6:	409a      	lsls	r2, r3
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	4013      	ands	r3, r2
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d006      	beq.n	8002aee <TSC_extract_groups+0x30>
    {
      groups |= (1UL << idx);
 8002ae0:	2201      	movs	r2, #1
 8002ae2:	68bb      	ldr	r3, [r7, #8]
 8002ae4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ae8:	68fa      	ldr	r2, [r7, #12]
 8002aea:	4313      	orrs	r3, r2
 8002aec:	60fb      	str	r3, [r7, #12]
  for (idx = 0UL; idx < (uint32_t)TSC_NB_OF_GROUPS; idx++)
 8002aee:	68bb      	ldr	r3, [r7, #8]
 8002af0:	3301      	adds	r3, #1
 8002af2:	60bb      	str	r3, [r7, #8]
 8002af4:	68bb      	ldr	r3, [r7, #8]
 8002af6:	2b07      	cmp	r3, #7
 8002af8:	d9ea      	bls.n	8002ad0 <TSC_extract_groups+0x12>
    }
  }

  return groups;
 8002afa:	68fb      	ldr	r3, [r7, #12]
}
 8002afc:	4618      	mov	r0, r3
 8002afe:	3714      	adds	r7, #20
 8002b00:	46bd      	mov	sp, r7
 8002b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b06:	4770      	bx	lr

08002b08 <sniprintf>:
 8002b08:	b40c      	push	{r2, r3}
 8002b0a:	b530      	push	{r4, r5, lr}
 8002b0c:	4b18      	ldr	r3, [pc, #96]	@ (8002b70 <sniprintf+0x68>)
 8002b0e:	1e0c      	subs	r4, r1, #0
 8002b10:	681d      	ldr	r5, [r3, #0]
 8002b12:	b09d      	sub	sp, #116	@ 0x74
 8002b14:	da08      	bge.n	8002b28 <sniprintf+0x20>
 8002b16:	238b      	movs	r3, #139	@ 0x8b
 8002b18:	602b      	str	r3, [r5, #0]
 8002b1a:	f04f 30ff 	mov.w	r0, #4294967295
 8002b1e:	b01d      	add	sp, #116	@ 0x74
 8002b20:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8002b24:	b002      	add	sp, #8
 8002b26:	4770      	bx	lr
 8002b28:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8002b2c:	f8ad 3014 	strh.w	r3, [sp, #20]
 8002b30:	f04f 0300 	mov.w	r3, #0
 8002b34:	931b      	str	r3, [sp, #108]	@ 0x6c
 8002b36:	bf14      	ite	ne
 8002b38:	f104 33ff 	addne.w	r3, r4, #4294967295
 8002b3c:	4623      	moveq	r3, r4
 8002b3e:	9304      	str	r3, [sp, #16]
 8002b40:	9307      	str	r3, [sp, #28]
 8002b42:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002b46:	9002      	str	r0, [sp, #8]
 8002b48:	9006      	str	r0, [sp, #24]
 8002b4a:	f8ad 3016 	strh.w	r3, [sp, #22]
 8002b4e:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8002b50:	ab21      	add	r3, sp, #132	@ 0x84
 8002b52:	a902      	add	r1, sp, #8
 8002b54:	4628      	mov	r0, r5
 8002b56:	9301      	str	r3, [sp, #4]
 8002b58:	f000 f9a2 	bl	8002ea0 <_svfiprintf_r>
 8002b5c:	1c43      	adds	r3, r0, #1
 8002b5e:	bfbc      	itt	lt
 8002b60:	238b      	movlt	r3, #139	@ 0x8b
 8002b62:	602b      	strlt	r3, [r5, #0]
 8002b64:	2c00      	cmp	r4, #0
 8002b66:	d0da      	beq.n	8002b1e <sniprintf+0x16>
 8002b68:	9b02      	ldr	r3, [sp, #8]
 8002b6a:	2200      	movs	r2, #0
 8002b6c:	701a      	strb	r2, [r3, #0]
 8002b6e:	e7d6      	b.n	8002b1e <sniprintf+0x16>
 8002b70:	20000054 	.word	0x20000054

08002b74 <memset>:
 8002b74:	4402      	add	r2, r0
 8002b76:	4603      	mov	r3, r0
 8002b78:	4293      	cmp	r3, r2
 8002b7a:	d100      	bne.n	8002b7e <memset+0xa>
 8002b7c:	4770      	bx	lr
 8002b7e:	f803 1b01 	strb.w	r1, [r3], #1
 8002b82:	e7f9      	b.n	8002b78 <memset+0x4>

08002b84 <__errno>:
 8002b84:	4b01      	ldr	r3, [pc, #4]	@ (8002b8c <__errno+0x8>)
 8002b86:	6818      	ldr	r0, [r3, #0]
 8002b88:	4770      	bx	lr
 8002b8a:	bf00      	nop
 8002b8c:	20000054 	.word	0x20000054

08002b90 <__libc_init_array>:
 8002b90:	b570      	push	{r4, r5, r6, lr}
 8002b92:	4d0d      	ldr	r5, [pc, #52]	@ (8002bc8 <__libc_init_array+0x38>)
 8002b94:	4c0d      	ldr	r4, [pc, #52]	@ (8002bcc <__libc_init_array+0x3c>)
 8002b96:	1b64      	subs	r4, r4, r5
 8002b98:	10a4      	asrs	r4, r4, #2
 8002b9a:	2600      	movs	r6, #0
 8002b9c:	42a6      	cmp	r6, r4
 8002b9e:	d109      	bne.n	8002bb4 <__libc_init_array+0x24>
 8002ba0:	4d0b      	ldr	r5, [pc, #44]	@ (8002bd0 <__libc_init_array+0x40>)
 8002ba2:	4c0c      	ldr	r4, [pc, #48]	@ (8002bd4 <__libc_init_array+0x44>)
 8002ba4:	f000 fc64 	bl	8003470 <_init>
 8002ba8:	1b64      	subs	r4, r4, r5
 8002baa:	10a4      	asrs	r4, r4, #2
 8002bac:	2600      	movs	r6, #0
 8002bae:	42a6      	cmp	r6, r4
 8002bb0:	d105      	bne.n	8002bbe <__libc_init_array+0x2e>
 8002bb2:	bd70      	pop	{r4, r5, r6, pc}
 8002bb4:	f855 3b04 	ldr.w	r3, [r5], #4
 8002bb8:	4798      	blx	r3
 8002bba:	3601      	adds	r6, #1
 8002bbc:	e7ee      	b.n	8002b9c <__libc_init_array+0xc>
 8002bbe:	f855 3b04 	ldr.w	r3, [r5], #4
 8002bc2:	4798      	blx	r3
 8002bc4:	3601      	adds	r6, #1
 8002bc6:	e7f2      	b.n	8002bae <__libc_init_array+0x1e>
 8002bc8:	080036dc 	.word	0x080036dc
 8002bcc:	080036dc 	.word	0x080036dc
 8002bd0:	080036dc 	.word	0x080036dc
 8002bd4:	080036e0 	.word	0x080036e0

08002bd8 <__retarget_lock_acquire_recursive>:
 8002bd8:	4770      	bx	lr

08002bda <__retarget_lock_release_recursive>:
 8002bda:	4770      	bx	lr

08002bdc <memcpy>:
 8002bdc:	440a      	add	r2, r1
 8002bde:	4291      	cmp	r1, r2
 8002be0:	f100 33ff 	add.w	r3, r0, #4294967295
 8002be4:	d100      	bne.n	8002be8 <memcpy+0xc>
 8002be6:	4770      	bx	lr
 8002be8:	b510      	push	{r4, lr}
 8002bea:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002bee:	f803 4f01 	strb.w	r4, [r3, #1]!
 8002bf2:	4291      	cmp	r1, r2
 8002bf4:	d1f9      	bne.n	8002bea <memcpy+0xe>
 8002bf6:	bd10      	pop	{r4, pc}

08002bf8 <_free_r>:
 8002bf8:	b538      	push	{r3, r4, r5, lr}
 8002bfa:	4605      	mov	r5, r0
 8002bfc:	2900      	cmp	r1, #0
 8002bfe:	d041      	beq.n	8002c84 <_free_r+0x8c>
 8002c00:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002c04:	1f0c      	subs	r4, r1, #4
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	bfb8      	it	lt
 8002c0a:	18e4      	addlt	r4, r4, r3
 8002c0c:	f000 f8e0 	bl	8002dd0 <__malloc_lock>
 8002c10:	4a1d      	ldr	r2, [pc, #116]	@ (8002c88 <_free_r+0x90>)
 8002c12:	6813      	ldr	r3, [r2, #0]
 8002c14:	b933      	cbnz	r3, 8002c24 <_free_r+0x2c>
 8002c16:	6063      	str	r3, [r4, #4]
 8002c18:	6014      	str	r4, [r2, #0]
 8002c1a:	4628      	mov	r0, r5
 8002c1c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002c20:	f000 b8dc 	b.w	8002ddc <__malloc_unlock>
 8002c24:	42a3      	cmp	r3, r4
 8002c26:	d908      	bls.n	8002c3a <_free_r+0x42>
 8002c28:	6820      	ldr	r0, [r4, #0]
 8002c2a:	1821      	adds	r1, r4, r0
 8002c2c:	428b      	cmp	r3, r1
 8002c2e:	bf01      	itttt	eq
 8002c30:	6819      	ldreq	r1, [r3, #0]
 8002c32:	685b      	ldreq	r3, [r3, #4]
 8002c34:	1809      	addeq	r1, r1, r0
 8002c36:	6021      	streq	r1, [r4, #0]
 8002c38:	e7ed      	b.n	8002c16 <_free_r+0x1e>
 8002c3a:	461a      	mov	r2, r3
 8002c3c:	685b      	ldr	r3, [r3, #4]
 8002c3e:	b10b      	cbz	r3, 8002c44 <_free_r+0x4c>
 8002c40:	42a3      	cmp	r3, r4
 8002c42:	d9fa      	bls.n	8002c3a <_free_r+0x42>
 8002c44:	6811      	ldr	r1, [r2, #0]
 8002c46:	1850      	adds	r0, r2, r1
 8002c48:	42a0      	cmp	r0, r4
 8002c4a:	d10b      	bne.n	8002c64 <_free_r+0x6c>
 8002c4c:	6820      	ldr	r0, [r4, #0]
 8002c4e:	4401      	add	r1, r0
 8002c50:	1850      	adds	r0, r2, r1
 8002c52:	4283      	cmp	r3, r0
 8002c54:	6011      	str	r1, [r2, #0]
 8002c56:	d1e0      	bne.n	8002c1a <_free_r+0x22>
 8002c58:	6818      	ldr	r0, [r3, #0]
 8002c5a:	685b      	ldr	r3, [r3, #4]
 8002c5c:	6053      	str	r3, [r2, #4]
 8002c5e:	4408      	add	r0, r1
 8002c60:	6010      	str	r0, [r2, #0]
 8002c62:	e7da      	b.n	8002c1a <_free_r+0x22>
 8002c64:	d902      	bls.n	8002c6c <_free_r+0x74>
 8002c66:	230c      	movs	r3, #12
 8002c68:	602b      	str	r3, [r5, #0]
 8002c6a:	e7d6      	b.n	8002c1a <_free_r+0x22>
 8002c6c:	6820      	ldr	r0, [r4, #0]
 8002c6e:	1821      	adds	r1, r4, r0
 8002c70:	428b      	cmp	r3, r1
 8002c72:	bf04      	itt	eq
 8002c74:	6819      	ldreq	r1, [r3, #0]
 8002c76:	685b      	ldreq	r3, [r3, #4]
 8002c78:	6063      	str	r3, [r4, #4]
 8002c7a:	bf04      	itt	eq
 8002c7c:	1809      	addeq	r1, r1, r0
 8002c7e:	6021      	streq	r1, [r4, #0]
 8002c80:	6054      	str	r4, [r2, #4]
 8002c82:	e7ca      	b.n	8002c1a <_free_r+0x22>
 8002c84:	bd38      	pop	{r3, r4, r5, pc}
 8002c86:	bf00      	nop
 8002c88:	20000250 	.word	0x20000250

08002c8c <sbrk_aligned>:
 8002c8c:	b570      	push	{r4, r5, r6, lr}
 8002c8e:	4e0f      	ldr	r6, [pc, #60]	@ (8002ccc <sbrk_aligned+0x40>)
 8002c90:	460c      	mov	r4, r1
 8002c92:	6831      	ldr	r1, [r6, #0]
 8002c94:	4605      	mov	r5, r0
 8002c96:	b911      	cbnz	r1, 8002c9e <sbrk_aligned+0x12>
 8002c98:	f000 fba4 	bl	80033e4 <_sbrk_r>
 8002c9c:	6030      	str	r0, [r6, #0]
 8002c9e:	4621      	mov	r1, r4
 8002ca0:	4628      	mov	r0, r5
 8002ca2:	f000 fb9f 	bl	80033e4 <_sbrk_r>
 8002ca6:	1c43      	adds	r3, r0, #1
 8002ca8:	d103      	bne.n	8002cb2 <sbrk_aligned+0x26>
 8002caa:	f04f 34ff 	mov.w	r4, #4294967295
 8002cae:	4620      	mov	r0, r4
 8002cb0:	bd70      	pop	{r4, r5, r6, pc}
 8002cb2:	1cc4      	adds	r4, r0, #3
 8002cb4:	f024 0403 	bic.w	r4, r4, #3
 8002cb8:	42a0      	cmp	r0, r4
 8002cba:	d0f8      	beq.n	8002cae <sbrk_aligned+0x22>
 8002cbc:	1a21      	subs	r1, r4, r0
 8002cbe:	4628      	mov	r0, r5
 8002cc0:	f000 fb90 	bl	80033e4 <_sbrk_r>
 8002cc4:	3001      	adds	r0, #1
 8002cc6:	d1f2      	bne.n	8002cae <sbrk_aligned+0x22>
 8002cc8:	e7ef      	b.n	8002caa <sbrk_aligned+0x1e>
 8002cca:	bf00      	nop
 8002ccc:	2000024c 	.word	0x2000024c

08002cd0 <_malloc_r>:
 8002cd0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002cd4:	1ccd      	adds	r5, r1, #3
 8002cd6:	f025 0503 	bic.w	r5, r5, #3
 8002cda:	3508      	adds	r5, #8
 8002cdc:	2d0c      	cmp	r5, #12
 8002cde:	bf38      	it	cc
 8002ce0:	250c      	movcc	r5, #12
 8002ce2:	2d00      	cmp	r5, #0
 8002ce4:	4606      	mov	r6, r0
 8002ce6:	db01      	blt.n	8002cec <_malloc_r+0x1c>
 8002ce8:	42a9      	cmp	r1, r5
 8002cea:	d904      	bls.n	8002cf6 <_malloc_r+0x26>
 8002cec:	230c      	movs	r3, #12
 8002cee:	6033      	str	r3, [r6, #0]
 8002cf0:	2000      	movs	r0, #0
 8002cf2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002cf6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8002dcc <_malloc_r+0xfc>
 8002cfa:	f000 f869 	bl	8002dd0 <__malloc_lock>
 8002cfe:	f8d8 3000 	ldr.w	r3, [r8]
 8002d02:	461c      	mov	r4, r3
 8002d04:	bb44      	cbnz	r4, 8002d58 <_malloc_r+0x88>
 8002d06:	4629      	mov	r1, r5
 8002d08:	4630      	mov	r0, r6
 8002d0a:	f7ff ffbf 	bl	8002c8c <sbrk_aligned>
 8002d0e:	1c43      	adds	r3, r0, #1
 8002d10:	4604      	mov	r4, r0
 8002d12:	d158      	bne.n	8002dc6 <_malloc_r+0xf6>
 8002d14:	f8d8 4000 	ldr.w	r4, [r8]
 8002d18:	4627      	mov	r7, r4
 8002d1a:	2f00      	cmp	r7, #0
 8002d1c:	d143      	bne.n	8002da6 <_malloc_r+0xd6>
 8002d1e:	2c00      	cmp	r4, #0
 8002d20:	d04b      	beq.n	8002dba <_malloc_r+0xea>
 8002d22:	6823      	ldr	r3, [r4, #0]
 8002d24:	4639      	mov	r1, r7
 8002d26:	4630      	mov	r0, r6
 8002d28:	eb04 0903 	add.w	r9, r4, r3
 8002d2c:	f000 fb5a 	bl	80033e4 <_sbrk_r>
 8002d30:	4581      	cmp	r9, r0
 8002d32:	d142      	bne.n	8002dba <_malloc_r+0xea>
 8002d34:	6821      	ldr	r1, [r4, #0]
 8002d36:	1a6d      	subs	r5, r5, r1
 8002d38:	4629      	mov	r1, r5
 8002d3a:	4630      	mov	r0, r6
 8002d3c:	f7ff ffa6 	bl	8002c8c <sbrk_aligned>
 8002d40:	3001      	adds	r0, #1
 8002d42:	d03a      	beq.n	8002dba <_malloc_r+0xea>
 8002d44:	6823      	ldr	r3, [r4, #0]
 8002d46:	442b      	add	r3, r5
 8002d48:	6023      	str	r3, [r4, #0]
 8002d4a:	f8d8 3000 	ldr.w	r3, [r8]
 8002d4e:	685a      	ldr	r2, [r3, #4]
 8002d50:	bb62      	cbnz	r2, 8002dac <_malloc_r+0xdc>
 8002d52:	f8c8 7000 	str.w	r7, [r8]
 8002d56:	e00f      	b.n	8002d78 <_malloc_r+0xa8>
 8002d58:	6822      	ldr	r2, [r4, #0]
 8002d5a:	1b52      	subs	r2, r2, r5
 8002d5c:	d420      	bmi.n	8002da0 <_malloc_r+0xd0>
 8002d5e:	2a0b      	cmp	r2, #11
 8002d60:	d917      	bls.n	8002d92 <_malloc_r+0xc2>
 8002d62:	1961      	adds	r1, r4, r5
 8002d64:	42a3      	cmp	r3, r4
 8002d66:	6025      	str	r5, [r4, #0]
 8002d68:	bf18      	it	ne
 8002d6a:	6059      	strne	r1, [r3, #4]
 8002d6c:	6863      	ldr	r3, [r4, #4]
 8002d6e:	bf08      	it	eq
 8002d70:	f8c8 1000 	streq.w	r1, [r8]
 8002d74:	5162      	str	r2, [r4, r5]
 8002d76:	604b      	str	r3, [r1, #4]
 8002d78:	4630      	mov	r0, r6
 8002d7a:	f000 f82f 	bl	8002ddc <__malloc_unlock>
 8002d7e:	f104 000b 	add.w	r0, r4, #11
 8002d82:	1d23      	adds	r3, r4, #4
 8002d84:	f020 0007 	bic.w	r0, r0, #7
 8002d88:	1ac2      	subs	r2, r0, r3
 8002d8a:	bf1c      	itt	ne
 8002d8c:	1a1b      	subne	r3, r3, r0
 8002d8e:	50a3      	strne	r3, [r4, r2]
 8002d90:	e7af      	b.n	8002cf2 <_malloc_r+0x22>
 8002d92:	6862      	ldr	r2, [r4, #4]
 8002d94:	42a3      	cmp	r3, r4
 8002d96:	bf0c      	ite	eq
 8002d98:	f8c8 2000 	streq.w	r2, [r8]
 8002d9c:	605a      	strne	r2, [r3, #4]
 8002d9e:	e7eb      	b.n	8002d78 <_malloc_r+0xa8>
 8002da0:	4623      	mov	r3, r4
 8002da2:	6864      	ldr	r4, [r4, #4]
 8002da4:	e7ae      	b.n	8002d04 <_malloc_r+0x34>
 8002da6:	463c      	mov	r4, r7
 8002da8:	687f      	ldr	r7, [r7, #4]
 8002daa:	e7b6      	b.n	8002d1a <_malloc_r+0x4a>
 8002dac:	461a      	mov	r2, r3
 8002dae:	685b      	ldr	r3, [r3, #4]
 8002db0:	42a3      	cmp	r3, r4
 8002db2:	d1fb      	bne.n	8002dac <_malloc_r+0xdc>
 8002db4:	2300      	movs	r3, #0
 8002db6:	6053      	str	r3, [r2, #4]
 8002db8:	e7de      	b.n	8002d78 <_malloc_r+0xa8>
 8002dba:	230c      	movs	r3, #12
 8002dbc:	6033      	str	r3, [r6, #0]
 8002dbe:	4630      	mov	r0, r6
 8002dc0:	f000 f80c 	bl	8002ddc <__malloc_unlock>
 8002dc4:	e794      	b.n	8002cf0 <_malloc_r+0x20>
 8002dc6:	6005      	str	r5, [r0, #0]
 8002dc8:	e7d6      	b.n	8002d78 <_malloc_r+0xa8>
 8002dca:	bf00      	nop
 8002dcc:	20000250 	.word	0x20000250

08002dd0 <__malloc_lock>:
 8002dd0:	4801      	ldr	r0, [pc, #4]	@ (8002dd8 <__malloc_lock+0x8>)
 8002dd2:	f7ff bf01 	b.w	8002bd8 <__retarget_lock_acquire_recursive>
 8002dd6:	bf00      	nop
 8002dd8:	20000248 	.word	0x20000248

08002ddc <__malloc_unlock>:
 8002ddc:	4801      	ldr	r0, [pc, #4]	@ (8002de4 <__malloc_unlock+0x8>)
 8002dde:	f7ff befc 	b.w	8002bda <__retarget_lock_release_recursive>
 8002de2:	bf00      	nop
 8002de4:	20000248 	.word	0x20000248

08002de8 <__ssputs_r>:
 8002de8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002dec:	688e      	ldr	r6, [r1, #8]
 8002dee:	461f      	mov	r7, r3
 8002df0:	42be      	cmp	r6, r7
 8002df2:	680b      	ldr	r3, [r1, #0]
 8002df4:	4682      	mov	sl, r0
 8002df6:	460c      	mov	r4, r1
 8002df8:	4690      	mov	r8, r2
 8002dfa:	d82d      	bhi.n	8002e58 <__ssputs_r+0x70>
 8002dfc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8002e00:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8002e04:	d026      	beq.n	8002e54 <__ssputs_r+0x6c>
 8002e06:	6965      	ldr	r5, [r4, #20]
 8002e08:	6909      	ldr	r1, [r1, #16]
 8002e0a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8002e0e:	eba3 0901 	sub.w	r9, r3, r1
 8002e12:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8002e16:	1c7b      	adds	r3, r7, #1
 8002e18:	444b      	add	r3, r9
 8002e1a:	106d      	asrs	r5, r5, #1
 8002e1c:	429d      	cmp	r5, r3
 8002e1e:	bf38      	it	cc
 8002e20:	461d      	movcc	r5, r3
 8002e22:	0553      	lsls	r3, r2, #21
 8002e24:	d527      	bpl.n	8002e76 <__ssputs_r+0x8e>
 8002e26:	4629      	mov	r1, r5
 8002e28:	f7ff ff52 	bl	8002cd0 <_malloc_r>
 8002e2c:	4606      	mov	r6, r0
 8002e2e:	b360      	cbz	r0, 8002e8a <__ssputs_r+0xa2>
 8002e30:	6921      	ldr	r1, [r4, #16]
 8002e32:	464a      	mov	r2, r9
 8002e34:	f7ff fed2 	bl	8002bdc <memcpy>
 8002e38:	89a3      	ldrh	r3, [r4, #12]
 8002e3a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8002e3e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002e42:	81a3      	strh	r3, [r4, #12]
 8002e44:	6126      	str	r6, [r4, #16]
 8002e46:	6165      	str	r5, [r4, #20]
 8002e48:	444e      	add	r6, r9
 8002e4a:	eba5 0509 	sub.w	r5, r5, r9
 8002e4e:	6026      	str	r6, [r4, #0]
 8002e50:	60a5      	str	r5, [r4, #8]
 8002e52:	463e      	mov	r6, r7
 8002e54:	42be      	cmp	r6, r7
 8002e56:	d900      	bls.n	8002e5a <__ssputs_r+0x72>
 8002e58:	463e      	mov	r6, r7
 8002e5a:	6820      	ldr	r0, [r4, #0]
 8002e5c:	4632      	mov	r2, r6
 8002e5e:	4641      	mov	r1, r8
 8002e60:	f000 faa6 	bl	80033b0 <memmove>
 8002e64:	68a3      	ldr	r3, [r4, #8]
 8002e66:	1b9b      	subs	r3, r3, r6
 8002e68:	60a3      	str	r3, [r4, #8]
 8002e6a:	6823      	ldr	r3, [r4, #0]
 8002e6c:	4433      	add	r3, r6
 8002e6e:	6023      	str	r3, [r4, #0]
 8002e70:	2000      	movs	r0, #0
 8002e72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002e76:	462a      	mov	r2, r5
 8002e78:	f000 fac4 	bl	8003404 <_realloc_r>
 8002e7c:	4606      	mov	r6, r0
 8002e7e:	2800      	cmp	r0, #0
 8002e80:	d1e0      	bne.n	8002e44 <__ssputs_r+0x5c>
 8002e82:	6921      	ldr	r1, [r4, #16]
 8002e84:	4650      	mov	r0, sl
 8002e86:	f7ff feb7 	bl	8002bf8 <_free_r>
 8002e8a:	230c      	movs	r3, #12
 8002e8c:	f8ca 3000 	str.w	r3, [sl]
 8002e90:	89a3      	ldrh	r3, [r4, #12]
 8002e92:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002e96:	81a3      	strh	r3, [r4, #12]
 8002e98:	f04f 30ff 	mov.w	r0, #4294967295
 8002e9c:	e7e9      	b.n	8002e72 <__ssputs_r+0x8a>
	...

08002ea0 <_svfiprintf_r>:
 8002ea0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002ea4:	4698      	mov	r8, r3
 8002ea6:	898b      	ldrh	r3, [r1, #12]
 8002ea8:	061b      	lsls	r3, r3, #24
 8002eaa:	b09d      	sub	sp, #116	@ 0x74
 8002eac:	4607      	mov	r7, r0
 8002eae:	460d      	mov	r5, r1
 8002eb0:	4614      	mov	r4, r2
 8002eb2:	d510      	bpl.n	8002ed6 <_svfiprintf_r+0x36>
 8002eb4:	690b      	ldr	r3, [r1, #16]
 8002eb6:	b973      	cbnz	r3, 8002ed6 <_svfiprintf_r+0x36>
 8002eb8:	2140      	movs	r1, #64	@ 0x40
 8002eba:	f7ff ff09 	bl	8002cd0 <_malloc_r>
 8002ebe:	6028      	str	r0, [r5, #0]
 8002ec0:	6128      	str	r0, [r5, #16]
 8002ec2:	b930      	cbnz	r0, 8002ed2 <_svfiprintf_r+0x32>
 8002ec4:	230c      	movs	r3, #12
 8002ec6:	603b      	str	r3, [r7, #0]
 8002ec8:	f04f 30ff 	mov.w	r0, #4294967295
 8002ecc:	b01d      	add	sp, #116	@ 0x74
 8002ece:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002ed2:	2340      	movs	r3, #64	@ 0x40
 8002ed4:	616b      	str	r3, [r5, #20]
 8002ed6:	2300      	movs	r3, #0
 8002ed8:	9309      	str	r3, [sp, #36]	@ 0x24
 8002eda:	2320      	movs	r3, #32
 8002edc:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8002ee0:	f8cd 800c 	str.w	r8, [sp, #12]
 8002ee4:	2330      	movs	r3, #48	@ 0x30
 8002ee6:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8003084 <_svfiprintf_r+0x1e4>
 8002eea:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8002eee:	f04f 0901 	mov.w	r9, #1
 8002ef2:	4623      	mov	r3, r4
 8002ef4:	469a      	mov	sl, r3
 8002ef6:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002efa:	b10a      	cbz	r2, 8002f00 <_svfiprintf_r+0x60>
 8002efc:	2a25      	cmp	r2, #37	@ 0x25
 8002efe:	d1f9      	bne.n	8002ef4 <_svfiprintf_r+0x54>
 8002f00:	ebba 0b04 	subs.w	fp, sl, r4
 8002f04:	d00b      	beq.n	8002f1e <_svfiprintf_r+0x7e>
 8002f06:	465b      	mov	r3, fp
 8002f08:	4622      	mov	r2, r4
 8002f0a:	4629      	mov	r1, r5
 8002f0c:	4638      	mov	r0, r7
 8002f0e:	f7ff ff6b 	bl	8002de8 <__ssputs_r>
 8002f12:	3001      	adds	r0, #1
 8002f14:	f000 80a7 	beq.w	8003066 <_svfiprintf_r+0x1c6>
 8002f18:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8002f1a:	445a      	add	r2, fp
 8002f1c:	9209      	str	r2, [sp, #36]	@ 0x24
 8002f1e:	f89a 3000 	ldrb.w	r3, [sl]
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	f000 809f 	beq.w	8003066 <_svfiprintf_r+0x1c6>
 8002f28:	2300      	movs	r3, #0
 8002f2a:	f04f 32ff 	mov.w	r2, #4294967295
 8002f2e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002f32:	f10a 0a01 	add.w	sl, sl, #1
 8002f36:	9304      	str	r3, [sp, #16]
 8002f38:	9307      	str	r3, [sp, #28]
 8002f3a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8002f3e:	931a      	str	r3, [sp, #104]	@ 0x68
 8002f40:	4654      	mov	r4, sl
 8002f42:	2205      	movs	r2, #5
 8002f44:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002f48:	484e      	ldr	r0, [pc, #312]	@ (8003084 <_svfiprintf_r+0x1e4>)
 8002f4a:	f7fd f941 	bl	80001d0 <memchr>
 8002f4e:	9a04      	ldr	r2, [sp, #16]
 8002f50:	b9d8      	cbnz	r0, 8002f8a <_svfiprintf_r+0xea>
 8002f52:	06d0      	lsls	r0, r2, #27
 8002f54:	bf44      	itt	mi
 8002f56:	2320      	movmi	r3, #32
 8002f58:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8002f5c:	0711      	lsls	r1, r2, #28
 8002f5e:	bf44      	itt	mi
 8002f60:	232b      	movmi	r3, #43	@ 0x2b
 8002f62:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8002f66:	f89a 3000 	ldrb.w	r3, [sl]
 8002f6a:	2b2a      	cmp	r3, #42	@ 0x2a
 8002f6c:	d015      	beq.n	8002f9a <_svfiprintf_r+0xfa>
 8002f6e:	9a07      	ldr	r2, [sp, #28]
 8002f70:	4654      	mov	r4, sl
 8002f72:	2000      	movs	r0, #0
 8002f74:	f04f 0c0a 	mov.w	ip, #10
 8002f78:	4621      	mov	r1, r4
 8002f7a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002f7e:	3b30      	subs	r3, #48	@ 0x30
 8002f80:	2b09      	cmp	r3, #9
 8002f82:	d94b      	bls.n	800301c <_svfiprintf_r+0x17c>
 8002f84:	b1b0      	cbz	r0, 8002fb4 <_svfiprintf_r+0x114>
 8002f86:	9207      	str	r2, [sp, #28]
 8002f88:	e014      	b.n	8002fb4 <_svfiprintf_r+0x114>
 8002f8a:	eba0 0308 	sub.w	r3, r0, r8
 8002f8e:	fa09 f303 	lsl.w	r3, r9, r3
 8002f92:	4313      	orrs	r3, r2
 8002f94:	9304      	str	r3, [sp, #16]
 8002f96:	46a2      	mov	sl, r4
 8002f98:	e7d2      	b.n	8002f40 <_svfiprintf_r+0xa0>
 8002f9a:	9b03      	ldr	r3, [sp, #12]
 8002f9c:	1d19      	adds	r1, r3, #4
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	9103      	str	r1, [sp, #12]
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	bfbb      	ittet	lt
 8002fa6:	425b      	neglt	r3, r3
 8002fa8:	f042 0202 	orrlt.w	r2, r2, #2
 8002fac:	9307      	strge	r3, [sp, #28]
 8002fae:	9307      	strlt	r3, [sp, #28]
 8002fb0:	bfb8      	it	lt
 8002fb2:	9204      	strlt	r2, [sp, #16]
 8002fb4:	7823      	ldrb	r3, [r4, #0]
 8002fb6:	2b2e      	cmp	r3, #46	@ 0x2e
 8002fb8:	d10a      	bne.n	8002fd0 <_svfiprintf_r+0x130>
 8002fba:	7863      	ldrb	r3, [r4, #1]
 8002fbc:	2b2a      	cmp	r3, #42	@ 0x2a
 8002fbe:	d132      	bne.n	8003026 <_svfiprintf_r+0x186>
 8002fc0:	9b03      	ldr	r3, [sp, #12]
 8002fc2:	1d1a      	adds	r2, r3, #4
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	9203      	str	r2, [sp, #12]
 8002fc8:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8002fcc:	3402      	adds	r4, #2
 8002fce:	9305      	str	r3, [sp, #20]
 8002fd0:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8003094 <_svfiprintf_r+0x1f4>
 8002fd4:	7821      	ldrb	r1, [r4, #0]
 8002fd6:	2203      	movs	r2, #3
 8002fd8:	4650      	mov	r0, sl
 8002fda:	f7fd f8f9 	bl	80001d0 <memchr>
 8002fde:	b138      	cbz	r0, 8002ff0 <_svfiprintf_r+0x150>
 8002fe0:	9b04      	ldr	r3, [sp, #16]
 8002fe2:	eba0 000a 	sub.w	r0, r0, sl
 8002fe6:	2240      	movs	r2, #64	@ 0x40
 8002fe8:	4082      	lsls	r2, r0
 8002fea:	4313      	orrs	r3, r2
 8002fec:	3401      	adds	r4, #1
 8002fee:	9304      	str	r3, [sp, #16]
 8002ff0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002ff4:	4824      	ldr	r0, [pc, #144]	@ (8003088 <_svfiprintf_r+0x1e8>)
 8002ff6:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8002ffa:	2206      	movs	r2, #6
 8002ffc:	f7fd f8e8 	bl	80001d0 <memchr>
 8003000:	2800      	cmp	r0, #0
 8003002:	d036      	beq.n	8003072 <_svfiprintf_r+0x1d2>
 8003004:	4b21      	ldr	r3, [pc, #132]	@ (800308c <_svfiprintf_r+0x1ec>)
 8003006:	bb1b      	cbnz	r3, 8003050 <_svfiprintf_r+0x1b0>
 8003008:	9b03      	ldr	r3, [sp, #12]
 800300a:	3307      	adds	r3, #7
 800300c:	f023 0307 	bic.w	r3, r3, #7
 8003010:	3308      	adds	r3, #8
 8003012:	9303      	str	r3, [sp, #12]
 8003014:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003016:	4433      	add	r3, r6
 8003018:	9309      	str	r3, [sp, #36]	@ 0x24
 800301a:	e76a      	b.n	8002ef2 <_svfiprintf_r+0x52>
 800301c:	fb0c 3202 	mla	r2, ip, r2, r3
 8003020:	460c      	mov	r4, r1
 8003022:	2001      	movs	r0, #1
 8003024:	e7a8      	b.n	8002f78 <_svfiprintf_r+0xd8>
 8003026:	2300      	movs	r3, #0
 8003028:	3401      	adds	r4, #1
 800302a:	9305      	str	r3, [sp, #20]
 800302c:	4619      	mov	r1, r3
 800302e:	f04f 0c0a 	mov.w	ip, #10
 8003032:	4620      	mov	r0, r4
 8003034:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003038:	3a30      	subs	r2, #48	@ 0x30
 800303a:	2a09      	cmp	r2, #9
 800303c:	d903      	bls.n	8003046 <_svfiprintf_r+0x1a6>
 800303e:	2b00      	cmp	r3, #0
 8003040:	d0c6      	beq.n	8002fd0 <_svfiprintf_r+0x130>
 8003042:	9105      	str	r1, [sp, #20]
 8003044:	e7c4      	b.n	8002fd0 <_svfiprintf_r+0x130>
 8003046:	fb0c 2101 	mla	r1, ip, r1, r2
 800304a:	4604      	mov	r4, r0
 800304c:	2301      	movs	r3, #1
 800304e:	e7f0      	b.n	8003032 <_svfiprintf_r+0x192>
 8003050:	ab03      	add	r3, sp, #12
 8003052:	9300      	str	r3, [sp, #0]
 8003054:	462a      	mov	r2, r5
 8003056:	4b0e      	ldr	r3, [pc, #56]	@ (8003090 <_svfiprintf_r+0x1f0>)
 8003058:	a904      	add	r1, sp, #16
 800305a:	4638      	mov	r0, r7
 800305c:	f3af 8000 	nop.w
 8003060:	1c42      	adds	r2, r0, #1
 8003062:	4606      	mov	r6, r0
 8003064:	d1d6      	bne.n	8003014 <_svfiprintf_r+0x174>
 8003066:	89ab      	ldrh	r3, [r5, #12]
 8003068:	065b      	lsls	r3, r3, #25
 800306a:	f53f af2d 	bmi.w	8002ec8 <_svfiprintf_r+0x28>
 800306e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8003070:	e72c      	b.n	8002ecc <_svfiprintf_r+0x2c>
 8003072:	ab03      	add	r3, sp, #12
 8003074:	9300      	str	r3, [sp, #0]
 8003076:	462a      	mov	r2, r5
 8003078:	4b05      	ldr	r3, [pc, #20]	@ (8003090 <_svfiprintf_r+0x1f0>)
 800307a:	a904      	add	r1, sp, #16
 800307c:	4638      	mov	r0, r7
 800307e:	f000 f879 	bl	8003174 <_printf_i>
 8003082:	e7ed      	b.n	8003060 <_svfiprintf_r+0x1c0>
 8003084:	080036a0 	.word	0x080036a0
 8003088:	080036aa 	.word	0x080036aa
 800308c:	00000000 	.word	0x00000000
 8003090:	08002de9 	.word	0x08002de9
 8003094:	080036a6 	.word	0x080036a6

08003098 <_printf_common>:
 8003098:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800309c:	4616      	mov	r6, r2
 800309e:	4698      	mov	r8, r3
 80030a0:	688a      	ldr	r2, [r1, #8]
 80030a2:	690b      	ldr	r3, [r1, #16]
 80030a4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80030a8:	4293      	cmp	r3, r2
 80030aa:	bfb8      	it	lt
 80030ac:	4613      	movlt	r3, r2
 80030ae:	6033      	str	r3, [r6, #0]
 80030b0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80030b4:	4607      	mov	r7, r0
 80030b6:	460c      	mov	r4, r1
 80030b8:	b10a      	cbz	r2, 80030be <_printf_common+0x26>
 80030ba:	3301      	adds	r3, #1
 80030bc:	6033      	str	r3, [r6, #0]
 80030be:	6823      	ldr	r3, [r4, #0]
 80030c0:	0699      	lsls	r1, r3, #26
 80030c2:	bf42      	ittt	mi
 80030c4:	6833      	ldrmi	r3, [r6, #0]
 80030c6:	3302      	addmi	r3, #2
 80030c8:	6033      	strmi	r3, [r6, #0]
 80030ca:	6825      	ldr	r5, [r4, #0]
 80030cc:	f015 0506 	ands.w	r5, r5, #6
 80030d0:	d106      	bne.n	80030e0 <_printf_common+0x48>
 80030d2:	f104 0a19 	add.w	sl, r4, #25
 80030d6:	68e3      	ldr	r3, [r4, #12]
 80030d8:	6832      	ldr	r2, [r6, #0]
 80030da:	1a9b      	subs	r3, r3, r2
 80030dc:	42ab      	cmp	r3, r5
 80030de:	dc26      	bgt.n	800312e <_printf_common+0x96>
 80030e0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80030e4:	6822      	ldr	r2, [r4, #0]
 80030e6:	3b00      	subs	r3, #0
 80030e8:	bf18      	it	ne
 80030ea:	2301      	movne	r3, #1
 80030ec:	0692      	lsls	r2, r2, #26
 80030ee:	d42b      	bmi.n	8003148 <_printf_common+0xb0>
 80030f0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80030f4:	4641      	mov	r1, r8
 80030f6:	4638      	mov	r0, r7
 80030f8:	47c8      	blx	r9
 80030fa:	3001      	adds	r0, #1
 80030fc:	d01e      	beq.n	800313c <_printf_common+0xa4>
 80030fe:	6823      	ldr	r3, [r4, #0]
 8003100:	6922      	ldr	r2, [r4, #16]
 8003102:	f003 0306 	and.w	r3, r3, #6
 8003106:	2b04      	cmp	r3, #4
 8003108:	bf02      	ittt	eq
 800310a:	68e5      	ldreq	r5, [r4, #12]
 800310c:	6833      	ldreq	r3, [r6, #0]
 800310e:	1aed      	subeq	r5, r5, r3
 8003110:	68a3      	ldr	r3, [r4, #8]
 8003112:	bf0c      	ite	eq
 8003114:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003118:	2500      	movne	r5, #0
 800311a:	4293      	cmp	r3, r2
 800311c:	bfc4      	itt	gt
 800311e:	1a9b      	subgt	r3, r3, r2
 8003120:	18ed      	addgt	r5, r5, r3
 8003122:	2600      	movs	r6, #0
 8003124:	341a      	adds	r4, #26
 8003126:	42b5      	cmp	r5, r6
 8003128:	d11a      	bne.n	8003160 <_printf_common+0xc8>
 800312a:	2000      	movs	r0, #0
 800312c:	e008      	b.n	8003140 <_printf_common+0xa8>
 800312e:	2301      	movs	r3, #1
 8003130:	4652      	mov	r2, sl
 8003132:	4641      	mov	r1, r8
 8003134:	4638      	mov	r0, r7
 8003136:	47c8      	blx	r9
 8003138:	3001      	adds	r0, #1
 800313a:	d103      	bne.n	8003144 <_printf_common+0xac>
 800313c:	f04f 30ff 	mov.w	r0, #4294967295
 8003140:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003144:	3501      	adds	r5, #1
 8003146:	e7c6      	b.n	80030d6 <_printf_common+0x3e>
 8003148:	18e1      	adds	r1, r4, r3
 800314a:	1c5a      	adds	r2, r3, #1
 800314c:	2030      	movs	r0, #48	@ 0x30
 800314e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8003152:	4422      	add	r2, r4
 8003154:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8003158:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800315c:	3302      	adds	r3, #2
 800315e:	e7c7      	b.n	80030f0 <_printf_common+0x58>
 8003160:	2301      	movs	r3, #1
 8003162:	4622      	mov	r2, r4
 8003164:	4641      	mov	r1, r8
 8003166:	4638      	mov	r0, r7
 8003168:	47c8      	blx	r9
 800316a:	3001      	adds	r0, #1
 800316c:	d0e6      	beq.n	800313c <_printf_common+0xa4>
 800316e:	3601      	adds	r6, #1
 8003170:	e7d9      	b.n	8003126 <_printf_common+0x8e>
	...

08003174 <_printf_i>:
 8003174:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003178:	7e0f      	ldrb	r7, [r1, #24]
 800317a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800317c:	2f78      	cmp	r7, #120	@ 0x78
 800317e:	4691      	mov	r9, r2
 8003180:	4680      	mov	r8, r0
 8003182:	460c      	mov	r4, r1
 8003184:	469a      	mov	sl, r3
 8003186:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800318a:	d807      	bhi.n	800319c <_printf_i+0x28>
 800318c:	2f62      	cmp	r7, #98	@ 0x62
 800318e:	d80a      	bhi.n	80031a6 <_printf_i+0x32>
 8003190:	2f00      	cmp	r7, #0
 8003192:	f000 80d1 	beq.w	8003338 <_printf_i+0x1c4>
 8003196:	2f58      	cmp	r7, #88	@ 0x58
 8003198:	f000 80b8 	beq.w	800330c <_printf_i+0x198>
 800319c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80031a0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80031a4:	e03a      	b.n	800321c <_printf_i+0xa8>
 80031a6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80031aa:	2b15      	cmp	r3, #21
 80031ac:	d8f6      	bhi.n	800319c <_printf_i+0x28>
 80031ae:	a101      	add	r1, pc, #4	@ (adr r1, 80031b4 <_printf_i+0x40>)
 80031b0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80031b4:	0800320d 	.word	0x0800320d
 80031b8:	08003221 	.word	0x08003221
 80031bc:	0800319d 	.word	0x0800319d
 80031c0:	0800319d 	.word	0x0800319d
 80031c4:	0800319d 	.word	0x0800319d
 80031c8:	0800319d 	.word	0x0800319d
 80031cc:	08003221 	.word	0x08003221
 80031d0:	0800319d 	.word	0x0800319d
 80031d4:	0800319d 	.word	0x0800319d
 80031d8:	0800319d 	.word	0x0800319d
 80031dc:	0800319d 	.word	0x0800319d
 80031e0:	0800331f 	.word	0x0800331f
 80031e4:	0800324b 	.word	0x0800324b
 80031e8:	080032d9 	.word	0x080032d9
 80031ec:	0800319d 	.word	0x0800319d
 80031f0:	0800319d 	.word	0x0800319d
 80031f4:	08003341 	.word	0x08003341
 80031f8:	0800319d 	.word	0x0800319d
 80031fc:	0800324b 	.word	0x0800324b
 8003200:	0800319d 	.word	0x0800319d
 8003204:	0800319d 	.word	0x0800319d
 8003208:	080032e1 	.word	0x080032e1
 800320c:	6833      	ldr	r3, [r6, #0]
 800320e:	1d1a      	adds	r2, r3, #4
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	6032      	str	r2, [r6, #0]
 8003214:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003218:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800321c:	2301      	movs	r3, #1
 800321e:	e09c      	b.n	800335a <_printf_i+0x1e6>
 8003220:	6833      	ldr	r3, [r6, #0]
 8003222:	6820      	ldr	r0, [r4, #0]
 8003224:	1d19      	adds	r1, r3, #4
 8003226:	6031      	str	r1, [r6, #0]
 8003228:	0606      	lsls	r6, r0, #24
 800322a:	d501      	bpl.n	8003230 <_printf_i+0xbc>
 800322c:	681d      	ldr	r5, [r3, #0]
 800322e:	e003      	b.n	8003238 <_printf_i+0xc4>
 8003230:	0645      	lsls	r5, r0, #25
 8003232:	d5fb      	bpl.n	800322c <_printf_i+0xb8>
 8003234:	f9b3 5000 	ldrsh.w	r5, [r3]
 8003238:	2d00      	cmp	r5, #0
 800323a:	da03      	bge.n	8003244 <_printf_i+0xd0>
 800323c:	232d      	movs	r3, #45	@ 0x2d
 800323e:	426d      	negs	r5, r5
 8003240:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003244:	4858      	ldr	r0, [pc, #352]	@ (80033a8 <_printf_i+0x234>)
 8003246:	230a      	movs	r3, #10
 8003248:	e011      	b.n	800326e <_printf_i+0xfa>
 800324a:	6821      	ldr	r1, [r4, #0]
 800324c:	6833      	ldr	r3, [r6, #0]
 800324e:	0608      	lsls	r0, r1, #24
 8003250:	f853 5b04 	ldr.w	r5, [r3], #4
 8003254:	d402      	bmi.n	800325c <_printf_i+0xe8>
 8003256:	0649      	lsls	r1, r1, #25
 8003258:	bf48      	it	mi
 800325a:	b2ad      	uxthmi	r5, r5
 800325c:	2f6f      	cmp	r7, #111	@ 0x6f
 800325e:	4852      	ldr	r0, [pc, #328]	@ (80033a8 <_printf_i+0x234>)
 8003260:	6033      	str	r3, [r6, #0]
 8003262:	bf14      	ite	ne
 8003264:	230a      	movne	r3, #10
 8003266:	2308      	moveq	r3, #8
 8003268:	2100      	movs	r1, #0
 800326a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800326e:	6866      	ldr	r6, [r4, #4]
 8003270:	60a6      	str	r6, [r4, #8]
 8003272:	2e00      	cmp	r6, #0
 8003274:	db05      	blt.n	8003282 <_printf_i+0x10e>
 8003276:	6821      	ldr	r1, [r4, #0]
 8003278:	432e      	orrs	r6, r5
 800327a:	f021 0104 	bic.w	r1, r1, #4
 800327e:	6021      	str	r1, [r4, #0]
 8003280:	d04b      	beq.n	800331a <_printf_i+0x1a6>
 8003282:	4616      	mov	r6, r2
 8003284:	fbb5 f1f3 	udiv	r1, r5, r3
 8003288:	fb03 5711 	mls	r7, r3, r1, r5
 800328c:	5dc7      	ldrb	r7, [r0, r7]
 800328e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003292:	462f      	mov	r7, r5
 8003294:	42bb      	cmp	r3, r7
 8003296:	460d      	mov	r5, r1
 8003298:	d9f4      	bls.n	8003284 <_printf_i+0x110>
 800329a:	2b08      	cmp	r3, #8
 800329c:	d10b      	bne.n	80032b6 <_printf_i+0x142>
 800329e:	6823      	ldr	r3, [r4, #0]
 80032a0:	07df      	lsls	r7, r3, #31
 80032a2:	d508      	bpl.n	80032b6 <_printf_i+0x142>
 80032a4:	6923      	ldr	r3, [r4, #16]
 80032a6:	6861      	ldr	r1, [r4, #4]
 80032a8:	4299      	cmp	r1, r3
 80032aa:	bfde      	ittt	le
 80032ac:	2330      	movle	r3, #48	@ 0x30
 80032ae:	f806 3c01 	strble.w	r3, [r6, #-1]
 80032b2:	f106 36ff 	addle.w	r6, r6, #4294967295
 80032b6:	1b92      	subs	r2, r2, r6
 80032b8:	6122      	str	r2, [r4, #16]
 80032ba:	f8cd a000 	str.w	sl, [sp]
 80032be:	464b      	mov	r3, r9
 80032c0:	aa03      	add	r2, sp, #12
 80032c2:	4621      	mov	r1, r4
 80032c4:	4640      	mov	r0, r8
 80032c6:	f7ff fee7 	bl	8003098 <_printf_common>
 80032ca:	3001      	adds	r0, #1
 80032cc:	d14a      	bne.n	8003364 <_printf_i+0x1f0>
 80032ce:	f04f 30ff 	mov.w	r0, #4294967295
 80032d2:	b004      	add	sp, #16
 80032d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80032d8:	6823      	ldr	r3, [r4, #0]
 80032da:	f043 0320 	orr.w	r3, r3, #32
 80032de:	6023      	str	r3, [r4, #0]
 80032e0:	4832      	ldr	r0, [pc, #200]	@ (80033ac <_printf_i+0x238>)
 80032e2:	2778      	movs	r7, #120	@ 0x78
 80032e4:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80032e8:	6823      	ldr	r3, [r4, #0]
 80032ea:	6831      	ldr	r1, [r6, #0]
 80032ec:	061f      	lsls	r7, r3, #24
 80032ee:	f851 5b04 	ldr.w	r5, [r1], #4
 80032f2:	d402      	bmi.n	80032fa <_printf_i+0x186>
 80032f4:	065f      	lsls	r7, r3, #25
 80032f6:	bf48      	it	mi
 80032f8:	b2ad      	uxthmi	r5, r5
 80032fa:	6031      	str	r1, [r6, #0]
 80032fc:	07d9      	lsls	r1, r3, #31
 80032fe:	bf44      	itt	mi
 8003300:	f043 0320 	orrmi.w	r3, r3, #32
 8003304:	6023      	strmi	r3, [r4, #0]
 8003306:	b11d      	cbz	r5, 8003310 <_printf_i+0x19c>
 8003308:	2310      	movs	r3, #16
 800330a:	e7ad      	b.n	8003268 <_printf_i+0xf4>
 800330c:	4826      	ldr	r0, [pc, #152]	@ (80033a8 <_printf_i+0x234>)
 800330e:	e7e9      	b.n	80032e4 <_printf_i+0x170>
 8003310:	6823      	ldr	r3, [r4, #0]
 8003312:	f023 0320 	bic.w	r3, r3, #32
 8003316:	6023      	str	r3, [r4, #0]
 8003318:	e7f6      	b.n	8003308 <_printf_i+0x194>
 800331a:	4616      	mov	r6, r2
 800331c:	e7bd      	b.n	800329a <_printf_i+0x126>
 800331e:	6833      	ldr	r3, [r6, #0]
 8003320:	6825      	ldr	r5, [r4, #0]
 8003322:	6961      	ldr	r1, [r4, #20]
 8003324:	1d18      	adds	r0, r3, #4
 8003326:	6030      	str	r0, [r6, #0]
 8003328:	062e      	lsls	r6, r5, #24
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	d501      	bpl.n	8003332 <_printf_i+0x1be>
 800332e:	6019      	str	r1, [r3, #0]
 8003330:	e002      	b.n	8003338 <_printf_i+0x1c4>
 8003332:	0668      	lsls	r0, r5, #25
 8003334:	d5fb      	bpl.n	800332e <_printf_i+0x1ba>
 8003336:	8019      	strh	r1, [r3, #0]
 8003338:	2300      	movs	r3, #0
 800333a:	6123      	str	r3, [r4, #16]
 800333c:	4616      	mov	r6, r2
 800333e:	e7bc      	b.n	80032ba <_printf_i+0x146>
 8003340:	6833      	ldr	r3, [r6, #0]
 8003342:	1d1a      	adds	r2, r3, #4
 8003344:	6032      	str	r2, [r6, #0]
 8003346:	681e      	ldr	r6, [r3, #0]
 8003348:	6862      	ldr	r2, [r4, #4]
 800334a:	2100      	movs	r1, #0
 800334c:	4630      	mov	r0, r6
 800334e:	f7fc ff3f 	bl	80001d0 <memchr>
 8003352:	b108      	cbz	r0, 8003358 <_printf_i+0x1e4>
 8003354:	1b80      	subs	r0, r0, r6
 8003356:	6060      	str	r0, [r4, #4]
 8003358:	6863      	ldr	r3, [r4, #4]
 800335a:	6123      	str	r3, [r4, #16]
 800335c:	2300      	movs	r3, #0
 800335e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003362:	e7aa      	b.n	80032ba <_printf_i+0x146>
 8003364:	6923      	ldr	r3, [r4, #16]
 8003366:	4632      	mov	r2, r6
 8003368:	4649      	mov	r1, r9
 800336a:	4640      	mov	r0, r8
 800336c:	47d0      	blx	sl
 800336e:	3001      	adds	r0, #1
 8003370:	d0ad      	beq.n	80032ce <_printf_i+0x15a>
 8003372:	6823      	ldr	r3, [r4, #0]
 8003374:	079b      	lsls	r3, r3, #30
 8003376:	d413      	bmi.n	80033a0 <_printf_i+0x22c>
 8003378:	68e0      	ldr	r0, [r4, #12]
 800337a:	9b03      	ldr	r3, [sp, #12]
 800337c:	4298      	cmp	r0, r3
 800337e:	bfb8      	it	lt
 8003380:	4618      	movlt	r0, r3
 8003382:	e7a6      	b.n	80032d2 <_printf_i+0x15e>
 8003384:	2301      	movs	r3, #1
 8003386:	4632      	mov	r2, r6
 8003388:	4649      	mov	r1, r9
 800338a:	4640      	mov	r0, r8
 800338c:	47d0      	blx	sl
 800338e:	3001      	adds	r0, #1
 8003390:	d09d      	beq.n	80032ce <_printf_i+0x15a>
 8003392:	3501      	adds	r5, #1
 8003394:	68e3      	ldr	r3, [r4, #12]
 8003396:	9903      	ldr	r1, [sp, #12]
 8003398:	1a5b      	subs	r3, r3, r1
 800339a:	42ab      	cmp	r3, r5
 800339c:	dcf2      	bgt.n	8003384 <_printf_i+0x210>
 800339e:	e7eb      	b.n	8003378 <_printf_i+0x204>
 80033a0:	2500      	movs	r5, #0
 80033a2:	f104 0619 	add.w	r6, r4, #25
 80033a6:	e7f5      	b.n	8003394 <_printf_i+0x220>
 80033a8:	080036b1 	.word	0x080036b1
 80033ac:	080036c2 	.word	0x080036c2

080033b0 <memmove>:
 80033b0:	4288      	cmp	r0, r1
 80033b2:	b510      	push	{r4, lr}
 80033b4:	eb01 0402 	add.w	r4, r1, r2
 80033b8:	d902      	bls.n	80033c0 <memmove+0x10>
 80033ba:	4284      	cmp	r4, r0
 80033bc:	4623      	mov	r3, r4
 80033be:	d807      	bhi.n	80033d0 <memmove+0x20>
 80033c0:	1e43      	subs	r3, r0, #1
 80033c2:	42a1      	cmp	r1, r4
 80033c4:	d008      	beq.n	80033d8 <memmove+0x28>
 80033c6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80033ca:	f803 2f01 	strb.w	r2, [r3, #1]!
 80033ce:	e7f8      	b.n	80033c2 <memmove+0x12>
 80033d0:	4402      	add	r2, r0
 80033d2:	4601      	mov	r1, r0
 80033d4:	428a      	cmp	r2, r1
 80033d6:	d100      	bne.n	80033da <memmove+0x2a>
 80033d8:	bd10      	pop	{r4, pc}
 80033da:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80033de:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80033e2:	e7f7      	b.n	80033d4 <memmove+0x24>

080033e4 <_sbrk_r>:
 80033e4:	b538      	push	{r3, r4, r5, lr}
 80033e6:	4d06      	ldr	r5, [pc, #24]	@ (8003400 <_sbrk_r+0x1c>)
 80033e8:	2300      	movs	r3, #0
 80033ea:	4604      	mov	r4, r0
 80033ec:	4608      	mov	r0, r1
 80033ee:	602b      	str	r3, [r5, #0]
 80033f0:	f7fd fd06 	bl	8000e00 <_sbrk>
 80033f4:	1c43      	adds	r3, r0, #1
 80033f6:	d102      	bne.n	80033fe <_sbrk_r+0x1a>
 80033f8:	682b      	ldr	r3, [r5, #0]
 80033fa:	b103      	cbz	r3, 80033fe <_sbrk_r+0x1a>
 80033fc:	6023      	str	r3, [r4, #0]
 80033fe:	bd38      	pop	{r3, r4, r5, pc}
 8003400:	20000244 	.word	0x20000244

08003404 <_realloc_r>:
 8003404:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003408:	4607      	mov	r7, r0
 800340a:	4614      	mov	r4, r2
 800340c:	460d      	mov	r5, r1
 800340e:	b921      	cbnz	r1, 800341a <_realloc_r+0x16>
 8003410:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003414:	4611      	mov	r1, r2
 8003416:	f7ff bc5b 	b.w	8002cd0 <_malloc_r>
 800341a:	b92a      	cbnz	r2, 8003428 <_realloc_r+0x24>
 800341c:	f7ff fbec 	bl	8002bf8 <_free_r>
 8003420:	4625      	mov	r5, r4
 8003422:	4628      	mov	r0, r5
 8003424:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003428:	f000 f81a 	bl	8003460 <_malloc_usable_size_r>
 800342c:	4284      	cmp	r4, r0
 800342e:	4606      	mov	r6, r0
 8003430:	d802      	bhi.n	8003438 <_realloc_r+0x34>
 8003432:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8003436:	d8f4      	bhi.n	8003422 <_realloc_r+0x1e>
 8003438:	4621      	mov	r1, r4
 800343a:	4638      	mov	r0, r7
 800343c:	f7ff fc48 	bl	8002cd0 <_malloc_r>
 8003440:	4680      	mov	r8, r0
 8003442:	b908      	cbnz	r0, 8003448 <_realloc_r+0x44>
 8003444:	4645      	mov	r5, r8
 8003446:	e7ec      	b.n	8003422 <_realloc_r+0x1e>
 8003448:	42b4      	cmp	r4, r6
 800344a:	4622      	mov	r2, r4
 800344c:	4629      	mov	r1, r5
 800344e:	bf28      	it	cs
 8003450:	4632      	movcs	r2, r6
 8003452:	f7ff fbc3 	bl	8002bdc <memcpy>
 8003456:	4629      	mov	r1, r5
 8003458:	4638      	mov	r0, r7
 800345a:	f7ff fbcd 	bl	8002bf8 <_free_r>
 800345e:	e7f1      	b.n	8003444 <_realloc_r+0x40>

08003460 <_malloc_usable_size_r>:
 8003460:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003464:	1f18      	subs	r0, r3, #4
 8003466:	2b00      	cmp	r3, #0
 8003468:	bfbc      	itt	lt
 800346a:	580b      	ldrlt	r3, [r1, r0]
 800346c:	18c0      	addlt	r0, r0, r3
 800346e:	4770      	bx	lr

08003470 <_init>:
 8003470:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003472:	bf00      	nop
 8003474:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003476:	bc08      	pop	{r3}
 8003478:	469e      	mov	lr, r3
 800347a:	4770      	bx	lr

0800347c <_fini>:
 800347c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800347e:	bf00      	nop
 8003480:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003482:	bc08      	pop	{r3}
 8003484:	469e      	mov	lr, r3
 8003486:	4770      	bx	lr
