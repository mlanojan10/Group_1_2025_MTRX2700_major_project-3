
MajorProjBase.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006654  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  080067dc  080067dc  000077dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006824  08006824  0000804c  2**0
                  CONTENTS
  4 .ARM          00000000  08006824  08006824  0000804c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006824  08006824  0000804c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006824  08006824  00007824  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006828  08006828  00007828  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000004c  20000000  0800682c  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000804c  2**0
                  CONTENTS
 10 .bss          000004b0  2000004c  2000004c  0000804c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200004fc  200004fc  0000804c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000804c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001312b  00000000  00000000  0000807c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000028b7  00000000  00000000  0001b1a7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000010e8  00000000  00000000  0001da60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000d33  00000000  00000000  0001eb48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001f34f  00000000  00000000  0001f87b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00015b9d  00000000  00000000  0003ebca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c048d  00000000  00000000  00054767  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00114bf4  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000047d0  00000000  00000000  00114c38  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000066  00000000  00000000  00119408  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000004c 	.word	0x2000004c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080067c4 	.word	0x080067c4

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000050 	.word	0x20000050
 80001c4:	080067c4 	.word	0x080067c4

080001c8 <get_filtered_distance>:

#define DISTANCE_FILTER_SIZE 5
uint32_t distance_buffer[DISTANCE_FILTER_SIZE] = {0};
uint8_t distance_index = 0;

uint32_t get_filtered_distance(void) {
 80001c8:	b480      	push	{r7}
 80001ca:	b083      	sub	sp, #12
 80001cc:	af00      	add	r7, sp, #0
    uint32_t sum = 0;
 80001ce:	2300      	movs	r3, #0
 80001d0:	607b      	str	r3, [r7, #4]
    for (uint8_t i = 0; i < DISTANCE_FILTER_SIZE; i++) {
 80001d2:	2300      	movs	r3, #0
 80001d4:	70fb      	strb	r3, [r7, #3]
 80001d6:	e009      	b.n	80001ec <get_filtered_distance+0x24>
        sum += distance_buffer[i];
 80001d8:	78fb      	ldrb	r3, [r7, #3]
 80001da:	4a0b      	ldr	r2, [pc, #44]	@ (8000208 <get_filtered_distance+0x40>)
 80001dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80001e0:	687a      	ldr	r2, [r7, #4]
 80001e2:	4413      	add	r3, r2
 80001e4:	607b      	str	r3, [r7, #4]
    for (uint8_t i = 0; i < DISTANCE_FILTER_SIZE; i++) {
 80001e6:	78fb      	ldrb	r3, [r7, #3]
 80001e8:	3301      	adds	r3, #1
 80001ea:	70fb      	strb	r3, [r7, #3]
 80001ec:	78fb      	ldrb	r3, [r7, #3]
 80001ee:	2b04      	cmp	r3, #4
 80001f0:	d9f2      	bls.n	80001d8 <get_filtered_distance+0x10>
    }
    return sum / DISTANCE_FILTER_SIZE;
 80001f2:	687b      	ldr	r3, [r7, #4]
 80001f4:	4a05      	ldr	r2, [pc, #20]	@ (800020c <get_filtered_distance+0x44>)
 80001f6:	fba2 2303 	umull	r2, r3, r2, r3
 80001fa:	089b      	lsrs	r3, r3, #2
}
 80001fc:	4618      	mov	r0, r3
 80001fe:	370c      	adds	r7, #12
 8000200:	46bd      	mov	sp, r7
 8000202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000206:	4770      	bx	lr
 8000208:	20000068 	.word	0x20000068
 800020c:	cccccccd 	.word	0xcccccccd

08000210 <map>:
volatile uint32_t lidar_distance_mm = 0;

volatile uint32_t joy_x = 0;
volatile uint32_t joy_y = 0;

int map(int val, int in_min, int in_max, int out_min, int out_max) {
 8000210:	b480      	push	{r7}
 8000212:	b085      	sub	sp, #20
 8000214:	af00      	add	r7, sp, #0
 8000216:	60f8      	str	r0, [r7, #12]
 8000218:	60b9      	str	r1, [r7, #8]
 800021a:	607a      	str	r2, [r7, #4]
 800021c:	603b      	str	r3, [r7, #0]
    return (val - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 800021e:	68fa      	ldr	r2, [r7, #12]
 8000220:	68bb      	ldr	r3, [r7, #8]
 8000222:	1ad3      	subs	r3, r2, r3
 8000224:	69b9      	ldr	r1, [r7, #24]
 8000226:	683a      	ldr	r2, [r7, #0]
 8000228:	1a8a      	subs	r2, r1, r2
 800022a:	fb03 f202 	mul.w	r2, r3, r2
 800022e:	6879      	ldr	r1, [r7, #4]
 8000230:	68bb      	ldr	r3, [r7, #8]
 8000232:	1acb      	subs	r3, r1, r3
 8000234:	fb92 f2f3 	sdiv	r2, r2, r3
 8000238:	683b      	ldr	r3, [r7, #0]
 800023a:	4413      	add	r3, r2
}
 800023c:	4618      	mov	r0, r3
 800023e:	3714      	adds	r7, #20
 8000240:	46bd      	mov	sp, r7
 8000242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000246:	4770      	bx	lr

08000248 <enable_clocks>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

// enable the clocks for desired peripherals (GPIOA, C and E)
void enable_clocks() {
 8000248:	b480      	push	{r7}
 800024a:	af00      	add	r7, sp, #0
	RCC->AHBENR |= RCC_AHBENR_GPIOAEN | RCC_AHBENR_GPIOCEN | RCC_AHBENR_GPIOEEN;
 800024c:	4b05      	ldr	r3, [pc, #20]	@ (8000264 <enable_clocks+0x1c>)
 800024e:	695b      	ldr	r3, [r3, #20]
 8000250:	4a04      	ldr	r2, [pc, #16]	@ (8000264 <enable_clocks+0x1c>)
 8000252:	f443 1328 	orr.w	r3, r3, #2752512	@ 0x2a0000
 8000256:	6153      	str	r3, [r2, #20]
}
 8000258:	bf00      	nop
 800025a:	46bd      	mov	sp, r7
 800025c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000260:	4770      	bx	lr
 8000262:	bf00      	nop
 8000264:	40021000 	.word	0x40021000

08000268 <initialise_board>:


// initialise the discovery board I/O (just outputs: inputs are selected by default)
void initialise_board() {
 8000268:	b480      	push	{r7}
 800026a:	b083      	sub	sp, #12
 800026c:	af00      	add	r7, sp, #0
	// get a pointer to the second half word of the MODER register (for outputs pe8-15)
	uint16_t *led_output_registers = ((uint16_t *)&(GPIOE->MODER)) + 1;
 800026e:	4b06      	ldr	r3, [pc, #24]	@ (8000288 <initialise_board+0x20>)
 8000270:	607b      	str	r3, [r7, #4]
	*led_output_registers = 0x5555;
 8000272:	687b      	ldr	r3, [r7, #4]
 8000274:	f245 5255 	movw	r2, #21845	@ 0x5555
 8000278:	801a      	strh	r2, [r3, #0]
}
 800027a:	bf00      	nop
 800027c:	370c      	adds	r7, #12
 800027e:	46bd      	mov	sp, r7
 8000280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000284:	4770      	bx	lr
 8000286:	bf00      	nop
 8000288:	48001002 	.word	0x48001002

0800028c <HAL_TIM_IC_CaptureCallback>:

uint16_t rise_time = 0;
uint16_t last_period = 0;

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800028c:	b580      	push	{r7, lr}
 800028e:	b086      	sub	sp, #24
 8000290:	af00      	add	r7, sp, #0
 8000292:	6078      	str	r0, [r7, #4]
    static uint32_t rising_edge_time = 0;
    static bool last_edge_was_rising = true;
    static uint8_t no_detection_counter = 0;

    if (htim->Instance == TIM1) // Confirm it's TIM1
 8000294:	687b      	ldr	r3, [r7, #4]
 8000296:	681b      	ldr	r3, [r3, #0]
 8000298:	4a4a      	ldr	r2, [pc, #296]	@ (80003c4 <HAL_TIM_IC_CaptureCallback+0x138>)
 800029a:	4293      	cmp	r3, r2
 800029c:	f040 808e 	bne.w	80003bc <HAL_TIM_IC_CaptureCallback+0x130>
    {
        if (last_edge_was_rising)
 80002a0:	4b49      	ldr	r3, [pc, #292]	@ (80003c8 <HAL_TIM_IC_CaptureCallback+0x13c>)
 80002a2:	781b      	ldrb	r3, [r3, #0]
 80002a4:	2b00      	cmp	r3, #0
 80002a6:	d01a      	beq.n	80002de <HAL_TIM_IC_CaptureCallback+0x52>
        {
            // Rising edge just occurred
            rising_edge_time = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 80002a8:	2100      	movs	r1, #0
 80002aa:	6878      	ldr	r0, [r7, #4]
 80002ac:	f005 fbca 	bl	8005a44 <HAL_TIM_ReadCapturedValue>
 80002b0:	4603      	mov	r3, r0
 80002b2:	4a46      	ldr	r2, [pc, #280]	@ (80003cc <HAL_TIM_IC_CaptureCallback+0x140>)
 80002b4:	6013      	str	r3, [r2, #0]

            // Switch to falling edge detection
            __HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_FALLING);
 80002b6:	687b      	ldr	r3, [r7, #4]
 80002b8:	681b      	ldr	r3, [r3, #0]
 80002ba:	6a1a      	ldr	r2, [r3, #32]
 80002bc:	687b      	ldr	r3, [r7, #4]
 80002be:	681b      	ldr	r3, [r3, #0]
 80002c0:	f022 020a 	bic.w	r2, r2, #10
 80002c4:	621a      	str	r2, [r3, #32]
 80002c6:	687b      	ldr	r3, [r7, #4]
 80002c8:	681b      	ldr	r3, [r3, #0]
 80002ca:	6a1a      	ldr	r2, [r3, #32]
 80002cc:	687b      	ldr	r3, [r7, #4]
 80002ce:	681b      	ldr	r3, [r3, #0]
 80002d0:	f042 0202 	orr.w	r2, r2, #2
 80002d4:	621a      	str	r2, [r3, #32]
            last_edge_was_rising = false;
 80002d6:	4b3c      	ldr	r3, [pc, #240]	@ (80003c8 <HAL_TIM_IC_CaptureCallback+0x13c>)
 80002d8:	2200      	movs	r2, #0
 80002da:	701a      	strb	r2, [r3, #0]
            // Switch to rising edge detection
            __HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_RISING);
            last_edge_was_rising = true;
        }
    }
}
 80002dc:	e06e      	b.n	80003bc <HAL_TIM_IC_CaptureCallback+0x130>
            uint32_t falling_edge_time = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 80002de:	2100      	movs	r1, #0
 80002e0:	6878      	ldr	r0, [r7, #4]
 80002e2:	f005 fbaf 	bl	8005a44 <HAL_TIM_ReadCapturedValue>
 80002e6:	60f8      	str	r0, [r7, #12]
            if (falling_edge_time >= rising_edge_time)
 80002e8:	4b38      	ldr	r3, [pc, #224]	@ (80003cc <HAL_TIM_IC_CaptureCallback+0x140>)
 80002ea:	681b      	ldr	r3, [r3, #0]
 80002ec:	68fa      	ldr	r2, [r7, #12]
 80002ee:	429a      	cmp	r2, r3
 80002f0:	d305      	bcc.n	80002fe <HAL_TIM_IC_CaptureCallback+0x72>
                pulse_width = falling_edge_time - rising_edge_time;
 80002f2:	4b36      	ldr	r3, [pc, #216]	@ (80003cc <HAL_TIM_IC_CaptureCallback+0x140>)
 80002f4:	681b      	ldr	r3, [r3, #0]
 80002f6:	68fa      	ldr	r2, [r7, #12]
 80002f8:	1ad3      	subs	r3, r2, r3
 80002fa:	617b      	str	r3, [r7, #20]
 80002fc:	e009      	b.n	8000312 <HAL_TIM_IC_CaptureCallback+0x86>
                pulse_width = (htim->Instance->ARR - rising_edge_time + falling_edge_time + 1);
 80002fe:	687b      	ldr	r3, [r7, #4]
 8000300:	681b      	ldr	r3, [r3, #0]
 8000302:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000304:	4b31      	ldr	r3, [pc, #196]	@ (80003cc <HAL_TIM_IC_CaptureCallback+0x140>)
 8000306:	681b      	ldr	r3, [r3, #0]
 8000308:	1ad2      	subs	r2, r2, r3
 800030a:	68fb      	ldr	r3, [r7, #12]
 800030c:	4413      	add	r3, r2
 800030e:	3301      	adds	r3, #1
 8000310:	617b      	str	r3, [r7, #20]
            lidar_distance_mm = pulse_width / 10;
 8000312:	697b      	ldr	r3, [r7, #20]
 8000314:	4a2e      	ldr	r2, [pc, #184]	@ (80003d0 <HAL_TIM_IC_CaptureCallback+0x144>)
 8000316:	fba2 2303 	umull	r2, r3, r2, r3
 800031a:	08db      	lsrs	r3, r3, #3
 800031c:	4a2d      	ldr	r2, [pc, #180]	@ (80003d4 <HAL_TIM_IC_CaptureCallback+0x148>)
 800031e:	6013      	str	r3, [r2, #0]
            if (pulse_width < 50) {
 8000320:	697b      	ldr	r3, [r7, #20]
 8000322:	2b31      	cmp	r3, #49	@ 0x31
 8000324:	d81c      	bhi.n	8000360 <HAL_TIM_IC_CaptureCallback+0xd4>
                no_detection_counter++;
 8000326:	4b2c      	ldr	r3, [pc, #176]	@ (80003d8 <HAL_TIM_IC_CaptureCallback+0x14c>)
 8000328:	781b      	ldrb	r3, [r3, #0]
 800032a:	3301      	adds	r3, #1
 800032c:	b2da      	uxtb	r2, r3
 800032e:	4b2a      	ldr	r3, [pc, #168]	@ (80003d8 <HAL_TIM_IC_CaptureCallback+0x14c>)
 8000330:	701a      	strb	r2, [r3, #0]
                if (no_detection_counter >= 3) {  // reset only after 3 consecutive no detections
 8000332:	4b29      	ldr	r3, [pc, #164]	@ (80003d8 <HAL_TIM_IC_CaptureCallback+0x14c>)
 8000334:	781b      	ldrb	r3, [r3, #0]
 8000336:	2b02      	cmp	r3, #2
 8000338:	d92f      	bls.n	800039a <HAL_TIM_IC_CaptureCallback+0x10e>
                    for (int i = 0; i < DISTANCE_FILTER_SIZE; i++) {
 800033a:	2300      	movs	r3, #0
 800033c:	613b      	str	r3, [r7, #16]
 800033e:	e008      	b.n	8000352 <HAL_TIM_IC_CaptureCallback+0xc6>
                        distance_buffer[i] = 400;  // no detection
 8000340:	4a26      	ldr	r2, [pc, #152]	@ (80003dc <HAL_TIM_IC_CaptureCallback+0x150>)
 8000342:	693b      	ldr	r3, [r7, #16]
 8000344:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8000348:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                    for (int i = 0; i < DISTANCE_FILTER_SIZE; i++) {
 800034c:	693b      	ldr	r3, [r7, #16]
 800034e:	3301      	adds	r3, #1
 8000350:	613b      	str	r3, [r7, #16]
 8000352:	693b      	ldr	r3, [r7, #16]
 8000354:	2b04      	cmp	r3, #4
 8000356:	ddf3      	ble.n	8000340 <HAL_TIM_IC_CaptureCallback+0xb4>
                    distance_index = 0;
 8000358:	4b21      	ldr	r3, [pc, #132]	@ (80003e0 <HAL_TIM_IC_CaptureCallback+0x154>)
 800035a:	2200      	movs	r2, #0
 800035c:	701a      	strb	r2, [r3, #0]
 800035e:	e01c      	b.n	800039a <HAL_TIM_IC_CaptureCallback+0x10e>
                no_detection_counter = 0;  // reset counter on valid detection
 8000360:	4b1d      	ldr	r3, [pc, #116]	@ (80003d8 <HAL_TIM_IC_CaptureCallback+0x14c>)
 8000362:	2200      	movs	r2, #0
 8000364:	701a      	strb	r2, [r3, #0]
                lidar_distance_mm = pulse_width / 10;
 8000366:	697b      	ldr	r3, [r7, #20]
 8000368:	4a19      	ldr	r2, [pc, #100]	@ (80003d0 <HAL_TIM_IC_CaptureCallback+0x144>)
 800036a:	fba2 2303 	umull	r2, r3, r2, r3
 800036e:	08db      	lsrs	r3, r3, #3
 8000370:	4a18      	ldr	r2, [pc, #96]	@ (80003d4 <HAL_TIM_IC_CaptureCallback+0x148>)
 8000372:	6013      	str	r3, [r2, #0]
                distance_buffer[distance_index++] = lidar_distance_mm;
 8000374:	4b1a      	ldr	r3, [pc, #104]	@ (80003e0 <HAL_TIM_IC_CaptureCallback+0x154>)
 8000376:	781b      	ldrb	r3, [r3, #0]
 8000378:	1c5a      	adds	r2, r3, #1
 800037a:	b2d1      	uxtb	r1, r2
 800037c:	4a18      	ldr	r2, [pc, #96]	@ (80003e0 <HAL_TIM_IC_CaptureCallback+0x154>)
 800037e:	7011      	strb	r1, [r2, #0]
 8000380:	4619      	mov	r1, r3
 8000382:	4b14      	ldr	r3, [pc, #80]	@ (80003d4 <HAL_TIM_IC_CaptureCallback+0x148>)
 8000384:	681b      	ldr	r3, [r3, #0]
 8000386:	4a15      	ldr	r2, [pc, #84]	@ (80003dc <HAL_TIM_IC_CaptureCallback+0x150>)
 8000388:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
                if (distance_index >= DISTANCE_FILTER_SIZE) distance_index = 0;
 800038c:	4b14      	ldr	r3, [pc, #80]	@ (80003e0 <HAL_TIM_IC_CaptureCallback+0x154>)
 800038e:	781b      	ldrb	r3, [r3, #0]
 8000390:	2b04      	cmp	r3, #4
 8000392:	d902      	bls.n	800039a <HAL_TIM_IC_CaptureCallback+0x10e>
 8000394:	4b12      	ldr	r3, [pc, #72]	@ (80003e0 <HAL_TIM_IC_CaptureCallback+0x154>)
 8000396:	2200      	movs	r2, #0
 8000398:	701a      	strb	r2, [r3, #0]
            __HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_RISING);
 800039a:	687b      	ldr	r3, [r7, #4]
 800039c:	681b      	ldr	r3, [r3, #0]
 800039e:	6a1a      	ldr	r2, [r3, #32]
 80003a0:	687b      	ldr	r3, [r7, #4]
 80003a2:	681b      	ldr	r3, [r3, #0]
 80003a4:	f022 020a 	bic.w	r2, r2, #10
 80003a8:	621a      	str	r2, [r3, #32]
 80003aa:	687b      	ldr	r3, [r7, #4]
 80003ac:	681a      	ldr	r2, [r3, #0]
 80003ae:	687b      	ldr	r3, [r7, #4]
 80003b0:	681b      	ldr	r3, [r3, #0]
 80003b2:	6a12      	ldr	r2, [r2, #32]
 80003b4:	621a      	str	r2, [r3, #32]
            last_edge_was_rising = true;
 80003b6:	4b04      	ldr	r3, [pc, #16]	@ (80003c8 <HAL_TIM_IC_CaptureCallback+0x13c>)
 80003b8:	2201      	movs	r2, #1
 80003ba:	701a      	strb	r2, [r3, #0]
}
 80003bc:	bf00      	nop
 80003be:	3718      	adds	r7, #24
 80003c0:	46bd      	mov	sp, r7
 80003c2:	bd80      	pop	{r7, pc}
 80003c4:	40012c00 	.word	0x40012c00
 80003c8:	20000004 	.word	0x20000004
 80003cc:	200004ec 	.word	0x200004ec
 80003d0:	cccccccd 	.word	0xcccccccd
 80003d4:	200004e0 	.word	0x200004e0
 80003d8:	200004f0 	.word	0x200004f0
 80003dc:	20000068 	.word	0x20000068
 80003e0:	2000007c 	.word	0x2000007c

080003e4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80003e4:	b5b0      	push	{r4, r5, r7, lr}
 80003e6:	b098      	sub	sp, #96	@ 0x60
 80003e8:	af02      	add	r7, sp, #8
	//  PA8 is TIM1 channel 1, this is used for the LASPWM (the laser PWM signal)
	//  PB6 is I2C1 clock (SCL on the PTU), PB7 is I2C1 data (SDA on the PTU)



	uint8_t string_to_send[64] = "This is a string !\r\n";
 80003ea:	4ba1      	ldr	r3, [pc, #644]	@ (8000670 <main+0x28c>)
 80003ec:	1d3c      	adds	r4, r7, #4
 80003ee:	461d      	mov	r5, r3
 80003f0:	6828      	ldr	r0, [r5, #0]
 80003f2:	6869      	ldr	r1, [r5, #4]
 80003f4:	68aa      	ldr	r2, [r5, #8]
 80003f6:	68eb      	ldr	r3, [r5, #12]
 80003f8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80003fa:	6928      	ldr	r0, [r5, #16]
 80003fc:	6020      	str	r0, [r4, #0]
 80003fe:	7d2b      	ldrb	r3, [r5, #20]
 8000400:	7123      	strb	r3, [r4, #4]
 8000402:	f107 0319 	add.w	r3, r7, #25
 8000406:	222b      	movs	r2, #43	@ 0x2b
 8000408:	2100      	movs	r1, #0
 800040a:	4618      	mov	r0, r3
 800040c:	f006 f9ad 	bl	800676a <memset>

	enable_clocks();
 8000410:	f7ff ff1a 	bl	8000248 <enable_clocks>
	initialise_board();
 8000414:	f7ff ff28 	bl	8000268 <initialise_board>

	LedRegister *led_register = (LedRegister*)(&GPIOE->ODR);
 8000418:	4b96      	ldr	r3, [pc, #600]	@ (8000674 <main+0x290>)
 800041a:	653b      	str	r3, [r7, #80]	@ 0x50

	SerialInitialise(BAUD_115200, &USART1_PORT, 0x00);
 800041c:	2200      	movs	r2, #0
 800041e:	4996      	ldr	r1, [pc, #600]	@ (8000678 <main+0x294>)
 8000420:	2004      	movs	r0, #4
 8000422:	f000 fca9 	bl	8000d78 <SerialInitialise>

	HAL_StatusTypeDef return_value = 0x00;
 8000426:	2300      	movs	r3, #0
 8000428:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f

	volatile uint16_t vertical_PWM = 1000;
 800042c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000430:	807b      	strh	r3, [r7, #2]
	volatile uint16_t horizontal_PWM = 1000;
 8000432:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000436:	803b      	strh	r3, [r7, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000438:	f000 ff62 	bl	8001300 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800043c:	f000 f934 	bl	80006a8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000440:	f000 fba4 	bl	8000b8c <MX_GPIO_Init>
  MX_I2C1_Init();
 8000444:	f000 fa64 	bl	8000910 <MX_I2C1_Init>
  MX_USB_PCD_Init();
 8000448:	f000 fb7e 	bl	8000b48 <MX_USB_PCD_Init>
  MX_TIM2_Init();
 800044c:	f000 fb16 	bl	8000a7c <MX_TIM2_Init>
  MX_TIM1_Init();
 8000450:	f000 fa9e 	bl	8000990 <MX_TIM1_Init>
  MX_ADC1_Init();
 8000454:	f000 f98e 	bl	8000774 <MX_ADC1_Init>
  MX_ADC2_Init();
 8000458:	f000 f9fc 	bl	8000854 <MX_ADC2_Init>
  /* USER CODE BEGIN 2 */

	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 800045c:	2100      	movs	r1, #0
 800045e:	4887      	ldr	r0, [pc, #540]	@ (800067c <main+0x298>)
 8000460:	f004 fcd0 	bl	8004e04 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 8000464:	2104      	movs	r1, #4
 8000466:	4885      	ldr	r0, [pc, #532]	@ (800067c <main+0x298>)
 8000468:	f004 fccc 	bl	8004e04 <HAL_TIM_PWM_Start>

	HAL_TIM_IC_Start_IT(&htim1, TIM_CHANNEL_1);
 800046c:	2100      	movs	r1, #0
 800046e:	4884      	ldr	r0, [pc, #528]	@ (8000680 <main+0x29c>)
 8000470:	f004 fe2a 	bl	80050c8 <HAL_TIM_IC_Start_IT>

	// TIM 2 is setup with a prescaler that makes 1 count = 1 microsecond
	// Even with HAL, you can still set the values yourself
	TIM2->ARR = 20000; // 20000 = 20ms, which is the desired clock period for servos
 8000474:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000478:	f644 6220 	movw	r2, #20000	@ 0x4e20
 800047c:	62da      	str	r2, [r3, #44]	@ 0x2c
	TIM2->CR1 |= TIM_CR1_ARPE; // this makes the timing not change until the next pulse is finished
 800047e:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000482:	681b      	ldr	r3, [r3, #0]
 8000484:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000488:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800048c:	6013      	str	r3, [r2, #0]

	// note: for PWM if you continually change the clock period
	// you can get unexpected results. To remove this, set ARPE so that the
	// ARR settings are not activated until the next cycle.

	initialise_ptu_i2c(&hi2c1);
 800048e:	487d      	ldr	r0, [pc, #500]	@ (8000684 <main+0x2a0>)
 8000490:	f000 fc26 	bl	8000ce0 <initialise_ptu_i2c>

	// Initialize distance buffer with a safe default (e.g., 400 mm = no detection)
	for (int i = 0; i < DISTANCE_FILTER_SIZE; i++) {
 8000494:	2300      	movs	r3, #0
 8000496:	657b      	str	r3, [r7, #84]	@ 0x54
 8000498:	e008      	b.n	80004ac <main+0xc8>
	    distance_buffer[i] = 400;  // or some max/no-detection value
 800049a:	4a7b      	ldr	r2, [pc, #492]	@ (8000688 <main+0x2a4>)
 800049c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800049e:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 80004a2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (int i = 0; i < DISTANCE_FILTER_SIZE; i++) {
 80004a6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80004a8:	3301      	adds	r3, #1
 80004aa:	657b      	str	r3, [r7, #84]	@ 0x54
 80004ac:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80004ae:	2b04      	cmp	r3, #4
 80004b0:	ddf3      	ble.n	800049a <main+0xb6>
	}
	distance_index = 0;
 80004b2:	4b76      	ldr	r3, [pc, #472]	@ (800068c <main+0x2a8>)
 80004b4:	2200      	movs	r2, #0
 80004b6:	701a      	strb	r2, [r3, #0]
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
		{
			// Read joystick X (ADC1_IN3 on PA2)
				    HAL_ADC_Start(&hadc1);
 80004b8:	4875      	ldr	r0, [pc, #468]	@ (8000690 <main+0x2ac>)
 80004ba:	f001 f98b 	bl	80017d4 <HAL_ADC_Start>
				    HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 80004be:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80004c2:	4873      	ldr	r0, [pc, #460]	@ (8000690 <main+0x2ac>)
 80004c4:	f001 fa9c 	bl	8001a00 <HAL_ADC_PollForConversion>
				    joy_x = HAL_ADC_GetValue(&hadc1);
 80004c8:	4871      	ldr	r0, [pc, #452]	@ (8000690 <main+0x2ac>)
 80004ca:	f001 fb9b 	bl	8001c04 <HAL_ADC_GetValue>
 80004ce:	4603      	mov	r3, r0
 80004d0:	4a70      	ldr	r2, [pc, #448]	@ (8000694 <main+0x2b0>)
 80004d2:	6013      	str	r3, [r2, #0]

				    // Read joystick Y (ADC2_IN1 on PA4)
				    HAL_ADC_Start(&hadc2);
 80004d4:	4870      	ldr	r0, [pc, #448]	@ (8000698 <main+0x2b4>)
 80004d6:	f001 f97d 	bl	80017d4 <HAL_ADC_Start>
				    HAL_ADC_PollForConversion(&hadc2, HAL_MAX_DELAY);
 80004da:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80004de:	486e      	ldr	r0, [pc, #440]	@ (8000698 <main+0x2b4>)
 80004e0:	f001 fa8e 	bl	8001a00 <HAL_ADC_PollForConversion>
				    joy_y = HAL_ADC_GetValue(&hadc2);
 80004e4:	486c      	ldr	r0, [pc, #432]	@ (8000698 <main+0x2b4>)
 80004e6:	f001 fb8d 	bl	8001c04 <HAL_ADC_GetValue>
 80004ea:	4603      	mov	r3, r0
 80004ec:	4a6b      	ldr	r2, [pc, #428]	@ (800069c <main+0x2b8>)
 80004ee:	6013      	str	r3, [r2, #0]

				    uint16_t target_pan_pwm = map(joy_x, 0, 4095, 1000, 2000);
 80004f0:	4b68      	ldr	r3, [pc, #416]	@ (8000694 <main+0x2b0>)
 80004f2:	681b      	ldr	r3, [r3, #0]
 80004f4:	4618      	mov	r0, r3
 80004f6:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 80004fa:	9300      	str	r3, [sp, #0]
 80004fc:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000500:	f640 72ff 	movw	r2, #4095	@ 0xfff
 8000504:	2100      	movs	r1, #0
 8000506:	f7ff fe83 	bl	8000210 <map>
 800050a:	4603      	mov	r3, r0
 800050c:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
				    uint16_t target_tilt_pwm = map(joy_y, 0, 4095, 1000, 2000);
 8000510:	4b62      	ldr	r3, [pc, #392]	@ (800069c <main+0x2b8>)
 8000512:	681b      	ldr	r3, [r3, #0]
 8000514:	4618      	mov	r0, r3
 8000516:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 800051a:	9300      	str	r3, [sp, #0]
 800051c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000520:	f640 72ff 	movw	r2, #4095	@ 0xfff
 8000524:	2100      	movs	r1, #0
 8000526:	f7ff fe73 	bl	8000210 <map>
 800052a:	4603      	mov	r3, r0
 800052c:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

				    // Move current_pan_pwm towards target_pan_pwm by step_size
				    if (current_pan_pwm < target_pan_pwm) {
 8000530:	4b5b      	ldr	r3, [pc, #364]	@ (80006a0 <main+0x2bc>)
 8000532:	881b      	ldrh	r3, [r3, #0]
 8000534:	f8b7 204c 	ldrh.w	r2, [r7, #76]	@ 0x4c
 8000538:	429a      	cmp	r2, r3
 800053a:	d911      	bls.n	8000560 <main+0x17c>
				        current_pan_pwm += step_size;
 800053c:	4b58      	ldr	r3, [pc, #352]	@ (80006a0 <main+0x2bc>)
 800053e:	881b      	ldrh	r3, [r3, #0]
 8000540:	2201      	movs	r2, #1
 8000542:	4413      	add	r3, r2
 8000544:	b29a      	uxth	r2, r3
 8000546:	4b56      	ldr	r3, [pc, #344]	@ (80006a0 <main+0x2bc>)
 8000548:	801a      	strh	r2, [r3, #0]
				        if (current_pan_pwm > target_pan_pwm)
 800054a:	4b55      	ldr	r3, [pc, #340]	@ (80006a0 <main+0x2bc>)
 800054c:	881b      	ldrh	r3, [r3, #0]
 800054e:	f8b7 204c 	ldrh.w	r2, [r7, #76]	@ 0x4c
 8000552:	429a      	cmp	r2, r3
 8000554:	d21b      	bcs.n	800058e <main+0x1aa>
				            current_pan_pwm = target_pan_pwm;
 8000556:	4a52      	ldr	r2, [pc, #328]	@ (80006a0 <main+0x2bc>)
 8000558:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 800055c:	8013      	strh	r3, [r2, #0]
 800055e:	e016      	b.n	800058e <main+0x1aa>
				    } else if (current_pan_pwm > target_pan_pwm) {
 8000560:	4b4f      	ldr	r3, [pc, #316]	@ (80006a0 <main+0x2bc>)
 8000562:	881b      	ldrh	r3, [r3, #0]
 8000564:	f8b7 204c 	ldrh.w	r2, [r7, #76]	@ 0x4c
 8000568:	429a      	cmp	r2, r3
 800056a:	d210      	bcs.n	800058e <main+0x1aa>
				        current_pan_pwm -= step_size;
 800056c:	4b4c      	ldr	r3, [pc, #304]	@ (80006a0 <main+0x2bc>)
 800056e:	881b      	ldrh	r3, [r3, #0]
 8000570:	2201      	movs	r2, #1
 8000572:	1a9b      	subs	r3, r3, r2
 8000574:	b29a      	uxth	r2, r3
 8000576:	4b4a      	ldr	r3, [pc, #296]	@ (80006a0 <main+0x2bc>)
 8000578:	801a      	strh	r2, [r3, #0]
				        if (current_pan_pwm < target_pan_pwm)
 800057a:	4b49      	ldr	r3, [pc, #292]	@ (80006a0 <main+0x2bc>)
 800057c:	881b      	ldrh	r3, [r3, #0]
 800057e:	f8b7 204c 	ldrh.w	r2, [r7, #76]	@ 0x4c
 8000582:	429a      	cmp	r2, r3
 8000584:	d903      	bls.n	800058e <main+0x1aa>
				            current_pan_pwm = target_pan_pwm;
 8000586:	4a46      	ldr	r2, [pc, #280]	@ (80006a0 <main+0x2bc>)
 8000588:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 800058c:	8013      	strh	r3, [r2, #0]
				    }

				    // Same for tilt
				    if (current_tilt_pwm < target_tilt_pwm) {
 800058e:	4b45      	ldr	r3, [pc, #276]	@ (80006a4 <main+0x2c0>)
 8000590:	881b      	ldrh	r3, [r3, #0]
 8000592:	f8b7 204a 	ldrh.w	r2, [r7, #74]	@ 0x4a
 8000596:	429a      	cmp	r2, r3
 8000598:	d911      	bls.n	80005be <main+0x1da>
				        current_tilt_pwm += step_size;
 800059a:	4b42      	ldr	r3, [pc, #264]	@ (80006a4 <main+0x2c0>)
 800059c:	881b      	ldrh	r3, [r3, #0]
 800059e:	2201      	movs	r2, #1
 80005a0:	4413      	add	r3, r2
 80005a2:	b29a      	uxth	r2, r3
 80005a4:	4b3f      	ldr	r3, [pc, #252]	@ (80006a4 <main+0x2c0>)
 80005a6:	801a      	strh	r2, [r3, #0]
				        if (current_tilt_pwm > target_tilt_pwm)
 80005a8:	4b3e      	ldr	r3, [pc, #248]	@ (80006a4 <main+0x2c0>)
 80005aa:	881b      	ldrh	r3, [r3, #0]
 80005ac:	f8b7 204a 	ldrh.w	r2, [r7, #74]	@ 0x4a
 80005b0:	429a      	cmp	r2, r3
 80005b2:	d21b      	bcs.n	80005ec <main+0x208>
				            current_tilt_pwm = target_tilt_pwm;
 80005b4:	4a3b      	ldr	r2, [pc, #236]	@ (80006a4 <main+0x2c0>)
 80005b6:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80005ba:	8013      	strh	r3, [r2, #0]
 80005bc:	e016      	b.n	80005ec <main+0x208>
				    } else if (current_tilt_pwm > target_tilt_pwm) {
 80005be:	4b39      	ldr	r3, [pc, #228]	@ (80006a4 <main+0x2c0>)
 80005c0:	881b      	ldrh	r3, [r3, #0]
 80005c2:	f8b7 204a 	ldrh.w	r2, [r7, #74]	@ 0x4a
 80005c6:	429a      	cmp	r2, r3
 80005c8:	d210      	bcs.n	80005ec <main+0x208>
				        current_tilt_pwm -= step_size;
 80005ca:	4b36      	ldr	r3, [pc, #216]	@ (80006a4 <main+0x2c0>)
 80005cc:	881b      	ldrh	r3, [r3, #0]
 80005ce:	2201      	movs	r2, #1
 80005d0:	1a9b      	subs	r3, r3, r2
 80005d2:	b29a      	uxth	r2, r3
 80005d4:	4b33      	ldr	r3, [pc, #204]	@ (80006a4 <main+0x2c0>)
 80005d6:	801a      	strh	r2, [r3, #0]
				        if (current_tilt_pwm < target_tilt_pwm)
 80005d8:	4b32      	ldr	r3, [pc, #200]	@ (80006a4 <main+0x2c0>)
 80005da:	881b      	ldrh	r3, [r3, #0]
 80005dc:	f8b7 204a 	ldrh.w	r2, [r7, #74]	@ 0x4a
 80005e0:	429a      	cmp	r2, r3
 80005e2:	d903      	bls.n	80005ec <main+0x208>
				            current_tilt_pwm = target_tilt_pwm;
 80005e4:	4a2f      	ldr	r2, [pc, #188]	@ (80006a4 <main+0x2c0>)
 80005e6:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80005ea:	8013      	strh	r3, [r2, #0]
				    }

				    // Update PWM duty cycles
				    TIM2->CCR1 = current_pan_pwm;
 80005ec:	4b2c      	ldr	r3, [pc, #176]	@ (80006a0 <main+0x2bc>)
 80005ee:	881a      	ldrh	r2, [r3, #0]
 80005f0:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80005f4:	635a      	str	r2, [r3, #52]	@ 0x34
				    TIM2->CCR2 = current_tilt_pwm;
 80005f6:	4b2b      	ldr	r3, [pc, #172]	@ (80006a4 <main+0x2c0>)
 80005f8:	881a      	ldrh	r2, [r3, #0]
 80005fa:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80005fe:	639a      	str	r2, [r3, #56]	@ 0x38

				    uint32_t filtered_distance = get_filtered_distance();
 8000600:	f7ff fde2 	bl	80001c8 <get_filtered_distance>
 8000604:	6478      	str	r0, [r7, #68]	@ 0x44

				    if (filtered_distance > 0 && filtered_distance < 300) {
 8000606:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8000608:	2b00      	cmp	r3, #0
 800060a:	d010      	beq.n	800062e <main+0x24a>
 800060c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800060e:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 8000612:	d20c      	bcs.n	800062e <main+0x24a>
				        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_SET);   // Red LED ON
 8000614:	2201      	movs	r2, #1
 8000616:	2140      	movs	r1, #64	@ 0x40
 8000618:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800061c:	f002 fa32 	bl	8002a84 <HAL_GPIO_WritePin>
				        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET); // Green LED OFF
 8000620:	2200      	movs	r2, #0
 8000622:	2120      	movs	r1, #32
 8000624:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000628:	f002 fa2c 	bl	8002a84 <HAL_GPIO_WritePin>
 800062c:	e01c      	b.n	8000668 <main+0x284>
				    } else if (filtered_distance >= 300) {
 800062e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8000630:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 8000634:	d30c      	bcc.n	8000650 <main+0x26c>
				        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);   // Green LED ON
 8000636:	2201      	movs	r2, #1
 8000638:	2120      	movs	r1, #32
 800063a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800063e:	f002 fa21 	bl	8002a84 <HAL_GPIO_WritePin>
				        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_RESET); // Red LED OFF
 8000642:	2200      	movs	r2, #0
 8000644:	2140      	movs	r1, #64	@ 0x40
 8000646:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800064a:	f002 fa1b 	bl	8002a84 <HAL_GPIO_WritePin>
 800064e:	e00b      	b.n	8000668 <main+0x284>
				    } else {
				        // Distance 0 or invalid, turn both LEDs off or green on as safe state
				        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 8000650:	2201      	movs	r2, #1
 8000652:	2120      	movs	r1, #32
 8000654:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000658:	f002 fa14 	bl	8002a84 <HAL_GPIO_WritePin>
				        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_RESET);
 800065c:	2200      	movs	r2, #0
 800065e:	2140      	movs	r1, #64	@ 0x40
 8000660:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000664:	f002 fa0e 	bl	8002a84 <HAL_GPIO_WritePin>
				    }

				    HAL_Delay(1); // Adjust responsiveness if needed
 8000668:	2001      	movs	r0, #1
 800066a:	f000 feaf 	bl	80013cc <HAL_Delay>
		{
 800066e:	e723      	b.n	80004b8 <main+0xd4>
 8000670:	080067dc 	.word	0x080067dc
 8000674:	48001014 	.word	0x48001014
 8000678:	20000008 	.word	0x20000008
 800067c:	200001c0 	.word	0x200001c0
 8000680:	20000174 	.word	0x20000174
 8000684:	20000120 	.word	0x20000120
 8000688:	20000068 	.word	0x20000068
 800068c:	2000007c 	.word	0x2000007c
 8000690:	20000080 	.word	0x20000080
 8000694:	200004e4 	.word	0x200004e4
 8000698:	200000d0 	.word	0x200000d0
 800069c:	200004e8 	.word	0x200004e8
 80006a0:	20000000 	.word	0x20000000
 80006a4:	20000002 	.word	0x20000002

080006a8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006a8:	b580      	push	{r7, lr}
 80006aa:	b09e      	sub	sp, #120	@ 0x78
 80006ac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006ae:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 80006b2:	2228      	movs	r2, #40	@ 0x28
 80006b4:	2100      	movs	r1, #0
 80006b6:	4618      	mov	r0, r3
 80006b8:	f006 f857 	bl	800676a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006bc:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80006c0:	2200      	movs	r2, #0
 80006c2:	601a      	str	r2, [r3, #0]
 80006c4:	605a      	str	r2, [r3, #4]
 80006c6:	609a      	str	r2, [r3, #8]
 80006c8:	60da      	str	r2, [r3, #12]
 80006ca:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80006cc:	463b      	mov	r3, r7
 80006ce:	223c      	movs	r2, #60	@ 0x3c
 80006d0:	2100      	movs	r1, #0
 80006d2:	4618      	mov	r0, r3
 80006d4:	f006 f849 	bl	800676a <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 80006d8:	2303      	movs	r3, #3
 80006da:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80006dc:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 80006e0:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80006e2:	2300      	movs	r3, #0
 80006e4:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006e6:	2301      	movs	r3, #1
 80006e8:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006ea:	2310      	movs	r3, #16
 80006ec:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006ee:	2302      	movs	r3, #2
 80006f0:	66fb      	str	r3, [r7, #108]	@ 0x6c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006f2:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80006f6:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 80006f8:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 80006fc:	677b      	str	r3, [r7, #116]	@ 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006fe:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8000702:	4618      	mov	r0, r3
 8000704:	f002 ff52 	bl	80035ac <HAL_RCC_OscConfig>
 8000708:	4603      	mov	r3, r0
 800070a:	2b00      	cmp	r3, #0
 800070c:	d001      	beq.n	8000712 <SystemClock_Config+0x6a>
  {
    Error_Handler();
 800070e:	f000 fae1 	bl	8000cd4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000712:	230f      	movs	r3, #15
 8000714:	63fb      	str	r3, [r7, #60]	@ 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000716:	2302      	movs	r3, #2
 8000718:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800071a:	2300      	movs	r3, #0
 800071c:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800071e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000722:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000724:	2300      	movs	r3, #0
 8000726:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000728:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800072c:	2101      	movs	r1, #1
 800072e:	4618      	mov	r0, r3
 8000730:	f003 ff4a 	bl	80045c8 <HAL_RCC_ClockConfig>
 8000734:	4603      	mov	r3, r0
 8000736:	2b00      	cmp	r3, #0
 8000738:	d001      	beq.n	800073e <SystemClock_Config+0x96>
  {
    Error_Handler();
 800073a:	f000 facb 	bl	8000cd4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_I2C1
 800073e:	4b0c      	ldr	r3, [pc, #48]	@ (8000770 <SystemClock_Config+0xc8>)
 8000740:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_TIM1|RCC_PERIPHCLK_ADC12;
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12PLLCLK_DIV1;
 8000742:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000746:	627b      	str	r3, [r7, #36]	@ 0x24
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8000748:	2300      	movs	r3, #0
 800074a:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.USBClockSelection = RCC_USBCLKSOURCE_PLL;
 800074c:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000750:	63bb      	str	r3, [r7, #56]	@ 0x38
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_HCLK;
 8000752:	2300      	movs	r3, #0
 8000754:	633b      	str	r3, [r7, #48]	@ 0x30
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000756:	463b      	mov	r3, r7
 8000758:	4618      	mov	r0, r3
 800075a:	f004 f8f7 	bl	800494c <HAL_RCCEx_PeriphCLKConfig>
 800075e:	4603      	mov	r3, r0
 8000760:	2b00      	cmp	r3, #0
 8000762:	d001      	beq.n	8000768 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000764:	f000 fab6 	bl	8000cd4 <Error_Handler>
  }
}
 8000768:	bf00      	nop
 800076a:	3778      	adds	r7, #120	@ 0x78
 800076c:	46bd      	mov	sp, r7
 800076e:	bd80      	pop	{r7, pc}
 8000770:	000210a0 	.word	0x000210a0

08000774 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000774:	b580      	push	{r7, lr}
 8000776:	b08a      	sub	sp, #40	@ 0x28
 8000778:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800077a:	f107 031c 	add.w	r3, r7, #28
 800077e:	2200      	movs	r2, #0
 8000780:	601a      	str	r2, [r3, #0]
 8000782:	605a      	str	r2, [r3, #4]
 8000784:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000786:	1d3b      	adds	r3, r7, #4
 8000788:	2200      	movs	r2, #0
 800078a:	601a      	str	r2, [r3, #0]
 800078c:	605a      	str	r2, [r3, #4]
 800078e:	609a      	str	r2, [r3, #8]
 8000790:	60da      	str	r2, [r3, #12]
 8000792:	611a      	str	r2, [r3, #16]
 8000794:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000796:	4b2e      	ldr	r3, [pc, #184]	@ (8000850 <MX_ADC1_Init+0xdc>)
 8000798:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800079c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800079e:	4b2c      	ldr	r3, [pc, #176]	@ (8000850 <MX_ADC1_Init+0xdc>)
 80007a0:	2200      	movs	r2, #0
 80007a2:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80007a4:	4b2a      	ldr	r3, [pc, #168]	@ (8000850 <MX_ADC1_Init+0xdc>)
 80007a6:	2200      	movs	r2, #0
 80007a8:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80007aa:	4b29      	ldr	r3, [pc, #164]	@ (8000850 <MX_ADC1_Init+0xdc>)
 80007ac:	2200      	movs	r2, #0
 80007ae:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80007b0:	4b27      	ldr	r3, [pc, #156]	@ (8000850 <MX_ADC1_Init+0xdc>)
 80007b2:	2200      	movs	r2, #0
 80007b4:	765a      	strb	r2, [r3, #25]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80007b6:	4b26      	ldr	r3, [pc, #152]	@ (8000850 <MX_ADC1_Init+0xdc>)
 80007b8:	2200      	movs	r2, #0
 80007ba:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80007be:	4b24      	ldr	r3, [pc, #144]	@ (8000850 <MX_ADC1_Init+0xdc>)
 80007c0:	2200      	movs	r2, #0
 80007c2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80007c4:	4b22      	ldr	r3, [pc, #136]	@ (8000850 <MX_ADC1_Init+0xdc>)
 80007c6:	2201      	movs	r2, #1
 80007c8:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80007ca:	4b21      	ldr	r3, [pc, #132]	@ (8000850 <MX_ADC1_Init+0xdc>)
 80007cc:	2200      	movs	r2, #0
 80007ce:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80007d0:	4b1f      	ldr	r3, [pc, #124]	@ (8000850 <MX_ADC1_Init+0xdc>)
 80007d2:	2201      	movs	r2, #1
 80007d4:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80007d6:	4b1e      	ldr	r3, [pc, #120]	@ (8000850 <MX_ADC1_Init+0xdc>)
 80007d8:	2200      	movs	r2, #0
 80007da:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80007de:	4b1c      	ldr	r3, [pc, #112]	@ (8000850 <MX_ADC1_Init+0xdc>)
 80007e0:	2204      	movs	r2, #4
 80007e2:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80007e4:	4b1a      	ldr	r3, [pc, #104]	@ (8000850 <MX_ADC1_Init+0xdc>)
 80007e6:	2200      	movs	r2, #0
 80007e8:	761a      	strb	r2, [r3, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 80007ea:	4b19      	ldr	r3, [pc, #100]	@ (8000850 <MX_ADC1_Init+0xdc>)
 80007ec:	2200      	movs	r2, #0
 80007ee:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80007f0:	4817      	ldr	r0, [pc, #92]	@ (8000850 <MX_ADC1_Init+0xdc>)
 80007f2:	f000 fe0f 	bl	8001414 <HAL_ADC_Init>
 80007f6:	4603      	mov	r3, r0
 80007f8:	2b00      	cmp	r3, #0
 80007fa:	d001      	beq.n	8000800 <MX_ADC1_Init+0x8c>
  {
    Error_Handler();
 80007fc:	f000 fa6a 	bl	8000cd4 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000800:	2300      	movs	r3, #0
 8000802:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000804:	f107 031c 	add.w	r3, r7, #28
 8000808:	4619      	mov	r1, r3
 800080a:	4811      	ldr	r0, [pc, #68]	@ (8000850 <MX_ADC1_Init+0xdc>)
 800080c:	f001 fcf2 	bl	80021f4 <HAL_ADCEx_MultiModeConfigChannel>
 8000810:	4603      	mov	r3, r0
 8000812:	2b00      	cmp	r3, #0
 8000814:	d001      	beq.n	800081a <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 8000816:	f000 fa5d 	bl	8000cd4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 800081a:	2303      	movs	r3, #3
 800081c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800081e:	2301      	movs	r3, #1
 8000820:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000822:	2300      	movs	r3, #0
 8000824:	613b      	str	r3, [r7, #16]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000826:	2300      	movs	r3, #0
 8000828:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800082a:	2300      	movs	r3, #0
 800082c:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 800082e:	2300      	movs	r3, #0
 8000830:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000832:	1d3b      	adds	r3, r7, #4
 8000834:	4619      	mov	r1, r3
 8000836:	4806      	ldr	r0, [pc, #24]	@ (8000850 <MX_ADC1_Init+0xdc>)
 8000838:	f001 f9f2 	bl	8001c20 <HAL_ADC_ConfigChannel>
 800083c:	4603      	mov	r3, r0
 800083e:	2b00      	cmp	r3, #0
 8000840:	d001      	beq.n	8000846 <MX_ADC1_Init+0xd2>
  {
    Error_Handler();
 8000842:	f000 fa47 	bl	8000cd4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000846:	bf00      	nop
 8000848:	3728      	adds	r7, #40	@ 0x28
 800084a:	46bd      	mov	sp, r7
 800084c:	bd80      	pop	{r7, pc}
 800084e:	bf00      	nop
 8000850:	20000080 	.word	0x20000080

08000854 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8000854:	b580      	push	{r7, lr}
 8000856:	b086      	sub	sp, #24
 8000858:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800085a:	463b      	mov	r3, r7
 800085c:	2200      	movs	r2, #0
 800085e:	601a      	str	r2, [r3, #0]
 8000860:	605a      	str	r2, [r3, #4]
 8000862:	609a      	str	r2, [r3, #8]
 8000864:	60da      	str	r2, [r3, #12]
 8000866:	611a      	str	r2, [r3, #16]
 8000868:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 800086a:	4b27      	ldr	r3, [pc, #156]	@ (8000908 <MX_ADC2_Init+0xb4>)
 800086c:	4a27      	ldr	r2, [pc, #156]	@ (800090c <MX_ADC2_Init+0xb8>)
 800086e:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000870:	4b25      	ldr	r3, [pc, #148]	@ (8000908 <MX_ADC2_Init+0xb4>)
 8000872:	2200      	movs	r2, #0
 8000874:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8000876:	4b24      	ldr	r3, [pc, #144]	@ (8000908 <MX_ADC2_Init+0xb4>)
 8000878:	2200      	movs	r2, #0
 800087a:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800087c:	4b22      	ldr	r3, [pc, #136]	@ (8000908 <MX_ADC2_Init+0xb4>)
 800087e:	2200      	movs	r2, #0
 8000880:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8000882:	4b21      	ldr	r3, [pc, #132]	@ (8000908 <MX_ADC2_Init+0xb4>)
 8000884:	2200      	movs	r2, #0
 8000886:	765a      	strb	r2, [r3, #25]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000888:	4b1f      	ldr	r3, [pc, #124]	@ (8000908 <MX_ADC2_Init+0xb4>)
 800088a:	2200      	movs	r2, #0
 800088c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000890:	4b1d      	ldr	r3, [pc, #116]	@ (8000908 <MX_ADC2_Init+0xb4>)
 8000892:	2200      	movs	r2, #0
 8000894:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000896:	4b1c      	ldr	r3, [pc, #112]	@ (8000908 <MX_ADC2_Init+0xb4>)
 8000898:	2201      	movs	r2, #1
 800089a:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800089c:	4b1a      	ldr	r3, [pc, #104]	@ (8000908 <MX_ADC2_Init+0xb4>)
 800089e:	2200      	movs	r2, #0
 80008a0:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 80008a2:	4b19      	ldr	r3, [pc, #100]	@ (8000908 <MX_ADC2_Init+0xb4>)
 80008a4:	2201      	movs	r2, #1
 80008a6:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 80008a8:	4b17      	ldr	r3, [pc, #92]	@ (8000908 <MX_ADC2_Init+0xb4>)
 80008aa:	2200      	movs	r2, #0
 80008ac:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80008b0:	4b15      	ldr	r3, [pc, #84]	@ (8000908 <MX_ADC2_Init+0xb4>)
 80008b2:	2204      	movs	r2, #4
 80008b4:	615a      	str	r2, [r3, #20]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 80008b6:	4b14      	ldr	r3, [pc, #80]	@ (8000908 <MX_ADC2_Init+0xb4>)
 80008b8:	2200      	movs	r2, #0
 80008ba:	761a      	strb	r2, [r3, #24]
  hadc2.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 80008bc:	4b12      	ldr	r3, [pc, #72]	@ (8000908 <MX_ADC2_Init+0xb4>)
 80008be:	2200      	movs	r2, #0
 80008c0:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80008c2:	4811      	ldr	r0, [pc, #68]	@ (8000908 <MX_ADC2_Init+0xb4>)
 80008c4:	f000 fda6 	bl	8001414 <HAL_ADC_Init>
 80008c8:	4603      	mov	r3, r0
 80008ca:	2b00      	cmp	r3, #0
 80008cc:	d001      	beq.n	80008d2 <MX_ADC2_Init+0x7e>
  {
    Error_Handler();
 80008ce:	f000 fa01 	bl	8000cd4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80008d2:	2301      	movs	r3, #1
 80008d4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80008d6:	2301      	movs	r3, #1
 80008d8:	607b      	str	r3, [r7, #4]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80008da:	2300      	movs	r3, #0
 80008dc:	60fb      	str	r3, [r7, #12]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80008de:	2300      	movs	r3, #0
 80008e0:	60bb      	str	r3, [r7, #8]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80008e2:	2300      	movs	r3, #0
 80008e4:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80008e6:	2300      	movs	r3, #0
 80008e8:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80008ea:	463b      	mov	r3, r7
 80008ec:	4619      	mov	r1, r3
 80008ee:	4806      	ldr	r0, [pc, #24]	@ (8000908 <MX_ADC2_Init+0xb4>)
 80008f0:	f001 f996 	bl	8001c20 <HAL_ADC_ConfigChannel>
 80008f4:	4603      	mov	r3, r0
 80008f6:	2b00      	cmp	r3, #0
 80008f8:	d001      	beq.n	80008fe <MX_ADC2_Init+0xaa>
  {
    Error_Handler();
 80008fa:	f000 f9eb 	bl	8000cd4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 80008fe:	bf00      	nop
 8000900:	3718      	adds	r7, #24
 8000902:	46bd      	mov	sp, r7
 8000904:	bd80      	pop	{r7, pc}
 8000906:	bf00      	nop
 8000908:	200000d0 	.word	0x200000d0
 800090c:	50000100 	.word	0x50000100

08000910 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000910:	b580      	push	{r7, lr}
 8000912:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000914:	4b1b      	ldr	r3, [pc, #108]	@ (8000984 <MX_I2C1_Init+0x74>)
 8000916:	4a1c      	ldr	r2, [pc, #112]	@ (8000988 <MX_I2C1_Init+0x78>)
 8000918:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00201D2B;
 800091a:	4b1a      	ldr	r3, [pc, #104]	@ (8000984 <MX_I2C1_Init+0x74>)
 800091c:	4a1b      	ldr	r2, [pc, #108]	@ (800098c <MX_I2C1_Init+0x7c>)
 800091e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000920:	4b18      	ldr	r3, [pc, #96]	@ (8000984 <MX_I2C1_Init+0x74>)
 8000922:	2200      	movs	r2, #0
 8000924:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000926:	4b17      	ldr	r3, [pc, #92]	@ (8000984 <MX_I2C1_Init+0x74>)
 8000928:	2201      	movs	r2, #1
 800092a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800092c:	4b15      	ldr	r3, [pc, #84]	@ (8000984 <MX_I2C1_Init+0x74>)
 800092e:	2200      	movs	r2, #0
 8000930:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000932:	4b14      	ldr	r3, [pc, #80]	@ (8000984 <MX_I2C1_Init+0x74>)
 8000934:	2200      	movs	r2, #0
 8000936:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000938:	4b12      	ldr	r3, [pc, #72]	@ (8000984 <MX_I2C1_Init+0x74>)
 800093a:	2200      	movs	r2, #0
 800093c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800093e:	4b11      	ldr	r3, [pc, #68]	@ (8000984 <MX_I2C1_Init+0x74>)
 8000940:	2200      	movs	r2, #0
 8000942:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000944:	4b0f      	ldr	r3, [pc, #60]	@ (8000984 <MX_I2C1_Init+0x74>)
 8000946:	2200      	movs	r2, #0
 8000948:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800094a:	480e      	ldr	r0, [pc, #56]	@ (8000984 <MX_I2C1_Init+0x74>)
 800094c:	f002 f8b2 	bl	8002ab4 <HAL_I2C_Init>
 8000950:	4603      	mov	r3, r0
 8000952:	2b00      	cmp	r3, #0
 8000954:	d001      	beq.n	800095a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000956:	f000 f9bd 	bl	8000cd4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800095a:	2100      	movs	r1, #0
 800095c:	4809      	ldr	r0, [pc, #36]	@ (8000984 <MX_I2C1_Init+0x74>)
 800095e:	f002 fcc7 	bl	80032f0 <HAL_I2CEx_ConfigAnalogFilter>
 8000962:	4603      	mov	r3, r0
 8000964:	2b00      	cmp	r3, #0
 8000966:	d001      	beq.n	800096c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000968:	f000 f9b4 	bl	8000cd4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800096c:	2100      	movs	r1, #0
 800096e:	4805      	ldr	r0, [pc, #20]	@ (8000984 <MX_I2C1_Init+0x74>)
 8000970:	f002 fd09 	bl	8003386 <HAL_I2CEx_ConfigDigitalFilter>
 8000974:	4603      	mov	r3, r0
 8000976:	2b00      	cmp	r3, #0
 8000978:	d001      	beq.n	800097e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800097a:	f000 f9ab 	bl	8000cd4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800097e:	bf00      	nop
 8000980:	bd80      	pop	{r7, pc}
 8000982:	bf00      	nop
 8000984:	20000120 	.word	0x20000120
 8000988:	40005400 	.word	0x40005400
 800098c:	00201d2b 	.word	0x00201d2b

08000990 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000990:	b580      	push	{r7, lr}
 8000992:	b08c      	sub	sp, #48	@ 0x30
 8000994:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000996:	f107 0320 	add.w	r3, r7, #32
 800099a:	2200      	movs	r2, #0
 800099c:	601a      	str	r2, [r3, #0]
 800099e:	605a      	str	r2, [r3, #4]
 80009a0:	609a      	str	r2, [r3, #8]
 80009a2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80009a4:	f107 0314 	add.w	r3, r7, #20
 80009a8:	2200      	movs	r2, #0
 80009aa:	601a      	str	r2, [r3, #0]
 80009ac:	605a      	str	r2, [r3, #4]
 80009ae:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80009b0:	1d3b      	adds	r3, r7, #4
 80009b2:	2200      	movs	r2, #0
 80009b4:	601a      	str	r2, [r3, #0]
 80009b6:	605a      	str	r2, [r3, #4]
 80009b8:	609a      	str	r2, [r3, #8]
 80009ba:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80009bc:	4b2d      	ldr	r3, [pc, #180]	@ (8000a74 <MX_TIM1_Init+0xe4>)
 80009be:	4a2e      	ldr	r2, [pc, #184]	@ (8000a78 <MX_TIM1_Init+0xe8>)
 80009c0:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 47;
 80009c2:	4b2c      	ldr	r3, [pc, #176]	@ (8000a74 <MX_TIM1_Init+0xe4>)
 80009c4:	222f      	movs	r2, #47	@ 0x2f
 80009c6:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009c8:	4b2a      	ldr	r3, [pc, #168]	@ (8000a74 <MX_TIM1_Init+0xe4>)
 80009ca:	2200      	movs	r2, #0
 80009cc:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80009ce:	4b29      	ldr	r3, [pc, #164]	@ (8000a74 <MX_TIM1_Init+0xe4>)
 80009d0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80009d4:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80009d6:	4b27      	ldr	r3, [pc, #156]	@ (8000a74 <MX_TIM1_Init+0xe4>)
 80009d8:	2200      	movs	r2, #0
 80009da:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80009dc:	4b25      	ldr	r3, [pc, #148]	@ (8000a74 <MX_TIM1_Init+0xe4>)
 80009de:	2200      	movs	r2, #0
 80009e0:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009e2:	4b24      	ldr	r3, [pc, #144]	@ (8000a74 <MX_TIM1_Init+0xe4>)
 80009e4:	2200      	movs	r2, #0
 80009e6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80009e8:	4822      	ldr	r0, [pc, #136]	@ (8000a74 <MX_TIM1_Init+0xe4>)
 80009ea:	f004 f95d 	bl	8004ca8 <HAL_TIM_Base_Init>
 80009ee:	4603      	mov	r3, r0
 80009f0:	2b00      	cmp	r3, #0
 80009f2:	d001      	beq.n	80009f8 <MX_TIM1_Init+0x68>
  {
    Error_Handler();
 80009f4:	f000 f96e 	bl	8000cd4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80009f8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80009fc:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80009fe:	f107 0320 	add.w	r3, r7, #32
 8000a02:	4619      	mov	r1, r3
 8000a04:	481b      	ldr	r0, [pc, #108]	@ (8000a74 <MX_TIM1_Init+0xe4>)
 8000a06:	f004 ff53 	bl	80058b0 <HAL_TIM_ConfigClockSource>
 8000a0a:	4603      	mov	r3, r0
 8000a0c:	2b00      	cmp	r3, #0
 8000a0e:	d001      	beq.n	8000a14 <MX_TIM1_Init+0x84>
  {
    Error_Handler();
 8000a10:	f000 f960 	bl	8000cd4 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim1) != HAL_OK)
 8000a14:	4817      	ldr	r0, [pc, #92]	@ (8000a74 <MX_TIM1_Init+0xe4>)
 8000a16:	f004 faf5 	bl	8005004 <HAL_TIM_IC_Init>
 8000a1a:	4603      	mov	r3, r0
 8000a1c:	2b00      	cmp	r3, #0
 8000a1e:	d001      	beq.n	8000a24 <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 8000a20:	f000 f958 	bl	8000cd4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a24:	2300      	movs	r3, #0
 8000a26:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000a28:	2300      	movs	r3, #0
 8000a2a:	61bb      	str	r3, [r7, #24]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a2c:	2300      	movs	r3, #0
 8000a2e:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000a30:	f107 0314 	add.w	r3, r7, #20
 8000a34:	4619      	mov	r1, r3
 8000a36:	480f      	ldr	r0, [pc, #60]	@ (8000a74 <MX_TIM1_Init+0xe4>)
 8000a38:	f005 fdc0 	bl	80065bc <HAL_TIMEx_MasterConfigSynchronization>
 8000a3c:	4603      	mov	r3, r0
 8000a3e:	2b00      	cmp	r3, #0
 8000a40:	d001      	beq.n	8000a46 <MX_TIM1_Init+0xb6>
  {
    Error_Handler();
 8000a42:	f000 f947 	bl	8000cd4 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_BOTHEDGE;
 8000a46:	230a      	movs	r3, #10
 8000a48:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000a4a:	2301      	movs	r3, #1
 8000a4c:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000a4e:	2300      	movs	r3, #0
 8000a50:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 8000a52:	2300      	movs	r3, #0
 8000a54:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8000a56:	1d3b      	adds	r3, r7, #4
 8000a58:	2200      	movs	r2, #0
 8000a5a:	4619      	mov	r1, r3
 8000a5c:	4805      	ldr	r0, [pc, #20]	@ (8000a74 <MX_TIM1_Init+0xe4>)
 8000a5e:	f004 fd77 	bl	8005550 <HAL_TIM_IC_ConfigChannel>
 8000a62:	4603      	mov	r3, r0
 8000a64:	2b00      	cmp	r3, #0
 8000a66:	d001      	beq.n	8000a6c <MX_TIM1_Init+0xdc>
  {
    Error_Handler();
 8000a68:	f000 f934 	bl	8000cd4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000a6c:	bf00      	nop
 8000a6e:	3730      	adds	r7, #48	@ 0x30
 8000a70:	46bd      	mov	sp, r7
 8000a72:	bd80      	pop	{r7, pc}
 8000a74:	20000174 	.word	0x20000174
 8000a78:	40012c00 	.word	0x40012c00

08000a7c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	b08a      	sub	sp, #40	@ 0x28
 8000a80:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a82:	f107 031c 	add.w	r3, r7, #28
 8000a86:	2200      	movs	r2, #0
 8000a88:	601a      	str	r2, [r3, #0]
 8000a8a:	605a      	str	r2, [r3, #4]
 8000a8c:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000a8e:	463b      	mov	r3, r7
 8000a90:	2200      	movs	r2, #0
 8000a92:	601a      	str	r2, [r3, #0]
 8000a94:	605a      	str	r2, [r3, #4]
 8000a96:	609a      	str	r2, [r3, #8]
 8000a98:	60da      	str	r2, [r3, #12]
 8000a9a:	611a      	str	r2, [r3, #16]
 8000a9c:	615a      	str	r2, [r3, #20]
 8000a9e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000aa0:	4b28      	ldr	r3, [pc, #160]	@ (8000b44 <MX_TIM2_Init+0xc8>)
 8000aa2:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000aa6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 47;
 8000aa8:	4b26      	ldr	r3, [pc, #152]	@ (8000b44 <MX_TIM2_Init+0xc8>)
 8000aaa:	222f      	movs	r2, #47	@ 0x2f
 8000aac:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000aae:	4b25      	ldr	r3, [pc, #148]	@ (8000b44 <MX_TIM2_Init+0xc8>)
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 20000;
 8000ab4:	4b23      	ldr	r3, [pc, #140]	@ (8000b44 <MX_TIM2_Init+0xc8>)
 8000ab6:	f644 6220 	movw	r2, #20000	@ 0x4e20
 8000aba:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000abc:	4b21      	ldr	r3, [pc, #132]	@ (8000b44 <MX_TIM2_Init+0xc8>)
 8000abe:	2200      	movs	r2, #0
 8000ac0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000ac2:	4b20      	ldr	r3, [pc, #128]	@ (8000b44 <MX_TIM2_Init+0xc8>)
 8000ac4:	2280      	movs	r2, #128	@ 0x80
 8000ac6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000ac8:	481e      	ldr	r0, [pc, #120]	@ (8000b44 <MX_TIM2_Init+0xc8>)
 8000aca:	f004 f944 	bl	8004d56 <HAL_TIM_PWM_Init>
 8000ace:	4603      	mov	r3, r0
 8000ad0:	2b00      	cmp	r3, #0
 8000ad2:	d001      	beq.n	8000ad8 <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 8000ad4:	f000 f8fe 	bl	8000cd4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ad8:	2300      	movs	r3, #0
 8000ada:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000adc:	2300      	movs	r3, #0
 8000ade:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000ae0:	f107 031c 	add.w	r3, r7, #28
 8000ae4:	4619      	mov	r1, r3
 8000ae6:	4817      	ldr	r0, [pc, #92]	@ (8000b44 <MX_TIM2_Init+0xc8>)
 8000ae8:	f005 fd68 	bl	80065bc <HAL_TIMEx_MasterConfigSynchronization>
 8000aec:	4603      	mov	r3, r0
 8000aee:	2b00      	cmp	r3, #0
 8000af0:	d001      	beq.n	8000af6 <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 8000af2:	f000 f8ef 	bl	8000cd4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000af6:	2360      	movs	r3, #96	@ 0x60
 8000af8:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 2000;
 8000afa:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8000afe:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000b00:	2300      	movs	r3, #0
 8000b02:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000b04:	2300      	movs	r3, #0
 8000b06:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000b08:	463b      	mov	r3, r7
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	4619      	mov	r1, r3
 8000b0e:	480d      	ldr	r0, [pc, #52]	@ (8000b44 <MX_TIM2_Init+0xc8>)
 8000b10:	f004 fdba 	bl	8005688 <HAL_TIM_PWM_ConfigChannel>
 8000b14:	4603      	mov	r3, r0
 8000b16:	2b00      	cmp	r3, #0
 8000b18:	d001      	beq.n	8000b1e <MX_TIM2_Init+0xa2>
  {
    Error_Handler();
 8000b1a:	f000 f8db 	bl	8000cd4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000b1e:	463b      	mov	r3, r7
 8000b20:	2204      	movs	r2, #4
 8000b22:	4619      	mov	r1, r3
 8000b24:	4807      	ldr	r0, [pc, #28]	@ (8000b44 <MX_TIM2_Init+0xc8>)
 8000b26:	f004 fdaf 	bl	8005688 <HAL_TIM_PWM_ConfigChannel>
 8000b2a:	4603      	mov	r3, r0
 8000b2c:	2b00      	cmp	r3, #0
 8000b2e:	d001      	beq.n	8000b34 <MX_TIM2_Init+0xb8>
  {
    Error_Handler();
 8000b30:	f000 f8d0 	bl	8000cd4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000b34:	4803      	ldr	r0, [pc, #12]	@ (8000b44 <MX_TIM2_Init+0xc8>)
 8000b36:	f000 fae9 	bl	800110c <HAL_TIM_MspPostInit>

}
 8000b3a:	bf00      	nop
 8000b3c:	3728      	adds	r7, #40	@ 0x28
 8000b3e:	46bd      	mov	sp, r7
 8000b40:	bd80      	pop	{r7, pc}
 8000b42:	bf00      	nop
 8000b44:	200001c0 	.word	0x200001c0

08000b48 <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 8000b4c:	4b0d      	ldr	r3, [pc, #52]	@ (8000b84 <MX_USB_PCD_Init+0x3c>)
 8000b4e:	4a0e      	ldr	r2, [pc, #56]	@ (8000b88 <MX_USB_PCD_Init+0x40>)
 8000b50:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8000b52:	4b0c      	ldr	r3, [pc, #48]	@ (8000b84 <MX_USB_PCD_Init+0x3c>)
 8000b54:	2208      	movs	r2, #8
 8000b56:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8000b58:	4b0a      	ldr	r3, [pc, #40]	@ (8000b84 <MX_USB_PCD_Init+0x3c>)
 8000b5a:	2202      	movs	r2, #2
 8000b5c:	715a      	strb	r2, [r3, #5]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000b5e:	4b09      	ldr	r3, [pc, #36]	@ (8000b84 <MX_USB_PCD_Init+0x3c>)
 8000b60:	2202      	movs	r2, #2
 8000b62:	71da      	strb	r2, [r3, #7]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8000b64:	4b07      	ldr	r3, [pc, #28]	@ (8000b84 <MX_USB_PCD_Init+0x3c>)
 8000b66:	2200      	movs	r2, #0
 8000b68:	725a      	strb	r2, [r3, #9]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8000b6a:	4b06      	ldr	r3, [pc, #24]	@ (8000b84 <MX_USB_PCD_Init+0x3c>)
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	72da      	strb	r2, [r3, #11]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8000b70:	4804      	ldr	r0, [pc, #16]	@ (8000b84 <MX_USB_PCD_Init+0x3c>)
 8000b72:	f002 fc54 	bl	800341e <HAL_PCD_Init>
 8000b76:	4603      	mov	r3, r0
 8000b78:	2b00      	cmp	r3, #0
 8000b7a:	d001      	beq.n	8000b80 <MX_USB_PCD_Init+0x38>
  {
    Error_Handler();
 8000b7c:	f000 f8aa 	bl	8000cd4 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 8000b80:	bf00      	nop
 8000b82:	bd80      	pop	{r7, pc}
 8000b84:	2000020c 	.word	0x2000020c
 8000b88:	40005c00 	.word	0x40005c00

08000b8c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	b08a      	sub	sp, #40	@ 0x28
 8000b90:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b92:	f107 0314 	add.w	r3, r7, #20
 8000b96:	2200      	movs	r2, #0
 8000b98:	601a      	str	r2, [r3, #0]
 8000b9a:	605a      	str	r2, [r3, #4]
 8000b9c:	609a      	str	r2, [r3, #8]
 8000b9e:	60da      	str	r2, [r3, #12]
 8000ba0:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000ba2:	4b4a      	ldr	r3, [pc, #296]	@ (8000ccc <MX_GPIO_Init+0x140>)
 8000ba4:	695b      	ldr	r3, [r3, #20]
 8000ba6:	4a49      	ldr	r2, [pc, #292]	@ (8000ccc <MX_GPIO_Init+0x140>)
 8000ba8:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000bac:	6153      	str	r3, [r2, #20]
 8000bae:	4b47      	ldr	r3, [pc, #284]	@ (8000ccc <MX_GPIO_Init+0x140>)
 8000bb0:	695b      	ldr	r3, [r3, #20]
 8000bb2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000bb6:	613b      	str	r3, [r7, #16]
 8000bb8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bba:	4b44      	ldr	r3, [pc, #272]	@ (8000ccc <MX_GPIO_Init+0x140>)
 8000bbc:	695b      	ldr	r3, [r3, #20]
 8000bbe:	4a43      	ldr	r2, [pc, #268]	@ (8000ccc <MX_GPIO_Init+0x140>)
 8000bc0:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8000bc4:	6153      	str	r3, [r2, #20]
 8000bc6:	4b41      	ldr	r3, [pc, #260]	@ (8000ccc <MX_GPIO_Init+0x140>)
 8000bc8:	695b      	ldr	r3, [r3, #20]
 8000bca:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8000bce:	60fb      	str	r3, [r7, #12]
 8000bd0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000bd2:	4b3e      	ldr	r3, [pc, #248]	@ (8000ccc <MX_GPIO_Init+0x140>)
 8000bd4:	695b      	ldr	r3, [r3, #20]
 8000bd6:	4a3d      	ldr	r2, [pc, #244]	@ (8000ccc <MX_GPIO_Init+0x140>)
 8000bd8:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000bdc:	6153      	str	r3, [r2, #20]
 8000bde:	4b3b      	ldr	r3, [pc, #236]	@ (8000ccc <MX_GPIO_Init+0x140>)
 8000be0:	695b      	ldr	r3, [r3, #20]
 8000be2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000be6:	60bb      	str	r3, [r7, #8]
 8000be8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bea:	4b38      	ldr	r3, [pc, #224]	@ (8000ccc <MX_GPIO_Init+0x140>)
 8000bec:	695b      	ldr	r3, [r3, #20]
 8000bee:	4a37      	ldr	r2, [pc, #220]	@ (8000ccc <MX_GPIO_Init+0x140>)
 8000bf0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000bf4:	6153      	str	r3, [r2, #20]
 8000bf6:	4b35      	ldr	r3, [pc, #212]	@ (8000ccc <MX_GPIO_Init+0x140>)
 8000bf8:	695b      	ldr	r3, [r3, #20]
 8000bfa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000bfe:	607b      	str	r3, [r7, #4]
 8000c00:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c02:	4b32      	ldr	r3, [pc, #200]	@ (8000ccc <MX_GPIO_Init+0x140>)
 8000c04:	695b      	ldr	r3, [r3, #20]
 8000c06:	4a31      	ldr	r2, [pc, #196]	@ (8000ccc <MX_GPIO_Init+0x140>)
 8000c08:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000c0c:	6153      	str	r3, [r2, #20]
 8000c0e:	4b2f      	ldr	r3, [pc, #188]	@ (8000ccc <MX_GPIO_Init+0x140>)
 8000c10:	695b      	ldr	r3, [r3, #20]
 8000c12:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000c16:	603b      	str	r3, [r7, #0]
 8000c18:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, CS_I2C_SPI_Pin|LD4_Pin|LD3_Pin|LD5_Pin
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	f64f 7108 	movw	r1, #65288	@ 0xff08
 8000c20:	482b      	ldr	r0, [pc, #172]	@ (8000cd0 <MX_GPIO_Init+0x144>)
 8000c22:	f001 ff2f 	bl	8002a84 <HAL_GPIO_WritePin>
                          |LD7_Pin|LD9_Pin|LD10_Pin|LD8_Pin
                          |LD6_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5|GPIO_PIN_6, GPIO_PIN_RESET);
 8000c26:	2200      	movs	r2, #0
 8000c28:	2160      	movs	r1, #96	@ 0x60
 8000c2a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000c2e:	f001 ff29 	bl	8002a84 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : CS_I2C_SPI_Pin LD4_Pin LD3_Pin LD5_Pin
                           LD7_Pin LD9_Pin LD10_Pin LD8_Pin
                           LD6_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin|LD4_Pin|LD3_Pin|LD5_Pin
 8000c32:	f64f 7308 	movw	r3, #65288	@ 0xff08
 8000c36:	617b      	str	r3, [r7, #20]
                          |LD7_Pin|LD9_Pin|LD10_Pin|LD8_Pin
                          |LD6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c38:	2301      	movs	r3, #1
 8000c3a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c3c:	2300      	movs	r3, #0
 8000c3e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c40:	2300      	movs	r3, #0
 8000c42:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000c44:	f107 0314 	add.w	r3, r7, #20
 8000c48:	4619      	mov	r1, r3
 8000c4a:	4821      	ldr	r0, [pc, #132]	@ (8000cd0 <MX_GPIO_Init+0x144>)
 8000c4c:	f001 fda0 	bl	8002790 <HAL_GPIO_Init>

  /*Configure GPIO pins : MEMS_INT3_Pin MEMS_INT4_Pin MEMS_INT1_Pin MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT3_Pin|MEMS_INT4_Pin|MEMS_INT1_Pin|MEMS_INT2_Pin;
 8000c50:	2333      	movs	r3, #51	@ 0x33
 8000c52:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000c54:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8000c58:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000c5e:	f107 0314 	add.w	r3, r7, #20
 8000c62:	4619      	mov	r1, r3
 8000c64:	481a      	ldr	r0, [pc, #104]	@ (8000cd0 <MX_GPIO_Init+0x144>)
 8000c66:	f001 fd93 	bl	8002790 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000c6a:	2301      	movs	r3, #1
 8000c6c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c6e:	2300      	movs	r3, #0
 8000c70:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c72:	2300      	movs	r3, #0
 8000c74:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000c76:	f107 0314 	add.w	r3, r7, #20
 8000c7a:	4619      	mov	r1, r3
 8000c7c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000c80:	f001 fd86 	bl	8002790 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA5 PA6 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8000c84:	2360      	movs	r3, #96	@ 0x60
 8000c86:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c88:	2301      	movs	r3, #1
 8000c8a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c90:	2300      	movs	r3, #0
 8000c92:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c94:	f107 0314 	add.w	r3, r7, #20
 8000c98:	4619      	mov	r1, r3
 8000c9a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000c9e:	f001 fd77 	bl	8002790 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI1_MISO_Pin */
  GPIO_InitStruct.Pin = SPI1_MISO_Pin;
 8000ca2:	2380      	movs	r3, #128	@ 0x80
 8000ca4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ca6:	2302      	movs	r3, #2
 8000ca8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000caa:	2300      	movs	r3, #0
 8000cac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000cae:	2303      	movs	r3, #3
 8000cb0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000cb2:	2305      	movs	r3, #5
 8000cb4:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(SPI1_MISO_GPIO_Port, &GPIO_InitStruct);
 8000cb6:	f107 0314 	add.w	r3, r7, #20
 8000cba:	4619      	mov	r1, r3
 8000cbc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000cc0:	f001 fd66 	bl	8002790 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000cc4:	bf00      	nop
 8000cc6:	3728      	adds	r7, #40	@ 0x28
 8000cc8:	46bd      	mov	sp, r7
 8000cca:	bd80      	pop	{r7, pc}
 8000ccc:	40021000 	.word	0x40021000
 8000cd0:	48001000 	.word	0x48001000

08000cd4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000cd4:	b480      	push	{r7}
 8000cd6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000cd8:	b672      	cpsid	i
}
 8000cda:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8000cdc:	bf00      	nop
 8000cde:	e7fd      	b.n	8000cdc <Error_Handler+0x8>

08000ce0 <initialise_ptu_i2c>:

#include "ptu_definitions.h"

ACCELEROMETER_CFG_STRUCT accelerometer_cfg = {ADXL345_POWER_CTL, 0x08, ADXL345_DATA_FORMAT, 0x08};

void initialise_ptu_i2c(I2C_HandleTypeDef *i2c) {
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	b088      	sub	sp, #32
 8000ce4:	af04      	add	r7, sp, #16
 8000ce6:	6078      	str	r0, [r7, #4]

	HAL_StatusTypeDef return_value = 0x00;
 8000ce8:	2300      	movs	r3, #0
 8000cea:	73fb      	strb	r3, [r7, #15]

	uint8_t reg_1 = 0b00001111;
 8000cec:	230f      	movs	r3, #15
 8000cee:	73bb      	strb	r3, [r7, #14]
	// Enable x, y, z and turn off power down:
	return_value = HAL_I2C_Mem_Write(i2c, gyro_wr, L3G4200D_CTRL_REG1, 1, &reg_1, 1, 10);
 8000cf0:	230a      	movs	r3, #10
 8000cf2:	9302      	str	r3, [sp, #8]
 8000cf4:	2301      	movs	r3, #1
 8000cf6:	9301      	str	r3, [sp, #4]
 8000cf8:	f107 030e 	add.w	r3, r7, #14
 8000cfc:	9300      	str	r3, [sp, #0]
 8000cfe:	2301      	movs	r3, #1
 8000d00:	2220      	movs	r2, #32
 8000d02:	21d2      	movs	r1, #210	@ 0xd2
 8000d04:	6878      	ldr	r0, [r7, #4]
 8000d06:	f001 ff71 	bl	8002bec <HAL_I2C_Mem_Write>
 8000d0a:	4603      	mov	r3, r0
 8000d0c:	73fb      	strb	r3, [r7, #15]

	uint8_t reg_2 = 0b00000000;
 8000d0e:	2300      	movs	r3, #0
 8000d10:	737b      	strb	r3, [r7, #13]
	// If you'd like to adjust/use the HPF, you can edit the line below to configure CTRL_REG2:
	return_value = HAL_I2C_Mem_Write(i2c, gyro_wr, L3G4200D_CTRL_REG2, 1, &reg_2, 1, 10);
 8000d12:	230a      	movs	r3, #10
 8000d14:	9302      	str	r3, [sp, #8]
 8000d16:	2301      	movs	r3, #1
 8000d18:	9301      	str	r3, [sp, #4]
 8000d1a:	f107 030d 	add.w	r3, r7, #13
 8000d1e:	9300      	str	r3, [sp, #0]
 8000d20:	2301      	movs	r3, #1
 8000d22:	2221      	movs	r2, #33	@ 0x21
 8000d24:	21d2      	movs	r1, #210	@ 0xd2
 8000d26:	6878      	ldr	r0, [r7, #4]
 8000d28:	f001 ff60 	bl	8002bec <HAL_I2C_Mem_Write>
 8000d2c:	4603      	mov	r3, r0
 8000d2e:	73fb      	strb	r3, [r7, #15]

	// Configure CTRL_REG3 to generate data ready interrupt on INT2
	// No interrupts used on INT1, if you'd like to configure INT1
	// or INT2 otherwise, consult the datasheet:
	return_value = HAL_I2C_Mem_Write(i2c, gyro_wr, L3G4200D_CTRL_REG3, 1, &reg_2, 1, 10);
 8000d30:	230a      	movs	r3, #10
 8000d32:	9302      	str	r3, [sp, #8]
 8000d34:	2301      	movs	r3, #1
 8000d36:	9301      	str	r3, [sp, #4]
 8000d38:	f107 030d 	add.w	r3, r7, #13
 8000d3c:	9300      	str	r3, [sp, #0]
 8000d3e:	2301      	movs	r3, #1
 8000d40:	2222      	movs	r2, #34	@ 0x22
 8000d42:	21d2      	movs	r1, #210	@ 0xd2
 8000d44:	6878      	ldr	r0, [r7, #4]
 8000d46:	f001 ff51 	bl	8002bec <HAL_I2C_Mem_Write>
 8000d4a:	4603      	mov	r3, r0
 8000d4c:	73fb      	strb	r3, [r7, #15]
	// CTRL_REG5 controls high-pass filtering of outputs, use it
	// if you'd like:
	//HAL_I2C_Mem_Write(&hi2c1, gyro_wr, L3G4200D_CTRL_REG5, 1, &reg_2, 10);

	// reset lidar board
	uint8_t reset_value = 0x00;
 8000d4e:	2300      	movs	r3, #0
 8000d50:	733b      	strb	r3, [r7, #12]
	return_value = HAL_I2C_Mem_Write(i2c, LIDAR_WR, 0x00, 1, &reset_value, 1, 10);
 8000d52:	230a      	movs	r3, #10
 8000d54:	9302      	str	r3, [sp, #8]
 8000d56:	2301      	movs	r3, #1
 8000d58:	9301      	str	r3, [sp, #4]
 8000d5a:	f107 030c 	add.w	r3, r7, #12
 8000d5e:	9300      	str	r3, [sp, #0]
 8000d60:	2301      	movs	r3, #1
 8000d62:	2200      	movs	r2, #0
 8000d64:	21c4      	movs	r1, #196	@ 0xc4
 8000d66:	6878      	ldr	r0, [r7, #4]
 8000d68:	f001 ff40 	bl	8002bec <HAL_I2C_Mem_Write>
 8000d6c:	4603      	mov	r3, r0
 8000d6e:	73fb      	strb	r3, [r7, #15]
}
 8000d70:	bf00      	nop
 8000d72:	3710      	adds	r7, #16
 8000d74:	46bd      	mov	sp, r7
 8000d76:	bd80      	pop	{r7, pc}

08000d78 <SerialInitialise>:
		0x77};


// InitialiseSerial - Initialise the serial port
// Input: baudRate is from an enumerated set
void SerialInitialise(uint32_t baudRate, SerialPort *serial_port, void (*completion_function)(uint32_t)) {
 8000d78:	b480      	push	{r7}
 8000d7a:	b087      	sub	sp, #28
 8000d7c:	af00      	add	r7, sp, #0
 8000d7e:	60f8      	str	r0, [r7, #12]
 8000d80:	60b9      	str	r1, [r7, #8]
 8000d82:	607a      	str	r2, [r7, #4]

	serial_port->completion_function = completion_function;
 8000d84:	68bb      	ldr	r3, [r7, #8]
 8000d86:	687a      	ldr	r2, [r7, #4]
 8000d88:	635a      	str	r2, [r3, #52]	@ 0x34

	// enable clock power, system configuration clock and GPIOC
	// common to all UARTs
	RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 8000d8a:	4b34      	ldr	r3, [pc, #208]	@ (8000e5c <SerialInitialise+0xe4>)
 8000d8c:	69db      	ldr	r3, [r3, #28]
 8000d8e:	4a33      	ldr	r2, [pc, #204]	@ (8000e5c <SerialInitialise+0xe4>)
 8000d90:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000d94:	61d3      	str	r3, [r2, #28]
	RCC->APB2ENR |= RCC_APB2ENR_SYSCFGEN;
 8000d96:	4b31      	ldr	r3, [pc, #196]	@ (8000e5c <SerialInitialise+0xe4>)
 8000d98:	699b      	ldr	r3, [r3, #24]
 8000d9a:	4a30      	ldr	r2, [pc, #192]	@ (8000e5c <SerialInitialise+0xe4>)
 8000d9c:	f043 0301 	orr.w	r3, r3, #1
 8000da0:	6193      	str	r3, [r2, #24]

	switch(serial_port->SerialPortGPIO) {
 8000da2:	68bb      	ldr	r3, [r7, #8]
 8000da4:	699b      	ldr	r3, [r3, #24]
 8000da6:	2b02      	cmp	r3, #2
 8000da8:	d106      	bne.n	8000db8 <SerialInitialise+0x40>
	case SERIAL_GPIO_C:
		RCC->AHBENR |= RCC_AHBENR_GPIOCEN;
 8000daa:	4b2c      	ldr	r3, [pc, #176]	@ (8000e5c <SerialInitialise+0xe4>)
 8000dac:	695b      	ldr	r3, [r3, #20]
 8000dae:	4a2b      	ldr	r2, [pc, #172]	@ (8000e5c <SerialInitialise+0xe4>)
 8000db0:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8000db4:	6153      	str	r3, [r2, #20]
		break;
 8000db6:	e000      	b.n	8000dba <SerialInitialise+0x42>
	default:
		break;
 8000db8:	bf00      	nop
	}

	// set pin mode
	*(serial_port->SerialPinModeRegister) = serial_port->SerialPinModeValue;
 8000dba:	68bb      	ldr	r3, [r7, #8]
 8000dbc:	69db      	ldr	r3, [r3, #28]
 8000dbe:	68ba      	ldr	r2, [r7, #8]
 8000dc0:	6a12      	ldr	r2, [r2, #32]
 8000dc2:	601a      	str	r2, [r3, #0]

	// enable high speed clock for GPIOC
	*(serial_port->SerialPinSpeedRegister) = serial_port->SerialPinSpeedValue;
 8000dc4:	68bb      	ldr	r3, [r7, #8]
 8000dc6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000dc8:	68ba      	ldr	r2, [r7, #8]
 8000dca:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8000dcc:	601a      	str	r2, [r3, #0]

	// set alternate function to enable USART to an external pin
	*(serial_port->SerialPinAlternatePinRegister) = serial_port->SerialPinAlternatePinValue;
 8000dce:	68bb      	ldr	r3, [r7, #8]
 8000dd0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000dd2:	68ba      	ldr	r2, [r7, #8]
 8000dd4:	f892 2030 	ldrb.w	r2, [r2, #48]	@ 0x30
 8000dd8:	b2d2      	uxtb	r2, r2
 8000dda:	701a      	strb	r2, [r3, #0]

	*(serial_port->TimerEnableRegister) |= serial_port->TimerEnableMask;
 8000ddc:	68bb      	ldr	r3, [r7, #8]
 8000dde:	6959      	ldr	r1, [r3, #20]
 8000de0:	68bb      	ldr	r3, [r7, #8]
 8000de2:	691b      	ldr	r3, [r3, #16]
 8000de4:	681a      	ldr	r2, [r3, #0]
 8000de6:	68bb      	ldr	r3, [r7, #8]
 8000de8:	691b      	ldr	r3, [r3, #16]
 8000dea:	430a      	orrs	r2, r1
 8000dec:	601a      	str	r2, [r3, #0]

	uint16_t *baud_rate_config = ((uint16_t*)serial_port->BaudRate); // only 16 bits used!
 8000dee:	68bb      	ldr	r3, [r7, #8]
 8000df0:	681b      	ldr	r3, [r3, #0]
 8000df2:	617b      	str	r3, [r7, #20]

	// Baud rate calculation from datasheet
	switch(baudRate){
 8000df4:	68fb      	ldr	r3, [r7, #12]
 8000df6:	2b04      	cmp	r3, #4
 8000df8:	d821      	bhi.n	8000e3e <SerialInitialise+0xc6>
 8000dfa:	a201      	add	r2, pc, #4	@ (adr r2, 8000e00 <SerialInitialise+0x88>)
 8000dfc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e00:	08000e15 	.word	0x08000e15
 8000e04:	08000e1d 	.word	0x08000e1d
 8000e08:	08000e25 	.word	0x08000e25
 8000e0c:	08000e2d 	.word	0x08000e2d
 8000e10:	08000e35 	.word	0x08000e35
	case BAUD_9600:
		// NEED TO FIX THIS !
		*baud_rate_config = 0x46;  // 115200 at 8MHz
 8000e14:	697b      	ldr	r3, [r7, #20]
 8000e16:	2246      	movs	r2, #70	@ 0x46
 8000e18:	801a      	strh	r2, [r3, #0]
		break;
 8000e1a:	e010      	b.n	8000e3e <SerialInitialise+0xc6>
	case BAUD_19200:
		// NEED TO FIX THIS !
		*baud_rate_config = 0x46;  // 115200 at 8MHz
 8000e1c:	697b      	ldr	r3, [r7, #20]
 8000e1e:	2246      	movs	r2, #70	@ 0x46
 8000e20:	801a      	strh	r2, [r3, #0]
		break;
 8000e22:	e00c      	b.n	8000e3e <SerialInitialise+0xc6>
	case BAUD_38400:
		// NEED TO FIX THIS !
		*baud_rate_config = 0x46;  // 115200 at 8MHz
 8000e24:	697b      	ldr	r3, [r7, #20]
 8000e26:	2246      	movs	r2, #70	@ 0x46
 8000e28:	801a      	strh	r2, [r3, #0]
		break;
 8000e2a:	e008      	b.n	8000e3e <SerialInitialise+0xc6>
	case BAUD_57600:
		// NEED TO FIX THIS !
		*baud_rate_config = 0x46;  // 115200 at 8MHz
 8000e2c:	697b      	ldr	r3, [r7, #20]
 8000e2e:	2246      	movs	r2, #70	@ 0x46
 8000e30:	801a      	strh	r2, [r3, #0]
		break;
 8000e32:	e004      	b.n	8000e3e <SerialInitialise+0xc6>
	case BAUD_115200:
		*baud_rate_config = 0x46 * 0x06;  // 115200 at 8MHz
 8000e34:	697b      	ldr	r3, [r7, #20]
 8000e36:	f44f 72d2 	mov.w	r2, #420	@ 0x1a4
 8000e3a:	801a      	strh	r2, [r3, #0]
		break;
 8000e3c:	bf00      	nop
	}


	// enable serial port for tx and rx
	*(serial_port->ControlRegister1) |= USART_CR1_TE | USART_CR1_RE | USART_CR1_UE;
 8000e3e:	68bb      	ldr	r3, [r7, #8]
 8000e40:	685b      	ldr	r3, [r3, #4]
 8000e42:	681a      	ldr	r2, [r3, #0]
 8000e44:	68bb      	ldr	r3, [r7, #8]
 8000e46:	685b      	ldr	r3, [r3, #4]
 8000e48:	f042 020d 	orr.w	r2, r2, #13
 8000e4c:	601a      	str	r2, [r3, #0]
}
 8000e4e:	bf00      	nop
 8000e50:	371c      	adds	r7, #28
 8000e52:	46bd      	mov	sp, r7
 8000e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e58:	4770      	bx	lr
 8000e5a:	bf00      	nop
 8000e5c:	40021000 	.word	0x40021000

08000e60 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e60:	b580      	push	{r7, lr}
 8000e62:	b082      	sub	sp, #8
 8000e64:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e66:	4b0f      	ldr	r3, [pc, #60]	@ (8000ea4 <HAL_MspInit+0x44>)
 8000e68:	699b      	ldr	r3, [r3, #24]
 8000e6a:	4a0e      	ldr	r2, [pc, #56]	@ (8000ea4 <HAL_MspInit+0x44>)
 8000e6c:	f043 0301 	orr.w	r3, r3, #1
 8000e70:	6193      	str	r3, [r2, #24]
 8000e72:	4b0c      	ldr	r3, [pc, #48]	@ (8000ea4 <HAL_MspInit+0x44>)
 8000e74:	699b      	ldr	r3, [r3, #24]
 8000e76:	f003 0301 	and.w	r3, r3, #1
 8000e7a:	607b      	str	r3, [r7, #4]
 8000e7c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e7e:	4b09      	ldr	r3, [pc, #36]	@ (8000ea4 <HAL_MspInit+0x44>)
 8000e80:	69db      	ldr	r3, [r3, #28]
 8000e82:	4a08      	ldr	r2, [pc, #32]	@ (8000ea4 <HAL_MspInit+0x44>)
 8000e84:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000e88:	61d3      	str	r3, [r2, #28]
 8000e8a:	4b06      	ldr	r3, [pc, #24]	@ (8000ea4 <HAL_MspInit+0x44>)
 8000e8c:	69db      	ldr	r3, [r3, #28]
 8000e8e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000e92:	603b      	str	r3, [r7, #0]
 8000e94:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000e96:	2007      	movs	r0, #7
 8000e98:	f001 fc38 	bl	800270c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e9c:	bf00      	nop
 8000e9e:	3708      	adds	r7, #8
 8000ea0:	46bd      	mov	sp, r7
 8000ea2:	bd80      	pop	{r7, pc}
 8000ea4:	40021000 	.word	0x40021000

08000ea8 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	b08c      	sub	sp, #48	@ 0x30
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000eb0:	f107 031c 	add.w	r3, r7, #28
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	601a      	str	r2, [r3, #0]
 8000eb8:	605a      	str	r2, [r3, #4]
 8000eba:	609a      	str	r2, [r3, #8]
 8000ebc:	60da      	str	r2, [r3, #12]
 8000ebe:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8000ec8:	d12e      	bne.n	8000f28 <HAL_ADC_MspInit+0x80>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 8000eca:	4b33      	ldr	r3, [pc, #204]	@ (8000f98 <HAL_ADC_MspInit+0xf0>)
 8000ecc:	681b      	ldr	r3, [r3, #0]
 8000ece:	3301      	adds	r3, #1
 8000ed0:	4a31      	ldr	r2, [pc, #196]	@ (8000f98 <HAL_ADC_MspInit+0xf0>)
 8000ed2:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8000ed4:	4b30      	ldr	r3, [pc, #192]	@ (8000f98 <HAL_ADC_MspInit+0xf0>)
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	2b01      	cmp	r3, #1
 8000eda:	d10b      	bne.n	8000ef4 <HAL_ADC_MspInit+0x4c>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8000edc:	4b2f      	ldr	r3, [pc, #188]	@ (8000f9c <HAL_ADC_MspInit+0xf4>)
 8000ede:	695b      	ldr	r3, [r3, #20]
 8000ee0:	4a2e      	ldr	r2, [pc, #184]	@ (8000f9c <HAL_ADC_MspInit+0xf4>)
 8000ee2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000ee6:	6153      	str	r3, [r2, #20]
 8000ee8:	4b2c      	ldr	r3, [pc, #176]	@ (8000f9c <HAL_ADC_MspInit+0xf4>)
 8000eea:	695b      	ldr	r3, [r3, #20]
 8000eec:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000ef0:	61bb      	str	r3, [r7, #24]
 8000ef2:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ef4:	4b29      	ldr	r3, [pc, #164]	@ (8000f9c <HAL_ADC_MspInit+0xf4>)
 8000ef6:	695b      	ldr	r3, [r3, #20]
 8000ef8:	4a28      	ldr	r2, [pc, #160]	@ (8000f9c <HAL_ADC_MspInit+0xf4>)
 8000efa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000efe:	6153      	str	r3, [r2, #20]
 8000f00:	4b26      	ldr	r3, [pc, #152]	@ (8000f9c <HAL_ADC_MspInit+0xf4>)
 8000f02:	695b      	ldr	r3, [r3, #20]
 8000f04:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000f08:	617b      	str	r3, [r7, #20]
 8000f0a:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PA2     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000f0c:	2304      	movs	r3, #4
 8000f0e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000f10:	2303      	movs	r3, #3
 8000f12:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f14:	2300      	movs	r3, #0
 8000f16:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f18:	f107 031c 	add.w	r3, r7, #28
 8000f1c:	4619      	mov	r1, r3
 8000f1e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000f22:	f001 fc35 	bl	8002790 <HAL_GPIO_Init>
    /* USER CODE BEGIN ADC2_MspInit 1 */

    /* USER CODE END ADC2_MspInit 1 */
  }

}
 8000f26:	e032      	b.n	8000f8e <HAL_ADC_MspInit+0xe6>
  else if(hadc->Instance==ADC2)
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	4a1c      	ldr	r2, [pc, #112]	@ (8000fa0 <HAL_ADC_MspInit+0xf8>)
 8000f2e:	4293      	cmp	r3, r2
 8000f30:	d12d      	bne.n	8000f8e <HAL_ADC_MspInit+0xe6>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8000f32:	4b19      	ldr	r3, [pc, #100]	@ (8000f98 <HAL_ADC_MspInit+0xf0>)
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	3301      	adds	r3, #1
 8000f38:	4a17      	ldr	r2, [pc, #92]	@ (8000f98 <HAL_ADC_MspInit+0xf0>)
 8000f3a:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8000f3c:	4b16      	ldr	r3, [pc, #88]	@ (8000f98 <HAL_ADC_MspInit+0xf0>)
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	2b01      	cmp	r3, #1
 8000f42:	d10b      	bne.n	8000f5c <HAL_ADC_MspInit+0xb4>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8000f44:	4b15      	ldr	r3, [pc, #84]	@ (8000f9c <HAL_ADC_MspInit+0xf4>)
 8000f46:	695b      	ldr	r3, [r3, #20]
 8000f48:	4a14      	ldr	r2, [pc, #80]	@ (8000f9c <HAL_ADC_MspInit+0xf4>)
 8000f4a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000f4e:	6153      	str	r3, [r2, #20]
 8000f50:	4b12      	ldr	r3, [pc, #72]	@ (8000f9c <HAL_ADC_MspInit+0xf4>)
 8000f52:	695b      	ldr	r3, [r3, #20]
 8000f54:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000f58:	613b      	str	r3, [r7, #16]
 8000f5a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f5c:	4b0f      	ldr	r3, [pc, #60]	@ (8000f9c <HAL_ADC_MspInit+0xf4>)
 8000f5e:	695b      	ldr	r3, [r3, #20]
 8000f60:	4a0e      	ldr	r2, [pc, #56]	@ (8000f9c <HAL_ADC_MspInit+0xf4>)
 8000f62:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000f66:	6153      	str	r3, [r2, #20]
 8000f68:	4b0c      	ldr	r3, [pc, #48]	@ (8000f9c <HAL_ADC_MspInit+0xf4>)
 8000f6a:	695b      	ldr	r3, [r3, #20]
 8000f6c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000f70:	60fb      	str	r3, [r7, #12]
 8000f72:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000f74:	2310      	movs	r3, #16
 8000f76:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000f78:	2303      	movs	r3, #3
 8000f7a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f7c:	2300      	movs	r3, #0
 8000f7e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f80:	f107 031c 	add.w	r3, r7, #28
 8000f84:	4619      	mov	r1, r3
 8000f86:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000f8a:	f001 fc01 	bl	8002790 <HAL_GPIO_Init>
}
 8000f8e:	bf00      	nop
 8000f90:	3730      	adds	r7, #48	@ 0x30
 8000f92:	46bd      	mov	sp, r7
 8000f94:	bd80      	pop	{r7, pc}
 8000f96:	bf00      	nop
 8000f98:	200004f4 	.word	0x200004f4
 8000f9c:	40021000 	.word	0x40021000
 8000fa0:	50000100 	.word	0x50000100

08000fa4 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	b08a      	sub	sp, #40	@ 0x28
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fac:	f107 0314 	add.w	r3, r7, #20
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	601a      	str	r2, [r3, #0]
 8000fb4:	605a      	str	r2, [r3, #4]
 8000fb6:	609a      	str	r2, [r3, #8]
 8000fb8:	60da      	str	r2, [r3, #12]
 8000fba:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	4a17      	ldr	r2, [pc, #92]	@ (8001020 <HAL_I2C_MspInit+0x7c>)
 8000fc2:	4293      	cmp	r3, r2
 8000fc4:	d127      	bne.n	8001016 <HAL_I2C_MspInit+0x72>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fc6:	4b17      	ldr	r3, [pc, #92]	@ (8001024 <HAL_I2C_MspInit+0x80>)
 8000fc8:	695b      	ldr	r3, [r3, #20]
 8000fca:	4a16      	ldr	r2, [pc, #88]	@ (8001024 <HAL_I2C_MspInit+0x80>)
 8000fcc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000fd0:	6153      	str	r3, [r2, #20]
 8000fd2:	4b14      	ldr	r3, [pc, #80]	@ (8001024 <HAL_I2C_MspInit+0x80>)
 8000fd4:	695b      	ldr	r3, [r3, #20]
 8000fd6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000fda:	613b      	str	r3, [r7, #16]
 8000fdc:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = I2C1_SCL_Pin|I2C1_SDA_Pin;
 8000fde:	23c0      	movs	r3, #192	@ 0xc0
 8000fe0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000fe2:	2312      	movs	r3, #18
 8000fe4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000fe6:	2301      	movs	r3, #1
 8000fe8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000fea:	2303      	movs	r3, #3
 8000fec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000fee:	2304      	movs	r3, #4
 8000ff0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ff2:	f107 0314 	add.w	r3, r7, #20
 8000ff6:	4619      	mov	r1, r3
 8000ff8:	480b      	ldr	r0, [pc, #44]	@ (8001028 <HAL_I2C_MspInit+0x84>)
 8000ffa:	f001 fbc9 	bl	8002790 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000ffe:	4b09      	ldr	r3, [pc, #36]	@ (8001024 <HAL_I2C_MspInit+0x80>)
 8001000:	69db      	ldr	r3, [r3, #28]
 8001002:	4a08      	ldr	r2, [pc, #32]	@ (8001024 <HAL_I2C_MspInit+0x80>)
 8001004:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001008:	61d3      	str	r3, [r2, #28]
 800100a:	4b06      	ldr	r3, [pc, #24]	@ (8001024 <HAL_I2C_MspInit+0x80>)
 800100c:	69db      	ldr	r3, [r3, #28]
 800100e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001012:	60fb      	str	r3, [r7, #12]
 8001014:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 8001016:	bf00      	nop
 8001018:	3728      	adds	r7, #40	@ 0x28
 800101a:	46bd      	mov	sp, r7
 800101c:	bd80      	pop	{r7, pc}
 800101e:	bf00      	nop
 8001020:	40005400 	.word	0x40005400
 8001024:	40021000 	.word	0x40021000
 8001028:	48000400 	.word	0x48000400

0800102c <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800102c:	b580      	push	{r7, lr}
 800102e:	b08a      	sub	sp, #40	@ 0x28
 8001030:	af00      	add	r7, sp, #0
 8001032:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001034:	f107 0314 	add.w	r3, r7, #20
 8001038:	2200      	movs	r2, #0
 800103a:	601a      	str	r2, [r3, #0]
 800103c:	605a      	str	r2, [r3, #4]
 800103e:	609a      	str	r2, [r3, #8]
 8001040:	60da      	str	r2, [r3, #12]
 8001042:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	4a1c      	ldr	r2, [pc, #112]	@ (80010bc <HAL_TIM_Base_MspInit+0x90>)
 800104a:	4293      	cmp	r3, r2
 800104c:	d131      	bne.n	80010b2 <HAL_TIM_Base_MspInit+0x86>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800104e:	4b1c      	ldr	r3, [pc, #112]	@ (80010c0 <HAL_TIM_Base_MspInit+0x94>)
 8001050:	699b      	ldr	r3, [r3, #24]
 8001052:	4a1b      	ldr	r2, [pc, #108]	@ (80010c0 <HAL_TIM_Base_MspInit+0x94>)
 8001054:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001058:	6193      	str	r3, [r2, #24]
 800105a:	4b19      	ldr	r3, [pc, #100]	@ (80010c0 <HAL_TIM_Base_MspInit+0x94>)
 800105c:	699b      	ldr	r3, [r3, #24]
 800105e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001062:	613b      	str	r3, [r7, #16]
 8001064:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001066:	4b16      	ldr	r3, [pc, #88]	@ (80010c0 <HAL_TIM_Base_MspInit+0x94>)
 8001068:	695b      	ldr	r3, [r3, #20]
 800106a:	4a15      	ldr	r2, [pc, #84]	@ (80010c0 <HAL_TIM_Base_MspInit+0x94>)
 800106c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001070:	6153      	str	r3, [r2, #20]
 8001072:	4b13      	ldr	r3, [pc, #76]	@ (80010c0 <HAL_TIM_Base_MspInit+0x94>)
 8001074:	695b      	ldr	r3, [r3, #20]
 8001076:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800107a:	60fb      	str	r3, [r7, #12]
 800107c:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800107e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001082:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001084:	2302      	movs	r3, #2
 8001086:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001088:	2300      	movs	r3, #0
 800108a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800108c:	2300      	movs	r3, #0
 800108e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8001090:	2306      	movs	r3, #6
 8001092:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001094:	f107 0314 	add.w	r3, r7, #20
 8001098:	4619      	mov	r1, r3
 800109a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800109e:	f001 fb77 	bl	8002790 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 80010a2:	2200      	movs	r2, #0
 80010a4:	2100      	movs	r1, #0
 80010a6:	201b      	movs	r0, #27
 80010a8:	f001 fb3b 	bl	8002722 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 80010ac:	201b      	movs	r0, #27
 80010ae:	f001 fb54 	bl	800275a <HAL_NVIC_EnableIRQ>

    /* USER CODE END TIM1_MspInit 1 */

  }

}
 80010b2:	bf00      	nop
 80010b4:	3728      	adds	r7, #40	@ 0x28
 80010b6:	46bd      	mov	sp, r7
 80010b8:	bd80      	pop	{r7, pc}
 80010ba:	bf00      	nop
 80010bc:	40012c00 	.word	0x40012c00
 80010c0:	40021000 	.word	0x40021000

080010c4 <HAL_TIM_PWM_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_pwm: TIM_PWM handle pointer
  * @retval None
  */
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	b084      	sub	sp, #16
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80010d4:	d113      	bne.n	80010fe <HAL_TIM_PWM_MspInit+0x3a>
  {
    /* USER CODE BEGIN TIM2_MspInit 0 */

    /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80010d6:	4b0c      	ldr	r3, [pc, #48]	@ (8001108 <HAL_TIM_PWM_MspInit+0x44>)
 80010d8:	69db      	ldr	r3, [r3, #28]
 80010da:	4a0b      	ldr	r2, [pc, #44]	@ (8001108 <HAL_TIM_PWM_MspInit+0x44>)
 80010dc:	f043 0301 	orr.w	r3, r3, #1
 80010e0:	61d3      	str	r3, [r2, #28]
 80010e2:	4b09      	ldr	r3, [pc, #36]	@ (8001108 <HAL_TIM_PWM_MspInit+0x44>)
 80010e4:	69db      	ldr	r3, [r3, #28]
 80010e6:	f003 0301 	and.w	r3, r3, #1
 80010ea:	60fb      	str	r3, [r7, #12]
 80010ec:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80010ee:	2200      	movs	r2, #0
 80010f0:	2100      	movs	r1, #0
 80010f2:	201c      	movs	r0, #28
 80010f4:	f001 fb15 	bl	8002722 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80010f8:	201c      	movs	r0, #28
 80010fa:	f001 fb2e 	bl	800275a <HAL_NVIC_EnableIRQ>

    /* USER CODE END TIM2_MspInit 1 */

  }

}
 80010fe:	bf00      	nop
 8001100:	3710      	adds	r7, #16
 8001102:	46bd      	mov	sp, r7
 8001104:	bd80      	pop	{r7, pc}
 8001106:	bf00      	nop
 8001108:	40021000 	.word	0x40021000

0800110c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800110c:	b580      	push	{r7, lr}
 800110e:	b088      	sub	sp, #32
 8001110:	af00      	add	r7, sp, #0
 8001112:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001114:	f107 030c 	add.w	r3, r7, #12
 8001118:	2200      	movs	r2, #0
 800111a:	601a      	str	r2, [r3, #0]
 800111c:	605a      	str	r2, [r3, #4]
 800111e:	609a      	str	r2, [r3, #8]
 8001120:	60da      	str	r2, [r3, #12]
 8001122:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800112c:	d11d      	bne.n	800116a <HAL_TIM_MspPostInit+0x5e>
  {
    /* USER CODE BEGIN TIM2_MspPostInit 0 */

    /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800112e:	4b11      	ldr	r3, [pc, #68]	@ (8001174 <HAL_TIM_MspPostInit+0x68>)
 8001130:	695b      	ldr	r3, [r3, #20]
 8001132:	4a10      	ldr	r2, [pc, #64]	@ (8001174 <HAL_TIM_MspPostInit+0x68>)
 8001134:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001138:	6153      	str	r3, [r2, #20]
 800113a:	4b0e      	ldr	r3, [pc, #56]	@ (8001174 <HAL_TIM_MspPostInit+0x68>)
 800113c:	695b      	ldr	r3, [r3, #20]
 800113e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001142:	60bb      	str	r3, [r7, #8]
 8001144:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA1     ------> TIM2_CH2
    PA15     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_15;
 8001146:	f248 0302 	movw	r3, #32770	@ 0x8002
 800114a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800114c:	2302      	movs	r3, #2
 800114e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001150:	2300      	movs	r3, #0
 8001152:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001154:	2300      	movs	r3, #0
 8001156:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001158:	2301      	movs	r3, #1
 800115a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800115c:	f107 030c 	add.w	r3, r7, #12
 8001160:	4619      	mov	r1, r3
 8001162:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001166:	f001 fb13 	bl	8002790 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM2_MspPostInit 1 */

    /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 800116a:	bf00      	nop
 800116c:	3720      	adds	r7, #32
 800116e:	46bd      	mov	sp, r7
 8001170:	bd80      	pop	{r7, pc}
 8001172:	bf00      	nop
 8001174:	40021000 	.word	0x40021000

08001178 <HAL_PCD_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hpcd: PCD handle pointer
  * @retval None
  */
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001178:	b580      	push	{r7, lr}
 800117a:	b08a      	sub	sp, #40	@ 0x28
 800117c:	af00      	add	r7, sp, #0
 800117e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001180:	f107 0314 	add.w	r3, r7, #20
 8001184:	2200      	movs	r2, #0
 8001186:	601a      	str	r2, [r3, #0]
 8001188:	605a      	str	r2, [r3, #4]
 800118a:	609a      	str	r2, [r3, #8]
 800118c:	60da      	str	r2, [r3, #12]
 800118e:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB)
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	4a18      	ldr	r2, [pc, #96]	@ (80011f8 <HAL_PCD_MspInit+0x80>)
 8001196:	4293      	cmp	r3, r2
 8001198:	d129      	bne.n	80011ee <HAL_PCD_MspInit+0x76>
  {
    /* USER CODE BEGIN USB_MspInit 0 */

    /* USER CODE END USB_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800119a:	4b18      	ldr	r3, [pc, #96]	@ (80011fc <HAL_PCD_MspInit+0x84>)
 800119c:	695b      	ldr	r3, [r3, #20]
 800119e:	4a17      	ldr	r2, [pc, #92]	@ (80011fc <HAL_PCD_MspInit+0x84>)
 80011a0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80011a4:	6153      	str	r3, [r2, #20]
 80011a6:	4b15      	ldr	r3, [pc, #84]	@ (80011fc <HAL_PCD_MspInit+0x84>)
 80011a8:	695b      	ldr	r3, [r3, #20]
 80011aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80011ae:	613b      	str	r3, [r7, #16]
 80011b0:	693b      	ldr	r3, [r7, #16]
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = DM_Pin|DP_Pin;
 80011b2:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 80011b6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011b8:	2302      	movs	r3, #2
 80011ba:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011bc:	2300      	movs	r3, #0
 80011be:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80011c0:	2303      	movs	r3, #3
 80011c2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF14_USB;
 80011c4:	230e      	movs	r3, #14
 80011c6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011c8:	f107 0314 	add.w	r3, r7, #20
 80011cc:	4619      	mov	r1, r3
 80011ce:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80011d2:	f001 fadd 	bl	8002790 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 80011d6:	4b09      	ldr	r3, [pc, #36]	@ (80011fc <HAL_PCD_MspInit+0x84>)
 80011d8:	69db      	ldr	r3, [r3, #28]
 80011da:	4a08      	ldr	r2, [pc, #32]	@ (80011fc <HAL_PCD_MspInit+0x84>)
 80011dc:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80011e0:	61d3      	str	r3, [r2, #28]
 80011e2:	4b06      	ldr	r3, [pc, #24]	@ (80011fc <HAL_PCD_MspInit+0x84>)
 80011e4:	69db      	ldr	r3, [r3, #28]
 80011e6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80011ea:	60fb      	str	r3, [r7, #12]
 80011ec:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END USB_MspInit 1 */

  }

}
 80011ee:	bf00      	nop
 80011f0:	3728      	adds	r7, #40	@ 0x28
 80011f2:	46bd      	mov	sp, r7
 80011f4:	bd80      	pop	{r7, pc}
 80011f6:	bf00      	nop
 80011f8:	40005c00 	.word	0x40005c00
 80011fc:	40021000 	.word	0x40021000

08001200 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001200:	b480      	push	{r7}
 8001202:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001204:	bf00      	nop
 8001206:	e7fd      	b.n	8001204 <NMI_Handler+0x4>

08001208 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001208:	b480      	push	{r7}
 800120a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800120c:	bf00      	nop
 800120e:	e7fd      	b.n	800120c <HardFault_Handler+0x4>

08001210 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001210:	b480      	push	{r7}
 8001212:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001214:	bf00      	nop
 8001216:	e7fd      	b.n	8001214 <MemManage_Handler+0x4>

08001218 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001218:	b480      	push	{r7}
 800121a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800121c:	bf00      	nop
 800121e:	e7fd      	b.n	800121c <BusFault_Handler+0x4>

08001220 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001220:	b480      	push	{r7}
 8001222:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001224:	bf00      	nop
 8001226:	e7fd      	b.n	8001224 <UsageFault_Handler+0x4>

08001228 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001228:	b480      	push	{r7}
 800122a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800122c:	bf00      	nop
 800122e:	46bd      	mov	sp, r7
 8001230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001234:	4770      	bx	lr

08001236 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001236:	b480      	push	{r7}
 8001238:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800123a:	bf00      	nop
 800123c:	46bd      	mov	sp, r7
 800123e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001242:	4770      	bx	lr

08001244 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001244:	b480      	push	{r7}
 8001246:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001248:	bf00      	nop
 800124a:	46bd      	mov	sp, r7
 800124c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001250:	4770      	bx	lr

08001252 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001252:	b580      	push	{r7, lr}
 8001254:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001256:	f000 f899 	bl	800138c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800125a:	bf00      	nop
 800125c:	bd80      	pop	{r7, pc}
	...

08001260 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8001260:	b580      	push	{r7, lr}
 8001262:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001264:	4802      	ldr	r0, [pc, #8]	@ (8001270 <TIM1_CC_IRQHandler+0x10>)
 8001266:	f004 f871 	bl	800534c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 800126a:	bf00      	nop
 800126c:	bd80      	pop	{r7, pc}
 800126e:	bf00      	nop
 8001270:	20000174 	.word	0x20000174

08001274 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001274:	b580      	push	{r7, lr}
 8001276:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001278:	4802      	ldr	r0, [pc, #8]	@ (8001284 <TIM2_IRQHandler+0x10>)
 800127a:	f004 f867 	bl	800534c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800127e:	bf00      	nop
 8001280:	bd80      	pop	{r7, pc}
 8001282:	bf00      	nop
 8001284:	200001c0 	.word	0x200001c0

08001288 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001288:	b480      	push	{r7}
 800128a:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800128c:	4b06      	ldr	r3, [pc, #24]	@ (80012a8 <SystemInit+0x20>)
 800128e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001292:	4a05      	ldr	r2, [pc, #20]	@ (80012a8 <SystemInit+0x20>)
 8001294:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001298:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800129c:	bf00      	nop
 800129e:	46bd      	mov	sp, r7
 80012a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a4:	4770      	bx	lr
 80012a6:	bf00      	nop
 80012a8:	e000ed00 	.word	0xe000ed00

080012ac <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80012ac:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80012e4 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 80012b0:	f7ff ffea 	bl	8001288 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80012b4:	480c      	ldr	r0, [pc, #48]	@ (80012e8 <LoopForever+0x6>)
  ldr r1, =_edata
 80012b6:	490d      	ldr	r1, [pc, #52]	@ (80012ec <LoopForever+0xa>)
  ldr r2, =_sidata
 80012b8:	4a0d      	ldr	r2, [pc, #52]	@ (80012f0 <LoopForever+0xe>)
  movs r3, #0
 80012ba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80012bc:	e002      	b.n	80012c4 <LoopCopyDataInit>

080012be <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80012be:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80012c0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80012c2:	3304      	adds	r3, #4

080012c4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80012c4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80012c6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80012c8:	d3f9      	bcc.n	80012be <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80012ca:	4a0a      	ldr	r2, [pc, #40]	@ (80012f4 <LoopForever+0x12>)
  ldr r4, =_ebss
 80012cc:	4c0a      	ldr	r4, [pc, #40]	@ (80012f8 <LoopForever+0x16>)
  movs r3, #0
 80012ce:	2300      	movs	r3, #0
  b LoopFillZerobss
 80012d0:	e001      	b.n	80012d6 <LoopFillZerobss>

080012d2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80012d2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80012d4:	3204      	adds	r2, #4

080012d6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80012d6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80012d8:	d3fb      	bcc.n	80012d2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80012da:	f005 fa4f 	bl	800677c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80012de:	f7ff f881 	bl	80003e4 <main>

080012e2 <LoopForever>:

LoopForever:
    b LoopForever
 80012e2:	e7fe      	b.n	80012e2 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80012e4:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 80012e8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80012ec:	2000004c 	.word	0x2000004c
  ldr r2, =_sidata
 80012f0:	0800682c 	.word	0x0800682c
  ldr r2, =_sbss
 80012f4:	2000004c 	.word	0x2000004c
  ldr r4, =_ebss
 80012f8:	200004fc 	.word	0x200004fc

080012fc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80012fc:	e7fe      	b.n	80012fc <ADC1_2_IRQHandler>
	...

08001300 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001300:	b580      	push	{r7, lr}
 8001302:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001304:	4b08      	ldr	r3, [pc, #32]	@ (8001328 <HAL_Init+0x28>)
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	4a07      	ldr	r2, [pc, #28]	@ (8001328 <HAL_Init+0x28>)
 800130a:	f043 0310 	orr.w	r3, r3, #16
 800130e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001310:	2003      	movs	r0, #3
 8001312:	f001 f9fb 	bl	800270c <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001316:	2000      	movs	r0, #0
 8001318:	f000 f808 	bl	800132c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800131c:	f7ff fda0 	bl	8000e60 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001320:	2300      	movs	r3, #0
}
 8001322:	4618      	mov	r0, r3
 8001324:	bd80      	pop	{r7, pc}
 8001326:	bf00      	nop
 8001328:	40022000 	.word	0x40022000

0800132c <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800132c:	b580      	push	{r7, lr}
 800132e:	b082      	sub	sp, #8
 8001330:	af00      	add	r7, sp, #0
 8001332:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001334:	4b12      	ldr	r3, [pc, #72]	@ (8001380 <HAL_InitTick+0x54>)
 8001336:	681a      	ldr	r2, [r3, #0]
 8001338:	4b12      	ldr	r3, [pc, #72]	@ (8001384 <HAL_InitTick+0x58>)
 800133a:	781b      	ldrb	r3, [r3, #0]
 800133c:	4619      	mov	r1, r3
 800133e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001342:	fbb3 f3f1 	udiv	r3, r3, r1
 8001346:	fbb2 f3f3 	udiv	r3, r2, r3
 800134a:	4618      	mov	r0, r3
 800134c:	f001 fa13 	bl	8002776 <HAL_SYSTICK_Config>
 8001350:	4603      	mov	r3, r0
 8001352:	2b00      	cmp	r3, #0
 8001354:	d001      	beq.n	800135a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001356:	2301      	movs	r3, #1
 8001358:	e00e      	b.n	8001378 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	2b0f      	cmp	r3, #15
 800135e:	d80a      	bhi.n	8001376 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001360:	2200      	movs	r2, #0
 8001362:	6879      	ldr	r1, [r7, #4]
 8001364:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001368:	f001 f9db 	bl	8002722 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800136c:	4a06      	ldr	r2, [pc, #24]	@ (8001388 <HAL_InitTick+0x5c>)
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8001372:	2300      	movs	r3, #0
 8001374:	e000      	b.n	8001378 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001376:	2301      	movs	r3, #1
}
 8001378:	4618      	mov	r0, r3
 800137a:	3708      	adds	r7, #8
 800137c:	46bd      	mov	sp, r7
 800137e:	bd80      	pop	{r7, pc}
 8001380:	20000040 	.word	0x20000040
 8001384:	20000048 	.word	0x20000048
 8001388:	20000044 	.word	0x20000044

0800138c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800138c:	b480      	push	{r7}
 800138e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001390:	4b06      	ldr	r3, [pc, #24]	@ (80013ac <HAL_IncTick+0x20>)
 8001392:	781b      	ldrb	r3, [r3, #0]
 8001394:	461a      	mov	r2, r3
 8001396:	4b06      	ldr	r3, [pc, #24]	@ (80013b0 <HAL_IncTick+0x24>)
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	4413      	add	r3, r2
 800139c:	4a04      	ldr	r2, [pc, #16]	@ (80013b0 <HAL_IncTick+0x24>)
 800139e:	6013      	str	r3, [r2, #0]
}
 80013a0:	bf00      	nop
 80013a2:	46bd      	mov	sp, r7
 80013a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a8:	4770      	bx	lr
 80013aa:	bf00      	nop
 80013ac:	20000048 	.word	0x20000048
 80013b0:	200004f8 	.word	0x200004f8

080013b4 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80013b4:	b480      	push	{r7}
 80013b6:	af00      	add	r7, sp, #0
  return uwTick;  
 80013b8:	4b03      	ldr	r3, [pc, #12]	@ (80013c8 <HAL_GetTick+0x14>)
 80013ba:	681b      	ldr	r3, [r3, #0]
}
 80013bc:	4618      	mov	r0, r3
 80013be:	46bd      	mov	sp, r7
 80013c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c4:	4770      	bx	lr
 80013c6:	bf00      	nop
 80013c8:	200004f8 	.word	0x200004f8

080013cc <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80013cc:	b580      	push	{r7, lr}
 80013ce:	b084      	sub	sp, #16
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80013d4:	f7ff ffee 	bl	80013b4 <HAL_GetTick>
 80013d8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80013de:	68fb      	ldr	r3, [r7, #12]
 80013e0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80013e4:	d005      	beq.n	80013f2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80013e6:	4b0a      	ldr	r3, [pc, #40]	@ (8001410 <HAL_Delay+0x44>)
 80013e8:	781b      	ldrb	r3, [r3, #0]
 80013ea:	461a      	mov	r2, r3
 80013ec:	68fb      	ldr	r3, [r7, #12]
 80013ee:	4413      	add	r3, r2
 80013f0:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80013f2:	bf00      	nop
 80013f4:	f7ff ffde 	bl	80013b4 <HAL_GetTick>
 80013f8:	4602      	mov	r2, r0
 80013fa:	68bb      	ldr	r3, [r7, #8]
 80013fc:	1ad3      	subs	r3, r2, r3
 80013fe:	68fa      	ldr	r2, [r7, #12]
 8001400:	429a      	cmp	r2, r3
 8001402:	d8f7      	bhi.n	80013f4 <HAL_Delay+0x28>
  {
  }
}
 8001404:	bf00      	nop
 8001406:	bf00      	nop
 8001408:	3710      	adds	r7, #16
 800140a:	46bd      	mov	sp, r7
 800140c:	bd80      	pop	{r7, pc}
 800140e:	bf00      	nop
 8001410:	20000048 	.word	0x20000048

08001414 <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001414:	b580      	push	{r7, lr}
 8001416:	b09a      	sub	sp, #104	@ 0x68
 8001418:	af00      	add	r7, sp, #0
 800141a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800141c:	2300      	movs	r3, #0
 800141e:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 8001422:	2300      	movs	r3, #0
 8001424:	663b      	str	r3, [r7, #96]	@ 0x60
  __IO uint32_t wait_loop_index = 0U;
 8001426:	2300      	movs	r3, #0
 8001428:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	2b00      	cmp	r3, #0
 800142e:	d101      	bne.n	8001434 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8001430:	2301      	movs	r3, #1
 8001432:	e1c9      	b.n	80017c8 <HAL_ADC_Init+0x3b4>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	691b      	ldr	r3, [r3, #16]
 8001438:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800143e:	f003 0310 	and.w	r3, r3, #16
 8001442:	2b00      	cmp	r3, #0
 8001444:	d176      	bne.n	8001534 <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800144a:	2b00      	cmp	r3, #0
 800144c:	d152      	bne.n	80014f4 <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	2200      	movs	r2, #0
 8001452:	645a      	str	r2, [r3, #68]	@ 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	2200      	movs	r2, #0
 8001458:	64da      	str	r2, [r3, #76]	@ 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	2200      	movs	r2, #0
 800145e:	649a      	str	r2, [r3, #72]	@ 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	2200      	movs	r2, #0
 8001464:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001468:	6878      	ldr	r0, [r7, #4]
 800146a:	f7ff fd1d 	bl	8000ea8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	689b      	ldr	r3, [r3, #8]
 8001474:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001478:	2b00      	cmp	r3, #0
 800147a:	d13b      	bne.n	80014f4 <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 800147c:	6878      	ldr	r0, [r7, #4]
 800147e:	f001 f80f 	bl	80024a0 <ADC_Disable>
 8001482:	4603      	mov	r3, r0
 8001484:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800148c:	f003 0310 	and.w	r3, r3, #16
 8001490:	2b00      	cmp	r3, #0
 8001492:	d12f      	bne.n	80014f4 <HAL_ADC_Init+0xe0>
 8001494:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8001498:	2b00      	cmp	r3, #0
 800149a:	d12b      	bne.n	80014f4 <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014a0:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80014a4:	f023 0302 	bic.w	r3, r3, #2
 80014a8:	f043 0202 	orr.w	r2, r3, #2
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	641a      	str	r2, [r3, #64]	@ 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	689a      	ldr	r2, [r3, #8]
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80014be:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	689a      	ldr	r2, [r3, #8]
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 80014ce:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80014d0:	4b86      	ldr	r3, [pc, #536]	@ (80016ec <HAL_ADC_Init+0x2d8>)
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	4a86      	ldr	r2, [pc, #536]	@ (80016f0 <HAL_ADC_Init+0x2dc>)
 80014d6:	fba2 2303 	umull	r2, r3, r2, r3
 80014da:	0c9a      	lsrs	r2, r3, #18
 80014dc:	4613      	mov	r3, r2
 80014de:	009b      	lsls	r3, r3, #2
 80014e0:	4413      	add	r3, r2
 80014e2:	005b      	lsls	r3, r3, #1
 80014e4:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80014e6:	e002      	b.n	80014ee <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 80014e8:	68bb      	ldr	r3, [r7, #8]
 80014ea:	3b01      	subs	r3, #1
 80014ec:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80014ee:	68bb      	ldr	r3, [r7, #8]
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d1f9      	bne.n	80014e8 <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	689b      	ldr	r3, [r3, #8]
 80014fa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d007      	beq.n	8001512 <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	689b      	ldr	r3, [r3, #8]
 8001508:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 800150c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001510:	d110      	bne.n	8001534 <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001516:	f023 0312 	bic.w	r3, r3, #18
 800151a:	f043 0210 	orr.w	r2, r3, #16
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	641a      	str	r2, [r3, #64]	@ 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001526:	f043 0201 	orr.w	r2, r3, #1
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	645a      	str	r2, [r3, #68]	@ 0x44
      
      tmp_hal_status = HAL_ERROR;
 800152e:	2301      	movs	r3, #1
 8001530:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001538:	f003 0310 	and.w	r3, r3, #16
 800153c:	2b00      	cmp	r3, #0
 800153e:	f040 8136 	bne.w	80017ae <HAL_ADC_Init+0x39a>
 8001542:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8001546:	2b00      	cmp	r3, #0
 8001548:	f040 8131 	bne.w	80017ae <HAL_ADC_Init+0x39a>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	689b      	ldr	r3, [r3, #8]
 8001552:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 8001556:	2b00      	cmp	r3, #0
 8001558:	f040 8129 	bne.w	80017ae <HAL_ADC_Init+0x39a>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001560:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8001564:	f043 0202 	orr.w	r2, r3, #2
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	641a      	str	r2, [r3, #64]	@ 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001574:	d004      	beq.n	8001580 <HAL_ADC_Init+0x16c>
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	4a5e      	ldr	r2, [pc, #376]	@ (80016f4 <HAL_ADC_Init+0x2e0>)
 800157c:	4293      	cmp	r3, r2
 800157e:	d101      	bne.n	8001584 <HAL_ADC_Init+0x170>
 8001580:	4b5d      	ldr	r3, [pc, #372]	@ (80016f8 <HAL_ADC_Init+0x2e4>)
 8001582:	e000      	b.n	8001586 <HAL_ADC_Init+0x172>
 8001584:	4b5d      	ldr	r3, [pc, #372]	@ (80016fc <HAL_ADC_Init+0x2e8>)
 8001586:	65fb      	str	r3, [r7, #92]	@ 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001590:	d102      	bne.n	8001598 <HAL_ADC_Init+0x184>
 8001592:	4b58      	ldr	r3, [pc, #352]	@ (80016f4 <HAL_ADC_Init+0x2e0>)
 8001594:	60fb      	str	r3, [r7, #12]
 8001596:	e01a      	b.n	80015ce <HAL_ADC_Init+0x1ba>
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	4a55      	ldr	r2, [pc, #340]	@ (80016f4 <HAL_ADC_Init+0x2e0>)
 800159e:	4293      	cmp	r3, r2
 80015a0:	d103      	bne.n	80015aa <HAL_ADC_Init+0x196>
 80015a2:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80015a6:	60fb      	str	r3, [r7, #12]
 80015a8:	e011      	b.n	80015ce <HAL_ADC_Init+0x1ba>
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	4a54      	ldr	r2, [pc, #336]	@ (8001700 <HAL_ADC_Init+0x2ec>)
 80015b0:	4293      	cmp	r3, r2
 80015b2:	d102      	bne.n	80015ba <HAL_ADC_Init+0x1a6>
 80015b4:	4b53      	ldr	r3, [pc, #332]	@ (8001704 <HAL_ADC_Init+0x2f0>)
 80015b6:	60fb      	str	r3, [r7, #12]
 80015b8:	e009      	b.n	80015ce <HAL_ADC_Init+0x1ba>
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	4a51      	ldr	r2, [pc, #324]	@ (8001704 <HAL_ADC_Init+0x2f0>)
 80015c0:	4293      	cmp	r3, r2
 80015c2:	d102      	bne.n	80015ca <HAL_ADC_Init+0x1b6>
 80015c4:	4b4e      	ldr	r3, [pc, #312]	@ (8001700 <HAL_ADC_Init+0x2ec>)
 80015c6:	60fb      	str	r3, [r7, #12]
 80015c8:	e001      	b.n	80015ce <HAL_ADC_Init+0x1ba>
 80015ca:	2300      	movs	r3, #0
 80015cc:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	689b      	ldr	r3, [r3, #8]
 80015d4:	f003 0303 	and.w	r3, r3, #3
 80015d8:	2b01      	cmp	r3, #1
 80015da:	d108      	bne.n	80015ee <HAL_ADC_Init+0x1da>
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	f003 0301 	and.w	r3, r3, #1
 80015e6:	2b01      	cmp	r3, #1
 80015e8:	d101      	bne.n	80015ee <HAL_ADC_Init+0x1da>
 80015ea:	2301      	movs	r3, #1
 80015ec:	e000      	b.n	80015f0 <HAL_ADC_Init+0x1dc>
 80015ee:	2300      	movs	r3, #0
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d11c      	bne.n	800162e <HAL_ADC_Init+0x21a>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80015f4:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d010      	beq.n	800161c <HAL_ADC_Init+0x208>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 80015fa:	68fb      	ldr	r3, [r7, #12]
 80015fc:	689b      	ldr	r3, [r3, #8]
 80015fe:	f003 0303 	and.w	r3, r3, #3
 8001602:	2b01      	cmp	r3, #1
 8001604:	d107      	bne.n	8001616 <HAL_ADC_Init+0x202>
 8001606:	68fb      	ldr	r3, [r7, #12]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	f003 0301 	and.w	r3, r3, #1
 800160e:	2b01      	cmp	r3, #1
 8001610:	d101      	bne.n	8001616 <HAL_ADC_Init+0x202>
 8001612:	2301      	movs	r3, #1
 8001614:	e000      	b.n	8001618 <HAL_ADC_Init+0x204>
 8001616:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001618:	2b00      	cmp	r3, #0
 800161a:	d108      	bne.n	800162e <HAL_ADC_Init+0x21a>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 800161c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800161e:	689b      	ldr	r3, [r3, #8]
 8001620:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	685b      	ldr	r3, [r3, #4]
 8001628:	431a      	orrs	r2, r3
 800162a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800162c:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	7e5b      	ldrb	r3, [r3, #25]
 8001632:	035b      	lsls	r3, r3, #13
 8001634:	687a      	ldr	r2, [r7, #4]
 8001636:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8001638:	2a01      	cmp	r2, #1
 800163a:	d002      	beq.n	8001642 <HAL_ADC_Init+0x22e>
 800163c:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001640:	e000      	b.n	8001644 <HAL_ADC_Init+0x230>
 8001642:	2200      	movs	r2, #0
 8001644:	431a      	orrs	r2, r3
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	68db      	ldr	r3, [r3, #12]
 800164a:	431a      	orrs	r2, r3
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	689b      	ldr	r3, [r3, #8]
 8001650:	4313      	orrs	r3, r2
 8001652:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8001654:	4313      	orrs	r3, r2
 8001656:	663b      	str	r3, [r7, #96]	@ 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800165e:	2b01      	cmp	r3, #1
 8001660:	d11b      	bne.n	800169a <HAL_ADC_Init+0x286>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	7e5b      	ldrb	r3, [r3, #25]
 8001666:	2b00      	cmp	r3, #0
 8001668:	d109      	bne.n	800167e <HAL_ADC_Init+0x26a>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800166e:	3b01      	subs	r3, #1
 8001670:	045a      	lsls	r2, r3, #17
 8001672:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8001674:	4313      	orrs	r3, r2
 8001676:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800167a:	663b      	str	r3, [r7, #96]	@ 0x60
 800167c:	e00d      	b.n	800169a <HAL_ADC_Init+0x286>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001682:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8001686:	f043 0220 	orr.w	r2, r3, #32
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	641a      	str	r2, [r3, #64]	@ 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001692:	f043 0201 	orr.w	r2, r3, #1
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	645a      	str	r2, [r3, #68]	@ 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800169e:	2b01      	cmp	r3, #1
 80016a0:	d03a      	beq.n	8001718 <HAL_ADC_Init+0x304>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	4a16      	ldr	r2, [pc, #88]	@ (8001700 <HAL_ADC_Init+0x2ec>)
 80016a8:	4293      	cmp	r3, r2
 80016aa:	d004      	beq.n	80016b6 <HAL_ADC_Init+0x2a2>
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	4a14      	ldr	r2, [pc, #80]	@ (8001704 <HAL_ADC_Init+0x2f0>)
 80016b2:	4293      	cmp	r3, r2
 80016b4:	d128      	bne.n	8001708 <HAL_ADC_Init+0x2f4>
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80016ba:	f5b3 7f30 	cmp.w	r3, #704	@ 0x2c0
 80016be:	d012      	beq.n	80016e6 <HAL_ADC_Init+0x2d2>
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80016c4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80016c8:	d00a      	beq.n	80016e0 <HAL_ADC_Init+0x2cc>
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80016ce:	f5b3 7fe0 	cmp.w	r3, #448	@ 0x1c0
 80016d2:	d002      	beq.n	80016da <HAL_ADC_Init+0x2c6>
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80016d8:	e018      	b.n	800170c <HAL_ADC_Init+0x2f8>
 80016da:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80016de:	e015      	b.n	800170c <HAL_ADC_Init+0x2f8>
 80016e0:	f44f 7330 	mov.w	r3, #704	@ 0x2c0
 80016e4:	e012      	b.n	800170c <HAL_ADC_Init+0x2f8>
 80016e6:	f44f 73e0 	mov.w	r3, #448	@ 0x1c0
 80016ea:	e00f      	b.n	800170c <HAL_ADC_Init+0x2f8>
 80016ec:	20000040 	.word	0x20000040
 80016f0:	431bde83 	.word	0x431bde83
 80016f4:	50000100 	.word	0x50000100
 80016f8:	50000300 	.word	0x50000300
 80016fc:	50000700 	.word	0x50000700
 8001700:	50000400 	.word	0x50000400
 8001704:	50000500 	.word	0x50000500
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800170c:	687a      	ldr	r2, [r7, #4]
 800170e:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8001710:	4313      	orrs	r3, r2
 8001712:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8001714:	4313      	orrs	r3, r2
 8001716:	663b      	str	r3, [r7, #96]	@ 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	689b      	ldr	r3, [r3, #8]
 800171e:	f003 030c 	and.w	r3, r3, #12
 8001722:	2b00      	cmp	r3, #0
 8001724:	d114      	bne.n	8001750 <HAL_ADC_Init+0x33c>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	68db      	ldr	r3, [r3, #12]
 800172c:	687a      	ldr	r2, [r7, #4]
 800172e:	6812      	ldr	r2, [r2, #0]
 8001730:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8001734:	f023 0302 	bic.w	r3, r3, #2
 8001738:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	7e1b      	ldrb	r3, [r3, #24]
 800173e:	039a      	lsls	r2, r3, #14
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8001746:	005b      	lsls	r3, r3, #1
 8001748:	4313      	orrs	r3, r2
 800174a:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800174c:	4313      	orrs	r3, r2
 800174e:	663b      	str	r3, [r7, #96]	@ 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	68da      	ldr	r2, [r3, #12]
 8001756:	4b1e      	ldr	r3, [pc, #120]	@ (80017d0 <HAL_ADC_Init+0x3bc>)
 8001758:	4013      	ands	r3, r2
 800175a:	687a      	ldr	r2, [r7, #4]
 800175c:	6812      	ldr	r2, [r2, #0]
 800175e:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 8001760:	430b      	orrs	r3, r1
 8001762:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	691b      	ldr	r3, [r3, #16]
 8001768:	2b01      	cmp	r3, #1
 800176a:	d10c      	bne.n	8001786 <HAL_ADC_Init+0x372>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001772:	f023 010f 	bic.w	r1, r3, #15
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	69db      	ldr	r3, [r3, #28]
 800177a:	1e5a      	subs	r2, r3, #1
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	430a      	orrs	r2, r1
 8001782:	631a      	str	r2, [r3, #48]	@ 0x30
 8001784:	e007      	b.n	8001796 <HAL_ADC_Init+0x382>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	f022 020f 	bic.w	r2, r2, #15
 8001794:	631a      	str	r2, [r3, #48]	@ 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	2200      	movs	r2, #0
 800179a:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017a0:	f023 0303 	bic.w	r3, r3, #3
 80017a4:	f043 0201 	orr.w	r2, r3, #1
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	641a      	str	r2, [r3, #64]	@ 0x40
 80017ac:	e00a      	b.n	80017c4 <HAL_ADC_Init+0x3b0>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017b2:	f023 0312 	bic.w	r3, r3, #18
 80017b6:	f043 0210 	orr.w	r2, r3, #16
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 80017be:	2301      	movs	r3, #1
 80017c0:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 80017c4:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
}
 80017c8:	4618      	mov	r0, r3
 80017ca:	3768      	adds	r7, #104	@ 0x68
 80017cc:	46bd      	mov	sp, r7
 80017ce:	bd80      	pop	{r7, pc}
 80017d0:	fff0c007 	.word	0xfff0c007

080017d4 <HAL_ADC_Start>:
  *         if ADC is master, ADC is enabled and multimode conversion is started.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80017d4:	b580      	push	{r7, lr}
 80017d6:	b084      	sub	sp, #16
 80017d8:	af00      	add	r7, sp, #0
 80017da:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80017dc:	2300      	movs	r3, #0
 80017de:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	689b      	ldr	r3, [r3, #8]
 80017e6:	f003 0304 	and.w	r3, r3, #4
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	f040 80f9 	bne.w	80019e2 <HAL_ADC_Start+0x20e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80017f6:	2b01      	cmp	r3, #1
 80017f8:	d101      	bne.n	80017fe <HAL_ADC_Start+0x2a>
 80017fa:	2302      	movs	r3, #2
 80017fc:	e0f4      	b.n	80019e8 <HAL_ADC_Start+0x214>
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	2201      	movs	r2, #1
 8001802:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8001806:	6878      	ldr	r0, [r7, #4]
 8001808:	f000 fde6 	bl	80023d8 <ADC_Enable>
 800180c:	4603      	mov	r3, r0
 800180e:	73fb      	strb	r3, [r7, #15]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001810:	7bfb      	ldrb	r3, [r7, #15]
 8001812:	2b00      	cmp	r3, #0
 8001814:	f040 80e0 	bne.w	80019d8 <HAL_ADC_Start+0x204>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800181c:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8001820:	f023 0301 	bic.w	r3, r3, #1
 8001824:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	641a      	str	r2, [r3, #64]	@ 0x40
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Set group injected state (from auto-injection) and multimode state   */
      /* for all cases of multimode: independent mode, multimode ADC master   */
      /* or multimode ADC slave (for devices with several ADCs):              */
      if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001834:	d004      	beq.n	8001840 <HAL_ADC_Start+0x6c>
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	4a6d      	ldr	r2, [pc, #436]	@ (80019f0 <HAL_ADC_Start+0x21c>)
 800183c:	4293      	cmp	r3, r2
 800183e:	d106      	bne.n	800184e <HAL_ADC_Start+0x7a>
 8001840:	4b6c      	ldr	r3, [pc, #432]	@ (80019f4 <HAL_ADC_Start+0x220>)
 8001842:	689b      	ldr	r3, [r3, #8]
 8001844:	f003 031f 	and.w	r3, r3, #31
 8001848:	2b00      	cmp	r3, #0
 800184a:	d010      	beq.n	800186e <HAL_ADC_Start+0x9a>
 800184c:	e005      	b.n	800185a <HAL_ADC_Start+0x86>
 800184e:	4b6a      	ldr	r3, [pc, #424]	@ (80019f8 <HAL_ADC_Start+0x224>)
 8001850:	689b      	ldr	r3, [r3, #8]
 8001852:	f003 031f 	and.w	r3, r3, #31
 8001856:	2b00      	cmp	r3, #0
 8001858:	d009      	beq.n	800186e <HAL_ADC_Start+0x9a>
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001862:	d004      	beq.n	800186e <HAL_ADC_Start+0x9a>
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	4a64      	ldr	r2, [pc, #400]	@ (80019fc <HAL_ADC_Start+0x228>)
 800186a:	4293      	cmp	r3, r2
 800186c:	d115      	bne.n	800189a <HAL_ADC_Start+0xc6>
      {
        /* Set ADC state (ADC independent or master) */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001872:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	641a      	str	r2, [r3, #64]	@ 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	68db      	ldr	r3, [r3, #12]
 8001880:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001884:	2b00      	cmp	r3, #0
 8001886:	d036      	beq.n	80018f6 <HAL_ADC_Start+0x122>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800188c:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001890:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	641a      	str	r2, [r3, #64]	@ 0x40
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8001898:	e02d      	b.n	80018f6 <HAL_ADC_Start+0x122>
        }
      }
      else
      {
        /* Set ADC state (ADC slave) */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800189e:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	641a      	str	r2, [r3, #64]	@ 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80018ae:	d004      	beq.n	80018ba <HAL_ADC_Start+0xe6>
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	4a4e      	ldr	r2, [pc, #312]	@ (80019f0 <HAL_ADC_Start+0x21c>)
 80018b6:	4293      	cmp	r3, r2
 80018b8:	d10a      	bne.n	80018d0 <HAL_ADC_Start+0xfc>
 80018ba:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80018be:	68db      	ldr	r3, [r3, #12]
 80018c0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	bf14      	ite	ne
 80018c8:	2301      	movne	r3, #1
 80018ca:	2300      	moveq	r3, #0
 80018cc:	b2db      	uxtb	r3, r3
 80018ce:	e008      	b.n	80018e2 <HAL_ADC_Start+0x10e>
 80018d0:	4b4a      	ldr	r3, [pc, #296]	@ (80019fc <HAL_ADC_Start+0x228>)
 80018d2:	68db      	ldr	r3, [r3, #12]
 80018d4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80018d8:	2b00      	cmp	r3, #0
 80018da:	bf14      	ite	ne
 80018dc:	2301      	movne	r3, #1
 80018de:	2300      	moveq	r3, #0
 80018e0:	b2db      	uxtb	r3, r3
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d007      	beq.n	80018f6 <HAL_ADC_Start+0x122>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018ea:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80018ee:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	641a      	str	r2, [r3, #64]	@ 0x40
        }
      }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018fa:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80018fe:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001902:	d106      	bne.n	8001912 <HAL_ADC_Start+0x13e>
      {
        /* Reset ADC error code fields related to conversions on group regular*/
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001908:	f023 0206 	bic.w	r2, r3, #6
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	645a      	str	r2, [r3, #68]	@ 0x44
 8001910:	e002      	b.n	8001918 <HAL_ADC_Start+0x144>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	2200      	movs	r2, #0
 8001916:	645a      	str	r2, [r3, #68]	@ 0x44
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	2200      	movs	r2, #0
 800191c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	221c      	movs	r2, #28
 8001926:	601a      	str	r2, [r3, #0]
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Case of multimode enabled (for devices with several ADCs):           */
      /*  - if ADC is slave, ADC is enabled only (conversion is not started). */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001930:	d004      	beq.n	800193c <HAL_ADC_Start+0x168>
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	4a2e      	ldr	r2, [pc, #184]	@ (80019f0 <HAL_ADC_Start+0x21c>)
 8001938:	4293      	cmp	r3, r2
 800193a:	d106      	bne.n	800194a <HAL_ADC_Start+0x176>
 800193c:	4b2d      	ldr	r3, [pc, #180]	@ (80019f4 <HAL_ADC_Start+0x220>)
 800193e:	689b      	ldr	r3, [r3, #8]
 8001940:	f003 031f 	and.w	r3, r3, #31
 8001944:	2b00      	cmp	r3, #0
 8001946:	d03e      	beq.n	80019c6 <HAL_ADC_Start+0x1f2>
 8001948:	e005      	b.n	8001956 <HAL_ADC_Start+0x182>
 800194a:	4b2b      	ldr	r3, [pc, #172]	@ (80019f8 <HAL_ADC_Start+0x224>)
 800194c:	689b      	ldr	r3, [r3, #8]
 800194e:	f003 031f 	and.w	r3, r3, #31
 8001952:	2b00      	cmp	r3, #0
 8001954:	d037      	beq.n	80019c6 <HAL_ADC_Start+0x1f2>
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800195e:	d004      	beq.n	800196a <HAL_ADC_Start+0x196>
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	4a22      	ldr	r2, [pc, #136]	@ (80019f0 <HAL_ADC_Start+0x21c>)
 8001966:	4293      	cmp	r3, r2
 8001968:	d106      	bne.n	8001978 <HAL_ADC_Start+0x1a4>
 800196a:	4b22      	ldr	r3, [pc, #136]	@ (80019f4 <HAL_ADC_Start+0x220>)
 800196c:	689b      	ldr	r3, [r3, #8]
 800196e:	f003 031f 	and.w	r3, r3, #31
 8001972:	2b05      	cmp	r3, #5
 8001974:	d027      	beq.n	80019c6 <HAL_ADC_Start+0x1f2>
 8001976:	e005      	b.n	8001984 <HAL_ADC_Start+0x1b0>
 8001978:	4b1f      	ldr	r3, [pc, #124]	@ (80019f8 <HAL_ADC_Start+0x224>)
 800197a:	689b      	ldr	r3, [r3, #8]
 800197c:	f003 031f 	and.w	r3, r3, #31
 8001980:	2b05      	cmp	r3, #5
 8001982:	d020      	beq.n	80019c6 <HAL_ADC_Start+0x1f2>
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800198c:	d004      	beq.n	8001998 <HAL_ADC_Start+0x1c4>
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	4a17      	ldr	r2, [pc, #92]	@ (80019f0 <HAL_ADC_Start+0x21c>)
 8001994:	4293      	cmp	r3, r2
 8001996:	d106      	bne.n	80019a6 <HAL_ADC_Start+0x1d2>
 8001998:	4b16      	ldr	r3, [pc, #88]	@ (80019f4 <HAL_ADC_Start+0x220>)
 800199a:	689b      	ldr	r3, [r3, #8]
 800199c:	f003 031f 	and.w	r3, r3, #31
 80019a0:	2b09      	cmp	r3, #9
 80019a2:	d010      	beq.n	80019c6 <HAL_ADC_Start+0x1f2>
 80019a4:	e005      	b.n	80019b2 <HAL_ADC_Start+0x1de>
 80019a6:	4b14      	ldr	r3, [pc, #80]	@ (80019f8 <HAL_ADC_Start+0x224>)
 80019a8:	689b      	ldr	r3, [r3, #8]
 80019aa:	f003 031f 	and.w	r3, r3, #31
 80019ae:	2b09      	cmp	r3, #9
 80019b0:	d009      	beq.n	80019c6 <HAL_ADC_Start+0x1f2>
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80019ba:	d004      	beq.n	80019c6 <HAL_ADC_Start+0x1f2>
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	4a0e      	ldr	r2, [pc, #56]	@ (80019fc <HAL_ADC_Start+0x228>)
 80019c2:	4293      	cmp	r3, r2
 80019c4:	d10f      	bne.n	80019e6 <HAL_ADC_Start+0x212>
      {
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	689a      	ldr	r2, [r3, #8]
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	f042 0204 	orr.w	r2, r2, #4
 80019d4:	609a      	str	r2, [r3, #8]
 80019d6:	e006      	b.n	80019e6 <HAL_ADC_Start+0x212>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	2200      	movs	r2, #0
 80019dc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 80019e0:	e001      	b.n	80019e6 <HAL_ADC_Start+0x212>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80019e2:	2302      	movs	r3, #2
 80019e4:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80019e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80019e8:	4618      	mov	r0, r3
 80019ea:	3710      	adds	r7, #16
 80019ec:	46bd      	mov	sp, r7
 80019ee:	bd80      	pop	{r7, pc}
 80019f0:	50000100 	.word	0x50000100
 80019f4:	50000300 	.word	0x50000300
 80019f8:	50000700 	.word	0x50000700
 80019fc:	50000400 	.word	0x50000400

08001a00 <HAL_ADC_PollForConversion>:
  * @note   Depending on init parameter "EOCSelection", flags EOS or EOC is 
  *         checked and cleared depending on autodelay status (bit AUTDLY).     
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8001a00:	b580      	push	{r7, lr}
 8001a02:	b086      	sub	sp, #24
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	6078      	str	r0, [r7, #4]
 8001a08:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_EOC;
  ADC_Common_TypeDef *tmpADC_Common;
  uint32_t tmp_cfgr     = 0x0U;
 8001a0a:	2300      	movs	r3, #0
 8001a0c:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

/* If end of conversion selected to end of sequence */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	695b      	ldr	r3, [r3, #20]
 8001a12:	2b08      	cmp	r3, #8
 8001a14:	d102      	bne.n	8001a1c <HAL_ADC_PollForConversion+0x1c>
  {
    tmp_Flag_EOC = ADC_FLAG_EOS;
 8001a16:	2308      	movs	r3, #8
 8001a18:	617b      	str	r3, [r7, #20]
 8001a1a:	e03a      	b.n	8001a92 <HAL_ADC_PollForConversion+0x92>
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001a24:	d004      	beq.n	8001a30 <HAL_ADC_PollForConversion+0x30>
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	4a72      	ldr	r2, [pc, #456]	@ (8001bf4 <HAL_ADC_PollForConversion+0x1f4>)
 8001a2c:	4293      	cmp	r3, r2
 8001a2e:	d101      	bne.n	8001a34 <HAL_ADC_PollForConversion+0x34>
 8001a30:	4b71      	ldr	r3, [pc, #452]	@ (8001bf8 <HAL_ADC_PollForConversion+0x1f8>)
 8001a32:	e000      	b.n	8001a36 <HAL_ADC_PollForConversion+0x36>
 8001a34:	4b71      	ldr	r3, [pc, #452]	@ (8001bfc <HAL_ADC_PollForConversion+0x1fc>)
 8001a36:	60fb      	str	r3, [r7, #12]
    
    /* Check DMA configuration, depending on MultiMode set or not */
    if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI) == ADC_MODE_INDEPENDENT)
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	689b      	ldr	r3, [r3, #8]
 8001a3c:	f003 031f 	and.w	r3, r3, #31
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d112      	bne.n	8001a6a <HAL_ADC_PollForConversion+0x6a>
    {
      if (HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_DMAEN))
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	68db      	ldr	r3, [r3, #12]
 8001a4a:	f003 0301 	and.w	r3, r3, #1
 8001a4e:	2b01      	cmp	r3, #1
 8001a50:	d11d      	bne.n	8001a8e <HAL_ADC_PollForConversion+0x8e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a56:	f043 0220 	orr.w	r2, r3, #32
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	641a      	str	r2, [r3, #64]	@ 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	2200      	movs	r2, #0
 8001a62:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
        
        return HAL_ERROR;
 8001a66:	2301      	movs	r3, #1
 8001a68:	e0bf      	b.n	8001bea <HAL_ADC_PollForConversion+0x1ea>
      }
    }
    else
    {
      /* MultiMode is enabled, Common Control Register MDMA bits must be checked */
      if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA) != RESET)
 8001a6a:	68fb      	ldr	r3, [r7, #12]
 8001a6c:	689b      	ldr	r3, [r3, #8]
 8001a6e:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d00b      	beq.n	8001a8e <HAL_ADC_PollForConversion+0x8e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a7a:	f043 0220 	orr.w	r2, r3, #32
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	641a      	str	r2, [r3, #64]	@ 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	2200      	movs	r2, #0
 8001a86:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
        
        return HAL_ERROR;
 8001a8a:	2301      	movs	r3, #1
 8001a8c:	e0ad      	b.n	8001bea <HAL_ADC_PollForConversion+0x1ea>
      }
    }
    
    tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 8001a8e:	230c      	movs	r3, #12
 8001a90:	617b      	str	r3, [r7, #20]
  }
  
  /* Get relevant register CFGR in ADC instance of ADC master or slave      */
  /* in function of multimode state (for devices with multimode             */
  /* available).                                                            */
  if(ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001a9a:	d004      	beq.n	8001aa6 <HAL_ADC_PollForConversion+0xa6>
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	4a54      	ldr	r2, [pc, #336]	@ (8001bf4 <HAL_ADC_PollForConversion+0x1f4>)
 8001aa2:	4293      	cmp	r3, r2
 8001aa4:	d106      	bne.n	8001ab4 <HAL_ADC_PollForConversion+0xb4>
 8001aa6:	4b54      	ldr	r3, [pc, #336]	@ (8001bf8 <HAL_ADC_PollForConversion+0x1f8>)
 8001aa8:	689b      	ldr	r3, [r3, #8]
 8001aaa:	f003 031f 	and.w	r3, r3, #31
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d010      	beq.n	8001ad4 <HAL_ADC_PollForConversion+0xd4>
 8001ab2:	e005      	b.n	8001ac0 <HAL_ADC_PollForConversion+0xc0>
 8001ab4:	4b51      	ldr	r3, [pc, #324]	@ (8001bfc <HAL_ADC_PollForConversion+0x1fc>)
 8001ab6:	689b      	ldr	r3, [r3, #8]
 8001ab8:	f003 031f 	and.w	r3, r3, #31
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d009      	beq.n	8001ad4 <HAL_ADC_PollForConversion+0xd4>
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001ac8:	d004      	beq.n	8001ad4 <HAL_ADC_PollForConversion+0xd4>
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	4a4c      	ldr	r2, [pc, #304]	@ (8001c00 <HAL_ADC_PollForConversion+0x200>)
 8001ad0:	4293      	cmp	r3, r2
 8001ad2:	d104      	bne.n	8001ade <HAL_ADC_PollForConversion+0xde>
  {
    tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	68db      	ldr	r3, [r3, #12]
 8001ada:	613b      	str	r3, [r7, #16]
 8001adc:	e00f      	b.n	8001afe <HAL_ADC_PollForConversion+0xfe>
  }
  else
  {
    tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001ae6:	d004      	beq.n	8001af2 <HAL_ADC_PollForConversion+0xf2>
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	4a41      	ldr	r2, [pc, #260]	@ (8001bf4 <HAL_ADC_PollForConversion+0x1f4>)
 8001aee:	4293      	cmp	r3, r2
 8001af0:	d102      	bne.n	8001af8 <HAL_ADC_PollForConversion+0xf8>
 8001af2:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8001af6:	e000      	b.n	8001afa <HAL_ADC_PollForConversion+0xfa>
 8001af8:	4b41      	ldr	r3, [pc, #260]	@ (8001c00 <HAL_ADC_PollForConversion+0x200>)
 8001afa:	68db      	ldr	r3, [r3, #12]
 8001afc:	613b      	str	r3, [r7, #16]
  }
  
  /* Get tick count */
  tickstart = HAL_GetTick();  
 8001afe:	f7ff fc59 	bl	80013b4 <HAL_GetTick>
 8001b02:	60b8      	str	r0, [r7, #8]
  
  /* Wait until End of Conversion or End of Sequence flag is raised */
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8001b04:	e021      	b.n	8001b4a <HAL_ADC_PollForConversion+0x14a>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8001b06:	683b      	ldr	r3, [r7, #0]
 8001b08:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001b0c:	d01d      	beq.n	8001b4a <HAL_ADC_PollForConversion+0x14a>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8001b0e:	683b      	ldr	r3, [r7, #0]
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d007      	beq.n	8001b24 <HAL_ADC_PollForConversion+0x124>
 8001b14:	f7ff fc4e 	bl	80013b4 <HAL_GetTick>
 8001b18:	4602      	mov	r2, r0
 8001b1a:	68bb      	ldr	r3, [r7, #8]
 8001b1c:	1ad3      	subs	r3, r2, r3
 8001b1e:	683a      	ldr	r2, [r7, #0]
 8001b20:	429a      	cmp	r2, r3
 8001b22:	d212      	bcs.n	8001b4a <HAL_ADC_PollForConversion+0x14a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	681a      	ldr	r2, [r3, #0]
 8001b2a:	697b      	ldr	r3, [r7, #20]
 8001b2c:	4013      	ands	r3, r2
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d10b      	bne.n	8001b4a <HAL_ADC_PollForConversion+0x14a>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b36:	f043 0204 	orr.w	r2, r3, #4
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	2200      	movs	r2, #0
 8001b42:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_TIMEOUT;
 8001b46:	2303      	movs	r3, #3
 8001b48:	e04f      	b.n	8001bea <HAL_ADC_PollForConversion+0x1ea>
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	681a      	ldr	r2, [r3, #0]
 8001b50:	697b      	ldr	r3, [r7, #20]
 8001b52:	4013      	ands	r3, r2
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d0d6      	beq.n	8001b06 <HAL_ADC_PollForConversion+0x106>
      }
    }
  }
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b5c:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	641a      	str	r2, [r3, #64]	@ 0x40
  
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)           && 
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	68db      	ldr	r3, [r3, #12]
 8001b6a:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d131      	bne.n	8001bd6 <HAL_ADC_PollForConversion+0x1d6>
     (READ_BIT (tmp_cfgr, ADC_CFGR_CONT) == RESET)   )
 8001b72:	693b      	ldr	r3, [r7, #16]
 8001b74:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)           && 
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d12c      	bne.n	8001bd6 <HAL_ADC_PollForConversion+0x1d6>
  {
    /* If End of Sequence is reached, disable interrupts */
    if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	f003 0308 	and.w	r3, r3, #8
 8001b86:	2b08      	cmp	r3, #8
 8001b88:	d125      	bne.n	8001bd6 <HAL_ADC_PollForConversion+0x1d6>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	689b      	ldr	r3, [r3, #8]
 8001b90:	f003 0304 	and.w	r3, r3, #4
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d112      	bne.n	8001bbe <HAL_ADC_PollForConversion+0x1be>
      {        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b9c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	641a      	str	r2, [r3, #64]	@ 0x40
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ba8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d112      	bne.n	8001bd6 <HAL_ADC_PollForConversion+0x1d6>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bb4:	f043 0201 	orr.w	r2, r3, #1
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	641a      	str	r2, [r3, #64]	@ 0x40
 8001bbc:	e00b      	b.n	8001bd6 <HAL_ADC_PollForConversion+0x1d6>
        }
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bc2:	f043 0220 	orr.w	r2, r3, #32
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	641a      	str	r2, [r3, #64]	@ 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001bce:	f043 0201 	orr.w	r2, r3, #1
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	645a      	str	r2, [r3, #68]	@ 0x44
  }
  
  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (READ_BIT (tmp_cfgr, ADC_CFGR_AUTDLY) == RESET)
 8001bd6:	693b      	ldr	r3, [r7, #16]
 8001bd8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d103      	bne.n	8001be8 <HAL_ADC_PollForConversion+0x1e8>
  {
    /* Clear regular group conversion flag */
    /* (EOC or EOS depending on HAL ADC initialization parameter) */
    __HAL_ADC_CLEAR_FLAG(hadc, tmp_Flag_EOC);
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	697a      	ldr	r2, [r7, #20]
 8001be6:	601a      	str	r2, [r3, #0]
  }
  
  /* Return ADC state */
  return HAL_OK;
 8001be8:	2300      	movs	r3, #0
}
 8001bea:	4618      	mov	r0, r3
 8001bec:	3718      	adds	r7, #24
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	bd80      	pop	{r7, pc}
 8001bf2:	bf00      	nop
 8001bf4:	50000100 	.word	0x50000100
 8001bf8:	50000300 	.word	0x50000300
 8001bfc:	50000700 	.word	0x50000700
 8001c00:	50000400 	.word	0x50000400

08001c04 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8001c04:	b480      	push	{r7}
 8001c06:	b083      	sub	sp, #12
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	6078      	str	r0, [r7, #4]

  /* Note: ADC flag EOC is not cleared here by software because               */
  /*       automatically cleared by hardware when reading register DR.        */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 8001c12:	4618      	mov	r0, r3
 8001c14:	370c      	adds	r7, #12
 8001c16:	46bd      	mov	sp, r7
 8001c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c1c:	4770      	bx	lr
	...

08001c20 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001c20:	b480      	push	{r7}
 8001c22:	b09b      	sub	sp, #108	@ 0x6c
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	6078      	str	r0, [r7, #4]
 8001c28:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001c2a:	2300      	movs	r3, #0
 8001c2c:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 8001c30:	2300      	movs	r3, #0
 8001c32:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001c3a:	2b01      	cmp	r3, #1
 8001c3c:	d101      	bne.n	8001c42 <HAL_ADC_ConfigChannel+0x22>
 8001c3e:	2302      	movs	r3, #2
 8001c40:	e2c8      	b.n	80021d4 <HAL_ADC_ConfigChannel+0x5b4>
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	2201      	movs	r2, #1
 8001c46:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	689b      	ldr	r3, [r3, #8]
 8001c50:	f003 0304 	and.w	r3, r3, #4
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	f040 82ac 	bne.w	80021b2 <HAL_ADC_ConfigChannel+0x592>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 8001c5a:	683b      	ldr	r3, [r7, #0]
 8001c5c:	685b      	ldr	r3, [r3, #4]
 8001c5e:	2b04      	cmp	r3, #4
 8001c60:	d81c      	bhi.n	8001c9c <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001c68:	683b      	ldr	r3, [r7, #0]
 8001c6a:	685a      	ldr	r2, [r3, #4]
 8001c6c:	4613      	mov	r3, r2
 8001c6e:	005b      	lsls	r3, r3, #1
 8001c70:	4413      	add	r3, r2
 8001c72:	005b      	lsls	r3, r3, #1
 8001c74:	461a      	mov	r2, r3
 8001c76:	231f      	movs	r3, #31
 8001c78:	4093      	lsls	r3, r2
 8001c7a:	43db      	mvns	r3, r3
 8001c7c:	4019      	ands	r1, r3
 8001c7e:	683b      	ldr	r3, [r7, #0]
 8001c80:	6818      	ldr	r0, [r3, #0]
 8001c82:	683b      	ldr	r3, [r7, #0]
 8001c84:	685a      	ldr	r2, [r3, #4]
 8001c86:	4613      	mov	r3, r2
 8001c88:	005b      	lsls	r3, r3, #1
 8001c8a:	4413      	add	r3, r2
 8001c8c:	005b      	lsls	r3, r3, #1
 8001c8e:	fa00 f203 	lsl.w	r2, r0, r3
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	430a      	orrs	r2, r1
 8001c98:	631a      	str	r2, [r3, #48]	@ 0x30
 8001c9a:	e063      	b.n	8001d64 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 8001c9c:	683b      	ldr	r3, [r7, #0]
 8001c9e:	685b      	ldr	r3, [r3, #4]
 8001ca0:	2b09      	cmp	r3, #9
 8001ca2:	d81e      	bhi.n	8001ce2 <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001caa:	683b      	ldr	r3, [r7, #0]
 8001cac:	685a      	ldr	r2, [r3, #4]
 8001cae:	4613      	mov	r3, r2
 8001cb0:	005b      	lsls	r3, r3, #1
 8001cb2:	4413      	add	r3, r2
 8001cb4:	005b      	lsls	r3, r3, #1
 8001cb6:	3b1e      	subs	r3, #30
 8001cb8:	221f      	movs	r2, #31
 8001cba:	fa02 f303 	lsl.w	r3, r2, r3
 8001cbe:	43db      	mvns	r3, r3
 8001cc0:	4019      	ands	r1, r3
 8001cc2:	683b      	ldr	r3, [r7, #0]
 8001cc4:	6818      	ldr	r0, [r3, #0]
 8001cc6:	683b      	ldr	r3, [r7, #0]
 8001cc8:	685a      	ldr	r2, [r3, #4]
 8001cca:	4613      	mov	r3, r2
 8001ccc:	005b      	lsls	r3, r3, #1
 8001cce:	4413      	add	r3, r2
 8001cd0:	005b      	lsls	r3, r3, #1
 8001cd2:	3b1e      	subs	r3, #30
 8001cd4:	fa00 f203 	lsl.w	r2, r0, r3
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	430a      	orrs	r2, r1
 8001cde:	635a      	str	r2, [r3, #52]	@ 0x34
 8001ce0:	e040      	b.n	8001d64 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 8001ce2:	683b      	ldr	r3, [r7, #0]
 8001ce4:	685b      	ldr	r3, [r3, #4]
 8001ce6:	2b0e      	cmp	r3, #14
 8001ce8:	d81e      	bhi.n	8001d28 <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 8001cf0:	683b      	ldr	r3, [r7, #0]
 8001cf2:	685a      	ldr	r2, [r3, #4]
 8001cf4:	4613      	mov	r3, r2
 8001cf6:	005b      	lsls	r3, r3, #1
 8001cf8:	4413      	add	r3, r2
 8001cfa:	005b      	lsls	r3, r3, #1
 8001cfc:	3b3c      	subs	r3, #60	@ 0x3c
 8001cfe:	221f      	movs	r2, #31
 8001d00:	fa02 f303 	lsl.w	r3, r2, r3
 8001d04:	43db      	mvns	r3, r3
 8001d06:	4019      	ands	r1, r3
 8001d08:	683b      	ldr	r3, [r7, #0]
 8001d0a:	6818      	ldr	r0, [r3, #0]
 8001d0c:	683b      	ldr	r3, [r7, #0]
 8001d0e:	685a      	ldr	r2, [r3, #4]
 8001d10:	4613      	mov	r3, r2
 8001d12:	005b      	lsls	r3, r3, #1
 8001d14:	4413      	add	r3, r2
 8001d16:	005b      	lsls	r3, r3, #1
 8001d18:	3b3c      	subs	r3, #60	@ 0x3c
 8001d1a:	fa00 f203 	lsl.w	r2, r0, r3
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	430a      	orrs	r2, r1
 8001d24:	639a      	str	r2, [r3, #56]	@ 0x38
 8001d26:	e01d      	b.n	8001d64 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
 8001d2e:	683b      	ldr	r3, [r7, #0]
 8001d30:	685a      	ldr	r2, [r3, #4]
 8001d32:	4613      	mov	r3, r2
 8001d34:	005b      	lsls	r3, r3, #1
 8001d36:	4413      	add	r3, r2
 8001d38:	005b      	lsls	r3, r3, #1
 8001d3a:	3b5a      	subs	r3, #90	@ 0x5a
 8001d3c:	221f      	movs	r2, #31
 8001d3e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d42:	43db      	mvns	r3, r3
 8001d44:	4019      	ands	r1, r3
 8001d46:	683b      	ldr	r3, [r7, #0]
 8001d48:	6818      	ldr	r0, [r3, #0]
 8001d4a:	683b      	ldr	r3, [r7, #0]
 8001d4c:	685a      	ldr	r2, [r3, #4]
 8001d4e:	4613      	mov	r3, r2
 8001d50:	005b      	lsls	r3, r3, #1
 8001d52:	4413      	add	r3, r2
 8001d54:	005b      	lsls	r3, r3, #1
 8001d56:	3b5a      	subs	r3, #90	@ 0x5a
 8001d58:	fa00 f203 	lsl.w	r2, r0, r3
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	430a      	orrs	r2, r1
 8001d62:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	689b      	ldr	r3, [r3, #8]
 8001d6a:	f003 030c 	and.w	r3, r3, #12
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	f040 80e5 	bne.w	8001f3e <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 8001d74:	683b      	ldr	r3, [r7, #0]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	2b09      	cmp	r3, #9
 8001d7a:	d91c      	bls.n	8001db6 <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	6999      	ldr	r1, [r3, #24]
 8001d82:	683b      	ldr	r3, [r7, #0]
 8001d84:	681a      	ldr	r2, [r3, #0]
 8001d86:	4613      	mov	r3, r2
 8001d88:	005b      	lsls	r3, r3, #1
 8001d8a:	4413      	add	r3, r2
 8001d8c:	3b1e      	subs	r3, #30
 8001d8e:	2207      	movs	r2, #7
 8001d90:	fa02 f303 	lsl.w	r3, r2, r3
 8001d94:	43db      	mvns	r3, r3
 8001d96:	4019      	ands	r1, r3
 8001d98:	683b      	ldr	r3, [r7, #0]
 8001d9a:	6898      	ldr	r0, [r3, #8]
 8001d9c:	683b      	ldr	r3, [r7, #0]
 8001d9e:	681a      	ldr	r2, [r3, #0]
 8001da0:	4613      	mov	r3, r2
 8001da2:	005b      	lsls	r3, r3, #1
 8001da4:	4413      	add	r3, r2
 8001da6:	3b1e      	subs	r3, #30
 8001da8:	fa00 f203 	lsl.w	r2, r0, r3
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	430a      	orrs	r2, r1
 8001db2:	619a      	str	r2, [r3, #24]
 8001db4:	e019      	b.n	8001dea <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	6959      	ldr	r1, [r3, #20]
 8001dbc:	683b      	ldr	r3, [r7, #0]
 8001dbe:	681a      	ldr	r2, [r3, #0]
 8001dc0:	4613      	mov	r3, r2
 8001dc2:	005b      	lsls	r3, r3, #1
 8001dc4:	4413      	add	r3, r2
 8001dc6:	2207      	movs	r2, #7
 8001dc8:	fa02 f303 	lsl.w	r3, r2, r3
 8001dcc:	43db      	mvns	r3, r3
 8001dce:	4019      	ands	r1, r3
 8001dd0:	683b      	ldr	r3, [r7, #0]
 8001dd2:	6898      	ldr	r0, [r3, #8]
 8001dd4:	683b      	ldr	r3, [r7, #0]
 8001dd6:	681a      	ldr	r2, [r3, #0]
 8001dd8:	4613      	mov	r3, r2
 8001dda:	005b      	lsls	r3, r3, #1
 8001ddc:	4413      	add	r3, r2
 8001dde:	fa00 f203 	lsl.w	r2, r0, r3
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	430a      	orrs	r2, r1
 8001de8:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 8001dea:	683b      	ldr	r3, [r7, #0]
 8001dec:	695a      	ldr	r2, [r3, #20]
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	68db      	ldr	r3, [r3, #12]
 8001df4:	08db      	lsrs	r3, r3, #3
 8001df6:	f003 0303 	and.w	r3, r3, #3
 8001dfa:	005b      	lsls	r3, r3, #1
 8001dfc:	fa02 f303 	lsl.w	r3, r2, r3
 8001e00:	663b      	str	r3, [r7, #96]	@ 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 8001e02:	683b      	ldr	r3, [r7, #0]
 8001e04:	691b      	ldr	r3, [r3, #16]
 8001e06:	3b01      	subs	r3, #1
 8001e08:	2b03      	cmp	r3, #3
 8001e0a:	d84f      	bhi.n	8001eac <HAL_ADC_ConfigChannel+0x28c>
 8001e0c:	a201      	add	r2, pc, #4	@ (adr r2, 8001e14 <HAL_ADC_ConfigChannel+0x1f4>)
 8001e0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e12:	bf00      	nop
 8001e14:	08001e25 	.word	0x08001e25
 8001e18:	08001e47 	.word	0x08001e47
 8001e1c:	08001e69 	.word	0x08001e69
 8001e20:	08001e8b 	.word	0x08001e8b
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001e2a:	4b99      	ldr	r3, [pc, #612]	@ (8002090 <HAL_ADC_ConfigChannel+0x470>)
 8001e2c:	4013      	ands	r3, r2
 8001e2e:	683a      	ldr	r2, [r7, #0]
 8001e30:	6812      	ldr	r2, [r2, #0]
 8001e32:	0691      	lsls	r1, r2, #26
 8001e34:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8001e36:	430a      	orrs	r2, r1
 8001e38:	431a      	orrs	r2, r3
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8001e42:	661a      	str	r2, [r3, #96]	@ 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001e44:	e07b      	b.n	8001f3e <HAL_ADC_ConfigChannel+0x31e>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8001e4c:	4b90      	ldr	r3, [pc, #576]	@ (8002090 <HAL_ADC_ConfigChannel+0x470>)
 8001e4e:	4013      	ands	r3, r2
 8001e50:	683a      	ldr	r2, [r7, #0]
 8001e52:	6812      	ldr	r2, [r2, #0]
 8001e54:	0691      	lsls	r1, r2, #26
 8001e56:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8001e58:	430a      	orrs	r2, r1
 8001e5a:	431a      	orrs	r2, r3
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8001e64:	665a      	str	r2, [r3, #100]	@ 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001e66:	e06a      	b.n	8001f3e <HAL_ADC_ConfigChannel+0x31e>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8001e6e:	4b88      	ldr	r3, [pc, #544]	@ (8002090 <HAL_ADC_ConfigChannel+0x470>)
 8001e70:	4013      	ands	r3, r2
 8001e72:	683a      	ldr	r2, [r7, #0]
 8001e74:	6812      	ldr	r2, [r2, #0]
 8001e76:	0691      	lsls	r1, r2, #26
 8001e78:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8001e7a:	430a      	orrs	r2, r1
 8001e7c:	431a      	orrs	r2, r3
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8001e86:	669a      	str	r2, [r3, #104]	@ 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001e88:	e059      	b.n	8001f3e <HAL_ADC_ConfigChannel+0x31e>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8001e90:	4b7f      	ldr	r3, [pc, #508]	@ (8002090 <HAL_ADC_ConfigChannel+0x470>)
 8001e92:	4013      	ands	r3, r2
 8001e94:	683a      	ldr	r2, [r7, #0]
 8001e96:	6812      	ldr	r2, [r2, #0]
 8001e98:	0691      	lsls	r1, r2, #26
 8001e9a:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8001e9c:	430a      	orrs	r2, r1
 8001e9e:	431a      	orrs	r2, r3
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8001ea8:	66da      	str	r2, [r3, #108]	@ 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001eaa:	e048      	b.n	8001f3e <HAL_ADC_ConfigChannel+0x31e>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001eb2:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001eb6:	683b      	ldr	r3, [r7, #0]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	069b      	lsls	r3, r3, #26
 8001ebc:	429a      	cmp	r2, r3
 8001ebe:	d107      	bne.n	8001ed0 <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8001ece:	661a      	str	r2, [r3, #96]	@ 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8001ed6:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001eda:	683b      	ldr	r3, [r7, #0]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	069b      	lsls	r3, r3, #26
 8001ee0:	429a      	cmp	r2, r3
 8001ee2:	d107      	bne.n	8001ef4 <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8001ef2:	665a      	str	r2, [r3, #100]	@ 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8001efa:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001efe:	683b      	ldr	r3, [r7, #0]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	069b      	lsls	r3, r3, #26
 8001f04:	429a      	cmp	r2, r3
 8001f06:	d107      	bne.n	8001f18 <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8001f16:	669a      	str	r2, [r3, #104]	@ 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001f1e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001f22:	683b      	ldr	r3, [r7, #0]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	069b      	lsls	r3, r3, #26
 8001f28:	429a      	cmp	r2, r3
 8001f2a:	d107      	bne.n	8001f3c <HAL_ADC_ConfigChannel+0x31c>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8001f3a:	66da      	str	r2, [r3, #108]	@ 0x6c
      }
      break;
 8001f3c:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	689b      	ldr	r3, [r3, #8]
 8001f44:	f003 0303 	and.w	r3, r3, #3
 8001f48:	2b01      	cmp	r3, #1
 8001f4a:	d108      	bne.n	8001f5e <HAL_ADC_ConfigChannel+0x33e>
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	f003 0301 	and.w	r3, r3, #1
 8001f56:	2b01      	cmp	r3, #1
 8001f58:	d101      	bne.n	8001f5e <HAL_ADC_ConfigChannel+0x33e>
 8001f5a:	2301      	movs	r3, #1
 8001f5c:	e000      	b.n	8001f60 <HAL_ADC_ConfigChannel+0x340>
 8001f5e:	2300      	movs	r3, #0
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	f040 8131 	bne.w	80021c8 <HAL_ADC_ConfigChannel+0x5a8>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8001f66:	683b      	ldr	r3, [r7, #0]
 8001f68:	68db      	ldr	r3, [r3, #12]
 8001f6a:	2b01      	cmp	r3, #1
 8001f6c:	d00f      	beq.n	8001f8e <HAL_ADC_ConfigChannel+0x36e>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	f8d3 10b0 	ldr.w	r1, [r3, #176]	@ 0xb0
 8001f76:	683b      	ldr	r3, [r7, #0]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	2201      	movs	r2, #1
 8001f7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f80:	43da      	mvns	r2, r3
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	400a      	ands	r2, r1
 8001f88:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
 8001f8c:	e049      	b.n	8002022 <HAL_ADC_ConfigChannel+0x402>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	f8d3 10b0 	ldr.w	r1, [r3, #176]	@ 0xb0
 8001f96:	683b      	ldr	r3, [r7, #0]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	2201      	movs	r2, #1
 8001f9c:	409a      	lsls	r2, r3
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	430a      	orrs	r2, r1
 8001fa4:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 8001fa8:	683b      	ldr	r3, [r7, #0]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	2b09      	cmp	r3, #9
 8001fae:	d91c      	bls.n	8001fea <HAL_ADC_ConfigChannel+0x3ca>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	6999      	ldr	r1, [r3, #24]
 8001fb6:	683b      	ldr	r3, [r7, #0]
 8001fb8:	681a      	ldr	r2, [r3, #0]
 8001fba:	4613      	mov	r3, r2
 8001fbc:	005b      	lsls	r3, r3, #1
 8001fbe:	4413      	add	r3, r2
 8001fc0:	3b1b      	subs	r3, #27
 8001fc2:	2207      	movs	r2, #7
 8001fc4:	fa02 f303 	lsl.w	r3, r2, r3
 8001fc8:	43db      	mvns	r3, r3
 8001fca:	4019      	ands	r1, r3
 8001fcc:	683b      	ldr	r3, [r7, #0]
 8001fce:	6898      	ldr	r0, [r3, #8]
 8001fd0:	683b      	ldr	r3, [r7, #0]
 8001fd2:	681a      	ldr	r2, [r3, #0]
 8001fd4:	4613      	mov	r3, r2
 8001fd6:	005b      	lsls	r3, r3, #1
 8001fd8:	4413      	add	r3, r2
 8001fda:	3b1b      	subs	r3, #27
 8001fdc:	fa00 f203 	lsl.w	r2, r0, r3
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	430a      	orrs	r2, r1
 8001fe6:	619a      	str	r2, [r3, #24]
 8001fe8:	e01b      	b.n	8002022 <HAL_ADC_ConfigChannel+0x402>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	6959      	ldr	r1, [r3, #20]
 8001ff0:	683b      	ldr	r3, [r7, #0]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	1c5a      	adds	r2, r3, #1
 8001ff6:	4613      	mov	r3, r2
 8001ff8:	005b      	lsls	r3, r3, #1
 8001ffa:	4413      	add	r3, r2
 8001ffc:	2207      	movs	r2, #7
 8001ffe:	fa02 f303 	lsl.w	r3, r2, r3
 8002002:	43db      	mvns	r3, r3
 8002004:	4019      	ands	r1, r3
 8002006:	683b      	ldr	r3, [r7, #0]
 8002008:	6898      	ldr	r0, [r3, #8]
 800200a:	683b      	ldr	r3, [r7, #0]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	1c5a      	adds	r2, r3, #1
 8002010:	4613      	mov	r3, r2
 8002012:	005b      	lsls	r3, r3, #1
 8002014:	4413      	add	r3, r2
 8002016:	fa00 f203 	lsl.w	r2, r0, r3
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	430a      	orrs	r2, r1
 8002020:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800202a:	d004      	beq.n	8002036 <HAL_ADC_ConfigChannel+0x416>
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	4a18      	ldr	r2, [pc, #96]	@ (8002094 <HAL_ADC_ConfigChannel+0x474>)
 8002032:	4293      	cmp	r3, r2
 8002034:	d101      	bne.n	800203a <HAL_ADC_ConfigChannel+0x41a>
 8002036:	4b18      	ldr	r3, [pc, #96]	@ (8002098 <HAL_ADC_ConfigChannel+0x478>)
 8002038:	e000      	b.n	800203c <HAL_ADC_ConfigChannel+0x41c>
 800203a:	4b18      	ldr	r3, [pc, #96]	@ (800209c <HAL_ADC_ConfigChannel+0x47c>)
 800203c:	65fb      	str	r3, [r7, #92]	@ 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 800203e:	683b      	ldr	r3, [r7, #0]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	2b10      	cmp	r3, #16
 8002044:	d105      	bne.n	8002052 <HAL_ADC_ConfigChannel+0x432>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8002046:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002048:	689b      	ldr	r3, [r3, #8]
 800204a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 800204e:	2b00      	cmp	r3, #0
 8002050:	d015      	beq.n	800207e <HAL_ADC_ConfigChannel+0x45e>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8002052:	683b      	ldr	r3, [r7, #0]
 8002054:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8002056:	2b11      	cmp	r3, #17
 8002058:	d105      	bne.n	8002066 <HAL_ADC_ConfigChannel+0x446>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 800205a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800205c:	689b      	ldr	r3, [r3, #8]
 800205e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8002062:	2b00      	cmp	r3, #0
 8002064:	d00b      	beq.n	800207e <HAL_ADC_ConfigChannel+0x45e>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8002066:	683b      	ldr	r3, [r7, #0]
 8002068:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 800206a:	2b12      	cmp	r3, #18
 800206c:	f040 80ac 	bne.w	80021c8 <HAL_ADC_ConfigChannel+0x5a8>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 8002070:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002072:	689b      	ldr	r3, [r3, #8]
 8002074:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8002078:	2b00      	cmp	r3, #0
 800207a:	f040 80a5 	bne.w	80021c8 <HAL_ADC_ConfigChannel+0x5a8>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002086:	d10b      	bne.n	80020a0 <HAL_ADC_ConfigChannel+0x480>
 8002088:	4b02      	ldr	r3, [pc, #8]	@ (8002094 <HAL_ADC_ConfigChannel+0x474>)
 800208a:	60fb      	str	r3, [r7, #12]
 800208c:	e023      	b.n	80020d6 <HAL_ADC_ConfigChannel+0x4b6>
 800208e:	bf00      	nop
 8002090:	83fff000 	.word	0x83fff000
 8002094:	50000100 	.word	0x50000100
 8002098:	50000300 	.word	0x50000300
 800209c:	50000700 	.word	0x50000700
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	4a4e      	ldr	r2, [pc, #312]	@ (80021e0 <HAL_ADC_ConfigChannel+0x5c0>)
 80020a6:	4293      	cmp	r3, r2
 80020a8:	d103      	bne.n	80020b2 <HAL_ADC_ConfigChannel+0x492>
 80020aa:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80020ae:	60fb      	str	r3, [r7, #12]
 80020b0:	e011      	b.n	80020d6 <HAL_ADC_ConfigChannel+0x4b6>
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	4a4b      	ldr	r2, [pc, #300]	@ (80021e4 <HAL_ADC_ConfigChannel+0x5c4>)
 80020b8:	4293      	cmp	r3, r2
 80020ba:	d102      	bne.n	80020c2 <HAL_ADC_ConfigChannel+0x4a2>
 80020bc:	4b4a      	ldr	r3, [pc, #296]	@ (80021e8 <HAL_ADC_ConfigChannel+0x5c8>)
 80020be:	60fb      	str	r3, [r7, #12]
 80020c0:	e009      	b.n	80020d6 <HAL_ADC_ConfigChannel+0x4b6>
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	4a48      	ldr	r2, [pc, #288]	@ (80021e8 <HAL_ADC_ConfigChannel+0x5c8>)
 80020c8:	4293      	cmp	r3, r2
 80020ca:	d102      	bne.n	80020d2 <HAL_ADC_ConfigChannel+0x4b2>
 80020cc:	4b45      	ldr	r3, [pc, #276]	@ (80021e4 <HAL_ADC_ConfigChannel+0x5c4>)
 80020ce:	60fb      	str	r3, [r7, #12]
 80020d0:	e001      	b.n	80020d6 <HAL_ADC_ConfigChannel+0x4b6>
 80020d2:	2300      	movs	r3, #0
 80020d4:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	689b      	ldr	r3, [r3, #8]
 80020dc:	f003 0303 	and.w	r3, r3, #3
 80020e0:	2b01      	cmp	r3, #1
 80020e2:	d108      	bne.n	80020f6 <HAL_ADC_ConfigChannel+0x4d6>
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	f003 0301 	and.w	r3, r3, #1
 80020ee:	2b01      	cmp	r3, #1
 80020f0:	d101      	bne.n	80020f6 <HAL_ADC_ConfigChannel+0x4d6>
 80020f2:	2301      	movs	r3, #1
 80020f4:	e000      	b.n	80020f8 <HAL_ADC_ConfigChannel+0x4d8>
 80020f6:	2300      	movs	r3, #0
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d150      	bne.n	800219e <HAL_ADC_ConfigChannel+0x57e>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80020fc:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d010      	beq.n	8002124 <HAL_ADC_ConfigChannel+0x504>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	689b      	ldr	r3, [r3, #8]
 8002106:	f003 0303 	and.w	r3, r3, #3
 800210a:	2b01      	cmp	r3, #1
 800210c:	d107      	bne.n	800211e <HAL_ADC_ConfigChannel+0x4fe>
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	f003 0301 	and.w	r3, r3, #1
 8002116:	2b01      	cmp	r3, #1
 8002118:	d101      	bne.n	800211e <HAL_ADC_ConfigChannel+0x4fe>
 800211a:	2301      	movs	r3, #1
 800211c:	e000      	b.n	8002120 <HAL_ADC_ConfigChannel+0x500>
 800211e:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8002120:	2b00      	cmp	r3, #0
 8002122:	d13c      	bne.n	800219e <HAL_ADC_ConfigChannel+0x57e>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002124:	683b      	ldr	r3, [r7, #0]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	2b10      	cmp	r3, #16
 800212a:	d11d      	bne.n	8002168 <HAL_ADC_ConfigChannel+0x548>
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002134:	d118      	bne.n	8002168 <HAL_ADC_ConfigChannel+0x548>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 8002136:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002138:	689b      	ldr	r3, [r3, #8]
 800213a:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 800213e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002140:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002142:	4b2a      	ldr	r3, [pc, #168]	@ (80021ec <HAL_ADC_ConfigChannel+0x5cc>)
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	4a2a      	ldr	r2, [pc, #168]	@ (80021f0 <HAL_ADC_ConfigChannel+0x5d0>)
 8002148:	fba2 2303 	umull	r2, r3, r2, r3
 800214c:	0c9a      	lsrs	r2, r3, #18
 800214e:	4613      	mov	r3, r2
 8002150:	009b      	lsls	r3, r3, #2
 8002152:	4413      	add	r3, r2
 8002154:	005b      	lsls	r3, r3, #1
 8002156:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002158:	e002      	b.n	8002160 <HAL_ADC_ConfigChannel+0x540>
          {
            wait_loop_index--;
 800215a:	68bb      	ldr	r3, [r7, #8]
 800215c:	3b01      	subs	r3, #1
 800215e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002160:	68bb      	ldr	r3, [r7, #8]
 8002162:	2b00      	cmp	r3, #0
 8002164:	d1f9      	bne.n	800215a <HAL_ADC_ConfigChannel+0x53a>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002166:	e02e      	b.n	80021c6 <HAL_ADC_ConfigChannel+0x5a6>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 8002168:	683b      	ldr	r3, [r7, #0]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	2b11      	cmp	r3, #17
 800216e:	d10b      	bne.n	8002188 <HAL_ADC_ConfigChannel+0x568>
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002178:	d106      	bne.n	8002188 <HAL_ADC_ConfigChannel+0x568>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 800217a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800217c:	689b      	ldr	r3, [r3, #8]
 800217e:	f043 7280 	orr.w	r2, r3, #16777216	@ 0x1000000
 8002182:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002184:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002186:	e01e      	b.n	80021c6 <HAL_ADC_ConfigChannel+0x5a6>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 8002188:	683b      	ldr	r3, [r7, #0]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	2b12      	cmp	r3, #18
 800218e:	d11a      	bne.n	80021c6 <HAL_ADC_ConfigChannel+0x5a6>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 8002190:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002192:	689b      	ldr	r3, [r3, #8]
 8002194:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8002198:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800219a:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 800219c:	e013      	b.n	80021c6 <HAL_ADC_ConfigChannel+0x5a6>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021a2:	f043 0220 	orr.w	r2, r3, #32
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	641a      	str	r2, [r3, #64]	@ 0x40
        
        tmp_hal_status = HAL_ERROR;
 80021aa:	2301      	movs	r3, #1
 80021ac:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 80021b0:	e00a      	b.n	80021c8 <HAL_ADC_ConfigChannel+0x5a8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021b6:	f043 0220 	orr.w	r2, r3, #32
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	641a      	str	r2, [r3, #64]	@ 0x40
    
    tmp_hal_status = HAL_ERROR;
 80021be:	2301      	movs	r3, #1
 80021c0:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 80021c4:	e000      	b.n	80021c8 <HAL_ADC_ConfigChannel+0x5a8>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80021c6:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	2200      	movs	r2, #0
 80021cc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 80021d0:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
}
 80021d4:	4618      	mov	r0, r3
 80021d6:	376c      	adds	r7, #108	@ 0x6c
 80021d8:	46bd      	mov	sp, r7
 80021da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021de:	4770      	bx	lr
 80021e0:	50000100 	.word	0x50000100
 80021e4:	50000400 	.word	0x50000400
 80021e8:	50000500 	.word	0x50000500
 80021ec:	20000040 	.word	0x20000040
 80021f0:	431bde83 	.word	0x431bde83

080021f4 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param  hadc ADC handle
  * @param  multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef* hadc, ADC_MultiModeTypeDef* multimode)
{
 80021f4:	b480      	push	{r7}
 80021f6:	b099      	sub	sp, #100	@ 0x64
 80021f8:	af00      	add	r7, sp, #0
 80021fa:	6078      	str	r0, [r7, #4]
 80021fc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80021fe:	2300      	movs	r3, #0
 8002200:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
    assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }
  
  /* Set handle of the other ADC sharing the same common register             */
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800220c:	d102      	bne.n	8002214 <HAL_ADCEx_MultiModeConfigChannel+0x20>
 800220e:	4b6d      	ldr	r3, [pc, #436]	@ (80023c4 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8002210:	60bb      	str	r3, [r7, #8]
 8002212:	e01a      	b.n	800224a <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	4a6a      	ldr	r2, [pc, #424]	@ (80023c4 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 800221a:	4293      	cmp	r3, r2
 800221c:	d103      	bne.n	8002226 <HAL_ADCEx_MultiModeConfigChannel+0x32>
 800221e:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8002222:	60bb      	str	r3, [r7, #8]
 8002224:	e011      	b.n	800224a <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	4a67      	ldr	r2, [pc, #412]	@ (80023c8 <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 800222c:	4293      	cmp	r3, r2
 800222e:	d102      	bne.n	8002236 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8002230:	4b66      	ldr	r3, [pc, #408]	@ (80023cc <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 8002232:	60bb      	str	r3, [r7, #8]
 8002234:	e009      	b.n	800224a <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	4a64      	ldr	r2, [pc, #400]	@ (80023cc <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 800223c:	4293      	cmp	r3, r2
 800223e:	d102      	bne.n	8002246 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8002240:	4b61      	ldr	r3, [pc, #388]	@ (80023c8 <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 8002242:	60bb      	str	r3, [r7, #8]
 8002244:	e001      	b.n	800224a <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8002246:	2300      	movs	r3, #0
 8002248:	60bb      	str	r3, [r7, #8]
  if (tmphadcSharingSameCommonRegister.Instance == NULL)
 800224a:	68bb      	ldr	r3, [r7, #8]
 800224c:	2b00      	cmp	r3, #0
 800224e:	d101      	bne.n	8002254 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Return function status */
    return HAL_ERROR;
 8002250:	2301      	movs	r3, #1
 8002252:	e0b0      	b.n	80023b6 <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800225a:	2b01      	cmp	r3, #1
 800225c:	d101      	bne.n	8002262 <HAL_ADCEx_MultiModeConfigChannel+0x6e>
 800225e:	2302      	movs	r3, #2
 8002260:	e0a9      	b.n	80023b6 <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	2201      	movs	r2, #1
 8002266:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  if ( (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET) 
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	689b      	ldr	r3, [r3, #8]
 8002270:	f003 0304 	and.w	r3, r3, #4
 8002274:	2b00      	cmp	r3, #0
 8002276:	f040 808d 	bne.w	8002394 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
    && (ADC_IS_CONVERSION_ONGOING_REGULAR(&tmphadcSharingSameCommonRegister) == RESET) )
 800227a:	68bb      	ldr	r3, [r7, #8]
 800227c:	689b      	ldr	r3, [r3, #8]
 800227e:	f003 0304 	and.w	r3, r3, #4
 8002282:	2b00      	cmp	r3, #0
 8002284:	f040 8086 	bne.w	8002394 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
  {
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002290:	d004      	beq.n	800229c <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	4a4b      	ldr	r2, [pc, #300]	@ (80023c4 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8002298:	4293      	cmp	r3, r2
 800229a:	d101      	bne.n	80022a0 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 800229c:	4b4c      	ldr	r3, [pc, #304]	@ (80023d0 <HAL_ADCEx_MultiModeConfigChannel+0x1dc>)
 800229e:	e000      	b.n	80022a2 <HAL_ADCEx_MultiModeConfigChannel+0xae>
 80022a0:	4b4c      	ldr	r3, [pc, #304]	@ (80023d4 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>)
 80022a2:	65bb      	str	r3, [r7, #88]	@ 0x58
    
    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 80022a4:	683b      	ldr	r3, [r7, #0]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d040      	beq.n	800232e <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    {
      /* Configuration of ADC common group ADC1&ADC2, ADC3&ADC4 if available    */
      /* (ADC2, ADC3, ADC4 availability depends on STM32 product)               */
      /*  - DMA access mode                                                     */
      MODIFY_REG(tmpADC_Common->CCR                                          ,
 80022ac:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80022ae:	689b      	ldr	r3, [r3, #8]
 80022b0:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80022b4:	683b      	ldr	r3, [r7, #0]
 80022b6:	6859      	ldr	r1, [r3, #4]
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80022be:	035b      	lsls	r3, r3, #13
 80022c0:	430b      	orrs	r3, r1
 80022c2:	431a      	orrs	r2, r3
 80022c4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80022c6:	609a      	str	r2, [r3, #8]
      /*       parameters, their setting is bypassed without error reporting    */
      /*       (as it can be the expected behaviour in case of intended action  */
      /*       to update parameter above (which fulfills the ADC state          */
      /*       condition: no conversion on going on group regular)              */
      /*       on the fly).                                                     */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	689b      	ldr	r3, [r3, #8]
 80022ce:	f003 0303 	and.w	r3, r3, #3
 80022d2:	2b01      	cmp	r3, #1
 80022d4:	d108      	bne.n	80022e8 <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	f003 0301 	and.w	r3, r3, #1
 80022e0:	2b01      	cmp	r3, #1
 80022e2:	d101      	bne.n	80022e8 <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 80022e4:	2301      	movs	r3, #1
 80022e6:	e000      	b.n	80022ea <HAL_ADCEx_MultiModeConfigChannel+0xf6>
 80022e8:	2300      	movs	r3, #0
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d15c      	bne.n	80023a8 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 80022ee:	68bb      	ldr	r3, [r7, #8]
 80022f0:	689b      	ldr	r3, [r3, #8]
 80022f2:	f003 0303 	and.w	r3, r3, #3
 80022f6:	2b01      	cmp	r3, #1
 80022f8:	d107      	bne.n	800230a <HAL_ADCEx_MultiModeConfigChannel+0x116>
 80022fa:	68bb      	ldr	r3, [r7, #8]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	f003 0301 	and.w	r3, r3, #1
 8002302:	2b01      	cmp	r3, #1
 8002304:	d101      	bne.n	800230a <HAL_ADCEx_MultiModeConfigChannel+0x116>
 8002306:	2301      	movs	r3, #1
 8002308:	e000      	b.n	800230c <HAL_ADCEx_MultiModeConfigChannel+0x118>
 800230a:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 800230c:	2b00      	cmp	r3, #0
 800230e:	d14b      	bne.n	80023a8 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        MODIFY_REG(tmpADC_Common->CCR                                          ,
 8002310:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002312:	689b      	ldr	r3, [r3, #8]
 8002314:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8002318:	f023 030f 	bic.w	r3, r3, #15
 800231c:	683a      	ldr	r2, [r7, #0]
 800231e:	6811      	ldr	r1, [r2, #0]
 8002320:	683a      	ldr	r2, [r7, #0]
 8002322:	6892      	ldr	r2, [r2, #8]
 8002324:	430a      	orrs	r2, r1
 8002326:	431a      	orrs	r2, r3
 8002328:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800232a:	609a      	str	r2, [r3, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 800232c:	e03c      	b.n	80023a8 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
                   multimode->TwoSamplingDelay                                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 800232e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002330:	689b      	ldr	r3, [r3, #8]
 8002332:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002336:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002338:	609a      	str	r2, [r3, #8]
      
      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	689b      	ldr	r3, [r3, #8]
 8002340:	f003 0303 	and.w	r3, r3, #3
 8002344:	2b01      	cmp	r3, #1
 8002346:	d108      	bne.n	800235a <HAL_ADCEx_MultiModeConfigChannel+0x166>
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	f003 0301 	and.w	r3, r3, #1
 8002352:	2b01      	cmp	r3, #1
 8002354:	d101      	bne.n	800235a <HAL_ADCEx_MultiModeConfigChannel+0x166>
 8002356:	2301      	movs	r3, #1
 8002358:	e000      	b.n	800235c <HAL_ADCEx_MultiModeConfigChannel+0x168>
 800235a:	2300      	movs	r3, #0
 800235c:	2b00      	cmp	r3, #0
 800235e:	d123      	bne.n	80023a8 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8002360:	68bb      	ldr	r3, [r7, #8]
 8002362:	689b      	ldr	r3, [r3, #8]
 8002364:	f003 0303 	and.w	r3, r3, #3
 8002368:	2b01      	cmp	r3, #1
 800236a:	d107      	bne.n	800237c <HAL_ADCEx_MultiModeConfigChannel+0x188>
 800236c:	68bb      	ldr	r3, [r7, #8]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	f003 0301 	and.w	r3, r3, #1
 8002374:	2b01      	cmp	r3, #1
 8002376:	d101      	bne.n	800237c <HAL_ADCEx_MultiModeConfigChannel+0x188>
 8002378:	2301      	movs	r3, #1
 800237a:	e000      	b.n	800237e <HAL_ADCEx_MultiModeConfigChannel+0x18a>
 800237c:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 800237e:	2b00      	cmp	r3, #0
 8002380:	d112      	bne.n	80023a8 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI | ADC_CCR_DELAY);
 8002382:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002384:	689b      	ldr	r3, [r3, #8]
 8002386:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 800238a:	f023 030f 	bic.w	r3, r3, #15
 800238e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8002390:	6093      	str	r3, [r2, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8002392:	e009      	b.n	80023a8 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002398:	f043 0220 	orr.w	r2, r3, #32
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	641a      	str	r2, [r3, #64]	@ 0x40
    
    tmp_hal_status = HAL_ERROR;
 80023a0:	2301      	movs	r3, #1
 80023a2:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 80023a6:	e000      	b.n	80023aa <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 80023a8:	bf00      	nop
  }
    
    
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	2200      	movs	r2, #0
 80023ae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 80023b2:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
} 
 80023b6:	4618      	mov	r0, r3
 80023b8:	3764      	adds	r7, #100	@ 0x64
 80023ba:	46bd      	mov	sp, r7
 80023bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c0:	4770      	bx	lr
 80023c2:	bf00      	nop
 80023c4:	50000100 	.word	0x50000100
 80023c8:	50000400 	.word	0x50000400
 80023cc:	50000500 	.word	0x50000500
 80023d0:	50000300 	.word	0x50000300
 80023d4:	50000700 	.word	0x50000700

080023d8 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80023d8:	b580      	push	{r7, lr}
 80023da:	b084      	sub	sp, #16
 80023dc:	af00      	add	r7, sp, #0
 80023de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80023e0:	2300      	movs	r3, #0
 80023e2:	60fb      	str	r3, [r7, #12]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	689b      	ldr	r3, [r3, #8]
 80023ea:	f003 0303 	and.w	r3, r3, #3
 80023ee:	2b01      	cmp	r3, #1
 80023f0:	d108      	bne.n	8002404 <ADC_Enable+0x2c>
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	f003 0301 	and.w	r3, r3, #1
 80023fc:	2b01      	cmp	r3, #1
 80023fe:	d101      	bne.n	8002404 <ADC_Enable+0x2c>
 8002400:	2301      	movs	r3, #1
 8002402:	e000      	b.n	8002406 <ADC_Enable+0x2e>
 8002404:	2300      	movs	r3, #0
 8002406:	2b00      	cmp	r3, #0
 8002408:	d143      	bne.n	8002492 <ADC_Enable+0xba>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	689a      	ldr	r2, [r3, #8]
 8002410:	4b22      	ldr	r3, [pc, #136]	@ (800249c <ADC_Enable+0xc4>)
 8002412:	4013      	ands	r3, r2
 8002414:	2b00      	cmp	r3, #0
 8002416:	d00d      	beq.n	8002434 <ADC_Enable+0x5c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800241c:	f043 0210 	orr.w	r2, r3, #16
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	641a      	str	r2, [r3, #64]	@ 0x40
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002428:	f043 0201 	orr.w	r2, r3, #1
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	645a      	str	r2, [r3, #68]	@ 0x44
      
      return HAL_ERROR;
 8002430:	2301      	movs	r3, #1
 8002432:	e02f      	b.n	8002494 <ADC_Enable+0xbc>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	689a      	ldr	r2, [r3, #8]
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	f042 0201 	orr.w	r2, r2, #1
 8002442:	609a      	str	r2, [r3, #8]
    
    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();  
 8002444:	f7fe ffb6 	bl	80013b4 <HAL_GetTick>
 8002448:	60f8      	str	r0, [r7, #12]
    
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800244a:	e01b      	b.n	8002484 <ADC_Enable+0xac>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800244c:	f7fe ffb2 	bl	80013b4 <HAL_GetTick>
 8002450:	4602      	mov	r2, r0
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	1ad3      	subs	r3, r2, r3
 8002456:	2b02      	cmp	r3, #2
 8002458:	d914      	bls.n	8002484 <ADC_Enable+0xac>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	f003 0301 	and.w	r3, r3, #1
 8002464:	2b01      	cmp	r3, #1
 8002466:	d00d      	beq.n	8002484 <ADC_Enable+0xac>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800246c:	f043 0210 	orr.w	r2, r3, #16
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002478:	f043 0201 	orr.w	r2, r3, #1
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	645a      	str	r2, [r3, #68]	@ 0x44

          return HAL_ERROR;
 8002480:	2301      	movs	r3, #1
 8002482:	e007      	b.n	8002494 <ADC_Enable+0xbc>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	f003 0301 	and.w	r3, r3, #1
 800248e:	2b01      	cmp	r3, #1
 8002490:	d1dc      	bne.n	800244c <ADC_Enable+0x74>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002492:	2300      	movs	r3, #0
}
 8002494:	4618      	mov	r0, r3
 8002496:	3710      	adds	r7, #16
 8002498:	46bd      	mov	sp, r7
 800249a:	bd80      	pop	{r7, pc}
 800249c:	8000003f 	.word	0x8000003f

080024a0 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 80024a0:	b580      	push	{r7, lr}
 80024a2:	b084      	sub	sp, #16
 80024a4:	af00      	add	r7, sp, #0
 80024a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80024a8:	2300      	movs	r3, #0
 80024aa:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	689b      	ldr	r3, [r3, #8]
 80024b2:	f003 0303 	and.w	r3, r3, #3
 80024b6:	2b01      	cmp	r3, #1
 80024b8:	d108      	bne.n	80024cc <ADC_Disable+0x2c>
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	f003 0301 	and.w	r3, r3, #1
 80024c4:	2b01      	cmp	r3, #1
 80024c6:	d101      	bne.n	80024cc <ADC_Disable+0x2c>
 80024c8:	2301      	movs	r3, #1
 80024ca:	e000      	b.n	80024ce <ADC_Disable+0x2e>
 80024cc:	2300      	movs	r3, #0
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d047      	beq.n	8002562 <ADC_Disable+0xc2>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	689b      	ldr	r3, [r3, #8]
 80024d8:	f003 030d 	and.w	r3, r3, #13
 80024dc:	2b01      	cmp	r3, #1
 80024de:	d10f      	bne.n	8002500 <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	689a      	ldr	r2, [r3, #8]
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	f042 0202 	orr.w	r2, r2, #2
 80024ee:	609a      	str	r2, [r3, #8]
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	2203      	movs	r2, #3
 80024f6:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 80024f8:	f7fe ff5c 	bl	80013b4 <HAL_GetTick>
 80024fc:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80024fe:	e029      	b.n	8002554 <ADC_Disable+0xb4>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002504:	f043 0210 	orr.w	r2, r3, #16
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	641a      	str	r2, [r3, #64]	@ 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002510:	f043 0201 	orr.w	r2, r3, #1
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	645a      	str	r2, [r3, #68]	@ 0x44
      return HAL_ERROR;
 8002518:	2301      	movs	r3, #1
 800251a:	e023      	b.n	8002564 <ADC_Disable+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800251c:	f7fe ff4a 	bl	80013b4 <HAL_GetTick>
 8002520:	4602      	mov	r2, r0
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	1ad3      	subs	r3, r2, r3
 8002526:	2b02      	cmp	r3, #2
 8002528:	d914      	bls.n	8002554 <ADC_Disable+0xb4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	689b      	ldr	r3, [r3, #8]
 8002530:	f003 0301 	and.w	r3, r3, #1
 8002534:	2b01      	cmp	r3, #1
 8002536:	d10d      	bne.n	8002554 <ADC_Disable+0xb4>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800253c:	f043 0210 	orr.w	r2, r3, #16
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002548:	f043 0201 	orr.w	r2, r3, #1
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	645a      	str	r2, [r3, #68]	@ 0x44

          return HAL_ERROR;
 8002550:	2301      	movs	r3, #1
 8002552:	e007      	b.n	8002564 <ADC_Disable+0xc4>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	689b      	ldr	r3, [r3, #8]
 800255a:	f003 0301 	and.w	r3, r3, #1
 800255e:	2b01      	cmp	r3, #1
 8002560:	d0dc      	beq.n	800251c <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002562:	2300      	movs	r3, #0
}
 8002564:	4618      	mov	r0, r3
 8002566:	3710      	adds	r7, #16
 8002568:	46bd      	mov	sp, r7
 800256a:	bd80      	pop	{r7, pc}

0800256c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800256c:	b480      	push	{r7}
 800256e:	b085      	sub	sp, #20
 8002570:	af00      	add	r7, sp, #0
 8002572:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	f003 0307 	and.w	r3, r3, #7
 800257a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800257c:	4b0c      	ldr	r3, [pc, #48]	@ (80025b0 <__NVIC_SetPriorityGrouping+0x44>)
 800257e:	68db      	ldr	r3, [r3, #12]
 8002580:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002582:	68ba      	ldr	r2, [r7, #8]
 8002584:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002588:	4013      	ands	r3, r2
 800258a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002590:	68bb      	ldr	r3, [r7, #8]
 8002592:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002594:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002598:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800259c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800259e:	4a04      	ldr	r2, [pc, #16]	@ (80025b0 <__NVIC_SetPriorityGrouping+0x44>)
 80025a0:	68bb      	ldr	r3, [r7, #8]
 80025a2:	60d3      	str	r3, [r2, #12]
}
 80025a4:	bf00      	nop
 80025a6:	3714      	adds	r7, #20
 80025a8:	46bd      	mov	sp, r7
 80025aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ae:	4770      	bx	lr
 80025b0:	e000ed00 	.word	0xe000ed00

080025b4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80025b4:	b480      	push	{r7}
 80025b6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80025b8:	4b04      	ldr	r3, [pc, #16]	@ (80025cc <__NVIC_GetPriorityGrouping+0x18>)
 80025ba:	68db      	ldr	r3, [r3, #12]
 80025bc:	0a1b      	lsrs	r3, r3, #8
 80025be:	f003 0307 	and.w	r3, r3, #7
}
 80025c2:	4618      	mov	r0, r3
 80025c4:	46bd      	mov	sp, r7
 80025c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ca:	4770      	bx	lr
 80025cc:	e000ed00 	.word	0xe000ed00

080025d0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80025d0:	b480      	push	{r7}
 80025d2:	b083      	sub	sp, #12
 80025d4:	af00      	add	r7, sp, #0
 80025d6:	4603      	mov	r3, r0
 80025d8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80025da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025de:	2b00      	cmp	r3, #0
 80025e0:	db0b      	blt.n	80025fa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80025e2:	79fb      	ldrb	r3, [r7, #7]
 80025e4:	f003 021f 	and.w	r2, r3, #31
 80025e8:	4907      	ldr	r1, [pc, #28]	@ (8002608 <__NVIC_EnableIRQ+0x38>)
 80025ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025ee:	095b      	lsrs	r3, r3, #5
 80025f0:	2001      	movs	r0, #1
 80025f2:	fa00 f202 	lsl.w	r2, r0, r2
 80025f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80025fa:	bf00      	nop
 80025fc:	370c      	adds	r7, #12
 80025fe:	46bd      	mov	sp, r7
 8002600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002604:	4770      	bx	lr
 8002606:	bf00      	nop
 8002608:	e000e100 	.word	0xe000e100

0800260c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800260c:	b480      	push	{r7}
 800260e:	b083      	sub	sp, #12
 8002610:	af00      	add	r7, sp, #0
 8002612:	4603      	mov	r3, r0
 8002614:	6039      	str	r1, [r7, #0]
 8002616:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002618:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800261c:	2b00      	cmp	r3, #0
 800261e:	db0a      	blt.n	8002636 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002620:	683b      	ldr	r3, [r7, #0]
 8002622:	b2da      	uxtb	r2, r3
 8002624:	490c      	ldr	r1, [pc, #48]	@ (8002658 <__NVIC_SetPriority+0x4c>)
 8002626:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800262a:	0112      	lsls	r2, r2, #4
 800262c:	b2d2      	uxtb	r2, r2
 800262e:	440b      	add	r3, r1
 8002630:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002634:	e00a      	b.n	800264c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002636:	683b      	ldr	r3, [r7, #0]
 8002638:	b2da      	uxtb	r2, r3
 800263a:	4908      	ldr	r1, [pc, #32]	@ (800265c <__NVIC_SetPriority+0x50>)
 800263c:	79fb      	ldrb	r3, [r7, #7]
 800263e:	f003 030f 	and.w	r3, r3, #15
 8002642:	3b04      	subs	r3, #4
 8002644:	0112      	lsls	r2, r2, #4
 8002646:	b2d2      	uxtb	r2, r2
 8002648:	440b      	add	r3, r1
 800264a:	761a      	strb	r2, [r3, #24]
}
 800264c:	bf00      	nop
 800264e:	370c      	adds	r7, #12
 8002650:	46bd      	mov	sp, r7
 8002652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002656:	4770      	bx	lr
 8002658:	e000e100 	.word	0xe000e100
 800265c:	e000ed00 	.word	0xe000ed00

08002660 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002660:	b480      	push	{r7}
 8002662:	b089      	sub	sp, #36	@ 0x24
 8002664:	af00      	add	r7, sp, #0
 8002666:	60f8      	str	r0, [r7, #12]
 8002668:	60b9      	str	r1, [r7, #8]
 800266a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	f003 0307 	and.w	r3, r3, #7
 8002672:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002674:	69fb      	ldr	r3, [r7, #28]
 8002676:	f1c3 0307 	rsb	r3, r3, #7
 800267a:	2b04      	cmp	r3, #4
 800267c:	bf28      	it	cs
 800267e:	2304      	movcs	r3, #4
 8002680:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002682:	69fb      	ldr	r3, [r7, #28]
 8002684:	3304      	adds	r3, #4
 8002686:	2b06      	cmp	r3, #6
 8002688:	d902      	bls.n	8002690 <NVIC_EncodePriority+0x30>
 800268a:	69fb      	ldr	r3, [r7, #28]
 800268c:	3b03      	subs	r3, #3
 800268e:	e000      	b.n	8002692 <NVIC_EncodePriority+0x32>
 8002690:	2300      	movs	r3, #0
 8002692:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002694:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002698:	69bb      	ldr	r3, [r7, #24]
 800269a:	fa02 f303 	lsl.w	r3, r2, r3
 800269e:	43da      	mvns	r2, r3
 80026a0:	68bb      	ldr	r3, [r7, #8]
 80026a2:	401a      	ands	r2, r3
 80026a4:	697b      	ldr	r3, [r7, #20]
 80026a6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80026a8:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80026ac:	697b      	ldr	r3, [r7, #20]
 80026ae:	fa01 f303 	lsl.w	r3, r1, r3
 80026b2:	43d9      	mvns	r1, r3
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80026b8:	4313      	orrs	r3, r2
         );
}
 80026ba:	4618      	mov	r0, r3
 80026bc:	3724      	adds	r7, #36	@ 0x24
 80026be:	46bd      	mov	sp, r7
 80026c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c4:	4770      	bx	lr
	...

080026c8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80026c8:	b580      	push	{r7, lr}
 80026ca:	b082      	sub	sp, #8
 80026cc:	af00      	add	r7, sp, #0
 80026ce:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	3b01      	subs	r3, #1
 80026d4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80026d8:	d301      	bcc.n	80026de <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80026da:	2301      	movs	r3, #1
 80026dc:	e00f      	b.n	80026fe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80026de:	4a0a      	ldr	r2, [pc, #40]	@ (8002708 <SysTick_Config+0x40>)
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	3b01      	subs	r3, #1
 80026e4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80026e6:	210f      	movs	r1, #15
 80026e8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80026ec:	f7ff ff8e 	bl	800260c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80026f0:	4b05      	ldr	r3, [pc, #20]	@ (8002708 <SysTick_Config+0x40>)
 80026f2:	2200      	movs	r2, #0
 80026f4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80026f6:	4b04      	ldr	r3, [pc, #16]	@ (8002708 <SysTick_Config+0x40>)
 80026f8:	2207      	movs	r2, #7
 80026fa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80026fc:	2300      	movs	r3, #0
}
 80026fe:	4618      	mov	r0, r3
 8002700:	3708      	adds	r7, #8
 8002702:	46bd      	mov	sp, r7
 8002704:	bd80      	pop	{r7, pc}
 8002706:	bf00      	nop
 8002708:	e000e010 	.word	0xe000e010

0800270c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800270c:	b580      	push	{r7, lr}
 800270e:	b082      	sub	sp, #8
 8002710:	af00      	add	r7, sp, #0
 8002712:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002714:	6878      	ldr	r0, [r7, #4]
 8002716:	f7ff ff29 	bl	800256c <__NVIC_SetPriorityGrouping>
}
 800271a:	bf00      	nop
 800271c:	3708      	adds	r7, #8
 800271e:	46bd      	mov	sp, r7
 8002720:	bd80      	pop	{r7, pc}

08002722 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002722:	b580      	push	{r7, lr}
 8002724:	b086      	sub	sp, #24
 8002726:	af00      	add	r7, sp, #0
 8002728:	4603      	mov	r3, r0
 800272a:	60b9      	str	r1, [r7, #8]
 800272c:	607a      	str	r2, [r7, #4]
 800272e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002730:	2300      	movs	r3, #0
 8002732:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002734:	f7ff ff3e 	bl	80025b4 <__NVIC_GetPriorityGrouping>
 8002738:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800273a:	687a      	ldr	r2, [r7, #4]
 800273c:	68b9      	ldr	r1, [r7, #8]
 800273e:	6978      	ldr	r0, [r7, #20]
 8002740:	f7ff ff8e 	bl	8002660 <NVIC_EncodePriority>
 8002744:	4602      	mov	r2, r0
 8002746:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800274a:	4611      	mov	r1, r2
 800274c:	4618      	mov	r0, r3
 800274e:	f7ff ff5d 	bl	800260c <__NVIC_SetPriority>
}
 8002752:	bf00      	nop
 8002754:	3718      	adds	r7, #24
 8002756:	46bd      	mov	sp, r7
 8002758:	bd80      	pop	{r7, pc}

0800275a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800275a:	b580      	push	{r7, lr}
 800275c:	b082      	sub	sp, #8
 800275e:	af00      	add	r7, sp, #0
 8002760:	4603      	mov	r3, r0
 8002762:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002764:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002768:	4618      	mov	r0, r3
 800276a:	f7ff ff31 	bl	80025d0 <__NVIC_EnableIRQ>
}
 800276e:	bf00      	nop
 8002770:	3708      	adds	r7, #8
 8002772:	46bd      	mov	sp, r7
 8002774:	bd80      	pop	{r7, pc}

08002776 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002776:	b580      	push	{r7, lr}
 8002778:	b082      	sub	sp, #8
 800277a:	af00      	add	r7, sp, #0
 800277c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800277e:	6878      	ldr	r0, [r7, #4]
 8002780:	f7ff ffa2 	bl	80026c8 <SysTick_Config>
 8002784:	4603      	mov	r3, r0
}
 8002786:	4618      	mov	r0, r3
 8002788:	3708      	adds	r7, #8
 800278a:	46bd      	mov	sp, r7
 800278c:	bd80      	pop	{r7, pc}
	...

08002790 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002790:	b480      	push	{r7}
 8002792:	b087      	sub	sp, #28
 8002794:	af00      	add	r7, sp, #0
 8002796:	6078      	str	r0, [r7, #4]
 8002798:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800279a:	2300      	movs	r3, #0
 800279c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800279e:	e154      	b.n	8002a4a <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80027a0:	683b      	ldr	r3, [r7, #0]
 80027a2:	681a      	ldr	r2, [r3, #0]
 80027a4:	2101      	movs	r1, #1
 80027a6:	697b      	ldr	r3, [r7, #20]
 80027a8:	fa01 f303 	lsl.w	r3, r1, r3
 80027ac:	4013      	ands	r3, r2
 80027ae:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	f000 8146 	beq.w	8002a44 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80027b8:	683b      	ldr	r3, [r7, #0]
 80027ba:	685b      	ldr	r3, [r3, #4]
 80027bc:	f003 0303 	and.w	r3, r3, #3
 80027c0:	2b01      	cmp	r3, #1
 80027c2:	d005      	beq.n	80027d0 <HAL_GPIO_Init+0x40>
 80027c4:	683b      	ldr	r3, [r7, #0]
 80027c6:	685b      	ldr	r3, [r3, #4]
 80027c8:	f003 0303 	and.w	r3, r3, #3
 80027cc:	2b02      	cmp	r3, #2
 80027ce:	d130      	bne.n	8002832 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	689b      	ldr	r3, [r3, #8]
 80027d4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80027d6:	697b      	ldr	r3, [r7, #20]
 80027d8:	005b      	lsls	r3, r3, #1
 80027da:	2203      	movs	r2, #3
 80027dc:	fa02 f303 	lsl.w	r3, r2, r3
 80027e0:	43db      	mvns	r3, r3
 80027e2:	693a      	ldr	r2, [r7, #16]
 80027e4:	4013      	ands	r3, r2
 80027e6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80027e8:	683b      	ldr	r3, [r7, #0]
 80027ea:	68da      	ldr	r2, [r3, #12]
 80027ec:	697b      	ldr	r3, [r7, #20]
 80027ee:	005b      	lsls	r3, r3, #1
 80027f0:	fa02 f303 	lsl.w	r3, r2, r3
 80027f4:	693a      	ldr	r2, [r7, #16]
 80027f6:	4313      	orrs	r3, r2
 80027f8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	693a      	ldr	r2, [r7, #16]
 80027fe:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	685b      	ldr	r3, [r3, #4]
 8002804:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002806:	2201      	movs	r2, #1
 8002808:	697b      	ldr	r3, [r7, #20]
 800280a:	fa02 f303 	lsl.w	r3, r2, r3
 800280e:	43db      	mvns	r3, r3
 8002810:	693a      	ldr	r2, [r7, #16]
 8002812:	4013      	ands	r3, r2
 8002814:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002816:	683b      	ldr	r3, [r7, #0]
 8002818:	685b      	ldr	r3, [r3, #4]
 800281a:	091b      	lsrs	r3, r3, #4
 800281c:	f003 0201 	and.w	r2, r3, #1
 8002820:	697b      	ldr	r3, [r7, #20]
 8002822:	fa02 f303 	lsl.w	r3, r2, r3
 8002826:	693a      	ldr	r2, [r7, #16]
 8002828:	4313      	orrs	r3, r2
 800282a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	693a      	ldr	r2, [r7, #16]
 8002830:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002832:	683b      	ldr	r3, [r7, #0]
 8002834:	685b      	ldr	r3, [r3, #4]
 8002836:	f003 0303 	and.w	r3, r3, #3
 800283a:	2b03      	cmp	r3, #3
 800283c:	d017      	beq.n	800286e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	68db      	ldr	r3, [r3, #12]
 8002842:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8002844:	697b      	ldr	r3, [r7, #20]
 8002846:	005b      	lsls	r3, r3, #1
 8002848:	2203      	movs	r2, #3
 800284a:	fa02 f303 	lsl.w	r3, r2, r3
 800284e:	43db      	mvns	r3, r3
 8002850:	693a      	ldr	r2, [r7, #16]
 8002852:	4013      	ands	r3, r2
 8002854:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002856:	683b      	ldr	r3, [r7, #0]
 8002858:	689a      	ldr	r2, [r3, #8]
 800285a:	697b      	ldr	r3, [r7, #20]
 800285c:	005b      	lsls	r3, r3, #1
 800285e:	fa02 f303 	lsl.w	r3, r2, r3
 8002862:	693a      	ldr	r2, [r7, #16]
 8002864:	4313      	orrs	r3, r2
 8002866:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	693a      	ldr	r2, [r7, #16]
 800286c:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800286e:	683b      	ldr	r3, [r7, #0]
 8002870:	685b      	ldr	r3, [r3, #4]
 8002872:	f003 0303 	and.w	r3, r3, #3
 8002876:	2b02      	cmp	r3, #2
 8002878:	d123      	bne.n	80028c2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800287a:	697b      	ldr	r3, [r7, #20]
 800287c:	08da      	lsrs	r2, r3, #3
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	3208      	adds	r2, #8
 8002882:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002886:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002888:	697b      	ldr	r3, [r7, #20]
 800288a:	f003 0307 	and.w	r3, r3, #7
 800288e:	009b      	lsls	r3, r3, #2
 8002890:	220f      	movs	r2, #15
 8002892:	fa02 f303 	lsl.w	r3, r2, r3
 8002896:	43db      	mvns	r3, r3
 8002898:	693a      	ldr	r2, [r7, #16]
 800289a:	4013      	ands	r3, r2
 800289c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800289e:	683b      	ldr	r3, [r7, #0]
 80028a0:	691a      	ldr	r2, [r3, #16]
 80028a2:	697b      	ldr	r3, [r7, #20]
 80028a4:	f003 0307 	and.w	r3, r3, #7
 80028a8:	009b      	lsls	r3, r3, #2
 80028aa:	fa02 f303 	lsl.w	r3, r2, r3
 80028ae:	693a      	ldr	r2, [r7, #16]
 80028b0:	4313      	orrs	r3, r2
 80028b2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80028b4:	697b      	ldr	r3, [r7, #20]
 80028b6:	08da      	lsrs	r2, r3, #3
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	3208      	adds	r2, #8
 80028bc:	6939      	ldr	r1, [r7, #16]
 80028be:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80028c8:	697b      	ldr	r3, [r7, #20]
 80028ca:	005b      	lsls	r3, r3, #1
 80028cc:	2203      	movs	r2, #3
 80028ce:	fa02 f303 	lsl.w	r3, r2, r3
 80028d2:	43db      	mvns	r3, r3
 80028d4:	693a      	ldr	r2, [r7, #16]
 80028d6:	4013      	ands	r3, r2
 80028d8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80028da:	683b      	ldr	r3, [r7, #0]
 80028dc:	685b      	ldr	r3, [r3, #4]
 80028de:	f003 0203 	and.w	r2, r3, #3
 80028e2:	697b      	ldr	r3, [r7, #20]
 80028e4:	005b      	lsls	r3, r3, #1
 80028e6:	fa02 f303 	lsl.w	r3, r2, r3
 80028ea:	693a      	ldr	r2, [r7, #16]
 80028ec:	4313      	orrs	r3, r2
 80028ee:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	693a      	ldr	r2, [r7, #16]
 80028f4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80028f6:	683b      	ldr	r3, [r7, #0]
 80028f8:	685b      	ldr	r3, [r3, #4]
 80028fa:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80028fe:	2b00      	cmp	r3, #0
 8002900:	f000 80a0 	beq.w	8002a44 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002904:	4b58      	ldr	r3, [pc, #352]	@ (8002a68 <HAL_GPIO_Init+0x2d8>)
 8002906:	699b      	ldr	r3, [r3, #24]
 8002908:	4a57      	ldr	r2, [pc, #348]	@ (8002a68 <HAL_GPIO_Init+0x2d8>)
 800290a:	f043 0301 	orr.w	r3, r3, #1
 800290e:	6193      	str	r3, [r2, #24]
 8002910:	4b55      	ldr	r3, [pc, #340]	@ (8002a68 <HAL_GPIO_Init+0x2d8>)
 8002912:	699b      	ldr	r3, [r3, #24]
 8002914:	f003 0301 	and.w	r3, r3, #1
 8002918:	60bb      	str	r3, [r7, #8]
 800291a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800291c:	4a53      	ldr	r2, [pc, #332]	@ (8002a6c <HAL_GPIO_Init+0x2dc>)
 800291e:	697b      	ldr	r3, [r7, #20]
 8002920:	089b      	lsrs	r3, r3, #2
 8002922:	3302      	adds	r3, #2
 8002924:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002928:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800292a:	697b      	ldr	r3, [r7, #20]
 800292c:	f003 0303 	and.w	r3, r3, #3
 8002930:	009b      	lsls	r3, r3, #2
 8002932:	220f      	movs	r2, #15
 8002934:	fa02 f303 	lsl.w	r3, r2, r3
 8002938:	43db      	mvns	r3, r3
 800293a:	693a      	ldr	r2, [r7, #16]
 800293c:	4013      	ands	r3, r2
 800293e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8002946:	d019      	beq.n	800297c <HAL_GPIO_Init+0x1ec>
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	4a49      	ldr	r2, [pc, #292]	@ (8002a70 <HAL_GPIO_Init+0x2e0>)
 800294c:	4293      	cmp	r3, r2
 800294e:	d013      	beq.n	8002978 <HAL_GPIO_Init+0x1e8>
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	4a48      	ldr	r2, [pc, #288]	@ (8002a74 <HAL_GPIO_Init+0x2e4>)
 8002954:	4293      	cmp	r3, r2
 8002956:	d00d      	beq.n	8002974 <HAL_GPIO_Init+0x1e4>
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	4a47      	ldr	r2, [pc, #284]	@ (8002a78 <HAL_GPIO_Init+0x2e8>)
 800295c:	4293      	cmp	r3, r2
 800295e:	d007      	beq.n	8002970 <HAL_GPIO_Init+0x1e0>
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	4a46      	ldr	r2, [pc, #280]	@ (8002a7c <HAL_GPIO_Init+0x2ec>)
 8002964:	4293      	cmp	r3, r2
 8002966:	d101      	bne.n	800296c <HAL_GPIO_Init+0x1dc>
 8002968:	2304      	movs	r3, #4
 800296a:	e008      	b.n	800297e <HAL_GPIO_Init+0x1ee>
 800296c:	2305      	movs	r3, #5
 800296e:	e006      	b.n	800297e <HAL_GPIO_Init+0x1ee>
 8002970:	2303      	movs	r3, #3
 8002972:	e004      	b.n	800297e <HAL_GPIO_Init+0x1ee>
 8002974:	2302      	movs	r3, #2
 8002976:	e002      	b.n	800297e <HAL_GPIO_Init+0x1ee>
 8002978:	2301      	movs	r3, #1
 800297a:	e000      	b.n	800297e <HAL_GPIO_Init+0x1ee>
 800297c:	2300      	movs	r3, #0
 800297e:	697a      	ldr	r2, [r7, #20]
 8002980:	f002 0203 	and.w	r2, r2, #3
 8002984:	0092      	lsls	r2, r2, #2
 8002986:	4093      	lsls	r3, r2
 8002988:	693a      	ldr	r2, [r7, #16]
 800298a:	4313      	orrs	r3, r2
 800298c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800298e:	4937      	ldr	r1, [pc, #220]	@ (8002a6c <HAL_GPIO_Init+0x2dc>)
 8002990:	697b      	ldr	r3, [r7, #20]
 8002992:	089b      	lsrs	r3, r3, #2
 8002994:	3302      	adds	r3, #2
 8002996:	693a      	ldr	r2, [r7, #16]
 8002998:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800299c:	4b38      	ldr	r3, [pc, #224]	@ (8002a80 <HAL_GPIO_Init+0x2f0>)
 800299e:	689b      	ldr	r3, [r3, #8]
 80029a0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	43db      	mvns	r3, r3
 80029a6:	693a      	ldr	r2, [r7, #16]
 80029a8:	4013      	ands	r3, r2
 80029aa:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80029ac:	683b      	ldr	r3, [r7, #0]
 80029ae:	685b      	ldr	r3, [r3, #4]
 80029b0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d003      	beq.n	80029c0 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 80029b8:	693a      	ldr	r2, [r7, #16]
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	4313      	orrs	r3, r2
 80029be:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80029c0:	4a2f      	ldr	r2, [pc, #188]	@ (8002a80 <HAL_GPIO_Init+0x2f0>)
 80029c2:	693b      	ldr	r3, [r7, #16]
 80029c4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80029c6:	4b2e      	ldr	r3, [pc, #184]	@ (8002a80 <HAL_GPIO_Init+0x2f0>)
 80029c8:	68db      	ldr	r3, [r3, #12]
 80029ca:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	43db      	mvns	r3, r3
 80029d0:	693a      	ldr	r2, [r7, #16]
 80029d2:	4013      	ands	r3, r2
 80029d4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80029d6:	683b      	ldr	r3, [r7, #0]
 80029d8:	685b      	ldr	r3, [r3, #4]
 80029da:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d003      	beq.n	80029ea <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 80029e2:	693a      	ldr	r2, [r7, #16]
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	4313      	orrs	r3, r2
 80029e8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80029ea:	4a25      	ldr	r2, [pc, #148]	@ (8002a80 <HAL_GPIO_Init+0x2f0>)
 80029ec:	693b      	ldr	r3, [r7, #16]
 80029ee:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80029f0:	4b23      	ldr	r3, [pc, #140]	@ (8002a80 <HAL_GPIO_Init+0x2f0>)
 80029f2:	685b      	ldr	r3, [r3, #4]
 80029f4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	43db      	mvns	r3, r3
 80029fa:	693a      	ldr	r2, [r7, #16]
 80029fc:	4013      	ands	r3, r2
 80029fe:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002a00:	683b      	ldr	r3, [r7, #0]
 8002a02:	685b      	ldr	r3, [r3, #4]
 8002a04:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d003      	beq.n	8002a14 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8002a0c:	693a      	ldr	r2, [r7, #16]
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	4313      	orrs	r3, r2
 8002a12:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002a14:	4a1a      	ldr	r2, [pc, #104]	@ (8002a80 <HAL_GPIO_Init+0x2f0>)
 8002a16:	693b      	ldr	r3, [r7, #16]
 8002a18:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002a1a:	4b19      	ldr	r3, [pc, #100]	@ (8002a80 <HAL_GPIO_Init+0x2f0>)
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	43db      	mvns	r3, r3
 8002a24:	693a      	ldr	r2, [r7, #16]
 8002a26:	4013      	ands	r3, r2
 8002a28:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002a2a:	683b      	ldr	r3, [r7, #0]
 8002a2c:	685b      	ldr	r3, [r3, #4]
 8002a2e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d003      	beq.n	8002a3e <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8002a36:	693a      	ldr	r2, [r7, #16]
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	4313      	orrs	r3, r2
 8002a3c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002a3e:	4a10      	ldr	r2, [pc, #64]	@ (8002a80 <HAL_GPIO_Init+0x2f0>)
 8002a40:	693b      	ldr	r3, [r7, #16]
 8002a42:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002a44:	697b      	ldr	r3, [r7, #20]
 8002a46:	3301      	adds	r3, #1
 8002a48:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002a4a:	683b      	ldr	r3, [r7, #0]
 8002a4c:	681a      	ldr	r2, [r3, #0]
 8002a4e:	697b      	ldr	r3, [r7, #20]
 8002a50:	fa22 f303 	lsr.w	r3, r2, r3
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	f47f aea3 	bne.w	80027a0 <HAL_GPIO_Init+0x10>
  }
}
 8002a5a:	bf00      	nop
 8002a5c:	bf00      	nop
 8002a5e:	371c      	adds	r7, #28
 8002a60:	46bd      	mov	sp, r7
 8002a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a66:	4770      	bx	lr
 8002a68:	40021000 	.word	0x40021000
 8002a6c:	40010000 	.word	0x40010000
 8002a70:	48000400 	.word	0x48000400
 8002a74:	48000800 	.word	0x48000800
 8002a78:	48000c00 	.word	0x48000c00
 8002a7c:	48001000 	.word	0x48001000
 8002a80:	40010400 	.word	0x40010400

08002a84 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002a84:	b480      	push	{r7}
 8002a86:	b083      	sub	sp, #12
 8002a88:	af00      	add	r7, sp, #0
 8002a8a:	6078      	str	r0, [r7, #4]
 8002a8c:	460b      	mov	r3, r1
 8002a8e:	807b      	strh	r3, [r7, #2]
 8002a90:	4613      	mov	r3, r2
 8002a92:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002a94:	787b      	ldrb	r3, [r7, #1]
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d003      	beq.n	8002aa2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002a9a:	887a      	ldrh	r2, [r7, #2]
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002aa0:	e002      	b.n	8002aa8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002aa2:	887a      	ldrh	r2, [r7, #2]
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002aa8:	bf00      	nop
 8002aaa:	370c      	adds	r7, #12
 8002aac:	46bd      	mov	sp, r7
 8002aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab2:	4770      	bx	lr

08002ab4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002ab4:	b580      	push	{r7, lr}
 8002ab6:	b082      	sub	sp, #8
 8002ab8:	af00      	add	r7, sp, #0
 8002aba:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d101      	bne.n	8002ac6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002ac2:	2301      	movs	r3, #1
 8002ac4:	e08d      	b.n	8002be2 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002acc:	b2db      	uxtb	r3, r3
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d106      	bne.n	8002ae0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	2200      	movs	r2, #0
 8002ad6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002ada:	6878      	ldr	r0, [r7, #4]
 8002adc:	f7fe fa62 	bl	8000fa4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	2224      	movs	r2, #36	@ 0x24
 8002ae4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	681a      	ldr	r2, [r3, #0]
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	f022 0201 	bic.w	r2, r2, #1
 8002af6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	685a      	ldr	r2, [r3, #4]
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002b04:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	689a      	ldr	r2, [r3, #8]
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002b14:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	68db      	ldr	r3, [r3, #12]
 8002b1a:	2b01      	cmp	r3, #1
 8002b1c:	d107      	bne.n	8002b2e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	689a      	ldr	r2, [r3, #8]
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002b2a:	609a      	str	r2, [r3, #8]
 8002b2c:	e006      	b.n	8002b3c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	689a      	ldr	r2, [r3, #8]
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8002b3a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	68db      	ldr	r3, [r3, #12]
 8002b40:	2b02      	cmp	r3, #2
 8002b42:	d108      	bne.n	8002b56 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	685a      	ldr	r2, [r3, #4]
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002b52:	605a      	str	r2, [r3, #4]
 8002b54:	e007      	b.n	8002b66 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	685a      	ldr	r2, [r3, #4]
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002b64:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	685b      	ldr	r3, [r3, #4]
 8002b6c:	687a      	ldr	r2, [r7, #4]
 8002b6e:	6812      	ldr	r2, [r2, #0]
 8002b70:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002b74:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002b78:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	68da      	ldr	r2, [r3, #12]
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002b88:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	691a      	ldr	r2, [r3, #16]
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	695b      	ldr	r3, [r3, #20]
 8002b92:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	699b      	ldr	r3, [r3, #24]
 8002b9a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	430a      	orrs	r2, r1
 8002ba2:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	69d9      	ldr	r1, [r3, #28]
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	6a1a      	ldr	r2, [r3, #32]
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	430a      	orrs	r2, r1
 8002bb2:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	681a      	ldr	r2, [r3, #0]
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	f042 0201 	orr.w	r2, r2, #1
 8002bc2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	2200      	movs	r2, #0
 8002bc8:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	2220      	movs	r2, #32
 8002bce:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	2200      	movs	r2, #0
 8002bd6:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	2200      	movs	r2, #0
 8002bdc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8002be0:	2300      	movs	r3, #0
}
 8002be2:	4618      	mov	r0, r3
 8002be4:	3708      	adds	r7, #8
 8002be6:	46bd      	mov	sp, r7
 8002be8:	bd80      	pop	{r7, pc}
	...

08002bec <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002bec:	b580      	push	{r7, lr}
 8002bee:	b088      	sub	sp, #32
 8002bf0:	af02      	add	r7, sp, #8
 8002bf2:	60f8      	str	r0, [r7, #12]
 8002bf4:	4608      	mov	r0, r1
 8002bf6:	4611      	mov	r1, r2
 8002bf8:	461a      	mov	r2, r3
 8002bfa:	4603      	mov	r3, r0
 8002bfc:	817b      	strh	r3, [r7, #10]
 8002bfe:	460b      	mov	r3, r1
 8002c00:	813b      	strh	r3, [r7, #8]
 8002c02:	4613      	mov	r3, r2
 8002c04:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002c0c:	b2db      	uxtb	r3, r3
 8002c0e:	2b20      	cmp	r3, #32
 8002c10:	f040 80f9 	bne.w	8002e06 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002c14:	6a3b      	ldr	r3, [r7, #32]
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d002      	beq.n	8002c20 <HAL_I2C_Mem_Write+0x34>
 8002c1a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d105      	bne.n	8002c2c <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002c26:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8002c28:	2301      	movs	r3, #1
 8002c2a:	e0ed      	b.n	8002e08 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002c32:	2b01      	cmp	r3, #1
 8002c34:	d101      	bne.n	8002c3a <HAL_I2C_Mem_Write+0x4e>
 8002c36:	2302      	movs	r3, #2
 8002c38:	e0e6      	b.n	8002e08 <HAL_I2C_Mem_Write+0x21c>
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	2201      	movs	r2, #1
 8002c3e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002c42:	f7fe fbb7 	bl	80013b4 <HAL_GetTick>
 8002c46:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002c48:	697b      	ldr	r3, [r7, #20]
 8002c4a:	9300      	str	r3, [sp, #0]
 8002c4c:	2319      	movs	r3, #25
 8002c4e:	2201      	movs	r2, #1
 8002c50:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002c54:	68f8      	ldr	r0, [r7, #12]
 8002c56:	f000 f955 	bl	8002f04 <I2C_WaitOnFlagUntilTimeout>
 8002c5a:	4603      	mov	r3, r0
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d001      	beq.n	8002c64 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8002c60:	2301      	movs	r3, #1
 8002c62:	e0d1      	b.n	8002e08 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	2221      	movs	r2, #33	@ 0x21
 8002c68:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	2240      	movs	r2, #64	@ 0x40
 8002c70:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	2200      	movs	r2, #0
 8002c78:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	6a3a      	ldr	r2, [r7, #32]
 8002c7e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8002c84:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	2200      	movs	r2, #0
 8002c8a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002c8c:	88f8      	ldrh	r0, [r7, #6]
 8002c8e:	893a      	ldrh	r2, [r7, #8]
 8002c90:	8979      	ldrh	r1, [r7, #10]
 8002c92:	697b      	ldr	r3, [r7, #20]
 8002c94:	9301      	str	r3, [sp, #4]
 8002c96:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002c98:	9300      	str	r3, [sp, #0]
 8002c9a:	4603      	mov	r3, r0
 8002c9c:	68f8      	ldr	r0, [r7, #12]
 8002c9e:	f000 f8b9 	bl	8002e14 <I2C_RequestMemoryWrite>
 8002ca2:	4603      	mov	r3, r0
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d005      	beq.n	8002cb4 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	2200      	movs	r2, #0
 8002cac:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8002cb0:	2301      	movs	r3, #1
 8002cb2:	e0a9      	b.n	8002e08 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002cb8:	b29b      	uxth	r3, r3
 8002cba:	2bff      	cmp	r3, #255	@ 0xff
 8002cbc:	d90e      	bls.n	8002cdc <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	22ff      	movs	r2, #255	@ 0xff
 8002cc2:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002cc8:	b2da      	uxtb	r2, r3
 8002cca:	8979      	ldrh	r1, [r7, #10]
 8002ccc:	2300      	movs	r3, #0
 8002cce:	9300      	str	r3, [sp, #0]
 8002cd0:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002cd4:	68f8      	ldr	r0, [r7, #12]
 8002cd6:	f000 fad9 	bl	800328c <I2C_TransferConfig>
 8002cda:	e00f      	b.n	8002cfc <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002ce0:	b29a      	uxth	r2, r3
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002cea:	b2da      	uxtb	r2, r3
 8002cec:	8979      	ldrh	r1, [r7, #10]
 8002cee:	2300      	movs	r3, #0
 8002cf0:	9300      	str	r3, [sp, #0]
 8002cf2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002cf6:	68f8      	ldr	r0, [r7, #12]
 8002cf8:	f000 fac8 	bl	800328c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002cfc:	697a      	ldr	r2, [r7, #20]
 8002cfe:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002d00:	68f8      	ldr	r0, [r7, #12]
 8002d02:	f000 f958 	bl	8002fb6 <I2C_WaitOnTXISFlagUntilTimeout>
 8002d06:	4603      	mov	r3, r0
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d001      	beq.n	8002d10 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8002d0c:	2301      	movs	r3, #1
 8002d0e:	e07b      	b.n	8002e08 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d14:	781a      	ldrb	r2, [r3, #0]
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d20:	1c5a      	adds	r2, r3, #1
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002d2a:	b29b      	uxth	r3, r3
 8002d2c:	3b01      	subs	r3, #1
 8002d2e:	b29a      	uxth	r2, r3
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002d38:	3b01      	subs	r3, #1
 8002d3a:	b29a      	uxth	r2, r3
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002d44:	b29b      	uxth	r3, r3
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d034      	beq.n	8002db4 <HAL_I2C_Mem_Write+0x1c8>
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d130      	bne.n	8002db4 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002d52:	697b      	ldr	r3, [r7, #20]
 8002d54:	9300      	str	r3, [sp, #0]
 8002d56:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002d58:	2200      	movs	r2, #0
 8002d5a:	2180      	movs	r1, #128	@ 0x80
 8002d5c:	68f8      	ldr	r0, [r7, #12]
 8002d5e:	f000 f8d1 	bl	8002f04 <I2C_WaitOnFlagUntilTimeout>
 8002d62:	4603      	mov	r3, r0
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d001      	beq.n	8002d6c <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8002d68:	2301      	movs	r3, #1
 8002d6a:	e04d      	b.n	8002e08 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002d70:	b29b      	uxth	r3, r3
 8002d72:	2bff      	cmp	r3, #255	@ 0xff
 8002d74:	d90e      	bls.n	8002d94 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	22ff      	movs	r2, #255	@ 0xff
 8002d7a:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002d80:	b2da      	uxtb	r2, r3
 8002d82:	8979      	ldrh	r1, [r7, #10]
 8002d84:	2300      	movs	r3, #0
 8002d86:	9300      	str	r3, [sp, #0]
 8002d88:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002d8c:	68f8      	ldr	r0, [r7, #12]
 8002d8e:	f000 fa7d 	bl	800328c <I2C_TransferConfig>
 8002d92:	e00f      	b.n	8002db4 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002d98:	b29a      	uxth	r2, r3
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002da2:	b2da      	uxtb	r2, r3
 8002da4:	8979      	ldrh	r1, [r7, #10]
 8002da6:	2300      	movs	r3, #0
 8002da8:	9300      	str	r3, [sp, #0]
 8002daa:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002dae:	68f8      	ldr	r0, [r7, #12]
 8002db0:	f000 fa6c 	bl	800328c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002db8:	b29b      	uxth	r3, r3
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d19e      	bne.n	8002cfc <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002dbe:	697a      	ldr	r2, [r7, #20]
 8002dc0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002dc2:	68f8      	ldr	r0, [r7, #12]
 8002dc4:	f000 f93e 	bl	8003044 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002dc8:	4603      	mov	r3, r0
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d001      	beq.n	8002dd2 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8002dce:	2301      	movs	r3, #1
 8002dd0:	e01a      	b.n	8002e08 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	2220      	movs	r2, #32
 8002dd8:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	6859      	ldr	r1, [r3, #4]
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	681a      	ldr	r2, [r3, #0]
 8002de4:	4b0a      	ldr	r3, [pc, #40]	@ (8002e10 <HAL_I2C_Mem_Write+0x224>)
 8002de6:	400b      	ands	r3, r1
 8002de8:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	2220      	movs	r2, #32
 8002dee:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	2200      	movs	r2, #0
 8002df6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	2200      	movs	r2, #0
 8002dfe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002e02:	2300      	movs	r3, #0
 8002e04:	e000      	b.n	8002e08 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8002e06:	2302      	movs	r3, #2
  }
}
 8002e08:	4618      	mov	r0, r3
 8002e0a:	3718      	adds	r7, #24
 8002e0c:	46bd      	mov	sp, r7
 8002e0e:	bd80      	pop	{r7, pc}
 8002e10:	fe00e800 	.word	0xfe00e800

08002e14 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8002e14:	b580      	push	{r7, lr}
 8002e16:	b086      	sub	sp, #24
 8002e18:	af02      	add	r7, sp, #8
 8002e1a:	60f8      	str	r0, [r7, #12]
 8002e1c:	4608      	mov	r0, r1
 8002e1e:	4611      	mov	r1, r2
 8002e20:	461a      	mov	r2, r3
 8002e22:	4603      	mov	r3, r0
 8002e24:	817b      	strh	r3, [r7, #10]
 8002e26:	460b      	mov	r3, r1
 8002e28:	813b      	strh	r3, [r7, #8]
 8002e2a:	4613      	mov	r3, r2
 8002e2c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8002e2e:	88fb      	ldrh	r3, [r7, #6]
 8002e30:	b2da      	uxtb	r2, r3
 8002e32:	8979      	ldrh	r1, [r7, #10]
 8002e34:	4b20      	ldr	r3, [pc, #128]	@ (8002eb8 <I2C_RequestMemoryWrite+0xa4>)
 8002e36:	9300      	str	r3, [sp, #0]
 8002e38:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002e3c:	68f8      	ldr	r0, [r7, #12]
 8002e3e:	f000 fa25 	bl	800328c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002e42:	69fa      	ldr	r2, [r7, #28]
 8002e44:	69b9      	ldr	r1, [r7, #24]
 8002e46:	68f8      	ldr	r0, [r7, #12]
 8002e48:	f000 f8b5 	bl	8002fb6 <I2C_WaitOnTXISFlagUntilTimeout>
 8002e4c:	4603      	mov	r3, r0
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d001      	beq.n	8002e56 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8002e52:	2301      	movs	r3, #1
 8002e54:	e02c      	b.n	8002eb0 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002e56:	88fb      	ldrh	r3, [r7, #6]
 8002e58:	2b01      	cmp	r3, #1
 8002e5a:	d105      	bne.n	8002e68 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002e5c:	893b      	ldrh	r3, [r7, #8]
 8002e5e:	b2da      	uxtb	r2, r3
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	629a      	str	r2, [r3, #40]	@ 0x28
 8002e66:	e015      	b.n	8002e94 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002e68:	893b      	ldrh	r3, [r7, #8]
 8002e6a:	0a1b      	lsrs	r3, r3, #8
 8002e6c:	b29b      	uxth	r3, r3
 8002e6e:	b2da      	uxtb	r2, r3
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002e76:	69fa      	ldr	r2, [r7, #28]
 8002e78:	69b9      	ldr	r1, [r7, #24]
 8002e7a:	68f8      	ldr	r0, [r7, #12]
 8002e7c:	f000 f89b 	bl	8002fb6 <I2C_WaitOnTXISFlagUntilTimeout>
 8002e80:	4603      	mov	r3, r0
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d001      	beq.n	8002e8a <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8002e86:	2301      	movs	r3, #1
 8002e88:	e012      	b.n	8002eb0 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002e8a:	893b      	ldrh	r3, [r7, #8]
 8002e8c:	b2da      	uxtb	r2, r3
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8002e94:	69fb      	ldr	r3, [r7, #28]
 8002e96:	9300      	str	r3, [sp, #0]
 8002e98:	69bb      	ldr	r3, [r7, #24]
 8002e9a:	2200      	movs	r2, #0
 8002e9c:	2180      	movs	r1, #128	@ 0x80
 8002e9e:	68f8      	ldr	r0, [r7, #12]
 8002ea0:	f000 f830 	bl	8002f04 <I2C_WaitOnFlagUntilTimeout>
 8002ea4:	4603      	mov	r3, r0
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d001      	beq.n	8002eae <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8002eaa:	2301      	movs	r3, #1
 8002eac:	e000      	b.n	8002eb0 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8002eae:	2300      	movs	r3, #0
}
 8002eb0:	4618      	mov	r0, r3
 8002eb2:	3710      	adds	r7, #16
 8002eb4:	46bd      	mov	sp, r7
 8002eb6:	bd80      	pop	{r7, pc}
 8002eb8:	80002000 	.word	0x80002000

08002ebc <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002ebc:	b480      	push	{r7}
 8002ebe:	b083      	sub	sp, #12
 8002ec0:	af00      	add	r7, sp, #0
 8002ec2:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	699b      	ldr	r3, [r3, #24]
 8002eca:	f003 0302 	and.w	r3, r3, #2
 8002ece:	2b02      	cmp	r3, #2
 8002ed0:	d103      	bne.n	8002eda <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	2200      	movs	r2, #0
 8002ed8:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	699b      	ldr	r3, [r3, #24]
 8002ee0:	f003 0301 	and.w	r3, r3, #1
 8002ee4:	2b01      	cmp	r3, #1
 8002ee6:	d007      	beq.n	8002ef8 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	699a      	ldr	r2, [r3, #24]
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	f042 0201 	orr.w	r2, r2, #1
 8002ef6:	619a      	str	r2, [r3, #24]
  }
}
 8002ef8:	bf00      	nop
 8002efa:	370c      	adds	r7, #12
 8002efc:	46bd      	mov	sp, r7
 8002efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f02:	4770      	bx	lr

08002f04 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002f04:	b580      	push	{r7, lr}
 8002f06:	b084      	sub	sp, #16
 8002f08:	af00      	add	r7, sp, #0
 8002f0a:	60f8      	str	r0, [r7, #12]
 8002f0c:	60b9      	str	r1, [r7, #8]
 8002f0e:	603b      	str	r3, [r7, #0]
 8002f10:	4613      	mov	r3, r2
 8002f12:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002f14:	e03b      	b.n	8002f8e <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002f16:	69ba      	ldr	r2, [r7, #24]
 8002f18:	6839      	ldr	r1, [r7, #0]
 8002f1a:	68f8      	ldr	r0, [r7, #12]
 8002f1c:	f000 f8d6 	bl	80030cc <I2C_IsErrorOccurred>
 8002f20:	4603      	mov	r3, r0
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d001      	beq.n	8002f2a <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8002f26:	2301      	movs	r3, #1
 8002f28:	e041      	b.n	8002fae <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002f2a:	683b      	ldr	r3, [r7, #0]
 8002f2c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002f30:	d02d      	beq.n	8002f8e <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f32:	f7fe fa3f 	bl	80013b4 <HAL_GetTick>
 8002f36:	4602      	mov	r2, r0
 8002f38:	69bb      	ldr	r3, [r7, #24]
 8002f3a:	1ad3      	subs	r3, r2, r3
 8002f3c:	683a      	ldr	r2, [r7, #0]
 8002f3e:	429a      	cmp	r2, r3
 8002f40:	d302      	bcc.n	8002f48 <I2C_WaitOnFlagUntilTimeout+0x44>
 8002f42:	683b      	ldr	r3, [r7, #0]
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d122      	bne.n	8002f8e <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	699a      	ldr	r2, [r3, #24]
 8002f4e:	68bb      	ldr	r3, [r7, #8]
 8002f50:	4013      	ands	r3, r2
 8002f52:	68ba      	ldr	r2, [r7, #8]
 8002f54:	429a      	cmp	r2, r3
 8002f56:	bf0c      	ite	eq
 8002f58:	2301      	moveq	r3, #1
 8002f5a:	2300      	movne	r3, #0
 8002f5c:	b2db      	uxtb	r3, r3
 8002f5e:	461a      	mov	r2, r3
 8002f60:	79fb      	ldrb	r3, [r7, #7]
 8002f62:	429a      	cmp	r2, r3
 8002f64:	d113      	bne.n	8002f8e <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f6a:	f043 0220 	orr.w	r2, r3, #32
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	2220      	movs	r2, #32
 8002f76:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	2200      	movs	r2, #0
 8002f7e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	2200      	movs	r2, #0
 8002f86:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8002f8a:	2301      	movs	r3, #1
 8002f8c:	e00f      	b.n	8002fae <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	699a      	ldr	r2, [r3, #24]
 8002f94:	68bb      	ldr	r3, [r7, #8]
 8002f96:	4013      	ands	r3, r2
 8002f98:	68ba      	ldr	r2, [r7, #8]
 8002f9a:	429a      	cmp	r2, r3
 8002f9c:	bf0c      	ite	eq
 8002f9e:	2301      	moveq	r3, #1
 8002fa0:	2300      	movne	r3, #0
 8002fa2:	b2db      	uxtb	r3, r3
 8002fa4:	461a      	mov	r2, r3
 8002fa6:	79fb      	ldrb	r3, [r7, #7]
 8002fa8:	429a      	cmp	r2, r3
 8002faa:	d0b4      	beq.n	8002f16 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002fac:	2300      	movs	r3, #0
}
 8002fae:	4618      	mov	r0, r3
 8002fb0:	3710      	adds	r7, #16
 8002fb2:	46bd      	mov	sp, r7
 8002fb4:	bd80      	pop	{r7, pc}

08002fb6 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002fb6:	b580      	push	{r7, lr}
 8002fb8:	b084      	sub	sp, #16
 8002fba:	af00      	add	r7, sp, #0
 8002fbc:	60f8      	str	r0, [r7, #12]
 8002fbe:	60b9      	str	r1, [r7, #8]
 8002fc0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002fc2:	e033      	b.n	800302c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002fc4:	687a      	ldr	r2, [r7, #4]
 8002fc6:	68b9      	ldr	r1, [r7, #8]
 8002fc8:	68f8      	ldr	r0, [r7, #12]
 8002fca:	f000 f87f 	bl	80030cc <I2C_IsErrorOccurred>
 8002fce:	4603      	mov	r3, r0
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d001      	beq.n	8002fd8 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002fd4:	2301      	movs	r3, #1
 8002fd6:	e031      	b.n	800303c <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002fd8:	68bb      	ldr	r3, [r7, #8]
 8002fda:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002fde:	d025      	beq.n	800302c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002fe0:	f7fe f9e8 	bl	80013b4 <HAL_GetTick>
 8002fe4:	4602      	mov	r2, r0
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	1ad3      	subs	r3, r2, r3
 8002fea:	68ba      	ldr	r2, [r7, #8]
 8002fec:	429a      	cmp	r2, r3
 8002fee:	d302      	bcc.n	8002ff6 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8002ff0:	68bb      	ldr	r3, [r7, #8]
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d11a      	bne.n	800302c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	699b      	ldr	r3, [r3, #24]
 8002ffc:	f003 0302 	and.w	r3, r3, #2
 8003000:	2b02      	cmp	r3, #2
 8003002:	d013      	beq.n	800302c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003008:	f043 0220 	orr.w	r2, r3, #32
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	2220      	movs	r2, #32
 8003014:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	2200      	movs	r2, #0
 800301c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	2200      	movs	r2, #0
 8003024:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8003028:	2301      	movs	r3, #1
 800302a:	e007      	b.n	800303c <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	699b      	ldr	r3, [r3, #24]
 8003032:	f003 0302 	and.w	r3, r3, #2
 8003036:	2b02      	cmp	r3, #2
 8003038:	d1c4      	bne.n	8002fc4 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800303a:	2300      	movs	r3, #0
}
 800303c:	4618      	mov	r0, r3
 800303e:	3710      	adds	r7, #16
 8003040:	46bd      	mov	sp, r7
 8003042:	bd80      	pop	{r7, pc}

08003044 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003044:	b580      	push	{r7, lr}
 8003046:	b084      	sub	sp, #16
 8003048:	af00      	add	r7, sp, #0
 800304a:	60f8      	str	r0, [r7, #12]
 800304c:	60b9      	str	r1, [r7, #8]
 800304e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003050:	e02f      	b.n	80030b2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003052:	687a      	ldr	r2, [r7, #4]
 8003054:	68b9      	ldr	r1, [r7, #8]
 8003056:	68f8      	ldr	r0, [r7, #12]
 8003058:	f000 f838 	bl	80030cc <I2C_IsErrorOccurred>
 800305c:	4603      	mov	r3, r0
 800305e:	2b00      	cmp	r3, #0
 8003060:	d001      	beq.n	8003066 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003062:	2301      	movs	r3, #1
 8003064:	e02d      	b.n	80030c2 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003066:	f7fe f9a5 	bl	80013b4 <HAL_GetTick>
 800306a:	4602      	mov	r2, r0
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	1ad3      	subs	r3, r2, r3
 8003070:	68ba      	ldr	r2, [r7, #8]
 8003072:	429a      	cmp	r2, r3
 8003074:	d302      	bcc.n	800307c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8003076:	68bb      	ldr	r3, [r7, #8]
 8003078:	2b00      	cmp	r3, #0
 800307a:	d11a      	bne.n	80030b2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	699b      	ldr	r3, [r3, #24]
 8003082:	f003 0320 	and.w	r3, r3, #32
 8003086:	2b20      	cmp	r3, #32
 8003088:	d013      	beq.n	80030b2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800308e:	f043 0220 	orr.w	r2, r3, #32
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	2220      	movs	r2, #32
 800309a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	2200      	movs	r2, #0
 80030a2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	2200      	movs	r2, #0
 80030aa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 80030ae:	2301      	movs	r3, #1
 80030b0:	e007      	b.n	80030c2 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	699b      	ldr	r3, [r3, #24]
 80030b8:	f003 0320 	and.w	r3, r3, #32
 80030bc:	2b20      	cmp	r3, #32
 80030be:	d1c8      	bne.n	8003052 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80030c0:	2300      	movs	r3, #0
}
 80030c2:	4618      	mov	r0, r3
 80030c4:	3710      	adds	r7, #16
 80030c6:	46bd      	mov	sp, r7
 80030c8:	bd80      	pop	{r7, pc}
	...

080030cc <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80030cc:	b580      	push	{r7, lr}
 80030ce:	b08a      	sub	sp, #40	@ 0x28
 80030d0:	af00      	add	r7, sp, #0
 80030d2:	60f8      	str	r0, [r7, #12]
 80030d4:	60b9      	str	r1, [r7, #8]
 80030d6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80030d8:	2300      	movs	r3, #0
 80030da:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	699b      	ldr	r3, [r3, #24]
 80030e4:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80030e6:	2300      	movs	r3, #0
 80030e8:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80030ee:	69bb      	ldr	r3, [r7, #24]
 80030f0:	f003 0310 	and.w	r3, r3, #16
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d068      	beq.n	80031ca <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	2210      	movs	r2, #16
 80030fe:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003100:	e049      	b.n	8003196 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003102:	68bb      	ldr	r3, [r7, #8]
 8003104:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003108:	d045      	beq.n	8003196 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800310a:	f7fe f953 	bl	80013b4 <HAL_GetTick>
 800310e:	4602      	mov	r2, r0
 8003110:	69fb      	ldr	r3, [r7, #28]
 8003112:	1ad3      	subs	r3, r2, r3
 8003114:	68ba      	ldr	r2, [r7, #8]
 8003116:	429a      	cmp	r2, r3
 8003118:	d302      	bcc.n	8003120 <I2C_IsErrorOccurred+0x54>
 800311a:	68bb      	ldr	r3, [r7, #8]
 800311c:	2b00      	cmp	r3, #0
 800311e:	d13a      	bne.n	8003196 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	685b      	ldr	r3, [r3, #4]
 8003126:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800312a:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003132:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	699b      	ldr	r3, [r3, #24]
 800313a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800313e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003142:	d121      	bne.n	8003188 <I2C_IsErrorOccurred+0xbc>
 8003144:	697b      	ldr	r3, [r7, #20]
 8003146:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800314a:	d01d      	beq.n	8003188 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 800314c:	7cfb      	ldrb	r3, [r7, #19]
 800314e:	2b20      	cmp	r3, #32
 8003150:	d01a      	beq.n	8003188 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	685a      	ldr	r2, [r3, #4]
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003160:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8003162:	f7fe f927 	bl	80013b4 <HAL_GetTick>
 8003166:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003168:	e00e      	b.n	8003188 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800316a:	f7fe f923 	bl	80013b4 <HAL_GetTick>
 800316e:	4602      	mov	r2, r0
 8003170:	69fb      	ldr	r3, [r7, #28]
 8003172:	1ad3      	subs	r3, r2, r3
 8003174:	2b19      	cmp	r3, #25
 8003176:	d907      	bls.n	8003188 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8003178:	6a3b      	ldr	r3, [r7, #32]
 800317a:	f043 0320 	orr.w	r3, r3, #32
 800317e:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8003180:	2301      	movs	r3, #1
 8003182:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8003186:	e006      	b.n	8003196 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	699b      	ldr	r3, [r3, #24]
 800318e:	f003 0320 	and.w	r3, r3, #32
 8003192:	2b20      	cmp	r3, #32
 8003194:	d1e9      	bne.n	800316a <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	699b      	ldr	r3, [r3, #24]
 800319c:	f003 0320 	and.w	r3, r3, #32
 80031a0:	2b20      	cmp	r3, #32
 80031a2:	d003      	beq.n	80031ac <I2C_IsErrorOccurred+0xe0>
 80031a4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d0aa      	beq.n	8003102 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80031ac:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d103      	bne.n	80031bc <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	2220      	movs	r2, #32
 80031ba:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80031bc:	6a3b      	ldr	r3, [r7, #32]
 80031be:	f043 0304 	orr.w	r3, r3, #4
 80031c2:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80031c4:	2301      	movs	r3, #1
 80031c6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	699b      	ldr	r3, [r3, #24]
 80031d0:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80031d2:	69bb      	ldr	r3, [r7, #24]
 80031d4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d00b      	beq.n	80031f4 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80031dc:	6a3b      	ldr	r3, [r7, #32]
 80031de:	f043 0301 	orr.w	r3, r3, #1
 80031e2:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80031ec:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80031ee:	2301      	movs	r3, #1
 80031f0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80031f4:	69bb      	ldr	r3, [r7, #24]
 80031f6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d00b      	beq.n	8003216 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80031fe:	6a3b      	ldr	r3, [r7, #32]
 8003200:	f043 0308 	orr.w	r3, r3, #8
 8003204:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800320e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003210:	2301      	movs	r3, #1
 8003212:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8003216:	69bb      	ldr	r3, [r7, #24]
 8003218:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800321c:	2b00      	cmp	r3, #0
 800321e:	d00b      	beq.n	8003238 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8003220:	6a3b      	ldr	r3, [r7, #32]
 8003222:	f043 0302 	orr.w	r3, r3, #2
 8003226:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003230:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003232:	2301      	movs	r3, #1
 8003234:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8003238:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800323c:	2b00      	cmp	r3, #0
 800323e:	d01c      	beq.n	800327a <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003240:	68f8      	ldr	r0, [r7, #12]
 8003242:	f7ff fe3b 	bl	8002ebc <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	6859      	ldr	r1, [r3, #4]
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	681a      	ldr	r2, [r3, #0]
 8003250:	4b0d      	ldr	r3, [pc, #52]	@ (8003288 <I2C_IsErrorOccurred+0x1bc>)
 8003252:	400b      	ands	r3, r1
 8003254:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800325a:	6a3b      	ldr	r3, [r7, #32]
 800325c:	431a      	orrs	r2, r3
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	2220      	movs	r2, #32
 8003266:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	2200      	movs	r2, #0
 800326e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	2200      	movs	r2, #0
 8003276:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 800327a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800327e:	4618      	mov	r0, r3
 8003280:	3728      	adds	r7, #40	@ 0x28
 8003282:	46bd      	mov	sp, r7
 8003284:	bd80      	pop	{r7, pc}
 8003286:	bf00      	nop
 8003288:	fe00e800 	.word	0xfe00e800

0800328c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800328c:	b480      	push	{r7}
 800328e:	b087      	sub	sp, #28
 8003290:	af00      	add	r7, sp, #0
 8003292:	60f8      	str	r0, [r7, #12]
 8003294:	607b      	str	r3, [r7, #4]
 8003296:	460b      	mov	r3, r1
 8003298:	817b      	strh	r3, [r7, #10]
 800329a:	4613      	mov	r3, r2
 800329c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800329e:	897b      	ldrh	r3, [r7, #10]
 80032a0:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80032a4:	7a7b      	ldrb	r3, [r7, #9]
 80032a6:	041b      	lsls	r3, r3, #16
 80032a8:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80032ac:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80032b2:	6a3b      	ldr	r3, [r7, #32]
 80032b4:	4313      	orrs	r3, r2
 80032b6:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80032ba:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	685a      	ldr	r2, [r3, #4]
 80032c2:	6a3b      	ldr	r3, [r7, #32]
 80032c4:	0d5b      	lsrs	r3, r3, #21
 80032c6:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 80032ca:	4b08      	ldr	r3, [pc, #32]	@ (80032ec <I2C_TransferConfig+0x60>)
 80032cc:	430b      	orrs	r3, r1
 80032ce:	43db      	mvns	r3, r3
 80032d0:	ea02 0103 	and.w	r1, r2, r3
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	697a      	ldr	r2, [r7, #20]
 80032da:	430a      	orrs	r2, r1
 80032dc:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80032de:	bf00      	nop
 80032e0:	371c      	adds	r7, #28
 80032e2:	46bd      	mov	sp, r7
 80032e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e8:	4770      	bx	lr
 80032ea:	bf00      	nop
 80032ec:	03ff63ff 	.word	0x03ff63ff

080032f0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80032f0:	b480      	push	{r7}
 80032f2:	b083      	sub	sp, #12
 80032f4:	af00      	add	r7, sp, #0
 80032f6:	6078      	str	r0, [r7, #4]
 80032f8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003300:	b2db      	uxtb	r3, r3
 8003302:	2b20      	cmp	r3, #32
 8003304:	d138      	bne.n	8003378 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800330c:	2b01      	cmp	r3, #1
 800330e:	d101      	bne.n	8003314 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003310:	2302      	movs	r3, #2
 8003312:	e032      	b.n	800337a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	2201      	movs	r2, #1
 8003318:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	2224      	movs	r2, #36	@ 0x24
 8003320:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	681a      	ldr	r2, [r3, #0]
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	f022 0201 	bic.w	r2, r2, #1
 8003332:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	681a      	ldr	r2, [r3, #0]
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8003342:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	6819      	ldr	r1, [r3, #0]
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	683a      	ldr	r2, [r7, #0]
 8003350:	430a      	orrs	r2, r1
 8003352:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	681a      	ldr	r2, [r3, #0]
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	f042 0201 	orr.w	r2, r2, #1
 8003362:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	2220      	movs	r2, #32
 8003368:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	2200      	movs	r2, #0
 8003370:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003374:	2300      	movs	r3, #0
 8003376:	e000      	b.n	800337a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003378:	2302      	movs	r3, #2
  }
}
 800337a:	4618      	mov	r0, r3
 800337c:	370c      	adds	r7, #12
 800337e:	46bd      	mov	sp, r7
 8003380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003384:	4770      	bx	lr

08003386 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003386:	b480      	push	{r7}
 8003388:	b085      	sub	sp, #20
 800338a:	af00      	add	r7, sp, #0
 800338c:	6078      	str	r0, [r7, #4]
 800338e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003396:	b2db      	uxtb	r3, r3
 8003398:	2b20      	cmp	r3, #32
 800339a:	d139      	bne.n	8003410 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80033a2:	2b01      	cmp	r3, #1
 80033a4:	d101      	bne.n	80033aa <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80033a6:	2302      	movs	r3, #2
 80033a8:	e033      	b.n	8003412 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	2201      	movs	r2, #1
 80033ae:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	2224      	movs	r2, #36	@ 0x24
 80033b6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	681a      	ldr	r2, [r3, #0]
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	f022 0201 	bic.w	r2, r2, #1
 80033c8:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80033d8:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80033da:	683b      	ldr	r3, [r7, #0]
 80033dc:	021b      	lsls	r3, r3, #8
 80033de:	68fa      	ldr	r2, [r7, #12]
 80033e0:	4313      	orrs	r3, r2
 80033e2:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	68fa      	ldr	r2, [r7, #12]
 80033ea:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	681a      	ldr	r2, [r3, #0]
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	f042 0201 	orr.w	r2, r2, #1
 80033fa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	2220      	movs	r2, #32
 8003400:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	2200      	movs	r2, #0
 8003408:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800340c:	2300      	movs	r3, #0
 800340e:	e000      	b.n	8003412 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003410:	2302      	movs	r3, #2
  }
}
 8003412:	4618      	mov	r0, r3
 8003414:	3714      	adds	r7, #20
 8003416:	46bd      	mov	sp, r7
 8003418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800341c:	4770      	bx	lr

0800341e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800341e:	b580      	push	{r7, lr}
 8003420:	b084      	sub	sp, #16
 8003422:	af00      	add	r7, sp, #0
 8003424:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	2b00      	cmp	r3, #0
 800342a:	d101      	bne.n	8003430 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800342c:	2301      	movs	r3, #1
 800342e:	e0b9      	b.n	80035a4 <HAL_PCD_Init+0x186>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	f893 3291 	ldrb.w	r3, [r3, #657]	@ 0x291
 8003436:	b2db      	uxtb	r3, r3
 8003438:	2b00      	cmp	r3, #0
 800343a:	d106      	bne.n	800344a <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	2200      	movs	r2, #0
 8003440:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003444:	6878      	ldr	r0, [r7, #4]
 8003446:	f7fd fe97 	bl	8001178 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	2203      	movs	r2, #3
 800344e:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	4618      	mov	r0, r3
 8003458:	f003 f94e 	bl	80066f8 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800345c:	2300      	movs	r3, #0
 800345e:	73fb      	strb	r3, [r7, #15]
 8003460:	e03e      	b.n	80034e0 <HAL_PCD_Init+0xc2>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003462:	7bfa      	ldrb	r2, [r7, #15]
 8003464:	6879      	ldr	r1, [r7, #4]
 8003466:	4613      	mov	r3, r2
 8003468:	009b      	lsls	r3, r3, #2
 800346a:	4413      	add	r3, r2
 800346c:	00db      	lsls	r3, r3, #3
 800346e:	440b      	add	r3, r1
 8003470:	3311      	adds	r3, #17
 8003472:	2201      	movs	r2, #1
 8003474:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003476:	7bfa      	ldrb	r2, [r7, #15]
 8003478:	6879      	ldr	r1, [r7, #4]
 800347a:	4613      	mov	r3, r2
 800347c:	009b      	lsls	r3, r3, #2
 800347e:	4413      	add	r3, r2
 8003480:	00db      	lsls	r3, r3, #3
 8003482:	440b      	add	r3, r1
 8003484:	3310      	adds	r3, #16
 8003486:	7bfa      	ldrb	r2, [r7, #15]
 8003488:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800348a:	7bfa      	ldrb	r2, [r7, #15]
 800348c:	6879      	ldr	r1, [r7, #4]
 800348e:	4613      	mov	r3, r2
 8003490:	009b      	lsls	r3, r3, #2
 8003492:	4413      	add	r3, r2
 8003494:	00db      	lsls	r3, r3, #3
 8003496:	440b      	add	r3, r1
 8003498:	3313      	adds	r3, #19
 800349a:	2200      	movs	r2, #0
 800349c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800349e:	7bfa      	ldrb	r2, [r7, #15]
 80034a0:	6879      	ldr	r1, [r7, #4]
 80034a2:	4613      	mov	r3, r2
 80034a4:	009b      	lsls	r3, r3, #2
 80034a6:	4413      	add	r3, r2
 80034a8:	00db      	lsls	r3, r3, #3
 80034aa:	440b      	add	r3, r1
 80034ac:	3320      	adds	r3, #32
 80034ae:	2200      	movs	r2, #0
 80034b0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80034b2:	7bfa      	ldrb	r2, [r7, #15]
 80034b4:	6879      	ldr	r1, [r7, #4]
 80034b6:	4613      	mov	r3, r2
 80034b8:	009b      	lsls	r3, r3, #2
 80034ba:	4413      	add	r3, r2
 80034bc:	00db      	lsls	r3, r3, #3
 80034be:	440b      	add	r3, r1
 80034c0:	3324      	adds	r3, #36	@ 0x24
 80034c2:	2200      	movs	r2, #0
 80034c4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80034c6:	7bfb      	ldrb	r3, [r7, #15]
 80034c8:	6879      	ldr	r1, [r7, #4]
 80034ca:	1c5a      	adds	r2, r3, #1
 80034cc:	4613      	mov	r3, r2
 80034ce:	009b      	lsls	r3, r3, #2
 80034d0:	4413      	add	r3, r2
 80034d2:	00db      	lsls	r3, r3, #3
 80034d4:	440b      	add	r3, r1
 80034d6:	2200      	movs	r2, #0
 80034d8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80034da:	7bfb      	ldrb	r3, [r7, #15]
 80034dc:	3301      	adds	r3, #1
 80034de:	73fb      	strb	r3, [r7, #15]
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	791b      	ldrb	r3, [r3, #4]
 80034e4:	7bfa      	ldrb	r2, [r7, #15]
 80034e6:	429a      	cmp	r2, r3
 80034e8:	d3bb      	bcc.n	8003462 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80034ea:	2300      	movs	r3, #0
 80034ec:	73fb      	strb	r3, [r7, #15]
 80034ee:	e044      	b.n	800357a <HAL_PCD_Init+0x15c>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80034f0:	7bfa      	ldrb	r2, [r7, #15]
 80034f2:	6879      	ldr	r1, [r7, #4]
 80034f4:	4613      	mov	r3, r2
 80034f6:	009b      	lsls	r3, r3, #2
 80034f8:	4413      	add	r3, r2
 80034fa:	00db      	lsls	r3, r3, #3
 80034fc:	440b      	add	r3, r1
 80034fe:	f203 1351 	addw	r3, r3, #337	@ 0x151
 8003502:	2200      	movs	r2, #0
 8003504:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003506:	7bfa      	ldrb	r2, [r7, #15]
 8003508:	6879      	ldr	r1, [r7, #4]
 800350a:	4613      	mov	r3, r2
 800350c:	009b      	lsls	r3, r3, #2
 800350e:	4413      	add	r3, r2
 8003510:	00db      	lsls	r3, r3, #3
 8003512:	440b      	add	r3, r1
 8003514:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8003518:	7bfa      	ldrb	r2, [r7, #15]
 800351a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800351c:	7bfa      	ldrb	r2, [r7, #15]
 800351e:	6879      	ldr	r1, [r7, #4]
 8003520:	4613      	mov	r3, r2
 8003522:	009b      	lsls	r3, r3, #2
 8003524:	4413      	add	r3, r2
 8003526:	00db      	lsls	r3, r3, #3
 8003528:	440b      	add	r3, r1
 800352a:	f203 1353 	addw	r3, r3, #339	@ 0x153
 800352e:	2200      	movs	r2, #0
 8003530:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003532:	7bfa      	ldrb	r2, [r7, #15]
 8003534:	6879      	ldr	r1, [r7, #4]
 8003536:	4613      	mov	r3, r2
 8003538:	009b      	lsls	r3, r3, #2
 800353a:	4413      	add	r3, r2
 800353c:	00db      	lsls	r3, r3, #3
 800353e:	440b      	add	r3, r1
 8003540:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 8003544:	2200      	movs	r2, #0
 8003546:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003548:	7bfa      	ldrb	r2, [r7, #15]
 800354a:	6879      	ldr	r1, [r7, #4]
 800354c:	4613      	mov	r3, r2
 800354e:	009b      	lsls	r3, r3, #2
 8003550:	4413      	add	r3, r2
 8003552:	00db      	lsls	r3, r3, #3
 8003554:	440b      	add	r3, r1
 8003556:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800355a:	2200      	movs	r2, #0
 800355c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800355e:	7bfa      	ldrb	r2, [r7, #15]
 8003560:	6879      	ldr	r1, [r7, #4]
 8003562:	4613      	mov	r3, r2
 8003564:	009b      	lsls	r3, r3, #2
 8003566:	4413      	add	r3, r2
 8003568:	00db      	lsls	r3, r3, #3
 800356a:	440b      	add	r3, r1
 800356c:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8003570:	2200      	movs	r2, #0
 8003572:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003574:	7bfb      	ldrb	r3, [r7, #15]
 8003576:	3301      	adds	r3, #1
 8003578:	73fb      	strb	r3, [r7, #15]
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	791b      	ldrb	r3, [r3, #4]
 800357e:	7bfa      	ldrb	r2, [r7, #15]
 8003580:	429a      	cmp	r2, r3
 8003582:	d3b5      	bcc.n	80034f0 <HAL_PCD_Init+0xd2>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	6818      	ldr	r0, [r3, #0]
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	3304      	adds	r3, #4
 800358c:	e893 0006 	ldmia.w	r3, {r1, r2}
 8003590:	f003 f8cd 	bl	800672e <USB_DevInit>

  hpcd->USB_Address = 0U;
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	2200      	movs	r2, #0
 8003598:	731a      	strb	r2, [r3, #12]
  hpcd->State = HAL_PCD_STATE_READY;
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	2201      	movs	r2, #1
 800359e:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
  return HAL_OK;
 80035a2:	2300      	movs	r3, #0
}
 80035a4:	4618      	mov	r0, r3
 80035a6:	3710      	adds	r7, #16
 80035a8:	46bd      	mov	sp, r7
 80035aa:	bd80      	pop	{r7, pc}

080035ac <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80035ac:	b580      	push	{r7, lr}
 80035ae:	f5ad 7d00 	sub.w	sp, sp, #512	@ 0x200
 80035b2:	af00      	add	r7, sp, #0
 80035b4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80035b8:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80035bc:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80035be:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80035c2:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d102      	bne.n	80035d2 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 80035cc:	2301      	movs	r3, #1
 80035ce:	f000 bff4 	b.w	80045ba <HAL_RCC_OscConfig+0x100e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80035d2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80035d6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	f003 0301 	and.w	r3, r3, #1
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	f000 816d 	beq.w	80038c2 <HAL_RCC_OscConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80035e8:	4bb4      	ldr	r3, [pc, #720]	@ (80038bc <HAL_RCC_OscConfig+0x310>)
 80035ea:	685b      	ldr	r3, [r3, #4]
 80035ec:	f003 030c 	and.w	r3, r3, #12
 80035f0:	2b04      	cmp	r3, #4
 80035f2:	d00c      	beq.n	800360e <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80035f4:	4bb1      	ldr	r3, [pc, #708]	@ (80038bc <HAL_RCC_OscConfig+0x310>)
 80035f6:	685b      	ldr	r3, [r3, #4]
 80035f8:	f003 030c 	and.w	r3, r3, #12
 80035fc:	2b08      	cmp	r3, #8
 80035fe:	d157      	bne.n	80036b0 <HAL_RCC_OscConfig+0x104>
 8003600:	4bae      	ldr	r3, [pc, #696]	@ (80038bc <HAL_RCC_OscConfig+0x310>)
 8003602:	685b      	ldr	r3, [r3, #4]
 8003604:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003608:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800360c:	d150      	bne.n	80036b0 <HAL_RCC_OscConfig+0x104>
 800360e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003612:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003616:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
 800361a:	fa93 f3a3 	rbit	r3, r3
 800361e:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003622:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003626:	fab3 f383 	clz	r3, r3
 800362a:	b2db      	uxtb	r3, r3
 800362c:	2b3f      	cmp	r3, #63	@ 0x3f
 800362e:	d802      	bhi.n	8003636 <HAL_RCC_OscConfig+0x8a>
 8003630:	4ba2      	ldr	r3, [pc, #648]	@ (80038bc <HAL_RCC_OscConfig+0x310>)
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	e015      	b.n	8003662 <HAL_RCC_OscConfig+0xb6>
 8003636:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800363a:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800363e:	f8d7 31e8 	ldr.w	r3, [r7, #488]	@ 0x1e8
 8003642:	fa93 f3a3 	rbit	r3, r3
 8003646:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
 800364a:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800364e:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 8003652:	f8d7 31e0 	ldr.w	r3, [r7, #480]	@ 0x1e0
 8003656:	fa93 f3a3 	rbit	r3, r3
 800365a:	f8c7 31dc 	str.w	r3, [r7, #476]	@ 0x1dc
 800365e:	4b97      	ldr	r3, [pc, #604]	@ (80038bc <HAL_RCC_OscConfig+0x310>)
 8003660:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003662:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8003666:	f8c7 21d8 	str.w	r2, [r7, #472]	@ 0x1d8
 800366a:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 800366e:	fa92 f2a2 	rbit	r2, r2
 8003672:	f8c7 21d4 	str.w	r2, [r7, #468]	@ 0x1d4
  return result;
 8003676:	f8d7 21d4 	ldr.w	r2, [r7, #468]	@ 0x1d4
 800367a:	fab2 f282 	clz	r2, r2
 800367e:	b2d2      	uxtb	r2, r2
 8003680:	f042 0220 	orr.w	r2, r2, #32
 8003684:	b2d2      	uxtb	r2, r2
 8003686:	f002 021f 	and.w	r2, r2, #31
 800368a:	2101      	movs	r1, #1
 800368c:	fa01 f202 	lsl.w	r2, r1, r2
 8003690:	4013      	ands	r3, r2
 8003692:	2b00      	cmp	r3, #0
 8003694:	f000 8114 	beq.w	80038c0 <HAL_RCC_OscConfig+0x314>
 8003698:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800369c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	685b      	ldr	r3, [r3, #4]
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	f040 810b 	bne.w	80038c0 <HAL_RCC_OscConfig+0x314>
      {
        return HAL_ERROR;
 80036aa:	2301      	movs	r3, #1
 80036ac:	f000 bf85 	b.w	80045ba <HAL_RCC_OscConfig+0x100e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80036b0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80036b4:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	685b      	ldr	r3, [r3, #4]
 80036bc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80036c0:	d106      	bne.n	80036d0 <HAL_RCC_OscConfig+0x124>
 80036c2:	4b7e      	ldr	r3, [pc, #504]	@ (80038bc <HAL_RCC_OscConfig+0x310>)
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	4a7d      	ldr	r2, [pc, #500]	@ (80038bc <HAL_RCC_OscConfig+0x310>)
 80036c8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80036cc:	6013      	str	r3, [r2, #0]
 80036ce:	e036      	b.n	800373e <HAL_RCC_OscConfig+0x192>
 80036d0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80036d4:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	685b      	ldr	r3, [r3, #4]
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d10c      	bne.n	80036fa <HAL_RCC_OscConfig+0x14e>
 80036e0:	4b76      	ldr	r3, [pc, #472]	@ (80038bc <HAL_RCC_OscConfig+0x310>)
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	4a75      	ldr	r2, [pc, #468]	@ (80038bc <HAL_RCC_OscConfig+0x310>)
 80036e6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80036ea:	6013      	str	r3, [r2, #0]
 80036ec:	4b73      	ldr	r3, [pc, #460]	@ (80038bc <HAL_RCC_OscConfig+0x310>)
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	4a72      	ldr	r2, [pc, #456]	@ (80038bc <HAL_RCC_OscConfig+0x310>)
 80036f2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80036f6:	6013      	str	r3, [r2, #0]
 80036f8:	e021      	b.n	800373e <HAL_RCC_OscConfig+0x192>
 80036fa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80036fe:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	685b      	ldr	r3, [r3, #4]
 8003706:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800370a:	d10c      	bne.n	8003726 <HAL_RCC_OscConfig+0x17a>
 800370c:	4b6b      	ldr	r3, [pc, #428]	@ (80038bc <HAL_RCC_OscConfig+0x310>)
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	4a6a      	ldr	r2, [pc, #424]	@ (80038bc <HAL_RCC_OscConfig+0x310>)
 8003712:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003716:	6013      	str	r3, [r2, #0]
 8003718:	4b68      	ldr	r3, [pc, #416]	@ (80038bc <HAL_RCC_OscConfig+0x310>)
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	4a67      	ldr	r2, [pc, #412]	@ (80038bc <HAL_RCC_OscConfig+0x310>)
 800371e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003722:	6013      	str	r3, [r2, #0]
 8003724:	e00b      	b.n	800373e <HAL_RCC_OscConfig+0x192>
 8003726:	4b65      	ldr	r3, [pc, #404]	@ (80038bc <HAL_RCC_OscConfig+0x310>)
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	4a64      	ldr	r2, [pc, #400]	@ (80038bc <HAL_RCC_OscConfig+0x310>)
 800372c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003730:	6013      	str	r3, [r2, #0]
 8003732:	4b62      	ldr	r3, [pc, #392]	@ (80038bc <HAL_RCC_OscConfig+0x310>)
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	4a61      	ldr	r2, [pc, #388]	@ (80038bc <HAL_RCC_OscConfig+0x310>)
 8003738:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800373c:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800373e:	4b5f      	ldr	r3, [pc, #380]	@ (80038bc <HAL_RCC_OscConfig+0x310>)
 8003740:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003742:	f023 020f 	bic.w	r2, r3, #15
 8003746:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800374a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	689b      	ldr	r3, [r3, #8]
 8003752:	495a      	ldr	r1, [pc, #360]	@ (80038bc <HAL_RCC_OscConfig+0x310>)
 8003754:	4313      	orrs	r3, r2
 8003756:	62cb      	str	r3, [r1, #44]	@ 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003758:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800375c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	685b      	ldr	r3, [r3, #4]
 8003764:	2b00      	cmp	r3, #0
 8003766:	d054      	beq.n	8003812 <HAL_RCC_OscConfig+0x266>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003768:	f7fd fe24 	bl	80013b4 <HAL_GetTick>
 800376c:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003770:	e00a      	b.n	8003788 <HAL_RCC_OscConfig+0x1dc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003772:	f7fd fe1f 	bl	80013b4 <HAL_GetTick>
 8003776:	4602      	mov	r2, r0
 8003778:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800377c:	1ad3      	subs	r3, r2, r3
 800377e:	2b64      	cmp	r3, #100	@ 0x64
 8003780:	d902      	bls.n	8003788 <HAL_RCC_OscConfig+0x1dc>
          {
            return HAL_TIMEOUT;
 8003782:	2303      	movs	r3, #3
 8003784:	f000 bf19 	b.w	80045ba <HAL_RCC_OscConfig+0x100e>
 8003788:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800378c:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003790:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 8003794:	fa93 f3a3 	rbit	r3, r3
 8003798:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
  return result;
 800379c:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80037a0:	fab3 f383 	clz	r3, r3
 80037a4:	b2db      	uxtb	r3, r3
 80037a6:	2b3f      	cmp	r3, #63	@ 0x3f
 80037a8:	d802      	bhi.n	80037b0 <HAL_RCC_OscConfig+0x204>
 80037aa:	4b44      	ldr	r3, [pc, #272]	@ (80038bc <HAL_RCC_OscConfig+0x310>)
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	e015      	b.n	80037dc <HAL_RCC_OscConfig+0x230>
 80037b0:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80037b4:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037b8:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 80037bc:	fa93 f3a3 	rbit	r3, r3
 80037c0:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 80037c4:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80037c8:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 80037cc:	f8d7 31c0 	ldr.w	r3, [r7, #448]	@ 0x1c0
 80037d0:	fa93 f3a3 	rbit	r3, r3
 80037d4:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
 80037d8:	4b38      	ldr	r3, [pc, #224]	@ (80038bc <HAL_RCC_OscConfig+0x310>)
 80037da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037dc:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80037e0:	f8c7 21b8 	str.w	r2, [r7, #440]	@ 0x1b8
 80037e4:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 80037e8:	fa92 f2a2 	rbit	r2, r2
 80037ec:	f8c7 21b4 	str.w	r2, [r7, #436]	@ 0x1b4
  return result;
 80037f0:	f8d7 21b4 	ldr.w	r2, [r7, #436]	@ 0x1b4
 80037f4:	fab2 f282 	clz	r2, r2
 80037f8:	b2d2      	uxtb	r2, r2
 80037fa:	f042 0220 	orr.w	r2, r2, #32
 80037fe:	b2d2      	uxtb	r2, r2
 8003800:	f002 021f 	and.w	r2, r2, #31
 8003804:	2101      	movs	r1, #1
 8003806:	fa01 f202 	lsl.w	r2, r1, r2
 800380a:	4013      	ands	r3, r2
 800380c:	2b00      	cmp	r3, #0
 800380e:	d0b0      	beq.n	8003772 <HAL_RCC_OscConfig+0x1c6>
 8003810:	e057      	b.n	80038c2 <HAL_RCC_OscConfig+0x316>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003812:	f7fd fdcf 	bl	80013b4 <HAL_GetTick>
 8003816:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800381a:	e00a      	b.n	8003832 <HAL_RCC_OscConfig+0x286>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800381c:	f7fd fdca 	bl	80013b4 <HAL_GetTick>
 8003820:	4602      	mov	r2, r0
 8003822:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8003826:	1ad3      	subs	r3, r2, r3
 8003828:	2b64      	cmp	r3, #100	@ 0x64
 800382a:	d902      	bls.n	8003832 <HAL_RCC_OscConfig+0x286>
          {
            return HAL_TIMEOUT;
 800382c:	2303      	movs	r3, #3
 800382e:	f000 bec4 	b.w	80045ba <HAL_RCC_OscConfig+0x100e>
 8003832:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003836:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800383a:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
 800383e:	fa93 f3a3 	rbit	r3, r3
 8003842:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
  return result;
 8003846:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800384a:	fab3 f383 	clz	r3, r3
 800384e:	b2db      	uxtb	r3, r3
 8003850:	2b3f      	cmp	r3, #63	@ 0x3f
 8003852:	d802      	bhi.n	800385a <HAL_RCC_OscConfig+0x2ae>
 8003854:	4b19      	ldr	r3, [pc, #100]	@ (80038bc <HAL_RCC_OscConfig+0x310>)
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	e015      	b.n	8003886 <HAL_RCC_OscConfig+0x2da>
 800385a:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800385e:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003862:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 8003866:	fa93 f3a3 	rbit	r3, r3
 800386a:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 800386e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003872:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 8003876:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 800387a:	fa93 f3a3 	rbit	r3, r3
 800387e:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
 8003882:	4b0e      	ldr	r3, [pc, #56]	@ (80038bc <HAL_RCC_OscConfig+0x310>)
 8003884:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003886:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800388a:	f8c7 2198 	str.w	r2, [r7, #408]	@ 0x198
 800388e:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 8003892:	fa92 f2a2 	rbit	r2, r2
 8003896:	f8c7 2194 	str.w	r2, [r7, #404]	@ 0x194
  return result;
 800389a:	f8d7 2194 	ldr.w	r2, [r7, #404]	@ 0x194
 800389e:	fab2 f282 	clz	r2, r2
 80038a2:	b2d2      	uxtb	r2, r2
 80038a4:	f042 0220 	orr.w	r2, r2, #32
 80038a8:	b2d2      	uxtb	r2, r2
 80038aa:	f002 021f 	and.w	r2, r2, #31
 80038ae:	2101      	movs	r1, #1
 80038b0:	fa01 f202 	lsl.w	r2, r1, r2
 80038b4:	4013      	ands	r3, r2
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d1b0      	bne.n	800381c <HAL_RCC_OscConfig+0x270>
 80038ba:	e002      	b.n	80038c2 <HAL_RCC_OscConfig+0x316>
 80038bc:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80038c0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80038c2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80038c6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	f003 0302 	and.w	r3, r3, #2
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	f000 816c 	beq.w	8003bb0 <HAL_RCC_OscConfig+0x604>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80038d8:	4bcc      	ldr	r3, [pc, #816]	@ (8003c0c <HAL_RCC_OscConfig+0x660>)
 80038da:	685b      	ldr	r3, [r3, #4]
 80038dc:	f003 030c 	and.w	r3, r3, #12
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d00b      	beq.n	80038fc <HAL_RCC_OscConfig+0x350>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80038e4:	4bc9      	ldr	r3, [pc, #804]	@ (8003c0c <HAL_RCC_OscConfig+0x660>)
 80038e6:	685b      	ldr	r3, [r3, #4]
 80038e8:	f003 030c 	and.w	r3, r3, #12
 80038ec:	2b08      	cmp	r3, #8
 80038ee:	d16d      	bne.n	80039cc <HAL_RCC_OscConfig+0x420>
 80038f0:	4bc6      	ldr	r3, [pc, #792]	@ (8003c0c <HAL_RCC_OscConfig+0x660>)
 80038f2:	685b      	ldr	r3, [r3, #4]
 80038f4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d167      	bne.n	80039cc <HAL_RCC_OscConfig+0x420>
 80038fc:	2302      	movs	r3, #2
 80038fe:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003902:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 8003906:	fa93 f3a3 	rbit	r3, r3
 800390a:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
  return result;
 800390e:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003912:	fab3 f383 	clz	r3, r3
 8003916:	b2db      	uxtb	r3, r3
 8003918:	2b3f      	cmp	r3, #63	@ 0x3f
 800391a:	d802      	bhi.n	8003922 <HAL_RCC_OscConfig+0x376>
 800391c:	4bbb      	ldr	r3, [pc, #748]	@ (8003c0c <HAL_RCC_OscConfig+0x660>)
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	e013      	b.n	800394a <HAL_RCC_OscConfig+0x39e>
 8003922:	2302      	movs	r3, #2
 8003924:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003928:	f8d7 3188 	ldr.w	r3, [r7, #392]	@ 0x188
 800392c:	fa93 f3a3 	rbit	r3, r3
 8003930:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 8003934:	2302      	movs	r3, #2
 8003936:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 800393a:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 800393e:	fa93 f3a3 	rbit	r3, r3
 8003942:	f8c7 317c 	str.w	r3, [r7, #380]	@ 0x17c
 8003946:	4bb1      	ldr	r3, [pc, #708]	@ (8003c0c <HAL_RCC_OscConfig+0x660>)
 8003948:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800394a:	2202      	movs	r2, #2
 800394c:	f8c7 2178 	str.w	r2, [r7, #376]	@ 0x178
 8003950:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 8003954:	fa92 f2a2 	rbit	r2, r2
 8003958:	f8c7 2174 	str.w	r2, [r7, #372]	@ 0x174
  return result;
 800395c:	f8d7 2174 	ldr.w	r2, [r7, #372]	@ 0x174
 8003960:	fab2 f282 	clz	r2, r2
 8003964:	b2d2      	uxtb	r2, r2
 8003966:	f042 0220 	orr.w	r2, r2, #32
 800396a:	b2d2      	uxtb	r2, r2
 800396c:	f002 021f 	and.w	r2, r2, #31
 8003970:	2101      	movs	r1, #1
 8003972:	fa01 f202 	lsl.w	r2, r1, r2
 8003976:	4013      	ands	r3, r2
 8003978:	2b00      	cmp	r3, #0
 800397a:	d00a      	beq.n	8003992 <HAL_RCC_OscConfig+0x3e6>
 800397c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003980:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	691b      	ldr	r3, [r3, #16]
 8003988:	2b01      	cmp	r3, #1
 800398a:	d002      	beq.n	8003992 <HAL_RCC_OscConfig+0x3e6>
      {
        return HAL_ERROR;
 800398c:	2301      	movs	r3, #1
 800398e:	f000 be14 	b.w	80045ba <HAL_RCC_OscConfig+0x100e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003992:	4b9e      	ldr	r3, [pc, #632]	@ (8003c0c <HAL_RCC_OscConfig+0x660>)
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800399a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800399e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	695b      	ldr	r3, [r3, #20]
 80039a6:	21f8      	movs	r1, #248	@ 0xf8
 80039a8:	f8c7 1170 	str.w	r1, [r7, #368]	@ 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039ac:	f8d7 1170 	ldr.w	r1, [r7, #368]	@ 0x170
 80039b0:	fa91 f1a1 	rbit	r1, r1
 80039b4:	f8c7 116c 	str.w	r1, [r7, #364]	@ 0x16c
  return result;
 80039b8:	f8d7 116c 	ldr.w	r1, [r7, #364]	@ 0x16c
 80039bc:	fab1 f181 	clz	r1, r1
 80039c0:	b2c9      	uxtb	r1, r1
 80039c2:	408b      	lsls	r3, r1
 80039c4:	4991      	ldr	r1, [pc, #580]	@ (8003c0c <HAL_RCC_OscConfig+0x660>)
 80039c6:	4313      	orrs	r3, r2
 80039c8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80039ca:	e0f1      	b.n	8003bb0 <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80039cc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80039d0:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	691b      	ldr	r3, [r3, #16]
 80039d8:	2b00      	cmp	r3, #0
 80039da:	f000 8083 	beq.w	8003ae4 <HAL_RCC_OscConfig+0x538>
 80039de:	2301      	movs	r3, #1
 80039e0:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039e4:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
 80039e8:	fa93 f3a3 	rbit	r3, r3
 80039ec:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
  return result;
 80039f0:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80039f4:	fab3 f383 	clz	r3, r3
 80039f8:	b2db      	uxtb	r3, r3
 80039fa:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80039fe:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8003a02:	009b      	lsls	r3, r3, #2
 8003a04:	461a      	mov	r2, r3
 8003a06:	2301      	movs	r3, #1
 8003a08:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a0a:	f7fd fcd3 	bl	80013b4 <HAL_GetTick>
 8003a0e:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a12:	e00a      	b.n	8003a2a <HAL_RCC_OscConfig+0x47e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003a14:	f7fd fcce 	bl	80013b4 <HAL_GetTick>
 8003a18:	4602      	mov	r2, r0
 8003a1a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8003a1e:	1ad3      	subs	r3, r2, r3
 8003a20:	2b02      	cmp	r3, #2
 8003a22:	d902      	bls.n	8003a2a <HAL_RCC_OscConfig+0x47e>
          {
            return HAL_TIMEOUT;
 8003a24:	2303      	movs	r3, #3
 8003a26:	f000 bdc8 	b.w	80045ba <HAL_RCC_OscConfig+0x100e>
 8003a2a:	2302      	movs	r3, #2
 8003a2c:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a30:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 8003a34:	fa93 f3a3 	rbit	r3, r3
 8003a38:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
  return result;
 8003a3c:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a40:	fab3 f383 	clz	r3, r3
 8003a44:	b2db      	uxtb	r3, r3
 8003a46:	2b3f      	cmp	r3, #63	@ 0x3f
 8003a48:	d802      	bhi.n	8003a50 <HAL_RCC_OscConfig+0x4a4>
 8003a4a:	4b70      	ldr	r3, [pc, #448]	@ (8003c0c <HAL_RCC_OscConfig+0x660>)
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	e013      	b.n	8003a78 <HAL_RCC_OscConfig+0x4cc>
 8003a50:	2302      	movs	r3, #2
 8003a52:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a56:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 8003a5a:	fa93 f3a3 	rbit	r3, r3
 8003a5e:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 8003a62:	2302      	movs	r3, #2
 8003a64:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 8003a68:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 8003a6c:	fa93 f3a3 	rbit	r3, r3
 8003a70:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
 8003a74:	4b65      	ldr	r3, [pc, #404]	@ (8003c0c <HAL_RCC_OscConfig+0x660>)
 8003a76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a78:	2202      	movs	r2, #2
 8003a7a:	f8c7 2148 	str.w	r2, [r7, #328]	@ 0x148
 8003a7e:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 8003a82:	fa92 f2a2 	rbit	r2, r2
 8003a86:	f8c7 2144 	str.w	r2, [r7, #324]	@ 0x144
  return result;
 8003a8a:	f8d7 2144 	ldr.w	r2, [r7, #324]	@ 0x144
 8003a8e:	fab2 f282 	clz	r2, r2
 8003a92:	b2d2      	uxtb	r2, r2
 8003a94:	f042 0220 	orr.w	r2, r2, #32
 8003a98:	b2d2      	uxtb	r2, r2
 8003a9a:	f002 021f 	and.w	r2, r2, #31
 8003a9e:	2101      	movs	r1, #1
 8003aa0:	fa01 f202 	lsl.w	r2, r1, r2
 8003aa4:	4013      	ands	r3, r2
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d0b4      	beq.n	8003a14 <HAL_RCC_OscConfig+0x468>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003aaa:	4b58      	ldr	r3, [pc, #352]	@ (8003c0c <HAL_RCC_OscConfig+0x660>)
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003ab2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003ab6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	695b      	ldr	r3, [r3, #20]
 8003abe:	21f8      	movs	r1, #248	@ 0xf8
 8003ac0:	f8c7 1140 	str.w	r1, [r7, #320]	@ 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ac4:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 8003ac8:	fa91 f1a1 	rbit	r1, r1
 8003acc:	f8c7 113c 	str.w	r1, [r7, #316]	@ 0x13c
  return result;
 8003ad0:	f8d7 113c 	ldr.w	r1, [r7, #316]	@ 0x13c
 8003ad4:	fab1 f181 	clz	r1, r1
 8003ad8:	b2c9      	uxtb	r1, r1
 8003ada:	408b      	lsls	r3, r1
 8003adc:	494b      	ldr	r1, [pc, #300]	@ (8003c0c <HAL_RCC_OscConfig+0x660>)
 8003ade:	4313      	orrs	r3, r2
 8003ae0:	600b      	str	r3, [r1, #0]
 8003ae2:	e065      	b.n	8003bb0 <HAL_RCC_OscConfig+0x604>
 8003ae4:	2301      	movs	r3, #1
 8003ae6:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003aea:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8003aee:	fa93 f3a3 	rbit	r3, r3
 8003af2:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  return result;
 8003af6:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003afa:	fab3 f383 	clz	r3, r3
 8003afe:	b2db      	uxtb	r3, r3
 8003b00:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8003b04:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8003b08:	009b      	lsls	r3, r3, #2
 8003b0a:	461a      	mov	r2, r3
 8003b0c:	2300      	movs	r3, #0
 8003b0e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b10:	f7fd fc50 	bl	80013b4 <HAL_GetTick>
 8003b14:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003b18:	e00a      	b.n	8003b30 <HAL_RCC_OscConfig+0x584>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003b1a:	f7fd fc4b 	bl	80013b4 <HAL_GetTick>
 8003b1e:	4602      	mov	r2, r0
 8003b20:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8003b24:	1ad3      	subs	r3, r2, r3
 8003b26:	2b02      	cmp	r3, #2
 8003b28:	d902      	bls.n	8003b30 <HAL_RCC_OscConfig+0x584>
          {
            return HAL_TIMEOUT;
 8003b2a:	2303      	movs	r3, #3
 8003b2c:	f000 bd45 	b.w	80045ba <HAL_RCC_OscConfig+0x100e>
 8003b30:	2302      	movs	r3, #2
 8003b32:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b36:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8003b3a:	fa93 f3a3 	rbit	r3, r3
 8003b3e:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  return result;
 8003b42:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003b46:	fab3 f383 	clz	r3, r3
 8003b4a:	b2db      	uxtb	r3, r3
 8003b4c:	2b3f      	cmp	r3, #63	@ 0x3f
 8003b4e:	d802      	bhi.n	8003b56 <HAL_RCC_OscConfig+0x5aa>
 8003b50:	4b2e      	ldr	r3, [pc, #184]	@ (8003c0c <HAL_RCC_OscConfig+0x660>)
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	e013      	b.n	8003b7e <HAL_RCC_OscConfig+0x5d2>
 8003b56:	2302      	movs	r3, #2
 8003b58:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b5c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8003b60:	fa93 f3a3 	rbit	r3, r3
 8003b64:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 8003b68:	2302      	movs	r3, #2
 8003b6a:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 8003b6e:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8003b72:	fa93 f3a3 	rbit	r3, r3
 8003b76:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 8003b7a:	4b24      	ldr	r3, [pc, #144]	@ (8003c0c <HAL_RCC_OscConfig+0x660>)
 8003b7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b7e:	2202      	movs	r2, #2
 8003b80:	f8c7 2118 	str.w	r2, [r7, #280]	@ 0x118
 8003b84:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 8003b88:	fa92 f2a2 	rbit	r2, r2
 8003b8c:	f8c7 2114 	str.w	r2, [r7, #276]	@ 0x114
  return result;
 8003b90:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 8003b94:	fab2 f282 	clz	r2, r2
 8003b98:	b2d2      	uxtb	r2, r2
 8003b9a:	f042 0220 	orr.w	r2, r2, #32
 8003b9e:	b2d2      	uxtb	r2, r2
 8003ba0:	f002 021f 	and.w	r2, r2, #31
 8003ba4:	2101      	movs	r1, #1
 8003ba6:	fa01 f202 	lsl.w	r2, r1, r2
 8003baa:	4013      	ands	r3, r2
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d1b4      	bne.n	8003b1a <HAL_RCC_OscConfig+0x56e>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003bb0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003bb4:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	f003 0308 	and.w	r3, r3, #8
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	f000 8115 	beq.w	8003df0 <HAL_RCC_OscConfig+0x844>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003bc6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003bca:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	699b      	ldr	r3, [r3, #24]
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d07e      	beq.n	8003cd4 <HAL_RCC_OscConfig+0x728>
 8003bd6:	2301      	movs	r3, #1
 8003bd8:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003bdc:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8003be0:	fa93 f3a3 	rbit	r3, r3
 8003be4:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
  return result;
 8003be8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003bec:	fab3 f383 	clz	r3, r3
 8003bf0:	b2db      	uxtb	r3, r3
 8003bf2:	461a      	mov	r2, r3
 8003bf4:	4b06      	ldr	r3, [pc, #24]	@ (8003c10 <HAL_RCC_OscConfig+0x664>)
 8003bf6:	4413      	add	r3, r2
 8003bf8:	009b      	lsls	r3, r3, #2
 8003bfa:	461a      	mov	r2, r3
 8003bfc:	2301      	movs	r3, #1
 8003bfe:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003c00:	f7fd fbd8 	bl	80013b4 <HAL_GetTick>
 8003c04:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003c08:	e00f      	b.n	8003c2a <HAL_RCC_OscConfig+0x67e>
 8003c0a:	bf00      	nop
 8003c0c:	40021000 	.word	0x40021000
 8003c10:	10908120 	.word	0x10908120
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003c14:	f7fd fbce 	bl	80013b4 <HAL_GetTick>
 8003c18:	4602      	mov	r2, r0
 8003c1a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8003c1e:	1ad3      	subs	r3, r2, r3
 8003c20:	2b02      	cmp	r3, #2
 8003c22:	d902      	bls.n	8003c2a <HAL_RCC_OscConfig+0x67e>
        {
          return HAL_TIMEOUT;
 8003c24:	2303      	movs	r3, #3
 8003c26:	f000 bcc8 	b.w	80045ba <HAL_RCC_OscConfig+0x100e>
 8003c2a:	2302      	movs	r3, #2
 8003c2c:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c30:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8003c34:	fa93 f3a3 	rbit	r3, r3
 8003c38:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8003c3c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003c40:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8003c44:	2202      	movs	r2, #2
 8003c46:	601a      	str	r2, [r3, #0]
 8003c48:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003c4c:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	fa93 f2a3 	rbit	r2, r3
 8003c56:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003c5a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8003c5e:	601a      	str	r2, [r3, #0]
 8003c60:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003c64:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003c68:	2202      	movs	r2, #2
 8003c6a:	601a      	str	r2, [r3, #0]
 8003c6c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003c70:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	fa93 f2a3 	rbit	r2, r3
 8003c7a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003c7e:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8003c82:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003c84:	4bb0      	ldr	r3, [pc, #704]	@ (8003f48 <HAL_RCC_OscConfig+0x99c>)
 8003c86:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003c88:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003c8c:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8003c90:	2102      	movs	r1, #2
 8003c92:	6019      	str	r1, [r3, #0]
 8003c94:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003c98:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	fa93 f1a3 	rbit	r1, r3
 8003ca2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003ca6:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8003caa:	6019      	str	r1, [r3, #0]
  return result;
 8003cac:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003cb0:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	fab3 f383 	clz	r3, r3
 8003cba:	b2db      	uxtb	r3, r3
 8003cbc:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8003cc0:	b2db      	uxtb	r3, r3
 8003cc2:	f003 031f 	and.w	r3, r3, #31
 8003cc6:	2101      	movs	r1, #1
 8003cc8:	fa01 f303 	lsl.w	r3, r1, r3
 8003ccc:	4013      	ands	r3, r2
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d0a0      	beq.n	8003c14 <HAL_RCC_OscConfig+0x668>
 8003cd2:	e08d      	b.n	8003df0 <HAL_RCC_OscConfig+0x844>
 8003cd4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003cd8:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8003cdc:	2201      	movs	r2, #1
 8003cde:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ce0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003ce4:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	fa93 f2a3 	rbit	r2, r3
 8003cee:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003cf2:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8003cf6:	601a      	str	r2, [r3, #0]
  return result;
 8003cf8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003cfc:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8003d00:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003d02:	fab3 f383 	clz	r3, r3
 8003d06:	b2db      	uxtb	r3, r3
 8003d08:	461a      	mov	r2, r3
 8003d0a:	4b90      	ldr	r3, [pc, #576]	@ (8003f4c <HAL_RCC_OscConfig+0x9a0>)
 8003d0c:	4413      	add	r3, r2
 8003d0e:	009b      	lsls	r3, r3, #2
 8003d10:	461a      	mov	r2, r3
 8003d12:	2300      	movs	r3, #0
 8003d14:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003d16:	f7fd fb4d 	bl	80013b4 <HAL_GetTick>
 8003d1a:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003d1e:	e00a      	b.n	8003d36 <HAL_RCC_OscConfig+0x78a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003d20:	f7fd fb48 	bl	80013b4 <HAL_GetTick>
 8003d24:	4602      	mov	r2, r0
 8003d26:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8003d2a:	1ad3      	subs	r3, r2, r3
 8003d2c:	2b02      	cmp	r3, #2
 8003d2e:	d902      	bls.n	8003d36 <HAL_RCC_OscConfig+0x78a>
        {
          return HAL_TIMEOUT;
 8003d30:	2303      	movs	r3, #3
 8003d32:	f000 bc42 	b.w	80045ba <HAL_RCC_OscConfig+0x100e>
 8003d36:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003d3a:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8003d3e:	2202      	movs	r2, #2
 8003d40:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d42:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003d46:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	fa93 f2a3 	rbit	r2, r3
 8003d50:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003d54:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8003d58:	601a      	str	r2, [r3, #0]
 8003d5a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003d5e:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8003d62:	2202      	movs	r2, #2
 8003d64:	601a      	str	r2, [r3, #0]
 8003d66:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003d6a:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	fa93 f2a3 	rbit	r2, r3
 8003d74:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003d78:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8003d7c:	601a      	str	r2, [r3, #0]
 8003d7e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003d82:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8003d86:	2202      	movs	r2, #2
 8003d88:	601a      	str	r2, [r3, #0]
 8003d8a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003d8e:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	fa93 f2a3 	rbit	r2, r3
 8003d98:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003d9c:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8003da0:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003da2:	4b69      	ldr	r3, [pc, #420]	@ (8003f48 <HAL_RCC_OscConfig+0x99c>)
 8003da4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003da6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003daa:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8003dae:	2102      	movs	r1, #2
 8003db0:	6019      	str	r1, [r3, #0]
 8003db2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003db6:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	fa93 f1a3 	rbit	r1, r3
 8003dc0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003dc4:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8003dc8:	6019      	str	r1, [r3, #0]
  return result;
 8003dca:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003dce:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	fab3 f383 	clz	r3, r3
 8003dd8:	b2db      	uxtb	r3, r3
 8003dda:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8003dde:	b2db      	uxtb	r3, r3
 8003de0:	f003 031f 	and.w	r3, r3, #31
 8003de4:	2101      	movs	r1, #1
 8003de6:	fa01 f303 	lsl.w	r3, r1, r3
 8003dea:	4013      	ands	r3, r2
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d197      	bne.n	8003d20 <HAL_RCC_OscConfig+0x774>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003df0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003df4:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	f003 0304 	and.w	r3, r3, #4
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	f000 819e 	beq.w	8004142 <HAL_RCC_OscConfig+0xb96>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003e06:	2300      	movs	r3, #0
 8003e08:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003e0c:	4b4e      	ldr	r3, [pc, #312]	@ (8003f48 <HAL_RCC_OscConfig+0x99c>)
 8003e0e:	69db      	ldr	r3, [r3, #28]
 8003e10:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d116      	bne.n	8003e46 <HAL_RCC_OscConfig+0x89a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003e18:	4b4b      	ldr	r3, [pc, #300]	@ (8003f48 <HAL_RCC_OscConfig+0x99c>)
 8003e1a:	69db      	ldr	r3, [r3, #28]
 8003e1c:	4a4a      	ldr	r2, [pc, #296]	@ (8003f48 <HAL_RCC_OscConfig+0x99c>)
 8003e1e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003e22:	61d3      	str	r3, [r2, #28]
 8003e24:	4b48      	ldr	r3, [pc, #288]	@ (8003f48 <HAL_RCC_OscConfig+0x99c>)
 8003e26:	69db      	ldr	r3, [r3, #28]
 8003e28:	f003 5280 	and.w	r2, r3, #268435456	@ 0x10000000
 8003e2c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003e30:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 8003e34:	601a      	str	r2, [r3, #0]
 8003e36:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003e3a:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 8003e3e:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8003e40:	2301      	movs	r3, #1
 8003e42:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e46:	4b42      	ldr	r3, [pc, #264]	@ (8003f50 <HAL_RCC_OscConfig+0x9a4>)
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d11a      	bne.n	8003e88 <HAL_RCC_OscConfig+0x8dc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003e52:	4b3f      	ldr	r3, [pc, #252]	@ (8003f50 <HAL_RCC_OscConfig+0x9a4>)
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	4a3e      	ldr	r2, [pc, #248]	@ (8003f50 <HAL_RCC_OscConfig+0x9a4>)
 8003e58:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003e5c:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003e5e:	f7fd faa9 	bl	80013b4 <HAL_GetTick>
 8003e62:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e66:	e009      	b.n	8003e7c <HAL_RCC_OscConfig+0x8d0>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003e68:	f7fd faa4 	bl	80013b4 <HAL_GetTick>
 8003e6c:	4602      	mov	r2, r0
 8003e6e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8003e72:	1ad3      	subs	r3, r2, r3
 8003e74:	2b64      	cmp	r3, #100	@ 0x64
 8003e76:	d901      	bls.n	8003e7c <HAL_RCC_OscConfig+0x8d0>
        {
          return HAL_TIMEOUT;
 8003e78:	2303      	movs	r3, #3
 8003e7a:	e39e      	b.n	80045ba <HAL_RCC_OscConfig+0x100e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e7c:	4b34      	ldr	r3, [pc, #208]	@ (8003f50 <HAL_RCC_OscConfig+0x9a4>)
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d0ef      	beq.n	8003e68 <HAL_RCC_OscConfig+0x8bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003e88:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003e8c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	68db      	ldr	r3, [r3, #12]
 8003e94:	2b01      	cmp	r3, #1
 8003e96:	d106      	bne.n	8003ea6 <HAL_RCC_OscConfig+0x8fa>
 8003e98:	4b2b      	ldr	r3, [pc, #172]	@ (8003f48 <HAL_RCC_OscConfig+0x99c>)
 8003e9a:	6a1b      	ldr	r3, [r3, #32]
 8003e9c:	4a2a      	ldr	r2, [pc, #168]	@ (8003f48 <HAL_RCC_OscConfig+0x99c>)
 8003e9e:	f043 0301 	orr.w	r3, r3, #1
 8003ea2:	6213      	str	r3, [r2, #32]
 8003ea4:	e035      	b.n	8003f12 <HAL_RCC_OscConfig+0x966>
 8003ea6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003eaa:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	68db      	ldr	r3, [r3, #12]
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d10c      	bne.n	8003ed0 <HAL_RCC_OscConfig+0x924>
 8003eb6:	4b24      	ldr	r3, [pc, #144]	@ (8003f48 <HAL_RCC_OscConfig+0x99c>)
 8003eb8:	6a1b      	ldr	r3, [r3, #32]
 8003eba:	4a23      	ldr	r2, [pc, #140]	@ (8003f48 <HAL_RCC_OscConfig+0x99c>)
 8003ebc:	f023 0301 	bic.w	r3, r3, #1
 8003ec0:	6213      	str	r3, [r2, #32]
 8003ec2:	4b21      	ldr	r3, [pc, #132]	@ (8003f48 <HAL_RCC_OscConfig+0x99c>)
 8003ec4:	6a1b      	ldr	r3, [r3, #32]
 8003ec6:	4a20      	ldr	r2, [pc, #128]	@ (8003f48 <HAL_RCC_OscConfig+0x99c>)
 8003ec8:	f023 0304 	bic.w	r3, r3, #4
 8003ecc:	6213      	str	r3, [r2, #32]
 8003ece:	e020      	b.n	8003f12 <HAL_RCC_OscConfig+0x966>
 8003ed0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003ed4:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	68db      	ldr	r3, [r3, #12]
 8003edc:	2b05      	cmp	r3, #5
 8003ede:	d10c      	bne.n	8003efa <HAL_RCC_OscConfig+0x94e>
 8003ee0:	4b19      	ldr	r3, [pc, #100]	@ (8003f48 <HAL_RCC_OscConfig+0x99c>)
 8003ee2:	6a1b      	ldr	r3, [r3, #32]
 8003ee4:	4a18      	ldr	r2, [pc, #96]	@ (8003f48 <HAL_RCC_OscConfig+0x99c>)
 8003ee6:	f043 0304 	orr.w	r3, r3, #4
 8003eea:	6213      	str	r3, [r2, #32]
 8003eec:	4b16      	ldr	r3, [pc, #88]	@ (8003f48 <HAL_RCC_OscConfig+0x99c>)
 8003eee:	6a1b      	ldr	r3, [r3, #32]
 8003ef0:	4a15      	ldr	r2, [pc, #84]	@ (8003f48 <HAL_RCC_OscConfig+0x99c>)
 8003ef2:	f043 0301 	orr.w	r3, r3, #1
 8003ef6:	6213      	str	r3, [r2, #32]
 8003ef8:	e00b      	b.n	8003f12 <HAL_RCC_OscConfig+0x966>
 8003efa:	4b13      	ldr	r3, [pc, #76]	@ (8003f48 <HAL_RCC_OscConfig+0x99c>)
 8003efc:	6a1b      	ldr	r3, [r3, #32]
 8003efe:	4a12      	ldr	r2, [pc, #72]	@ (8003f48 <HAL_RCC_OscConfig+0x99c>)
 8003f00:	f023 0301 	bic.w	r3, r3, #1
 8003f04:	6213      	str	r3, [r2, #32]
 8003f06:	4b10      	ldr	r3, [pc, #64]	@ (8003f48 <HAL_RCC_OscConfig+0x99c>)
 8003f08:	6a1b      	ldr	r3, [r3, #32]
 8003f0a:	4a0f      	ldr	r2, [pc, #60]	@ (8003f48 <HAL_RCC_OscConfig+0x99c>)
 8003f0c:	f023 0304 	bic.w	r3, r3, #4
 8003f10:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003f12:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003f16:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	68db      	ldr	r3, [r3, #12]
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	f000 8087 	beq.w	8004032 <HAL_RCC_OscConfig+0xa86>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003f24:	f7fd fa46 	bl	80013b4 <HAL_GetTick>
 8003f28:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f2c:	e012      	b.n	8003f54 <HAL_RCC_OscConfig+0x9a8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003f2e:	f7fd fa41 	bl	80013b4 <HAL_GetTick>
 8003f32:	4602      	mov	r2, r0
 8003f34:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8003f38:	1ad3      	subs	r3, r2, r3
 8003f3a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003f3e:	4293      	cmp	r3, r2
 8003f40:	d908      	bls.n	8003f54 <HAL_RCC_OscConfig+0x9a8>
        {
          return HAL_TIMEOUT;
 8003f42:	2303      	movs	r3, #3
 8003f44:	e339      	b.n	80045ba <HAL_RCC_OscConfig+0x100e>
 8003f46:	bf00      	nop
 8003f48:	40021000 	.word	0x40021000
 8003f4c:	10908120 	.word	0x10908120
 8003f50:	40007000 	.word	0x40007000
 8003f54:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003f58:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8003f5c:	2202      	movs	r2, #2
 8003f5e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f60:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003f64:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	fa93 f2a3 	rbit	r2, r3
 8003f6e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003f72:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8003f76:	601a      	str	r2, [r3, #0]
 8003f78:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003f7c:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8003f80:	2202      	movs	r2, #2
 8003f82:	601a      	str	r2, [r3, #0]
 8003f84:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003f88:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	fa93 f2a3 	rbit	r2, r3
 8003f92:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003f96:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8003f9a:	601a      	str	r2, [r3, #0]
  return result;
 8003f9c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003fa0:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8003fa4:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003fa6:	fab3 f383 	clz	r3, r3
 8003faa:	b2db      	uxtb	r3, r3
 8003fac:	f023 035f 	bic.w	r3, r3, #95	@ 0x5f
 8003fb0:	b2db      	uxtb	r3, r3
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d102      	bne.n	8003fbc <HAL_RCC_OscConfig+0xa10>
 8003fb6:	4b98      	ldr	r3, [pc, #608]	@ (8004218 <HAL_RCC_OscConfig+0xc6c>)
 8003fb8:	6a1b      	ldr	r3, [r3, #32]
 8003fba:	e013      	b.n	8003fe4 <HAL_RCC_OscConfig+0xa38>
 8003fbc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003fc0:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8003fc4:	2202      	movs	r2, #2
 8003fc6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003fc8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003fcc:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	fa93 f2a3 	rbit	r2, r3
 8003fd6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003fda:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8003fde:	601a      	str	r2, [r3, #0]
 8003fe0:	4b8d      	ldr	r3, [pc, #564]	@ (8004218 <HAL_RCC_OscConfig+0xc6c>)
 8003fe2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fe4:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003fe8:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 8003fec:	2102      	movs	r1, #2
 8003fee:	6011      	str	r1, [r2, #0]
 8003ff0:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003ff4:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 8003ff8:	6812      	ldr	r2, [r2, #0]
 8003ffa:	fa92 f1a2 	rbit	r1, r2
 8003ffe:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004002:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8004006:	6011      	str	r1, [r2, #0]
  return result;
 8004008:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800400c:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8004010:	6812      	ldr	r2, [r2, #0]
 8004012:	fab2 f282 	clz	r2, r2
 8004016:	b2d2      	uxtb	r2, r2
 8004018:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800401c:	b2d2      	uxtb	r2, r2
 800401e:	f002 021f 	and.w	r2, r2, #31
 8004022:	2101      	movs	r1, #1
 8004024:	fa01 f202 	lsl.w	r2, r1, r2
 8004028:	4013      	ands	r3, r2
 800402a:	2b00      	cmp	r3, #0
 800402c:	f43f af7f 	beq.w	8003f2e <HAL_RCC_OscConfig+0x982>
 8004030:	e07d      	b.n	800412e <HAL_RCC_OscConfig+0xb82>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004032:	f7fd f9bf 	bl	80013b4 <HAL_GetTick>
 8004036:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800403a:	e00b      	b.n	8004054 <HAL_RCC_OscConfig+0xaa8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800403c:	f7fd f9ba 	bl	80013b4 <HAL_GetTick>
 8004040:	4602      	mov	r2, r0
 8004042:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8004046:	1ad3      	subs	r3, r2, r3
 8004048:	f241 3288 	movw	r2, #5000	@ 0x1388
 800404c:	4293      	cmp	r3, r2
 800404e:	d901      	bls.n	8004054 <HAL_RCC_OscConfig+0xaa8>
        {
          return HAL_TIMEOUT;
 8004050:	2303      	movs	r3, #3
 8004052:	e2b2      	b.n	80045ba <HAL_RCC_OscConfig+0x100e>
 8004054:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004058:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 800405c:	2202      	movs	r2, #2
 800405e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004060:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004064:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	fa93 f2a3 	rbit	r2, r3
 800406e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004072:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 8004076:	601a      	str	r2, [r3, #0]
 8004078:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800407c:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8004080:	2202      	movs	r2, #2
 8004082:	601a      	str	r2, [r3, #0]
 8004084:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004088:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	fa93 f2a3 	rbit	r2, r3
 8004092:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004096:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 800409a:	601a      	str	r2, [r3, #0]
  return result;
 800409c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80040a0:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 80040a4:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80040a6:	fab3 f383 	clz	r3, r3
 80040aa:	b2db      	uxtb	r3, r3
 80040ac:	f023 035f 	bic.w	r3, r3, #95	@ 0x5f
 80040b0:	b2db      	uxtb	r3, r3
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d102      	bne.n	80040bc <HAL_RCC_OscConfig+0xb10>
 80040b6:	4b58      	ldr	r3, [pc, #352]	@ (8004218 <HAL_RCC_OscConfig+0xc6c>)
 80040b8:	6a1b      	ldr	r3, [r3, #32]
 80040ba:	e013      	b.n	80040e4 <HAL_RCC_OscConfig+0xb38>
 80040bc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80040c0:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 80040c4:	2202      	movs	r2, #2
 80040c6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040c8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80040cc:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	fa93 f2a3 	rbit	r2, r3
 80040d6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80040da:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 80040de:	601a      	str	r2, [r3, #0]
 80040e0:	4b4d      	ldr	r3, [pc, #308]	@ (8004218 <HAL_RCC_OscConfig+0xc6c>)
 80040e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040e4:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80040e8:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 80040ec:	2102      	movs	r1, #2
 80040ee:	6011      	str	r1, [r2, #0]
 80040f0:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80040f4:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 80040f8:	6812      	ldr	r2, [r2, #0]
 80040fa:	fa92 f1a2 	rbit	r1, r2
 80040fe:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004102:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8004106:	6011      	str	r1, [r2, #0]
  return result;
 8004108:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800410c:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8004110:	6812      	ldr	r2, [r2, #0]
 8004112:	fab2 f282 	clz	r2, r2
 8004116:	b2d2      	uxtb	r2, r2
 8004118:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800411c:	b2d2      	uxtb	r2, r2
 800411e:	f002 021f 	and.w	r2, r2, #31
 8004122:	2101      	movs	r1, #1
 8004124:	fa01 f202 	lsl.w	r2, r1, r2
 8004128:	4013      	ands	r3, r2
 800412a:	2b00      	cmp	r3, #0
 800412c:	d186      	bne.n	800403c <HAL_RCC_OscConfig+0xa90>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800412e:	f897 31ff 	ldrb.w	r3, [r7, #511]	@ 0x1ff
 8004132:	2b01      	cmp	r3, #1
 8004134:	d105      	bne.n	8004142 <HAL_RCC_OscConfig+0xb96>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004136:	4b38      	ldr	r3, [pc, #224]	@ (8004218 <HAL_RCC_OscConfig+0xc6c>)
 8004138:	69db      	ldr	r3, [r3, #28]
 800413a:	4a37      	ldr	r2, [pc, #220]	@ (8004218 <HAL_RCC_OscConfig+0xc6c>)
 800413c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004140:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004142:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004146:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	69db      	ldr	r3, [r3, #28]
 800414e:	2b00      	cmp	r3, #0
 8004150:	f000 8232 	beq.w	80045b8 <HAL_RCC_OscConfig+0x100c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004154:	4b30      	ldr	r3, [pc, #192]	@ (8004218 <HAL_RCC_OscConfig+0xc6c>)
 8004156:	685b      	ldr	r3, [r3, #4]
 8004158:	f003 030c 	and.w	r3, r3, #12
 800415c:	2b08      	cmp	r3, #8
 800415e:	f000 8201 	beq.w	8004564 <HAL_RCC_OscConfig+0xfb8>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004162:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004166:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	69db      	ldr	r3, [r3, #28]
 800416e:	2b02      	cmp	r3, #2
 8004170:	f040 8157 	bne.w	8004422 <HAL_RCC_OscConfig+0xe76>
 8004174:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004178:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 800417c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8004180:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004182:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004186:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	fa93 f2a3 	rbit	r2, r3
 8004190:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004194:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8004198:	601a      	str	r2, [r3, #0]
  return result;
 800419a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800419e:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 80041a2:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80041a4:	fab3 f383 	clz	r3, r3
 80041a8:	b2db      	uxtb	r3, r3
 80041aa:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80041ae:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80041b2:	009b      	lsls	r3, r3, #2
 80041b4:	461a      	mov	r2, r3
 80041b6:	2300      	movs	r3, #0
 80041b8:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80041ba:	f7fd f8fb 	bl	80013b4 <HAL_GetTick>
 80041be:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80041c2:	e009      	b.n	80041d8 <HAL_RCC_OscConfig+0xc2c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80041c4:	f7fd f8f6 	bl	80013b4 <HAL_GetTick>
 80041c8:	4602      	mov	r2, r0
 80041ca:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80041ce:	1ad3      	subs	r3, r2, r3
 80041d0:	2b02      	cmp	r3, #2
 80041d2:	d901      	bls.n	80041d8 <HAL_RCC_OscConfig+0xc2c>
          {
            return HAL_TIMEOUT;
 80041d4:	2303      	movs	r3, #3
 80041d6:	e1f0      	b.n	80045ba <HAL_RCC_OscConfig+0x100e>
 80041d8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80041dc:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 80041e0:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80041e4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041e6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80041ea:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	fa93 f2a3 	rbit	r2, r3
 80041f4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80041f8:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 80041fc:	601a      	str	r2, [r3, #0]
  return result;
 80041fe:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004202:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8004206:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004208:	fab3 f383 	clz	r3, r3
 800420c:	b2db      	uxtb	r3, r3
 800420e:	2b3f      	cmp	r3, #63	@ 0x3f
 8004210:	d804      	bhi.n	800421c <HAL_RCC_OscConfig+0xc70>
 8004212:	4b01      	ldr	r3, [pc, #4]	@ (8004218 <HAL_RCC_OscConfig+0xc6c>)
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	e029      	b.n	800426c <HAL_RCC_OscConfig+0xcc0>
 8004218:	40021000 	.word	0x40021000
 800421c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004220:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8004224:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004228:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800422a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800422e:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	fa93 f2a3 	rbit	r2, r3
 8004238:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800423c:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8004240:	601a      	str	r2, [r3, #0]
 8004242:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004246:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 800424a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800424e:	601a      	str	r2, [r3, #0]
 8004250:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004254:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	fa93 f2a3 	rbit	r2, r3
 800425e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004262:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8004266:	601a      	str	r2, [r3, #0]
 8004268:	4bc3      	ldr	r3, [pc, #780]	@ (8004578 <HAL_RCC_OscConfig+0xfcc>)
 800426a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800426c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004270:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 8004274:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8004278:	6011      	str	r1, [r2, #0]
 800427a:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800427e:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 8004282:	6812      	ldr	r2, [r2, #0]
 8004284:	fa92 f1a2 	rbit	r1, r2
 8004288:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800428c:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8004290:	6011      	str	r1, [r2, #0]
  return result;
 8004292:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004296:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 800429a:	6812      	ldr	r2, [r2, #0]
 800429c:	fab2 f282 	clz	r2, r2
 80042a0:	b2d2      	uxtb	r2, r2
 80042a2:	f042 0220 	orr.w	r2, r2, #32
 80042a6:	b2d2      	uxtb	r2, r2
 80042a8:	f002 021f 	and.w	r2, r2, #31
 80042ac:	2101      	movs	r1, #1
 80042ae:	fa01 f202 	lsl.w	r2, r1, r2
 80042b2:	4013      	ands	r3, r2
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d185      	bne.n	80041c4 <HAL_RCC_OscConfig+0xc18>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80042b8:	4baf      	ldr	r3, [pc, #700]	@ (8004578 <HAL_RCC_OscConfig+0xfcc>)
 80042ba:	685b      	ldr	r3, [r3, #4]
 80042bc:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80042c0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80042c4:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 80042cc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80042d0:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	6a1b      	ldr	r3, [r3, #32]
 80042d8:	430b      	orrs	r3, r1
 80042da:	49a7      	ldr	r1, [pc, #668]	@ (8004578 <HAL_RCC_OscConfig+0xfcc>)
 80042dc:	4313      	orrs	r3, r2
 80042de:	604b      	str	r3, [r1, #4]
 80042e0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80042e4:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 80042e8:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80042ec:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042ee:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80042f2:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	fa93 f2a3 	rbit	r2, r3
 80042fc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004300:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8004304:	601a      	str	r2, [r3, #0]
  return result;
 8004306:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800430a:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 800430e:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004310:	fab3 f383 	clz	r3, r3
 8004314:	b2db      	uxtb	r3, r3
 8004316:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 800431a:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 800431e:	009b      	lsls	r3, r3, #2
 8004320:	461a      	mov	r2, r3
 8004322:	2301      	movs	r3, #1
 8004324:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004326:	f7fd f845 	bl	80013b4 <HAL_GetTick>
 800432a:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800432e:	e009      	b.n	8004344 <HAL_RCC_OscConfig+0xd98>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004330:	f7fd f840 	bl	80013b4 <HAL_GetTick>
 8004334:	4602      	mov	r2, r0
 8004336:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800433a:	1ad3      	subs	r3, r2, r3
 800433c:	2b02      	cmp	r3, #2
 800433e:	d901      	bls.n	8004344 <HAL_RCC_OscConfig+0xd98>
          {
            return HAL_TIMEOUT;
 8004340:	2303      	movs	r3, #3
 8004342:	e13a      	b.n	80045ba <HAL_RCC_OscConfig+0x100e>
 8004344:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004348:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 800434c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004350:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004352:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004356:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	fa93 f2a3 	rbit	r2, r3
 8004360:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004364:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8004368:	601a      	str	r2, [r3, #0]
  return result;
 800436a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800436e:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8004372:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004374:	fab3 f383 	clz	r3, r3
 8004378:	b2db      	uxtb	r3, r3
 800437a:	2b3f      	cmp	r3, #63	@ 0x3f
 800437c:	d802      	bhi.n	8004384 <HAL_RCC_OscConfig+0xdd8>
 800437e:	4b7e      	ldr	r3, [pc, #504]	@ (8004578 <HAL_RCC_OscConfig+0xfcc>)
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	e027      	b.n	80043d4 <HAL_RCC_OscConfig+0xe28>
 8004384:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004388:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 800438c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004390:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004392:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004396:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	fa93 f2a3 	rbit	r2, r3
 80043a0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80043a4:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 80043a8:	601a      	str	r2, [r3, #0]
 80043aa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80043ae:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 80043b2:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80043b6:	601a      	str	r2, [r3, #0]
 80043b8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80043bc:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	fa93 f2a3 	rbit	r2, r3
 80043c6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80043ca:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 80043ce:	601a      	str	r2, [r3, #0]
 80043d0:	4b69      	ldr	r3, [pc, #420]	@ (8004578 <HAL_RCC_OscConfig+0xfcc>)
 80043d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043d4:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80043d8:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 80043dc:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 80043e0:	6011      	str	r1, [r2, #0]
 80043e2:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80043e6:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 80043ea:	6812      	ldr	r2, [r2, #0]
 80043ec:	fa92 f1a2 	rbit	r1, r2
 80043f0:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80043f4:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 80043f8:	6011      	str	r1, [r2, #0]
  return result;
 80043fa:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80043fe:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8004402:	6812      	ldr	r2, [r2, #0]
 8004404:	fab2 f282 	clz	r2, r2
 8004408:	b2d2      	uxtb	r2, r2
 800440a:	f042 0220 	orr.w	r2, r2, #32
 800440e:	b2d2      	uxtb	r2, r2
 8004410:	f002 021f 	and.w	r2, r2, #31
 8004414:	2101      	movs	r1, #1
 8004416:	fa01 f202 	lsl.w	r2, r1, r2
 800441a:	4013      	ands	r3, r2
 800441c:	2b00      	cmp	r3, #0
 800441e:	d087      	beq.n	8004330 <HAL_RCC_OscConfig+0xd84>
 8004420:	e0ca      	b.n	80045b8 <HAL_RCC_OscConfig+0x100c>
 8004422:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004426:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 800442a:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800442e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004430:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004434:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	fa93 f2a3 	rbit	r2, r3
 800443e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004442:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8004446:	601a      	str	r2, [r3, #0]
  return result;
 8004448:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800444c:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8004450:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004452:	fab3 f383 	clz	r3, r3
 8004456:	b2db      	uxtb	r3, r3
 8004458:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 800445c:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8004460:	009b      	lsls	r3, r3, #2
 8004462:	461a      	mov	r2, r3
 8004464:	2300      	movs	r3, #0
 8004466:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004468:	f7fc ffa4 	bl	80013b4 <HAL_GetTick>
 800446c:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004470:	e009      	b.n	8004486 <HAL_RCC_OscConfig+0xeda>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004472:	f7fc ff9f 	bl	80013b4 <HAL_GetTick>
 8004476:	4602      	mov	r2, r0
 8004478:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800447c:	1ad3      	subs	r3, r2, r3
 800447e:	2b02      	cmp	r3, #2
 8004480:	d901      	bls.n	8004486 <HAL_RCC_OscConfig+0xeda>
          {
            return HAL_TIMEOUT;
 8004482:	2303      	movs	r3, #3
 8004484:	e099      	b.n	80045ba <HAL_RCC_OscConfig+0x100e>
 8004486:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800448a:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 800448e:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004492:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004494:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004498:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	fa93 f2a3 	rbit	r2, r3
 80044a2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80044a6:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 80044aa:	601a      	str	r2, [r3, #0]
  return result;
 80044ac:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80044b0:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 80044b4:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80044b6:	fab3 f383 	clz	r3, r3
 80044ba:	b2db      	uxtb	r3, r3
 80044bc:	2b3f      	cmp	r3, #63	@ 0x3f
 80044be:	d802      	bhi.n	80044c6 <HAL_RCC_OscConfig+0xf1a>
 80044c0:	4b2d      	ldr	r3, [pc, #180]	@ (8004578 <HAL_RCC_OscConfig+0xfcc>)
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	e027      	b.n	8004516 <HAL_RCC_OscConfig+0xf6a>
 80044c6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80044ca:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 80044ce:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80044d2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80044d4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80044d8:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	fa93 f2a3 	rbit	r2, r3
 80044e2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80044e6:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 80044ea:	601a      	str	r2, [r3, #0]
 80044ec:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80044f0:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 80044f4:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80044f8:	601a      	str	r2, [r3, #0]
 80044fa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80044fe:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	fa93 f2a3 	rbit	r2, r3
 8004508:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800450c:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 8004510:	601a      	str	r2, [r3, #0]
 8004512:	4b19      	ldr	r3, [pc, #100]	@ (8004578 <HAL_RCC_OscConfig+0xfcc>)
 8004514:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004516:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800451a:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 800451e:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8004522:	6011      	str	r1, [r2, #0]
 8004524:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004528:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 800452c:	6812      	ldr	r2, [r2, #0]
 800452e:	fa92 f1a2 	rbit	r1, r2
 8004532:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004536:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 800453a:	6011      	str	r1, [r2, #0]
  return result;
 800453c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004540:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8004544:	6812      	ldr	r2, [r2, #0]
 8004546:	fab2 f282 	clz	r2, r2
 800454a:	b2d2      	uxtb	r2, r2
 800454c:	f042 0220 	orr.w	r2, r2, #32
 8004550:	b2d2      	uxtb	r2, r2
 8004552:	f002 021f 	and.w	r2, r2, #31
 8004556:	2101      	movs	r1, #1
 8004558:	fa01 f202 	lsl.w	r2, r1, r2
 800455c:	4013      	ands	r3, r2
 800455e:	2b00      	cmp	r3, #0
 8004560:	d187      	bne.n	8004472 <HAL_RCC_OscConfig+0xec6>
 8004562:	e029      	b.n	80045b8 <HAL_RCC_OscConfig+0x100c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004564:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004568:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	69db      	ldr	r3, [r3, #28]
 8004570:	2b01      	cmp	r3, #1
 8004572:	d103      	bne.n	800457c <HAL_RCC_OscConfig+0xfd0>
      {
        return HAL_ERROR;
 8004574:	2301      	movs	r3, #1
 8004576:	e020      	b.n	80045ba <HAL_RCC_OscConfig+0x100e>
 8004578:	40021000 	.word	0x40021000
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800457c:	4b11      	ldr	r3, [pc, #68]	@ (80045c4 <HAL_RCC_OscConfig+0x1018>)
 800457e:	685b      	ldr	r3, [r3, #4]
 8004580:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8004584:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8004588:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 800458c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004590:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	6a1b      	ldr	r3, [r3, #32]
 8004598:	429a      	cmp	r2, r3
 800459a:	d10b      	bne.n	80045b4 <HAL_RCC_OscConfig+0x1008>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 800459c:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 80045a0:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80045a4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80045a8:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80045b0:	429a      	cmp	r2, r3
 80045b2:	d001      	beq.n	80045b8 <HAL_RCC_OscConfig+0x100c>
#endif
        {
          return HAL_ERROR;
 80045b4:	2301      	movs	r3, #1
 80045b6:	e000      	b.n	80045ba <HAL_RCC_OscConfig+0x100e>
        }
      }
    }
  }

  return HAL_OK;
 80045b8:	2300      	movs	r3, #0
}
 80045ba:	4618      	mov	r0, r3
 80045bc:	f507 7700 	add.w	r7, r7, #512	@ 0x200
 80045c0:	46bd      	mov	sp, r7
 80045c2:	bd80      	pop	{r7, pc}
 80045c4:	40021000 	.word	0x40021000

080045c8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80045c8:	b580      	push	{r7, lr}
 80045ca:	b09e      	sub	sp, #120	@ 0x78
 80045cc:	af00      	add	r7, sp, #0
 80045ce:	6078      	str	r0, [r7, #4]
 80045d0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80045d2:	2300      	movs	r3, #0
 80045d4:	677b      	str	r3, [r7, #116]	@ 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d101      	bne.n	80045e0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80045dc:	2301      	movs	r3, #1
 80045de:	e154      	b.n	800488a <HAL_RCC_ClockConfig+0x2c2>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80045e0:	4b89      	ldr	r3, [pc, #548]	@ (8004808 <HAL_RCC_ClockConfig+0x240>)
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	f003 0307 	and.w	r3, r3, #7
 80045e8:	683a      	ldr	r2, [r7, #0]
 80045ea:	429a      	cmp	r2, r3
 80045ec:	d910      	bls.n	8004610 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80045ee:	4b86      	ldr	r3, [pc, #536]	@ (8004808 <HAL_RCC_ClockConfig+0x240>)
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	f023 0207 	bic.w	r2, r3, #7
 80045f6:	4984      	ldr	r1, [pc, #528]	@ (8004808 <HAL_RCC_ClockConfig+0x240>)
 80045f8:	683b      	ldr	r3, [r7, #0]
 80045fa:	4313      	orrs	r3, r2
 80045fc:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80045fe:	4b82      	ldr	r3, [pc, #520]	@ (8004808 <HAL_RCC_ClockConfig+0x240>)
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	f003 0307 	and.w	r3, r3, #7
 8004606:	683a      	ldr	r2, [r7, #0]
 8004608:	429a      	cmp	r2, r3
 800460a:	d001      	beq.n	8004610 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800460c:	2301      	movs	r3, #1
 800460e:	e13c      	b.n	800488a <HAL_RCC_ClockConfig+0x2c2>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	f003 0302 	and.w	r3, r3, #2
 8004618:	2b00      	cmp	r3, #0
 800461a:	d008      	beq.n	800462e <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800461c:	4b7b      	ldr	r3, [pc, #492]	@ (800480c <HAL_RCC_ClockConfig+0x244>)
 800461e:	685b      	ldr	r3, [r3, #4]
 8004620:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	689b      	ldr	r3, [r3, #8]
 8004628:	4978      	ldr	r1, [pc, #480]	@ (800480c <HAL_RCC_ClockConfig+0x244>)
 800462a:	4313      	orrs	r3, r2
 800462c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	f003 0301 	and.w	r3, r3, #1
 8004636:	2b00      	cmp	r3, #0
 8004638:	f000 80cd 	beq.w	80047d6 <HAL_RCC_ClockConfig+0x20e>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	685b      	ldr	r3, [r3, #4]
 8004640:	2b01      	cmp	r3, #1
 8004642:	d137      	bne.n	80046b4 <HAL_RCC_ClockConfig+0xec>
 8004644:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8004648:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800464a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800464c:	fa93 f3a3 	rbit	r3, r3
 8004650:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 8004652:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004654:	fab3 f383 	clz	r3, r3
 8004658:	b2db      	uxtb	r3, r3
 800465a:	2b3f      	cmp	r3, #63	@ 0x3f
 800465c:	d802      	bhi.n	8004664 <HAL_RCC_ClockConfig+0x9c>
 800465e:	4b6b      	ldr	r3, [pc, #428]	@ (800480c <HAL_RCC_ClockConfig+0x244>)
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	e00f      	b.n	8004684 <HAL_RCC_ClockConfig+0xbc>
 8004664:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8004668:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800466a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800466c:	fa93 f3a3 	rbit	r3, r3
 8004670:	667b      	str	r3, [r7, #100]	@ 0x64
 8004672:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8004676:	663b      	str	r3, [r7, #96]	@ 0x60
 8004678:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800467a:	fa93 f3a3 	rbit	r3, r3
 800467e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004680:	4b62      	ldr	r3, [pc, #392]	@ (800480c <HAL_RCC_ClockConfig+0x244>)
 8004682:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004684:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8004688:	65ba      	str	r2, [r7, #88]	@ 0x58
 800468a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800468c:	fa92 f2a2 	rbit	r2, r2
 8004690:	657a      	str	r2, [r7, #84]	@ 0x54
  return result;
 8004692:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8004694:	fab2 f282 	clz	r2, r2
 8004698:	b2d2      	uxtb	r2, r2
 800469a:	f042 0220 	orr.w	r2, r2, #32
 800469e:	b2d2      	uxtb	r2, r2
 80046a0:	f002 021f 	and.w	r2, r2, #31
 80046a4:	2101      	movs	r1, #1
 80046a6:	fa01 f202 	lsl.w	r2, r1, r2
 80046aa:	4013      	ands	r3, r2
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d171      	bne.n	8004794 <HAL_RCC_ClockConfig+0x1cc>
      {
        return HAL_ERROR;
 80046b0:	2301      	movs	r3, #1
 80046b2:	e0ea      	b.n	800488a <HAL_RCC_ClockConfig+0x2c2>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	685b      	ldr	r3, [r3, #4]
 80046b8:	2b02      	cmp	r3, #2
 80046ba:	d137      	bne.n	800472c <HAL_RCC_ClockConfig+0x164>
 80046bc:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80046c0:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80046c2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80046c4:	fa93 f3a3 	rbit	r3, r3
 80046c8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 80046ca:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80046cc:	fab3 f383 	clz	r3, r3
 80046d0:	b2db      	uxtb	r3, r3
 80046d2:	2b3f      	cmp	r3, #63	@ 0x3f
 80046d4:	d802      	bhi.n	80046dc <HAL_RCC_ClockConfig+0x114>
 80046d6:	4b4d      	ldr	r3, [pc, #308]	@ (800480c <HAL_RCC_ClockConfig+0x244>)
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	e00f      	b.n	80046fc <HAL_RCC_ClockConfig+0x134>
 80046dc:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80046e0:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80046e2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80046e4:	fa93 f3a3 	rbit	r3, r3
 80046e8:	647b      	str	r3, [r7, #68]	@ 0x44
 80046ea:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80046ee:	643b      	str	r3, [r7, #64]	@ 0x40
 80046f0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80046f2:	fa93 f3a3 	rbit	r3, r3
 80046f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80046f8:	4b44      	ldr	r3, [pc, #272]	@ (800480c <HAL_RCC_ClockConfig+0x244>)
 80046fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046fc:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004700:	63ba      	str	r2, [r7, #56]	@ 0x38
 8004702:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8004704:	fa92 f2a2 	rbit	r2, r2
 8004708:	637a      	str	r2, [r7, #52]	@ 0x34
  return result;
 800470a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800470c:	fab2 f282 	clz	r2, r2
 8004710:	b2d2      	uxtb	r2, r2
 8004712:	f042 0220 	orr.w	r2, r2, #32
 8004716:	b2d2      	uxtb	r2, r2
 8004718:	f002 021f 	and.w	r2, r2, #31
 800471c:	2101      	movs	r1, #1
 800471e:	fa01 f202 	lsl.w	r2, r1, r2
 8004722:	4013      	ands	r3, r2
 8004724:	2b00      	cmp	r3, #0
 8004726:	d135      	bne.n	8004794 <HAL_RCC_ClockConfig+0x1cc>
      {
        return HAL_ERROR;
 8004728:	2301      	movs	r3, #1
 800472a:	e0ae      	b.n	800488a <HAL_RCC_ClockConfig+0x2c2>
 800472c:	2302      	movs	r3, #2
 800472e:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004730:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004732:	fa93 f3a3 	rbit	r3, r3
 8004736:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8004738:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800473a:	fab3 f383 	clz	r3, r3
 800473e:	b2db      	uxtb	r3, r3
 8004740:	2b3f      	cmp	r3, #63	@ 0x3f
 8004742:	d802      	bhi.n	800474a <HAL_RCC_ClockConfig+0x182>
 8004744:	4b31      	ldr	r3, [pc, #196]	@ (800480c <HAL_RCC_ClockConfig+0x244>)
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	e00d      	b.n	8004766 <HAL_RCC_ClockConfig+0x19e>
 800474a:	2302      	movs	r3, #2
 800474c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800474e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004750:	fa93 f3a3 	rbit	r3, r3
 8004754:	627b      	str	r3, [r7, #36]	@ 0x24
 8004756:	2302      	movs	r3, #2
 8004758:	623b      	str	r3, [r7, #32]
 800475a:	6a3b      	ldr	r3, [r7, #32]
 800475c:	fa93 f3a3 	rbit	r3, r3
 8004760:	61fb      	str	r3, [r7, #28]
 8004762:	4b2a      	ldr	r3, [pc, #168]	@ (800480c <HAL_RCC_ClockConfig+0x244>)
 8004764:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004766:	2202      	movs	r2, #2
 8004768:	61ba      	str	r2, [r7, #24]
 800476a:	69ba      	ldr	r2, [r7, #24]
 800476c:	fa92 f2a2 	rbit	r2, r2
 8004770:	617a      	str	r2, [r7, #20]
  return result;
 8004772:	697a      	ldr	r2, [r7, #20]
 8004774:	fab2 f282 	clz	r2, r2
 8004778:	b2d2      	uxtb	r2, r2
 800477a:	f042 0220 	orr.w	r2, r2, #32
 800477e:	b2d2      	uxtb	r2, r2
 8004780:	f002 021f 	and.w	r2, r2, #31
 8004784:	2101      	movs	r1, #1
 8004786:	fa01 f202 	lsl.w	r2, r1, r2
 800478a:	4013      	ands	r3, r2
 800478c:	2b00      	cmp	r3, #0
 800478e:	d101      	bne.n	8004794 <HAL_RCC_ClockConfig+0x1cc>
      {
        return HAL_ERROR;
 8004790:	2301      	movs	r3, #1
 8004792:	e07a      	b.n	800488a <HAL_RCC_ClockConfig+0x2c2>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004794:	4b1d      	ldr	r3, [pc, #116]	@ (800480c <HAL_RCC_ClockConfig+0x244>)
 8004796:	685b      	ldr	r3, [r3, #4]
 8004798:	f023 0203 	bic.w	r2, r3, #3
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	685b      	ldr	r3, [r3, #4]
 80047a0:	491a      	ldr	r1, [pc, #104]	@ (800480c <HAL_RCC_ClockConfig+0x244>)
 80047a2:	4313      	orrs	r3, r2
 80047a4:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80047a6:	f7fc fe05 	bl	80013b4 <HAL_GetTick>
 80047aa:	6778      	str	r0, [r7, #116]	@ 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80047ac:	e00a      	b.n	80047c4 <HAL_RCC_ClockConfig+0x1fc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80047ae:	f7fc fe01 	bl	80013b4 <HAL_GetTick>
 80047b2:	4602      	mov	r2, r0
 80047b4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80047b6:	1ad3      	subs	r3, r2, r3
 80047b8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80047bc:	4293      	cmp	r3, r2
 80047be:	d901      	bls.n	80047c4 <HAL_RCC_ClockConfig+0x1fc>
      {
        return HAL_TIMEOUT;
 80047c0:	2303      	movs	r3, #3
 80047c2:	e062      	b.n	800488a <HAL_RCC_ClockConfig+0x2c2>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80047c4:	4b11      	ldr	r3, [pc, #68]	@ (800480c <HAL_RCC_ClockConfig+0x244>)
 80047c6:	685b      	ldr	r3, [r3, #4]
 80047c8:	f003 020c 	and.w	r2, r3, #12
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	685b      	ldr	r3, [r3, #4]
 80047d0:	009b      	lsls	r3, r3, #2
 80047d2:	429a      	cmp	r2, r3
 80047d4:	d1eb      	bne.n	80047ae <HAL_RCC_ClockConfig+0x1e6>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80047d6:	4b0c      	ldr	r3, [pc, #48]	@ (8004808 <HAL_RCC_ClockConfig+0x240>)
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	f003 0307 	and.w	r3, r3, #7
 80047de:	683a      	ldr	r2, [r7, #0]
 80047e0:	429a      	cmp	r2, r3
 80047e2:	d215      	bcs.n	8004810 <HAL_RCC_ClockConfig+0x248>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80047e4:	4b08      	ldr	r3, [pc, #32]	@ (8004808 <HAL_RCC_ClockConfig+0x240>)
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	f023 0207 	bic.w	r2, r3, #7
 80047ec:	4906      	ldr	r1, [pc, #24]	@ (8004808 <HAL_RCC_ClockConfig+0x240>)
 80047ee:	683b      	ldr	r3, [r7, #0]
 80047f0:	4313      	orrs	r3, r2
 80047f2:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80047f4:	4b04      	ldr	r3, [pc, #16]	@ (8004808 <HAL_RCC_ClockConfig+0x240>)
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	f003 0307 	and.w	r3, r3, #7
 80047fc:	683a      	ldr	r2, [r7, #0]
 80047fe:	429a      	cmp	r2, r3
 8004800:	d006      	beq.n	8004810 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8004802:	2301      	movs	r3, #1
 8004804:	e041      	b.n	800488a <HAL_RCC_ClockConfig+0x2c2>
 8004806:	bf00      	nop
 8004808:	40022000 	.word	0x40022000
 800480c:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	f003 0304 	and.w	r3, r3, #4
 8004818:	2b00      	cmp	r3, #0
 800481a:	d008      	beq.n	800482e <HAL_RCC_ClockConfig+0x266>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800481c:	4b1d      	ldr	r3, [pc, #116]	@ (8004894 <HAL_RCC_ClockConfig+0x2cc>)
 800481e:	685b      	ldr	r3, [r3, #4]
 8004820:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	68db      	ldr	r3, [r3, #12]
 8004828:	491a      	ldr	r1, [pc, #104]	@ (8004894 <HAL_RCC_ClockConfig+0x2cc>)
 800482a:	4313      	orrs	r3, r2
 800482c:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	f003 0308 	and.w	r3, r3, #8
 8004836:	2b00      	cmp	r3, #0
 8004838:	d009      	beq.n	800484e <HAL_RCC_ClockConfig+0x286>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800483a:	4b16      	ldr	r3, [pc, #88]	@ (8004894 <HAL_RCC_ClockConfig+0x2cc>)
 800483c:	685b      	ldr	r3, [r3, #4]
 800483e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	691b      	ldr	r3, [r3, #16]
 8004846:	00db      	lsls	r3, r3, #3
 8004848:	4912      	ldr	r1, [pc, #72]	@ (8004894 <HAL_RCC_ClockConfig+0x2cc>)
 800484a:	4313      	orrs	r3, r2
 800484c:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800484e:	f000 f829 	bl	80048a4 <HAL_RCC_GetSysClockFreq>
 8004852:	4601      	mov	r1, r0
 8004854:	4b0f      	ldr	r3, [pc, #60]	@ (8004894 <HAL_RCC_ClockConfig+0x2cc>)
 8004856:	685b      	ldr	r3, [r3, #4]
 8004858:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800485c:	22f0      	movs	r2, #240	@ 0xf0
 800485e:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004860:	693a      	ldr	r2, [r7, #16]
 8004862:	fa92 f2a2 	rbit	r2, r2
 8004866:	60fa      	str	r2, [r7, #12]
  return result;
 8004868:	68fa      	ldr	r2, [r7, #12]
 800486a:	fab2 f282 	clz	r2, r2
 800486e:	b2d2      	uxtb	r2, r2
 8004870:	40d3      	lsrs	r3, r2
 8004872:	4a09      	ldr	r2, [pc, #36]	@ (8004898 <HAL_RCC_ClockConfig+0x2d0>)
 8004874:	5cd3      	ldrb	r3, [r2, r3]
 8004876:	fa21 f303 	lsr.w	r3, r1, r3
 800487a:	4a08      	ldr	r2, [pc, #32]	@ (800489c <HAL_RCC_ClockConfig+0x2d4>)
 800487c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 800487e:	4b08      	ldr	r3, [pc, #32]	@ (80048a0 <HAL_RCC_ClockConfig+0x2d8>)
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	4618      	mov	r0, r3
 8004884:	f7fc fd52 	bl	800132c <HAL_InitTick>
  
  return HAL_OK;
 8004888:	2300      	movs	r3, #0
}
 800488a:	4618      	mov	r0, r3
 800488c:	3778      	adds	r7, #120	@ 0x78
 800488e:	46bd      	mov	sp, r7
 8004890:	bd80      	pop	{r7, pc}
 8004892:	bf00      	nop
 8004894:	40021000 	.word	0x40021000
 8004898:	080067f4 	.word	0x080067f4
 800489c:	20000040 	.word	0x20000040
 80048a0:	20000044 	.word	0x20000044

080048a4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80048a4:	b480      	push	{r7}
 80048a6:	b087      	sub	sp, #28
 80048a8:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80048aa:	2300      	movs	r3, #0
 80048ac:	60fb      	str	r3, [r7, #12]
 80048ae:	2300      	movs	r3, #0
 80048b0:	60bb      	str	r3, [r7, #8]
 80048b2:	2300      	movs	r3, #0
 80048b4:	617b      	str	r3, [r7, #20]
 80048b6:	2300      	movs	r3, #0
 80048b8:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80048ba:	2300      	movs	r3, #0
 80048bc:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 80048be:	4b1e      	ldr	r3, [pc, #120]	@ (8004938 <HAL_RCC_GetSysClockFreq+0x94>)
 80048c0:	685b      	ldr	r3, [r3, #4]
 80048c2:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	f003 030c 	and.w	r3, r3, #12
 80048ca:	2b04      	cmp	r3, #4
 80048cc:	d002      	beq.n	80048d4 <HAL_RCC_GetSysClockFreq+0x30>
 80048ce:	2b08      	cmp	r3, #8
 80048d0:	d003      	beq.n	80048da <HAL_RCC_GetSysClockFreq+0x36>
 80048d2:	e026      	b.n	8004922 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80048d4:	4b19      	ldr	r3, [pc, #100]	@ (800493c <HAL_RCC_GetSysClockFreq+0x98>)
 80048d6:	613b      	str	r3, [r7, #16]
      break;
 80048d8:	e026      	b.n	8004928 <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	0c9b      	lsrs	r3, r3, #18
 80048de:	f003 030f 	and.w	r3, r3, #15
 80048e2:	4a17      	ldr	r2, [pc, #92]	@ (8004940 <HAL_RCC_GetSysClockFreq+0x9c>)
 80048e4:	5cd3      	ldrb	r3, [r2, r3]
 80048e6:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_Pos];
 80048e8:	4b13      	ldr	r3, [pc, #76]	@ (8004938 <HAL_RCC_GetSysClockFreq+0x94>)
 80048ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80048ec:	f003 030f 	and.w	r3, r3, #15
 80048f0:	4a14      	ldr	r2, [pc, #80]	@ (8004944 <HAL_RCC_GetSysClockFreq+0xa0>)
 80048f2:	5cd3      	ldrb	r3, [r2, r3]
 80048f4:	60bb      	str	r3, [r7, #8]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d008      	beq.n	8004912 <HAL_RCC_GetSysClockFreq+0x6e>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8004900:	4a0e      	ldr	r2, [pc, #56]	@ (800493c <HAL_RCC_GetSysClockFreq+0x98>)
 8004902:	68bb      	ldr	r3, [r7, #8]
 8004904:	fbb2 f2f3 	udiv	r2, r2, r3
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	fb02 f303 	mul.w	r3, r2, r3
 800490e:	617b      	str	r3, [r7, #20]
 8004910:	e004      	b.n	800491c <HAL_RCC_GetSysClockFreq+0x78>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	4a0c      	ldr	r2, [pc, #48]	@ (8004948 <HAL_RCC_GetSysClockFreq+0xa4>)
 8004916:	fb02 f303 	mul.w	r3, r2, r3
 800491a:	617b      	str	r3, [r7, #20]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 800491c:	697b      	ldr	r3, [r7, #20]
 800491e:	613b      	str	r3, [r7, #16]
      break;
 8004920:	e002      	b.n	8004928 <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004922:	4b06      	ldr	r3, [pc, #24]	@ (800493c <HAL_RCC_GetSysClockFreq+0x98>)
 8004924:	613b      	str	r3, [r7, #16]
      break;
 8004926:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004928:	693b      	ldr	r3, [r7, #16]
}
 800492a:	4618      	mov	r0, r3
 800492c:	371c      	adds	r7, #28
 800492e:	46bd      	mov	sp, r7
 8004930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004934:	4770      	bx	lr
 8004936:	bf00      	nop
 8004938:	40021000 	.word	0x40021000
 800493c:	007a1200 	.word	0x007a1200
 8004940:	08006804 	.word	0x08006804
 8004944:	08006814 	.word	0x08006814
 8004948:	003d0900 	.word	0x003d0900

0800494c <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800494c:	b580      	push	{r7, lr}
 800494e:	b092      	sub	sp, #72	@ 0x48
 8004950:	af00      	add	r7, sp, #0
 8004952:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004954:	2300      	movs	r3, #0
 8004956:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t temp_reg = 0U;
 8004958:	2300      	movs	r3, #0
 800495a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  FlagStatus       pwrclkchanged = RESET;
 800495c:	2300      	movs	r3, #0
 800495e:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800496a:	2b00      	cmp	r3, #0
 800496c:	f000 80d2 	beq.w	8004b14 <HAL_RCCEx_PeriphCLKConfig+0x1c8>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004970:	4b4d      	ldr	r3, [pc, #308]	@ (8004aa8 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8004972:	69db      	ldr	r3, [r3, #28]
 8004974:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004978:	2b00      	cmp	r3, #0
 800497a:	d10e      	bne.n	800499a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800497c:	4b4a      	ldr	r3, [pc, #296]	@ (8004aa8 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 800497e:	69db      	ldr	r3, [r3, #28]
 8004980:	4a49      	ldr	r2, [pc, #292]	@ (8004aa8 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8004982:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004986:	61d3      	str	r3, [r2, #28]
 8004988:	4b47      	ldr	r3, [pc, #284]	@ (8004aa8 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 800498a:	69db      	ldr	r3, [r3, #28]
 800498c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004990:	60bb      	str	r3, [r7, #8]
 8004992:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004994:	2301      	movs	r3, #1
 8004996:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800499a:	4b44      	ldr	r3, [pc, #272]	@ (8004aac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d118      	bne.n	80049d8 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80049a6:	4b41      	ldr	r3, [pc, #260]	@ (8004aac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	4a40      	ldr	r2, [pc, #256]	@ (8004aac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80049ac:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80049b0:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80049b2:	f7fc fcff 	bl	80013b4 <HAL_GetTick>
 80049b6:	6438      	str	r0, [r7, #64]	@ 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80049b8:	e008      	b.n	80049cc <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80049ba:	f7fc fcfb 	bl	80013b4 <HAL_GetTick>
 80049be:	4602      	mov	r2, r0
 80049c0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80049c2:	1ad3      	subs	r3, r2, r3
 80049c4:	2b64      	cmp	r3, #100	@ 0x64
 80049c6:	d901      	bls.n	80049cc <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 80049c8:	2303      	movs	r3, #3
 80049ca:	e167      	b.n	8004c9c <HAL_RCCEx_PeriphCLKConfig+0x350>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80049cc:	4b37      	ldr	r3, [pc, #220]	@ (8004aac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d0f0      	beq.n	80049ba <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80049d8:	4b33      	ldr	r3, [pc, #204]	@ (8004aa8 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 80049da:	6a1b      	ldr	r3, [r3, #32]
 80049dc:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80049e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80049e2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	f000 8082 	beq.w	8004aee <HAL_RCCEx_PeriphCLKConfig+0x1a2>
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	685b      	ldr	r3, [r3, #4]
 80049ee:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80049f2:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80049f4:	429a      	cmp	r2, r3
 80049f6:	d07a      	beq.n	8004aee <HAL_RCCEx_PeriphCLKConfig+0x1a2>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80049f8:	4b2b      	ldr	r3, [pc, #172]	@ (8004aa8 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 80049fa:	6a1b      	ldr	r3, [r3, #32]
 80049fc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004a00:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004a02:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8004a06:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a08:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a0a:	fa93 f3a3 	rbit	r3, r3
 8004a0e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8004a10:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004a12:	fab3 f383 	clz	r3, r3
 8004a16:	b2db      	uxtb	r3, r3
 8004a18:	461a      	mov	r2, r3
 8004a1a:	4b25      	ldr	r3, [pc, #148]	@ (8004ab0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004a1c:	4413      	add	r3, r2
 8004a1e:	009b      	lsls	r3, r3, #2
 8004a20:	461a      	mov	r2, r3
 8004a22:	2301      	movs	r3, #1
 8004a24:	6013      	str	r3, [r2, #0]
 8004a26:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8004a2a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a2c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004a2e:	fa93 f3a3 	rbit	r3, r3
 8004a32:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8004a34:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004a36:	fab3 f383 	clz	r3, r3
 8004a3a:	b2db      	uxtb	r3, r3
 8004a3c:	461a      	mov	r2, r3
 8004a3e:	4b1c      	ldr	r3, [pc, #112]	@ (8004ab0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004a40:	4413      	add	r3, r2
 8004a42:	009b      	lsls	r3, r3, #2
 8004a44:	461a      	mov	r2, r3
 8004a46:	2300      	movs	r3, #0
 8004a48:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8004a4a:	4a17      	ldr	r2, [pc, #92]	@ (8004aa8 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8004a4c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004a4e:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004a50:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004a52:	f003 0301 	and.w	r3, r3, #1
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d049      	beq.n	8004aee <HAL_RCCEx_PeriphCLKConfig+0x1a2>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a5a:	f7fc fcab 	bl	80013b4 <HAL_GetTick>
 8004a5e:	6438      	str	r0, [r7, #64]	@ 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004a60:	e00a      	b.n	8004a78 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004a62:	f7fc fca7 	bl	80013b4 <HAL_GetTick>
 8004a66:	4602      	mov	r2, r0
 8004a68:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004a6a:	1ad3      	subs	r3, r2, r3
 8004a6c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004a70:	4293      	cmp	r3, r2
 8004a72:	d901      	bls.n	8004a78 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8004a74:	2303      	movs	r3, #3
 8004a76:	e111      	b.n	8004c9c <HAL_RCCEx_PeriphCLKConfig+0x350>
 8004a78:	2302      	movs	r3, #2
 8004a7a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a7c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a7e:	fa93 f3a3 	rbit	r3, r3
 8004a82:	627b      	str	r3, [r7, #36]	@ 0x24
 8004a84:	2302      	movs	r3, #2
 8004a86:	623b      	str	r3, [r7, #32]
 8004a88:	6a3b      	ldr	r3, [r7, #32]
 8004a8a:	fa93 f3a3 	rbit	r3, r3
 8004a8e:	61fb      	str	r3, [r7, #28]
  return result;
 8004a90:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004a92:	fab3 f383 	clz	r3, r3
 8004a96:	b2db      	uxtb	r3, r3
 8004a98:	f023 035f 	bic.w	r3, r3, #95	@ 0x5f
 8004a9c:	b2db      	uxtb	r3, r3
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d108      	bne.n	8004ab4 <HAL_RCCEx_PeriphCLKConfig+0x168>
 8004aa2:	4b01      	ldr	r3, [pc, #4]	@ (8004aa8 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8004aa4:	6a1b      	ldr	r3, [r3, #32]
 8004aa6:	e00d      	b.n	8004ac4 <HAL_RCCEx_PeriphCLKConfig+0x178>
 8004aa8:	40021000 	.word	0x40021000
 8004aac:	40007000 	.word	0x40007000
 8004ab0:	10908100 	.word	0x10908100
 8004ab4:	2302      	movs	r3, #2
 8004ab6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ab8:	69bb      	ldr	r3, [r7, #24]
 8004aba:	fa93 f3a3 	rbit	r3, r3
 8004abe:	617b      	str	r3, [r7, #20]
 8004ac0:	4b78      	ldr	r3, [pc, #480]	@ (8004ca4 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004ac2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ac4:	2202      	movs	r2, #2
 8004ac6:	613a      	str	r2, [r7, #16]
 8004ac8:	693a      	ldr	r2, [r7, #16]
 8004aca:	fa92 f2a2 	rbit	r2, r2
 8004ace:	60fa      	str	r2, [r7, #12]
  return result;
 8004ad0:	68fa      	ldr	r2, [r7, #12]
 8004ad2:	fab2 f282 	clz	r2, r2
 8004ad6:	b2d2      	uxtb	r2, r2
 8004ad8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004adc:	b2d2      	uxtb	r2, r2
 8004ade:	f002 021f 	and.w	r2, r2, #31
 8004ae2:	2101      	movs	r1, #1
 8004ae4:	fa01 f202 	lsl.w	r2, r1, r2
 8004ae8:	4013      	ands	r3, r2
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d0b9      	beq.n	8004a62 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8004aee:	4b6d      	ldr	r3, [pc, #436]	@ (8004ca4 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004af0:	6a1b      	ldr	r3, [r3, #32]
 8004af2:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	685b      	ldr	r3, [r3, #4]
 8004afa:	496a      	ldr	r1, [pc, #424]	@ (8004ca4 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004afc:	4313      	orrs	r3, r2
 8004afe:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004b00:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8004b04:	2b01      	cmp	r3, #1
 8004b06:	d105      	bne.n	8004b14 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004b08:	4b66      	ldr	r3, [pc, #408]	@ (8004ca4 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004b0a:	69db      	ldr	r3, [r3, #28]
 8004b0c:	4a65      	ldr	r2, [pc, #404]	@ (8004ca4 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004b0e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004b12:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	f003 0301 	and.w	r3, r3, #1
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d008      	beq.n	8004b32 <HAL_RCCEx_PeriphCLKConfig+0x1e6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004b20:	4b60      	ldr	r3, [pc, #384]	@ (8004ca4 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004b22:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b24:	f023 0203 	bic.w	r2, r3, #3
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	689b      	ldr	r3, [r3, #8]
 8004b2c:	495d      	ldr	r1, [pc, #372]	@ (8004ca4 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004b2e:	4313      	orrs	r3, r2
 8004b30:	630b      	str	r3, [r1, #48]	@ 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	f003 0302 	and.w	r3, r3, #2
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d008      	beq.n	8004b50 <HAL_RCCEx_PeriphCLKConfig+0x204>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004b3e:	4b59      	ldr	r3, [pc, #356]	@ (8004ca4 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004b40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b42:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	68db      	ldr	r3, [r3, #12]
 8004b4a:	4956      	ldr	r1, [pc, #344]	@ (8004ca4 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004b4c:	4313      	orrs	r3, r2
 8004b4e:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	f003 0304 	and.w	r3, r3, #4
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d008      	beq.n	8004b6e <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004b5c:	4b51      	ldr	r3, [pc, #324]	@ (8004ca4 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004b5e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b60:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	691b      	ldr	r3, [r3, #16]
 8004b68:	494e      	ldr	r1, [pc, #312]	@ (8004ca4 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004b6a:	4313      	orrs	r3, r2
 8004b6c:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	f003 0320 	and.w	r3, r3, #32
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d008      	beq.n	8004b8c <HAL_RCCEx_PeriphCLKConfig+0x240>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004b7a:	4b4a      	ldr	r3, [pc, #296]	@ (8004ca4 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004b7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b7e:	f023 0210 	bic.w	r2, r3, #16
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	69db      	ldr	r3, [r3, #28]
 8004b86:	4947      	ldr	r1, [pc, #284]	@ (8004ca4 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004b88:	4313      	orrs	r3, r2
 8004b8a:	630b      	str	r3, [r1, #48]	@ 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d008      	beq.n	8004baa <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8004b98:	4b42      	ldr	r3, [pc, #264]	@ (8004ca4 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004b9a:	685b      	ldr	r3, [r3, #4]
 8004b9c:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ba4:	493f      	ldr	r1, [pc, #252]	@ (8004ca4 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004ba6:	4313      	orrs	r3, r2
 8004ba8:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d008      	beq.n	8004bc8 <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004bb6:	4b3b      	ldr	r3, [pc, #236]	@ (8004ca4 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004bb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004bba:	f023 0220 	bic.w	r2, r3, #32
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	6a1b      	ldr	r3, [r3, #32]
 8004bc2:	4938      	ldr	r1, [pc, #224]	@ (8004ca4 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004bc4:	4313      	orrs	r3, r2
 8004bc6:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	f003 0308 	and.w	r3, r3, #8
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d008      	beq.n	8004be6 <HAL_RCCEx_PeriphCLKConfig+0x29a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004bd4:	4b33      	ldr	r3, [pc, #204]	@ (8004ca4 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004bd6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004bd8:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	695b      	ldr	r3, [r3, #20]
 8004be0:	4930      	ldr	r1, [pc, #192]	@ (8004ca4 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004be2:	4313      	orrs	r3, r2
 8004be4:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	f003 0310 	and.w	r3, r3, #16
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d008      	beq.n	8004c04 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004bf2:	4b2c      	ldr	r3, [pc, #176]	@ (8004ca4 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004bf4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004bf6:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	699b      	ldr	r3, [r3, #24]
 8004bfe:	4929      	ldr	r1, [pc, #164]	@ (8004ca4 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004c00:	4313      	orrs	r3, r2
 8004c02:	630b      	str	r3, [r1, #48]	@ 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d008      	beq.n	8004c22 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004c10:	4b24      	ldr	r3, [pc, #144]	@ (8004ca4 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004c12:	685b      	ldr	r3, [r3, #4]
 8004c14:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c1c:	4921      	ldr	r1, [pc, #132]	@ (8004ca4 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004c1e:	4313      	orrs	r3, r2
 8004c20:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d008      	beq.n	8004c40 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8004c2e:	4b1d      	ldr	r3, [pc, #116]	@ (8004ca4 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004c30:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c32:	f423 72f8 	bic.w	r2, r3, #496	@ 0x1f0
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c3a:	491a      	ldr	r1, [pc, #104]	@ (8004ca4 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004c3c:	4313      	orrs	r3, r2
 8004c3e:	62cb      	str	r3, [r1, #44]	@ 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d008      	beq.n	8004c5e <HAL_RCCEx_PeriphCLKConfig+0x312>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8004c4c:	4b15      	ldr	r3, [pc, #84]	@ (8004ca4 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004c4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c50:	f423 5278 	bic.w	r2, r3, #15872	@ 0x3e00
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c58:	4912      	ldr	r1, [pc, #72]	@ (8004ca4 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004c5a:	4313      	orrs	r3, r2
 8004c5c:	62cb      	str	r3, [r1, #44]	@ 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d008      	beq.n	8004c7c <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8004c6a:	4b0e      	ldr	r3, [pc, #56]	@ (8004ca4 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004c6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c6e:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c76:	490b      	ldr	r1, [pc, #44]	@ (8004ca4 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004c78:	4313      	orrs	r3, r2
 8004c7a:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d008      	beq.n	8004c9a <HAL_RCCEx_PeriphCLKConfig+0x34e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8004c88:	4b06      	ldr	r3, [pc, #24]	@ (8004ca4 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004c8a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c8c:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004c94:	4903      	ldr	r1, [pc, #12]	@ (8004ca4 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004c96:	4313      	orrs	r3, r2
 8004c98:	630b      	str	r3, [r1, #48]	@ 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8004c9a:	2300      	movs	r3, #0
}
 8004c9c:	4618      	mov	r0, r3
 8004c9e:	3748      	adds	r7, #72	@ 0x48
 8004ca0:	46bd      	mov	sp, r7
 8004ca2:	bd80      	pop	{r7, pc}
 8004ca4:	40021000 	.word	0x40021000

08004ca8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004ca8:	b580      	push	{r7, lr}
 8004caa:	b082      	sub	sp, #8
 8004cac:	af00      	add	r7, sp, #0
 8004cae:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d101      	bne.n	8004cba <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004cb6:	2301      	movs	r3, #1
 8004cb8:	e049      	b.n	8004d4e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004cc0:	b2db      	uxtb	r3, r3
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d106      	bne.n	8004cd4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	2200      	movs	r2, #0
 8004cca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004cce:	6878      	ldr	r0, [r7, #4]
 8004cd0:	f7fc f9ac 	bl	800102c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	2202      	movs	r2, #2
 8004cd8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681a      	ldr	r2, [r3, #0]
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	3304      	adds	r3, #4
 8004ce4:	4619      	mov	r1, r3
 8004ce6:	4610      	mov	r0, r2
 8004ce8:	f000 ff18 	bl	8005b1c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	2201      	movs	r2, #1
 8004cf0:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	2201      	movs	r2, #1
 8004cf8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	2201      	movs	r2, #1
 8004d00:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	2201      	movs	r2, #1
 8004d08:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	2201      	movs	r2, #1
 8004d10:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	2201      	movs	r2, #1
 8004d18:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	2201      	movs	r2, #1
 8004d20:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	2201      	movs	r2, #1
 8004d28:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	2201      	movs	r2, #1
 8004d30:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	2201      	movs	r2, #1
 8004d38:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	2201      	movs	r2, #1
 8004d40:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	2201      	movs	r2, #1
 8004d48:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004d4c:	2300      	movs	r3, #0
}
 8004d4e:	4618      	mov	r0, r3
 8004d50:	3708      	adds	r7, #8
 8004d52:	46bd      	mov	sp, r7
 8004d54:	bd80      	pop	{r7, pc}

08004d56 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004d56:	b580      	push	{r7, lr}
 8004d58:	b082      	sub	sp, #8
 8004d5a:	af00      	add	r7, sp, #0
 8004d5c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d101      	bne.n	8004d68 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004d64:	2301      	movs	r3, #1
 8004d66:	e049      	b.n	8004dfc <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004d6e:	b2db      	uxtb	r3, r3
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d106      	bne.n	8004d82 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	2200      	movs	r2, #0
 8004d78:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004d7c:	6878      	ldr	r0, [r7, #4]
 8004d7e:	f7fc f9a1 	bl	80010c4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	2202      	movs	r2, #2
 8004d86:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681a      	ldr	r2, [r3, #0]
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	3304      	adds	r3, #4
 8004d92:	4619      	mov	r1, r3
 8004d94:	4610      	mov	r0, r2
 8004d96:	f000 fec1 	bl	8005b1c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	2201      	movs	r2, #1
 8004d9e:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	2201      	movs	r2, #1
 8004da6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	2201      	movs	r2, #1
 8004dae:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	2201      	movs	r2, #1
 8004db6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	2201      	movs	r2, #1
 8004dbe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	2201      	movs	r2, #1
 8004dc6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	2201      	movs	r2, #1
 8004dce:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	2201      	movs	r2, #1
 8004dd6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	2201      	movs	r2, #1
 8004dde:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	2201      	movs	r2, #1
 8004de6:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	2201      	movs	r2, #1
 8004dee:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	2201      	movs	r2, #1
 8004df6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004dfa:	2300      	movs	r3, #0
}
 8004dfc:	4618      	mov	r0, r3
 8004dfe:	3708      	adds	r7, #8
 8004e00:	46bd      	mov	sp, r7
 8004e02:	bd80      	pop	{r7, pc}

08004e04 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004e04:	b580      	push	{r7, lr}
 8004e06:	b084      	sub	sp, #16
 8004e08:	af00      	add	r7, sp, #0
 8004e0a:	6078      	str	r0, [r7, #4]
 8004e0c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004e0e:	683b      	ldr	r3, [r7, #0]
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d109      	bne.n	8004e28 <HAL_TIM_PWM_Start+0x24>
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004e1a:	b2db      	uxtb	r3, r3
 8004e1c:	2b01      	cmp	r3, #1
 8004e1e:	bf14      	ite	ne
 8004e20:	2301      	movne	r3, #1
 8004e22:	2300      	moveq	r3, #0
 8004e24:	b2db      	uxtb	r3, r3
 8004e26:	e03c      	b.n	8004ea2 <HAL_TIM_PWM_Start+0x9e>
 8004e28:	683b      	ldr	r3, [r7, #0]
 8004e2a:	2b04      	cmp	r3, #4
 8004e2c:	d109      	bne.n	8004e42 <HAL_TIM_PWM_Start+0x3e>
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8004e34:	b2db      	uxtb	r3, r3
 8004e36:	2b01      	cmp	r3, #1
 8004e38:	bf14      	ite	ne
 8004e3a:	2301      	movne	r3, #1
 8004e3c:	2300      	moveq	r3, #0
 8004e3e:	b2db      	uxtb	r3, r3
 8004e40:	e02f      	b.n	8004ea2 <HAL_TIM_PWM_Start+0x9e>
 8004e42:	683b      	ldr	r3, [r7, #0]
 8004e44:	2b08      	cmp	r3, #8
 8004e46:	d109      	bne.n	8004e5c <HAL_TIM_PWM_Start+0x58>
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004e4e:	b2db      	uxtb	r3, r3
 8004e50:	2b01      	cmp	r3, #1
 8004e52:	bf14      	ite	ne
 8004e54:	2301      	movne	r3, #1
 8004e56:	2300      	moveq	r3, #0
 8004e58:	b2db      	uxtb	r3, r3
 8004e5a:	e022      	b.n	8004ea2 <HAL_TIM_PWM_Start+0x9e>
 8004e5c:	683b      	ldr	r3, [r7, #0]
 8004e5e:	2b0c      	cmp	r3, #12
 8004e60:	d109      	bne.n	8004e76 <HAL_TIM_PWM_Start+0x72>
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004e68:	b2db      	uxtb	r3, r3
 8004e6a:	2b01      	cmp	r3, #1
 8004e6c:	bf14      	ite	ne
 8004e6e:	2301      	movne	r3, #1
 8004e70:	2300      	moveq	r3, #0
 8004e72:	b2db      	uxtb	r3, r3
 8004e74:	e015      	b.n	8004ea2 <HAL_TIM_PWM_Start+0x9e>
 8004e76:	683b      	ldr	r3, [r7, #0]
 8004e78:	2b10      	cmp	r3, #16
 8004e7a:	d109      	bne.n	8004e90 <HAL_TIM_PWM_Start+0x8c>
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004e82:	b2db      	uxtb	r3, r3
 8004e84:	2b01      	cmp	r3, #1
 8004e86:	bf14      	ite	ne
 8004e88:	2301      	movne	r3, #1
 8004e8a:	2300      	moveq	r3, #0
 8004e8c:	b2db      	uxtb	r3, r3
 8004e8e:	e008      	b.n	8004ea2 <HAL_TIM_PWM_Start+0x9e>
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8004e96:	b2db      	uxtb	r3, r3
 8004e98:	2b01      	cmp	r3, #1
 8004e9a:	bf14      	ite	ne
 8004e9c:	2301      	movne	r3, #1
 8004e9e:	2300      	moveq	r3, #0
 8004ea0:	b2db      	uxtb	r3, r3
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d001      	beq.n	8004eaa <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8004ea6:	2301      	movs	r3, #1
 8004ea8:	e097      	b.n	8004fda <HAL_TIM_PWM_Start+0x1d6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004eaa:	683b      	ldr	r3, [r7, #0]
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d104      	bne.n	8004eba <HAL_TIM_PWM_Start+0xb6>
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	2202      	movs	r2, #2
 8004eb4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004eb8:	e023      	b.n	8004f02 <HAL_TIM_PWM_Start+0xfe>
 8004eba:	683b      	ldr	r3, [r7, #0]
 8004ebc:	2b04      	cmp	r3, #4
 8004ebe:	d104      	bne.n	8004eca <HAL_TIM_PWM_Start+0xc6>
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	2202      	movs	r2, #2
 8004ec4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004ec8:	e01b      	b.n	8004f02 <HAL_TIM_PWM_Start+0xfe>
 8004eca:	683b      	ldr	r3, [r7, #0]
 8004ecc:	2b08      	cmp	r3, #8
 8004ece:	d104      	bne.n	8004eda <HAL_TIM_PWM_Start+0xd6>
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	2202      	movs	r2, #2
 8004ed4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004ed8:	e013      	b.n	8004f02 <HAL_TIM_PWM_Start+0xfe>
 8004eda:	683b      	ldr	r3, [r7, #0]
 8004edc:	2b0c      	cmp	r3, #12
 8004ede:	d104      	bne.n	8004eea <HAL_TIM_PWM_Start+0xe6>
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	2202      	movs	r2, #2
 8004ee4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004ee8:	e00b      	b.n	8004f02 <HAL_TIM_PWM_Start+0xfe>
 8004eea:	683b      	ldr	r3, [r7, #0]
 8004eec:	2b10      	cmp	r3, #16
 8004eee:	d104      	bne.n	8004efa <HAL_TIM_PWM_Start+0xf6>
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	2202      	movs	r2, #2
 8004ef4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004ef8:	e003      	b.n	8004f02 <HAL_TIM_PWM_Start+0xfe>
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	2202      	movs	r2, #2
 8004efe:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	2201      	movs	r2, #1
 8004f08:	6839      	ldr	r1, [r7, #0]
 8004f0a:	4618      	mov	r0, r3
 8004f0c:	f001 fb30 	bl	8006570 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	4a33      	ldr	r2, [pc, #204]	@ (8004fe4 <HAL_TIM_PWM_Start+0x1e0>)
 8004f16:	4293      	cmp	r3, r2
 8004f18:	d013      	beq.n	8004f42 <HAL_TIM_PWM_Start+0x13e>
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	4a32      	ldr	r2, [pc, #200]	@ (8004fe8 <HAL_TIM_PWM_Start+0x1e4>)
 8004f20:	4293      	cmp	r3, r2
 8004f22:	d00e      	beq.n	8004f42 <HAL_TIM_PWM_Start+0x13e>
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	4a30      	ldr	r2, [pc, #192]	@ (8004fec <HAL_TIM_PWM_Start+0x1e8>)
 8004f2a:	4293      	cmp	r3, r2
 8004f2c:	d009      	beq.n	8004f42 <HAL_TIM_PWM_Start+0x13e>
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	4a2f      	ldr	r2, [pc, #188]	@ (8004ff0 <HAL_TIM_PWM_Start+0x1ec>)
 8004f34:	4293      	cmp	r3, r2
 8004f36:	d004      	beq.n	8004f42 <HAL_TIM_PWM_Start+0x13e>
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	4a2d      	ldr	r2, [pc, #180]	@ (8004ff4 <HAL_TIM_PWM_Start+0x1f0>)
 8004f3e:	4293      	cmp	r3, r2
 8004f40:	d101      	bne.n	8004f46 <HAL_TIM_PWM_Start+0x142>
 8004f42:	2301      	movs	r3, #1
 8004f44:	e000      	b.n	8004f48 <HAL_TIM_PWM_Start+0x144>
 8004f46:	2300      	movs	r3, #0
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d007      	beq.n	8004f5c <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004f5a:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	4a20      	ldr	r2, [pc, #128]	@ (8004fe4 <HAL_TIM_PWM_Start+0x1e0>)
 8004f62:	4293      	cmp	r3, r2
 8004f64:	d018      	beq.n	8004f98 <HAL_TIM_PWM_Start+0x194>
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004f6e:	d013      	beq.n	8004f98 <HAL_TIM_PWM_Start+0x194>
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	4a20      	ldr	r2, [pc, #128]	@ (8004ff8 <HAL_TIM_PWM_Start+0x1f4>)
 8004f76:	4293      	cmp	r3, r2
 8004f78:	d00e      	beq.n	8004f98 <HAL_TIM_PWM_Start+0x194>
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	4a1f      	ldr	r2, [pc, #124]	@ (8004ffc <HAL_TIM_PWM_Start+0x1f8>)
 8004f80:	4293      	cmp	r3, r2
 8004f82:	d009      	beq.n	8004f98 <HAL_TIM_PWM_Start+0x194>
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	4a17      	ldr	r2, [pc, #92]	@ (8004fe8 <HAL_TIM_PWM_Start+0x1e4>)
 8004f8a:	4293      	cmp	r3, r2
 8004f8c:	d004      	beq.n	8004f98 <HAL_TIM_PWM_Start+0x194>
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	4a16      	ldr	r2, [pc, #88]	@ (8004fec <HAL_TIM_PWM_Start+0x1e8>)
 8004f94:	4293      	cmp	r3, r2
 8004f96:	d115      	bne.n	8004fc4 <HAL_TIM_PWM_Start+0x1c0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	689a      	ldr	r2, [r3, #8]
 8004f9e:	4b18      	ldr	r3, [pc, #96]	@ (8005000 <HAL_TIM_PWM_Start+0x1fc>)
 8004fa0:	4013      	ands	r3, r2
 8004fa2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	2b06      	cmp	r3, #6
 8004fa8:	d015      	beq.n	8004fd6 <HAL_TIM_PWM_Start+0x1d2>
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004fb0:	d011      	beq.n	8004fd6 <HAL_TIM_PWM_Start+0x1d2>
    {
      __HAL_TIM_ENABLE(htim);
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	681a      	ldr	r2, [r3, #0]
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	f042 0201 	orr.w	r2, r2, #1
 8004fc0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004fc2:	e008      	b.n	8004fd6 <HAL_TIM_PWM_Start+0x1d2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	681a      	ldr	r2, [r3, #0]
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	f042 0201 	orr.w	r2, r2, #1
 8004fd2:	601a      	str	r2, [r3, #0]
 8004fd4:	e000      	b.n	8004fd8 <HAL_TIM_PWM_Start+0x1d4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004fd6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004fd8:	2300      	movs	r3, #0
}
 8004fda:	4618      	mov	r0, r3
 8004fdc:	3710      	adds	r7, #16
 8004fde:	46bd      	mov	sp, r7
 8004fe0:	bd80      	pop	{r7, pc}
 8004fe2:	bf00      	nop
 8004fe4:	40012c00 	.word	0x40012c00
 8004fe8:	40013400 	.word	0x40013400
 8004fec:	40014000 	.word	0x40014000
 8004ff0:	40014400 	.word	0x40014400
 8004ff4:	40014800 	.word	0x40014800
 8004ff8:	40000400 	.word	0x40000400
 8004ffc:	40000800 	.word	0x40000800
 8005000:	00010007 	.word	0x00010007

08005004 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8005004:	b580      	push	{r7, lr}
 8005006:	b082      	sub	sp, #8
 8005008:	af00      	add	r7, sp, #0
 800500a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	2b00      	cmp	r3, #0
 8005010:	d101      	bne.n	8005016 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8005012:	2301      	movs	r3, #1
 8005014:	e049      	b.n	80050aa <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800501c:	b2db      	uxtb	r3, r3
 800501e:	2b00      	cmp	r3, #0
 8005020:	d106      	bne.n	8005030 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	2200      	movs	r2, #0
 8005026:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 800502a:	6878      	ldr	r0, [r7, #4]
 800502c:	f000 f841 	bl	80050b2 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	2202      	movs	r2, #2
 8005034:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	681a      	ldr	r2, [r3, #0]
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	3304      	adds	r3, #4
 8005040:	4619      	mov	r1, r3
 8005042:	4610      	mov	r0, r2
 8005044:	f000 fd6a 	bl	8005b1c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	2201      	movs	r2, #1
 800504c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	2201      	movs	r2, #1
 8005054:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	2201      	movs	r2, #1
 800505c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	2201      	movs	r2, #1
 8005064:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	2201      	movs	r2, #1
 800506c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	2201      	movs	r2, #1
 8005074:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	2201      	movs	r2, #1
 800507c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	2201      	movs	r2, #1
 8005084:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	2201      	movs	r2, #1
 800508c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	2201      	movs	r2, #1
 8005094:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	2201      	movs	r2, #1
 800509c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	2201      	movs	r2, #1
 80050a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80050a8:	2300      	movs	r3, #0
}
 80050aa:	4618      	mov	r0, r3
 80050ac:	3708      	adds	r7, #8
 80050ae:	46bd      	mov	sp, r7
 80050b0:	bd80      	pop	{r7, pc}

080050b2 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 80050b2:	b480      	push	{r7}
 80050b4:	b083      	sub	sp, #12
 80050b6:	af00      	add	r7, sp, #0
 80050b8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 80050ba:	bf00      	nop
 80050bc:	370c      	adds	r7, #12
 80050be:	46bd      	mov	sp, r7
 80050c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050c4:	4770      	bx	lr
	...

080050c8 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80050c8:	b580      	push	{r7, lr}
 80050ca:	b084      	sub	sp, #16
 80050cc:	af00      	add	r7, sp, #0
 80050ce:	6078      	str	r0, [r7, #4]
 80050d0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80050d2:	2300      	movs	r3, #0
 80050d4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 80050d6:	683b      	ldr	r3, [r7, #0]
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d104      	bne.n	80050e6 <HAL_TIM_IC_Start_IT+0x1e>
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80050e2:	b2db      	uxtb	r3, r3
 80050e4:	e023      	b.n	800512e <HAL_TIM_IC_Start_IT+0x66>
 80050e6:	683b      	ldr	r3, [r7, #0]
 80050e8:	2b04      	cmp	r3, #4
 80050ea:	d104      	bne.n	80050f6 <HAL_TIM_IC_Start_IT+0x2e>
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80050f2:	b2db      	uxtb	r3, r3
 80050f4:	e01b      	b.n	800512e <HAL_TIM_IC_Start_IT+0x66>
 80050f6:	683b      	ldr	r3, [r7, #0]
 80050f8:	2b08      	cmp	r3, #8
 80050fa:	d104      	bne.n	8005106 <HAL_TIM_IC_Start_IT+0x3e>
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005102:	b2db      	uxtb	r3, r3
 8005104:	e013      	b.n	800512e <HAL_TIM_IC_Start_IT+0x66>
 8005106:	683b      	ldr	r3, [r7, #0]
 8005108:	2b0c      	cmp	r3, #12
 800510a:	d104      	bne.n	8005116 <HAL_TIM_IC_Start_IT+0x4e>
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005112:	b2db      	uxtb	r3, r3
 8005114:	e00b      	b.n	800512e <HAL_TIM_IC_Start_IT+0x66>
 8005116:	683b      	ldr	r3, [r7, #0]
 8005118:	2b10      	cmp	r3, #16
 800511a:	d104      	bne.n	8005126 <HAL_TIM_IC_Start_IT+0x5e>
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005122:	b2db      	uxtb	r3, r3
 8005124:	e003      	b.n	800512e <HAL_TIM_IC_Start_IT+0x66>
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800512c:	b2db      	uxtb	r3, r3
 800512e:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8005130:	683b      	ldr	r3, [r7, #0]
 8005132:	2b00      	cmp	r3, #0
 8005134:	d104      	bne.n	8005140 <HAL_TIM_IC_Start_IT+0x78>
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800513c:	b2db      	uxtb	r3, r3
 800513e:	e013      	b.n	8005168 <HAL_TIM_IC_Start_IT+0xa0>
 8005140:	683b      	ldr	r3, [r7, #0]
 8005142:	2b04      	cmp	r3, #4
 8005144:	d104      	bne.n	8005150 <HAL_TIM_IC_Start_IT+0x88>
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800514c:	b2db      	uxtb	r3, r3
 800514e:	e00b      	b.n	8005168 <HAL_TIM_IC_Start_IT+0xa0>
 8005150:	683b      	ldr	r3, [r7, #0]
 8005152:	2b08      	cmp	r3, #8
 8005154:	d104      	bne.n	8005160 <HAL_TIM_IC_Start_IT+0x98>
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 800515c:	b2db      	uxtb	r3, r3
 800515e:	e003      	b.n	8005168 <HAL_TIM_IC_Start_IT+0xa0>
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	f893 3047 	ldrb.w	r3, [r3, #71]	@ 0x47
 8005166:	b2db      	uxtb	r3, r3
 8005168:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 800516a:	7bbb      	ldrb	r3, [r7, #14]
 800516c:	2b01      	cmp	r3, #1
 800516e:	d102      	bne.n	8005176 <HAL_TIM_IC_Start_IT+0xae>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8005170:	7b7b      	ldrb	r3, [r7, #13]
 8005172:	2b01      	cmp	r3, #1
 8005174:	d001      	beq.n	800517a <HAL_TIM_IC_Start_IT+0xb2>
  {
    return HAL_ERROR;
 8005176:	2301      	movs	r3, #1
 8005178:	e0d8      	b.n	800532c <HAL_TIM_IC_Start_IT+0x264>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800517a:	683b      	ldr	r3, [r7, #0]
 800517c:	2b00      	cmp	r3, #0
 800517e:	d104      	bne.n	800518a <HAL_TIM_IC_Start_IT+0xc2>
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	2202      	movs	r2, #2
 8005184:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005188:	e023      	b.n	80051d2 <HAL_TIM_IC_Start_IT+0x10a>
 800518a:	683b      	ldr	r3, [r7, #0]
 800518c:	2b04      	cmp	r3, #4
 800518e:	d104      	bne.n	800519a <HAL_TIM_IC_Start_IT+0xd2>
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	2202      	movs	r2, #2
 8005194:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005198:	e01b      	b.n	80051d2 <HAL_TIM_IC_Start_IT+0x10a>
 800519a:	683b      	ldr	r3, [r7, #0]
 800519c:	2b08      	cmp	r3, #8
 800519e:	d104      	bne.n	80051aa <HAL_TIM_IC_Start_IT+0xe2>
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	2202      	movs	r2, #2
 80051a4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80051a8:	e013      	b.n	80051d2 <HAL_TIM_IC_Start_IT+0x10a>
 80051aa:	683b      	ldr	r3, [r7, #0]
 80051ac:	2b0c      	cmp	r3, #12
 80051ae:	d104      	bne.n	80051ba <HAL_TIM_IC_Start_IT+0xf2>
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	2202      	movs	r2, #2
 80051b4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80051b8:	e00b      	b.n	80051d2 <HAL_TIM_IC_Start_IT+0x10a>
 80051ba:	683b      	ldr	r3, [r7, #0]
 80051bc:	2b10      	cmp	r3, #16
 80051be:	d104      	bne.n	80051ca <HAL_TIM_IC_Start_IT+0x102>
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	2202      	movs	r2, #2
 80051c4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80051c8:	e003      	b.n	80051d2 <HAL_TIM_IC_Start_IT+0x10a>
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	2202      	movs	r2, #2
 80051ce:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80051d2:	683b      	ldr	r3, [r7, #0]
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d104      	bne.n	80051e2 <HAL_TIM_IC_Start_IT+0x11a>
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	2202      	movs	r2, #2
 80051dc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80051e0:	e013      	b.n	800520a <HAL_TIM_IC_Start_IT+0x142>
 80051e2:	683b      	ldr	r3, [r7, #0]
 80051e4:	2b04      	cmp	r3, #4
 80051e6:	d104      	bne.n	80051f2 <HAL_TIM_IC_Start_IT+0x12a>
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	2202      	movs	r2, #2
 80051ec:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80051f0:	e00b      	b.n	800520a <HAL_TIM_IC_Start_IT+0x142>
 80051f2:	683b      	ldr	r3, [r7, #0]
 80051f4:	2b08      	cmp	r3, #8
 80051f6:	d104      	bne.n	8005202 <HAL_TIM_IC_Start_IT+0x13a>
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	2202      	movs	r2, #2
 80051fc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005200:	e003      	b.n	800520a <HAL_TIM_IC_Start_IT+0x142>
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	2202      	movs	r2, #2
 8005206:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  switch (Channel)
 800520a:	683b      	ldr	r3, [r7, #0]
 800520c:	2b0c      	cmp	r3, #12
 800520e:	d841      	bhi.n	8005294 <HAL_TIM_IC_Start_IT+0x1cc>
 8005210:	a201      	add	r2, pc, #4	@ (adr r2, 8005218 <HAL_TIM_IC_Start_IT+0x150>)
 8005212:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005216:	bf00      	nop
 8005218:	0800524d 	.word	0x0800524d
 800521c:	08005295 	.word	0x08005295
 8005220:	08005295 	.word	0x08005295
 8005224:	08005295 	.word	0x08005295
 8005228:	0800525f 	.word	0x0800525f
 800522c:	08005295 	.word	0x08005295
 8005230:	08005295 	.word	0x08005295
 8005234:	08005295 	.word	0x08005295
 8005238:	08005271 	.word	0x08005271
 800523c:	08005295 	.word	0x08005295
 8005240:	08005295 	.word	0x08005295
 8005244:	08005295 	.word	0x08005295
 8005248:	08005283 	.word	0x08005283
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	68da      	ldr	r2, [r3, #12]
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	f042 0202 	orr.w	r2, r2, #2
 800525a:	60da      	str	r2, [r3, #12]
      break;
 800525c:	e01d      	b.n	800529a <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	68da      	ldr	r2, [r3, #12]
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	f042 0204 	orr.w	r2, r2, #4
 800526c:	60da      	str	r2, [r3, #12]
      break;
 800526e:	e014      	b.n	800529a <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	68da      	ldr	r2, [r3, #12]
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	f042 0208 	orr.w	r2, r2, #8
 800527e:	60da      	str	r2, [r3, #12]
      break;
 8005280:	e00b      	b.n	800529a <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	68da      	ldr	r2, [r3, #12]
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	f042 0210 	orr.w	r2, r2, #16
 8005290:	60da      	str	r2, [r3, #12]
      break;
 8005292:	e002      	b.n	800529a <HAL_TIM_IC_Start_IT+0x1d2>
    }

    default:
      status = HAL_ERROR;
 8005294:	2301      	movs	r3, #1
 8005296:	73fb      	strb	r3, [r7, #15]
      break;
 8005298:	bf00      	nop
  }

  if (status == HAL_OK)
 800529a:	7bfb      	ldrb	r3, [r7, #15]
 800529c:	2b00      	cmp	r3, #0
 800529e:	d144      	bne.n	800532a <HAL_TIM_IC_Start_IT+0x262>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	2201      	movs	r2, #1
 80052a6:	6839      	ldr	r1, [r7, #0]
 80052a8:	4618      	mov	r0, r3
 80052aa:	f001 f961 	bl	8006570 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	4a20      	ldr	r2, [pc, #128]	@ (8005334 <HAL_TIM_IC_Start_IT+0x26c>)
 80052b4:	4293      	cmp	r3, r2
 80052b6:	d018      	beq.n	80052ea <HAL_TIM_IC_Start_IT+0x222>
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80052c0:	d013      	beq.n	80052ea <HAL_TIM_IC_Start_IT+0x222>
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	4a1c      	ldr	r2, [pc, #112]	@ (8005338 <HAL_TIM_IC_Start_IT+0x270>)
 80052c8:	4293      	cmp	r3, r2
 80052ca:	d00e      	beq.n	80052ea <HAL_TIM_IC_Start_IT+0x222>
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	4a1a      	ldr	r2, [pc, #104]	@ (800533c <HAL_TIM_IC_Start_IT+0x274>)
 80052d2:	4293      	cmp	r3, r2
 80052d4:	d009      	beq.n	80052ea <HAL_TIM_IC_Start_IT+0x222>
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	4a19      	ldr	r2, [pc, #100]	@ (8005340 <HAL_TIM_IC_Start_IT+0x278>)
 80052dc:	4293      	cmp	r3, r2
 80052de:	d004      	beq.n	80052ea <HAL_TIM_IC_Start_IT+0x222>
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	4a17      	ldr	r2, [pc, #92]	@ (8005344 <HAL_TIM_IC_Start_IT+0x27c>)
 80052e6:	4293      	cmp	r3, r2
 80052e8:	d115      	bne.n	8005316 <HAL_TIM_IC_Start_IT+0x24e>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	689a      	ldr	r2, [r3, #8]
 80052f0:	4b15      	ldr	r3, [pc, #84]	@ (8005348 <HAL_TIM_IC_Start_IT+0x280>)
 80052f2:	4013      	ands	r3, r2
 80052f4:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80052f6:	68bb      	ldr	r3, [r7, #8]
 80052f8:	2b06      	cmp	r3, #6
 80052fa:	d015      	beq.n	8005328 <HAL_TIM_IC_Start_IT+0x260>
 80052fc:	68bb      	ldr	r3, [r7, #8]
 80052fe:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005302:	d011      	beq.n	8005328 <HAL_TIM_IC_Start_IT+0x260>
      {
        __HAL_TIM_ENABLE(htim);
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	681a      	ldr	r2, [r3, #0]
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	f042 0201 	orr.w	r2, r2, #1
 8005312:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005314:	e008      	b.n	8005328 <HAL_TIM_IC_Start_IT+0x260>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	681a      	ldr	r2, [r3, #0]
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	f042 0201 	orr.w	r2, r2, #1
 8005324:	601a      	str	r2, [r3, #0]
 8005326:	e000      	b.n	800532a <HAL_TIM_IC_Start_IT+0x262>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005328:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 800532a:	7bfb      	ldrb	r3, [r7, #15]
}
 800532c:	4618      	mov	r0, r3
 800532e:	3710      	adds	r7, #16
 8005330:	46bd      	mov	sp, r7
 8005332:	bd80      	pop	{r7, pc}
 8005334:	40012c00 	.word	0x40012c00
 8005338:	40000400 	.word	0x40000400
 800533c:	40000800 	.word	0x40000800
 8005340:	40013400 	.word	0x40013400
 8005344:	40014000 	.word	0x40014000
 8005348:	00010007 	.word	0x00010007

0800534c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800534c:	b580      	push	{r7, lr}
 800534e:	b084      	sub	sp, #16
 8005350:	af00      	add	r7, sp, #0
 8005352:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	68db      	ldr	r3, [r3, #12]
 800535a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	691b      	ldr	r3, [r3, #16]
 8005362:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005364:	68bb      	ldr	r3, [r7, #8]
 8005366:	f003 0302 	and.w	r3, r3, #2
 800536a:	2b00      	cmp	r3, #0
 800536c:	d020      	beq.n	80053b0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	f003 0302 	and.w	r3, r3, #2
 8005374:	2b00      	cmp	r3, #0
 8005376:	d01b      	beq.n	80053b0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	f06f 0202 	mvn.w	r2, #2
 8005380:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	2201      	movs	r2, #1
 8005386:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	699b      	ldr	r3, [r3, #24]
 800538e:	f003 0303 	and.w	r3, r3, #3
 8005392:	2b00      	cmp	r3, #0
 8005394:	d003      	beq.n	800539e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005396:	6878      	ldr	r0, [r7, #4]
 8005398:	f7fa ff78 	bl	800028c <HAL_TIM_IC_CaptureCallback>
 800539c:	e005      	b.n	80053aa <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800539e:	6878      	ldr	r0, [r7, #4]
 80053a0:	f000 fb9e 	bl	8005ae0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80053a4:	6878      	ldr	r0, [r7, #4]
 80053a6:	f000 fba5 	bl	8005af4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	2200      	movs	r2, #0
 80053ae:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80053b0:	68bb      	ldr	r3, [r7, #8]
 80053b2:	f003 0304 	and.w	r3, r3, #4
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d020      	beq.n	80053fc <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	f003 0304 	and.w	r3, r3, #4
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d01b      	beq.n	80053fc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	f06f 0204 	mvn.w	r2, #4
 80053cc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	2202      	movs	r2, #2
 80053d2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	699b      	ldr	r3, [r3, #24]
 80053da:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d003      	beq.n	80053ea <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80053e2:	6878      	ldr	r0, [r7, #4]
 80053e4:	f7fa ff52 	bl	800028c <HAL_TIM_IC_CaptureCallback>
 80053e8:	e005      	b.n	80053f6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80053ea:	6878      	ldr	r0, [r7, #4]
 80053ec:	f000 fb78 	bl	8005ae0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80053f0:	6878      	ldr	r0, [r7, #4]
 80053f2:	f000 fb7f 	bl	8005af4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	2200      	movs	r2, #0
 80053fa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80053fc:	68bb      	ldr	r3, [r7, #8]
 80053fe:	f003 0308 	and.w	r3, r3, #8
 8005402:	2b00      	cmp	r3, #0
 8005404:	d020      	beq.n	8005448 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	f003 0308 	and.w	r3, r3, #8
 800540c:	2b00      	cmp	r3, #0
 800540e:	d01b      	beq.n	8005448 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	f06f 0208 	mvn.w	r2, #8
 8005418:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	2204      	movs	r2, #4
 800541e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	69db      	ldr	r3, [r3, #28]
 8005426:	f003 0303 	and.w	r3, r3, #3
 800542a:	2b00      	cmp	r3, #0
 800542c:	d003      	beq.n	8005436 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800542e:	6878      	ldr	r0, [r7, #4]
 8005430:	f7fa ff2c 	bl	800028c <HAL_TIM_IC_CaptureCallback>
 8005434:	e005      	b.n	8005442 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005436:	6878      	ldr	r0, [r7, #4]
 8005438:	f000 fb52 	bl	8005ae0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800543c:	6878      	ldr	r0, [r7, #4]
 800543e:	f000 fb59 	bl	8005af4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	2200      	movs	r2, #0
 8005446:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005448:	68bb      	ldr	r3, [r7, #8]
 800544a:	f003 0310 	and.w	r3, r3, #16
 800544e:	2b00      	cmp	r3, #0
 8005450:	d020      	beq.n	8005494 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	f003 0310 	and.w	r3, r3, #16
 8005458:	2b00      	cmp	r3, #0
 800545a:	d01b      	beq.n	8005494 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	f06f 0210 	mvn.w	r2, #16
 8005464:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	2208      	movs	r2, #8
 800546a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	69db      	ldr	r3, [r3, #28]
 8005472:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005476:	2b00      	cmp	r3, #0
 8005478:	d003      	beq.n	8005482 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800547a:	6878      	ldr	r0, [r7, #4]
 800547c:	f7fa ff06 	bl	800028c <HAL_TIM_IC_CaptureCallback>
 8005480:	e005      	b.n	800548e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005482:	6878      	ldr	r0, [r7, #4]
 8005484:	f000 fb2c 	bl	8005ae0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005488:	6878      	ldr	r0, [r7, #4]
 800548a:	f000 fb33 	bl	8005af4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	2200      	movs	r2, #0
 8005492:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005494:	68bb      	ldr	r3, [r7, #8]
 8005496:	f003 0301 	and.w	r3, r3, #1
 800549a:	2b00      	cmp	r3, #0
 800549c:	d00c      	beq.n	80054b8 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	f003 0301 	and.w	r3, r3, #1
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d007      	beq.n	80054b8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	f06f 0201 	mvn.w	r2, #1
 80054b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80054b2:	6878      	ldr	r0, [r7, #4]
 80054b4:	f000 fb0a 	bl	8005acc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80054b8:	68bb      	ldr	r3, [r7, #8]
 80054ba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d00c      	beq.n	80054dc <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d007      	beq.n	80054dc <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80054d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80054d6:	6878      	ldr	r0, [r7, #4]
 80054d8:	f001 f8fa 	bl	80066d0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80054dc:	68bb      	ldr	r3, [r7, #8]
 80054de:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d00c      	beq.n	8005500 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d007      	beq.n	8005500 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80054f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80054fa:	6878      	ldr	r0, [r7, #4]
 80054fc:	f001 f8f2 	bl	80066e4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005500:	68bb      	ldr	r3, [r7, #8]
 8005502:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005506:	2b00      	cmp	r3, #0
 8005508:	d00c      	beq.n	8005524 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005510:	2b00      	cmp	r3, #0
 8005512:	d007      	beq.n	8005524 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800551c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800551e:	6878      	ldr	r0, [r7, #4]
 8005520:	f000 faf2 	bl	8005b08 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005524:	68bb      	ldr	r3, [r7, #8]
 8005526:	f003 0320 	and.w	r3, r3, #32
 800552a:	2b00      	cmp	r3, #0
 800552c:	d00c      	beq.n	8005548 <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	f003 0320 	and.w	r3, r3, #32
 8005534:	2b00      	cmp	r3, #0
 8005536:	d007      	beq.n	8005548 <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	f06f 0220 	mvn.w	r2, #32
 8005540:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005542:	6878      	ldr	r0, [r7, #4]
 8005544:	f001 f8ba 	bl	80066bc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005548:	bf00      	nop
 800554a:	3710      	adds	r7, #16
 800554c:	46bd      	mov	sp, r7
 800554e:	bd80      	pop	{r7, pc}

08005550 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8005550:	b580      	push	{r7, lr}
 8005552:	b086      	sub	sp, #24
 8005554:	af00      	add	r7, sp, #0
 8005556:	60f8      	str	r0, [r7, #12]
 8005558:	60b9      	str	r1, [r7, #8]
 800555a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800555c:	2300      	movs	r3, #0
 800555e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005566:	2b01      	cmp	r3, #1
 8005568:	d101      	bne.n	800556e <HAL_TIM_IC_ConfigChannel+0x1e>
 800556a:	2302      	movs	r3, #2
 800556c:	e088      	b.n	8005680 <HAL_TIM_IC_ConfigChannel+0x130>
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	2201      	movs	r2, #1
 8005572:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	2b00      	cmp	r3, #0
 800557a:	d11b      	bne.n	80055b4 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8005580:	68bb      	ldr	r3, [r7, #8]
 8005582:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8005584:	68bb      	ldr	r3, [r7, #8]
 8005586:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8005588:	68bb      	ldr	r3, [r7, #8]
 800558a:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 800558c:	f000 fe38 	bl	8006200 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	699a      	ldr	r2, [r3, #24]
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	f022 020c 	bic.w	r2, r2, #12
 800559e:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	6999      	ldr	r1, [r3, #24]
 80055a6:	68bb      	ldr	r3, [r7, #8]
 80055a8:	689a      	ldr	r2, [r3, #8]
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	430a      	orrs	r2, r1
 80055b0:	619a      	str	r2, [r3, #24]
 80055b2:	e060      	b.n	8005676 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	2b04      	cmp	r3, #4
 80055b8:	d11c      	bne.n	80055f4 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80055be:	68bb      	ldr	r3, [r7, #8]
 80055c0:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80055c2:	68bb      	ldr	r3, [r7, #8]
 80055c4:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80055c6:	68bb      	ldr	r3, [r7, #8]
 80055c8:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 80055ca:	f000 feb0 	bl	800632e <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	699a      	ldr	r2, [r3, #24]
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 80055dc:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	6999      	ldr	r1, [r3, #24]
 80055e4:	68bb      	ldr	r3, [r7, #8]
 80055e6:	689b      	ldr	r3, [r3, #8]
 80055e8:	021a      	lsls	r2, r3, #8
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	430a      	orrs	r2, r1
 80055f0:	619a      	str	r2, [r3, #24]
 80055f2:	e040      	b.n	8005676 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	2b08      	cmp	r3, #8
 80055f8:	d11b      	bne.n	8005632 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80055fe:	68bb      	ldr	r3, [r7, #8]
 8005600:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8005602:	68bb      	ldr	r3, [r7, #8]
 8005604:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8005606:	68bb      	ldr	r3, [r7, #8]
 8005608:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 800560a:	f000 fefd 	bl	8006408 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	69da      	ldr	r2, [r3, #28]
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	f022 020c 	bic.w	r2, r2, #12
 800561c:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	69d9      	ldr	r1, [r3, #28]
 8005624:	68bb      	ldr	r3, [r7, #8]
 8005626:	689a      	ldr	r2, [r3, #8]
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	430a      	orrs	r2, r1
 800562e:	61da      	str	r2, [r3, #28]
 8005630:	e021      	b.n	8005676 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	2b0c      	cmp	r3, #12
 8005636:	d11c      	bne.n	8005672 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800563c:	68bb      	ldr	r3, [r7, #8]
 800563e:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8005640:	68bb      	ldr	r3, [r7, #8]
 8005642:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8005644:	68bb      	ldr	r3, [r7, #8]
 8005646:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 8005648:	f000 ff1a 	bl	8006480 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	69da      	ldr	r2, [r3, #28]
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 800565a:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	69d9      	ldr	r1, [r3, #28]
 8005662:	68bb      	ldr	r3, [r7, #8]
 8005664:	689b      	ldr	r3, [r3, #8]
 8005666:	021a      	lsls	r2, r3, #8
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	430a      	orrs	r2, r1
 800566e:	61da      	str	r2, [r3, #28]
 8005670:	e001      	b.n	8005676 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8005672:	2301      	movs	r3, #1
 8005674:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	2200      	movs	r2, #0
 800567a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800567e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005680:	4618      	mov	r0, r3
 8005682:	3718      	adds	r7, #24
 8005684:	46bd      	mov	sp, r7
 8005686:	bd80      	pop	{r7, pc}

08005688 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005688:	b580      	push	{r7, lr}
 800568a:	b086      	sub	sp, #24
 800568c:	af00      	add	r7, sp, #0
 800568e:	60f8      	str	r0, [r7, #12]
 8005690:	60b9      	str	r1, [r7, #8]
 8005692:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005694:	2300      	movs	r3, #0
 8005696:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800569e:	2b01      	cmp	r3, #1
 80056a0:	d101      	bne.n	80056a6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80056a2:	2302      	movs	r3, #2
 80056a4:	e0ff      	b.n	80058a6 <HAL_TIM_PWM_ConfigChannel+0x21e>
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	2201      	movs	r2, #1
 80056aa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	2b14      	cmp	r3, #20
 80056b2:	f200 80f0 	bhi.w	8005896 <HAL_TIM_PWM_ConfigChannel+0x20e>
 80056b6:	a201      	add	r2, pc, #4	@ (adr r2, 80056bc <HAL_TIM_PWM_ConfigChannel+0x34>)
 80056b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056bc:	08005711 	.word	0x08005711
 80056c0:	08005897 	.word	0x08005897
 80056c4:	08005897 	.word	0x08005897
 80056c8:	08005897 	.word	0x08005897
 80056cc:	08005751 	.word	0x08005751
 80056d0:	08005897 	.word	0x08005897
 80056d4:	08005897 	.word	0x08005897
 80056d8:	08005897 	.word	0x08005897
 80056dc:	08005793 	.word	0x08005793
 80056e0:	08005897 	.word	0x08005897
 80056e4:	08005897 	.word	0x08005897
 80056e8:	08005897 	.word	0x08005897
 80056ec:	080057d3 	.word	0x080057d3
 80056f0:	08005897 	.word	0x08005897
 80056f4:	08005897 	.word	0x08005897
 80056f8:	08005897 	.word	0x08005897
 80056fc:	08005815 	.word	0x08005815
 8005700:	08005897 	.word	0x08005897
 8005704:	08005897 	.word	0x08005897
 8005708:	08005897 	.word	0x08005897
 800570c:	08005855 	.word	0x08005855
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	68b9      	ldr	r1, [r7, #8]
 8005716:	4618      	mov	r0, r3
 8005718:	f000 fa9c 	bl	8005c54 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	699a      	ldr	r2, [r3, #24]
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	f042 0208 	orr.w	r2, r2, #8
 800572a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	699a      	ldr	r2, [r3, #24]
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	f022 0204 	bic.w	r2, r2, #4
 800573a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	6999      	ldr	r1, [r3, #24]
 8005742:	68bb      	ldr	r3, [r7, #8]
 8005744:	691a      	ldr	r2, [r3, #16]
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	430a      	orrs	r2, r1
 800574c:	619a      	str	r2, [r3, #24]
      break;
 800574e:	e0a5      	b.n	800589c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	68b9      	ldr	r1, [r7, #8]
 8005756:	4618      	mov	r0, r3
 8005758:	f000 fb0c 	bl	8005d74 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	699a      	ldr	r2, [r3, #24]
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800576a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	699a      	ldr	r2, [r3, #24]
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800577a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	6999      	ldr	r1, [r3, #24]
 8005782:	68bb      	ldr	r3, [r7, #8]
 8005784:	691b      	ldr	r3, [r3, #16]
 8005786:	021a      	lsls	r2, r3, #8
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	430a      	orrs	r2, r1
 800578e:	619a      	str	r2, [r3, #24]
      break;
 8005790:	e084      	b.n	800589c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	68b9      	ldr	r1, [r7, #8]
 8005798:	4618      	mov	r0, r3
 800579a:	f000 fb75 	bl	8005e88 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	69da      	ldr	r2, [r3, #28]
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	f042 0208 	orr.w	r2, r2, #8
 80057ac:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	69da      	ldr	r2, [r3, #28]
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	f022 0204 	bic.w	r2, r2, #4
 80057bc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	69d9      	ldr	r1, [r3, #28]
 80057c4:	68bb      	ldr	r3, [r7, #8]
 80057c6:	691a      	ldr	r2, [r3, #16]
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	430a      	orrs	r2, r1
 80057ce:	61da      	str	r2, [r3, #28]
      break;
 80057d0:	e064      	b.n	800589c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	68b9      	ldr	r1, [r7, #8]
 80057d8:	4618      	mov	r0, r3
 80057da:	f000 fbdd 	bl	8005f98 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	69da      	ldr	r2, [r3, #28]
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80057ec:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	69da      	ldr	r2, [r3, #28]
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80057fc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	69d9      	ldr	r1, [r3, #28]
 8005804:	68bb      	ldr	r3, [r7, #8]
 8005806:	691b      	ldr	r3, [r3, #16]
 8005808:	021a      	lsls	r2, r3, #8
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	430a      	orrs	r2, r1
 8005810:	61da      	str	r2, [r3, #28]
      break;
 8005812:	e043      	b.n	800589c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	68b9      	ldr	r1, [r7, #8]
 800581a:	4618      	mov	r0, r3
 800581c:	f000 fc26 	bl	800606c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	f042 0208 	orr.w	r2, r2, #8
 800582e:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	f022 0204 	bic.w	r2, r2, #4
 800583e:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8005846:	68bb      	ldr	r3, [r7, #8]
 8005848:	691a      	ldr	r2, [r3, #16]
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	430a      	orrs	r2, r1
 8005850:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8005852:	e023      	b.n	800589c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	68b9      	ldr	r1, [r7, #8]
 800585a:	4618      	mov	r0, r3
 800585c:	f000 fc6a 	bl	8006134 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800586e:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800587e:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8005886:	68bb      	ldr	r3, [r7, #8]
 8005888:	691b      	ldr	r3, [r3, #16]
 800588a:	021a      	lsls	r2, r3, #8
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	430a      	orrs	r2, r1
 8005892:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8005894:	e002      	b.n	800589c <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 8005896:	2301      	movs	r3, #1
 8005898:	75fb      	strb	r3, [r7, #23]
      break;
 800589a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	2200      	movs	r2, #0
 80058a0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80058a4:	7dfb      	ldrb	r3, [r7, #23]
}
 80058a6:	4618      	mov	r0, r3
 80058a8:	3718      	adds	r7, #24
 80058aa:	46bd      	mov	sp, r7
 80058ac:	bd80      	pop	{r7, pc}
 80058ae:	bf00      	nop

080058b0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80058b0:	b580      	push	{r7, lr}
 80058b2:	b084      	sub	sp, #16
 80058b4:	af00      	add	r7, sp, #0
 80058b6:	6078      	str	r0, [r7, #4]
 80058b8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80058ba:	2300      	movs	r3, #0
 80058bc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80058c4:	2b01      	cmp	r3, #1
 80058c6:	d101      	bne.n	80058cc <HAL_TIM_ConfigClockSource+0x1c>
 80058c8:	2302      	movs	r3, #2
 80058ca:	e0b6      	b.n	8005a3a <HAL_TIM_ConfigClockSource+0x18a>
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	2201      	movs	r2, #1
 80058d0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	2202      	movs	r2, #2
 80058d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	689b      	ldr	r3, [r3, #8]
 80058e2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80058e4:	68bb      	ldr	r3, [r7, #8]
 80058e6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80058ea:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80058ee:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80058f0:	68bb      	ldr	r3, [r7, #8]
 80058f2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80058f6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	68ba      	ldr	r2, [r7, #8]
 80058fe:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005900:	683b      	ldr	r3, [r7, #0]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005908:	d03e      	beq.n	8005988 <HAL_TIM_ConfigClockSource+0xd8>
 800590a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800590e:	f200 8087 	bhi.w	8005a20 <HAL_TIM_ConfigClockSource+0x170>
 8005912:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005916:	f000 8086 	beq.w	8005a26 <HAL_TIM_ConfigClockSource+0x176>
 800591a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800591e:	d87f      	bhi.n	8005a20 <HAL_TIM_ConfigClockSource+0x170>
 8005920:	2b70      	cmp	r3, #112	@ 0x70
 8005922:	d01a      	beq.n	800595a <HAL_TIM_ConfigClockSource+0xaa>
 8005924:	2b70      	cmp	r3, #112	@ 0x70
 8005926:	d87b      	bhi.n	8005a20 <HAL_TIM_ConfigClockSource+0x170>
 8005928:	2b60      	cmp	r3, #96	@ 0x60
 800592a:	d050      	beq.n	80059ce <HAL_TIM_ConfigClockSource+0x11e>
 800592c:	2b60      	cmp	r3, #96	@ 0x60
 800592e:	d877      	bhi.n	8005a20 <HAL_TIM_ConfigClockSource+0x170>
 8005930:	2b50      	cmp	r3, #80	@ 0x50
 8005932:	d03c      	beq.n	80059ae <HAL_TIM_ConfigClockSource+0xfe>
 8005934:	2b50      	cmp	r3, #80	@ 0x50
 8005936:	d873      	bhi.n	8005a20 <HAL_TIM_ConfigClockSource+0x170>
 8005938:	2b40      	cmp	r3, #64	@ 0x40
 800593a:	d058      	beq.n	80059ee <HAL_TIM_ConfigClockSource+0x13e>
 800593c:	2b40      	cmp	r3, #64	@ 0x40
 800593e:	d86f      	bhi.n	8005a20 <HAL_TIM_ConfigClockSource+0x170>
 8005940:	2b30      	cmp	r3, #48	@ 0x30
 8005942:	d064      	beq.n	8005a0e <HAL_TIM_ConfigClockSource+0x15e>
 8005944:	2b30      	cmp	r3, #48	@ 0x30
 8005946:	d86b      	bhi.n	8005a20 <HAL_TIM_ConfigClockSource+0x170>
 8005948:	2b20      	cmp	r3, #32
 800594a:	d060      	beq.n	8005a0e <HAL_TIM_ConfigClockSource+0x15e>
 800594c:	2b20      	cmp	r3, #32
 800594e:	d867      	bhi.n	8005a20 <HAL_TIM_ConfigClockSource+0x170>
 8005950:	2b00      	cmp	r3, #0
 8005952:	d05c      	beq.n	8005a0e <HAL_TIM_ConfigClockSource+0x15e>
 8005954:	2b10      	cmp	r3, #16
 8005956:	d05a      	beq.n	8005a0e <HAL_TIM_ConfigClockSource+0x15e>
 8005958:	e062      	b.n	8005a20 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800595e:	683b      	ldr	r3, [r7, #0]
 8005960:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005962:	683b      	ldr	r3, [r7, #0]
 8005964:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005966:	683b      	ldr	r3, [r7, #0]
 8005968:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800596a:	f000 fde1 	bl	8006530 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	689b      	ldr	r3, [r3, #8]
 8005974:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005976:	68bb      	ldr	r3, [r7, #8]
 8005978:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800597c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	68ba      	ldr	r2, [r7, #8]
 8005984:	609a      	str	r2, [r3, #8]
      break;
 8005986:	e04f      	b.n	8005a28 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800598c:	683b      	ldr	r3, [r7, #0]
 800598e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005990:	683b      	ldr	r3, [r7, #0]
 8005992:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005994:	683b      	ldr	r3, [r7, #0]
 8005996:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005998:	f000 fdca 	bl	8006530 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	689a      	ldr	r2, [r3, #8]
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80059aa:	609a      	str	r2, [r3, #8]
      break;
 80059ac:	e03c      	b.n	8005a28 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80059b2:	683b      	ldr	r3, [r7, #0]
 80059b4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80059b6:	683b      	ldr	r3, [r7, #0]
 80059b8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80059ba:	461a      	mov	r2, r3
 80059bc:	f000 fc88 	bl	80062d0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	2150      	movs	r1, #80	@ 0x50
 80059c6:	4618      	mov	r0, r3
 80059c8:	f000 fd97 	bl	80064fa <TIM_ITRx_SetConfig>
      break;
 80059cc:	e02c      	b.n	8005a28 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80059d2:	683b      	ldr	r3, [r7, #0]
 80059d4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80059d6:	683b      	ldr	r3, [r7, #0]
 80059d8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80059da:	461a      	mov	r2, r3
 80059dc:	f000 fce4 	bl	80063a8 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	2160      	movs	r1, #96	@ 0x60
 80059e6:	4618      	mov	r0, r3
 80059e8:	f000 fd87 	bl	80064fa <TIM_ITRx_SetConfig>
      break;
 80059ec:	e01c      	b.n	8005a28 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80059f2:	683b      	ldr	r3, [r7, #0]
 80059f4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80059f6:	683b      	ldr	r3, [r7, #0]
 80059f8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80059fa:	461a      	mov	r2, r3
 80059fc:	f000 fc68 	bl	80062d0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	2140      	movs	r1, #64	@ 0x40
 8005a06:	4618      	mov	r0, r3
 8005a08:	f000 fd77 	bl	80064fa <TIM_ITRx_SetConfig>
      break;
 8005a0c:	e00c      	b.n	8005a28 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	681a      	ldr	r2, [r3, #0]
 8005a12:	683b      	ldr	r3, [r7, #0]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	4619      	mov	r1, r3
 8005a18:	4610      	mov	r0, r2
 8005a1a:	f000 fd6e 	bl	80064fa <TIM_ITRx_SetConfig>
      break;
 8005a1e:	e003      	b.n	8005a28 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8005a20:	2301      	movs	r3, #1
 8005a22:	73fb      	strb	r3, [r7, #15]
      break;
 8005a24:	e000      	b.n	8005a28 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8005a26:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	2201      	movs	r2, #1
 8005a2c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	2200      	movs	r2, #0
 8005a34:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005a38:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a3a:	4618      	mov	r0, r3
 8005a3c:	3710      	adds	r7, #16
 8005a3e:	46bd      	mov	sp, r7
 8005a40:	bd80      	pop	{r7, pc}
	...

08005a44 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005a44:	b480      	push	{r7}
 8005a46:	b085      	sub	sp, #20
 8005a48:	af00      	add	r7, sp, #0
 8005a4a:	6078      	str	r0, [r7, #4]
 8005a4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8005a4e:	2300      	movs	r3, #0
 8005a50:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8005a52:	683b      	ldr	r3, [r7, #0]
 8005a54:	2b0c      	cmp	r3, #12
 8005a56:	d831      	bhi.n	8005abc <HAL_TIM_ReadCapturedValue+0x78>
 8005a58:	a201      	add	r2, pc, #4	@ (adr r2, 8005a60 <HAL_TIM_ReadCapturedValue+0x1c>)
 8005a5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a5e:	bf00      	nop
 8005a60:	08005a95 	.word	0x08005a95
 8005a64:	08005abd 	.word	0x08005abd
 8005a68:	08005abd 	.word	0x08005abd
 8005a6c:	08005abd 	.word	0x08005abd
 8005a70:	08005a9f 	.word	0x08005a9f
 8005a74:	08005abd 	.word	0x08005abd
 8005a78:	08005abd 	.word	0x08005abd
 8005a7c:	08005abd 	.word	0x08005abd
 8005a80:	08005aa9 	.word	0x08005aa9
 8005a84:	08005abd 	.word	0x08005abd
 8005a88:	08005abd 	.word	0x08005abd
 8005a8c:	08005abd 	.word	0x08005abd
 8005a90:	08005ab3 	.word	0x08005ab3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005a9a:	60fb      	str	r3, [r7, #12]

      break;
 8005a9c:	e00f      	b.n	8005abe <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005aa4:	60fb      	str	r3, [r7, #12]

      break;
 8005aa6:	e00a      	b.n	8005abe <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005aae:	60fb      	str	r3, [r7, #12]

      break;
 8005ab0:	e005      	b.n	8005abe <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ab8:	60fb      	str	r3, [r7, #12]

      break;
 8005aba:	e000      	b.n	8005abe <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8005abc:	bf00      	nop
  }

  return tmpreg;
 8005abe:	68fb      	ldr	r3, [r7, #12]
}
 8005ac0:	4618      	mov	r0, r3
 8005ac2:	3714      	adds	r7, #20
 8005ac4:	46bd      	mov	sp, r7
 8005ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aca:	4770      	bx	lr

08005acc <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005acc:	b480      	push	{r7}
 8005ace:	b083      	sub	sp, #12
 8005ad0:	af00      	add	r7, sp, #0
 8005ad2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8005ad4:	bf00      	nop
 8005ad6:	370c      	adds	r7, #12
 8005ad8:	46bd      	mov	sp, r7
 8005ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ade:	4770      	bx	lr

08005ae0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005ae0:	b480      	push	{r7}
 8005ae2:	b083      	sub	sp, #12
 8005ae4:	af00      	add	r7, sp, #0
 8005ae6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005ae8:	bf00      	nop
 8005aea:	370c      	adds	r7, #12
 8005aec:	46bd      	mov	sp, r7
 8005aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005af2:	4770      	bx	lr

08005af4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005af4:	b480      	push	{r7}
 8005af6:	b083      	sub	sp, #12
 8005af8:	af00      	add	r7, sp, #0
 8005afa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005afc:	bf00      	nop
 8005afe:	370c      	adds	r7, #12
 8005b00:	46bd      	mov	sp, r7
 8005b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b06:	4770      	bx	lr

08005b08 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005b08:	b480      	push	{r7}
 8005b0a:	b083      	sub	sp, #12
 8005b0c:	af00      	add	r7, sp, #0
 8005b0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005b10:	bf00      	nop
 8005b12:	370c      	adds	r7, #12
 8005b14:	46bd      	mov	sp, r7
 8005b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b1a:	4770      	bx	lr

08005b1c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005b1c:	b480      	push	{r7}
 8005b1e:	b085      	sub	sp, #20
 8005b20:	af00      	add	r7, sp, #0
 8005b22:	6078      	str	r0, [r7, #4]
 8005b24:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	4a42      	ldr	r2, [pc, #264]	@ (8005c38 <TIM_Base_SetConfig+0x11c>)
 8005b30:	4293      	cmp	r3, r2
 8005b32:	d00f      	beq.n	8005b54 <TIM_Base_SetConfig+0x38>
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005b3a:	d00b      	beq.n	8005b54 <TIM_Base_SetConfig+0x38>
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	4a3f      	ldr	r2, [pc, #252]	@ (8005c3c <TIM_Base_SetConfig+0x120>)
 8005b40:	4293      	cmp	r3, r2
 8005b42:	d007      	beq.n	8005b54 <TIM_Base_SetConfig+0x38>
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	4a3e      	ldr	r2, [pc, #248]	@ (8005c40 <TIM_Base_SetConfig+0x124>)
 8005b48:	4293      	cmp	r3, r2
 8005b4a:	d003      	beq.n	8005b54 <TIM_Base_SetConfig+0x38>
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	4a3d      	ldr	r2, [pc, #244]	@ (8005c44 <TIM_Base_SetConfig+0x128>)
 8005b50:	4293      	cmp	r3, r2
 8005b52:	d108      	bne.n	8005b66 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005b5a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005b5c:	683b      	ldr	r3, [r7, #0]
 8005b5e:	685b      	ldr	r3, [r3, #4]
 8005b60:	68fa      	ldr	r2, [r7, #12]
 8005b62:	4313      	orrs	r3, r2
 8005b64:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	4a33      	ldr	r2, [pc, #204]	@ (8005c38 <TIM_Base_SetConfig+0x11c>)
 8005b6a:	4293      	cmp	r3, r2
 8005b6c:	d01b      	beq.n	8005ba6 <TIM_Base_SetConfig+0x8a>
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005b74:	d017      	beq.n	8005ba6 <TIM_Base_SetConfig+0x8a>
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	4a30      	ldr	r2, [pc, #192]	@ (8005c3c <TIM_Base_SetConfig+0x120>)
 8005b7a:	4293      	cmp	r3, r2
 8005b7c:	d013      	beq.n	8005ba6 <TIM_Base_SetConfig+0x8a>
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	4a2f      	ldr	r2, [pc, #188]	@ (8005c40 <TIM_Base_SetConfig+0x124>)
 8005b82:	4293      	cmp	r3, r2
 8005b84:	d00f      	beq.n	8005ba6 <TIM_Base_SetConfig+0x8a>
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	4a2e      	ldr	r2, [pc, #184]	@ (8005c44 <TIM_Base_SetConfig+0x128>)
 8005b8a:	4293      	cmp	r3, r2
 8005b8c:	d00b      	beq.n	8005ba6 <TIM_Base_SetConfig+0x8a>
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	4a2d      	ldr	r2, [pc, #180]	@ (8005c48 <TIM_Base_SetConfig+0x12c>)
 8005b92:	4293      	cmp	r3, r2
 8005b94:	d007      	beq.n	8005ba6 <TIM_Base_SetConfig+0x8a>
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	4a2c      	ldr	r2, [pc, #176]	@ (8005c4c <TIM_Base_SetConfig+0x130>)
 8005b9a:	4293      	cmp	r3, r2
 8005b9c:	d003      	beq.n	8005ba6 <TIM_Base_SetConfig+0x8a>
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	4a2b      	ldr	r2, [pc, #172]	@ (8005c50 <TIM_Base_SetConfig+0x134>)
 8005ba2:	4293      	cmp	r3, r2
 8005ba4:	d108      	bne.n	8005bb8 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005bac:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005bae:	683b      	ldr	r3, [r7, #0]
 8005bb0:	68db      	ldr	r3, [r3, #12]
 8005bb2:	68fa      	ldr	r2, [r7, #12]
 8005bb4:	4313      	orrs	r3, r2
 8005bb6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005bbe:	683b      	ldr	r3, [r7, #0]
 8005bc0:	695b      	ldr	r3, [r3, #20]
 8005bc2:	4313      	orrs	r3, r2
 8005bc4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	68fa      	ldr	r2, [r7, #12]
 8005bca:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005bcc:	683b      	ldr	r3, [r7, #0]
 8005bce:	689a      	ldr	r2, [r3, #8]
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005bd4:	683b      	ldr	r3, [r7, #0]
 8005bd6:	681a      	ldr	r2, [r3, #0]
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	4a16      	ldr	r2, [pc, #88]	@ (8005c38 <TIM_Base_SetConfig+0x11c>)
 8005be0:	4293      	cmp	r3, r2
 8005be2:	d00f      	beq.n	8005c04 <TIM_Base_SetConfig+0xe8>
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	4a17      	ldr	r2, [pc, #92]	@ (8005c44 <TIM_Base_SetConfig+0x128>)
 8005be8:	4293      	cmp	r3, r2
 8005bea:	d00b      	beq.n	8005c04 <TIM_Base_SetConfig+0xe8>
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	4a16      	ldr	r2, [pc, #88]	@ (8005c48 <TIM_Base_SetConfig+0x12c>)
 8005bf0:	4293      	cmp	r3, r2
 8005bf2:	d007      	beq.n	8005c04 <TIM_Base_SetConfig+0xe8>
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	4a15      	ldr	r2, [pc, #84]	@ (8005c4c <TIM_Base_SetConfig+0x130>)
 8005bf8:	4293      	cmp	r3, r2
 8005bfa:	d003      	beq.n	8005c04 <TIM_Base_SetConfig+0xe8>
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	4a14      	ldr	r2, [pc, #80]	@ (8005c50 <TIM_Base_SetConfig+0x134>)
 8005c00:	4293      	cmp	r3, r2
 8005c02:	d103      	bne.n	8005c0c <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005c04:	683b      	ldr	r3, [r7, #0]
 8005c06:	691a      	ldr	r2, [r3, #16]
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	2201      	movs	r2, #1
 8005c10:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	691b      	ldr	r3, [r3, #16]
 8005c16:	f003 0301 	and.w	r3, r3, #1
 8005c1a:	2b01      	cmp	r3, #1
 8005c1c:	d105      	bne.n	8005c2a <TIM_Base_SetConfig+0x10e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	691b      	ldr	r3, [r3, #16]
 8005c22:	f023 0201 	bic.w	r2, r3, #1
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	611a      	str	r2, [r3, #16]
  }
}
 8005c2a:	bf00      	nop
 8005c2c:	3714      	adds	r7, #20
 8005c2e:	46bd      	mov	sp, r7
 8005c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c34:	4770      	bx	lr
 8005c36:	bf00      	nop
 8005c38:	40012c00 	.word	0x40012c00
 8005c3c:	40000400 	.word	0x40000400
 8005c40:	40000800 	.word	0x40000800
 8005c44:	40013400 	.word	0x40013400
 8005c48:	40014000 	.word	0x40014000
 8005c4c:	40014400 	.word	0x40014400
 8005c50:	40014800 	.word	0x40014800

08005c54 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005c54:	b480      	push	{r7}
 8005c56:	b087      	sub	sp, #28
 8005c58:	af00      	add	r7, sp, #0
 8005c5a:	6078      	str	r0, [r7, #4]
 8005c5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	6a1b      	ldr	r3, [r3, #32]
 8005c62:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	6a1b      	ldr	r3, [r3, #32]
 8005c68:	f023 0201 	bic.w	r2, r3, #1
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	685b      	ldr	r3, [r3, #4]
 8005c74:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	699b      	ldr	r3, [r3, #24]
 8005c7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005c82:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005c86:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	f023 0303 	bic.w	r3, r3, #3
 8005c8e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005c90:	683b      	ldr	r3, [r7, #0]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	68fa      	ldr	r2, [r7, #12]
 8005c96:	4313      	orrs	r3, r2
 8005c98:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005c9a:	697b      	ldr	r3, [r7, #20]
 8005c9c:	f023 0302 	bic.w	r3, r3, #2
 8005ca0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005ca2:	683b      	ldr	r3, [r7, #0]
 8005ca4:	689b      	ldr	r3, [r3, #8]
 8005ca6:	697a      	ldr	r2, [r7, #20]
 8005ca8:	4313      	orrs	r3, r2
 8005caa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	4a2c      	ldr	r2, [pc, #176]	@ (8005d60 <TIM_OC1_SetConfig+0x10c>)
 8005cb0:	4293      	cmp	r3, r2
 8005cb2:	d00f      	beq.n	8005cd4 <TIM_OC1_SetConfig+0x80>
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	4a2b      	ldr	r2, [pc, #172]	@ (8005d64 <TIM_OC1_SetConfig+0x110>)
 8005cb8:	4293      	cmp	r3, r2
 8005cba:	d00b      	beq.n	8005cd4 <TIM_OC1_SetConfig+0x80>
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	4a2a      	ldr	r2, [pc, #168]	@ (8005d68 <TIM_OC1_SetConfig+0x114>)
 8005cc0:	4293      	cmp	r3, r2
 8005cc2:	d007      	beq.n	8005cd4 <TIM_OC1_SetConfig+0x80>
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	4a29      	ldr	r2, [pc, #164]	@ (8005d6c <TIM_OC1_SetConfig+0x118>)
 8005cc8:	4293      	cmp	r3, r2
 8005cca:	d003      	beq.n	8005cd4 <TIM_OC1_SetConfig+0x80>
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	4a28      	ldr	r2, [pc, #160]	@ (8005d70 <TIM_OC1_SetConfig+0x11c>)
 8005cd0:	4293      	cmp	r3, r2
 8005cd2:	d10c      	bne.n	8005cee <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005cd4:	697b      	ldr	r3, [r7, #20]
 8005cd6:	f023 0308 	bic.w	r3, r3, #8
 8005cda:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005cdc:	683b      	ldr	r3, [r7, #0]
 8005cde:	68db      	ldr	r3, [r3, #12]
 8005ce0:	697a      	ldr	r2, [r7, #20]
 8005ce2:	4313      	orrs	r3, r2
 8005ce4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005ce6:	697b      	ldr	r3, [r7, #20]
 8005ce8:	f023 0304 	bic.w	r3, r3, #4
 8005cec:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	4a1b      	ldr	r2, [pc, #108]	@ (8005d60 <TIM_OC1_SetConfig+0x10c>)
 8005cf2:	4293      	cmp	r3, r2
 8005cf4:	d00f      	beq.n	8005d16 <TIM_OC1_SetConfig+0xc2>
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	4a1a      	ldr	r2, [pc, #104]	@ (8005d64 <TIM_OC1_SetConfig+0x110>)
 8005cfa:	4293      	cmp	r3, r2
 8005cfc:	d00b      	beq.n	8005d16 <TIM_OC1_SetConfig+0xc2>
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	4a19      	ldr	r2, [pc, #100]	@ (8005d68 <TIM_OC1_SetConfig+0x114>)
 8005d02:	4293      	cmp	r3, r2
 8005d04:	d007      	beq.n	8005d16 <TIM_OC1_SetConfig+0xc2>
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	4a18      	ldr	r2, [pc, #96]	@ (8005d6c <TIM_OC1_SetConfig+0x118>)
 8005d0a:	4293      	cmp	r3, r2
 8005d0c:	d003      	beq.n	8005d16 <TIM_OC1_SetConfig+0xc2>
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	4a17      	ldr	r2, [pc, #92]	@ (8005d70 <TIM_OC1_SetConfig+0x11c>)
 8005d12:	4293      	cmp	r3, r2
 8005d14:	d111      	bne.n	8005d3a <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005d16:	693b      	ldr	r3, [r7, #16]
 8005d18:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005d1c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005d1e:	693b      	ldr	r3, [r7, #16]
 8005d20:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005d24:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005d26:	683b      	ldr	r3, [r7, #0]
 8005d28:	695b      	ldr	r3, [r3, #20]
 8005d2a:	693a      	ldr	r2, [r7, #16]
 8005d2c:	4313      	orrs	r3, r2
 8005d2e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005d30:	683b      	ldr	r3, [r7, #0]
 8005d32:	699b      	ldr	r3, [r3, #24]
 8005d34:	693a      	ldr	r2, [r7, #16]
 8005d36:	4313      	orrs	r3, r2
 8005d38:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	693a      	ldr	r2, [r7, #16]
 8005d3e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	68fa      	ldr	r2, [r7, #12]
 8005d44:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005d46:	683b      	ldr	r3, [r7, #0]
 8005d48:	685a      	ldr	r2, [r3, #4]
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	697a      	ldr	r2, [r7, #20]
 8005d52:	621a      	str	r2, [r3, #32]
}
 8005d54:	bf00      	nop
 8005d56:	371c      	adds	r7, #28
 8005d58:	46bd      	mov	sp, r7
 8005d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d5e:	4770      	bx	lr
 8005d60:	40012c00 	.word	0x40012c00
 8005d64:	40013400 	.word	0x40013400
 8005d68:	40014000 	.word	0x40014000
 8005d6c:	40014400 	.word	0x40014400
 8005d70:	40014800 	.word	0x40014800

08005d74 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005d74:	b480      	push	{r7}
 8005d76:	b087      	sub	sp, #28
 8005d78:	af00      	add	r7, sp, #0
 8005d7a:	6078      	str	r0, [r7, #4]
 8005d7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	6a1b      	ldr	r3, [r3, #32]
 8005d82:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	6a1b      	ldr	r3, [r3, #32]
 8005d88:	f023 0210 	bic.w	r2, r3, #16
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	685b      	ldr	r3, [r3, #4]
 8005d94:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	699b      	ldr	r3, [r3, #24]
 8005d9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005da2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005da6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005dae:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005db0:	683b      	ldr	r3, [r7, #0]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	021b      	lsls	r3, r3, #8
 8005db6:	68fa      	ldr	r2, [r7, #12]
 8005db8:	4313      	orrs	r3, r2
 8005dba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005dbc:	697b      	ldr	r3, [r7, #20]
 8005dbe:	f023 0320 	bic.w	r3, r3, #32
 8005dc2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005dc4:	683b      	ldr	r3, [r7, #0]
 8005dc6:	689b      	ldr	r3, [r3, #8]
 8005dc8:	011b      	lsls	r3, r3, #4
 8005dca:	697a      	ldr	r2, [r7, #20]
 8005dcc:	4313      	orrs	r3, r2
 8005dce:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	4a28      	ldr	r2, [pc, #160]	@ (8005e74 <TIM_OC2_SetConfig+0x100>)
 8005dd4:	4293      	cmp	r3, r2
 8005dd6:	d003      	beq.n	8005de0 <TIM_OC2_SetConfig+0x6c>
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	4a27      	ldr	r2, [pc, #156]	@ (8005e78 <TIM_OC2_SetConfig+0x104>)
 8005ddc:	4293      	cmp	r3, r2
 8005dde:	d10d      	bne.n	8005dfc <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005de0:	697b      	ldr	r3, [r7, #20]
 8005de2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005de6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005de8:	683b      	ldr	r3, [r7, #0]
 8005dea:	68db      	ldr	r3, [r3, #12]
 8005dec:	011b      	lsls	r3, r3, #4
 8005dee:	697a      	ldr	r2, [r7, #20]
 8005df0:	4313      	orrs	r3, r2
 8005df2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005df4:	697b      	ldr	r3, [r7, #20]
 8005df6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005dfa:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	4a1d      	ldr	r2, [pc, #116]	@ (8005e74 <TIM_OC2_SetConfig+0x100>)
 8005e00:	4293      	cmp	r3, r2
 8005e02:	d00f      	beq.n	8005e24 <TIM_OC2_SetConfig+0xb0>
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	4a1c      	ldr	r2, [pc, #112]	@ (8005e78 <TIM_OC2_SetConfig+0x104>)
 8005e08:	4293      	cmp	r3, r2
 8005e0a:	d00b      	beq.n	8005e24 <TIM_OC2_SetConfig+0xb0>
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	4a1b      	ldr	r2, [pc, #108]	@ (8005e7c <TIM_OC2_SetConfig+0x108>)
 8005e10:	4293      	cmp	r3, r2
 8005e12:	d007      	beq.n	8005e24 <TIM_OC2_SetConfig+0xb0>
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	4a1a      	ldr	r2, [pc, #104]	@ (8005e80 <TIM_OC2_SetConfig+0x10c>)
 8005e18:	4293      	cmp	r3, r2
 8005e1a:	d003      	beq.n	8005e24 <TIM_OC2_SetConfig+0xb0>
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	4a19      	ldr	r2, [pc, #100]	@ (8005e84 <TIM_OC2_SetConfig+0x110>)
 8005e20:	4293      	cmp	r3, r2
 8005e22:	d113      	bne.n	8005e4c <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005e24:	693b      	ldr	r3, [r7, #16]
 8005e26:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005e2a:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005e2c:	693b      	ldr	r3, [r7, #16]
 8005e2e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005e32:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005e34:	683b      	ldr	r3, [r7, #0]
 8005e36:	695b      	ldr	r3, [r3, #20]
 8005e38:	009b      	lsls	r3, r3, #2
 8005e3a:	693a      	ldr	r2, [r7, #16]
 8005e3c:	4313      	orrs	r3, r2
 8005e3e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005e40:	683b      	ldr	r3, [r7, #0]
 8005e42:	699b      	ldr	r3, [r3, #24]
 8005e44:	009b      	lsls	r3, r3, #2
 8005e46:	693a      	ldr	r2, [r7, #16]
 8005e48:	4313      	orrs	r3, r2
 8005e4a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	693a      	ldr	r2, [r7, #16]
 8005e50:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	68fa      	ldr	r2, [r7, #12]
 8005e56:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005e58:	683b      	ldr	r3, [r7, #0]
 8005e5a:	685a      	ldr	r2, [r3, #4]
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	697a      	ldr	r2, [r7, #20]
 8005e64:	621a      	str	r2, [r3, #32]
}
 8005e66:	bf00      	nop
 8005e68:	371c      	adds	r7, #28
 8005e6a:	46bd      	mov	sp, r7
 8005e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e70:	4770      	bx	lr
 8005e72:	bf00      	nop
 8005e74:	40012c00 	.word	0x40012c00
 8005e78:	40013400 	.word	0x40013400
 8005e7c:	40014000 	.word	0x40014000
 8005e80:	40014400 	.word	0x40014400
 8005e84:	40014800 	.word	0x40014800

08005e88 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005e88:	b480      	push	{r7}
 8005e8a:	b087      	sub	sp, #28
 8005e8c:	af00      	add	r7, sp, #0
 8005e8e:	6078      	str	r0, [r7, #4]
 8005e90:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	6a1b      	ldr	r3, [r3, #32]
 8005e96:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	6a1b      	ldr	r3, [r3, #32]
 8005e9c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	685b      	ldr	r3, [r3, #4]
 8005ea8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	69db      	ldr	r3, [r3, #28]
 8005eae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005eb6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005eba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	f023 0303 	bic.w	r3, r3, #3
 8005ec2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005ec4:	683b      	ldr	r3, [r7, #0]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	68fa      	ldr	r2, [r7, #12]
 8005eca:	4313      	orrs	r3, r2
 8005ecc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005ece:	697b      	ldr	r3, [r7, #20]
 8005ed0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005ed4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005ed6:	683b      	ldr	r3, [r7, #0]
 8005ed8:	689b      	ldr	r3, [r3, #8]
 8005eda:	021b      	lsls	r3, r3, #8
 8005edc:	697a      	ldr	r2, [r7, #20]
 8005ede:	4313      	orrs	r3, r2
 8005ee0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	4a27      	ldr	r2, [pc, #156]	@ (8005f84 <TIM_OC3_SetConfig+0xfc>)
 8005ee6:	4293      	cmp	r3, r2
 8005ee8:	d003      	beq.n	8005ef2 <TIM_OC3_SetConfig+0x6a>
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	4a26      	ldr	r2, [pc, #152]	@ (8005f88 <TIM_OC3_SetConfig+0x100>)
 8005eee:	4293      	cmp	r3, r2
 8005ef0:	d10d      	bne.n	8005f0e <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005ef2:	697b      	ldr	r3, [r7, #20]
 8005ef4:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005ef8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005efa:	683b      	ldr	r3, [r7, #0]
 8005efc:	68db      	ldr	r3, [r3, #12]
 8005efe:	021b      	lsls	r3, r3, #8
 8005f00:	697a      	ldr	r2, [r7, #20]
 8005f02:	4313      	orrs	r3, r2
 8005f04:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005f06:	697b      	ldr	r3, [r7, #20]
 8005f08:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005f0c:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	4a1c      	ldr	r2, [pc, #112]	@ (8005f84 <TIM_OC3_SetConfig+0xfc>)
 8005f12:	4293      	cmp	r3, r2
 8005f14:	d00f      	beq.n	8005f36 <TIM_OC3_SetConfig+0xae>
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	4a1b      	ldr	r2, [pc, #108]	@ (8005f88 <TIM_OC3_SetConfig+0x100>)
 8005f1a:	4293      	cmp	r3, r2
 8005f1c:	d00b      	beq.n	8005f36 <TIM_OC3_SetConfig+0xae>
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	4a1a      	ldr	r2, [pc, #104]	@ (8005f8c <TIM_OC3_SetConfig+0x104>)
 8005f22:	4293      	cmp	r3, r2
 8005f24:	d007      	beq.n	8005f36 <TIM_OC3_SetConfig+0xae>
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	4a19      	ldr	r2, [pc, #100]	@ (8005f90 <TIM_OC3_SetConfig+0x108>)
 8005f2a:	4293      	cmp	r3, r2
 8005f2c:	d003      	beq.n	8005f36 <TIM_OC3_SetConfig+0xae>
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	4a18      	ldr	r2, [pc, #96]	@ (8005f94 <TIM_OC3_SetConfig+0x10c>)
 8005f32:	4293      	cmp	r3, r2
 8005f34:	d113      	bne.n	8005f5e <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005f36:	693b      	ldr	r3, [r7, #16]
 8005f38:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005f3c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005f3e:	693b      	ldr	r3, [r7, #16]
 8005f40:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005f44:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005f46:	683b      	ldr	r3, [r7, #0]
 8005f48:	695b      	ldr	r3, [r3, #20]
 8005f4a:	011b      	lsls	r3, r3, #4
 8005f4c:	693a      	ldr	r2, [r7, #16]
 8005f4e:	4313      	orrs	r3, r2
 8005f50:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005f52:	683b      	ldr	r3, [r7, #0]
 8005f54:	699b      	ldr	r3, [r3, #24]
 8005f56:	011b      	lsls	r3, r3, #4
 8005f58:	693a      	ldr	r2, [r7, #16]
 8005f5a:	4313      	orrs	r3, r2
 8005f5c:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	693a      	ldr	r2, [r7, #16]
 8005f62:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	68fa      	ldr	r2, [r7, #12]
 8005f68:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005f6a:	683b      	ldr	r3, [r7, #0]
 8005f6c:	685a      	ldr	r2, [r3, #4]
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	697a      	ldr	r2, [r7, #20]
 8005f76:	621a      	str	r2, [r3, #32]
}
 8005f78:	bf00      	nop
 8005f7a:	371c      	adds	r7, #28
 8005f7c:	46bd      	mov	sp, r7
 8005f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f82:	4770      	bx	lr
 8005f84:	40012c00 	.word	0x40012c00
 8005f88:	40013400 	.word	0x40013400
 8005f8c:	40014000 	.word	0x40014000
 8005f90:	40014400 	.word	0x40014400
 8005f94:	40014800 	.word	0x40014800

08005f98 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005f98:	b480      	push	{r7}
 8005f9a:	b087      	sub	sp, #28
 8005f9c:	af00      	add	r7, sp, #0
 8005f9e:	6078      	str	r0, [r7, #4]
 8005fa0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	6a1b      	ldr	r3, [r3, #32]
 8005fa6:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	6a1b      	ldr	r3, [r3, #32]
 8005fac:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	685b      	ldr	r3, [r3, #4]
 8005fb8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	69db      	ldr	r3, [r3, #28]
 8005fbe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005fc6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005fca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005fd2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005fd4:	683b      	ldr	r3, [r7, #0]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	021b      	lsls	r3, r3, #8
 8005fda:	68fa      	ldr	r2, [r7, #12]
 8005fdc:	4313      	orrs	r3, r2
 8005fde:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005fe0:	693b      	ldr	r3, [r7, #16]
 8005fe2:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005fe6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005fe8:	683b      	ldr	r3, [r7, #0]
 8005fea:	689b      	ldr	r3, [r3, #8]
 8005fec:	031b      	lsls	r3, r3, #12
 8005fee:	693a      	ldr	r2, [r7, #16]
 8005ff0:	4313      	orrs	r3, r2
 8005ff2:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	4a18      	ldr	r2, [pc, #96]	@ (8006058 <TIM_OC4_SetConfig+0xc0>)
 8005ff8:	4293      	cmp	r3, r2
 8005ffa:	d00f      	beq.n	800601c <TIM_OC4_SetConfig+0x84>
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	4a17      	ldr	r2, [pc, #92]	@ (800605c <TIM_OC4_SetConfig+0xc4>)
 8006000:	4293      	cmp	r3, r2
 8006002:	d00b      	beq.n	800601c <TIM_OC4_SetConfig+0x84>
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	4a16      	ldr	r2, [pc, #88]	@ (8006060 <TIM_OC4_SetConfig+0xc8>)
 8006008:	4293      	cmp	r3, r2
 800600a:	d007      	beq.n	800601c <TIM_OC4_SetConfig+0x84>
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	4a15      	ldr	r2, [pc, #84]	@ (8006064 <TIM_OC4_SetConfig+0xcc>)
 8006010:	4293      	cmp	r3, r2
 8006012:	d003      	beq.n	800601c <TIM_OC4_SetConfig+0x84>
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	4a14      	ldr	r2, [pc, #80]	@ (8006068 <TIM_OC4_SetConfig+0xd0>)
 8006018:	4293      	cmp	r3, r2
 800601a:	d109      	bne.n	8006030 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800601c:	697b      	ldr	r3, [r7, #20]
 800601e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006022:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006024:	683b      	ldr	r3, [r7, #0]
 8006026:	695b      	ldr	r3, [r3, #20]
 8006028:	019b      	lsls	r3, r3, #6
 800602a:	697a      	ldr	r2, [r7, #20]
 800602c:	4313      	orrs	r3, r2
 800602e:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	697a      	ldr	r2, [r7, #20]
 8006034:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	68fa      	ldr	r2, [r7, #12]
 800603a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800603c:	683b      	ldr	r3, [r7, #0]
 800603e:	685a      	ldr	r2, [r3, #4]
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	693a      	ldr	r2, [r7, #16]
 8006048:	621a      	str	r2, [r3, #32]
}
 800604a:	bf00      	nop
 800604c:	371c      	adds	r7, #28
 800604e:	46bd      	mov	sp, r7
 8006050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006054:	4770      	bx	lr
 8006056:	bf00      	nop
 8006058:	40012c00 	.word	0x40012c00
 800605c:	40013400 	.word	0x40013400
 8006060:	40014000 	.word	0x40014000
 8006064:	40014400 	.word	0x40014400
 8006068:	40014800 	.word	0x40014800

0800606c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800606c:	b480      	push	{r7}
 800606e:	b087      	sub	sp, #28
 8006070:	af00      	add	r7, sp, #0
 8006072:	6078      	str	r0, [r7, #4]
 8006074:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	6a1b      	ldr	r3, [r3, #32]
 800607a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	6a1b      	ldr	r3, [r3, #32]
 8006080:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	685b      	ldr	r3, [r3, #4]
 800608c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006092:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800609a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800609e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80060a0:	683b      	ldr	r3, [r7, #0]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	68fa      	ldr	r2, [r7, #12]
 80060a6:	4313      	orrs	r3, r2
 80060a8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80060aa:	693b      	ldr	r3, [r7, #16]
 80060ac:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 80060b0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80060b2:	683b      	ldr	r3, [r7, #0]
 80060b4:	689b      	ldr	r3, [r3, #8]
 80060b6:	041b      	lsls	r3, r3, #16
 80060b8:	693a      	ldr	r2, [r7, #16]
 80060ba:	4313      	orrs	r3, r2
 80060bc:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	4a17      	ldr	r2, [pc, #92]	@ (8006120 <TIM_OC5_SetConfig+0xb4>)
 80060c2:	4293      	cmp	r3, r2
 80060c4:	d00f      	beq.n	80060e6 <TIM_OC5_SetConfig+0x7a>
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	4a16      	ldr	r2, [pc, #88]	@ (8006124 <TIM_OC5_SetConfig+0xb8>)
 80060ca:	4293      	cmp	r3, r2
 80060cc:	d00b      	beq.n	80060e6 <TIM_OC5_SetConfig+0x7a>
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	4a15      	ldr	r2, [pc, #84]	@ (8006128 <TIM_OC5_SetConfig+0xbc>)
 80060d2:	4293      	cmp	r3, r2
 80060d4:	d007      	beq.n	80060e6 <TIM_OC5_SetConfig+0x7a>
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	4a14      	ldr	r2, [pc, #80]	@ (800612c <TIM_OC5_SetConfig+0xc0>)
 80060da:	4293      	cmp	r3, r2
 80060dc:	d003      	beq.n	80060e6 <TIM_OC5_SetConfig+0x7a>
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	4a13      	ldr	r2, [pc, #76]	@ (8006130 <TIM_OC5_SetConfig+0xc4>)
 80060e2:	4293      	cmp	r3, r2
 80060e4:	d109      	bne.n	80060fa <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80060e6:	697b      	ldr	r3, [r7, #20]
 80060e8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80060ec:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80060ee:	683b      	ldr	r3, [r7, #0]
 80060f0:	695b      	ldr	r3, [r3, #20]
 80060f2:	021b      	lsls	r3, r3, #8
 80060f4:	697a      	ldr	r2, [r7, #20]
 80060f6:	4313      	orrs	r3, r2
 80060f8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	697a      	ldr	r2, [r7, #20]
 80060fe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	68fa      	ldr	r2, [r7, #12]
 8006104:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8006106:	683b      	ldr	r3, [r7, #0]
 8006108:	685a      	ldr	r2, [r3, #4]
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	693a      	ldr	r2, [r7, #16]
 8006112:	621a      	str	r2, [r3, #32]
}
 8006114:	bf00      	nop
 8006116:	371c      	adds	r7, #28
 8006118:	46bd      	mov	sp, r7
 800611a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800611e:	4770      	bx	lr
 8006120:	40012c00 	.word	0x40012c00
 8006124:	40013400 	.word	0x40013400
 8006128:	40014000 	.word	0x40014000
 800612c:	40014400 	.word	0x40014400
 8006130:	40014800 	.word	0x40014800

08006134 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006134:	b480      	push	{r7}
 8006136:	b087      	sub	sp, #28
 8006138:	af00      	add	r7, sp, #0
 800613a:	6078      	str	r0, [r7, #4]
 800613c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	6a1b      	ldr	r3, [r3, #32]
 8006142:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	6a1b      	ldr	r3, [r3, #32]
 8006148:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	685b      	ldr	r3, [r3, #4]
 8006154:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800615a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006162:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006166:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006168:	683b      	ldr	r3, [r7, #0]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	021b      	lsls	r3, r3, #8
 800616e:	68fa      	ldr	r2, [r7, #12]
 8006170:	4313      	orrs	r3, r2
 8006172:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8006174:	693b      	ldr	r3, [r7, #16]
 8006176:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800617a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800617c:	683b      	ldr	r3, [r7, #0]
 800617e:	689b      	ldr	r3, [r3, #8]
 8006180:	051b      	lsls	r3, r3, #20
 8006182:	693a      	ldr	r2, [r7, #16]
 8006184:	4313      	orrs	r3, r2
 8006186:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	4a18      	ldr	r2, [pc, #96]	@ (80061ec <TIM_OC6_SetConfig+0xb8>)
 800618c:	4293      	cmp	r3, r2
 800618e:	d00f      	beq.n	80061b0 <TIM_OC6_SetConfig+0x7c>
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	4a17      	ldr	r2, [pc, #92]	@ (80061f0 <TIM_OC6_SetConfig+0xbc>)
 8006194:	4293      	cmp	r3, r2
 8006196:	d00b      	beq.n	80061b0 <TIM_OC6_SetConfig+0x7c>
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	4a16      	ldr	r2, [pc, #88]	@ (80061f4 <TIM_OC6_SetConfig+0xc0>)
 800619c:	4293      	cmp	r3, r2
 800619e:	d007      	beq.n	80061b0 <TIM_OC6_SetConfig+0x7c>
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	4a15      	ldr	r2, [pc, #84]	@ (80061f8 <TIM_OC6_SetConfig+0xc4>)
 80061a4:	4293      	cmp	r3, r2
 80061a6:	d003      	beq.n	80061b0 <TIM_OC6_SetConfig+0x7c>
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	4a14      	ldr	r2, [pc, #80]	@ (80061fc <TIM_OC6_SetConfig+0xc8>)
 80061ac:	4293      	cmp	r3, r2
 80061ae:	d109      	bne.n	80061c4 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80061b0:	697b      	ldr	r3, [r7, #20]
 80061b2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80061b6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80061b8:	683b      	ldr	r3, [r7, #0]
 80061ba:	695b      	ldr	r3, [r3, #20]
 80061bc:	029b      	lsls	r3, r3, #10
 80061be:	697a      	ldr	r2, [r7, #20]
 80061c0:	4313      	orrs	r3, r2
 80061c2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	697a      	ldr	r2, [r7, #20]
 80061c8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	68fa      	ldr	r2, [r7, #12]
 80061ce:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80061d0:	683b      	ldr	r3, [r7, #0]
 80061d2:	685a      	ldr	r2, [r3, #4]
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	693a      	ldr	r2, [r7, #16]
 80061dc:	621a      	str	r2, [r3, #32]
}
 80061de:	bf00      	nop
 80061e0:	371c      	adds	r7, #28
 80061e2:	46bd      	mov	sp, r7
 80061e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061e8:	4770      	bx	lr
 80061ea:	bf00      	nop
 80061ec:	40012c00 	.word	0x40012c00
 80061f0:	40013400 	.word	0x40013400
 80061f4:	40014000 	.word	0x40014000
 80061f8:	40014400 	.word	0x40014400
 80061fc:	40014800 	.word	0x40014800

08006200 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8006200:	b480      	push	{r7}
 8006202:	b087      	sub	sp, #28
 8006204:	af00      	add	r7, sp, #0
 8006206:	60f8      	str	r0, [r7, #12]
 8006208:	60b9      	str	r1, [r7, #8]
 800620a:	607a      	str	r2, [r7, #4]
 800620c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	6a1b      	ldr	r3, [r3, #32]
 8006212:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	6a1b      	ldr	r3, [r3, #32]
 8006218:	f023 0201 	bic.w	r2, r3, #1
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	699b      	ldr	r3, [r3, #24]
 8006224:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	4a24      	ldr	r2, [pc, #144]	@ (80062bc <TIM_TI1_SetConfig+0xbc>)
 800622a:	4293      	cmp	r3, r2
 800622c:	d013      	beq.n	8006256 <TIM_TI1_SetConfig+0x56>
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006234:	d00f      	beq.n	8006256 <TIM_TI1_SetConfig+0x56>
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	4a21      	ldr	r2, [pc, #132]	@ (80062c0 <TIM_TI1_SetConfig+0xc0>)
 800623a:	4293      	cmp	r3, r2
 800623c:	d00b      	beq.n	8006256 <TIM_TI1_SetConfig+0x56>
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	4a20      	ldr	r2, [pc, #128]	@ (80062c4 <TIM_TI1_SetConfig+0xc4>)
 8006242:	4293      	cmp	r3, r2
 8006244:	d007      	beq.n	8006256 <TIM_TI1_SetConfig+0x56>
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	4a1f      	ldr	r2, [pc, #124]	@ (80062c8 <TIM_TI1_SetConfig+0xc8>)
 800624a:	4293      	cmp	r3, r2
 800624c:	d003      	beq.n	8006256 <TIM_TI1_SetConfig+0x56>
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	4a1e      	ldr	r2, [pc, #120]	@ (80062cc <TIM_TI1_SetConfig+0xcc>)
 8006252:	4293      	cmp	r3, r2
 8006254:	d101      	bne.n	800625a <TIM_TI1_SetConfig+0x5a>
 8006256:	2301      	movs	r3, #1
 8006258:	e000      	b.n	800625c <TIM_TI1_SetConfig+0x5c>
 800625a:	2300      	movs	r3, #0
 800625c:	2b00      	cmp	r3, #0
 800625e:	d008      	beq.n	8006272 <TIM_TI1_SetConfig+0x72>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8006260:	697b      	ldr	r3, [r7, #20]
 8006262:	f023 0303 	bic.w	r3, r3, #3
 8006266:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8006268:	697a      	ldr	r2, [r7, #20]
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	4313      	orrs	r3, r2
 800626e:	617b      	str	r3, [r7, #20]
 8006270:	e003      	b.n	800627a <TIM_TI1_SetConfig+0x7a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8006272:	697b      	ldr	r3, [r7, #20]
 8006274:	f043 0301 	orr.w	r3, r3, #1
 8006278:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800627a:	697b      	ldr	r3, [r7, #20]
 800627c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006280:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8006282:	683b      	ldr	r3, [r7, #0]
 8006284:	011b      	lsls	r3, r3, #4
 8006286:	b2db      	uxtb	r3, r3
 8006288:	697a      	ldr	r2, [r7, #20]
 800628a:	4313      	orrs	r3, r2
 800628c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800628e:	693b      	ldr	r3, [r7, #16]
 8006290:	f023 030a 	bic.w	r3, r3, #10
 8006294:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8006296:	68bb      	ldr	r3, [r7, #8]
 8006298:	f003 030a 	and.w	r3, r3, #10
 800629c:	693a      	ldr	r2, [r7, #16]
 800629e:	4313      	orrs	r3, r2
 80062a0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	697a      	ldr	r2, [r7, #20]
 80062a6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	693a      	ldr	r2, [r7, #16]
 80062ac:	621a      	str	r2, [r3, #32]
}
 80062ae:	bf00      	nop
 80062b0:	371c      	adds	r7, #28
 80062b2:	46bd      	mov	sp, r7
 80062b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062b8:	4770      	bx	lr
 80062ba:	bf00      	nop
 80062bc:	40012c00 	.word	0x40012c00
 80062c0:	40000400 	.word	0x40000400
 80062c4:	40000800 	.word	0x40000800
 80062c8:	40013400 	.word	0x40013400
 80062cc:	40014000 	.word	0x40014000

080062d0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80062d0:	b480      	push	{r7}
 80062d2:	b087      	sub	sp, #28
 80062d4:	af00      	add	r7, sp, #0
 80062d6:	60f8      	str	r0, [r7, #12]
 80062d8:	60b9      	str	r1, [r7, #8]
 80062da:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	6a1b      	ldr	r3, [r3, #32]
 80062e0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	6a1b      	ldr	r3, [r3, #32]
 80062e6:	f023 0201 	bic.w	r2, r3, #1
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	699b      	ldr	r3, [r3, #24]
 80062f2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80062f4:	693b      	ldr	r3, [r7, #16]
 80062f6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80062fa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	011b      	lsls	r3, r3, #4
 8006300:	693a      	ldr	r2, [r7, #16]
 8006302:	4313      	orrs	r3, r2
 8006304:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006306:	697b      	ldr	r3, [r7, #20]
 8006308:	f023 030a 	bic.w	r3, r3, #10
 800630c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800630e:	697a      	ldr	r2, [r7, #20]
 8006310:	68bb      	ldr	r3, [r7, #8]
 8006312:	4313      	orrs	r3, r2
 8006314:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	693a      	ldr	r2, [r7, #16]
 800631a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	697a      	ldr	r2, [r7, #20]
 8006320:	621a      	str	r2, [r3, #32]
}
 8006322:	bf00      	nop
 8006324:	371c      	adds	r7, #28
 8006326:	46bd      	mov	sp, r7
 8006328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800632c:	4770      	bx	lr

0800632e <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800632e:	b480      	push	{r7}
 8006330:	b087      	sub	sp, #28
 8006332:	af00      	add	r7, sp, #0
 8006334:	60f8      	str	r0, [r7, #12]
 8006336:	60b9      	str	r1, [r7, #8]
 8006338:	607a      	str	r2, [r7, #4]
 800633a:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	6a1b      	ldr	r3, [r3, #32]
 8006340:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	6a1b      	ldr	r3, [r3, #32]
 8006346:	f023 0210 	bic.w	r2, r3, #16
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	699b      	ldr	r3, [r3, #24]
 8006352:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8006354:	693b      	ldr	r3, [r7, #16]
 8006356:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800635a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	021b      	lsls	r3, r3, #8
 8006360:	693a      	ldr	r2, [r7, #16]
 8006362:	4313      	orrs	r3, r2
 8006364:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006366:	693b      	ldr	r3, [r7, #16]
 8006368:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800636c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800636e:	683b      	ldr	r3, [r7, #0]
 8006370:	031b      	lsls	r3, r3, #12
 8006372:	b29b      	uxth	r3, r3
 8006374:	693a      	ldr	r2, [r7, #16]
 8006376:	4313      	orrs	r3, r2
 8006378:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800637a:	697b      	ldr	r3, [r7, #20]
 800637c:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8006380:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8006382:	68bb      	ldr	r3, [r7, #8]
 8006384:	011b      	lsls	r3, r3, #4
 8006386:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 800638a:	697a      	ldr	r2, [r7, #20]
 800638c:	4313      	orrs	r3, r2
 800638e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	693a      	ldr	r2, [r7, #16]
 8006394:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	697a      	ldr	r2, [r7, #20]
 800639a:	621a      	str	r2, [r3, #32]
}
 800639c:	bf00      	nop
 800639e:	371c      	adds	r7, #28
 80063a0:	46bd      	mov	sp, r7
 80063a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063a6:	4770      	bx	lr

080063a8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80063a8:	b480      	push	{r7}
 80063aa:	b087      	sub	sp, #28
 80063ac:	af00      	add	r7, sp, #0
 80063ae:	60f8      	str	r0, [r7, #12]
 80063b0:	60b9      	str	r1, [r7, #8]
 80063b2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	6a1b      	ldr	r3, [r3, #32]
 80063b8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	6a1b      	ldr	r3, [r3, #32]
 80063be:	f023 0210 	bic.w	r2, r3, #16
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	699b      	ldr	r3, [r3, #24]
 80063ca:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80063cc:	693b      	ldr	r3, [r7, #16]
 80063ce:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80063d2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	031b      	lsls	r3, r3, #12
 80063d8:	693a      	ldr	r2, [r7, #16]
 80063da:	4313      	orrs	r3, r2
 80063dc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80063de:	697b      	ldr	r3, [r7, #20]
 80063e0:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80063e4:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80063e6:	68bb      	ldr	r3, [r7, #8]
 80063e8:	011b      	lsls	r3, r3, #4
 80063ea:	697a      	ldr	r2, [r7, #20]
 80063ec:	4313      	orrs	r3, r2
 80063ee:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	693a      	ldr	r2, [r7, #16]
 80063f4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	697a      	ldr	r2, [r7, #20]
 80063fa:	621a      	str	r2, [r3, #32]
}
 80063fc:	bf00      	nop
 80063fe:	371c      	adds	r7, #28
 8006400:	46bd      	mov	sp, r7
 8006402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006406:	4770      	bx	lr

08006408 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006408:	b480      	push	{r7}
 800640a:	b087      	sub	sp, #28
 800640c:	af00      	add	r7, sp, #0
 800640e:	60f8      	str	r0, [r7, #12]
 8006410:	60b9      	str	r1, [r7, #8]
 8006412:	607a      	str	r2, [r7, #4]
 8006414:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	6a1b      	ldr	r3, [r3, #32]
 800641a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	6a1b      	ldr	r3, [r3, #32]
 8006420:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	69db      	ldr	r3, [r3, #28]
 800642c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800642e:	693b      	ldr	r3, [r7, #16]
 8006430:	f023 0303 	bic.w	r3, r3, #3
 8006434:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 8006436:	693a      	ldr	r2, [r7, #16]
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	4313      	orrs	r3, r2
 800643c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800643e:	693b      	ldr	r3, [r7, #16]
 8006440:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006444:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8006446:	683b      	ldr	r3, [r7, #0]
 8006448:	011b      	lsls	r3, r3, #4
 800644a:	b2db      	uxtb	r3, r3
 800644c:	693a      	ldr	r2, [r7, #16]
 800644e:	4313      	orrs	r3, r2
 8006450:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8006452:	697b      	ldr	r3, [r7, #20]
 8006454:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 8006458:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800645a:	68bb      	ldr	r3, [r7, #8]
 800645c:	021b      	lsls	r3, r3, #8
 800645e:	f403 6320 	and.w	r3, r3, #2560	@ 0xa00
 8006462:	697a      	ldr	r2, [r7, #20]
 8006464:	4313      	orrs	r3, r2
 8006466:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	693a      	ldr	r2, [r7, #16]
 800646c:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	697a      	ldr	r2, [r7, #20]
 8006472:	621a      	str	r2, [r3, #32]
}
 8006474:	bf00      	nop
 8006476:	371c      	adds	r7, #28
 8006478:	46bd      	mov	sp, r7
 800647a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800647e:	4770      	bx	lr

08006480 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006480:	b480      	push	{r7}
 8006482:	b087      	sub	sp, #28
 8006484:	af00      	add	r7, sp, #0
 8006486:	60f8      	str	r0, [r7, #12]
 8006488:	60b9      	str	r1, [r7, #8]
 800648a:	607a      	str	r2, [r7, #4]
 800648c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	6a1b      	ldr	r3, [r3, #32]
 8006492:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	6a1b      	ldr	r3, [r3, #32]
 8006498:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	69db      	ldr	r3, [r3, #28]
 80064a4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 80064a6:	693b      	ldr	r3, [r7, #16]
 80064a8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80064ac:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	021b      	lsls	r3, r3, #8
 80064b2:	693a      	ldr	r2, [r7, #16]
 80064b4:	4313      	orrs	r3, r2
 80064b6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 80064b8:	693b      	ldr	r3, [r7, #16]
 80064ba:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80064be:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 80064c0:	683b      	ldr	r3, [r7, #0]
 80064c2:	031b      	lsls	r3, r3, #12
 80064c4:	b29b      	uxth	r3, r3
 80064c6:	693a      	ldr	r2, [r7, #16]
 80064c8:	4313      	orrs	r3, r2
 80064ca:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 80064cc:	697b      	ldr	r3, [r7, #20]
 80064ce:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 80064d2:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 80064d4:	68bb      	ldr	r3, [r7, #8]
 80064d6:	031b      	lsls	r3, r3, #12
 80064d8:	f403 4320 	and.w	r3, r3, #40960	@ 0xa000
 80064dc:	697a      	ldr	r2, [r7, #20]
 80064de:	4313      	orrs	r3, r2
 80064e0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	693a      	ldr	r2, [r7, #16]
 80064e6:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	697a      	ldr	r2, [r7, #20]
 80064ec:	621a      	str	r2, [r3, #32]
}
 80064ee:	bf00      	nop
 80064f0:	371c      	adds	r7, #28
 80064f2:	46bd      	mov	sp, r7
 80064f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064f8:	4770      	bx	lr

080064fa <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80064fa:	b480      	push	{r7}
 80064fc:	b085      	sub	sp, #20
 80064fe:	af00      	add	r7, sp, #0
 8006500:	6078      	str	r0, [r7, #4]
 8006502:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	689b      	ldr	r3, [r3, #8]
 8006508:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006510:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006512:	683a      	ldr	r2, [r7, #0]
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	4313      	orrs	r3, r2
 8006518:	f043 0307 	orr.w	r3, r3, #7
 800651c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	68fa      	ldr	r2, [r7, #12]
 8006522:	609a      	str	r2, [r3, #8]
}
 8006524:	bf00      	nop
 8006526:	3714      	adds	r7, #20
 8006528:	46bd      	mov	sp, r7
 800652a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800652e:	4770      	bx	lr

08006530 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006530:	b480      	push	{r7}
 8006532:	b087      	sub	sp, #28
 8006534:	af00      	add	r7, sp, #0
 8006536:	60f8      	str	r0, [r7, #12]
 8006538:	60b9      	str	r1, [r7, #8]
 800653a:	607a      	str	r2, [r7, #4]
 800653c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	689b      	ldr	r3, [r3, #8]
 8006542:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006544:	697b      	ldr	r3, [r7, #20]
 8006546:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800654a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800654c:	683b      	ldr	r3, [r7, #0]
 800654e:	021a      	lsls	r2, r3, #8
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	431a      	orrs	r2, r3
 8006554:	68bb      	ldr	r3, [r7, #8]
 8006556:	4313      	orrs	r3, r2
 8006558:	697a      	ldr	r2, [r7, #20]
 800655a:	4313      	orrs	r3, r2
 800655c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	697a      	ldr	r2, [r7, #20]
 8006562:	609a      	str	r2, [r3, #8]
}
 8006564:	bf00      	nop
 8006566:	371c      	adds	r7, #28
 8006568:	46bd      	mov	sp, r7
 800656a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800656e:	4770      	bx	lr

08006570 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006570:	b480      	push	{r7}
 8006572:	b087      	sub	sp, #28
 8006574:	af00      	add	r7, sp, #0
 8006576:	60f8      	str	r0, [r7, #12]
 8006578:	60b9      	str	r1, [r7, #8]
 800657a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800657c:	68bb      	ldr	r3, [r7, #8]
 800657e:	f003 031f 	and.w	r3, r3, #31
 8006582:	2201      	movs	r2, #1
 8006584:	fa02 f303 	lsl.w	r3, r2, r3
 8006588:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	6a1a      	ldr	r2, [r3, #32]
 800658e:	697b      	ldr	r3, [r7, #20]
 8006590:	43db      	mvns	r3, r3
 8006592:	401a      	ands	r2, r3
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	6a1a      	ldr	r2, [r3, #32]
 800659c:	68bb      	ldr	r3, [r7, #8]
 800659e:	f003 031f 	and.w	r3, r3, #31
 80065a2:	6879      	ldr	r1, [r7, #4]
 80065a4:	fa01 f303 	lsl.w	r3, r1, r3
 80065a8:	431a      	orrs	r2, r3
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	621a      	str	r2, [r3, #32]
}
 80065ae:	bf00      	nop
 80065b0:	371c      	adds	r7, #28
 80065b2:	46bd      	mov	sp, r7
 80065b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065b8:	4770      	bx	lr
	...

080065bc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80065bc:	b480      	push	{r7}
 80065be:	b085      	sub	sp, #20
 80065c0:	af00      	add	r7, sp, #0
 80065c2:	6078      	str	r0, [r7, #4]
 80065c4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80065cc:	2b01      	cmp	r3, #1
 80065ce:	d101      	bne.n	80065d4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80065d0:	2302      	movs	r3, #2
 80065d2:	e063      	b.n	800669c <HAL_TIMEx_MasterConfigSynchronization+0xe0>
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	2201      	movs	r2, #1
 80065d8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	2202      	movs	r2, #2
 80065e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	685b      	ldr	r3, [r3, #4]
 80065ea:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	689b      	ldr	r3, [r3, #8]
 80065f2:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	4a2b      	ldr	r2, [pc, #172]	@ (80066a8 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80065fa:	4293      	cmp	r3, r2
 80065fc:	d004      	beq.n	8006608 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	4a2a      	ldr	r2, [pc, #168]	@ (80066ac <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006604:	4293      	cmp	r3, r2
 8006606:	d108      	bne.n	800661a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800660e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006610:	683b      	ldr	r3, [r7, #0]
 8006612:	685b      	ldr	r3, [r3, #4]
 8006614:	68fa      	ldr	r2, [r7, #12]
 8006616:	4313      	orrs	r3, r2
 8006618:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006620:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006622:	683b      	ldr	r3, [r7, #0]
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	68fa      	ldr	r2, [r7, #12]
 8006628:	4313      	orrs	r3, r2
 800662a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	68fa      	ldr	r2, [r7, #12]
 8006632:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	4a1b      	ldr	r2, [pc, #108]	@ (80066a8 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800663a:	4293      	cmp	r3, r2
 800663c:	d018      	beq.n	8006670 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006646:	d013      	beq.n	8006670 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	4a18      	ldr	r2, [pc, #96]	@ (80066b0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800664e:	4293      	cmp	r3, r2
 8006650:	d00e      	beq.n	8006670 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	4a17      	ldr	r2, [pc, #92]	@ (80066b4 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8006658:	4293      	cmp	r3, r2
 800665a:	d009      	beq.n	8006670 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	4a12      	ldr	r2, [pc, #72]	@ (80066ac <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006662:	4293      	cmp	r3, r2
 8006664:	d004      	beq.n	8006670 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	4a13      	ldr	r2, [pc, #76]	@ (80066b8 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800666c:	4293      	cmp	r3, r2
 800666e:	d10c      	bne.n	800668a <HAL_TIMEx_MasterConfigSynchronization+0xce>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006670:	68bb      	ldr	r3, [r7, #8]
 8006672:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006676:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006678:	683b      	ldr	r3, [r7, #0]
 800667a:	689b      	ldr	r3, [r3, #8]
 800667c:	68ba      	ldr	r2, [r7, #8]
 800667e:	4313      	orrs	r3, r2
 8006680:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	68ba      	ldr	r2, [r7, #8]
 8006688:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	2201      	movs	r2, #1
 800668e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	2200      	movs	r2, #0
 8006696:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800669a:	2300      	movs	r3, #0
}
 800669c:	4618      	mov	r0, r3
 800669e:	3714      	adds	r7, #20
 80066a0:	46bd      	mov	sp, r7
 80066a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066a6:	4770      	bx	lr
 80066a8:	40012c00 	.word	0x40012c00
 80066ac:	40013400 	.word	0x40013400
 80066b0:	40000400 	.word	0x40000400
 80066b4:	40000800 	.word	0x40000800
 80066b8:	40014000 	.word	0x40014000

080066bc <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80066bc:	b480      	push	{r7}
 80066be:	b083      	sub	sp, #12
 80066c0:	af00      	add	r7, sp, #0
 80066c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80066c4:	bf00      	nop
 80066c6:	370c      	adds	r7, #12
 80066c8:	46bd      	mov	sp, r7
 80066ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ce:	4770      	bx	lr

080066d0 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80066d0:	b480      	push	{r7}
 80066d2:	b083      	sub	sp, #12
 80066d4:	af00      	add	r7, sp, #0
 80066d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80066d8:	bf00      	nop
 80066da:	370c      	adds	r7, #12
 80066dc:	46bd      	mov	sp, r7
 80066de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066e2:	4770      	bx	lr

080066e4 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80066e4:	b480      	push	{r7}
 80066e6:	b083      	sub	sp, #12
 80066e8:	af00      	add	r7, sp, #0
 80066ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80066ec:	bf00      	nop
 80066ee:	370c      	adds	r7, #12
 80066f0:	46bd      	mov	sp, r7
 80066f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066f6:	4770      	bx	lr

080066f8 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 80066f8:	b480      	push	{r7}
 80066fa:	b085      	sub	sp, #20
 80066fc:	af00      	add	r7, sp, #0
 80066fe:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8006700:	f44f 433f 	mov.w	r3, #48896	@ 0xbf00
 8006704:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800670c:	b29a      	uxth	r2, r3
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	b29b      	uxth	r3, r3
 8006712:	43db      	mvns	r3, r3
 8006714:	b29b      	uxth	r3, r3
 8006716:	4013      	ands	r3, r2
 8006718:	b29a      	uxth	r2, r3
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8006720:	2300      	movs	r3, #0
}
 8006722:	4618      	mov	r0, r3
 8006724:	3714      	adds	r7, #20
 8006726:	46bd      	mov	sp, r7
 8006728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800672c:	4770      	bx	lr

0800672e <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800672e:	b480      	push	{r7}
 8006730:	b085      	sub	sp, #20
 8006732:	af00      	add	r7, sp, #0
 8006734:	60f8      	str	r0, [r7, #12]
 8006736:	1d3b      	adds	r3, r7, #4
 8006738:	e883 0006 	stmia.w	r3, {r1, r2}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	2201      	movs	r2, #1
 8006740:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	2200      	movs	r2, #0
 8006748:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	2200      	movs	r2, #0
 8006750:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	2200      	movs	r2, #0
 8006758:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 800675c:	2300      	movs	r3, #0
}
 800675e:	4618      	mov	r0, r3
 8006760:	3714      	adds	r7, #20
 8006762:	46bd      	mov	sp, r7
 8006764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006768:	4770      	bx	lr

0800676a <memset>:
 800676a:	4402      	add	r2, r0
 800676c:	4603      	mov	r3, r0
 800676e:	4293      	cmp	r3, r2
 8006770:	d100      	bne.n	8006774 <memset+0xa>
 8006772:	4770      	bx	lr
 8006774:	f803 1b01 	strb.w	r1, [r3], #1
 8006778:	e7f9      	b.n	800676e <memset+0x4>
	...

0800677c <__libc_init_array>:
 800677c:	b570      	push	{r4, r5, r6, lr}
 800677e:	4d0d      	ldr	r5, [pc, #52]	@ (80067b4 <__libc_init_array+0x38>)
 8006780:	4c0d      	ldr	r4, [pc, #52]	@ (80067b8 <__libc_init_array+0x3c>)
 8006782:	1b64      	subs	r4, r4, r5
 8006784:	10a4      	asrs	r4, r4, #2
 8006786:	2600      	movs	r6, #0
 8006788:	42a6      	cmp	r6, r4
 800678a:	d109      	bne.n	80067a0 <__libc_init_array+0x24>
 800678c:	4d0b      	ldr	r5, [pc, #44]	@ (80067bc <__libc_init_array+0x40>)
 800678e:	4c0c      	ldr	r4, [pc, #48]	@ (80067c0 <__libc_init_array+0x44>)
 8006790:	f000 f818 	bl	80067c4 <_init>
 8006794:	1b64      	subs	r4, r4, r5
 8006796:	10a4      	asrs	r4, r4, #2
 8006798:	2600      	movs	r6, #0
 800679a:	42a6      	cmp	r6, r4
 800679c:	d105      	bne.n	80067aa <__libc_init_array+0x2e>
 800679e:	bd70      	pop	{r4, r5, r6, pc}
 80067a0:	f855 3b04 	ldr.w	r3, [r5], #4
 80067a4:	4798      	blx	r3
 80067a6:	3601      	adds	r6, #1
 80067a8:	e7ee      	b.n	8006788 <__libc_init_array+0xc>
 80067aa:	f855 3b04 	ldr.w	r3, [r5], #4
 80067ae:	4798      	blx	r3
 80067b0:	3601      	adds	r6, #1
 80067b2:	e7f2      	b.n	800679a <__libc_init_array+0x1e>
 80067b4:	08006824 	.word	0x08006824
 80067b8:	08006824 	.word	0x08006824
 80067bc:	08006824 	.word	0x08006824
 80067c0:	08006828 	.word	0x08006828

080067c4 <_init>:
 80067c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80067c6:	bf00      	nop
 80067c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80067ca:	bc08      	pop	{r3}
 80067cc:	469e      	mov	lr, r3
 80067ce:	4770      	bx	lr

080067d0 <_fini>:
 80067d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80067d2:	bf00      	nop
 80067d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80067d6:	bc08      	pop	{r3}
 80067d8:	469e      	mov	lr, r3
 80067da:	4770      	bx	lr
