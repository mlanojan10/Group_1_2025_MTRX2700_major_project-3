
Major Project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000015b8  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000174  08001758  08001758  00002758  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080018cc  080018cc  00003084  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080018cc  080018cc  000028cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080018d4  080018d4  00003084  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080018d4  080018d4  000028d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080018d8  080018d8  000028d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000084  20000000  080018dc  00003000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00003084  2**0
                  CONTENTS
 10 .bss          0000016c  20000084  20000084  00003084  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200001f0  200001f0  00003084  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00003084  2**0
                  CONTENTS, READONLY
 13 .debug_info   00001141  00000000  00000000  000030b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000642  00000000  00000000  000041f5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000178  00000000  00000000  00004838  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000103  00000000  00000000  000049b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00016c5d  00000000  00000000  00004ab3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00001c52  00000000  00000000  0001b710  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0007808f  00000000  00000000  0001d362  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000953f1  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000d04  00000000  00000000  00095434  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000007d  00000000  00000000  00096138  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000084 	.word	0x20000084
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08001740 	.word	0x08001740

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000088 	.word	0x20000088
 80001dc:	08001740 	.word	0x08001740

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__io_putchar>:

#include "uart.h"
#include "stm32f303xc.h"

// === UART redirection ===
int __io_putchar(int ch) {
 8000280:	b580      	push	{r7, lr}
 8000282:	b082      	sub	sp, #8
 8000284:	af00      	add	r7, sp, #0
 8000286:	6078      	str	r0, [r7, #4]
    SerialOutputChar((uint8_t)ch, &USART1_PORT);
 8000288:	687b      	ldr	r3, [r7, #4]
 800028a:	b2db      	uxtb	r3, r3
 800028c:	4904      	ldr	r1, [pc, #16]	@ (80002a0 <__io_putchar+0x20>)
 800028e:	4618      	mov	r0, r3
 8000290:	f000 fa36 	bl	8000700 <SerialOutputChar>
    return ch;
 8000294:	687b      	ldr	r3, [r7, #4]
}
 8000296:	4618      	mov	r0, r3
 8000298:	3708      	adds	r7, #8
 800029a:	46bd      	mov	sp, r7
 800029c:	bd80      	pop	{r7, pc}
 800029e:	bf00      	nop
 80002a0:	20000000 	.word	0x20000000

080002a4 <__io_getchar>:

int __io_getchar(void) {
 80002a4:	b580      	push	{r7, lr}
 80002a6:	af00      	add	r7, sp, #0
    return SerialGetChar(&USART1_PORT);
 80002a8:	4802      	ldr	r0, [pc, #8]	@ (80002b4 <__io_getchar+0x10>)
 80002aa:	f000 fa42 	bl	8000732 <SerialGetChar>
 80002ae:	4603      	mov	r3, r0
}
 80002b0:	4618      	mov	r0, r3
 80002b2:	bd80      	pop	{r7, pc}
 80002b4:	20000000 	.word	0x20000000

080002b8 <initialise_PA1_as_input>:
void initialise_PA1_as_input(void);
void initialise_PE8_as_output(void);
void delay_ms(uint32_t ms);

// === GPIO Setup ===
void initialise_PA1_as_input(void) {
 80002b8:	b480      	push	{r7}
 80002ba:	af00      	add	r7, sp, #0
    RCC->AHBENR |= RCC_AHBENR_GPIOAEN;
 80002bc:	4b0d      	ldr	r3, [pc, #52]	@ (80002f4 <initialise_PA1_as_input+0x3c>)
 80002be:	695b      	ldr	r3, [r3, #20]
 80002c0:	4a0c      	ldr	r2, [pc, #48]	@ (80002f4 <initialise_PA1_as_input+0x3c>)
 80002c2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80002c6:	6153      	str	r3, [r2, #20]
    GPIOA->MODER &= ~(3 << (1 * 2));
 80002c8:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80002cc:	681b      	ldr	r3, [r3, #0]
 80002ce:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 80002d2:	f023 030c 	bic.w	r3, r3, #12
 80002d6:	6013      	str	r3, [r2, #0]
    GPIOA->PUPDR &= ~(3 << (1 * 2));
 80002d8:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80002dc:	68db      	ldr	r3, [r3, #12]
 80002de:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 80002e2:	f023 030c 	bic.w	r3, r3, #12
 80002e6:	60d3      	str	r3, [r2, #12]
}
 80002e8:	bf00      	nop
 80002ea:	46bd      	mov	sp, r7
 80002ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002f0:	4770      	bx	lr
 80002f2:	bf00      	nop
 80002f4:	40021000 	.word	0x40021000

080002f8 <initialise_PE8_as_output>:

void initialise_PE8_as_output(void) {
 80002f8:	b480      	push	{r7}
 80002fa:	af00      	add	r7, sp, #0
    RCC->AHBENR |= RCC_AHBENR_GPIOEEN;
 80002fc:	4b0b      	ldr	r3, [pc, #44]	@ (800032c <initialise_PE8_as_output+0x34>)
 80002fe:	695b      	ldr	r3, [r3, #20]
 8000300:	4a0a      	ldr	r2, [pc, #40]	@ (800032c <initialise_PE8_as_output+0x34>)
 8000302:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000306:	6153      	str	r3, [r2, #20]
    GPIOE->MODER &= ~(3 << (8 * 2));
 8000308:	4b09      	ldr	r3, [pc, #36]	@ (8000330 <initialise_PE8_as_output+0x38>)
 800030a:	681b      	ldr	r3, [r3, #0]
 800030c:	4a08      	ldr	r2, [pc, #32]	@ (8000330 <initialise_PE8_as_output+0x38>)
 800030e:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 8000312:	6013      	str	r3, [r2, #0]
    GPIOE->MODER |= (1 << (8 * 2));
 8000314:	4b06      	ldr	r3, [pc, #24]	@ (8000330 <initialise_PE8_as_output+0x38>)
 8000316:	681b      	ldr	r3, [r3, #0]
 8000318:	4a05      	ldr	r2, [pc, #20]	@ (8000330 <initialise_PE8_as_output+0x38>)
 800031a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800031e:	6013      	str	r3, [r2, #0]
}
 8000320:	bf00      	nop
 8000322:	46bd      	mov	sp, r7
 8000324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000328:	4770      	bx	lr
 800032a:	bf00      	nop
 800032c:	40021000 	.word	0x40021000
 8000330:	48001000 	.word	0x48001000

08000334 <delay_ms>:

// === Crude Delay ===
void delay_ms(uint32_t ms) {
 8000334:	b480      	push	{r7}
 8000336:	b085      	sub	sp, #20
 8000338:	af00      	add	r7, sp, #0
 800033a:	6078      	str	r0, [r7, #4]
    for (volatile uint32_t i = 0; i < ms * 600; i++);
 800033c:	2300      	movs	r3, #0
 800033e:	60fb      	str	r3, [r7, #12]
 8000340:	e002      	b.n	8000348 <delay_ms+0x14>
 8000342:	68fb      	ldr	r3, [r7, #12]
 8000344:	3301      	adds	r3, #1
 8000346:	60fb      	str	r3, [r7, #12]
 8000348:	687b      	ldr	r3, [r7, #4]
 800034a:	f44f 7216 	mov.w	r2, #600	@ 0x258
 800034e:	fb03 f202 	mul.w	r2, r3, r2
 8000352:	68fb      	ldr	r3, [r7, #12]
 8000354:	429a      	cmp	r2, r3
 8000356:	d8f4      	bhi.n	8000342 <delay_ms+0xe>
}
 8000358:	bf00      	nop
 800035a:	bf00      	nop
 800035c:	3714      	adds	r7, #20
 800035e:	46bd      	mov	sp, r7
 8000360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000364:	4770      	bx	lr
	...

08000368 <main>:

// === MAIN GAME ===
int main(void) {
 8000368:	b580      	push	{r7, lr}
 800036a:	b086      	sub	sp, #24
 800036c:	af00      	add	r7, sp, #0
    initialise_PA1_as_input();
 800036e:	f7ff ffa3 	bl	80002b8 <initialise_PA1_as_input>
    initialise_PE8_as_output();
 8000372:	f7ff ffc1 	bl	80002f8 <initialise_PE8_as_output>
    SerialInitialise(BAUD_115200, &USART1_PORT, NULL);
 8000376:	2200      	movs	r2, #0
 8000378:	4942      	ldr	r1, [pc, #264]	@ (8000484 <main+0x11c>)
 800037a:	2004      	movs	r0, #4
 800037c:	f000 f942 	bl	8000604 <SerialInitialise>

    // One hardcoded math question
    int a = 12;
 8000380:	230c      	movs	r3, #12
 8000382:	617b      	str	r3, [r7, #20]
    int b = 9;
 8000384:	2309      	movs	r3, #9
 8000386:	613b      	str	r3, [r7, #16]
    int result = a + b;
 8000388:	697a      	ldr	r2, [r7, #20]
 800038a:	693b      	ldr	r3, [r7, #16]
 800038c:	4413      	add	r3, r2
 800038e:	60fb      	str	r3, [r7, #12]

    printf("\r");
 8000390:	200d      	movs	r0, #13
 8000392:	f000 fae3 	bl	800095c <putchar>
    delay_ms(1000);
 8000396:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800039a:	f7ff ffcb 	bl	8000334 <delay_ms>
    printf("=== Crack the code ===\r\n");
 800039e:	483a      	ldr	r0, [pc, #232]	@ (8000488 <main+0x120>)
 80003a0:	f000 fb3a 	bl	8000a18 <puts>
    printf("To crack the code and open the treasure chest, you must solve these questions and answer within 3s\r\n");
 80003a4:	4839      	ldr	r0, [pc, #228]	@ (800048c <main+0x124>)
 80003a6:	f000 fb37 	bl	8000a18 <puts>
    printf("Odd answer = Twist LEFT\r\n");
 80003aa:	4839      	ldr	r0, [pc, #228]	@ (8000490 <main+0x128>)
 80003ac:	f000 fb34 	bl	8000a18 <puts>
    printf("Even answer = Twist RIGHT\r\n");
 80003b0:	4838      	ldr	r0, [pc, #224]	@ (8000494 <main+0x12c>)
 80003b2:	f000 fb31 	bl	8000a18 <puts>
    printf("Press ENTER to begin...\r\n");
 80003b6:	4838      	ldr	r0, [pc, #224]	@ (8000498 <main+0x130>)
 80003b8:	f000 fb2e 	bl	8000a18 <puts>

    // Wait for Enter key (CR = '\r' or LF = '\n')
    while (1) {
        char c = __io_getchar();
 80003bc:	f7ff ff72 	bl	80002a4 <__io_getchar>
 80003c0:	4603      	mov	r3, r0
 80003c2:	72fb      	strb	r3, [r7, #11]
        if (c == '\r' || c == '\n') break;
 80003c4:	7afb      	ldrb	r3, [r7, #11]
 80003c6:	2b0d      	cmp	r3, #13
 80003c8:	d003      	beq.n	80003d2 <main+0x6a>
 80003ca:	7afb      	ldrb	r3, [r7, #11]
 80003cc:	2b0a      	cmp	r3, #10
 80003ce:	d000      	beq.n	80003d2 <main+0x6a>
    while (1) {
 80003d0:	e7f4      	b.n	80003bc <main+0x54>
    }
    printf("Ready???\r\n\r\n");
 80003d2:	4832      	ldr	r0, [pc, #200]	@ (800049c <main+0x134>)
 80003d4:	f000 fb20 	bl	8000a18 <puts>
    delay_ms(1000);
 80003d8:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80003dc:	f7ff ffaa 	bl	8000334 <delay_ms>
    printf("GOOOOO!!!\r\n\r\n");
 80003e0:	482f      	ldr	r0, [pc, #188]	@ (80004a0 <main+0x138>)
 80003e2:	f000 fb19 	bl	8000a18 <puts>

    printf("Question: %d + %d = ?\r\n", a, b);
 80003e6:	693a      	ldr	r2, [r7, #16]
 80003e8:	6979      	ldr	r1, [r7, #20]
 80003ea:	482e      	ldr	r0, [pc, #184]	@ (80004a4 <main+0x13c>)
 80003ec:	f000 faa4 	bl	8000938 <iprintf>

    delay_ms(3000);  // Wait 3 seconds
 80003f0:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 80003f4:	f7ff ff9e 	bl	8000334 <delay_ms>

    uint8_t input_state = (GPIOA->IDR & (1 << 1)) ? 1 : 0;
 80003f8:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80003fc:	691b      	ldr	r3, [r3, #16]
 80003fe:	f003 0302 	and.w	r3, r3, #2
 8000402:	2b00      	cmp	r3, #0
 8000404:	bf14      	ite	ne
 8000406:	2301      	movne	r3, #1
 8000408:	2300      	moveq	r3, #0
 800040a:	b2db      	uxtb	r3, r3
 800040c:	72bb      	strb	r3, [r7, #10]
    int is_even = (result % 2 == 0);
 800040e:	68fb      	ldr	r3, [r7, #12]
 8000410:	f003 0301 	and.w	r3, r3, #1
 8000414:	2b00      	cmp	r3, #0
 8000416:	bf0c      	ite	eq
 8000418:	2301      	moveq	r3, #1
 800041a:	2300      	movne	r3, #0
 800041c:	b2db      	uxtb	r3, r3
 800041e:	607b      	str	r3, [r7, #4]

    if ((is_even && input_state == 1) || (!is_even && input_state == 0)) {
 8000420:	687b      	ldr	r3, [r7, #4]
 8000422:	2b00      	cmp	r3, #0
 8000424:	d002      	beq.n	800042c <main+0xc4>
 8000426:	7abb      	ldrb	r3, [r7, #10]
 8000428:	2b01      	cmp	r3, #1
 800042a:	d005      	beq.n	8000438 <main+0xd0>
 800042c:	687b      	ldr	r3, [r7, #4]
 800042e:	2b00      	cmp	r3, #0
 8000430:	d114      	bne.n	800045c <main+0xf4>
 8000432:	7abb      	ldrb	r3, [r7, #10]
 8000434:	2b00      	cmp	r3, #0
 8000436:	d111      	bne.n	800045c <main+0xf4>
        printf("Correct! %d is %s.\r\n", result, is_even ? "even" : "odd");
 8000438:	687b      	ldr	r3, [r7, #4]
 800043a:	2b00      	cmp	r3, #0
 800043c:	d001      	beq.n	8000442 <main+0xda>
 800043e:	4b1a      	ldr	r3, [pc, #104]	@ (80004a8 <main+0x140>)
 8000440:	e000      	b.n	8000444 <main+0xdc>
 8000442:	4b1a      	ldr	r3, [pc, #104]	@ (80004ac <main+0x144>)
 8000444:	461a      	mov	r2, r3
 8000446:	68f9      	ldr	r1, [r7, #12]
 8000448:	4819      	ldr	r0, [pc, #100]	@ (80004b0 <main+0x148>)
 800044a:	f000 fa75 	bl	8000938 <iprintf>
        GPIOE->ODR |= (1 << 8);  // Light up LED
 800044e:	4b19      	ldr	r3, [pc, #100]	@ (80004b4 <main+0x14c>)
 8000450:	695b      	ldr	r3, [r3, #20]
 8000452:	4a18      	ldr	r2, [pc, #96]	@ (80004b4 <main+0x14c>)
 8000454:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000458:	6153      	str	r3, [r2, #20]
 800045a:	e010      	b.n	800047e <main+0x116>
    } else {
        printf("Incorrect. %d is %s.\r\n", result, is_even ? "even" : "odd");
 800045c:	687b      	ldr	r3, [r7, #4]
 800045e:	2b00      	cmp	r3, #0
 8000460:	d001      	beq.n	8000466 <main+0xfe>
 8000462:	4b11      	ldr	r3, [pc, #68]	@ (80004a8 <main+0x140>)
 8000464:	e000      	b.n	8000468 <main+0x100>
 8000466:	4b11      	ldr	r3, [pc, #68]	@ (80004ac <main+0x144>)
 8000468:	461a      	mov	r2, r3
 800046a:	68f9      	ldr	r1, [r7, #12]
 800046c:	4812      	ldr	r0, [pc, #72]	@ (80004b8 <main+0x150>)
 800046e:	f000 fa63 	bl	8000938 <iprintf>
        GPIOE->ODR &= ~(1 << 8); // LED off
 8000472:	4b10      	ldr	r3, [pc, #64]	@ (80004b4 <main+0x14c>)
 8000474:	695b      	ldr	r3, [r3, #20]
 8000476:	4a0f      	ldr	r2, [pc, #60]	@ (80004b4 <main+0x14c>)
 8000478:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800047c:	6153      	str	r3, [r2, #20]
    }

    while (1); // Halt
 800047e:	bf00      	nop
 8000480:	e7fd      	b.n	800047e <main+0x116>
 8000482:	bf00      	nop
 8000484:	20000000 	.word	0x20000000
 8000488:	08001758 	.word	0x08001758
 800048c:	08001770 	.word	0x08001770
 8000490:	080017d4 	.word	0x080017d4
 8000494:	080017f0 	.word	0x080017f0
 8000498:	0800180c 	.word	0x0800180c
 800049c:	08001828 	.word	0x08001828
 80004a0:	08001834 	.word	0x08001834
 80004a4:	08001844 	.word	0x08001844
 80004a8:	0800185c 	.word	0x0800185c
 80004ac:	08001864 	.word	0x08001864
 80004b0:	08001868 	.word	0x08001868
 80004b4:	48001000 	.word	0x48001000
 80004b8:	08001880 	.word	0x08001880

080004bc <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80004bc:	b580      	push	{r7, lr}
 80004be:	b086      	sub	sp, #24
 80004c0:	af00      	add	r7, sp, #0
 80004c2:	60f8      	str	r0, [r7, #12]
 80004c4:	60b9      	str	r1, [r7, #8]
 80004c6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80004c8:	2300      	movs	r3, #0
 80004ca:	617b      	str	r3, [r7, #20]
 80004cc:	e00a      	b.n	80004e4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80004ce:	f7ff fee9 	bl	80002a4 <__io_getchar>
 80004d2:	4601      	mov	r1, r0
 80004d4:	68bb      	ldr	r3, [r7, #8]
 80004d6:	1c5a      	adds	r2, r3, #1
 80004d8:	60ba      	str	r2, [r7, #8]
 80004da:	b2ca      	uxtb	r2, r1
 80004dc:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80004de:	697b      	ldr	r3, [r7, #20]
 80004e0:	3301      	adds	r3, #1
 80004e2:	617b      	str	r3, [r7, #20]
 80004e4:	697a      	ldr	r2, [r7, #20]
 80004e6:	687b      	ldr	r3, [r7, #4]
 80004e8:	429a      	cmp	r2, r3
 80004ea:	dbf0      	blt.n	80004ce <_read+0x12>
  }

  return len;
 80004ec:	687b      	ldr	r3, [r7, #4]
}
 80004ee:	4618      	mov	r0, r3
 80004f0:	3718      	adds	r7, #24
 80004f2:	46bd      	mov	sp, r7
 80004f4:	bd80      	pop	{r7, pc}

080004f6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80004f6:	b580      	push	{r7, lr}
 80004f8:	b086      	sub	sp, #24
 80004fa:	af00      	add	r7, sp, #0
 80004fc:	60f8      	str	r0, [r7, #12]
 80004fe:	60b9      	str	r1, [r7, #8]
 8000500:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000502:	2300      	movs	r3, #0
 8000504:	617b      	str	r3, [r7, #20]
 8000506:	e009      	b.n	800051c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000508:	68bb      	ldr	r3, [r7, #8]
 800050a:	1c5a      	adds	r2, r3, #1
 800050c:	60ba      	str	r2, [r7, #8]
 800050e:	781b      	ldrb	r3, [r3, #0]
 8000510:	4618      	mov	r0, r3
 8000512:	f7ff feb5 	bl	8000280 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000516:	697b      	ldr	r3, [r7, #20]
 8000518:	3301      	adds	r3, #1
 800051a:	617b      	str	r3, [r7, #20]
 800051c:	697a      	ldr	r2, [r7, #20]
 800051e:	687b      	ldr	r3, [r7, #4]
 8000520:	429a      	cmp	r2, r3
 8000522:	dbf1      	blt.n	8000508 <_write+0x12>
  }
  return len;
 8000524:	687b      	ldr	r3, [r7, #4]
}
 8000526:	4618      	mov	r0, r3
 8000528:	3718      	adds	r7, #24
 800052a:	46bd      	mov	sp, r7
 800052c:	bd80      	pop	{r7, pc}

0800052e <_close>:

int _close(int file)
{
 800052e:	b480      	push	{r7}
 8000530:	b083      	sub	sp, #12
 8000532:	af00      	add	r7, sp, #0
 8000534:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000536:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 800053a:	4618      	mov	r0, r3
 800053c:	370c      	adds	r7, #12
 800053e:	46bd      	mov	sp, r7
 8000540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000544:	4770      	bx	lr

08000546 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000546:	b480      	push	{r7}
 8000548:	b083      	sub	sp, #12
 800054a:	af00      	add	r7, sp, #0
 800054c:	6078      	str	r0, [r7, #4]
 800054e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000550:	683b      	ldr	r3, [r7, #0]
 8000552:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000556:	605a      	str	r2, [r3, #4]
  return 0;
 8000558:	2300      	movs	r3, #0
}
 800055a:	4618      	mov	r0, r3
 800055c:	370c      	adds	r7, #12
 800055e:	46bd      	mov	sp, r7
 8000560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000564:	4770      	bx	lr

08000566 <_isatty>:

int _isatty(int file)
{
 8000566:	b480      	push	{r7}
 8000568:	b083      	sub	sp, #12
 800056a:	af00      	add	r7, sp, #0
 800056c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800056e:	2301      	movs	r3, #1
}
 8000570:	4618      	mov	r0, r3
 8000572:	370c      	adds	r7, #12
 8000574:	46bd      	mov	sp, r7
 8000576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800057a:	4770      	bx	lr

0800057c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800057c:	b480      	push	{r7}
 800057e:	b085      	sub	sp, #20
 8000580:	af00      	add	r7, sp, #0
 8000582:	60f8      	str	r0, [r7, #12]
 8000584:	60b9      	str	r1, [r7, #8]
 8000586:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000588:	2300      	movs	r3, #0
}
 800058a:	4618      	mov	r0, r3
 800058c:	3714      	adds	r7, #20
 800058e:	46bd      	mov	sp, r7
 8000590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000594:	4770      	bx	lr
	...

08000598 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000598:	b580      	push	{r7, lr}
 800059a:	b086      	sub	sp, #24
 800059c:	af00      	add	r7, sp, #0
 800059e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80005a0:	4a14      	ldr	r2, [pc, #80]	@ (80005f4 <_sbrk+0x5c>)
 80005a2:	4b15      	ldr	r3, [pc, #84]	@ (80005f8 <_sbrk+0x60>)
 80005a4:	1ad3      	subs	r3, r2, r3
 80005a6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80005a8:	697b      	ldr	r3, [r7, #20]
 80005aa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80005ac:	4b13      	ldr	r3, [pc, #76]	@ (80005fc <_sbrk+0x64>)
 80005ae:	681b      	ldr	r3, [r3, #0]
 80005b0:	2b00      	cmp	r3, #0
 80005b2:	d102      	bne.n	80005ba <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80005b4:	4b11      	ldr	r3, [pc, #68]	@ (80005fc <_sbrk+0x64>)
 80005b6:	4a12      	ldr	r2, [pc, #72]	@ (8000600 <_sbrk+0x68>)
 80005b8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80005ba:	4b10      	ldr	r3, [pc, #64]	@ (80005fc <_sbrk+0x64>)
 80005bc:	681a      	ldr	r2, [r3, #0]
 80005be:	687b      	ldr	r3, [r7, #4]
 80005c0:	4413      	add	r3, r2
 80005c2:	693a      	ldr	r2, [r7, #16]
 80005c4:	429a      	cmp	r2, r3
 80005c6:	d207      	bcs.n	80005d8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80005c8:	f000 fa36 	bl	8000a38 <__errno>
 80005cc:	4603      	mov	r3, r0
 80005ce:	220c      	movs	r2, #12
 80005d0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80005d2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80005d6:	e009      	b.n	80005ec <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80005d8:	4b08      	ldr	r3, [pc, #32]	@ (80005fc <_sbrk+0x64>)
 80005da:	681b      	ldr	r3, [r3, #0]
 80005dc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80005de:	4b07      	ldr	r3, [pc, #28]	@ (80005fc <_sbrk+0x64>)
 80005e0:	681a      	ldr	r2, [r3, #0]
 80005e2:	687b      	ldr	r3, [r7, #4]
 80005e4:	4413      	add	r3, r2
 80005e6:	4a05      	ldr	r2, [pc, #20]	@ (80005fc <_sbrk+0x64>)
 80005e8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80005ea:	68fb      	ldr	r3, [r7, #12]
}
 80005ec:	4618      	mov	r0, r3
 80005ee:	3718      	adds	r7, #24
 80005f0:	46bd      	mov	sp, r7
 80005f2:	bd80      	pop	{r7, pc}
 80005f4:	2000a000 	.word	0x2000a000
 80005f8:	00000400 	.word	0x00000400
 80005fc:	200000a0 	.word	0x200000a0
 8000600:	200001f0 	.word	0x200001f0

08000604 <SerialInitialise>:


// Initialises the specified serial port with a baud rate and optional completion function
// InitialiseSerial - Initialise the serial port
// Input: baudRate is from an enumerated set
void SerialInitialise(uint32_t baudRate, SerialPort *serial_port, void (*completion_function)(uint32_t)) {
 8000604:	b480      	push	{r7}
 8000606:	b087      	sub	sp, #28
 8000608:	af00      	add	r7, sp, #0
 800060a:	60f8      	str	r0, [r7, #12]
 800060c:	60b9      	str	r1, [r7, #8]
 800060e:	607a      	str	r2, [r7, #4]

	serial_port->completion_function = completion_function; // Set the callback
 8000610:	68bb      	ldr	r3, [r7, #8]
 8000612:	687a      	ldr	r2, [r7, #4]
 8000614:	625a      	str	r2, [r3, #36]	@ 0x24

	// Enable power interface and system configuration controller
	RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 8000616:	4b39      	ldr	r3, [pc, #228]	@ (80006fc <SerialInitialise+0xf8>)
 8000618:	69db      	ldr	r3, [r3, #28]
 800061a:	4a38      	ldr	r2, [pc, #224]	@ (80006fc <SerialInitialise+0xf8>)
 800061c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000620:	61d3      	str	r3, [r2, #28]
	RCC->APB2ENR |= RCC_APB2ENR_SYSCFGEN;
 8000622:	4b36      	ldr	r3, [pc, #216]	@ (80006fc <SerialInitialise+0xf8>)
 8000624:	699b      	ldr	r3, [r3, #24]
 8000626:	4a35      	ldr	r2, [pc, #212]	@ (80006fc <SerialInitialise+0xf8>)
 8000628:	f043 0301 	orr.w	r3, r3, #1
 800062c:	6193      	str	r3, [r2, #24]

	// enable the GPIO which is on the AHB bus
	RCC->AHBENR |= serial_port->MaskAHBENR;
 800062e:	68bb      	ldr	r3, [r7, #8]
 8000630:	691a      	ldr	r2, [r3, #16]
 8000632:	4b32      	ldr	r3, [pc, #200]	@ (80006fc <SerialInitialise+0xf8>)
 8000634:	695b      	ldr	r3, [r3, #20]
 8000636:	4931      	ldr	r1, [pc, #196]	@ (80006fc <SerialInitialise+0xf8>)
 8000638:	4313      	orrs	r3, r2
 800063a:	614b      	str	r3, [r1, #20]

	// set pin mode to alternate function for the specific GPIO pins
	serial_port->GPIO->MODER = serial_port->SerialPinModeValue;
 800063c:	68bb      	ldr	r3, [r7, #8]
 800063e:	685b      	ldr	r3, [r3, #4]
 8000640:	68ba      	ldr	r2, [r7, #8]
 8000642:	6952      	ldr	r2, [r2, #20]
 8000644:	601a      	str	r2, [r3, #0]

	// enable high speed clock for specific GPIO pins
	serial_port->GPIO->OSPEEDR = serial_port->SerialPinSpeedValue;
 8000646:	68bb      	ldr	r3, [r7, #8]
 8000648:	685b      	ldr	r3, [r3, #4]
 800064a:	68ba      	ldr	r2, [r7, #8]
 800064c:	6992      	ldr	r2, [r2, #24]
 800064e:	609a      	str	r2, [r3, #8]

	// set alternate function to enable USART to external pins
	serial_port->GPIO->AFR[0] |= serial_port->SerialPinAlternatePinValueLow;
 8000650:	68bb      	ldr	r3, [r7, #8]
 8000652:	69d9      	ldr	r1, [r3, #28]
 8000654:	68bb      	ldr	r3, [r7, #8]
 8000656:	685b      	ldr	r3, [r3, #4]
 8000658:	6a1a      	ldr	r2, [r3, #32]
 800065a:	68bb      	ldr	r3, [r7, #8]
 800065c:	685b      	ldr	r3, [r3, #4]
 800065e:	430a      	orrs	r2, r1
 8000660:	621a      	str	r2, [r3, #32]
	serial_port->GPIO->AFR[1] |= serial_port->SerialPinAlternatePinValueHigh;
 8000662:	68bb      	ldr	r3, [r7, #8]
 8000664:	6a19      	ldr	r1, [r3, #32]
 8000666:	68bb      	ldr	r3, [r7, #8]
 8000668:	685b      	ldr	r3, [r3, #4]
 800066a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800066c:	68bb      	ldr	r3, [r7, #8]
 800066e:	685b      	ldr	r3, [r3, #4]
 8000670:	430a      	orrs	r2, r1
 8000672:	625a      	str	r2, [r3, #36]	@ 0x24

	// enable the device based on the bits defined in the serial port definition
	RCC->APB1ENR |= serial_port->MaskAPB1ENR;
 8000674:	68bb      	ldr	r3, [r7, #8]
 8000676:	68da      	ldr	r2, [r3, #12]
 8000678:	4b20      	ldr	r3, [pc, #128]	@ (80006fc <SerialInitialise+0xf8>)
 800067a:	69db      	ldr	r3, [r3, #28]
 800067c:	491f      	ldr	r1, [pc, #124]	@ (80006fc <SerialInitialise+0xf8>)
 800067e:	4313      	orrs	r3, r2
 8000680:	61cb      	str	r3, [r1, #28]
	RCC->APB2ENR |= serial_port->MaskAPB2ENR;
 8000682:	68bb      	ldr	r3, [r7, #8]
 8000684:	689a      	ldr	r2, [r3, #8]
 8000686:	4b1d      	ldr	r3, [pc, #116]	@ (80006fc <SerialInitialise+0xf8>)
 8000688:	699b      	ldr	r3, [r3, #24]
 800068a:	491c      	ldr	r1, [pc, #112]	@ (80006fc <SerialInitialise+0xf8>)
 800068c:	4313      	orrs	r3, r2
 800068e:	618b      	str	r3, [r1, #24]

	// Get a pointer to the 16 bits of the BRR register that we want to change
	uint16_t *baud_rate_config = (uint16_t*)&serial_port->UART->BRR; // only 16 bits used!
 8000690:	68bb      	ldr	r3, [r7, #8]
 8000692:	681b      	ldr	r3, [r3, #0]
 8000694:	330c      	adds	r3, #12
 8000696:	617b      	str	r3, [r7, #20]

	// Baud rate calculation from datasheet
	switch(baudRate){
 8000698:	68fb      	ldr	r3, [r7, #12]
 800069a:	2b04      	cmp	r3, #4
 800069c:	d820      	bhi.n	80006e0 <SerialInitialise+0xdc>
 800069e:	a201      	add	r2, pc, #4	@ (adr r2, 80006a4 <SerialInitialise+0xa0>)
 80006a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80006a4:	080006b9 	.word	0x080006b9
 80006a8:	080006c1 	.word	0x080006c1
 80006ac:	080006c9 	.word	0x080006c9
 80006b0:	080006d1 	.word	0x080006d1
 80006b4:	080006d9 	.word	0x080006d9
	case BAUD_9600:
		// NEED TO FIX THIS !
		*baud_rate_config = 0x46;  // 115200 at 8MHz
 80006b8:	697b      	ldr	r3, [r7, #20]
 80006ba:	2246      	movs	r2, #70	@ 0x46
 80006bc:	801a      	strh	r2, [r3, #0]
		break;
 80006be:	e00f      	b.n	80006e0 <SerialInitialise+0xdc>
	case BAUD_19200:
		// NEED TO FIX THIS !
		*baud_rate_config = 0x46;  // 115200 at 8MHz
 80006c0:	697b      	ldr	r3, [r7, #20]
 80006c2:	2246      	movs	r2, #70	@ 0x46
 80006c4:	801a      	strh	r2, [r3, #0]
		break;
 80006c6:	e00b      	b.n	80006e0 <SerialInitialise+0xdc>
	case BAUD_38400:
		// NEED TO FIX THIS !
		*baud_rate_config = 0x46;  // 115200 at 8MHz
 80006c8:	697b      	ldr	r3, [r7, #20]
 80006ca:	2246      	movs	r2, #70	@ 0x46
 80006cc:	801a      	strh	r2, [r3, #0]
		break;
 80006ce:	e007      	b.n	80006e0 <SerialInitialise+0xdc>
	case BAUD_57600:
		// NEED TO FIX THIS !
		*baud_rate_config = 0x46;  // 115200 at 8MHz
 80006d0:	697b      	ldr	r3, [r7, #20]
 80006d2:	2246      	movs	r2, #70	@ 0x46
 80006d4:	801a      	strh	r2, [r3, #0]
		break;
 80006d6:	e003      	b.n	80006e0 <SerialInitialise+0xdc>
	case BAUD_115200:
		*baud_rate_config = 0x46;  // 115200 at 8MHz
 80006d8:	697b      	ldr	r3, [r7, #20]
 80006da:	2246      	movs	r2, #70	@ 0x46
 80006dc:	801a      	strh	r2, [r3, #0]
		break;
 80006de:	bf00      	nop
	}


	// enable serial port for tx and rx
	serial_port->UART->CR1 |= USART_CR1_TE | USART_CR1_RE | USART_CR1_UE;
 80006e0:	68bb      	ldr	r3, [r7, #8]
 80006e2:	681b      	ldr	r3, [r3, #0]
 80006e4:	681a      	ldr	r2, [r3, #0]
 80006e6:	68bb      	ldr	r3, [r7, #8]
 80006e8:	681b      	ldr	r3, [r3, #0]
 80006ea:	f042 020d 	orr.w	r2, r2, #13
 80006ee:	601a      	str	r2, [r3, #0]
}
 80006f0:	bf00      	nop
 80006f2:	371c      	adds	r7, #28
 80006f4:	46bd      	mov	sp, r7
 80006f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006fa:	4770      	bx	lr
 80006fc:	40021000 	.word	0x40021000

08000700 <SerialOutputChar>:


// Sends a single byte over the USART
void SerialOutputChar(uint8_t data, SerialPort *serial_port) {
 8000700:	b480      	push	{r7}
 8000702:	b083      	sub	sp, #12
 8000704:	af00      	add	r7, sp, #0
 8000706:	4603      	mov	r3, r0
 8000708:	6039      	str	r1, [r7, #0]
 800070a:	71fb      	strb	r3, [r7, #7]

	while((serial_port->UART->ISR & USART_ISR_TXE) == 0){ // Wait until transmit buffer is empty
 800070c:	bf00      	nop
 800070e:	683b      	ldr	r3, [r7, #0]
 8000710:	681b      	ldr	r3, [r3, #0]
 8000712:	69db      	ldr	r3, [r3, #28]
 8000714:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000718:	2b00      	cmp	r3, #0
 800071a:	d0f8      	beq.n	800070e <SerialOutputChar+0xe>
	}

	serial_port->UART->TDR = data; // Write data to transmit data register
 800071c:	683b      	ldr	r3, [r7, #0]
 800071e:	681b      	ldr	r3, [r3, #0]
 8000720:	79fa      	ldrb	r2, [r7, #7]
 8000722:	b292      	uxth	r2, r2
 8000724:	851a      	strh	r2, [r3, #40]	@ 0x28
}
 8000726:	bf00      	nop
 8000728:	370c      	adds	r7, #12
 800072a:	46bd      	mov	sp, r7
 800072c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000730:	4770      	bx	lr

08000732 <SerialGetChar>:
	serial_port->completion_function(counter);
}


// Receives a single byte from the USART (blocking)
uint8_t SerialGetChar(SerialPort *serial_port) {
 8000732:	b480      	push	{r7}
 8000734:	b083      	sub	sp, #12
 8000736:	af00      	add	r7, sp, #0
 8000738:	6078      	str	r0, [r7, #4]
	while ((serial_port->UART->ISR & USART_ISR_RXNE) == 0); // Wait until data is received
 800073a:	bf00      	nop
 800073c:	687b      	ldr	r3, [r7, #4]
 800073e:	681b      	ldr	r3, [r3, #0]
 8000740:	69db      	ldr	r3, [r3, #28]
 8000742:	f003 0320 	and.w	r3, r3, #32
 8000746:	2b00      	cmp	r3, #0
 8000748:	d0f8      	beq.n	800073c <SerialGetChar+0xa>
	return serial_port->UART->RDR;                          // Return received byte
 800074a:	687b      	ldr	r3, [r7, #4]
 800074c:	681b      	ldr	r3, [r3, #0]
 800074e:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8000750:	b29b      	uxth	r3, r3
 8000752:	b2db      	uxtb	r3, r3
}
 8000754:	4618      	mov	r0, r3
 8000756:	370c      	adds	r7, #12
 8000758:	46bd      	mov	sp, r7
 800075a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800075e:	4770      	bx	lr

08000760 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000760:	480d      	ldr	r0, [pc, #52]	@ (8000798 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000762:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000764:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000768:	480c      	ldr	r0, [pc, #48]	@ (800079c <LoopForever+0x6>)
  ldr r1, =_edata
 800076a:	490d      	ldr	r1, [pc, #52]	@ (80007a0 <LoopForever+0xa>)
  ldr r2, =_sidata
 800076c:	4a0d      	ldr	r2, [pc, #52]	@ (80007a4 <LoopForever+0xe>)
  movs r3, #0
 800076e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000770:	e002      	b.n	8000778 <LoopCopyDataInit>

08000772 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000772:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000774:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000776:	3304      	adds	r3, #4

08000778 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000778:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800077a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800077c:	d3f9      	bcc.n	8000772 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800077e:	4a0a      	ldr	r2, [pc, #40]	@ (80007a8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000780:	4c0a      	ldr	r4, [pc, #40]	@ (80007ac <LoopForever+0x16>)
  movs r3, #0
 8000782:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000784:	e001      	b.n	800078a <LoopFillZerobss>

08000786 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000786:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000788:	3204      	adds	r2, #4

0800078a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800078a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800078c:	d3fb      	bcc.n	8000786 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800078e:	f000 f959 	bl	8000a44 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000792:	f7ff fde9 	bl	8000368 <main>

08000796 <LoopForever>:

LoopForever:
  b LoopForever
 8000796:	e7fe      	b.n	8000796 <LoopForever>
  ldr   r0, =_estack
 8000798:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 800079c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80007a0:	20000084 	.word	0x20000084
  ldr r2, =_sidata
 80007a4:	080018dc 	.word	0x080018dc
  ldr r2, =_sbss
 80007a8:	20000084 	.word	0x20000084
  ldr r4, =_ebss
 80007ac:	200001f0 	.word	0x200001f0

080007b0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80007b0:	e7fe      	b.n	80007b0 <ADC1_2_IRQHandler>
	...

080007b4 <std>:
 80007b4:	2300      	movs	r3, #0
 80007b6:	b510      	push	{r4, lr}
 80007b8:	4604      	mov	r4, r0
 80007ba:	e9c0 3300 	strd	r3, r3, [r0]
 80007be:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80007c2:	6083      	str	r3, [r0, #8]
 80007c4:	8181      	strh	r1, [r0, #12]
 80007c6:	6643      	str	r3, [r0, #100]	@ 0x64
 80007c8:	81c2      	strh	r2, [r0, #14]
 80007ca:	6183      	str	r3, [r0, #24]
 80007cc:	4619      	mov	r1, r3
 80007ce:	2208      	movs	r2, #8
 80007d0:	305c      	adds	r0, #92	@ 0x5c
 80007d2:	f000 f929 	bl	8000a28 <memset>
 80007d6:	4b0d      	ldr	r3, [pc, #52]	@ (800080c <std+0x58>)
 80007d8:	6263      	str	r3, [r4, #36]	@ 0x24
 80007da:	4b0d      	ldr	r3, [pc, #52]	@ (8000810 <std+0x5c>)
 80007dc:	62a3      	str	r3, [r4, #40]	@ 0x28
 80007de:	4b0d      	ldr	r3, [pc, #52]	@ (8000814 <std+0x60>)
 80007e0:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80007e2:	4b0d      	ldr	r3, [pc, #52]	@ (8000818 <std+0x64>)
 80007e4:	6323      	str	r3, [r4, #48]	@ 0x30
 80007e6:	4b0d      	ldr	r3, [pc, #52]	@ (800081c <std+0x68>)
 80007e8:	6224      	str	r4, [r4, #32]
 80007ea:	429c      	cmp	r4, r3
 80007ec:	d006      	beq.n	80007fc <std+0x48>
 80007ee:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80007f2:	4294      	cmp	r4, r2
 80007f4:	d002      	beq.n	80007fc <std+0x48>
 80007f6:	33d0      	adds	r3, #208	@ 0xd0
 80007f8:	429c      	cmp	r4, r3
 80007fa:	d105      	bne.n	8000808 <std+0x54>
 80007fc:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8000800:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000804:	f000 b942 	b.w	8000a8c <__retarget_lock_init_recursive>
 8000808:	bd10      	pop	{r4, pc}
 800080a:	bf00      	nop
 800080c:	080012e1 	.word	0x080012e1
 8000810:	08001303 	.word	0x08001303
 8000814:	0800133b 	.word	0x0800133b
 8000818:	0800135f 	.word	0x0800135f
 800081c:	200000a4 	.word	0x200000a4

08000820 <stdio_exit_handler>:
 8000820:	4a02      	ldr	r2, [pc, #8]	@ (800082c <stdio_exit_handler+0xc>)
 8000822:	4903      	ldr	r1, [pc, #12]	@ (8000830 <stdio_exit_handler+0x10>)
 8000824:	4803      	ldr	r0, [pc, #12]	@ (8000834 <stdio_exit_handler+0x14>)
 8000826:	f000 b869 	b.w	80008fc <_fwalk_sglue>
 800082a:	bf00      	nop
 800082c:	20000028 	.word	0x20000028
 8000830:	08001279 	.word	0x08001279
 8000834:	20000038 	.word	0x20000038

08000838 <cleanup_stdio>:
 8000838:	6841      	ldr	r1, [r0, #4]
 800083a:	4b0c      	ldr	r3, [pc, #48]	@ (800086c <cleanup_stdio+0x34>)
 800083c:	4299      	cmp	r1, r3
 800083e:	b510      	push	{r4, lr}
 8000840:	4604      	mov	r4, r0
 8000842:	d001      	beq.n	8000848 <cleanup_stdio+0x10>
 8000844:	f000 fd18 	bl	8001278 <_fflush_r>
 8000848:	68a1      	ldr	r1, [r4, #8]
 800084a:	4b09      	ldr	r3, [pc, #36]	@ (8000870 <cleanup_stdio+0x38>)
 800084c:	4299      	cmp	r1, r3
 800084e:	d002      	beq.n	8000856 <cleanup_stdio+0x1e>
 8000850:	4620      	mov	r0, r4
 8000852:	f000 fd11 	bl	8001278 <_fflush_r>
 8000856:	68e1      	ldr	r1, [r4, #12]
 8000858:	4b06      	ldr	r3, [pc, #24]	@ (8000874 <cleanup_stdio+0x3c>)
 800085a:	4299      	cmp	r1, r3
 800085c:	d004      	beq.n	8000868 <cleanup_stdio+0x30>
 800085e:	4620      	mov	r0, r4
 8000860:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000864:	f000 bd08 	b.w	8001278 <_fflush_r>
 8000868:	bd10      	pop	{r4, pc}
 800086a:	bf00      	nop
 800086c:	200000a4 	.word	0x200000a4
 8000870:	2000010c 	.word	0x2000010c
 8000874:	20000174 	.word	0x20000174

08000878 <global_stdio_init.part.0>:
 8000878:	b510      	push	{r4, lr}
 800087a:	4b0b      	ldr	r3, [pc, #44]	@ (80008a8 <global_stdio_init.part.0+0x30>)
 800087c:	4c0b      	ldr	r4, [pc, #44]	@ (80008ac <global_stdio_init.part.0+0x34>)
 800087e:	4a0c      	ldr	r2, [pc, #48]	@ (80008b0 <global_stdio_init.part.0+0x38>)
 8000880:	601a      	str	r2, [r3, #0]
 8000882:	4620      	mov	r0, r4
 8000884:	2200      	movs	r2, #0
 8000886:	2104      	movs	r1, #4
 8000888:	f7ff ff94 	bl	80007b4 <std>
 800088c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8000890:	2201      	movs	r2, #1
 8000892:	2109      	movs	r1, #9
 8000894:	f7ff ff8e 	bl	80007b4 <std>
 8000898:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800089c:	2202      	movs	r2, #2
 800089e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80008a2:	2112      	movs	r1, #18
 80008a4:	f7ff bf86 	b.w	80007b4 <std>
 80008a8:	200001dc 	.word	0x200001dc
 80008ac:	200000a4 	.word	0x200000a4
 80008b0:	08000821 	.word	0x08000821

080008b4 <__sfp_lock_acquire>:
 80008b4:	4801      	ldr	r0, [pc, #4]	@ (80008bc <__sfp_lock_acquire+0x8>)
 80008b6:	f000 b8ea 	b.w	8000a8e <__retarget_lock_acquire_recursive>
 80008ba:	bf00      	nop
 80008bc:	200001e1 	.word	0x200001e1

080008c0 <__sfp_lock_release>:
 80008c0:	4801      	ldr	r0, [pc, #4]	@ (80008c8 <__sfp_lock_release+0x8>)
 80008c2:	f000 b8e5 	b.w	8000a90 <__retarget_lock_release_recursive>
 80008c6:	bf00      	nop
 80008c8:	200001e1 	.word	0x200001e1

080008cc <__sinit>:
 80008cc:	b510      	push	{r4, lr}
 80008ce:	4604      	mov	r4, r0
 80008d0:	f7ff fff0 	bl	80008b4 <__sfp_lock_acquire>
 80008d4:	6a23      	ldr	r3, [r4, #32]
 80008d6:	b11b      	cbz	r3, 80008e0 <__sinit+0x14>
 80008d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80008dc:	f7ff bff0 	b.w	80008c0 <__sfp_lock_release>
 80008e0:	4b04      	ldr	r3, [pc, #16]	@ (80008f4 <__sinit+0x28>)
 80008e2:	6223      	str	r3, [r4, #32]
 80008e4:	4b04      	ldr	r3, [pc, #16]	@ (80008f8 <__sinit+0x2c>)
 80008e6:	681b      	ldr	r3, [r3, #0]
 80008e8:	2b00      	cmp	r3, #0
 80008ea:	d1f5      	bne.n	80008d8 <__sinit+0xc>
 80008ec:	f7ff ffc4 	bl	8000878 <global_stdio_init.part.0>
 80008f0:	e7f2      	b.n	80008d8 <__sinit+0xc>
 80008f2:	bf00      	nop
 80008f4:	08000839 	.word	0x08000839
 80008f8:	200001dc 	.word	0x200001dc

080008fc <_fwalk_sglue>:
 80008fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000900:	4607      	mov	r7, r0
 8000902:	4688      	mov	r8, r1
 8000904:	4614      	mov	r4, r2
 8000906:	2600      	movs	r6, #0
 8000908:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800090c:	f1b9 0901 	subs.w	r9, r9, #1
 8000910:	d505      	bpl.n	800091e <_fwalk_sglue+0x22>
 8000912:	6824      	ldr	r4, [r4, #0]
 8000914:	2c00      	cmp	r4, #0
 8000916:	d1f7      	bne.n	8000908 <_fwalk_sglue+0xc>
 8000918:	4630      	mov	r0, r6
 800091a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800091e:	89ab      	ldrh	r3, [r5, #12]
 8000920:	2b01      	cmp	r3, #1
 8000922:	d907      	bls.n	8000934 <_fwalk_sglue+0x38>
 8000924:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8000928:	3301      	adds	r3, #1
 800092a:	d003      	beq.n	8000934 <_fwalk_sglue+0x38>
 800092c:	4629      	mov	r1, r5
 800092e:	4638      	mov	r0, r7
 8000930:	47c0      	blx	r8
 8000932:	4306      	orrs	r6, r0
 8000934:	3568      	adds	r5, #104	@ 0x68
 8000936:	e7e9      	b.n	800090c <_fwalk_sglue+0x10>

08000938 <iprintf>:
 8000938:	b40f      	push	{r0, r1, r2, r3}
 800093a:	b507      	push	{r0, r1, r2, lr}
 800093c:	4906      	ldr	r1, [pc, #24]	@ (8000958 <iprintf+0x20>)
 800093e:	ab04      	add	r3, sp, #16
 8000940:	6808      	ldr	r0, [r1, #0]
 8000942:	f853 2b04 	ldr.w	r2, [r3], #4
 8000946:	6881      	ldr	r1, [r0, #8]
 8000948:	9301      	str	r3, [sp, #4]
 800094a:	f000 f8cb 	bl	8000ae4 <_vfiprintf_r>
 800094e:	b003      	add	sp, #12
 8000950:	f85d eb04 	ldr.w	lr, [sp], #4
 8000954:	b004      	add	sp, #16
 8000956:	4770      	bx	lr
 8000958:	20000034 	.word	0x20000034

0800095c <putchar>:
 800095c:	4b02      	ldr	r3, [pc, #8]	@ (8000968 <putchar+0xc>)
 800095e:	4601      	mov	r1, r0
 8000960:	6818      	ldr	r0, [r3, #0]
 8000962:	6882      	ldr	r2, [r0, #8]
 8000964:	f000 bdf6 	b.w	8001554 <_putc_r>
 8000968:	20000034 	.word	0x20000034

0800096c <_puts_r>:
 800096c:	6a03      	ldr	r3, [r0, #32]
 800096e:	b570      	push	{r4, r5, r6, lr}
 8000970:	6884      	ldr	r4, [r0, #8]
 8000972:	4605      	mov	r5, r0
 8000974:	460e      	mov	r6, r1
 8000976:	b90b      	cbnz	r3, 800097c <_puts_r+0x10>
 8000978:	f7ff ffa8 	bl	80008cc <__sinit>
 800097c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800097e:	07db      	lsls	r3, r3, #31
 8000980:	d405      	bmi.n	800098e <_puts_r+0x22>
 8000982:	89a3      	ldrh	r3, [r4, #12]
 8000984:	0598      	lsls	r0, r3, #22
 8000986:	d402      	bmi.n	800098e <_puts_r+0x22>
 8000988:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800098a:	f000 f880 	bl	8000a8e <__retarget_lock_acquire_recursive>
 800098e:	89a3      	ldrh	r3, [r4, #12]
 8000990:	0719      	lsls	r1, r3, #28
 8000992:	d502      	bpl.n	800099a <_puts_r+0x2e>
 8000994:	6923      	ldr	r3, [r4, #16]
 8000996:	2b00      	cmp	r3, #0
 8000998:	d135      	bne.n	8000a06 <_puts_r+0x9a>
 800099a:	4621      	mov	r1, r4
 800099c:	4628      	mov	r0, r5
 800099e:	f000 fd21 	bl	80013e4 <__swsetup_r>
 80009a2:	b380      	cbz	r0, 8000a06 <_puts_r+0x9a>
 80009a4:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 80009a8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80009aa:	07da      	lsls	r2, r3, #31
 80009ac:	d405      	bmi.n	80009ba <_puts_r+0x4e>
 80009ae:	89a3      	ldrh	r3, [r4, #12]
 80009b0:	059b      	lsls	r3, r3, #22
 80009b2:	d402      	bmi.n	80009ba <_puts_r+0x4e>
 80009b4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80009b6:	f000 f86b 	bl	8000a90 <__retarget_lock_release_recursive>
 80009ba:	4628      	mov	r0, r5
 80009bc:	bd70      	pop	{r4, r5, r6, pc}
 80009be:	2b00      	cmp	r3, #0
 80009c0:	da04      	bge.n	80009cc <_puts_r+0x60>
 80009c2:	69a2      	ldr	r2, [r4, #24]
 80009c4:	429a      	cmp	r2, r3
 80009c6:	dc17      	bgt.n	80009f8 <_puts_r+0x8c>
 80009c8:	290a      	cmp	r1, #10
 80009ca:	d015      	beq.n	80009f8 <_puts_r+0x8c>
 80009cc:	6823      	ldr	r3, [r4, #0]
 80009ce:	1c5a      	adds	r2, r3, #1
 80009d0:	6022      	str	r2, [r4, #0]
 80009d2:	7019      	strb	r1, [r3, #0]
 80009d4:	68a3      	ldr	r3, [r4, #8]
 80009d6:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80009da:	3b01      	subs	r3, #1
 80009dc:	60a3      	str	r3, [r4, #8]
 80009de:	2900      	cmp	r1, #0
 80009e0:	d1ed      	bne.n	80009be <_puts_r+0x52>
 80009e2:	2b00      	cmp	r3, #0
 80009e4:	da11      	bge.n	8000a0a <_puts_r+0x9e>
 80009e6:	4622      	mov	r2, r4
 80009e8:	210a      	movs	r1, #10
 80009ea:	4628      	mov	r0, r5
 80009ec:	f000 fcbb 	bl	8001366 <__swbuf_r>
 80009f0:	3001      	adds	r0, #1
 80009f2:	d0d7      	beq.n	80009a4 <_puts_r+0x38>
 80009f4:	250a      	movs	r5, #10
 80009f6:	e7d7      	b.n	80009a8 <_puts_r+0x3c>
 80009f8:	4622      	mov	r2, r4
 80009fa:	4628      	mov	r0, r5
 80009fc:	f000 fcb3 	bl	8001366 <__swbuf_r>
 8000a00:	3001      	adds	r0, #1
 8000a02:	d1e7      	bne.n	80009d4 <_puts_r+0x68>
 8000a04:	e7ce      	b.n	80009a4 <_puts_r+0x38>
 8000a06:	3e01      	subs	r6, #1
 8000a08:	e7e4      	b.n	80009d4 <_puts_r+0x68>
 8000a0a:	6823      	ldr	r3, [r4, #0]
 8000a0c:	1c5a      	adds	r2, r3, #1
 8000a0e:	6022      	str	r2, [r4, #0]
 8000a10:	220a      	movs	r2, #10
 8000a12:	701a      	strb	r2, [r3, #0]
 8000a14:	e7ee      	b.n	80009f4 <_puts_r+0x88>
	...

08000a18 <puts>:
 8000a18:	4b02      	ldr	r3, [pc, #8]	@ (8000a24 <puts+0xc>)
 8000a1a:	4601      	mov	r1, r0
 8000a1c:	6818      	ldr	r0, [r3, #0]
 8000a1e:	f7ff bfa5 	b.w	800096c <_puts_r>
 8000a22:	bf00      	nop
 8000a24:	20000034 	.word	0x20000034

08000a28 <memset>:
 8000a28:	4402      	add	r2, r0
 8000a2a:	4603      	mov	r3, r0
 8000a2c:	4293      	cmp	r3, r2
 8000a2e:	d100      	bne.n	8000a32 <memset+0xa>
 8000a30:	4770      	bx	lr
 8000a32:	f803 1b01 	strb.w	r1, [r3], #1
 8000a36:	e7f9      	b.n	8000a2c <memset+0x4>

08000a38 <__errno>:
 8000a38:	4b01      	ldr	r3, [pc, #4]	@ (8000a40 <__errno+0x8>)
 8000a3a:	6818      	ldr	r0, [r3, #0]
 8000a3c:	4770      	bx	lr
 8000a3e:	bf00      	nop
 8000a40:	20000034 	.word	0x20000034

08000a44 <__libc_init_array>:
 8000a44:	b570      	push	{r4, r5, r6, lr}
 8000a46:	4d0d      	ldr	r5, [pc, #52]	@ (8000a7c <__libc_init_array+0x38>)
 8000a48:	4c0d      	ldr	r4, [pc, #52]	@ (8000a80 <__libc_init_array+0x3c>)
 8000a4a:	1b64      	subs	r4, r4, r5
 8000a4c:	10a4      	asrs	r4, r4, #2
 8000a4e:	2600      	movs	r6, #0
 8000a50:	42a6      	cmp	r6, r4
 8000a52:	d109      	bne.n	8000a68 <__libc_init_array+0x24>
 8000a54:	4d0b      	ldr	r5, [pc, #44]	@ (8000a84 <__libc_init_array+0x40>)
 8000a56:	4c0c      	ldr	r4, [pc, #48]	@ (8000a88 <__libc_init_array+0x44>)
 8000a58:	f000 fe72 	bl	8001740 <_init>
 8000a5c:	1b64      	subs	r4, r4, r5
 8000a5e:	10a4      	asrs	r4, r4, #2
 8000a60:	2600      	movs	r6, #0
 8000a62:	42a6      	cmp	r6, r4
 8000a64:	d105      	bne.n	8000a72 <__libc_init_array+0x2e>
 8000a66:	bd70      	pop	{r4, r5, r6, pc}
 8000a68:	f855 3b04 	ldr.w	r3, [r5], #4
 8000a6c:	4798      	blx	r3
 8000a6e:	3601      	adds	r6, #1
 8000a70:	e7ee      	b.n	8000a50 <__libc_init_array+0xc>
 8000a72:	f855 3b04 	ldr.w	r3, [r5], #4
 8000a76:	4798      	blx	r3
 8000a78:	3601      	adds	r6, #1
 8000a7a:	e7f2      	b.n	8000a62 <__libc_init_array+0x1e>
 8000a7c:	080018d4 	.word	0x080018d4
 8000a80:	080018d4 	.word	0x080018d4
 8000a84:	080018d4 	.word	0x080018d4
 8000a88:	080018d8 	.word	0x080018d8

08000a8c <__retarget_lock_init_recursive>:
 8000a8c:	4770      	bx	lr

08000a8e <__retarget_lock_acquire_recursive>:
 8000a8e:	4770      	bx	lr

08000a90 <__retarget_lock_release_recursive>:
 8000a90:	4770      	bx	lr

08000a92 <__sfputc_r>:
 8000a92:	6893      	ldr	r3, [r2, #8]
 8000a94:	3b01      	subs	r3, #1
 8000a96:	2b00      	cmp	r3, #0
 8000a98:	b410      	push	{r4}
 8000a9a:	6093      	str	r3, [r2, #8]
 8000a9c:	da08      	bge.n	8000ab0 <__sfputc_r+0x1e>
 8000a9e:	6994      	ldr	r4, [r2, #24]
 8000aa0:	42a3      	cmp	r3, r4
 8000aa2:	db01      	blt.n	8000aa8 <__sfputc_r+0x16>
 8000aa4:	290a      	cmp	r1, #10
 8000aa6:	d103      	bne.n	8000ab0 <__sfputc_r+0x1e>
 8000aa8:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000aac:	f000 bc5b 	b.w	8001366 <__swbuf_r>
 8000ab0:	6813      	ldr	r3, [r2, #0]
 8000ab2:	1c58      	adds	r0, r3, #1
 8000ab4:	6010      	str	r0, [r2, #0]
 8000ab6:	7019      	strb	r1, [r3, #0]
 8000ab8:	4608      	mov	r0, r1
 8000aba:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000abe:	4770      	bx	lr

08000ac0 <__sfputs_r>:
 8000ac0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000ac2:	4606      	mov	r6, r0
 8000ac4:	460f      	mov	r7, r1
 8000ac6:	4614      	mov	r4, r2
 8000ac8:	18d5      	adds	r5, r2, r3
 8000aca:	42ac      	cmp	r4, r5
 8000acc:	d101      	bne.n	8000ad2 <__sfputs_r+0x12>
 8000ace:	2000      	movs	r0, #0
 8000ad0:	e007      	b.n	8000ae2 <__sfputs_r+0x22>
 8000ad2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000ad6:	463a      	mov	r2, r7
 8000ad8:	4630      	mov	r0, r6
 8000ada:	f7ff ffda 	bl	8000a92 <__sfputc_r>
 8000ade:	1c43      	adds	r3, r0, #1
 8000ae0:	d1f3      	bne.n	8000aca <__sfputs_r+0xa>
 8000ae2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08000ae4 <_vfiprintf_r>:
 8000ae4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000ae8:	460d      	mov	r5, r1
 8000aea:	b09d      	sub	sp, #116	@ 0x74
 8000aec:	4614      	mov	r4, r2
 8000aee:	4698      	mov	r8, r3
 8000af0:	4606      	mov	r6, r0
 8000af2:	b118      	cbz	r0, 8000afc <_vfiprintf_r+0x18>
 8000af4:	6a03      	ldr	r3, [r0, #32]
 8000af6:	b90b      	cbnz	r3, 8000afc <_vfiprintf_r+0x18>
 8000af8:	f7ff fee8 	bl	80008cc <__sinit>
 8000afc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8000afe:	07d9      	lsls	r1, r3, #31
 8000b00:	d405      	bmi.n	8000b0e <_vfiprintf_r+0x2a>
 8000b02:	89ab      	ldrh	r3, [r5, #12]
 8000b04:	059a      	lsls	r2, r3, #22
 8000b06:	d402      	bmi.n	8000b0e <_vfiprintf_r+0x2a>
 8000b08:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8000b0a:	f7ff ffc0 	bl	8000a8e <__retarget_lock_acquire_recursive>
 8000b0e:	89ab      	ldrh	r3, [r5, #12]
 8000b10:	071b      	lsls	r3, r3, #28
 8000b12:	d501      	bpl.n	8000b18 <_vfiprintf_r+0x34>
 8000b14:	692b      	ldr	r3, [r5, #16]
 8000b16:	b99b      	cbnz	r3, 8000b40 <_vfiprintf_r+0x5c>
 8000b18:	4629      	mov	r1, r5
 8000b1a:	4630      	mov	r0, r6
 8000b1c:	f000 fc62 	bl	80013e4 <__swsetup_r>
 8000b20:	b170      	cbz	r0, 8000b40 <_vfiprintf_r+0x5c>
 8000b22:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8000b24:	07dc      	lsls	r4, r3, #31
 8000b26:	d504      	bpl.n	8000b32 <_vfiprintf_r+0x4e>
 8000b28:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000b2c:	b01d      	add	sp, #116	@ 0x74
 8000b2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000b32:	89ab      	ldrh	r3, [r5, #12]
 8000b34:	0598      	lsls	r0, r3, #22
 8000b36:	d4f7      	bmi.n	8000b28 <_vfiprintf_r+0x44>
 8000b38:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8000b3a:	f7ff ffa9 	bl	8000a90 <__retarget_lock_release_recursive>
 8000b3e:	e7f3      	b.n	8000b28 <_vfiprintf_r+0x44>
 8000b40:	2300      	movs	r3, #0
 8000b42:	9309      	str	r3, [sp, #36]	@ 0x24
 8000b44:	2320      	movs	r3, #32
 8000b46:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8000b4a:	f8cd 800c 	str.w	r8, [sp, #12]
 8000b4e:	2330      	movs	r3, #48	@ 0x30
 8000b50:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8000d00 <_vfiprintf_r+0x21c>
 8000b54:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8000b58:	f04f 0901 	mov.w	r9, #1
 8000b5c:	4623      	mov	r3, r4
 8000b5e:	469a      	mov	sl, r3
 8000b60:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000b64:	b10a      	cbz	r2, 8000b6a <_vfiprintf_r+0x86>
 8000b66:	2a25      	cmp	r2, #37	@ 0x25
 8000b68:	d1f9      	bne.n	8000b5e <_vfiprintf_r+0x7a>
 8000b6a:	ebba 0b04 	subs.w	fp, sl, r4
 8000b6e:	d00b      	beq.n	8000b88 <_vfiprintf_r+0xa4>
 8000b70:	465b      	mov	r3, fp
 8000b72:	4622      	mov	r2, r4
 8000b74:	4629      	mov	r1, r5
 8000b76:	4630      	mov	r0, r6
 8000b78:	f7ff ffa2 	bl	8000ac0 <__sfputs_r>
 8000b7c:	3001      	adds	r0, #1
 8000b7e:	f000 80a7 	beq.w	8000cd0 <_vfiprintf_r+0x1ec>
 8000b82:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8000b84:	445a      	add	r2, fp
 8000b86:	9209      	str	r2, [sp, #36]	@ 0x24
 8000b88:	f89a 3000 	ldrb.w	r3, [sl]
 8000b8c:	2b00      	cmp	r3, #0
 8000b8e:	f000 809f 	beq.w	8000cd0 <_vfiprintf_r+0x1ec>
 8000b92:	2300      	movs	r3, #0
 8000b94:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000b98:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8000b9c:	f10a 0a01 	add.w	sl, sl, #1
 8000ba0:	9304      	str	r3, [sp, #16]
 8000ba2:	9307      	str	r3, [sp, #28]
 8000ba4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8000ba8:	931a      	str	r3, [sp, #104]	@ 0x68
 8000baa:	4654      	mov	r4, sl
 8000bac:	2205      	movs	r2, #5
 8000bae:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000bb2:	4853      	ldr	r0, [pc, #332]	@ (8000d00 <_vfiprintf_r+0x21c>)
 8000bb4:	f7ff fb14 	bl	80001e0 <memchr>
 8000bb8:	9a04      	ldr	r2, [sp, #16]
 8000bba:	b9d8      	cbnz	r0, 8000bf4 <_vfiprintf_r+0x110>
 8000bbc:	06d1      	lsls	r1, r2, #27
 8000bbe:	bf44      	itt	mi
 8000bc0:	2320      	movmi	r3, #32
 8000bc2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8000bc6:	0713      	lsls	r3, r2, #28
 8000bc8:	bf44      	itt	mi
 8000bca:	232b      	movmi	r3, #43	@ 0x2b
 8000bcc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8000bd0:	f89a 3000 	ldrb.w	r3, [sl]
 8000bd4:	2b2a      	cmp	r3, #42	@ 0x2a
 8000bd6:	d015      	beq.n	8000c04 <_vfiprintf_r+0x120>
 8000bd8:	9a07      	ldr	r2, [sp, #28]
 8000bda:	4654      	mov	r4, sl
 8000bdc:	2000      	movs	r0, #0
 8000bde:	f04f 0c0a 	mov.w	ip, #10
 8000be2:	4621      	mov	r1, r4
 8000be4:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000be8:	3b30      	subs	r3, #48	@ 0x30
 8000bea:	2b09      	cmp	r3, #9
 8000bec:	d94b      	bls.n	8000c86 <_vfiprintf_r+0x1a2>
 8000bee:	b1b0      	cbz	r0, 8000c1e <_vfiprintf_r+0x13a>
 8000bf0:	9207      	str	r2, [sp, #28]
 8000bf2:	e014      	b.n	8000c1e <_vfiprintf_r+0x13a>
 8000bf4:	eba0 0308 	sub.w	r3, r0, r8
 8000bf8:	fa09 f303 	lsl.w	r3, r9, r3
 8000bfc:	4313      	orrs	r3, r2
 8000bfe:	9304      	str	r3, [sp, #16]
 8000c00:	46a2      	mov	sl, r4
 8000c02:	e7d2      	b.n	8000baa <_vfiprintf_r+0xc6>
 8000c04:	9b03      	ldr	r3, [sp, #12]
 8000c06:	1d19      	adds	r1, r3, #4
 8000c08:	681b      	ldr	r3, [r3, #0]
 8000c0a:	9103      	str	r1, [sp, #12]
 8000c0c:	2b00      	cmp	r3, #0
 8000c0e:	bfbb      	ittet	lt
 8000c10:	425b      	neglt	r3, r3
 8000c12:	f042 0202 	orrlt.w	r2, r2, #2
 8000c16:	9307      	strge	r3, [sp, #28]
 8000c18:	9307      	strlt	r3, [sp, #28]
 8000c1a:	bfb8      	it	lt
 8000c1c:	9204      	strlt	r2, [sp, #16]
 8000c1e:	7823      	ldrb	r3, [r4, #0]
 8000c20:	2b2e      	cmp	r3, #46	@ 0x2e
 8000c22:	d10a      	bne.n	8000c3a <_vfiprintf_r+0x156>
 8000c24:	7863      	ldrb	r3, [r4, #1]
 8000c26:	2b2a      	cmp	r3, #42	@ 0x2a
 8000c28:	d132      	bne.n	8000c90 <_vfiprintf_r+0x1ac>
 8000c2a:	9b03      	ldr	r3, [sp, #12]
 8000c2c:	1d1a      	adds	r2, r3, #4
 8000c2e:	681b      	ldr	r3, [r3, #0]
 8000c30:	9203      	str	r2, [sp, #12]
 8000c32:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8000c36:	3402      	adds	r4, #2
 8000c38:	9305      	str	r3, [sp, #20]
 8000c3a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8000d10 <_vfiprintf_r+0x22c>
 8000c3e:	7821      	ldrb	r1, [r4, #0]
 8000c40:	2203      	movs	r2, #3
 8000c42:	4650      	mov	r0, sl
 8000c44:	f7ff facc 	bl	80001e0 <memchr>
 8000c48:	b138      	cbz	r0, 8000c5a <_vfiprintf_r+0x176>
 8000c4a:	9b04      	ldr	r3, [sp, #16]
 8000c4c:	eba0 000a 	sub.w	r0, r0, sl
 8000c50:	2240      	movs	r2, #64	@ 0x40
 8000c52:	4082      	lsls	r2, r0
 8000c54:	4313      	orrs	r3, r2
 8000c56:	3401      	adds	r4, #1
 8000c58:	9304      	str	r3, [sp, #16]
 8000c5a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000c5e:	4829      	ldr	r0, [pc, #164]	@ (8000d04 <_vfiprintf_r+0x220>)
 8000c60:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8000c64:	2206      	movs	r2, #6
 8000c66:	f7ff fabb 	bl	80001e0 <memchr>
 8000c6a:	2800      	cmp	r0, #0
 8000c6c:	d03f      	beq.n	8000cee <_vfiprintf_r+0x20a>
 8000c6e:	4b26      	ldr	r3, [pc, #152]	@ (8000d08 <_vfiprintf_r+0x224>)
 8000c70:	bb1b      	cbnz	r3, 8000cba <_vfiprintf_r+0x1d6>
 8000c72:	9b03      	ldr	r3, [sp, #12]
 8000c74:	3307      	adds	r3, #7
 8000c76:	f023 0307 	bic.w	r3, r3, #7
 8000c7a:	3308      	adds	r3, #8
 8000c7c:	9303      	str	r3, [sp, #12]
 8000c7e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8000c80:	443b      	add	r3, r7
 8000c82:	9309      	str	r3, [sp, #36]	@ 0x24
 8000c84:	e76a      	b.n	8000b5c <_vfiprintf_r+0x78>
 8000c86:	fb0c 3202 	mla	r2, ip, r2, r3
 8000c8a:	460c      	mov	r4, r1
 8000c8c:	2001      	movs	r0, #1
 8000c8e:	e7a8      	b.n	8000be2 <_vfiprintf_r+0xfe>
 8000c90:	2300      	movs	r3, #0
 8000c92:	3401      	adds	r4, #1
 8000c94:	9305      	str	r3, [sp, #20]
 8000c96:	4619      	mov	r1, r3
 8000c98:	f04f 0c0a 	mov.w	ip, #10
 8000c9c:	4620      	mov	r0, r4
 8000c9e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000ca2:	3a30      	subs	r2, #48	@ 0x30
 8000ca4:	2a09      	cmp	r2, #9
 8000ca6:	d903      	bls.n	8000cb0 <_vfiprintf_r+0x1cc>
 8000ca8:	2b00      	cmp	r3, #0
 8000caa:	d0c6      	beq.n	8000c3a <_vfiprintf_r+0x156>
 8000cac:	9105      	str	r1, [sp, #20]
 8000cae:	e7c4      	b.n	8000c3a <_vfiprintf_r+0x156>
 8000cb0:	fb0c 2101 	mla	r1, ip, r1, r2
 8000cb4:	4604      	mov	r4, r0
 8000cb6:	2301      	movs	r3, #1
 8000cb8:	e7f0      	b.n	8000c9c <_vfiprintf_r+0x1b8>
 8000cba:	ab03      	add	r3, sp, #12
 8000cbc:	9300      	str	r3, [sp, #0]
 8000cbe:	462a      	mov	r2, r5
 8000cc0:	4b12      	ldr	r3, [pc, #72]	@ (8000d0c <_vfiprintf_r+0x228>)
 8000cc2:	a904      	add	r1, sp, #16
 8000cc4:	4630      	mov	r0, r6
 8000cc6:	f3af 8000 	nop.w
 8000cca:	4607      	mov	r7, r0
 8000ccc:	1c78      	adds	r0, r7, #1
 8000cce:	d1d6      	bne.n	8000c7e <_vfiprintf_r+0x19a>
 8000cd0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8000cd2:	07d9      	lsls	r1, r3, #31
 8000cd4:	d405      	bmi.n	8000ce2 <_vfiprintf_r+0x1fe>
 8000cd6:	89ab      	ldrh	r3, [r5, #12]
 8000cd8:	059a      	lsls	r2, r3, #22
 8000cda:	d402      	bmi.n	8000ce2 <_vfiprintf_r+0x1fe>
 8000cdc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8000cde:	f7ff fed7 	bl	8000a90 <__retarget_lock_release_recursive>
 8000ce2:	89ab      	ldrh	r3, [r5, #12]
 8000ce4:	065b      	lsls	r3, r3, #25
 8000ce6:	f53f af1f 	bmi.w	8000b28 <_vfiprintf_r+0x44>
 8000cea:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8000cec:	e71e      	b.n	8000b2c <_vfiprintf_r+0x48>
 8000cee:	ab03      	add	r3, sp, #12
 8000cf0:	9300      	str	r3, [sp, #0]
 8000cf2:	462a      	mov	r2, r5
 8000cf4:	4b05      	ldr	r3, [pc, #20]	@ (8000d0c <_vfiprintf_r+0x228>)
 8000cf6:	a904      	add	r1, sp, #16
 8000cf8:	4630      	mov	r0, r6
 8000cfa:	f000 f91b 	bl	8000f34 <_printf_i>
 8000cfe:	e7e4      	b.n	8000cca <_vfiprintf_r+0x1e6>
 8000d00:	08001897 	.word	0x08001897
 8000d04:	080018a1 	.word	0x080018a1
 8000d08:	00000000 	.word	0x00000000
 8000d0c:	08000ac1 	.word	0x08000ac1
 8000d10:	0800189d 	.word	0x0800189d

08000d14 <sbrk_aligned>:
 8000d14:	b570      	push	{r4, r5, r6, lr}
 8000d16:	4e0f      	ldr	r6, [pc, #60]	@ (8000d54 <sbrk_aligned+0x40>)
 8000d18:	460c      	mov	r4, r1
 8000d1a:	6831      	ldr	r1, [r6, #0]
 8000d1c:	4605      	mov	r5, r0
 8000d1e:	b911      	cbnz	r1, 8000d26 <sbrk_aligned+0x12>
 8000d20:	f000 fc80 	bl	8001624 <_sbrk_r>
 8000d24:	6030      	str	r0, [r6, #0]
 8000d26:	4621      	mov	r1, r4
 8000d28:	4628      	mov	r0, r5
 8000d2a:	f000 fc7b 	bl	8001624 <_sbrk_r>
 8000d2e:	1c43      	adds	r3, r0, #1
 8000d30:	d103      	bne.n	8000d3a <sbrk_aligned+0x26>
 8000d32:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8000d36:	4620      	mov	r0, r4
 8000d38:	bd70      	pop	{r4, r5, r6, pc}
 8000d3a:	1cc4      	adds	r4, r0, #3
 8000d3c:	f024 0403 	bic.w	r4, r4, #3
 8000d40:	42a0      	cmp	r0, r4
 8000d42:	d0f8      	beq.n	8000d36 <sbrk_aligned+0x22>
 8000d44:	1a21      	subs	r1, r4, r0
 8000d46:	4628      	mov	r0, r5
 8000d48:	f000 fc6c 	bl	8001624 <_sbrk_r>
 8000d4c:	3001      	adds	r0, #1
 8000d4e:	d1f2      	bne.n	8000d36 <sbrk_aligned+0x22>
 8000d50:	e7ef      	b.n	8000d32 <sbrk_aligned+0x1e>
 8000d52:	bf00      	nop
 8000d54:	200001e4 	.word	0x200001e4

08000d58 <_malloc_r>:
 8000d58:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000d5c:	1ccd      	adds	r5, r1, #3
 8000d5e:	f025 0503 	bic.w	r5, r5, #3
 8000d62:	3508      	adds	r5, #8
 8000d64:	2d0c      	cmp	r5, #12
 8000d66:	bf38      	it	cc
 8000d68:	250c      	movcc	r5, #12
 8000d6a:	2d00      	cmp	r5, #0
 8000d6c:	4606      	mov	r6, r0
 8000d6e:	db01      	blt.n	8000d74 <_malloc_r+0x1c>
 8000d70:	42a9      	cmp	r1, r5
 8000d72:	d904      	bls.n	8000d7e <_malloc_r+0x26>
 8000d74:	230c      	movs	r3, #12
 8000d76:	6033      	str	r3, [r6, #0]
 8000d78:	2000      	movs	r0, #0
 8000d7a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000d7e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8000e54 <_malloc_r+0xfc>
 8000d82:	f000 faa1 	bl	80012c8 <__malloc_lock>
 8000d86:	f8d8 3000 	ldr.w	r3, [r8]
 8000d8a:	461c      	mov	r4, r3
 8000d8c:	bb44      	cbnz	r4, 8000de0 <_malloc_r+0x88>
 8000d8e:	4629      	mov	r1, r5
 8000d90:	4630      	mov	r0, r6
 8000d92:	f7ff ffbf 	bl	8000d14 <sbrk_aligned>
 8000d96:	1c43      	adds	r3, r0, #1
 8000d98:	4604      	mov	r4, r0
 8000d9a:	d158      	bne.n	8000e4e <_malloc_r+0xf6>
 8000d9c:	f8d8 4000 	ldr.w	r4, [r8]
 8000da0:	4627      	mov	r7, r4
 8000da2:	2f00      	cmp	r7, #0
 8000da4:	d143      	bne.n	8000e2e <_malloc_r+0xd6>
 8000da6:	2c00      	cmp	r4, #0
 8000da8:	d04b      	beq.n	8000e42 <_malloc_r+0xea>
 8000daa:	6823      	ldr	r3, [r4, #0]
 8000dac:	4639      	mov	r1, r7
 8000dae:	4630      	mov	r0, r6
 8000db0:	eb04 0903 	add.w	r9, r4, r3
 8000db4:	f000 fc36 	bl	8001624 <_sbrk_r>
 8000db8:	4581      	cmp	r9, r0
 8000dba:	d142      	bne.n	8000e42 <_malloc_r+0xea>
 8000dbc:	6821      	ldr	r1, [r4, #0]
 8000dbe:	1a6d      	subs	r5, r5, r1
 8000dc0:	4629      	mov	r1, r5
 8000dc2:	4630      	mov	r0, r6
 8000dc4:	f7ff ffa6 	bl	8000d14 <sbrk_aligned>
 8000dc8:	3001      	adds	r0, #1
 8000dca:	d03a      	beq.n	8000e42 <_malloc_r+0xea>
 8000dcc:	6823      	ldr	r3, [r4, #0]
 8000dce:	442b      	add	r3, r5
 8000dd0:	6023      	str	r3, [r4, #0]
 8000dd2:	f8d8 3000 	ldr.w	r3, [r8]
 8000dd6:	685a      	ldr	r2, [r3, #4]
 8000dd8:	bb62      	cbnz	r2, 8000e34 <_malloc_r+0xdc>
 8000dda:	f8c8 7000 	str.w	r7, [r8]
 8000dde:	e00f      	b.n	8000e00 <_malloc_r+0xa8>
 8000de0:	6822      	ldr	r2, [r4, #0]
 8000de2:	1b52      	subs	r2, r2, r5
 8000de4:	d420      	bmi.n	8000e28 <_malloc_r+0xd0>
 8000de6:	2a0b      	cmp	r2, #11
 8000de8:	d917      	bls.n	8000e1a <_malloc_r+0xc2>
 8000dea:	1961      	adds	r1, r4, r5
 8000dec:	42a3      	cmp	r3, r4
 8000dee:	6025      	str	r5, [r4, #0]
 8000df0:	bf18      	it	ne
 8000df2:	6059      	strne	r1, [r3, #4]
 8000df4:	6863      	ldr	r3, [r4, #4]
 8000df6:	bf08      	it	eq
 8000df8:	f8c8 1000 	streq.w	r1, [r8]
 8000dfc:	5162      	str	r2, [r4, r5]
 8000dfe:	604b      	str	r3, [r1, #4]
 8000e00:	4630      	mov	r0, r6
 8000e02:	f000 fa67 	bl	80012d4 <__malloc_unlock>
 8000e06:	f104 000b 	add.w	r0, r4, #11
 8000e0a:	1d23      	adds	r3, r4, #4
 8000e0c:	f020 0007 	bic.w	r0, r0, #7
 8000e10:	1ac2      	subs	r2, r0, r3
 8000e12:	bf1c      	itt	ne
 8000e14:	1a1b      	subne	r3, r3, r0
 8000e16:	50a3      	strne	r3, [r4, r2]
 8000e18:	e7af      	b.n	8000d7a <_malloc_r+0x22>
 8000e1a:	6862      	ldr	r2, [r4, #4]
 8000e1c:	42a3      	cmp	r3, r4
 8000e1e:	bf0c      	ite	eq
 8000e20:	f8c8 2000 	streq.w	r2, [r8]
 8000e24:	605a      	strne	r2, [r3, #4]
 8000e26:	e7eb      	b.n	8000e00 <_malloc_r+0xa8>
 8000e28:	4623      	mov	r3, r4
 8000e2a:	6864      	ldr	r4, [r4, #4]
 8000e2c:	e7ae      	b.n	8000d8c <_malloc_r+0x34>
 8000e2e:	463c      	mov	r4, r7
 8000e30:	687f      	ldr	r7, [r7, #4]
 8000e32:	e7b6      	b.n	8000da2 <_malloc_r+0x4a>
 8000e34:	461a      	mov	r2, r3
 8000e36:	685b      	ldr	r3, [r3, #4]
 8000e38:	42a3      	cmp	r3, r4
 8000e3a:	d1fb      	bne.n	8000e34 <_malloc_r+0xdc>
 8000e3c:	2300      	movs	r3, #0
 8000e3e:	6053      	str	r3, [r2, #4]
 8000e40:	e7de      	b.n	8000e00 <_malloc_r+0xa8>
 8000e42:	230c      	movs	r3, #12
 8000e44:	6033      	str	r3, [r6, #0]
 8000e46:	4630      	mov	r0, r6
 8000e48:	f000 fa44 	bl	80012d4 <__malloc_unlock>
 8000e4c:	e794      	b.n	8000d78 <_malloc_r+0x20>
 8000e4e:	6005      	str	r5, [r0, #0]
 8000e50:	e7d6      	b.n	8000e00 <_malloc_r+0xa8>
 8000e52:	bf00      	nop
 8000e54:	200001e8 	.word	0x200001e8

08000e58 <_printf_common>:
 8000e58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000e5c:	4616      	mov	r6, r2
 8000e5e:	4698      	mov	r8, r3
 8000e60:	688a      	ldr	r2, [r1, #8]
 8000e62:	690b      	ldr	r3, [r1, #16]
 8000e64:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8000e68:	4293      	cmp	r3, r2
 8000e6a:	bfb8      	it	lt
 8000e6c:	4613      	movlt	r3, r2
 8000e6e:	6033      	str	r3, [r6, #0]
 8000e70:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8000e74:	4607      	mov	r7, r0
 8000e76:	460c      	mov	r4, r1
 8000e78:	b10a      	cbz	r2, 8000e7e <_printf_common+0x26>
 8000e7a:	3301      	adds	r3, #1
 8000e7c:	6033      	str	r3, [r6, #0]
 8000e7e:	6823      	ldr	r3, [r4, #0]
 8000e80:	0699      	lsls	r1, r3, #26
 8000e82:	bf42      	ittt	mi
 8000e84:	6833      	ldrmi	r3, [r6, #0]
 8000e86:	3302      	addmi	r3, #2
 8000e88:	6033      	strmi	r3, [r6, #0]
 8000e8a:	6825      	ldr	r5, [r4, #0]
 8000e8c:	f015 0506 	ands.w	r5, r5, #6
 8000e90:	d106      	bne.n	8000ea0 <_printf_common+0x48>
 8000e92:	f104 0a19 	add.w	sl, r4, #25
 8000e96:	68e3      	ldr	r3, [r4, #12]
 8000e98:	6832      	ldr	r2, [r6, #0]
 8000e9a:	1a9b      	subs	r3, r3, r2
 8000e9c:	42ab      	cmp	r3, r5
 8000e9e:	dc26      	bgt.n	8000eee <_printf_common+0x96>
 8000ea0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8000ea4:	6822      	ldr	r2, [r4, #0]
 8000ea6:	3b00      	subs	r3, #0
 8000ea8:	bf18      	it	ne
 8000eaa:	2301      	movne	r3, #1
 8000eac:	0692      	lsls	r2, r2, #26
 8000eae:	d42b      	bmi.n	8000f08 <_printf_common+0xb0>
 8000eb0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8000eb4:	4641      	mov	r1, r8
 8000eb6:	4638      	mov	r0, r7
 8000eb8:	47c8      	blx	r9
 8000eba:	3001      	adds	r0, #1
 8000ebc:	d01e      	beq.n	8000efc <_printf_common+0xa4>
 8000ebe:	6823      	ldr	r3, [r4, #0]
 8000ec0:	6922      	ldr	r2, [r4, #16]
 8000ec2:	f003 0306 	and.w	r3, r3, #6
 8000ec6:	2b04      	cmp	r3, #4
 8000ec8:	bf02      	ittt	eq
 8000eca:	68e5      	ldreq	r5, [r4, #12]
 8000ecc:	6833      	ldreq	r3, [r6, #0]
 8000ece:	1aed      	subeq	r5, r5, r3
 8000ed0:	68a3      	ldr	r3, [r4, #8]
 8000ed2:	bf0c      	ite	eq
 8000ed4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8000ed8:	2500      	movne	r5, #0
 8000eda:	4293      	cmp	r3, r2
 8000edc:	bfc4      	itt	gt
 8000ede:	1a9b      	subgt	r3, r3, r2
 8000ee0:	18ed      	addgt	r5, r5, r3
 8000ee2:	2600      	movs	r6, #0
 8000ee4:	341a      	adds	r4, #26
 8000ee6:	42b5      	cmp	r5, r6
 8000ee8:	d11a      	bne.n	8000f20 <_printf_common+0xc8>
 8000eea:	2000      	movs	r0, #0
 8000eec:	e008      	b.n	8000f00 <_printf_common+0xa8>
 8000eee:	2301      	movs	r3, #1
 8000ef0:	4652      	mov	r2, sl
 8000ef2:	4641      	mov	r1, r8
 8000ef4:	4638      	mov	r0, r7
 8000ef6:	47c8      	blx	r9
 8000ef8:	3001      	adds	r0, #1
 8000efa:	d103      	bne.n	8000f04 <_printf_common+0xac>
 8000efc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000f00:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f04:	3501      	adds	r5, #1
 8000f06:	e7c6      	b.n	8000e96 <_printf_common+0x3e>
 8000f08:	18e1      	adds	r1, r4, r3
 8000f0a:	1c5a      	adds	r2, r3, #1
 8000f0c:	2030      	movs	r0, #48	@ 0x30
 8000f0e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8000f12:	4422      	add	r2, r4
 8000f14:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8000f18:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8000f1c:	3302      	adds	r3, #2
 8000f1e:	e7c7      	b.n	8000eb0 <_printf_common+0x58>
 8000f20:	2301      	movs	r3, #1
 8000f22:	4622      	mov	r2, r4
 8000f24:	4641      	mov	r1, r8
 8000f26:	4638      	mov	r0, r7
 8000f28:	47c8      	blx	r9
 8000f2a:	3001      	adds	r0, #1
 8000f2c:	d0e6      	beq.n	8000efc <_printf_common+0xa4>
 8000f2e:	3601      	adds	r6, #1
 8000f30:	e7d9      	b.n	8000ee6 <_printf_common+0x8e>
	...

08000f34 <_printf_i>:
 8000f34:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8000f38:	7e0f      	ldrb	r7, [r1, #24]
 8000f3a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8000f3c:	2f78      	cmp	r7, #120	@ 0x78
 8000f3e:	4691      	mov	r9, r2
 8000f40:	4680      	mov	r8, r0
 8000f42:	460c      	mov	r4, r1
 8000f44:	469a      	mov	sl, r3
 8000f46:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8000f4a:	d807      	bhi.n	8000f5c <_printf_i+0x28>
 8000f4c:	2f62      	cmp	r7, #98	@ 0x62
 8000f4e:	d80a      	bhi.n	8000f66 <_printf_i+0x32>
 8000f50:	2f00      	cmp	r7, #0
 8000f52:	f000 80d1 	beq.w	80010f8 <_printf_i+0x1c4>
 8000f56:	2f58      	cmp	r7, #88	@ 0x58
 8000f58:	f000 80b8 	beq.w	80010cc <_printf_i+0x198>
 8000f5c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8000f60:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8000f64:	e03a      	b.n	8000fdc <_printf_i+0xa8>
 8000f66:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8000f6a:	2b15      	cmp	r3, #21
 8000f6c:	d8f6      	bhi.n	8000f5c <_printf_i+0x28>
 8000f6e:	a101      	add	r1, pc, #4	@ (adr r1, 8000f74 <_printf_i+0x40>)
 8000f70:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8000f74:	08000fcd 	.word	0x08000fcd
 8000f78:	08000fe1 	.word	0x08000fe1
 8000f7c:	08000f5d 	.word	0x08000f5d
 8000f80:	08000f5d 	.word	0x08000f5d
 8000f84:	08000f5d 	.word	0x08000f5d
 8000f88:	08000f5d 	.word	0x08000f5d
 8000f8c:	08000fe1 	.word	0x08000fe1
 8000f90:	08000f5d 	.word	0x08000f5d
 8000f94:	08000f5d 	.word	0x08000f5d
 8000f98:	08000f5d 	.word	0x08000f5d
 8000f9c:	08000f5d 	.word	0x08000f5d
 8000fa0:	080010df 	.word	0x080010df
 8000fa4:	0800100b 	.word	0x0800100b
 8000fa8:	08001099 	.word	0x08001099
 8000fac:	08000f5d 	.word	0x08000f5d
 8000fb0:	08000f5d 	.word	0x08000f5d
 8000fb4:	08001101 	.word	0x08001101
 8000fb8:	08000f5d 	.word	0x08000f5d
 8000fbc:	0800100b 	.word	0x0800100b
 8000fc0:	08000f5d 	.word	0x08000f5d
 8000fc4:	08000f5d 	.word	0x08000f5d
 8000fc8:	080010a1 	.word	0x080010a1
 8000fcc:	6833      	ldr	r3, [r6, #0]
 8000fce:	1d1a      	adds	r2, r3, #4
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	6032      	str	r2, [r6, #0]
 8000fd4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8000fd8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8000fdc:	2301      	movs	r3, #1
 8000fde:	e09c      	b.n	800111a <_printf_i+0x1e6>
 8000fe0:	6833      	ldr	r3, [r6, #0]
 8000fe2:	6820      	ldr	r0, [r4, #0]
 8000fe4:	1d19      	adds	r1, r3, #4
 8000fe6:	6031      	str	r1, [r6, #0]
 8000fe8:	0606      	lsls	r6, r0, #24
 8000fea:	d501      	bpl.n	8000ff0 <_printf_i+0xbc>
 8000fec:	681d      	ldr	r5, [r3, #0]
 8000fee:	e003      	b.n	8000ff8 <_printf_i+0xc4>
 8000ff0:	0645      	lsls	r5, r0, #25
 8000ff2:	d5fb      	bpl.n	8000fec <_printf_i+0xb8>
 8000ff4:	f9b3 5000 	ldrsh.w	r5, [r3]
 8000ff8:	2d00      	cmp	r5, #0
 8000ffa:	da03      	bge.n	8001004 <_printf_i+0xd0>
 8000ffc:	232d      	movs	r3, #45	@ 0x2d
 8000ffe:	426d      	negs	r5, r5
 8001000:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8001004:	4858      	ldr	r0, [pc, #352]	@ (8001168 <_printf_i+0x234>)
 8001006:	230a      	movs	r3, #10
 8001008:	e011      	b.n	800102e <_printf_i+0xfa>
 800100a:	6821      	ldr	r1, [r4, #0]
 800100c:	6833      	ldr	r3, [r6, #0]
 800100e:	0608      	lsls	r0, r1, #24
 8001010:	f853 5b04 	ldr.w	r5, [r3], #4
 8001014:	d402      	bmi.n	800101c <_printf_i+0xe8>
 8001016:	0649      	lsls	r1, r1, #25
 8001018:	bf48      	it	mi
 800101a:	b2ad      	uxthmi	r5, r5
 800101c:	2f6f      	cmp	r7, #111	@ 0x6f
 800101e:	4852      	ldr	r0, [pc, #328]	@ (8001168 <_printf_i+0x234>)
 8001020:	6033      	str	r3, [r6, #0]
 8001022:	bf14      	ite	ne
 8001024:	230a      	movne	r3, #10
 8001026:	2308      	moveq	r3, #8
 8001028:	2100      	movs	r1, #0
 800102a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800102e:	6866      	ldr	r6, [r4, #4]
 8001030:	60a6      	str	r6, [r4, #8]
 8001032:	2e00      	cmp	r6, #0
 8001034:	db05      	blt.n	8001042 <_printf_i+0x10e>
 8001036:	6821      	ldr	r1, [r4, #0]
 8001038:	432e      	orrs	r6, r5
 800103a:	f021 0104 	bic.w	r1, r1, #4
 800103e:	6021      	str	r1, [r4, #0]
 8001040:	d04b      	beq.n	80010da <_printf_i+0x1a6>
 8001042:	4616      	mov	r6, r2
 8001044:	fbb5 f1f3 	udiv	r1, r5, r3
 8001048:	fb03 5711 	mls	r7, r3, r1, r5
 800104c:	5dc7      	ldrb	r7, [r0, r7]
 800104e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8001052:	462f      	mov	r7, r5
 8001054:	42bb      	cmp	r3, r7
 8001056:	460d      	mov	r5, r1
 8001058:	d9f4      	bls.n	8001044 <_printf_i+0x110>
 800105a:	2b08      	cmp	r3, #8
 800105c:	d10b      	bne.n	8001076 <_printf_i+0x142>
 800105e:	6823      	ldr	r3, [r4, #0]
 8001060:	07df      	lsls	r7, r3, #31
 8001062:	d508      	bpl.n	8001076 <_printf_i+0x142>
 8001064:	6923      	ldr	r3, [r4, #16]
 8001066:	6861      	ldr	r1, [r4, #4]
 8001068:	4299      	cmp	r1, r3
 800106a:	bfde      	ittt	le
 800106c:	2330      	movle	r3, #48	@ 0x30
 800106e:	f806 3c01 	strble.w	r3, [r6, #-1]
 8001072:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8001076:	1b92      	subs	r2, r2, r6
 8001078:	6122      	str	r2, [r4, #16]
 800107a:	f8cd a000 	str.w	sl, [sp]
 800107e:	464b      	mov	r3, r9
 8001080:	aa03      	add	r2, sp, #12
 8001082:	4621      	mov	r1, r4
 8001084:	4640      	mov	r0, r8
 8001086:	f7ff fee7 	bl	8000e58 <_printf_common>
 800108a:	3001      	adds	r0, #1
 800108c:	d14a      	bne.n	8001124 <_printf_i+0x1f0>
 800108e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001092:	b004      	add	sp, #16
 8001094:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001098:	6823      	ldr	r3, [r4, #0]
 800109a:	f043 0320 	orr.w	r3, r3, #32
 800109e:	6023      	str	r3, [r4, #0]
 80010a0:	4832      	ldr	r0, [pc, #200]	@ (800116c <_printf_i+0x238>)
 80010a2:	2778      	movs	r7, #120	@ 0x78
 80010a4:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80010a8:	6823      	ldr	r3, [r4, #0]
 80010aa:	6831      	ldr	r1, [r6, #0]
 80010ac:	061f      	lsls	r7, r3, #24
 80010ae:	f851 5b04 	ldr.w	r5, [r1], #4
 80010b2:	d402      	bmi.n	80010ba <_printf_i+0x186>
 80010b4:	065f      	lsls	r7, r3, #25
 80010b6:	bf48      	it	mi
 80010b8:	b2ad      	uxthmi	r5, r5
 80010ba:	6031      	str	r1, [r6, #0]
 80010bc:	07d9      	lsls	r1, r3, #31
 80010be:	bf44      	itt	mi
 80010c0:	f043 0320 	orrmi.w	r3, r3, #32
 80010c4:	6023      	strmi	r3, [r4, #0]
 80010c6:	b11d      	cbz	r5, 80010d0 <_printf_i+0x19c>
 80010c8:	2310      	movs	r3, #16
 80010ca:	e7ad      	b.n	8001028 <_printf_i+0xf4>
 80010cc:	4826      	ldr	r0, [pc, #152]	@ (8001168 <_printf_i+0x234>)
 80010ce:	e7e9      	b.n	80010a4 <_printf_i+0x170>
 80010d0:	6823      	ldr	r3, [r4, #0]
 80010d2:	f023 0320 	bic.w	r3, r3, #32
 80010d6:	6023      	str	r3, [r4, #0]
 80010d8:	e7f6      	b.n	80010c8 <_printf_i+0x194>
 80010da:	4616      	mov	r6, r2
 80010dc:	e7bd      	b.n	800105a <_printf_i+0x126>
 80010de:	6833      	ldr	r3, [r6, #0]
 80010e0:	6825      	ldr	r5, [r4, #0]
 80010e2:	6961      	ldr	r1, [r4, #20]
 80010e4:	1d18      	adds	r0, r3, #4
 80010e6:	6030      	str	r0, [r6, #0]
 80010e8:	062e      	lsls	r6, r5, #24
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	d501      	bpl.n	80010f2 <_printf_i+0x1be>
 80010ee:	6019      	str	r1, [r3, #0]
 80010f0:	e002      	b.n	80010f8 <_printf_i+0x1c4>
 80010f2:	0668      	lsls	r0, r5, #25
 80010f4:	d5fb      	bpl.n	80010ee <_printf_i+0x1ba>
 80010f6:	8019      	strh	r1, [r3, #0]
 80010f8:	2300      	movs	r3, #0
 80010fa:	6123      	str	r3, [r4, #16]
 80010fc:	4616      	mov	r6, r2
 80010fe:	e7bc      	b.n	800107a <_printf_i+0x146>
 8001100:	6833      	ldr	r3, [r6, #0]
 8001102:	1d1a      	adds	r2, r3, #4
 8001104:	6032      	str	r2, [r6, #0]
 8001106:	681e      	ldr	r6, [r3, #0]
 8001108:	6862      	ldr	r2, [r4, #4]
 800110a:	2100      	movs	r1, #0
 800110c:	4630      	mov	r0, r6
 800110e:	f7ff f867 	bl	80001e0 <memchr>
 8001112:	b108      	cbz	r0, 8001118 <_printf_i+0x1e4>
 8001114:	1b80      	subs	r0, r0, r6
 8001116:	6060      	str	r0, [r4, #4]
 8001118:	6863      	ldr	r3, [r4, #4]
 800111a:	6123      	str	r3, [r4, #16]
 800111c:	2300      	movs	r3, #0
 800111e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8001122:	e7aa      	b.n	800107a <_printf_i+0x146>
 8001124:	6923      	ldr	r3, [r4, #16]
 8001126:	4632      	mov	r2, r6
 8001128:	4649      	mov	r1, r9
 800112a:	4640      	mov	r0, r8
 800112c:	47d0      	blx	sl
 800112e:	3001      	adds	r0, #1
 8001130:	d0ad      	beq.n	800108e <_printf_i+0x15a>
 8001132:	6823      	ldr	r3, [r4, #0]
 8001134:	079b      	lsls	r3, r3, #30
 8001136:	d413      	bmi.n	8001160 <_printf_i+0x22c>
 8001138:	68e0      	ldr	r0, [r4, #12]
 800113a:	9b03      	ldr	r3, [sp, #12]
 800113c:	4298      	cmp	r0, r3
 800113e:	bfb8      	it	lt
 8001140:	4618      	movlt	r0, r3
 8001142:	e7a6      	b.n	8001092 <_printf_i+0x15e>
 8001144:	2301      	movs	r3, #1
 8001146:	4632      	mov	r2, r6
 8001148:	4649      	mov	r1, r9
 800114a:	4640      	mov	r0, r8
 800114c:	47d0      	blx	sl
 800114e:	3001      	adds	r0, #1
 8001150:	d09d      	beq.n	800108e <_printf_i+0x15a>
 8001152:	3501      	adds	r5, #1
 8001154:	68e3      	ldr	r3, [r4, #12]
 8001156:	9903      	ldr	r1, [sp, #12]
 8001158:	1a5b      	subs	r3, r3, r1
 800115a:	42ab      	cmp	r3, r5
 800115c:	dcf2      	bgt.n	8001144 <_printf_i+0x210>
 800115e:	e7eb      	b.n	8001138 <_printf_i+0x204>
 8001160:	2500      	movs	r5, #0
 8001162:	f104 0619 	add.w	r6, r4, #25
 8001166:	e7f5      	b.n	8001154 <_printf_i+0x220>
 8001168:	080018a8 	.word	0x080018a8
 800116c:	080018b9 	.word	0x080018b9

08001170 <__sflush_r>:
 8001170:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8001174:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001178:	0716      	lsls	r6, r2, #28
 800117a:	4605      	mov	r5, r0
 800117c:	460c      	mov	r4, r1
 800117e:	d454      	bmi.n	800122a <__sflush_r+0xba>
 8001180:	684b      	ldr	r3, [r1, #4]
 8001182:	2b00      	cmp	r3, #0
 8001184:	dc02      	bgt.n	800118c <__sflush_r+0x1c>
 8001186:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8001188:	2b00      	cmp	r3, #0
 800118a:	dd48      	ble.n	800121e <__sflush_r+0xae>
 800118c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800118e:	2e00      	cmp	r6, #0
 8001190:	d045      	beq.n	800121e <__sflush_r+0xae>
 8001192:	2300      	movs	r3, #0
 8001194:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8001198:	682f      	ldr	r7, [r5, #0]
 800119a:	6a21      	ldr	r1, [r4, #32]
 800119c:	602b      	str	r3, [r5, #0]
 800119e:	d030      	beq.n	8001202 <__sflush_r+0x92>
 80011a0:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80011a2:	89a3      	ldrh	r3, [r4, #12]
 80011a4:	0759      	lsls	r1, r3, #29
 80011a6:	d505      	bpl.n	80011b4 <__sflush_r+0x44>
 80011a8:	6863      	ldr	r3, [r4, #4]
 80011aa:	1ad2      	subs	r2, r2, r3
 80011ac:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80011ae:	b10b      	cbz	r3, 80011b4 <__sflush_r+0x44>
 80011b0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80011b2:	1ad2      	subs	r2, r2, r3
 80011b4:	2300      	movs	r3, #0
 80011b6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80011b8:	6a21      	ldr	r1, [r4, #32]
 80011ba:	4628      	mov	r0, r5
 80011bc:	47b0      	blx	r6
 80011be:	1c43      	adds	r3, r0, #1
 80011c0:	89a3      	ldrh	r3, [r4, #12]
 80011c2:	d106      	bne.n	80011d2 <__sflush_r+0x62>
 80011c4:	6829      	ldr	r1, [r5, #0]
 80011c6:	291d      	cmp	r1, #29
 80011c8:	d82b      	bhi.n	8001222 <__sflush_r+0xb2>
 80011ca:	4a2a      	ldr	r2, [pc, #168]	@ (8001274 <__sflush_r+0x104>)
 80011cc:	40ca      	lsrs	r2, r1
 80011ce:	07d6      	lsls	r6, r2, #31
 80011d0:	d527      	bpl.n	8001222 <__sflush_r+0xb2>
 80011d2:	2200      	movs	r2, #0
 80011d4:	6062      	str	r2, [r4, #4]
 80011d6:	04d9      	lsls	r1, r3, #19
 80011d8:	6922      	ldr	r2, [r4, #16]
 80011da:	6022      	str	r2, [r4, #0]
 80011dc:	d504      	bpl.n	80011e8 <__sflush_r+0x78>
 80011de:	1c42      	adds	r2, r0, #1
 80011e0:	d101      	bne.n	80011e6 <__sflush_r+0x76>
 80011e2:	682b      	ldr	r3, [r5, #0]
 80011e4:	b903      	cbnz	r3, 80011e8 <__sflush_r+0x78>
 80011e6:	6560      	str	r0, [r4, #84]	@ 0x54
 80011e8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80011ea:	602f      	str	r7, [r5, #0]
 80011ec:	b1b9      	cbz	r1, 800121e <__sflush_r+0xae>
 80011ee:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80011f2:	4299      	cmp	r1, r3
 80011f4:	d002      	beq.n	80011fc <__sflush_r+0x8c>
 80011f6:	4628      	mov	r0, r5
 80011f8:	f000 fa58 	bl	80016ac <_free_r>
 80011fc:	2300      	movs	r3, #0
 80011fe:	6363      	str	r3, [r4, #52]	@ 0x34
 8001200:	e00d      	b.n	800121e <__sflush_r+0xae>
 8001202:	2301      	movs	r3, #1
 8001204:	4628      	mov	r0, r5
 8001206:	47b0      	blx	r6
 8001208:	4602      	mov	r2, r0
 800120a:	1c50      	adds	r0, r2, #1
 800120c:	d1c9      	bne.n	80011a2 <__sflush_r+0x32>
 800120e:	682b      	ldr	r3, [r5, #0]
 8001210:	2b00      	cmp	r3, #0
 8001212:	d0c6      	beq.n	80011a2 <__sflush_r+0x32>
 8001214:	2b1d      	cmp	r3, #29
 8001216:	d001      	beq.n	800121c <__sflush_r+0xac>
 8001218:	2b16      	cmp	r3, #22
 800121a:	d11e      	bne.n	800125a <__sflush_r+0xea>
 800121c:	602f      	str	r7, [r5, #0]
 800121e:	2000      	movs	r0, #0
 8001220:	e022      	b.n	8001268 <__sflush_r+0xf8>
 8001222:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001226:	b21b      	sxth	r3, r3
 8001228:	e01b      	b.n	8001262 <__sflush_r+0xf2>
 800122a:	690f      	ldr	r7, [r1, #16]
 800122c:	2f00      	cmp	r7, #0
 800122e:	d0f6      	beq.n	800121e <__sflush_r+0xae>
 8001230:	0793      	lsls	r3, r2, #30
 8001232:	680e      	ldr	r6, [r1, #0]
 8001234:	bf08      	it	eq
 8001236:	694b      	ldreq	r3, [r1, #20]
 8001238:	600f      	str	r7, [r1, #0]
 800123a:	bf18      	it	ne
 800123c:	2300      	movne	r3, #0
 800123e:	eba6 0807 	sub.w	r8, r6, r7
 8001242:	608b      	str	r3, [r1, #8]
 8001244:	f1b8 0f00 	cmp.w	r8, #0
 8001248:	dde9      	ble.n	800121e <__sflush_r+0xae>
 800124a:	6a21      	ldr	r1, [r4, #32]
 800124c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800124e:	4643      	mov	r3, r8
 8001250:	463a      	mov	r2, r7
 8001252:	4628      	mov	r0, r5
 8001254:	47b0      	blx	r6
 8001256:	2800      	cmp	r0, #0
 8001258:	dc08      	bgt.n	800126c <__sflush_r+0xfc>
 800125a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800125e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001262:	81a3      	strh	r3, [r4, #12]
 8001264:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001268:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800126c:	4407      	add	r7, r0
 800126e:	eba8 0800 	sub.w	r8, r8, r0
 8001272:	e7e7      	b.n	8001244 <__sflush_r+0xd4>
 8001274:	20400001 	.word	0x20400001

08001278 <_fflush_r>:
 8001278:	b538      	push	{r3, r4, r5, lr}
 800127a:	690b      	ldr	r3, [r1, #16]
 800127c:	4605      	mov	r5, r0
 800127e:	460c      	mov	r4, r1
 8001280:	b913      	cbnz	r3, 8001288 <_fflush_r+0x10>
 8001282:	2500      	movs	r5, #0
 8001284:	4628      	mov	r0, r5
 8001286:	bd38      	pop	{r3, r4, r5, pc}
 8001288:	b118      	cbz	r0, 8001292 <_fflush_r+0x1a>
 800128a:	6a03      	ldr	r3, [r0, #32]
 800128c:	b90b      	cbnz	r3, 8001292 <_fflush_r+0x1a>
 800128e:	f7ff fb1d 	bl	80008cc <__sinit>
 8001292:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001296:	2b00      	cmp	r3, #0
 8001298:	d0f3      	beq.n	8001282 <_fflush_r+0xa>
 800129a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800129c:	07d0      	lsls	r0, r2, #31
 800129e:	d404      	bmi.n	80012aa <_fflush_r+0x32>
 80012a0:	0599      	lsls	r1, r3, #22
 80012a2:	d402      	bmi.n	80012aa <_fflush_r+0x32>
 80012a4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80012a6:	f7ff fbf2 	bl	8000a8e <__retarget_lock_acquire_recursive>
 80012aa:	4628      	mov	r0, r5
 80012ac:	4621      	mov	r1, r4
 80012ae:	f7ff ff5f 	bl	8001170 <__sflush_r>
 80012b2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80012b4:	07da      	lsls	r2, r3, #31
 80012b6:	4605      	mov	r5, r0
 80012b8:	d4e4      	bmi.n	8001284 <_fflush_r+0xc>
 80012ba:	89a3      	ldrh	r3, [r4, #12]
 80012bc:	059b      	lsls	r3, r3, #22
 80012be:	d4e1      	bmi.n	8001284 <_fflush_r+0xc>
 80012c0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80012c2:	f7ff fbe5 	bl	8000a90 <__retarget_lock_release_recursive>
 80012c6:	e7dd      	b.n	8001284 <_fflush_r+0xc>

080012c8 <__malloc_lock>:
 80012c8:	4801      	ldr	r0, [pc, #4]	@ (80012d0 <__malloc_lock+0x8>)
 80012ca:	f7ff bbe0 	b.w	8000a8e <__retarget_lock_acquire_recursive>
 80012ce:	bf00      	nop
 80012d0:	200001e0 	.word	0x200001e0

080012d4 <__malloc_unlock>:
 80012d4:	4801      	ldr	r0, [pc, #4]	@ (80012dc <__malloc_unlock+0x8>)
 80012d6:	f7ff bbdb 	b.w	8000a90 <__retarget_lock_release_recursive>
 80012da:	bf00      	nop
 80012dc:	200001e0 	.word	0x200001e0

080012e0 <__sread>:
 80012e0:	b510      	push	{r4, lr}
 80012e2:	460c      	mov	r4, r1
 80012e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80012e8:	f000 f98a 	bl	8001600 <_read_r>
 80012ec:	2800      	cmp	r0, #0
 80012ee:	bfab      	itete	ge
 80012f0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80012f2:	89a3      	ldrhlt	r3, [r4, #12]
 80012f4:	181b      	addge	r3, r3, r0
 80012f6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80012fa:	bfac      	ite	ge
 80012fc:	6563      	strge	r3, [r4, #84]	@ 0x54
 80012fe:	81a3      	strhlt	r3, [r4, #12]
 8001300:	bd10      	pop	{r4, pc}

08001302 <__swrite>:
 8001302:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001306:	461f      	mov	r7, r3
 8001308:	898b      	ldrh	r3, [r1, #12]
 800130a:	05db      	lsls	r3, r3, #23
 800130c:	4605      	mov	r5, r0
 800130e:	460c      	mov	r4, r1
 8001310:	4616      	mov	r6, r2
 8001312:	d505      	bpl.n	8001320 <__swrite+0x1e>
 8001314:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001318:	2302      	movs	r3, #2
 800131a:	2200      	movs	r2, #0
 800131c:	f000 f95e 	bl	80015dc <_lseek_r>
 8001320:	89a3      	ldrh	r3, [r4, #12]
 8001322:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001326:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800132a:	81a3      	strh	r3, [r4, #12]
 800132c:	4632      	mov	r2, r6
 800132e:	463b      	mov	r3, r7
 8001330:	4628      	mov	r0, r5
 8001332:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8001336:	f000 b985 	b.w	8001644 <_write_r>

0800133a <__sseek>:
 800133a:	b510      	push	{r4, lr}
 800133c:	460c      	mov	r4, r1
 800133e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001342:	f000 f94b 	bl	80015dc <_lseek_r>
 8001346:	1c43      	adds	r3, r0, #1
 8001348:	89a3      	ldrh	r3, [r4, #12]
 800134a:	bf15      	itete	ne
 800134c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800134e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8001352:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8001356:	81a3      	strheq	r3, [r4, #12]
 8001358:	bf18      	it	ne
 800135a:	81a3      	strhne	r3, [r4, #12]
 800135c:	bd10      	pop	{r4, pc}

0800135e <__sclose>:
 800135e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001362:	f000 b981 	b.w	8001668 <_close_r>

08001366 <__swbuf_r>:
 8001366:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001368:	460e      	mov	r6, r1
 800136a:	4614      	mov	r4, r2
 800136c:	4605      	mov	r5, r0
 800136e:	b118      	cbz	r0, 8001378 <__swbuf_r+0x12>
 8001370:	6a03      	ldr	r3, [r0, #32]
 8001372:	b90b      	cbnz	r3, 8001378 <__swbuf_r+0x12>
 8001374:	f7ff faaa 	bl	80008cc <__sinit>
 8001378:	69a3      	ldr	r3, [r4, #24]
 800137a:	60a3      	str	r3, [r4, #8]
 800137c:	89a3      	ldrh	r3, [r4, #12]
 800137e:	071a      	lsls	r2, r3, #28
 8001380:	d501      	bpl.n	8001386 <__swbuf_r+0x20>
 8001382:	6923      	ldr	r3, [r4, #16]
 8001384:	b943      	cbnz	r3, 8001398 <__swbuf_r+0x32>
 8001386:	4621      	mov	r1, r4
 8001388:	4628      	mov	r0, r5
 800138a:	f000 f82b 	bl	80013e4 <__swsetup_r>
 800138e:	b118      	cbz	r0, 8001398 <__swbuf_r+0x32>
 8001390:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8001394:	4638      	mov	r0, r7
 8001396:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001398:	6823      	ldr	r3, [r4, #0]
 800139a:	6922      	ldr	r2, [r4, #16]
 800139c:	1a98      	subs	r0, r3, r2
 800139e:	6963      	ldr	r3, [r4, #20]
 80013a0:	b2f6      	uxtb	r6, r6
 80013a2:	4283      	cmp	r3, r0
 80013a4:	4637      	mov	r7, r6
 80013a6:	dc05      	bgt.n	80013b4 <__swbuf_r+0x4e>
 80013a8:	4621      	mov	r1, r4
 80013aa:	4628      	mov	r0, r5
 80013ac:	f7ff ff64 	bl	8001278 <_fflush_r>
 80013b0:	2800      	cmp	r0, #0
 80013b2:	d1ed      	bne.n	8001390 <__swbuf_r+0x2a>
 80013b4:	68a3      	ldr	r3, [r4, #8]
 80013b6:	3b01      	subs	r3, #1
 80013b8:	60a3      	str	r3, [r4, #8]
 80013ba:	6823      	ldr	r3, [r4, #0]
 80013bc:	1c5a      	adds	r2, r3, #1
 80013be:	6022      	str	r2, [r4, #0]
 80013c0:	701e      	strb	r6, [r3, #0]
 80013c2:	6962      	ldr	r2, [r4, #20]
 80013c4:	1c43      	adds	r3, r0, #1
 80013c6:	429a      	cmp	r2, r3
 80013c8:	d004      	beq.n	80013d4 <__swbuf_r+0x6e>
 80013ca:	89a3      	ldrh	r3, [r4, #12]
 80013cc:	07db      	lsls	r3, r3, #31
 80013ce:	d5e1      	bpl.n	8001394 <__swbuf_r+0x2e>
 80013d0:	2e0a      	cmp	r6, #10
 80013d2:	d1df      	bne.n	8001394 <__swbuf_r+0x2e>
 80013d4:	4621      	mov	r1, r4
 80013d6:	4628      	mov	r0, r5
 80013d8:	f7ff ff4e 	bl	8001278 <_fflush_r>
 80013dc:	2800      	cmp	r0, #0
 80013de:	d0d9      	beq.n	8001394 <__swbuf_r+0x2e>
 80013e0:	e7d6      	b.n	8001390 <__swbuf_r+0x2a>
	...

080013e4 <__swsetup_r>:
 80013e4:	b538      	push	{r3, r4, r5, lr}
 80013e6:	4b29      	ldr	r3, [pc, #164]	@ (800148c <__swsetup_r+0xa8>)
 80013e8:	4605      	mov	r5, r0
 80013ea:	6818      	ldr	r0, [r3, #0]
 80013ec:	460c      	mov	r4, r1
 80013ee:	b118      	cbz	r0, 80013f8 <__swsetup_r+0x14>
 80013f0:	6a03      	ldr	r3, [r0, #32]
 80013f2:	b90b      	cbnz	r3, 80013f8 <__swsetup_r+0x14>
 80013f4:	f7ff fa6a 	bl	80008cc <__sinit>
 80013f8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80013fc:	0719      	lsls	r1, r3, #28
 80013fe:	d422      	bmi.n	8001446 <__swsetup_r+0x62>
 8001400:	06da      	lsls	r2, r3, #27
 8001402:	d407      	bmi.n	8001414 <__swsetup_r+0x30>
 8001404:	2209      	movs	r2, #9
 8001406:	602a      	str	r2, [r5, #0]
 8001408:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800140c:	81a3      	strh	r3, [r4, #12]
 800140e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001412:	e033      	b.n	800147c <__swsetup_r+0x98>
 8001414:	0758      	lsls	r0, r3, #29
 8001416:	d512      	bpl.n	800143e <__swsetup_r+0x5a>
 8001418:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800141a:	b141      	cbz	r1, 800142e <__swsetup_r+0x4a>
 800141c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8001420:	4299      	cmp	r1, r3
 8001422:	d002      	beq.n	800142a <__swsetup_r+0x46>
 8001424:	4628      	mov	r0, r5
 8001426:	f000 f941 	bl	80016ac <_free_r>
 800142a:	2300      	movs	r3, #0
 800142c:	6363      	str	r3, [r4, #52]	@ 0x34
 800142e:	89a3      	ldrh	r3, [r4, #12]
 8001430:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8001434:	81a3      	strh	r3, [r4, #12]
 8001436:	2300      	movs	r3, #0
 8001438:	6063      	str	r3, [r4, #4]
 800143a:	6923      	ldr	r3, [r4, #16]
 800143c:	6023      	str	r3, [r4, #0]
 800143e:	89a3      	ldrh	r3, [r4, #12]
 8001440:	f043 0308 	orr.w	r3, r3, #8
 8001444:	81a3      	strh	r3, [r4, #12]
 8001446:	6923      	ldr	r3, [r4, #16]
 8001448:	b94b      	cbnz	r3, 800145e <__swsetup_r+0x7a>
 800144a:	89a3      	ldrh	r3, [r4, #12]
 800144c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8001450:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001454:	d003      	beq.n	800145e <__swsetup_r+0x7a>
 8001456:	4621      	mov	r1, r4
 8001458:	4628      	mov	r0, r5
 800145a:	f000 f83f 	bl	80014dc <__smakebuf_r>
 800145e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001462:	f013 0201 	ands.w	r2, r3, #1
 8001466:	d00a      	beq.n	800147e <__swsetup_r+0x9a>
 8001468:	2200      	movs	r2, #0
 800146a:	60a2      	str	r2, [r4, #8]
 800146c:	6962      	ldr	r2, [r4, #20]
 800146e:	4252      	negs	r2, r2
 8001470:	61a2      	str	r2, [r4, #24]
 8001472:	6922      	ldr	r2, [r4, #16]
 8001474:	b942      	cbnz	r2, 8001488 <__swsetup_r+0xa4>
 8001476:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800147a:	d1c5      	bne.n	8001408 <__swsetup_r+0x24>
 800147c:	bd38      	pop	{r3, r4, r5, pc}
 800147e:	0799      	lsls	r1, r3, #30
 8001480:	bf58      	it	pl
 8001482:	6962      	ldrpl	r2, [r4, #20]
 8001484:	60a2      	str	r2, [r4, #8]
 8001486:	e7f4      	b.n	8001472 <__swsetup_r+0x8e>
 8001488:	2000      	movs	r0, #0
 800148a:	e7f7      	b.n	800147c <__swsetup_r+0x98>
 800148c:	20000034 	.word	0x20000034

08001490 <__swhatbuf_r>:
 8001490:	b570      	push	{r4, r5, r6, lr}
 8001492:	460c      	mov	r4, r1
 8001494:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001498:	2900      	cmp	r1, #0
 800149a:	b096      	sub	sp, #88	@ 0x58
 800149c:	4615      	mov	r5, r2
 800149e:	461e      	mov	r6, r3
 80014a0:	da0d      	bge.n	80014be <__swhatbuf_r+0x2e>
 80014a2:	89a3      	ldrh	r3, [r4, #12]
 80014a4:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80014a8:	f04f 0100 	mov.w	r1, #0
 80014ac:	bf14      	ite	ne
 80014ae:	2340      	movne	r3, #64	@ 0x40
 80014b0:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80014b4:	2000      	movs	r0, #0
 80014b6:	6031      	str	r1, [r6, #0]
 80014b8:	602b      	str	r3, [r5, #0]
 80014ba:	b016      	add	sp, #88	@ 0x58
 80014bc:	bd70      	pop	{r4, r5, r6, pc}
 80014be:	466a      	mov	r2, sp
 80014c0:	f000 f8e2 	bl	8001688 <_fstat_r>
 80014c4:	2800      	cmp	r0, #0
 80014c6:	dbec      	blt.n	80014a2 <__swhatbuf_r+0x12>
 80014c8:	9901      	ldr	r1, [sp, #4]
 80014ca:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80014ce:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80014d2:	4259      	negs	r1, r3
 80014d4:	4159      	adcs	r1, r3
 80014d6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80014da:	e7eb      	b.n	80014b4 <__swhatbuf_r+0x24>

080014dc <__smakebuf_r>:
 80014dc:	898b      	ldrh	r3, [r1, #12]
 80014de:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80014e0:	079d      	lsls	r5, r3, #30
 80014e2:	4606      	mov	r6, r0
 80014e4:	460c      	mov	r4, r1
 80014e6:	d507      	bpl.n	80014f8 <__smakebuf_r+0x1c>
 80014e8:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80014ec:	6023      	str	r3, [r4, #0]
 80014ee:	6123      	str	r3, [r4, #16]
 80014f0:	2301      	movs	r3, #1
 80014f2:	6163      	str	r3, [r4, #20]
 80014f4:	b003      	add	sp, #12
 80014f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80014f8:	ab01      	add	r3, sp, #4
 80014fa:	466a      	mov	r2, sp
 80014fc:	f7ff ffc8 	bl	8001490 <__swhatbuf_r>
 8001500:	9f00      	ldr	r7, [sp, #0]
 8001502:	4605      	mov	r5, r0
 8001504:	4639      	mov	r1, r7
 8001506:	4630      	mov	r0, r6
 8001508:	f7ff fc26 	bl	8000d58 <_malloc_r>
 800150c:	b948      	cbnz	r0, 8001522 <__smakebuf_r+0x46>
 800150e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001512:	059a      	lsls	r2, r3, #22
 8001514:	d4ee      	bmi.n	80014f4 <__smakebuf_r+0x18>
 8001516:	f023 0303 	bic.w	r3, r3, #3
 800151a:	f043 0302 	orr.w	r3, r3, #2
 800151e:	81a3      	strh	r3, [r4, #12]
 8001520:	e7e2      	b.n	80014e8 <__smakebuf_r+0xc>
 8001522:	89a3      	ldrh	r3, [r4, #12]
 8001524:	6020      	str	r0, [r4, #0]
 8001526:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800152a:	81a3      	strh	r3, [r4, #12]
 800152c:	9b01      	ldr	r3, [sp, #4]
 800152e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8001532:	b15b      	cbz	r3, 800154c <__smakebuf_r+0x70>
 8001534:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001538:	4630      	mov	r0, r6
 800153a:	f000 f83f 	bl	80015bc <_isatty_r>
 800153e:	b128      	cbz	r0, 800154c <__smakebuf_r+0x70>
 8001540:	89a3      	ldrh	r3, [r4, #12]
 8001542:	f023 0303 	bic.w	r3, r3, #3
 8001546:	f043 0301 	orr.w	r3, r3, #1
 800154a:	81a3      	strh	r3, [r4, #12]
 800154c:	89a3      	ldrh	r3, [r4, #12]
 800154e:	431d      	orrs	r5, r3
 8001550:	81a5      	strh	r5, [r4, #12]
 8001552:	e7cf      	b.n	80014f4 <__smakebuf_r+0x18>

08001554 <_putc_r>:
 8001554:	b570      	push	{r4, r5, r6, lr}
 8001556:	460d      	mov	r5, r1
 8001558:	4614      	mov	r4, r2
 800155a:	4606      	mov	r6, r0
 800155c:	b118      	cbz	r0, 8001566 <_putc_r+0x12>
 800155e:	6a03      	ldr	r3, [r0, #32]
 8001560:	b90b      	cbnz	r3, 8001566 <_putc_r+0x12>
 8001562:	f7ff f9b3 	bl	80008cc <__sinit>
 8001566:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8001568:	07d8      	lsls	r0, r3, #31
 800156a:	d405      	bmi.n	8001578 <_putc_r+0x24>
 800156c:	89a3      	ldrh	r3, [r4, #12]
 800156e:	0599      	lsls	r1, r3, #22
 8001570:	d402      	bmi.n	8001578 <_putc_r+0x24>
 8001572:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8001574:	f7ff fa8b 	bl	8000a8e <__retarget_lock_acquire_recursive>
 8001578:	68a3      	ldr	r3, [r4, #8]
 800157a:	3b01      	subs	r3, #1
 800157c:	2b00      	cmp	r3, #0
 800157e:	60a3      	str	r3, [r4, #8]
 8001580:	da05      	bge.n	800158e <_putc_r+0x3a>
 8001582:	69a2      	ldr	r2, [r4, #24]
 8001584:	4293      	cmp	r3, r2
 8001586:	db12      	blt.n	80015ae <_putc_r+0x5a>
 8001588:	b2eb      	uxtb	r3, r5
 800158a:	2b0a      	cmp	r3, #10
 800158c:	d00f      	beq.n	80015ae <_putc_r+0x5a>
 800158e:	6823      	ldr	r3, [r4, #0]
 8001590:	1c5a      	adds	r2, r3, #1
 8001592:	6022      	str	r2, [r4, #0]
 8001594:	701d      	strb	r5, [r3, #0]
 8001596:	b2ed      	uxtb	r5, r5
 8001598:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800159a:	07da      	lsls	r2, r3, #31
 800159c:	d405      	bmi.n	80015aa <_putc_r+0x56>
 800159e:	89a3      	ldrh	r3, [r4, #12]
 80015a0:	059b      	lsls	r3, r3, #22
 80015a2:	d402      	bmi.n	80015aa <_putc_r+0x56>
 80015a4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80015a6:	f7ff fa73 	bl	8000a90 <__retarget_lock_release_recursive>
 80015aa:	4628      	mov	r0, r5
 80015ac:	bd70      	pop	{r4, r5, r6, pc}
 80015ae:	4629      	mov	r1, r5
 80015b0:	4622      	mov	r2, r4
 80015b2:	4630      	mov	r0, r6
 80015b4:	f7ff fed7 	bl	8001366 <__swbuf_r>
 80015b8:	4605      	mov	r5, r0
 80015ba:	e7ed      	b.n	8001598 <_putc_r+0x44>

080015bc <_isatty_r>:
 80015bc:	b538      	push	{r3, r4, r5, lr}
 80015be:	4d06      	ldr	r5, [pc, #24]	@ (80015d8 <_isatty_r+0x1c>)
 80015c0:	2300      	movs	r3, #0
 80015c2:	4604      	mov	r4, r0
 80015c4:	4608      	mov	r0, r1
 80015c6:	602b      	str	r3, [r5, #0]
 80015c8:	f7fe ffcd 	bl	8000566 <_isatty>
 80015cc:	1c43      	adds	r3, r0, #1
 80015ce:	d102      	bne.n	80015d6 <_isatty_r+0x1a>
 80015d0:	682b      	ldr	r3, [r5, #0]
 80015d2:	b103      	cbz	r3, 80015d6 <_isatty_r+0x1a>
 80015d4:	6023      	str	r3, [r4, #0]
 80015d6:	bd38      	pop	{r3, r4, r5, pc}
 80015d8:	200001ec 	.word	0x200001ec

080015dc <_lseek_r>:
 80015dc:	b538      	push	{r3, r4, r5, lr}
 80015de:	4d07      	ldr	r5, [pc, #28]	@ (80015fc <_lseek_r+0x20>)
 80015e0:	4604      	mov	r4, r0
 80015e2:	4608      	mov	r0, r1
 80015e4:	4611      	mov	r1, r2
 80015e6:	2200      	movs	r2, #0
 80015e8:	602a      	str	r2, [r5, #0]
 80015ea:	461a      	mov	r2, r3
 80015ec:	f7fe ffc6 	bl	800057c <_lseek>
 80015f0:	1c43      	adds	r3, r0, #1
 80015f2:	d102      	bne.n	80015fa <_lseek_r+0x1e>
 80015f4:	682b      	ldr	r3, [r5, #0]
 80015f6:	b103      	cbz	r3, 80015fa <_lseek_r+0x1e>
 80015f8:	6023      	str	r3, [r4, #0]
 80015fa:	bd38      	pop	{r3, r4, r5, pc}
 80015fc:	200001ec 	.word	0x200001ec

08001600 <_read_r>:
 8001600:	b538      	push	{r3, r4, r5, lr}
 8001602:	4d07      	ldr	r5, [pc, #28]	@ (8001620 <_read_r+0x20>)
 8001604:	4604      	mov	r4, r0
 8001606:	4608      	mov	r0, r1
 8001608:	4611      	mov	r1, r2
 800160a:	2200      	movs	r2, #0
 800160c:	602a      	str	r2, [r5, #0]
 800160e:	461a      	mov	r2, r3
 8001610:	f7fe ff54 	bl	80004bc <_read>
 8001614:	1c43      	adds	r3, r0, #1
 8001616:	d102      	bne.n	800161e <_read_r+0x1e>
 8001618:	682b      	ldr	r3, [r5, #0]
 800161a:	b103      	cbz	r3, 800161e <_read_r+0x1e>
 800161c:	6023      	str	r3, [r4, #0]
 800161e:	bd38      	pop	{r3, r4, r5, pc}
 8001620:	200001ec 	.word	0x200001ec

08001624 <_sbrk_r>:
 8001624:	b538      	push	{r3, r4, r5, lr}
 8001626:	4d06      	ldr	r5, [pc, #24]	@ (8001640 <_sbrk_r+0x1c>)
 8001628:	2300      	movs	r3, #0
 800162a:	4604      	mov	r4, r0
 800162c:	4608      	mov	r0, r1
 800162e:	602b      	str	r3, [r5, #0]
 8001630:	f7fe ffb2 	bl	8000598 <_sbrk>
 8001634:	1c43      	adds	r3, r0, #1
 8001636:	d102      	bne.n	800163e <_sbrk_r+0x1a>
 8001638:	682b      	ldr	r3, [r5, #0]
 800163a:	b103      	cbz	r3, 800163e <_sbrk_r+0x1a>
 800163c:	6023      	str	r3, [r4, #0]
 800163e:	bd38      	pop	{r3, r4, r5, pc}
 8001640:	200001ec 	.word	0x200001ec

08001644 <_write_r>:
 8001644:	b538      	push	{r3, r4, r5, lr}
 8001646:	4d07      	ldr	r5, [pc, #28]	@ (8001664 <_write_r+0x20>)
 8001648:	4604      	mov	r4, r0
 800164a:	4608      	mov	r0, r1
 800164c:	4611      	mov	r1, r2
 800164e:	2200      	movs	r2, #0
 8001650:	602a      	str	r2, [r5, #0]
 8001652:	461a      	mov	r2, r3
 8001654:	f7fe ff4f 	bl	80004f6 <_write>
 8001658:	1c43      	adds	r3, r0, #1
 800165a:	d102      	bne.n	8001662 <_write_r+0x1e>
 800165c:	682b      	ldr	r3, [r5, #0]
 800165e:	b103      	cbz	r3, 8001662 <_write_r+0x1e>
 8001660:	6023      	str	r3, [r4, #0]
 8001662:	bd38      	pop	{r3, r4, r5, pc}
 8001664:	200001ec 	.word	0x200001ec

08001668 <_close_r>:
 8001668:	b538      	push	{r3, r4, r5, lr}
 800166a:	4d06      	ldr	r5, [pc, #24]	@ (8001684 <_close_r+0x1c>)
 800166c:	2300      	movs	r3, #0
 800166e:	4604      	mov	r4, r0
 8001670:	4608      	mov	r0, r1
 8001672:	602b      	str	r3, [r5, #0]
 8001674:	f7fe ff5b 	bl	800052e <_close>
 8001678:	1c43      	adds	r3, r0, #1
 800167a:	d102      	bne.n	8001682 <_close_r+0x1a>
 800167c:	682b      	ldr	r3, [r5, #0]
 800167e:	b103      	cbz	r3, 8001682 <_close_r+0x1a>
 8001680:	6023      	str	r3, [r4, #0]
 8001682:	bd38      	pop	{r3, r4, r5, pc}
 8001684:	200001ec 	.word	0x200001ec

08001688 <_fstat_r>:
 8001688:	b538      	push	{r3, r4, r5, lr}
 800168a:	4d07      	ldr	r5, [pc, #28]	@ (80016a8 <_fstat_r+0x20>)
 800168c:	2300      	movs	r3, #0
 800168e:	4604      	mov	r4, r0
 8001690:	4608      	mov	r0, r1
 8001692:	4611      	mov	r1, r2
 8001694:	602b      	str	r3, [r5, #0]
 8001696:	f7fe ff56 	bl	8000546 <_fstat>
 800169a:	1c43      	adds	r3, r0, #1
 800169c:	d102      	bne.n	80016a4 <_fstat_r+0x1c>
 800169e:	682b      	ldr	r3, [r5, #0]
 80016a0:	b103      	cbz	r3, 80016a4 <_fstat_r+0x1c>
 80016a2:	6023      	str	r3, [r4, #0]
 80016a4:	bd38      	pop	{r3, r4, r5, pc}
 80016a6:	bf00      	nop
 80016a8:	200001ec 	.word	0x200001ec

080016ac <_free_r>:
 80016ac:	b538      	push	{r3, r4, r5, lr}
 80016ae:	4605      	mov	r5, r0
 80016b0:	2900      	cmp	r1, #0
 80016b2:	d041      	beq.n	8001738 <_free_r+0x8c>
 80016b4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80016b8:	1f0c      	subs	r4, r1, #4
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	bfb8      	it	lt
 80016be:	18e4      	addlt	r4, r4, r3
 80016c0:	f7ff fe02 	bl	80012c8 <__malloc_lock>
 80016c4:	4a1d      	ldr	r2, [pc, #116]	@ (800173c <_free_r+0x90>)
 80016c6:	6813      	ldr	r3, [r2, #0]
 80016c8:	b933      	cbnz	r3, 80016d8 <_free_r+0x2c>
 80016ca:	6063      	str	r3, [r4, #4]
 80016cc:	6014      	str	r4, [r2, #0]
 80016ce:	4628      	mov	r0, r5
 80016d0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80016d4:	f7ff bdfe 	b.w	80012d4 <__malloc_unlock>
 80016d8:	42a3      	cmp	r3, r4
 80016da:	d908      	bls.n	80016ee <_free_r+0x42>
 80016dc:	6820      	ldr	r0, [r4, #0]
 80016de:	1821      	adds	r1, r4, r0
 80016e0:	428b      	cmp	r3, r1
 80016e2:	bf01      	itttt	eq
 80016e4:	6819      	ldreq	r1, [r3, #0]
 80016e6:	685b      	ldreq	r3, [r3, #4]
 80016e8:	1809      	addeq	r1, r1, r0
 80016ea:	6021      	streq	r1, [r4, #0]
 80016ec:	e7ed      	b.n	80016ca <_free_r+0x1e>
 80016ee:	461a      	mov	r2, r3
 80016f0:	685b      	ldr	r3, [r3, #4]
 80016f2:	b10b      	cbz	r3, 80016f8 <_free_r+0x4c>
 80016f4:	42a3      	cmp	r3, r4
 80016f6:	d9fa      	bls.n	80016ee <_free_r+0x42>
 80016f8:	6811      	ldr	r1, [r2, #0]
 80016fa:	1850      	adds	r0, r2, r1
 80016fc:	42a0      	cmp	r0, r4
 80016fe:	d10b      	bne.n	8001718 <_free_r+0x6c>
 8001700:	6820      	ldr	r0, [r4, #0]
 8001702:	4401      	add	r1, r0
 8001704:	1850      	adds	r0, r2, r1
 8001706:	4283      	cmp	r3, r0
 8001708:	6011      	str	r1, [r2, #0]
 800170a:	d1e0      	bne.n	80016ce <_free_r+0x22>
 800170c:	6818      	ldr	r0, [r3, #0]
 800170e:	685b      	ldr	r3, [r3, #4]
 8001710:	6053      	str	r3, [r2, #4]
 8001712:	4408      	add	r0, r1
 8001714:	6010      	str	r0, [r2, #0]
 8001716:	e7da      	b.n	80016ce <_free_r+0x22>
 8001718:	d902      	bls.n	8001720 <_free_r+0x74>
 800171a:	230c      	movs	r3, #12
 800171c:	602b      	str	r3, [r5, #0]
 800171e:	e7d6      	b.n	80016ce <_free_r+0x22>
 8001720:	6820      	ldr	r0, [r4, #0]
 8001722:	1821      	adds	r1, r4, r0
 8001724:	428b      	cmp	r3, r1
 8001726:	bf04      	itt	eq
 8001728:	6819      	ldreq	r1, [r3, #0]
 800172a:	685b      	ldreq	r3, [r3, #4]
 800172c:	6063      	str	r3, [r4, #4]
 800172e:	bf04      	itt	eq
 8001730:	1809      	addeq	r1, r1, r0
 8001732:	6021      	streq	r1, [r4, #0]
 8001734:	6054      	str	r4, [r2, #4]
 8001736:	e7ca      	b.n	80016ce <_free_r+0x22>
 8001738:	bd38      	pop	{r3, r4, r5, pc}
 800173a:	bf00      	nop
 800173c:	200001e8 	.word	0x200001e8

08001740 <_init>:
 8001740:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001742:	bf00      	nop
 8001744:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001746:	bc08      	pop	{r3}
 8001748:	469e      	mov	lr, r3
 800174a:	4770      	bx	lr

0800174c <_fini>:
 800174c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800174e:	bf00      	nop
 8001750:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001752:	bc08      	pop	{r3}
 8001754:	469e      	mov	lr, r3
 8001756:	4770      	bx	lr
