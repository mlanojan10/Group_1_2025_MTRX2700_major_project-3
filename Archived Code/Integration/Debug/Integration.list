
Integration.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002010  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000007bc  080021b0  080021b0  000031b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800296c  0800296c  000040ac  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800296c  0800296c  0000396c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002974  08002974  000040ac  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002974  08002974  00003974  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08002978  08002978  00003978  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000000ac  20000000  0800297c  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000040ac  2**0
                  CONTENTS
 10 .bss          000001cc  200000ac  200000ac  000040ac  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000278  20000278  000040ac  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000040ac  2**0
                  CONTENTS, READONLY
 13 .debug_info   00001931  00000000  00000000  000040dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000009c9  00000000  00000000  00005a0d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000218  00000000  00000000  000063d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000175  00000000  00000000  000065f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000171b3  00000000  00000000  00006765  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00002c5b  00000000  00000000  0001d918  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00078aef  00000000  00000000  00020573  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00099062  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000011f0  00000000  00000000  000990a8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000007b  00000000  00000000  0009a298  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200000ac 	.word	0x200000ac
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08002198 	.word	0x08002198

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200000b0 	.word	0x200000b0
 80001dc:	08002198 	.word	0x08002198

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <island3_game>:
#include "potentiometer.h"

volatile uint8_t game_progress = 0b0000;


void island3_game(void) {
 80002a0:	b580      	push	{r7, lr}
 80002a2:	af00      	add	r7, sp, #0
    printf("Island 3: placeholder\r\n");
 80002a4:	4808      	ldr	r0, [pc, #32]	@ (80002c8 <island3_game+0x28>)
 80002a6:	f001 f85d 	bl	8001364 <puts>
    delay_ms(2000);
 80002aa:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80002ae:	f000 f843 	bl	8000338 <delay_ms>
    game_progress |= 0b0100;
 80002b2:	4b06      	ldr	r3, [pc, #24]	@ (80002cc <island3_game+0x2c>)
 80002b4:	781b      	ldrb	r3, [r3, #0]
 80002b6:	b2db      	uxtb	r3, r3
 80002b8:	f043 0304 	orr.w	r3, r3, #4
 80002bc:	b2da      	uxtb	r2, r3
 80002be:	4b03      	ldr	r3, [pc, #12]	@ (80002cc <island3_game+0x2c>)
 80002c0:	701a      	strb	r2, [r3, #0]
}
 80002c2:	bf00      	nop
 80002c4:	bd80      	pop	{r7, pc}
 80002c6:	bf00      	nop
 80002c8:	080021b0 	.word	0x080021b0
 80002cc:	200000c8 	.word	0x200000c8

080002d0 <island4_game>:

void island4_game(void) {
 80002d0:	b580      	push	{r7, lr}
 80002d2:	af00      	add	r7, sp, #0
    printf("Island 4: placeholder\r\n");
 80002d4:	4808      	ldr	r0, [pc, #32]	@ (80002f8 <island4_game+0x28>)
 80002d6:	f001 f845 	bl	8001364 <puts>
    delay_ms(2000);
 80002da:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80002de:	f000 f82b 	bl	8000338 <delay_ms>
    game_progress |= 0b1000;
 80002e2:	4b06      	ldr	r3, [pc, #24]	@ (80002fc <island4_game+0x2c>)
 80002e4:	781b      	ldrb	r3, [r3, #0]
 80002e6:	b2db      	uxtb	r3, r3
 80002e8:	f043 0308 	orr.w	r3, r3, #8
 80002ec:	b2da      	uxtb	r2, r3
 80002ee:	4b03      	ldr	r3, [pc, #12]	@ (80002fc <island4_game+0x2c>)
 80002f0:	701a      	strb	r2, [r3, #0]
}
 80002f2:	bf00      	nop
 80002f4:	bd80      	pop	{r7, pc}
 80002f6:	bf00      	nop
 80002f8:	080021c8 	.word	0x080021c8
 80002fc:	200000c8 	.word	0x200000c8

08000300 <__io_putchar>:



int __io_putchar(int ch) {
 8000300:	b580      	push	{r7, lr}
 8000302:	b082      	sub	sp, #8
 8000304:	af00      	add	r7, sp, #0
 8000306:	6078      	str	r0, [r7, #4]
    SerialOutputChar((uint8_t)ch, &USART1_PORT);
 8000308:	687b      	ldr	r3, [r7, #4]
 800030a:	b2db      	uxtb	r3, r3
 800030c:	4904      	ldr	r1, [pc, #16]	@ (8000320 <__io_putchar+0x20>)
 800030e:	4618      	mov	r0, r3
 8000310:	f000 fd94 	bl	8000e3c <SerialOutputChar>
    return ch;
 8000314:	687b      	ldr	r3, [r7, #4]
}
 8000316:	4618      	mov	r0, r3
 8000318:	3708      	adds	r7, #8
 800031a:	46bd      	mov	sp, r7
 800031c:	bd80      	pop	{r7, pc}
 800031e:	bf00      	nop
 8000320:	20000028 	.word	0x20000028

08000324 <__io_getchar>:

int __io_getchar(void) {
 8000324:	b580      	push	{r7, lr}
 8000326:	af00      	add	r7, sp, #0
    return SerialGetChar(&USART1_PORT);
 8000328:	4802      	ldr	r0, [pc, #8]	@ (8000334 <__io_getchar+0x10>)
 800032a:	f000 fda0 	bl	8000e6e <SerialGetChar>
 800032e:	4603      	mov	r3, r0
}
 8000330:	4618      	mov	r0, r3
 8000332:	bd80      	pop	{r7, pc}
 8000334:	20000028 	.word	0x20000028

08000338 <delay_ms>:

void delay_ms(uint32_t ms) {
 8000338:	b480      	push	{r7}
 800033a:	b085      	sub	sp, #20
 800033c:	af00      	add	r7, sp, #0
 800033e:	6078      	str	r0, [r7, #4]
    for (volatile uint32_t i = 0; i < ms * 615; i++);
 8000340:	2300      	movs	r3, #0
 8000342:	60fb      	str	r3, [r7, #12]
 8000344:	e002      	b.n	800034c <delay_ms+0x14>
 8000346:	68fb      	ldr	r3, [r7, #12]
 8000348:	3301      	adds	r3, #1
 800034a:	60fb      	str	r3, [r7, #12]
 800034c:	687b      	ldr	r3, [r7, #4]
 800034e:	f240 2267 	movw	r2, #615	@ 0x267
 8000352:	fb03 f202 	mul.w	r2, r3, r2
 8000356:	68fb      	ldr	r3, [r7, #12]
 8000358:	429a      	cmp	r2, r3
 800035a:	d8f4      	bhi.n	8000346 <delay_ms+0xe>
}
 800035c:	bf00      	nop
 800035e:	bf00      	nop
 8000360:	3714      	adds	r7, #20
 8000362:	46bd      	mov	sp, r7
 8000364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000368:	4770      	bx	lr
	...

0800036c <Initialise_All>:

void Initialise_All(void) {
 800036c:	b580      	push	{r7, lr}
 800036e:	af00      	add	r7, sp, #0
	InitialisePA1AsInput();
 8000370:	f000 f886 	bl	8000480 <InitialisePA1AsInput>
	InitialisePA2AsInput();
 8000374:	f000 f8a4 	bl	80004c0 <InitialisePA2AsInput>
	InitialisePA3AsInput();
 8000378:	f000 f8c2 	bl	8000500 <InitialisePA3AsInput>
	InitialisePA4AsInput();
 800037c:	f000 f8e0 	bl	8000540 <InitialisePA4AsInput>
	InitialisePA5AsInput();
 8000380:	f000 f8fe 	bl	8000580 <InitialisePA5AsInput>
	SerialInitialise(BAUD_115200, &USART1_PORT, NULL);
 8000384:	2200      	movs	r2, #0
 8000386:	4903      	ldr	r1, [pc, #12]	@ (8000394 <Initialise_All+0x28>)
 8000388:	2004      	movs	r0, #4
 800038a:	f000 fcd9 	bl	8000d40 <SerialInitialise>
}
 800038e:	bf00      	nop
 8000390:	bd80      	pop	{r7, pc}
 8000392:	bf00      	nop
 8000394:	20000028 	.word	0x20000028

08000398 <main>:

int main(void) {
 8000398:	b580      	push	{r7, lr}
 800039a:	b082      	sub	sp, #8
 800039c:	af00      	add	r7, sp, #0
    Initialise_All();
 800039e:	f7ff ffe5 	bl	800036c <Initialise_All>

    while (1) {
		// Read all 4 LDRs
		uint8_t pa1 = (GPIOA->IDR & (1 << 1)) != 0; // Island 1
 80003a2:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80003a6:	691b      	ldr	r3, [r3, #16]
 80003a8:	f003 0302 	and.w	r3, r3, #2
 80003ac:	2b00      	cmp	r3, #0
 80003ae:	bf14      	ite	ne
 80003b0:	2301      	movne	r3, #1
 80003b2:	2300      	moveq	r3, #0
 80003b4:	b2db      	uxtb	r3, r3
 80003b6:	71fb      	strb	r3, [r7, #7]
		uint8_t pa2 = (GPIOA->IDR & (1 << 2)) != 0; // Island 2
 80003b8:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80003bc:	691b      	ldr	r3, [r3, #16]
 80003be:	f003 0304 	and.w	r3, r3, #4
 80003c2:	2b00      	cmp	r3, #0
 80003c4:	bf14      	ite	ne
 80003c6:	2301      	movne	r3, #1
 80003c8:	2300      	moveq	r3, #0
 80003ca:	b2db      	uxtb	r3, r3
 80003cc:	71bb      	strb	r3, [r7, #6]
		uint8_t pa3 = (GPIOA->IDR & (1 << 3)) != 0; // Island 3
 80003ce:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80003d2:	691b      	ldr	r3, [r3, #16]
 80003d4:	f003 0308 	and.w	r3, r3, #8
 80003d8:	2b00      	cmp	r3, #0
 80003da:	bf14      	ite	ne
 80003dc:	2301      	movne	r3, #1
 80003de:	2300      	moveq	r3, #0
 80003e0:	b2db      	uxtb	r3, r3
 80003e2:	717b      	strb	r3, [r7, #5]
		uint8_t pa4 = (GPIOA->IDR & (1 << 4)) != 0; // Island 4
 80003e4:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80003e8:	691b      	ldr	r3, [r3, #16]
 80003ea:	f003 0310 	and.w	r3, r3, #16
 80003ee:	2b00      	cmp	r3, #0
 80003f0:	bf14      	ite	ne
 80003f2:	2301      	movne	r3, #1
 80003f4:	2300      	moveq	r3, #0
 80003f6:	b2db      	uxtb	r3, r3
 80003f8:	713b      	strb	r3, [r7, #4]

		if (pa1 && (game_progress == 0b0000)) {
 80003fa:	79fb      	ldrb	r3, [r7, #7]
 80003fc:	2b00      	cmp	r3, #0
 80003fe:	d007      	beq.n	8000410 <main+0x78>
 8000400:	4b1d      	ldr	r3, [pc, #116]	@ (8000478 <main+0xe0>)
 8000402:	781b      	ldrb	r3, [r3, #0]
 8000404:	b2db      	uxtb	r3, r3
 8000406:	2b00      	cmp	r3, #0
 8000408:	d102      	bne.n	8000410 <main+0x78>
			riddle_game();               // Sets bit 0
 800040a:	f000 fb05 	bl	8000a18 <riddle_game>
 800040e:	e02f      	b.n	8000470 <main+0xd8>
		}
		else if (pa2 && (game_progress == 0b0001)) {
 8000410:	79bb      	ldrb	r3, [r7, #6]
 8000412:	2b00      	cmp	r3, #0
 8000414:	d007      	beq.n	8000426 <main+0x8e>
 8000416:	4b18      	ldr	r3, [pc, #96]	@ (8000478 <main+0xe0>)
 8000418:	781b      	ldrb	r3, [r3, #0]
 800041a:	b2db      	uxtb	r3, r3
 800041c:	2b01      	cmp	r3, #1
 800041e:	d102      	bne.n	8000426 <main+0x8e>
			potentiometer_game();        // Sets bit 1
 8000420:	f000 f8ce 	bl	80005c0 <potentiometer_game>
 8000424:	e024      	b.n	8000470 <main+0xd8>
		}
		else if (pa3 && (game_progress == 0b0011)) {
 8000426:	797b      	ldrb	r3, [r7, #5]
 8000428:	2b00      	cmp	r3, #0
 800042a:	d007      	beq.n	800043c <main+0xa4>
 800042c:	4b12      	ldr	r3, [pc, #72]	@ (8000478 <main+0xe0>)
 800042e:	781b      	ldrb	r3, [r3, #0]
 8000430:	b2db      	uxtb	r3, r3
 8000432:	2b03      	cmp	r3, #3
 8000434:	d102      	bne.n	800043c <main+0xa4>
			island3_game();              // Sets bit 2
 8000436:	f7ff ff33 	bl	80002a0 <island3_game>
 800043a:	e019      	b.n	8000470 <main+0xd8>
		}
		else if (pa4 && (game_progress == 0b0111)) {
 800043c:	793b      	ldrb	r3, [r7, #4]
 800043e:	2b00      	cmp	r3, #0
 8000440:	d007      	beq.n	8000452 <main+0xba>
 8000442:	4b0d      	ldr	r3, [pc, #52]	@ (8000478 <main+0xe0>)
 8000444:	781b      	ldrb	r3, [r3, #0]
 8000446:	b2db      	uxtb	r3, r3
 8000448:	2b07      	cmp	r3, #7
 800044a:	d102      	bne.n	8000452 <main+0xba>
			island4_game();              // Sets bit 3
 800044c:	f7ff ff40 	bl	80002d0 <island4_game>
 8000450:	e00e      	b.n	8000470 <main+0xd8>
		}
		else if (pa1 || pa2 || pa3 || pa4) {
 8000452:	79fb      	ldrb	r3, [r7, #7]
 8000454:	2b00      	cmp	r3, #0
 8000456:	d108      	bne.n	800046a <main+0xd2>
 8000458:	79bb      	ldrb	r3, [r7, #6]
 800045a:	2b00      	cmp	r3, #0
 800045c:	d105      	bne.n	800046a <main+0xd2>
 800045e:	797b      	ldrb	r3, [r7, #5]
 8000460:	2b00      	cmp	r3, #0
 8000462:	d102      	bne.n	800046a <main+0xd2>
 8000464:	793b      	ldrb	r3, [r7, #4]
 8000466:	2b00      	cmp	r3, #0
 8000468:	d002      	beq.n	8000470 <main+0xd8>
			printf("\r\nYou must complete the previous island first!\r\n");
 800046a:	4804      	ldr	r0, [pc, #16]	@ (800047c <main+0xe4>)
 800046c:	f000 ff7a 	bl	8001364 <puts>
		}

		delay_ms(100);
 8000470:	2064      	movs	r0, #100	@ 0x64
 8000472:	f7ff ff61 	bl	8000338 <delay_ms>
    while (1) {
 8000476:	e794      	b.n	80003a2 <main+0xa>
 8000478:	200000c8 	.word	0x200000c8
 800047c:	080021e0 	.word	0x080021e0

08000480 <InitialisePA1AsInput>:
#include "stm32f303xc.h"

extern volatile uint8_t game_progress;


void InitialisePA1AsInput(void) {    //island 1
 8000480:	b480      	push	{r7}
 8000482:	af00      	add	r7, sp, #0
    RCC->AHBENR |= RCC_AHBENR_GPIOAEN;
 8000484:	4b0d      	ldr	r3, [pc, #52]	@ (80004bc <InitialisePA1AsInput+0x3c>)
 8000486:	695b      	ldr	r3, [r3, #20]
 8000488:	4a0c      	ldr	r2, [pc, #48]	@ (80004bc <InitialisePA1AsInput+0x3c>)
 800048a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800048e:	6153      	str	r3, [r2, #20]
    GPIOA->MODER &= ~(3U << (1 * 2));
 8000490:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000494:	681b      	ldr	r3, [r3, #0]
 8000496:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 800049a:	f023 030c 	bic.w	r3, r3, #12
 800049e:	6013      	str	r3, [r2, #0]
    GPIOA->PUPDR &= ~(3U << (1 * 2));
 80004a0:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80004a4:	68db      	ldr	r3, [r3, #12]
 80004a6:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 80004aa:	f023 030c 	bic.w	r3, r3, #12
 80004ae:	60d3      	str	r3, [r2, #12]
}
 80004b0:	bf00      	nop
 80004b2:	46bd      	mov	sp, r7
 80004b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004b8:	4770      	bx	lr
 80004ba:	bf00      	nop
 80004bc:	40021000 	.word	0x40021000

080004c0 <InitialisePA2AsInput>:

void InitialisePA2AsInput(void) {    //island 2
 80004c0:	b480      	push	{r7}
 80004c2:	af00      	add	r7, sp, #0
    RCC->AHBENR |= RCC_AHBENR_GPIOAEN;
 80004c4:	4b0d      	ldr	r3, [pc, #52]	@ (80004fc <InitialisePA2AsInput+0x3c>)
 80004c6:	695b      	ldr	r3, [r3, #20]
 80004c8:	4a0c      	ldr	r2, [pc, #48]	@ (80004fc <InitialisePA2AsInput+0x3c>)
 80004ca:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80004ce:	6153      	str	r3, [r2, #20]
    GPIOA->MODER &= ~(3U << (2 * 2));
 80004d0:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80004d4:	681b      	ldr	r3, [r3, #0]
 80004d6:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 80004da:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 80004de:	6013      	str	r3, [r2, #0]
    GPIOA->PUPDR &= ~(3U << (2 * 2));
 80004e0:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80004e4:	68db      	ldr	r3, [r3, #12]
 80004e6:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 80004ea:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 80004ee:	60d3      	str	r3, [r2, #12]
}
 80004f0:	bf00      	nop
 80004f2:	46bd      	mov	sp, r7
 80004f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004f8:	4770      	bx	lr
 80004fa:	bf00      	nop
 80004fc:	40021000 	.word	0x40021000

08000500 <InitialisePA3AsInput>:

void InitialisePA3AsInput(void) {    //island 3
 8000500:	b480      	push	{r7}
 8000502:	af00      	add	r7, sp, #0
    RCC->AHBENR |= RCC_AHBENR_GPIOAEN;
 8000504:	4b0d      	ldr	r3, [pc, #52]	@ (800053c <InitialisePA3AsInput+0x3c>)
 8000506:	695b      	ldr	r3, [r3, #20]
 8000508:	4a0c      	ldr	r2, [pc, #48]	@ (800053c <InitialisePA3AsInput+0x3c>)
 800050a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800050e:	6153      	str	r3, [r2, #20]
    GPIOA->MODER &= ~(3U << (3 * 2));
 8000510:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000514:	681b      	ldr	r3, [r3, #0]
 8000516:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 800051a:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800051e:	6013      	str	r3, [r2, #0]
    GPIOA->PUPDR &= ~(3U << (3 * 2));
 8000520:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000524:	68db      	ldr	r3, [r3, #12]
 8000526:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 800052a:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800052e:	60d3      	str	r3, [r2, #12]
}
 8000530:	bf00      	nop
 8000532:	46bd      	mov	sp, r7
 8000534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000538:	4770      	bx	lr
 800053a:	bf00      	nop
 800053c:	40021000 	.word	0x40021000

08000540 <InitialisePA4AsInput>:

void InitialisePA4AsInput(void) {     //island 4
 8000540:	b480      	push	{r7}
 8000542:	af00      	add	r7, sp, #0
    RCC->AHBENR |= RCC_AHBENR_GPIOAEN;         // Enable GPIOA clock
 8000544:	4b0d      	ldr	r3, [pc, #52]	@ (800057c <InitialisePA4AsInput+0x3c>)
 8000546:	695b      	ldr	r3, [r3, #20]
 8000548:	4a0c      	ldr	r2, [pc, #48]	@ (800057c <InitialisePA4AsInput+0x3c>)
 800054a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800054e:	6153      	str	r3, [r2, #20]
    GPIOA->MODER &= ~(3U << (4 * 2));          // Set PA5 as input (00)
 8000550:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000554:	681b      	ldr	r3, [r3, #0]
 8000556:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 800055a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800055e:	6013      	str	r3, [r2, #0]
    GPIOA->PUPDR &= ~(3U << (4 * 2));          // No pull-up, pull-down
 8000560:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000564:	68db      	ldr	r3, [r3, #12]
 8000566:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 800056a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800056e:	60d3      	str	r3, [r2, #12]
}
 8000570:	bf00      	nop
 8000572:	46bd      	mov	sp, r7
 8000574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000578:	4770      	bx	lr
 800057a:	bf00      	nop
 800057c:	40021000 	.word	0x40021000

08000580 <InitialisePA5AsInput>:

void InitialisePA5AsInput(void) {    //island 5
 8000580:	b480      	push	{r7}
 8000582:	af00      	add	r7, sp, #0
    RCC->AHBENR |= RCC_AHBENR_GPIOAEN;
 8000584:	4b0d      	ldr	r3, [pc, #52]	@ (80005bc <InitialisePA5AsInput+0x3c>)
 8000586:	695b      	ldr	r3, [r3, #20]
 8000588:	4a0c      	ldr	r2, [pc, #48]	@ (80005bc <InitialisePA5AsInput+0x3c>)
 800058a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800058e:	6153      	str	r3, [r2, #20]
    GPIOA->MODER &= ~(3U << (5 * 2));
 8000590:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000594:	681b      	ldr	r3, [r3, #0]
 8000596:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 800059a:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 800059e:	6013      	str	r3, [r2, #0]
    GPIOA->PUPDR &= ~(3U << (5 * 2));
 80005a0:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80005a4:	68db      	ldr	r3, [r3, #12]
 80005a6:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 80005aa:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 80005ae:	60d3      	str	r3, [r2, #12]
}
 80005b0:	bf00      	nop
 80005b2:	46bd      	mov	sp, r7
 80005b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005b8:	4770      	bx	lr
 80005ba:	bf00      	nop
 80005bc:	40021000 	.word	0x40021000

080005c0 <potentiometer_game>:
void delay_ms(uint32_t ms);

int __io_getchar(void);


void potentiometer_game(void) {
 80005c0:	b580      	push	{r7, lr}
 80005c2:	b088      	sub	sp, #32
 80005c4:	af00      	add	r7, sp, #0
	// Start TIM2 for random seeding
	RCC->APB1ENR |= RCC_APB1ENR_TIM2EN;
 80005c6:	4b7f      	ldr	r3, [pc, #508]	@ (80007c4 <potentiometer_game+0x204>)
 80005c8:	69db      	ldr	r3, [r3, #28]
 80005ca:	4a7e      	ldr	r2, [pc, #504]	@ (80007c4 <potentiometer_game+0x204>)
 80005cc:	f043 0301 	orr.w	r3, r3, #1
 80005d0:	61d3      	str	r3, [r2, #28]
	TIM2->PSC = 7999;
 80005d2:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80005d6:	f641 723f 	movw	r2, #7999	@ 0x1f3f
 80005da:	629a      	str	r2, [r3, #40]	@ 0x28
	TIM2->ARR = 0xFFFFFFFF;
 80005dc:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80005e0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80005e4:	62da      	str	r2, [r3, #44]	@ 0x2c
	TIM2->CR1 |= TIM_CR1_CEN;
 80005e6:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80005ea:	681b      	ldr	r3, [r3, #0]
 80005ec:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80005f0:	f043 0301 	orr.w	r3, r3, #1
 80005f4:	6013      	str	r3, [r2, #0]

	while (1) {
		// === Start message ===
		 printf("\r");
 80005f6:	200d      	movs	r0, #13
 80005f8:	f000 fe56 	bl	80012a8 <putchar>
		delay_ms(1000);
 80005fc:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000600:	f7ff fe9a 	bl	8000338 <delay_ms>
		printf("YOU HAVE FOUND THE TREASURE, BUT IT IS LOCKED!\r\n");
 8000604:	4870      	ldr	r0, [pc, #448]	@ (80007c8 <potentiometer_game+0x208>)
 8000606:	f000 fead 	bl	8001364 <puts>
		printf("To crack the code and open the treasure chest, you must solve each question and answer within 4s\r\n");
 800060a:	4870      	ldr	r0, [pc, #448]	@ (80007cc <potentiometer_game+0x20c>)
 800060c:	f000 feaa 	bl	8001364 <puts>
		printf("Odd answer = Twist LEFT\r\n");
 8000610:	486f      	ldr	r0, [pc, #444]	@ (80007d0 <potentiometer_game+0x210>)
 8000612:	f000 fea7 	bl	8001364 <puts>
		printf("Even answer = Twist RIGHT\r\n");
 8000616:	486f      	ldr	r0, [pc, #444]	@ (80007d4 <potentiometer_game+0x214>)
 8000618:	f000 fea4 	bl	8001364 <puts>
		printf("Press ENTER to begin...\r\n");
 800061c:	486e      	ldr	r0, [pc, #440]	@ (80007d8 <potentiometer_game+0x218>)
 800061e:	f000 fea1 	bl	8001364 <puts>

		// Wait for Enter key
		while (1) {
			char c = __io_getchar();
 8000622:	f7ff fe7f 	bl	8000324 <__io_getchar>
 8000626:	4603      	mov	r3, r0
 8000628:	75fb      	strb	r3, [r7, #23]
			if (c == '\r' || c == '\n') break;
 800062a:	7dfb      	ldrb	r3, [r7, #23]
 800062c:	2b0d      	cmp	r3, #13
 800062e:	d003      	beq.n	8000638 <potentiometer_game+0x78>
 8000630:	7dfb      	ldrb	r3, [r7, #23]
 8000632:	2b0a      	cmp	r3, #10
 8000634:	d000      	beq.n	8000638 <potentiometer_game+0x78>
		while (1) {
 8000636:	e7f4      	b.n	8000622 <potentiometer_game+0x62>
		}

		printf("Ready???\r\n\r\n");
 8000638:	4868      	ldr	r0, [pc, #416]	@ (80007dc <potentiometer_game+0x21c>)
 800063a:	f000 fe93 	bl	8001364 <puts>
		delay_ms(2000);
 800063e:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000642:	f7ff fe79 	bl	8000338 <delay_ms>

		// Seed randomness using TIM2 count
		srand(TIM2->CNT);
 8000646:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800064a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800064c:	4618      	mov	r0, r3
 800064e:	f000 fc67 	bl	8000f20 <srand>

		int score = 0;
 8000652:	2300      	movs	r3, #0
 8000654:	61fb      	str	r3, [r7, #28]

		while (score < 10) {
 8000656:	e092      	b.n	800077e <potentiometer_game+0x1be>
			int a = (rand() % 20) + 1;  // 1–20
 8000658:	f000 fc90 	bl	8000f7c <rand>
 800065c:	4601      	mov	r1, r0
 800065e:	4b60      	ldr	r3, [pc, #384]	@ (80007e0 <potentiometer_game+0x220>)
 8000660:	fb83 2301 	smull	r2, r3, r3, r1
 8000664:	10da      	asrs	r2, r3, #3
 8000666:	17cb      	asrs	r3, r1, #31
 8000668:	1ad2      	subs	r2, r2, r3
 800066a:	4613      	mov	r3, r2
 800066c:	009b      	lsls	r3, r3, #2
 800066e:	4413      	add	r3, r2
 8000670:	009b      	lsls	r3, r3, #2
 8000672:	1aca      	subs	r2, r1, r3
 8000674:	1c53      	adds	r3, r2, #1
 8000676:	613b      	str	r3, [r7, #16]
			int b = (rand() % 20) + 1;
 8000678:	f000 fc80 	bl	8000f7c <rand>
 800067c:	4601      	mov	r1, r0
 800067e:	4b58      	ldr	r3, [pc, #352]	@ (80007e0 <potentiometer_game+0x220>)
 8000680:	fb83 2301 	smull	r2, r3, r3, r1
 8000684:	10da      	asrs	r2, r3, #3
 8000686:	17cb      	asrs	r3, r1, #31
 8000688:	1ad2      	subs	r2, r2, r3
 800068a:	4613      	mov	r3, r2
 800068c:	009b      	lsls	r3, r3, #2
 800068e:	4413      	add	r3, r2
 8000690:	009b      	lsls	r3, r3, #2
 8000692:	1aca      	subs	r2, r1, r3
 8000694:	1c53      	adds	r3, r2, #1
 8000696:	60fb      	str	r3, [r7, #12]
			int result;

			// Transition message before Q6
			if (score == 5) {
 8000698:	69fb      	ldr	r3, [r7, #28]
 800069a:	2b05      	cmp	r3, #5
 800069c:	d10d      	bne.n	80006ba <potentiometer_game+0xfa>
				printf("\r\nThat was too easy. Let's spice it up...\r\n");
 800069e:	4851      	ldr	r0, [pc, #324]	@ (80007e4 <potentiometer_game+0x224>)
 80006a0:	f000 fe60 	bl	8001364 <puts>
				delay_ms(2000);
 80006a4:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80006a8:	f7ff fe46 	bl	8000338 <delay_ms>
				printf("Ready???\r\n\r\n");
 80006ac:	484b      	ldr	r0, [pc, #300]	@ (80007dc <potentiometer_game+0x21c>)
 80006ae:	f000 fe59 	bl	8001364 <puts>
			   delay_ms(2000);
 80006b2:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80006b6:	f7ff fe3f 	bl	8000338 <delay_ms>
			}

			if (score < 5) {
 80006ba:	69fb      	ldr	r3, [r7, #28]
 80006bc:	2b04      	cmp	r3, #4
 80006be:	dc09      	bgt.n	80006d4 <potentiometer_game+0x114>
				result = a + b;
 80006c0:	693a      	ldr	r2, [r7, #16]
 80006c2:	68fb      	ldr	r3, [r7, #12]
 80006c4:	4413      	add	r3, r2
 80006c6:	61bb      	str	r3, [r7, #24]
				printf("\r\n%d + %d\r\n", a, b);
 80006c8:	68fa      	ldr	r2, [r7, #12]
 80006ca:	6939      	ldr	r1, [r7, #16]
 80006cc:	4846      	ldr	r0, [pc, #280]	@ (80007e8 <potentiometer_game+0x228>)
 80006ce:	f000 fdd9 	bl	8001284 <iprintf>
 80006d2:	e009      	b.n	80006e8 <potentiometer_game+0x128>
			} else {
				result = a * b;
 80006d4:	693b      	ldr	r3, [r7, #16]
 80006d6:	68fa      	ldr	r2, [r7, #12]
 80006d8:	fb02 f303 	mul.w	r3, r2, r3
 80006dc:	61bb      	str	r3, [r7, #24]
				printf("\r\n%d x %d\r\n", a, b);
 80006de:	68fa      	ldr	r2, [r7, #12]
 80006e0:	6939      	ldr	r1, [r7, #16]
 80006e2:	4842      	ldr	r0, [pc, #264]	@ (80007ec <potentiometer_game+0x22c>)
 80006e4:	f000 fdce 	bl	8001284 <iprintf>
			}

			delay_ms(4000);  // Wait 4 seconds
 80006e8:	f44f 607a 	mov.w	r0, #4000	@ 0xfa0
 80006ec:	f7ff fe24 	bl	8000338 <delay_ms>

			uint8_t input_state = (GPIOA->IDR & (1 << 1)) ? 1 : 0;
 80006f0:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80006f4:	691b      	ldr	r3, [r3, #16]
 80006f6:	f003 0302 	and.w	r3, r3, #2
 80006fa:	2b00      	cmp	r3, #0
 80006fc:	bf14      	ite	ne
 80006fe:	2301      	movne	r3, #1
 8000700:	2300      	moveq	r3, #0
 8000702:	b2db      	uxtb	r3, r3
 8000704:	72fb      	strb	r3, [r7, #11]
			int is_even = (result % 2 == 0);
 8000706:	69bb      	ldr	r3, [r7, #24]
 8000708:	f003 0301 	and.w	r3, r3, #1
 800070c:	2b00      	cmp	r3, #0
 800070e:	bf0c      	ite	eq
 8000710:	2301      	moveq	r3, #1
 8000712:	2300      	movne	r3, #0
 8000714:	b2db      	uxtb	r3, r3
 8000716:	607b      	str	r3, [r7, #4]

			if ((is_even && input_state == 1) || (!is_even && input_state == 0)) {
 8000718:	687b      	ldr	r3, [r7, #4]
 800071a:	2b00      	cmp	r3, #0
 800071c:	d002      	beq.n	8000724 <potentiometer_game+0x164>
 800071e:	7afb      	ldrb	r3, [r7, #11]
 8000720:	2b01      	cmp	r3, #1
 8000722:	d005      	beq.n	8000730 <potentiometer_game+0x170>
 8000724:	687b      	ldr	r3, [r7, #4]
 8000726:	2b00      	cmp	r3, #0
 8000728:	d117      	bne.n	800075a <potentiometer_game+0x19a>
 800072a:	7afb      	ldrb	r3, [r7, #11]
 800072c:	2b00      	cmp	r3, #0
 800072e:	d114      	bne.n	800075a <potentiometer_game+0x19a>
				printf("Correct! %d is %s.\r\n", result, is_even ? "even" : "odd");
 8000730:	687b      	ldr	r3, [r7, #4]
 8000732:	2b00      	cmp	r3, #0
 8000734:	d001      	beq.n	800073a <potentiometer_game+0x17a>
 8000736:	4b2e      	ldr	r3, [pc, #184]	@ (80007f0 <potentiometer_game+0x230>)
 8000738:	e000      	b.n	800073c <potentiometer_game+0x17c>
 800073a:	4b2e      	ldr	r3, [pc, #184]	@ (80007f4 <potentiometer_game+0x234>)
 800073c:	461a      	mov	r2, r3
 800073e:	69b9      	ldr	r1, [r7, #24]
 8000740:	482d      	ldr	r0, [pc, #180]	@ (80007f8 <potentiometer_game+0x238>)
 8000742:	f000 fd9f 	bl	8001284 <iprintf>
				GPIOE->ODR |= (1 << 8);
 8000746:	4b2d      	ldr	r3, [pc, #180]	@ (80007fc <potentiometer_game+0x23c>)
 8000748:	695b      	ldr	r3, [r3, #20]
 800074a:	4a2c      	ldr	r2, [pc, #176]	@ (80007fc <potentiometer_game+0x23c>)
 800074c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000750:	6153      	str	r3, [r2, #20]
				score++;
 8000752:	69fb      	ldr	r3, [r7, #28]
 8000754:	3301      	adds	r3, #1
 8000756:	61fb      	str	r3, [r7, #28]
 8000758:	e011      	b.n	800077e <potentiometer_game+0x1be>
			} else {
				printf("Incorrect. %d is %s. You failed.\r\n", result, is_even ? "even" : "odd");
 800075a:	687b      	ldr	r3, [r7, #4]
 800075c:	2b00      	cmp	r3, #0
 800075e:	d001      	beq.n	8000764 <potentiometer_game+0x1a4>
 8000760:	4b23      	ldr	r3, [pc, #140]	@ (80007f0 <potentiometer_game+0x230>)
 8000762:	e000      	b.n	8000766 <potentiometer_game+0x1a6>
 8000764:	4b23      	ldr	r3, [pc, #140]	@ (80007f4 <potentiometer_game+0x234>)
 8000766:	461a      	mov	r2, r3
 8000768:	69b9      	ldr	r1, [r7, #24]
 800076a:	4825      	ldr	r0, [pc, #148]	@ (8000800 <potentiometer_game+0x240>)
 800076c:	f000 fd8a 	bl	8001284 <iprintf>
				GPIOE->ODR &= ~(1 << 8);
 8000770:	4b22      	ldr	r3, [pc, #136]	@ (80007fc <potentiometer_game+0x23c>)
 8000772:	695b      	ldr	r3, [r3, #20]
 8000774:	4a21      	ldr	r2, [pc, #132]	@ (80007fc <potentiometer_game+0x23c>)
 8000776:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800077a:	6153      	str	r3, [r2, #20]
				break;
 800077c:	e003      	b.n	8000786 <potentiometer_game+0x1c6>
		while (score < 10) {
 800077e:	69fb      	ldr	r3, [r7, #28]
 8000780:	2b09      	cmp	r3, #9
 8000782:	f77f af69 	ble.w	8000658 <potentiometer_game+0x98>
			}
		}


		if (score == 10) {
 8000786:	69fb      	ldr	r3, [r7, #28]
 8000788:	2b0a      	cmp	r3, #10
 800078a:	d10a      	bne.n	80007a2 <potentiometer_game+0x1e2>
			printf("\r\n YOU WIN! The treasure is yours!\r\n");
 800078c:	481d      	ldr	r0, [pc, #116]	@ (8000804 <potentiometer_game+0x244>)
 800078e:	f000 fde9 	bl	8001364 <puts>
			game_progress |= 0b0010;  // Set bit 1 after success
 8000792:	4b1d      	ldr	r3, [pc, #116]	@ (8000808 <potentiometer_game+0x248>)
 8000794:	781b      	ldrb	r3, [r3, #0]
 8000796:	b2db      	uxtb	r3, r3
 8000798:	f043 0302 	orr.w	r3, r3, #2
 800079c:	b2da      	uxtb	r2, r3
 800079e:	4b1a      	ldr	r3, [pc, #104]	@ (8000808 <potentiometer_game+0x248>)
 80007a0:	701a      	strb	r2, [r3, #0]
		}

		printf("\r\nPress ENTER to try again...\r\n");
 80007a2:	481a      	ldr	r0, [pc, #104]	@ (800080c <potentiometer_game+0x24c>)
 80007a4:	f000 fdde 	bl	8001364 <puts>
		while (1) {
			char c = __io_getchar();
 80007a8:	f7ff fdbc 	bl	8000324 <__io_getchar>
 80007ac:	4603      	mov	r3, r0
 80007ae:	70fb      	strb	r3, [r7, #3]
			if (c == '\r' || c == '\n') break;
 80007b0:	78fb      	ldrb	r3, [r7, #3]
 80007b2:	2b0d      	cmp	r3, #13
 80007b4:	f43f af1f 	beq.w	80005f6 <potentiometer_game+0x36>
 80007b8:	78fb      	ldrb	r3, [r7, #3]
 80007ba:	2b0a      	cmp	r3, #10
 80007bc:	f43f af1b 	beq.w	80005f6 <potentiometer_game+0x36>
		while (1) {
 80007c0:	e7f2      	b.n	80007a8 <potentiometer_game+0x1e8>
 80007c2:	bf00      	nop
 80007c4:	40021000 	.word	0x40021000
 80007c8:	08002210 	.word	0x08002210
 80007cc:	08002240 	.word	0x08002240
 80007d0:	080022a4 	.word	0x080022a4
 80007d4:	080022c0 	.word	0x080022c0
 80007d8:	080022dc 	.word	0x080022dc
 80007dc:	080022f8 	.word	0x080022f8
 80007e0:	66666667 	.word	0x66666667
 80007e4:	08002304 	.word	0x08002304
 80007e8:	08002330 	.word	0x08002330
 80007ec:	0800233c 	.word	0x0800233c
 80007f0:	08002348 	.word	0x08002348
 80007f4:	08002350 	.word	0x08002350
 80007f8:	08002354 	.word	0x08002354
 80007fc:	48001000 	.word	0x48001000
 8000800:	0800236c 	.word	0x0800236c
 8000804:	08002390 	.word	0x08002390
 8000808:	200000c8 	.word	0x200000c8
 800080c:	080023b4 	.word	0x080023b4

08000810 <ToLowerCase>:
static uint8_t prompted = 0;

int __io_getchar(void);


static void ToLowerCase(char *str) {
 8000810:	b480      	push	{r7}
 8000812:	b085      	sub	sp, #20
 8000814:	af00      	add	r7, sp, #0
 8000816:	6078      	str	r0, [r7, #4]
    while (*str) {
 8000818:	e015      	b.n	8000846 <ToLowerCase+0x36>
        *str = tolower((unsigned char)*str);
 800081a:	687b      	ldr	r3, [r7, #4]
 800081c:	781b      	ldrb	r3, [r3, #0]
 800081e:	73fb      	strb	r3, [r7, #15]
 8000820:	7bfb      	ldrb	r3, [r7, #15]
 8000822:	3301      	adds	r3, #1
 8000824:	4a0d      	ldr	r2, [pc, #52]	@ (800085c <ToLowerCase+0x4c>)
 8000826:	4413      	add	r3, r2
 8000828:	781b      	ldrb	r3, [r3, #0]
 800082a:	f003 0303 	and.w	r3, r3, #3
 800082e:	2b01      	cmp	r3, #1
 8000830:	d102      	bne.n	8000838 <ToLowerCase+0x28>
 8000832:	7bfb      	ldrb	r3, [r7, #15]
 8000834:	3320      	adds	r3, #32
 8000836:	e000      	b.n	800083a <ToLowerCase+0x2a>
 8000838:	7bfb      	ldrb	r3, [r7, #15]
 800083a:	b2da      	uxtb	r2, r3
 800083c:	687b      	ldr	r3, [r7, #4]
 800083e:	701a      	strb	r2, [r3, #0]
        str++;
 8000840:	687b      	ldr	r3, [r7, #4]
 8000842:	3301      	adds	r3, #1
 8000844:	607b      	str	r3, [r7, #4]
    while (*str) {
 8000846:	687b      	ldr	r3, [r7, #4]
 8000848:	781b      	ldrb	r3, [r3, #0]
 800084a:	2b00      	cmp	r3, #0
 800084c:	d1e5      	bne.n	800081a <ToLowerCase+0xa>
    }
}
 800084e:	bf00      	nop
 8000850:	bf00      	nop
 8000852:	3714      	adds	r7, #20
 8000854:	46bd      	mov	sp, r7
 8000856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800085a:	4770      	bx	lr
 800085c:	08002869 	.word	0x08002869

08000860 <CaesarCipher>:

static void CaesarCipher(char *dest, const char *src, int shift) {
 8000860:	b480      	push	{r7}
 8000862:	b087      	sub	sp, #28
 8000864:	af00      	add	r7, sp, #0
 8000866:	60f8      	str	r0, [r7, #12]
 8000868:	60b9      	str	r1, [r7, #8]
 800086a:	607a      	str	r2, [r7, #4]
    while (*src) {
 800086c:	e039      	b.n	80008e2 <CaesarCipher+0x82>
        if (isalpha(*src)) {
 800086e:	68bb      	ldr	r3, [r7, #8]
 8000870:	781b      	ldrb	r3, [r3, #0]
 8000872:	3301      	adds	r3, #1
 8000874:	4a21      	ldr	r2, [pc, #132]	@ (80008fc <CaesarCipher+0x9c>)
 8000876:	4413      	add	r3, r2
 8000878:	781b      	ldrb	r3, [r3, #0]
 800087a:	f003 0303 	and.w	r3, r3, #3
 800087e:	2b00      	cmp	r3, #0
 8000880:	d025      	beq.n	80008ce <CaesarCipher+0x6e>
            char base = islower(*src) ? 'a' : 'A';
 8000882:	68bb      	ldr	r3, [r7, #8]
 8000884:	781b      	ldrb	r3, [r3, #0]
 8000886:	3301      	adds	r3, #1
 8000888:	4a1c      	ldr	r2, [pc, #112]	@ (80008fc <CaesarCipher+0x9c>)
 800088a:	4413      	add	r3, r2
 800088c:	781b      	ldrb	r3, [r3, #0]
 800088e:	f003 0303 	and.w	r3, r3, #3
 8000892:	2b02      	cmp	r3, #2
 8000894:	d101      	bne.n	800089a <CaesarCipher+0x3a>
 8000896:	2361      	movs	r3, #97	@ 0x61
 8000898:	e000      	b.n	800089c <CaesarCipher+0x3c>
 800089a:	2341      	movs	r3, #65	@ 0x41
 800089c:	75fb      	strb	r3, [r7, #23]
            *dest = (char)(((*src - base + shift) % 26) + base);
 800089e:	68bb      	ldr	r3, [r7, #8]
 80008a0:	781b      	ldrb	r3, [r3, #0]
 80008a2:	461a      	mov	r2, r3
 80008a4:	7dfb      	ldrb	r3, [r7, #23]
 80008a6:	1ad2      	subs	r2, r2, r3
 80008a8:	687b      	ldr	r3, [r7, #4]
 80008aa:	4413      	add	r3, r2
 80008ac:	4a14      	ldr	r2, [pc, #80]	@ (8000900 <CaesarCipher+0xa0>)
 80008ae:	fb82 1203 	smull	r1, r2, r2, r3
 80008b2:	10d1      	asrs	r1, r2, #3
 80008b4:	17da      	asrs	r2, r3, #31
 80008b6:	1a8a      	subs	r2, r1, r2
 80008b8:	211a      	movs	r1, #26
 80008ba:	fb01 f202 	mul.w	r2, r1, r2
 80008be:	1a9a      	subs	r2, r3, r2
 80008c0:	b2d2      	uxtb	r2, r2
 80008c2:	7dfb      	ldrb	r3, [r7, #23]
 80008c4:	4413      	add	r3, r2
 80008c6:	b2da      	uxtb	r2, r3
 80008c8:	68fb      	ldr	r3, [r7, #12]
 80008ca:	701a      	strb	r2, [r3, #0]
 80008cc:	e003      	b.n	80008d6 <CaesarCipher+0x76>
        } else {
            *dest = *src;
 80008ce:	68bb      	ldr	r3, [r7, #8]
 80008d0:	781a      	ldrb	r2, [r3, #0]
 80008d2:	68fb      	ldr	r3, [r7, #12]
 80008d4:	701a      	strb	r2, [r3, #0]
        }
        src++;
 80008d6:	68bb      	ldr	r3, [r7, #8]
 80008d8:	3301      	adds	r3, #1
 80008da:	60bb      	str	r3, [r7, #8]
        dest++;
 80008dc:	68fb      	ldr	r3, [r7, #12]
 80008de:	3301      	adds	r3, #1
 80008e0:	60fb      	str	r3, [r7, #12]
    while (*src) {
 80008e2:	68bb      	ldr	r3, [r7, #8]
 80008e4:	781b      	ldrb	r3, [r3, #0]
 80008e6:	2b00      	cmp	r3, #0
 80008e8:	d1c1      	bne.n	800086e <CaesarCipher+0xe>
    }
    *dest = '\0';
 80008ea:	68fb      	ldr	r3, [r7, #12]
 80008ec:	2200      	movs	r2, #0
 80008ee:	701a      	strb	r2, [r3, #0]
}
 80008f0:	bf00      	nop
 80008f2:	371c      	adds	r7, #28
 80008f4:	46bd      	mov	sp, r7
 80008f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008fa:	4770      	bx	lr
 80008fc:	08002869 	.word	0x08002869
 8000900:	4ec4ec4f 	.word	0x4ec4ec4f

08000904 <AskNewRiddle>:

static void AskNewRiddle(void) {
 8000904:	b590      	push	{r4, r7, lr}
 8000906:	b083      	sub	sp, #12
 8000908:	af00      	add	r7, sp, #0
    int index = rand() % NUM_RIDDLES;
 800090a:	f000 fb37 	bl	8000f7c <rand>
 800090e:	4603      	mov	r3, r0
 8000910:	4619      	mov	r1, r3
 8000912:	4b11      	ldr	r3, [pc, #68]	@ (8000958 <AskNewRiddle+0x54>)
 8000914:	fba3 2301 	umull	r2, r3, r3, r1
 8000918:	089a      	lsrs	r2, r3, #2
 800091a:	4613      	mov	r3, r2
 800091c:	009b      	lsls	r3, r3, #2
 800091e:	4413      	add	r3, r2
 8000920:	1aca      	subs	r2, r1, r3
 8000922:	607a      	str	r2, [r7, #4]
    current_riddle = riddles[index];
 8000924:	490d      	ldr	r1, [pc, #52]	@ (800095c <AskNewRiddle+0x58>)
 8000926:	4a0e      	ldr	r2, [pc, #56]	@ (8000960 <AskNewRiddle+0x5c>)
 8000928:	687b      	ldr	r3, [r7, #4]
 800092a:	460c      	mov	r4, r1
 800092c:	00db      	lsls	r3, r3, #3
 800092e:	4413      	add	r3, r2
 8000930:	e893 0003 	ldmia.w	r3, {r0, r1}
 8000934:	e884 0003 	stmia.w	r4, {r0, r1}
    riddle_step = 0;
 8000938:	4b0a      	ldr	r3, [pc, #40]	@ (8000964 <AskNewRiddle+0x60>)
 800093a:	2200      	movs	r2, #0
 800093c:	701a      	strb	r2, [r3, #0]
    printf("\r\nAHOY - It's Riddle Time! Solve this riddle to find the next step to the treasure.\r\n%s\r\n> ", current_riddle.riddle);
 800093e:	4b07      	ldr	r3, [pc, #28]	@ (800095c <AskNewRiddle+0x58>)
 8000940:	681b      	ldr	r3, [r3, #0]
 8000942:	4619      	mov	r1, r3
 8000944:	4808      	ldr	r0, [pc, #32]	@ (8000968 <AskNewRiddle+0x64>)
 8000946:	f000 fc9d 	bl	8001284 <iprintf>
    prompted = 1;
 800094a:	4b08      	ldr	r3, [pc, #32]	@ (800096c <AskNewRiddle+0x68>)
 800094c:	2201      	movs	r2, #1
 800094e:	701a      	strb	r2, [r3, #0]
}
 8000950:	bf00      	nop
 8000952:	370c      	adds	r7, #12
 8000954:	46bd      	mov	sp, r7
 8000956:	bd90      	pop	{r4, r7, pc}
 8000958:	cccccccd 	.word	0xcccccccd
 800095c:	200000cc 	.word	0x200000cc
 8000960:	20000000 	.word	0x20000000
 8000964:	200000d4 	.word	0x200000d4
 8000968:	080025a4 	.word	0x080025a4
 800096c:	20000125 	.word	0x20000125

08000970 <AskMathQuestion>:

static void AskMathQuestion(void) {
 8000970:	b580      	push	{r7, lr}
 8000972:	af00      	add	r7, sp, #0
    math_1 = rand() % 5;
 8000974:	f000 fb02 	bl	8000f7c <rand>
 8000978:	4601      	mov	r1, r0
 800097a:	4b17      	ldr	r3, [pc, #92]	@ (80009d8 <AskMathQuestion+0x68>)
 800097c:	fb83 2301 	smull	r2, r3, r3, r1
 8000980:	105a      	asrs	r2, r3, #1
 8000982:	17cb      	asrs	r3, r1, #31
 8000984:	1ad2      	subs	r2, r2, r3
 8000986:	4613      	mov	r3, r2
 8000988:	009b      	lsls	r3, r3, #2
 800098a:	4413      	add	r3, r2
 800098c:	1aca      	subs	r2, r1, r3
 800098e:	4b13      	ldr	r3, [pc, #76]	@ (80009dc <AskMathQuestion+0x6c>)
 8000990:	601a      	str	r2, [r3, #0]
    math_2 = rand() % 5;
 8000992:	f000 faf3 	bl	8000f7c <rand>
 8000996:	4601      	mov	r1, r0
 8000998:	4b0f      	ldr	r3, [pc, #60]	@ (80009d8 <AskMathQuestion+0x68>)
 800099a:	fb83 2301 	smull	r2, r3, r3, r1
 800099e:	105a      	asrs	r2, r3, #1
 80009a0:	17cb      	asrs	r3, r1, #31
 80009a2:	1ad2      	subs	r2, r2, r3
 80009a4:	4613      	mov	r3, r2
 80009a6:	009b      	lsls	r3, r3, #2
 80009a8:	4413      	add	r3, r2
 80009aa:	1aca      	subs	r2, r1, r3
 80009ac:	4b0c      	ldr	r3, [pc, #48]	@ (80009e0 <AskMathQuestion+0x70>)
 80009ae:	601a      	str	r2, [r3, #0]
    math_answer = math_1 + math_2;
 80009b0:	4b0a      	ldr	r3, [pc, #40]	@ (80009dc <AskMathQuestion+0x6c>)
 80009b2:	681a      	ldr	r2, [r3, #0]
 80009b4:	4b0a      	ldr	r3, [pc, #40]	@ (80009e0 <AskMathQuestion+0x70>)
 80009b6:	681b      	ldr	r3, [r3, #0]
 80009b8:	4413      	add	r3, r2
 80009ba:	4a0a      	ldr	r2, [pc, #40]	@ (80009e4 <AskMathQuestion+0x74>)
 80009bc:	6013      	str	r3, [r2, #0]
    printf("\r\nNow answer this: What is %d + %d?\r\n> ", math_1, math_2);
 80009be:	4b07      	ldr	r3, [pc, #28]	@ (80009dc <AskMathQuestion+0x6c>)
 80009c0:	681b      	ldr	r3, [r3, #0]
 80009c2:	4a07      	ldr	r2, [pc, #28]	@ (80009e0 <AskMathQuestion+0x70>)
 80009c4:	6812      	ldr	r2, [r2, #0]
 80009c6:	4619      	mov	r1, r3
 80009c8:	4807      	ldr	r0, [pc, #28]	@ (80009e8 <AskMathQuestion+0x78>)
 80009ca:	f000 fc5b 	bl	8001284 <iprintf>
    prompted = 1;
 80009ce:	4b07      	ldr	r3, [pc, #28]	@ (80009ec <AskMathQuestion+0x7c>)
 80009d0:	2201      	movs	r2, #1
 80009d2:	701a      	strb	r2, [r3, #0]
}
 80009d4:	bf00      	nop
 80009d6:	bd80      	pop	{r7, pc}
 80009d8:	66666667 	.word	0x66666667
 80009dc:	200000d8 	.word	0x200000d8
 80009e0:	200000dc 	.word	0x200000dc
 80009e4:	200000e0 	.word	0x200000e0
 80009e8:	08002600 	.word	0x08002600
 80009ec:	20000125 	.word	0x20000125

080009f0 <AskCaesarChallenge>:

static void AskCaesarChallenge(void) {
 80009f0:	b580      	push	{r7, lr}
 80009f2:	af00      	add	r7, sp, #0
    printf("\r\nFinal task! Enter the Caesar cipher of the riddle answer with a shift of %d.\r\n> ", math_answer);
 80009f4:	4b05      	ldr	r3, [pc, #20]	@ (8000a0c <AskCaesarChallenge+0x1c>)
 80009f6:	681b      	ldr	r3, [r3, #0]
 80009f8:	4619      	mov	r1, r3
 80009fa:	4805      	ldr	r0, [pc, #20]	@ (8000a10 <AskCaesarChallenge+0x20>)
 80009fc:	f000 fc42 	bl	8001284 <iprintf>
    prompted = 1;
 8000a00:	4b04      	ldr	r3, [pc, #16]	@ (8000a14 <AskCaesarChallenge+0x24>)
 8000a02:	2201      	movs	r2, #1
 8000a04:	701a      	strb	r2, [r3, #0]
}
 8000a06:	bf00      	nop
 8000a08:	bd80      	pop	{r7, pc}
 8000a0a:	bf00      	nop
 8000a0c:	200000e0 	.word	0x200000e0
 8000a10:	08002628 	.word	0x08002628
 8000a14:	20000125 	.word	0x20000125

08000a18 <riddle_game>:

void riddle_game(void) {
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	b092      	sub	sp, #72	@ 0x48
 8000a1c:	af00      	add	r7, sp, #0
    if (current_riddle.riddle == NULL && !prompted) {
 8000a1e:	4b56      	ldr	r3, [pc, #344]	@ (8000b78 <riddle_game+0x160>)
 8000a20:	681b      	ldr	r3, [r3, #0]
 8000a22:	2b00      	cmp	r3, #0
 8000a24:	d106      	bne.n	8000a34 <riddle_game+0x1c>
 8000a26:	4b55      	ldr	r3, [pc, #340]	@ (8000b7c <riddle_game+0x164>)
 8000a28:	781b      	ldrb	r3, [r3, #0]
 8000a2a:	2b00      	cmp	r3, #0
 8000a2c:	d102      	bne.n	8000a34 <riddle_game+0x1c>
        AskNewRiddle();
 8000a2e:	f7ff ff69 	bl	8000904 <AskNewRiddle>
        return;
 8000a32:	e09e      	b.n	8000b72 <riddle_game+0x15a>
    }

    if (!SerialDataAvailable(&USART1_PORT)) {
 8000a34:	4852      	ldr	r0, [pc, #328]	@ (8000b80 <riddle_game+0x168>)
 8000a36:	f000 fa31 	bl	8000e9c <SerialDataAvailable>
 8000a3a:	4603      	mov	r3, r0
 8000a3c:	2b00      	cmp	r3, #0
 8000a3e:	f000 8097 	beq.w	8000b70 <riddle_game+0x158>
        return;
    }

    char c = __io_getchar();
 8000a42:	f7ff fc6f 	bl	8000324 <__io_getchar>
 8000a46:	4603      	mov	r3, r0
 8000a48:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47

    if (c == '\r' || c == '\n') {
 8000a4c:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8000a50:	2b0d      	cmp	r3, #13
 8000a52:	d003      	beq.n	8000a5c <riddle_game+0x44>
 8000a54:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8000a58:	2b0a      	cmp	r3, #10
 8000a5a:	d173      	bne.n	8000b44 <riddle_game+0x12c>
        input_buffer[input_index] = '\0';
 8000a5c:	4b49      	ldr	r3, [pc, #292]	@ (8000b84 <riddle_game+0x16c>)
 8000a5e:	781b      	ldrb	r3, [r3, #0]
 8000a60:	461a      	mov	r2, r3
 8000a62:	4b49      	ldr	r3, [pc, #292]	@ (8000b88 <riddle_game+0x170>)
 8000a64:	2100      	movs	r1, #0
 8000a66:	5499      	strb	r1, [r3, r2]
        input_index = 0;
 8000a68:	4b46      	ldr	r3, [pc, #280]	@ (8000b84 <riddle_game+0x16c>)
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	701a      	strb	r2, [r3, #0]

        ToLowerCase(input_buffer);
 8000a6e:	4846      	ldr	r0, [pc, #280]	@ (8000b88 <riddle_game+0x170>)
 8000a70:	f7ff fece 	bl	8000810 <ToLowerCase>

        switch (riddle_step) {
 8000a74:	4b45      	ldr	r3, [pc, #276]	@ (8000b8c <riddle_game+0x174>)
 8000a76:	781b      	ldrb	r3, [r3, #0]
 8000a78:	2b02      	cmp	r3, #2
 8000a7a:	d032      	beq.n	8000ae2 <riddle_game+0xca>
 8000a7c:	2b02      	cmp	r3, #2
 8000a7e:	dc56      	bgt.n	8000b2e <riddle_game+0x116>
 8000a80:	2b00      	cmp	r3, #0
 8000a82:	d002      	beq.n	8000a8a <riddle_game+0x72>
 8000a84:	2b01      	cmp	r3, #1
 8000a86:	d016      	beq.n	8000ab6 <riddle_game+0x9e>
 8000a88:	e051      	b.n	8000b2e <riddle_game+0x116>
            case 0:
                if (strcmp(input_buffer, current_riddle.answer) == 0) {
 8000a8a:	4b3b      	ldr	r3, [pc, #236]	@ (8000b78 <riddle_game+0x160>)
 8000a8c:	685b      	ldr	r3, [r3, #4]
 8000a8e:	4619      	mov	r1, r3
 8000a90:	483d      	ldr	r0, [pc, #244]	@ (8000b88 <riddle_game+0x170>)
 8000a92:	f7ff fba5 	bl	80001e0 <strcmp>
 8000a96:	4603      	mov	r3, r0
 8000a98:	2b00      	cmp	r3, #0
 8000a9a:	d108      	bne.n	8000aae <riddle_game+0x96>
                    printf("\r\nCorrect! Step 1 complete.");
 8000a9c:	483c      	ldr	r0, [pc, #240]	@ (8000b90 <riddle_game+0x178>)
 8000a9e:	f000 fbf1 	bl	8001284 <iprintf>
                    riddle_step = 1;
 8000aa2:	4b3a      	ldr	r3, [pc, #232]	@ (8000b8c <riddle_game+0x174>)
 8000aa4:	2201      	movs	r2, #1
 8000aa6:	701a      	strb	r2, [r3, #0]
                    AskMathQuestion();
 8000aa8:	f7ff ff62 	bl	8000970 <AskMathQuestion>
                } else {
                    printf("\r\nIncorrect. Try again!\r\n> ");
                }
                break;
 8000aac:	e049      	b.n	8000b42 <riddle_game+0x12a>
                    printf("\r\nIncorrect. Try again!\r\n> ");
 8000aae:	4839      	ldr	r0, [pc, #228]	@ (8000b94 <riddle_game+0x17c>)
 8000ab0:	f000 fbe8 	bl	8001284 <iprintf>
                break;
 8000ab4:	e045      	b.n	8000b42 <riddle_game+0x12a>

            case 1: {
                int answer = atoi(input_buffer);
 8000ab6:	4834      	ldr	r0, [pc, #208]	@ (8000b88 <riddle_game+0x170>)
 8000ab8:	f000 fa2d 	bl	8000f16 <atoi>
 8000abc:	6438      	str	r0, [r7, #64]	@ 0x40
                if (answer == math_answer) {
 8000abe:	4b36      	ldr	r3, [pc, #216]	@ (8000b98 <riddle_game+0x180>)
 8000ac0:	681b      	ldr	r3, [r3, #0]
 8000ac2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8000ac4:	429a      	cmp	r2, r3
 8000ac6:	d108      	bne.n	8000ada <riddle_game+0xc2>
                    printf("\r\nWell done! Step 2 complete.");
 8000ac8:	4834      	ldr	r0, [pc, #208]	@ (8000b9c <riddle_game+0x184>)
 8000aca:	f000 fbdb 	bl	8001284 <iprintf>
                    riddle_step = 2;
 8000ace:	4b2f      	ldr	r3, [pc, #188]	@ (8000b8c <riddle_game+0x174>)
 8000ad0:	2202      	movs	r2, #2
 8000ad2:	701a      	strb	r2, [r3, #0]
                    AskCaesarChallenge();
 8000ad4:	f7ff ff8c 	bl	80009f0 <AskCaesarChallenge>
                } else {
                    printf("\r\nThat's not right. Try again!\r\n> ");
                }
                break;
 8000ad8:	e033      	b.n	8000b42 <riddle_game+0x12a>
                    printf("\r\nThat's not right. Try again!\r\n> ");
 8000ada:	4831      	ldr	r0, [pc, #196]	@ (8000ba0 <riddle_game+0x188>)
 8000adc:	f000 fbd2 	bl	8001284 <iprintf>
                break;
 8000ae0:	e02f      	b.n	8000b42 <riddle_game+0x12a>
            }

            case 2: {
                char expected[64];
                CaesarCipher(expected, current_riddle.answer, math_answer);
 8000ae2:	4b25      	ldr	r3, [pc, #148]	@ (8000b78 <riddle_game+0x160>)
 8000ae4:	6859      	ldr	r1, [r3, #4]
 8000ae6:	4b2c      	ldr	r3, [pc, #176]	@ (8000b98 <riddle_game+0x180>)
 8000ae8:	681a      	ldr	r2, [r3, #0]
 8000aea:	463b      	mov	r3, r7
 8000aec:	4618      	mov	r0, r3
 8000aee:	f7ff feb7 	bl	8000860 <CaesarCipher>
                if (strcmp(input_buffer, expected) == 0) {
 8000af2:	463b      	mov	r3, r7
 8000af4:	4619      	mov	r1, r3
 8000af6:	4824      	ldr	r0, [pc, #144]	@ (8000b88 <riddle_game+0x170>)
 8000af8:	f7ff fb72 	bl	80001e0 <strcmp>
 8000afc:	4603      	mov	r3, r0
 8000afe:	2b00      	cmp	r3, #0
 8000b00:	d111      	bne.n	8000b26 <riddle_game+0x10e>
                    printf("\r\nIncredible! You completed all steps of the Riddle Challenge!\r\n");
 8000b02:	4828      	ldr	r0, [pc, #160]	@ (8000ba4 <riddle_game+0x18c>)
 8000b04:	f000 fc2e 	bl	8001364 <puts>
                    game_progress |= 0b0010;
 8000b08:	4b27      	ldr	r3, [pc, #156]	@ (8000ba8 <riddle_game+0x190>)
 8000b0a:	781b      	ldrb	r3, [r3, #0]
 8000b0c:	b2db      	uxtb	r3, r3
 8000b0e:	f043 0302 	orr.w	r3, r3, #2
 8000b12:	b2da      	uxtb	r2, r3
 8000b14:	4b24      	ldr	r3, [pc, #144]	@ (8000ba8 <riddle_game+0x190>)
 8000b16:	701a      	strb	r2, [r3, #0]
                    current_riddle.riddle = NULL;
 8000b18:	4b17      	ldr	r3, [pc, #92]	@ (8000b78 <riddle_game+0x160>)
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	601a      	str	r2, [r3, #0]
                    prompted = 0;
 8000b1e:	4b17      	ldr	r3, [pc, #92]	@ (8000b7c <riddle_game+0x164>)
 8000b20:	2200      	movs	r2, #0
 8000b22:	701a      	strb	r2, [r3, #0]
                } else {
                    printf("\r\nHmm, that’s not correct. Try again!\r\n> ");
                }
                break;
 8000b24:	e00d      	b.n	8000b42 <riddle_game+0x12a>
                    printf("\r\nHmm, that’s not correct. Try again!\r\n> ");
 8000b26:	4821      	ldr	r0, [pc, #132]	@ (8000bac <riddle_game+0x194>)
 8000b28:	f000 fbac 	bl	8001284 <iprintf>
                break;
 8000b2c:	e009      	b.n	8000b42 <riddle_game+0x12a>
            }

            default:
                printf("\r\nUnexpected step. Restarting riddle.\r\n");
 8000b2e:	4820      	ldr	r0, [pc, #128]	@ (8000bb0 <riddle_game+0x198>)
 8000b30:	f000 fc18 	bl	8001364 <puts>
                current_riddle.riddle = NULL;
 8000b34:	4b10      	ldr	r3, [pc, #64]	@ (8000b78 <riddle_game+0x160>)
 8000b36:	2200      	movs	r2, #0
 8000b38:	601a      	str	r2, [r3, #0]
                prompted = 0;
 8000b3a:	4b10      	ldr	r3, [pc, #64]	@ (8000b7c <riddle_game+0x164>)
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	701a      	strb	r2, [r3, #0]
                break;
 8000b40:	bf00      	nop
        switch (riddle_step) {
 8000b42:	e016      	b.n	8000b72 <riddle_game+0x15a>
        }
    } else if (input_index < MAX_INPUT - 1) {
 8000b44:	4b0f      	ldr	r3, [pc, #60]	@ (8000b84 <riddle_game+0x16c>)
 8000b46:	781b      	ldrb	r3, [r3, #0]
 8000b48:	2b3e      	cmp	r3, #62	@ 0x3e
 8000b4a:	d812      	bhi.n	8000b72 <riddle_game+0x15a>
        input_buffer[input_index++] = c;
 8000b4c:	4b0d      	ldr	r3, [pc, #52]	@ (8000b84 <riddle_game+0x16c>)
 8000b4e:	781b      	ldrb	r3, [r3, #0]
 8000b50:	1c5a      	adds	r2, r3, #1
 8000b52:	b2d1      	uxtb	r1, r2
 8000b54:	4a0b      	ldr	r2, [pc, #44]	@ (8000b84 <riddle_game+0x16c>)
 8000b56:	7011      	strb	r1, [r2, #0]
 8000b58:	4619      	mov	r1, r3
 8000b5a:	4a0b      	ldr	r2, [pc, #44]	@ (8000b88 <riddle_game+0x170>)
 8000b5c:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8000b60:	5453      	strb	r3, [r2, r1]
        SerialOutputChar(c, &USART1_PORT); // Echo
 8000b62:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8000b66:	4906      	ldr	r1, [pc, #24]	@ (8000b80 <riddle_game+0x168>)
 8000b68:	4618      	mov	r0, r3
 8000b6a:	f000 f967 	bl	8000e3c <SerialOutputChar>
 8000b6e:	e000      	b.n	8000b72 <riddle_game+0x15a>
        return;
 8000b70:	bf00      	nop
    }
}
 8000b72:	3748      	adds	r7, #72	@ 0x48
 8000b74:	46bd      	mov	sp, r7
 8000b76:	bd80      	pop	{r7, pc}
 8000b78:	200000cc 	.word	0x200000cc
 8000b7c:	20000125 	.word	0x20000125
 8000b80:	20000028 	.word	0x20000028
 8000b84:	20000124 	.word	0x20000124
 8000b88:	200000e4 	.word	0x200000e4
 8000b8c:	200000d4 	.word	0x200000d4
 8000b90:	0800267c 	.word	0x0800267c
 8000b94:	08002698 	.word	0x08002698
 8000b98:	200000e0 	.word	0x200000e0
 8000b9c:	080026b4 	.word	0x080026b4
 8000ba0:	080026d4 	.word	0x080026d4
 8000ba4:	080026f8 	.word	0x080026f8
 8000ba8:	200000c8 	.word	0x200000c8
 8000bac:	08002738 	.word	0x08002738
 8000bb0:	08002764 	.word	0x08002764

08000bb4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000bb4:	b480      	push	{r7}
 8000bb6:	af00      	add	r7, sp, #0
  return 1;
 8000bb8:	2301      	movs	r3, #1
}
 8000bba:	4618      	mov	r0, r3
 8000bbc:	46bd      	mov	sp, r7
 8000bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc2:	4770      	bx	lr

08000bc4 <_kill>:

int _kill(int pid, int sig)
{
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	b082      	sub	sp, #8
 8000bc8:	af00      	add	r7, sp, #0
 8000bca:	6078      	str	r0, [r7, #4]
 8000bcc:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8000bce:	f000 fbd9 	bl	8001384 <__errno>
 8000bd2:	4603      	mov	r3, r0
 8000bd4:	2216      	movs	r2, #22
 8000bd6:	601a      	str	r2, [r3, #0]
  return -1;
 8000bd8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8000bdc:	4618      	mov	r0, r3
 8000bde:	3708      	adds	r7, #8
 8000be0:	46bd      	mov	sp, r7
 8000be2:	bd80      	pop	{r7, pc}

08000be4 <_exit>:

void _exit (int status)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	b082      	sub	sp, #8
 8000be8:	af00      	add	r7, sp, #0
 8000bea:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8000bec:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8000bf0:	6878      	ldr	r0, [r7, #4]
 8000bf2:	f7ff ffe7 	bl	8000bc4 <_kill>
  while (1) {}    /* Make sure we hang here */
 8000bf6:	bf00      	nop
 8000bf8:	e7fd      	b.n	8000bf6 <_exit+0x12>

08000bfa <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000bfa:	b580      	push	{r7, lr}
 8000bfc:	b086      	sub	sp, #24
 8000bfe:	af00      	add	r7, sp, #0
 8000c00:	60f8      	str	r0, [r7, #12]
 8000c02:	60b9      	str	r1, [r7, #8]
 8000c04:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c06:	2300      	movs	r3, #0
 8000c08:	617b      	str	r3, [r7, #20]
 8000c0a:	e00a      	b.n	8000c22 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000c0c:	f7ff fb8a 	bl	8000324 <__io_getchar>
 8000c10:	4601      	mov	r1, r0
 8000c12:	68bb      	ldr	r3, [r7, #8]
 8000c14:	1c5a      	adds	r2, r3, #1
 8000c16:	60ba      	str	r2, [r7, #8]
 8000c18:	b2ca      	uxtb	r2, r1
 8000c1a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c1c:	697b      	ldr	r3, [r7, #20]
 8000c1e:	3301      	adds	r3, #1
 8000c20:	617b      	str	r3, [r7, #20]
 8000c22:	697a      	ldr	r2, [r7, #20]
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	429a      	cmp	r2, r3
 8000c28:	dbf0      	blt.n	8000c0c <_read+0x12>
  }

  return len;
 8000c2a:	687b      	ldr	r3, [r7, #4]
}
 8000c2c:	4618      	mov	r0, r3
 8000c2e:	3718      	adds	r7, #24
 8000c30:	46bd      	mov	sp, r7
 8000c32:	bd80      	pop	{r7, pc}

08000c34 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000c34:	b580      	push	{r7, lr}
 8000c36:	b086      	sub	sp, #24
 8000c38:	af00      	add	r7, sp, #0
 8000c3a:	60f8      	str	r0, [r7, #12]
 8000c3c:	60b9      	str	r1, [r7, #8]
 8000c3e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c40:	2300      	movs	r3, #0
 8000c42:	617b      	str	r3, [r7, #20]
 8000c44:	e009      	b.n	8000c5a <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000c46:	68bb      	ldr	r3, [r7, #8]
 8000c48:	1c5a      	adds	r2, r3, #1
 8000c4a:	60ba      	str	r2, [r7, #8]
 8000c4c:	781b      	ldrb	r3, [r3, #0]
 8000c4e:	4618      	mov	r0, r3
 8000c50:	f7ff fb56 	bl	8000300 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c54:	697b      	ldr	r3, [r7, #20]
 8000c56:	3301      	adds	r3, #1
 8000c58:	617b      	str	r3, [r7, #20]
 8000c5a:	697a      	ldr	r2, [r7, #20]
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	429a      	cmp	r2, r3
 8000c60:	dbf1      	blt.n	8000c46 <_write+0x12>
  }
  return len;
 8000c62:	687b      	ldr	r3, [r7, #4]
}
 8000c64:	4618      	mov	r0, r3
 8000c66:	3718      	adds	r7, #24
 8000c68:	46bd      	mov	sp, r7
 8000c6a:	bd80      	pop	{r7, pc}

08000c6c <_close>:

int _close(int file)
{
 8000c6c:	b480      	push	{r7}
 8000c6e:	b083      	sub	sp, #12
 8000c70:	af00      	add	r7, sp, #0
 8000c72:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000c74:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8000c78:	4618      	mov	r0, r3
 8000c7a:	370c      	adds	r7, #12
 8000c7c:	46bd      	mov	sp, r7
 8000c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c82:	4770      	bx	lr

08000c84 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000c84:	b480      	push	{r7}
 8000c86:	b083      	sub	sp, #12
 8000c88:	af00      	add	r7, sp, #0
 8000c8a:	6078      	str	r0, [r7, #4]
 8000c8c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000c8e:	683b      	ldr	r3, [r7, #0]
 8000c90:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000c94:	605a      	str	r2, [r3, #4]
  return 0;
 8000c96:	2300      	movs	r3, #0
}
 8000c98:	4618      	mov	r0, r3
 8000c9a:	370c      	adds	r7, #12
 8000c9c:	46bd      	mov	sp, r7
 8000c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca2:	4770      	bx	lr

08000ca4 <_isatty>:

int _isatty(int file)
{
 8000ca4:	b480      	push	{r7}
 8000ca6:	b083      	sub	sp, #12
 8000ca8:	af00      	add	r7, sp, #0
 8000caa:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000cac:	2301      	movs	r3, #1
}
 8000cae:	4618      	mov	r0, r3
 8000cb0:	370c      	adds	r7, #12
 8000cb2:	46bd      	mov	sp, r7
 8000cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb8:	4770      	bx	lr

08000cba <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000cba:	b480      	push	{r7}
 8000cbc:	b085      	sub	sp, #20
 8000cbe:	af00      	add	r7, sp, #0
 8000cc0:	60f8      	str	r0, [r7, #12]
 8000cc2:	60b9      	str	r1, [r7, #8]
 8000cc4:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000cc6:	2300      	movs	r3, #0
}
 8000cc8:	4618      	mov	r0, r3
 8000cca:	3714      	adds	r7, #20
 8000ccc:	46bd      	mov	sp, r7
 8000cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd2:	4770      	bx	lr

08000cd4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	b086      	sub	sp, #24
 8000cd8:	af00      	add	r7, sp, #0
 8000cda:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000cdc:	4a14      	ldr	r2, [pc, #80]	@ (8000d30 <_sbrk+0x5c>)
 8000cde:	4b15      	ldr	r3, [pc, #84]	@ (8000d34 <_sbrk+0x60>)
 8000ce0:	1ad3      	subs	r3, r2, r3
 8000ce2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ce4:	697b      	ldr	r3, [r7, #20]
 8000ce6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ce8:	4b13      	ldr	r3, [pc, #76]	@ (8000d38 <_sbrk+0x64>)
 8000cea:	681b      	ldr	r3, [r3, #0]
 8000cec:	2b00      	cmp	r3, #0
 8000cee:	d102      	bne.n	8000cf6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000cf0:	4b11      	ldr	r3, [pc, #68]	@ (8000d38 <_sbrk+0x64>)
 8000cf2:	4a12      	ldr	r2, [pc, #72]	@ (8000d3c <_sbrk+0x68>)
 8000cf4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000cf6:	4b10      	ldr	r3, [pc, #64]	@ (8000d38 <_sbrk+0x64>)
 8000cf8:	681a      	ldr	r2, [r3, #0]
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	4413      	add	r3, r2
 8000cfe:	693a      	ldr	r2, [r7, #16]
 8000d00:	429a      	cmp	r2, r3
 8000d02:	d207      	bcs.n	8000d14 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000d04:	f000 fb3e 	bl	8001384 <__errno>
 8000d08:	4603      	mov	r3, r0
 8000d0a:	220c      	movs	r2, #12
 8000d0c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000d0e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000d12:	e009      	b.n	8000d28 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000d14:	4b08      	ldr	r3, [pc, #32]	@ (8000d38 <_sbrk+0x64>)
 8000d16:	681b      	ldr	r3, [r3, #0]
 8000d18:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000d1a:	4b07      	ldr	r3, [pc, #28]	@ (8000d38 <_sbrk+0x64>)
 8000d1c:	681a      	ldr	r2, [r3, #0]
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	4413      	add	r3, r2
 8000d22:	4a05      	ldr	r2, [pc, #20]	@ (8000d38 <_sbrk+0x64>)
 8000d24:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000d26:	68fb      	ldr	r3, [r7, #12]
}
 8000d28:	4618      	mov	r0, r3
 8000d2a:	3718      	adds	r7, #24
 8000d2c:	46bd      	mov	sp, r7
 8000d2e:	bd80      	pop	{r7, pc}
 8000d30:	2000a000 	.word	0x2000a000
 8000d34:	00000400 	.word	0x00000400
 8000d38:	20000128 	.word	0x20000128
 8000d3c:	20000278 	.word	0x20000278

08000d40 <SerialInitialise>:


// Initialises the specified serial port with a baud rate and optional completion function
// InitialiseSerial - Initialise the serial port
// Input: baudRate is from an enumerated set
void SerialInitialise(uint32_t baudRate, SerialPort *serial_port, void (*completion_function)(uint32_t)) {
 8000d40:	b480      	push	{r7}
 8000d42:	b087      	sub	sp, #28
 8000d44:	af00      	add	r7, sp, #0
 8000d46:	60f8      	str	r0, [r7, #12]
 8000d48:	60b9      	str	r1, [r7, #8]
 8000d4a:	607a      	str	r2, [r7, #4]

	serial_port->completion_function = completion_function; // Set the callback
 8000d4c:	68bb      	ldr	r3, [r7, #8]
 8000d4e:	687a      	ldr	r2, [r7, #4]
 8000d50:	625a      	str	r2, [r3, #36]	@ 0x24

	// Enable power interface and system configuration controller
	RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 8000d52:	4b39      	ldr	r3, [pc, #228]	@ (8000e38 <SerialInitialise+0xf8>)
 8000d54:	69db      	ldr	r3, [r3, #28]
 8000d56:	4a38      	ldr	r2, [pc, #224]	@ (8000e38 <SerialInitialise+0xf8>)
 8000d58:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000d5c:	61d3      	str	r3, [r2, #28]
	RCC->APB2ENR |= RCC_APB2ENR_SYSCFGEN;
 8000d5e:	4b36      	ldr	r3, [pc, #216]	@ (8000e38 <SerialInitialise+0xf8>)
 8000d60:	699b      	ldr	r3, [r3, #24]
 8000d62:	4a35      	ldr	r2, [pc, #212]	@ (8000e38 <SerialInitialise+0xf8>)
 8000d64:	f043 0301 	orr.w	r3, r3, #1
 8000d68:	6193      	str	r3, [r2, #24]

	// enable the GPIO which is on the AHB bus
	RCC->AHBENR |= serial_port->MaskAHBENR;
 8000d6a:	68bb      	ldr	r3, [r7, #8]
 8000d6c:	691a      	ldr	r2, [r3, #16]
 8000d6e:	4b32      	ldr	r3, [pc, #200]	@ (8000e38 <SerialInitialise+0xf8>)
 8000d70:	695b      	ldr	r3, [r3, #20]
 8000d72:	4931      	ldr	r1, [pc, #196]	@ (8000e38 <SerialInitialise+0xf8>)
 8000d74:	4313      	orrs	r3, r2
 8000d76:	614b      	str	r3, [r1, #20]

	// set pin mode to alternate function for the specific GPIO pins
	serial_port->GPIO->MODER = serial_port->SerialPinModeValue;
 8000d78:	68bb      	ldr	r3, [r7, #8]
 8000d7a:	685b      	ldr	r3, [r3, #4]
 8000d7c:	68ba      	ldr	r2, [r7, #8]
 8000d7e:	6952      	ldr	r2, [r2, #20]
 8000d80:	601a      	str	r2, [r3, #0]

	// enable high speed clock for specific GPIO pins
	serial_port->GPIO->OSPEEDR = serial_port->SerialPinSpeedValue;
 8000d82:	68bb      	ldr	r3, [r7, #8]
 8000d84:	685b      	ldr	r3, [r3, #4]
 8000d86:	68ba      	ldr	r2, [r7, #8]
 8000d88:	6992      	ldr	r2, [r2, #24]
 8000d8a:	609a      	str	r2, [r3, #8]

	// set alternate function to enable USART to external pins
	serial_port->GPIO->AFR[0] |= serial_port->SerialPinAlternatePinValueLow;
 8000d8c:	68bb      	ldr	r3, [r7, #8]
 8000d8e:	69d9      	ldr	r1, [r3, #28]
 8000d90:	68bb      	ldr	r3, [r7, #8]
 8000d92:	685b      	ldr	r3, [r3, #4]
 8000d94:	6a1a      	ldr	r2, [r3, #32]
 8000d96:	68bb      	ldr	r3, [r7, #8]
 8000d98:	685b      	ldr	r3, [r3, #4]
 8000d9a:	430a      	orrs	r2, r1
 8000d9c:	621a      	str	r2, [r3, #32]
	serial_port->GPIO->AFR[1] |= serial_port->SerialPinAlternatePinValueHigh;
 8000d9e:	68bb      	ldr	r3, [r7, #8]
 8000da0:	6a19      	ldr	r1, [r3, #32]
 8000da2:	68bb      	ldr	r3, [r7, #8]
 8000da4:	685b      	ldr	r3, [r3, #4]
 8000da6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8000da8:	68bb      	ldr	r3, [r7, #8]
 8000daa:	685b      	ldr	r3, [r3, #4]
 8000dac:	430a      	orrs	r2, r1
 8000dae:	625a      	str	r2, [r3, #36]	@ 0x24

	// enable the device based on the bits defined in the serial port definition
	RCC->APB1ENR |= serial_port->MaskAPB1ENR;
 8000db0:	68bb      	ldr	r3, [r7, #8]
 8000db2:	68da      	ldr	r2, [r3, #12]
 8000db4:	4b20      	ldr	r3, [pc, #128]	@ (8000e38 <SerialInitialise+0xf8>)
 8000db6:	69db      	ldr	r3, [r3, #28]
 8000db8:	491f      	ldr	r1, [pc, #124]	@ (8000e38 <SerialInitialise+0xf8>)
 8000dba:	4313      	orrs	r3, r2
 8000dbc:	61cb      	str	r3, [r1, #28]
	RCC->APB2ENR |= serial_port->MaskAPB2ENR;
 8000dbe:	68bb      	ldr	r3, [r7, #8]
 8000dc0:	689a      	ldr	r2, [r3, #8]
 8000dc2:	4b1d      	ldr	r3, [pc, #116]	@ (8000e38 <SerialInitialise+0xf8>)
 8000dc4:	699b      	ldr	r3, [r3, #24]
 8000dc6:	491c      	ldr	r1, [pc, #112]	@ (8000e38 <SerialInitialise+0xf8>)
 8000dc8:	4313      	orrs	r3, r2
 8000dca:	618b      	str	r3, [r1, #24]

	// Get a pointer to the 16 bits of the BRR register that we want to change
	uint16_t *baud_rate_config = (uint16_t*)&serial_port->UART->BRR; // only 16 bits used!
 8000dcc:	68bb      	ldr	r3, [r7, #8]
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	330c      	adds	r3, #12
 8000dd2:	617b      	str	r3, [r7, #20]

	// Baud rate calculation from datasheet
	switch(baudRate){
 8000dd4:	68fb      	ldr	r3, [r7, #12]
 8000dd6:	2b04      	cmp	r3, #4
 8000dd8:	d820      	bhi.n	8000e1c <SerialInitialise+0xdc>
 8000dda:	a201      	add	r2, pc, #4	@ (adr r2, 8000de0 <SerialInitialise+0xa0>)
 8000ddc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000de0:	08000df5 	.word	0x08000df5
 8000de4:	08000dfd 	.word	0x08000dfd
 8000de8:	08000e05 	.word	0x08000e05
 8000dec:	08000e0d 	.word	0x08000e0d
 8000df0:	08000e15 	.word	0x08000e15
	case BAUD_9600:
		// NEED TO FIX THIS !
		*baud_rate_config = 0x46;  // 115200 at 8MHz
 8000df4:	697b      	ldr	r3, [r7, #20]
 8000df6:	2246      	movs	r2, #70	@ 0x46
 8000df8:	801a      	strh	r2, [r3, #0]
		break;
 8000dfa:	e00f      	b.n	8000e1c <SerialInitialise+0xdc>
	case BAUD_19200:
		// NEED TO FIX THIS !
		*baud_rate_config = 0x46;  // 115200 at 8MHz
 8000dfc:	697b      	ldr	r3, [r7, #20]
 8000dfe:	2246      	movs	r2, #70	@ 0x46
 8000e00:	801a      	strh	r2, [r3, #0]
		break;
 8000e02:	e00b      	b.n	8000e1c <SerialInitialise+0xdc>
	case BAUD_38400:
		// NEED TO FIX THIS !
		*baud_rate_config = 0x46;  // 115200 at 8MHz
 8000e04:	697b      	ldr	r3, [r7, #20]
 8000e06:	2246      	movs	r2, #70	@ 0x46
 8000e08:	801a      	strh	r2, [r3, #0]
		break;
 8000e0a:	e007      	b.n	8000e1c <SerialInitialise+0xdc>
	case BAUD_57600:
		// NEED TO FIX THIS !
		*baud_rate_config = 0x46;  // 115200 at 8MHz
 8000e0c:	697b      	ldr	r3, [r7, #20]
 8000e0e:	2246      	movs	r2, #70	@ 0x46
 8000e10:	801a      	strh	r2, [r3, #0]
		break;
 8000e12:	e003      	b.n	8000e1c <SerialInitialise+0xdc>
	case BAUD_115200:
		*baud_rate_config = 0x46;  // 115200 at 8MHz
 8000e14:	697b      	ldr	r3, [r7, #20]
 8000e16:	2246      	movs	r2, #70	@ 0x46
 8000e18:	801a      	strh	r2, [r3, #0]
		break;
 8000e1a:	bf00      	nop
	}


	// enable serial port for tx and rx
	serial_port->UART->CR1 |= USART_CR1_TE | USART_CR1_RE | USART_CR1_UE;
 8000e1c:	68bb      	ldr	r3, [r7, #8]
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	681a      	ldr	r2, [r3, #0]
 8000e22:	68bb      	ldr	r3, [r7, #8]
 8000e24:	681b      	ldr	r3, [r3, #0]
 8000e26:	f042 020d 	orr.w	r2, r2, #13
 8000e2a:	601a      	str	r2, [r3, #0]
}
 8000e2c:	bf00      	nop
 8000e2e:	371c      	adds	r7, #28
 8000e30:	46bd      	mov	sp, r7
 8000e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e36:	4770      	bx	lr
 8000e38:	40021000 	.word	0x40021000

08000e3c <SerialOutputChar>:


// Sends a single byte over the USART
void SerialOutputChar(uint8_t data, SerialPort *serial_port) {
 8000e3c:	b480      	push	{r7}
 8000e3e:	b083      	sub	sp, #12
 8000e40:	af00      	add	r7, sp, #0
 8000e42:	4603      	mov	r3, r0
 8000e44:	6039      	str	r1, [r7, #0]
 8000e46:	71fb      	strb	r3, [r7, #7]

	while((serial_port->UART->ISR & USART_ISR_TXE) == 0){ // Wait until transmit buffer is empty
 8000e48:	bf00      	nop
 8000e4a:	683b      	ldr	r3, [r7, #0]
 8000e4c:	681b      	ldr	r3, [r3, #0]
 8000e4e:	69db      	ldr	r3, [r3, #28]
 8000e50:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000e54:	2b00      	cmp	r3, #0
 8000e56:	d0f8      	beq.n	8000e4a <SerialOutputChar+0xe>
	}

	serial_port->UART->TDR = data; // Write data to transmit data register
 8000e58:	683b      	ldr	r3, [r7, #0]
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	79fa      	ldrb	r2, [r7, #7]
 8000e5e:	b292      	uxth	r2, r2
 8000e60:	851a      	strh	r2, [r3, #40]	@ 0x28
}
 8000e62:	bf00      	nop
 8000e64:	370c      	adds	r7, #12
 8000e66:	46bd      	mov	sp, r7
 8000e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e6c:	4770      	bx	lr

08000e6e <SerialGetChar>:
	serial_port->completion_function(counter);
}


// Receives a single byte from the USART (blocking)
uint8_t SerialGetChar(SerialPort *serial_port) {
 8000e6e:	b480      	push	{r7}
 8000e70:	b083      	sub	sp, #12
 8000e72:	af00      	add	r7, sp, #0
 8000e74:	6078      	str	r0, [r7, #4]
	while ((serial_port->UART->ISR & USART_ISR_RXNE) == 0); // Wait until data is received
 8000e76:	bf00      	nop
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	69db      	ldr	r3, [r3, #28]
 8000e7e:	f003 0320 	and.w	r3, r3, #32
 8000e82:	2b00      	cmp	r3, #0
 8000e84:	d0f8      	beq.n	8000e78 <SerialGetChar+0xa>
	return serial_port->UART->RDR;                          // Return received byte
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	681b      	ldr	r3, [r3, #0]
 8000e8a:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8000e8c:	b29b      	uxth	r3, r3
 8000e8e:	b2db      	uxtb	r3, r3
}
 8000e90:	4618      	mov	r0, r3
 8000e92:	370c      	adds	r7, #12
 8000e94:	46bd      	mov	sp, r7
 8000e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e9a:	4770      	bx	lr

08000e9c <SerialDataAvailable>:
    }

    buffer[i] = '\0'; // Null-terminate the string
}

uint8_t SerialDataAvailable(SerialPort *serial_port) {
 8000e9c:	b480      	push	{r7}
 8000e9e:	b083      	sub	sp, #12
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	6078      	str	r0, [r7, #4]
    return (serial_port->UART->ISR & USART_ISR_RXNE) != 0;
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	69db      	ldr	r3, [r3, #28]
 8000eaa:	f003 0320 	and.w	r3, r3, #32
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	bf14      	ite	ne
 8000eb2:	2301      	movne	r3, #1
 8000eb4:	2300      	moveq	r3, #0
 8000eb6:	b2db      	uxtb	r3, r3
}
 8000eb8:	4618      	mov	r0, r3
 8000eba:	370c      	adds	r7, #12
 8000ebc:	46bd      	mov	sp, r7
 8000ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec2:	4770      	bx	lr

08000ec4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000ec4:	480d      	ldr	r0, [pc, #52]	@ (8000efc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000ec6:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000ec8:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000ecc:	480c      	ldr	r0, [pc, #48]	@ (8000f00 <LoopForever+0x6>)
  ldr r1, =_edata
 8000ece:	490d      	ldr	r1, [pc, #52]	@ (8000f04 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000ed0:	4a0d      	ldr	r2, [pc, #52]	@ (8000f08 <LoopForever+0xe>)
  movs r3, #0
 8000ed2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ed4:	e002      	b.n	8000edc <LoopCopyDataInit>

08000ed6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ed6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ed8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000eda:	3304      	adds	r3, #4

08000edc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000edc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ede:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ee0:	d3f9      	bcc.n	8000ed6 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ee2:	4a0a      	ldr	r2, [pc, #40]	@ (8000f0c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000ee4:	4c0a      	ldr	r4, [pc, #40]	@ (8000f10 <LoopForever+0x16>)
  movs r3, #0
 8000ee6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ee8:	e001      	b.n	8000eee <LoopFillZerobss>

08000eea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000eea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000eec:	3204      	adds	r2, #4

08000eee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000eee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ef0:	d3fb      	bcc.n	8000eea <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000ef2:	f000 fa4d 	bl	8001390 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000ef6:	f7ff fa4f 	bl	8000398 <main>

08000efa <LoopForever>:

LoopForever:
  b LoopForever
 8000efa:	e7fe      	b.n	8000efa <LoopForever>
  ldr   r0, =_estack
 8000efc:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 8000f00:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f04:	200000ac 	.word	0x200000ac
  ldr r2, =_sidata
 8000f08:	0800297c 	.word	0x0800297c
  ldr r2, =_sbss
 8000f0c:	200000ac 	.word	0x200000ac
  ldr r4, =_ebss
 8000f10:	20000278 	.word	0x20000278

08000f14 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000f14:	e7fe      	b.n	8000f14 <ADC1_2_IRQHandler>

08000f16 <atoi>:
 8000f16:	220a      	movs	r2, #10
 8000f18:	2100      	movs	r1, #0
 8000f1a:	f000 b98b 	b.w	8001234 <strtol>
	...

08000f20 <srand>:
 8000f20:	b538      	push	{r3, r4, r5, lr}
 8000f22:	4b10      	ldr	r3, [pc, #64]	@ (8000f64 <srand+0x44>)
 8000f24:	681d      	ldr	r5, [r3, #0]
 8000f26:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8000f28:	4604      	mov	r4, r0
 8000f2a:	b9b3      	cbnz	r3, 8000f5a <srand+0x3a>
 8000f2c:	2018      	movs	r0, #24
 8000f2e:	f000 fbb7 	bl	80016a0 <malloc>
 8000f32:	4602      	mov	r2, r0
 8000f34:	6328      	str	r0, [r5, #48]	@ 0x30
 8000f36:	b920      	cbnz	r0, 8000f42 <srand+0x22>
 8000f38:	4b0b      	ldr	r3, [pc, #44]	@ (8000f68 <srand+0x48>)
 8000f3a:	480c      	ldr	r0, [pc, #48]	@ (8000f6c <srand+0x4c>)
 8000f3c:	2146      	movs	r1, #70	@ 0x46
 8000f3e:	f000 fa4f 	bl	80013e0 <__assert_func>
 8000f42:	490b      	ldr	r1, [pc, #44]	@ (8000f70 <srand+0x50>)
 8000f44:	4b0b      	ldr	r3, [pc, #44]	@ (8000f74 <srand+0x54>)
 8000f46:	e9c0 1300 	strd	r1, r3, [r0]
 8000f4a:	4b0b      	ldr	r3, [pc, #44]	@ (8000f78 <srand+0x58>)
 8000f4c:	6083      	str	r3, [r0, #8]
 8000f4e:	230b      	movs	r3, #11
 8000f50:	8183      	strh	r3, [r0, #12]
 8000f52:	2100      	movs	r1, #0
 8000f54:	2001      	movs	r0, #1
 8000f56:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8000f5a:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	611c      	str	r4, [r3, #16]
 8000f60:	615a      	str	r2, [r3, #20]
 8000f62:	bd38      	pop	{r3, r4, r5, pc}
 8000f64:	2000005c 	.word	0x2000005c
 8000f68:	0800278b 	.word	0x0800278b
 8000f6c:	080027a2 	.word	0x080027a2
 8000f70:	abcd330e 	.word	0xabcd330e
 8000f74:	e66d1234 	.word	0xe66d1234
 8000f78:	0005deec 	.word	0x0005deec

08000f7c <rand>:
 8000f7c:	4b16      	ldr	r3, [pc, #88]	@ (8000fd8 <rand+0x5c>)
 8000f7e:	b510      	push	{r4, lr}
 8000f80:	681c      	ldr	r4, [r3, #0]
 8000f82:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8000f84:	b9b3      	cbnz	r3, 8000fb4 <rand+0x38>
 8000f86:	2018      	movs	r0, #24
 8000f88:	f000 fb8a 	bl	80016a0 <malloc>
 8000f8c:	4602      	mov	r2, r0
 8000f8e:	6320      	str	r0, [r4, #48]	@ 0x30
 8000f90:	b920      	cbnz	r0, 8000f9c <rand+0x20>
 8000f92:	4b12      	ldr	r3, [pc, #72]	@ (8000fdc <rand+0x60>)
 8000f94:	4812      	ldr	r0, [pc, #72]	@ (8000fe0 <rand+0x64>)
 8000f96:	2152      	movs	r1, #82	@ 0x52
 8000f98:	f000 fa22 	bl	80013e0 <__assert_func>
 8000f9c:	4911      	ldr	r1, [pc, #68]	@ (8000fe4 <rand+0x68>)
 8000f9e:	4b12      	ldr	r3, [pc, #72]	@ (8000fe8 <rand+0x6c>)
 8000fa0:	e9c0 1300 	strd	r1, r3, [r0]
 8000fa4:	4b11      	ldr	r3, [pc, #68]	@ (8000fec <rand+0x70>)
 8000fa6:	6083      	str	r3, [r0, #8]
 8000fa8:	230b      	movs	r3, #11
 8000faa:	8183      	strh	r3, [r0, #12]
 8000fac:	2100      	movs	r1, #0
 8000fae:	2001      	movs	r0, #1
 8000fb0:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8000fb4:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8000fb6:	480e      	ldr	r0, [pc, #56]	@ (8000ff0 <rand+0x74>)
 8000fb8:	690b      	ldr	r3, [r1, #16]
 8000fba:	694c      	ldr	r4, [r1, #20]
 8000fbc:	4a0d      	ldr	r2, [pc, #52]	@ (8000ff4 <rand+0x78>)
 8000fbe:	4358      	muls	r0, r3
 8000fc0:	fb02 0004 	mla	r0, r2, r4, r0
 8000fc4:	fba3 3202 	umull	r3, r2, r3, r2
 8000fc8:	3301      	adds	r3, #1
 8000fca:	eb40 0002 	adc.w	r0, r0, r2
 8000fce:	e9c1 3004 	strd	r3, r0, [r1, #16]
 8000fd2:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 8000fd6:	bd10      	pop	{r4, pc}
 8000fd8:	2000005c 	.word	0x2000005c
 8000fdc:	0800278b 	.word	0x0800278b
 8000fe0:	080027a2 	.word	0x080027a2
 8000fe4:	abcd330e 	.word	0xabcd330e
 8000fe8:	e66d1234 	.word	0xe66d1234
 8000fec:	0005deec 	.word	0x0005deec
 8000ff0:	5851f42d 	.word	0x5851f42d
 8000ff4:	4c957f2d 	.word	0x4c957f2d

08000ff8 <std>:
 8000ff8:	2300      	movs	r3, #0
 8000ffa:	b510      	push	{r4, lr}
 8000ffc:	4604      	mov	r4, r0
 8000ffe:	e9c0 3300 	strd	r3, r3, [r0]
 8001002:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8001006:	6083      	str	r3, [r0, #8]
 8001008:	8181      	strh	r1, [r0, #12]
 800100a:	6643      	str	r3, [r0, #100]	@ 0x64
 800100c:	81c2      	strh	r2, [r0, #14]
 800100e:	6183      	str	r3, [r0, #24]
 8001010:	4619      	mov	r1, r3
 8001012:	2208      	movs	r2, #8
 8001014:	305c      	adds	r0, #92	@ 0x5c
 8001016:	f000 f9ad 	bl	8001374 <memset>
 800101a:	4b0d      	ldr	r3, [pc, #52]	@ (8001050 <std+0x58>)
 800101c:	6263      	str	r3, [r4, #36]	@ 0x24
 800101e:	4b0d      	ldr	r3, [pc, #52]	@ (8001054 <std+0x5c>)
 8001020:	62a3      	str	r3, [r4, #40]	@ 0x28
 8001022:	4b0d      	ldr	r3, [pc, #52]	@ (8001058 <std+0x60>)
 8001024:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8001026:	4b0d      	ldr	r3, [pc, #52]	@ (800105c <std+0x64>)
 8001028:	6323      	str	r3, [r4, #48]	@ 0x30
 800102a:	4b0d      	ldr	r3, [pc, #52]	@ (8001060 <std+0x68>)
 800102c:	6224      	str	r4, [r4, #32]
 800102e:	429c      	cmp	r4, r3
 8001030:	d006      	beq.n	8001040 <std+0x48>
 8001032:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8001036:	4294      	cmp	r4, r2
 8001038:	d002      	beq.n	8001040 <std+0x48>
 800103a:	33d0      	adds	r3, #208	@ 0xd0
 800103c:	429c      	cmp	r4, r3
 800103e:	d105      	bne.n	800104c <std+0x54>
 8001040:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8001044:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001048:	f000 b9c6 	b.w	80013d8 <__retarget_lock_init_recursive>
 800104c:	bd10      	pop	{r4, pc}
 800104e:	bf00      	nop
 8001050:	08001c7d 	.word	0x08001c7d
 8001054:	08001c9f 	.word	0x08001c9f
 8001058:	08001cd7 	.word	0x08001cd7
 800105c:	08001cfb 	.word	0x08001cfb
 8001060:	2000012c 	.word	0x2000012c

08001064 <stdio_exit_handler>:
 8001064:	4a02      	ldr	r2, [pc, #8]	@ (8001070 <stdio_exit_handler+0xc>)
 8001066:	4903      	ldr	r1, [pc, #12]	@ (8001074 <stdio_exit_handler+0x10>)
 8001068:	4803      	ldr	r0, [pc, #12]	@ (8001078 <stdio_exit_handler+0x14>)
 800106a:	f000 b8ed 	b.w	8001248 <_fwalk_sglue>
 800106e:	bf00      	nop
 8001070:	20000050 	.word	0x20000050
 8001074:	08001c15 	.word	0x08001c15
 8001078:	20000060 	.word	0x20000060

0800107c <cleanup_stdio>:
 800107c:	6841      	ldr	r1, [r0, #4]
 800107e:	4b0c      	ldr	r3, [pc, #48]	@ (80010b0 <cleanup_stdio+0x34>)
 8001080:	4299      	cmp	r1, r3
 8001082:	b510      	push	{r4, lr}
 8001084:	4604      	mov	r4, r0
 8001086:	d001      	beq.n	800108c <cleanup_stdio+0x10>
 8001088:	f000 fdc4 	bl	8001c14 <_fflush_r>
 800108c:	68a1      	ldr	r1, [r4, #8]
 800108e:	4b09      	ldr	r3, [pc, #36]	@ (80010b4 <cleanup_stdio+0x38>)
 8001090:	4299      	cmp	r1, r3
 8001092:	d002      	beq.n	800109a <cleanup_stdio+0x1e>
 8001094:	4620      	mov	r0, r4
 8001096:	f000 fdbd 	bl	8001c14 <_fflush_r>
 800109a:	68e1      	ldr	r1, [r4, #12]
 800109c:	4b06      	ldr	r3, [pc, #24]	@ (80010b8 <cleanup_stdio+0x3c>)
 800109e:	4299      	cmp	r1, r3
 80010a0:	d004      	beq.n	80010ac <cleanup_stdio+0x30>
 80010a2:	4620      	mov	r0, r4
 80010a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80010a8:	f000 bdb4 	b.w	8001c14 <_fflush_r>
 80010ac:	bd10      	pop	{r4, pc}
 80010ae:	bf00      	nop
 80010b0:	2000012c 	.word	0x2000012c
 80010b4:	20000194 	.word	0x20000194
 80010b8:	200001fc 	.word	0x200001fc

080010bc <global_stdio_init.part.0>:
 80010bc:	b510      	push	{r4, lr}
 80010be:	4b0b      	ldr	r3, [pc, #44]	@ (80010ec <global_stdio_init.part.0+0x30>)
 80010c0:	4c0b      	ldr	r4, [pc, #44]	@ (80010f0 <global_stdio_init.part.0+0x34>)
 80010c2:	4a0c      	ldr	r2, [pc, #48]	@ (80010f4 <global_stdio_init.part.0+0x38>)
 80010c4:	601a      	str	r2, [r3, #0]
 80010c6:	4620      	mov	r0, r4
 80010c8:	2200      	movs	r2, #0
 80010ca:	2104      	movs	r1, #4
 80010cc:	f7ff ff94 	bl	8000ff8 <std>
 80010d0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80010d4:	2201      	movs	r2, #1
 80010d6:	2109      	movs	r1, #9
 80010d8:	f7ff ff8e 	bl	8000ff8 <std>
 80010dc:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80010e0:	2202      	movs	r2, #2
 80010e2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80010e6:	2112      	movs	r1, #18
 80010e8:	f7ff bf86 	b.w	8000ff8 <std>
 80010ec:	20000264 	.word	0x20000264
 80010f0:	2000012c 	.word	0x2000012c
 80010f4:	08001065 	.word	0x08001065

080010f8 <__sfp_lock_acquire>:
 80010f8:	4801      	ldr	r0, [pc, #4]	@ (8001100 <__sfp_lock_acquire+0x8>)
 80010fa:	f000 b96e 	b.w	80013da <__retarget_lock_acquire_recursive>
 80010fe:	bf00      	nop
 8001100:	20000269 	.word	0x20000269

08001104 <__sfp_lock_release>:
 8001104:	4801      	ldr	r0, [pc, #4]	@ (800110c <__sfp_lock_release+0x8>)
 8001106:	f000 b969 	b.w	80013dc <__retarget_lock_release_recursive>
 800110a:	bf00      	nop
 800110c:	20000269 	.word	0x20000269

08001110 <__sinit>:
 8001110:	b510      	push	{r4, lr}
 8001112:	4604      	mov	r4, r0
 8001114:	f7ff fff0 	bl	80010f8 <__sfp_lock_acquire>
 8001118:	6a23      	ldr	r3, [r4, #32]
 800111a:	b11b      	cbz	r3, 8001124 <__sinit+0x14>
 800111c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001120:	f7ff bff0 	b.w	8001104 <__sfp_lock_release>
 8001124:	4b04      	ldr	r3, [pc, #16]	@ (8001138 <__sinit+0x28>)
 8001126:	6223      	str	r3, [r4, #32]
 8001128:	4b04      	ldr	r3, [pc, #16]	@ (800113c <__sinit+0x2c>)
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	2b00      	cmp	r3, #0
 800112e:	d1f5      	bne.n	800111c <__sinit+0xc>
 8001130:	f7ff ffc4 	bl	80010bc <global_stdio_init.part.0>
 8001134:	e7f2      	b.n	800111c <__sinit+0xc>
 8001136:	bf00      	nop
 8001138:	0800107d 	.word	0x0800107d
 800113c:	20000264 	.word	0x20000264

08001140 <_strtol_l.isra.0>:
 8001140:	2b24      	cmp	r3, #36	@ 0x24
 8001142:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001146:	4686      	mov	lr, r0
 8001148:	4690      	mov	r8, r2
 800114a:	d801      	bhi.n	8001150 <_strtol_l.isra.0+0x10>
 800114c:	2b01      	cmp	r3, #1
 800114e:	d106      	bne.n	800115e <_strtol_l.isra.0+0x1e>
 8001150:	f000 f918 	bl	8001384 <__errno>
 8001154:	2316      	movs	r3, #22
 8001156:	6003      	str	r3, [r0, #0]
 8001158:	2000      	movs	r0, #0
 800115a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800115e:	4834      	ldr	r0, [pc, #208]	@ (8001230 <_strtol_l.isra.0+0xf0>)
 8001160:	460d      	mov	r5, r1
 8001162:	462a      	mov	r2, r5
 8001164:	f815 4b01 	ldrb.w	r4, [r5], #1
 8001168:	5d06      	ldrb	r6, [r0, r4]
 800116a:	f016 0608 	ands.w	r6, r6, #8
 800116e:	d1f8      	bne.n	8001162 <_strtol_l.isra.0+0x22>
 8001170:	2c2d      	cmp	r4, #45	@ 0x2d
 8001172:	d110      	bne.n	8001196 <_strtol_l.isra.0+0x56>
 8001174:	782c      	ldrb	r4, [r5, #0]
 8001176:	2601      	movs	r6, #1
 8001178:	1c95      	adds	r5, r2, #2
 800117a:	f033 0210 	bics.w	r2, r3, #16
 800117e:	d115      	bne.n	80011ac <_strtol_l.isra.0+0x6c>
 8001180:	2c30      	cmp	r4, #48	@ 0x30
 8001182:	d10d      	bne.n	80011a0 <_strtol_l.isra.0+0x60>
 8001184:	782a      	ldrb	r2, [r5, #0]
 8001186:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800118a:	2a58      	cmp	r2, #88	@ 0x58
 800118c:	d108      	bne.n	80011a0 <_strtol_l.isra.0+0x60>
 800118e:	786c      	ldrb	r4, [r5, #1]
 8001190:	3502      	adds	r5, #2
 8001192:	2310      	movs	r3, #16
 8001194:	e00a      	b.n	80011ac <_strtol_l.isra.0+0x6c>
 8001196:	2c2b      	cmp	r4, #43	@ 0x2b
 8001198:	bf04      	itt	eq
 800119a:	782c      	ldrbeq	r4, [r5, #0]
 800119c:	1c95      	addeq	r5, r2, #2
 800119e:	e7ec      	b.n	800117a <_strtol_l.isra.0+0x3a>
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d1f6      	bne.n	8001192 <_strtol_l.isra.0+0x52>
 80011a4:	2c30      	cmp	r4, #48	@ 0x30
 80011a6:	bf14      	ite	ne
 80011a8:	230a      	movne	r3, #10
 80011aa:	2308      	moveq	r3, #8
 80011ac:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 80011b0:	f10c 3cff 	add.w	ip, ip, #4294967295	@ 0xffffffff
 80011b4:	2200      	movs	r2, #0
 80011b6:	fbbc f9f3 	udiv	r9, ip, r3
 80011ba:	4610      	mov	r0, r2
 80011bc:	fb03 ca19 	mls	sl, r3, r9, ip
 80011c0:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 80011c4:	2f09      	cmp	r7, #9
 80011c6:	d80f      	bhi.n	80011e8 <_strtol_l.isra.0+0xa8>
 80011c8:	463c      	mov	r4, r7
 80011ca:	42a3      	cmp	r3, r4
 80011cc:	dd1b      	ble.n	8001206 <_strtol_l.isra.0+0xc6>
 80011ce:	1c57      	adds	r7, r2, #1
 80011d0:	d007      	beq.n	80011e2 <_strtol_l.isra.0+0xa2>
 80011d2:	4581      	cmp	r9, r0
 80011d4:	d314      	bcc.n	8001200 <_strtol_l.isra.0+0xc0>
 80011d6:	d101      	bne.n	80011dc <_strtol_l.isra.0+0x9c>
 80011d8:	45a2      	cmp	sl, r4
 80011da:	db11      	blt.n	8001200 <_strtol_l.isra.0+0xc0>
 80011dc:	fb00 4003 	mla	r0, r0, r3, r4
 80011e0:	2201      	movs	r2, #1
 80011e2:	f815 4b01 	ldrb.w	r4, [r5], #1
 80011e6:	e7eb      	b.n	80011c0 <_strtol_l.isra.0+0x80>
 80011e8:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 80011ec:	2f19      	cmp	r7, #25
 80011ee:	d801      	bhi.n	80011f4 <_strtol_l.isra.0+0xb4>
 80011f0:	3c37      	subs	r4, #55	@ 0x37
 80011f2:	e7ea      	b.n	80011ca <_strtol_l.isra.0+0x8a>
 80011f4:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 80011f8:	2f19      	cmp	r7, #25
 80011fa:	d804      	bhi.n	8001206 <_strtol_l.isra.0+0xc6>
 80011fc:	3c57      	subs	r4, #87	@ 0x57
 80011fe:	e7e4      	b.n	80011ca <_strtol_l.isra.0+0x8a>
 8001200:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001204:	e7ed      	b.n	80011e2 <_strtol_l.isra.0+0xa2>
 8001206:	1c53      	adds	r3, r2, #1
 8001208:	d108      	bne.n	800121c <_strtol_l.isra.0+0xdc>
 800120a:	2322      	movs	r3, #34	@ 0x22
 800120c:	f8ce 3000 	str.w	r3, [lr]
 8001210:	4660      	mov	r0, ip
 8001212:	f1b8 0f00 	cmp.w	r8, #0
 8001216:	d0a0      	beq.n	800115a <_strtol_l.isra.0+0x1a>
 8001218:	1e69      	subs	r1, r5, #1
 800121a:	e006      	b.n	800122a <_strtol_l.isra.0+0xea>
 800121c:	b106      	cbz	r6, 8001220 <_strtol_l.isra.0+0xe0>
 800121e:	4240      	negs	r0, r0
 8001220:	f1b8 0f00 	cmp.w	r8, #0
 8001224:	d099      	beq.n	800115a <_strtol_l.isra.0+0x1a>
 8001226:	2a00      	cmp	r2, #0
 8001228:	d1f6      	bne.n	8001218 <_strtol_l.isra.0+0xd8>
 800122a:	f8c8 1000 	str.w	r1, [r8]
 800122e:	e794      	b.n	800115a <_strtol_l.isra.0+0x1a>
 8001230:	0800286a 	.word	0x0800286a

08001234 <strtol>:
 8001234:	4613      	mov	r3, r2
 8001236:	460a      	mov	r2, r1
 8001238:	4601      	mov	r1, r0
 800123a:	4802      	ldr	r0, [pc, #8]	@ (8001244 <strtol+0x10>)
 800123c:	6800      	ldr	r0, [r0, #0]
 800123e:	f7ff bf7f 	b.w	8001140 <_strtol_l.isra.0>
 8001242:	bf00      	nop
 8001244:	2000005c 	.word	0x2000005c

08001248 <_fwalk_sglue>:
 8001248:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800124c:	4607      	mov	r7, r0
 800124e:	4688      	mov	r8, r1
 8001250:	4614      	mov	r4, r2
 8001252:	2600      	movs	r6, #0
 8001254:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8001258:	f1b9 0901 	subs.w	r9, r9, #1
 800125c:	d505      	bpl.n	800126a <_fwalk_sglue+0x22>
 800125e:	6824      	ldr	r4, [r4, #0]
 8001260:	2c00      	cmp	r4, #0
 8001262:	d1f7      	bne.n	8001254 <_fwalk_sglue+0xc>
 8001264:	4630      	mov	r0, r6
 8001266:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800126a:	89ab      	ldrh	r3, [r5, #12]
 800126c:	2b01      	cmp	r3, #1
 800126e:	d907      	bls.n	8001280 <_fwalk_sglue+0x38>
 8001270:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8001274:	3301      	adds	r3, #1
 8001276:	d003      	beq.n	8001280 <_fwalk_sglue+0x38>
 8001278:	4629      	mov	r1, r5
 800127a:	4638      	mov	r0, r7
 800127c:	47c0      	blx	r8
 800127e:	4306      	orrs	r6, r0
 8001280:	3568      	adds	r5, #104	@ 0x68
 8001282:	e7e9      	b.n	8001258 <_fwalk_sglue+0x10>

08001284 <iprintf>:
 8001284:	b40f      	push	{r0, r1, r2, r3}
 8001286:	b507      	push	{r0, r1, r2, lr}
 8001288:	4906      	ldr	r1, [pc, #24]	@ (80012a4 <iprintf+0x20>)
 800128a:	ab04      	add	r3, sp, #16
 800128c:	6808      	ldr	r0, [r1, #0]
 800128e:	f853 2b04 	ldr.w	r2, [r3], #4
 8001292:	6881      	ldr	r1, [r0, #8]
 8001294:	9301      	str	r3, [sp, #4]
 8001296:	f000 f8eb 	bl	8001470 <_vfiprintf_r>
 800129a:	b003      	add	sp, #12
 800129c:	f85d eb04 	ldr.w	lr, [sp], #4
 80012a0:	b004      	add	sp, #16
 80012a2:	4770      	bx	lr
 80012a4:	2000005c 	.word	0x2000005c

080012a8 <putchar>:
 80012a8:	4b02      	ldr	r3, [pc, #8]	@ (80012b4 <putchar+0xc>)
 80012aa:	4601      	mov	r1, r0
 80012ac:	6818      	ldr	r0, [r3, #0]
 80012ae:	6882      	ldr	r2, [r0, #8]
 80012b0:	f000 be30 	b.w	8001f14 <_putc_r>
 80012b4:	2000005c 	.word	0x2000005c

080012b8 <_puts_r>:
 80012b8:	6a03      	ldr	r3, [r0, #32]
 80012ba:	b570      	push	{r4, r5, r6, lr}
 80012bc:	6884      	ldr	r4, [r0, #8]
 80012be:	4605      	mov	r5, r0
 80012c0:	460e      	mov	r6, r1
 80012c2:	b90b      	cbnz	r3, 80012c8 <_puts_r+0x10>
 80012c4:	f7ff ff24 	bl	8001110 <__sinit>
 80012c8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80012ca:	07db      	lsls	r3, r3, #31
 80012cc:	d405      	bmi.n	80012da <_puts_r+0x22>
 80012ce:	89a3      	ldrh	r3, [r4, #12]
 80012d0:	0598      	lsls	r0, r3, #22
 80012d2:	d402      	bmi.n	80012da <_puts_r+0x22>
 80012d4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80012d6:	f000 f880 	bl	80013da <__retarget_lock_acquire_recursive>
 80012da:	89a3      	ldrh	r3, [r4, #12]
 80012dc:	0719      	lsls	r1, r3, #28
 80012de:	d502      	bpl.n	80012e6 <_puts_r+0x2e>
 80012e0:	6923      	ldr	r3, [r4, #16]
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d135      	bne.n	8001352 <_puts_r+0x9a>
 80012e6:	4621      	mov	r1, r4
 80012e8:	4628      	mov	r0, r5
 80012ea:	f000 fd5b 	bl	8001da4 <__swsetup_r>
 80012ee:	b380      	cbz	r0, 8001352 <_puts_r+0x9a>
 80012f0:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 80012f4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80012f6:	07da      	lsls	r2, r3, #31
 80012f8:	d405      	bmi.n	8001306 <_puts_r+0x4e>
 80012fa:	89a3      	ldrh	r3, [r4, #12]
 80012fc:	059b      	lsls	r3, r3, #22
 80012fe:	d402      	bmi.n	8001306 <_puts_r+0x4e>
 8001300:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8001302:	f000 f86b 	bl	80013dc <__retarget_lock_release_recursive>
 8001306:	4628      	mov	r0, r5
 8001308:	bd70      	pop	{r4, r5, r6, pc}
 800130a:	2b00      	cmp	r3, #0
 800130c:	da04      	bge.n	8001318 <_puts_r+0x60>
 800130e:	69a2      	ldr	r2, [r4, #24]
 8001310:	429a      	cmp	r2, r3
 8001312:	dc17      	bgt.n	8001344 <_puts_r+0x8c>
 8001314:	290a      	cmp	r1, #10
 8001316:	d015      	beq.n	8001344 <_puts_r+0x8c>
 8001318:	6823      	ldr	r3, [r4, #0]
 800131a:	1c5a      	adds	r2, r3, #1
 800131c:	6022      	str	r2, [r4, #0]
 800131e:	7019      	strb	r1, [r3, #0]
 8001320:	68a3      	ldr	r3, [r4, #8]
 8001322:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8001326:	3b01      	subs	r3, #1
 8001328:	60a3      	str	r3, [r4, #8]
 800132a:	2900      	cmp	r1, #0
 800132c:	d1ed      	bne.n	800130a <_puts_r+0x52>
 800132e:	2b00      	cmp	r3, #0
 8001330:	da11      	bge.n	8001356 <_puts_r+0x9e>
 8001332:	4622      	mov	r2, r4
 8001334:	210a      	movs	r1, #10
 8001336:	4628      	mov	r0, r5
 8001338:	f000 fcf6 	bl	8001d28 <__swbuf_r>
 800133c:	3001      	adds	r0, #1
 800133e:	d0d7      	beq.n	80012f0 <_puts_r+0x38>
 8001340:	250a      	movs	r5, #10
 8001342:	e7d7      	b.n	80012f4 <_puts_r+0x3c>
 8001344:	4622      	mov	r2, r4
 8001346:	4628      	mov	r0, r5
 8001348:	f000 fcee 	bl	8001d28 <__swbuf_r>
 800134c:	3001      	adds	r0, #1
 800134e:	d1e7      	bne.n	8001320 <_puts_r+0x68>
 8001350:	e7ce      	b.n	80012f0 <_puts_r+0x38>
 8001352:	3e01      	subs	r6, #1
 8001354:	e7e4      	b.n	8001320 <_puts_r+0x68>
 8001356:	6823      	ldr	r3, [r4, #0]
 8001358:	1c5a      	adds	r2, r3, #1
 800135a:	6022      	str	r2, [r4, #0]
 800135c:	220a      	movs	r2, #10
 800135e:	701a      	strb	r2, [r3, #0]
 8001360:	e7ee      	b.n	8001340 <_puts_r+0x88>
	...

08001364 <puts>:
 8001364:	4b02      	ldr	r3, [pc, #8]	@ (8001370 <puts+0xc>)
 8001366:	4601      	mov	r1, r0
 8001368:	6818      	ldr	r0, [r3, #0]
 800136a:	f7ff bfa5 	b.w	80012b8 <_puts_r>
 800136e:	bf00      	nop
 8001370:	2000005c 	.word	0x2000005c

08001374 <memset>:
 8001374:	4402      	add	r2, r0
 8001376:	4603      	mov	r3, r0
 8001378:	4293      	cmp	r3, r2
 800137a:	d100      	bne.n	800137e <memset+0xa>
 800137c:	4770      	bx	lr
 800137e:	f803 1b01 	strb.w	r1, [r3], #1
 8001382:	e7f9      	b.n	8001378 <memset+0x4>

08001384 <__errno>:
 8001384:	4b01      	ldr	r3, [pc, #4]	@ (800138c <__errno+0x8>)
 8001386:	6818      	ldr	r0, [r3, #0]
 8001388:	4770      	bx	lr
 800138a:	bf00      	nop
 800138c:	2000005c 	.word	0x2000005c

08001390 <__libc_init_array>:
 8001390:	b570      	push	{r4, r5, r6, lr}
 8001392:	4d0d      	ldr	r5, [pc, #52]	@ (80013c8 <__libc_init_array+0x38>)
 8001394:	4c0d      	ldr	r4, [pc, #52]	@ (80013cc <__libc_init_array+0x3c>)
 8001396:	1b64      	subs	r4, r4, r5
 8001398:	10a4      	asrs	r4, r4, #2
 800139a:	2600      	movs	r6, #0
 800139c:	42a6      	cmp	r6, r4
 800139e:	d109      	bne.n	80013b4 <__libc_init_array+0x24>
 80013a0:	4d0b      	ldr	r5, [pc, #44]	@ (80013d0 <__libc_init_array+0x40>)
 80013a2:	4c0c      	ldr	r4, [pc, #48]	@ (80013d4 <__libc_init_array+0x44>)
 80013a4:	f000 fef8 	bl	8002198 <_init>
 80013a8:	1b64      	subs	r4, r4, r5
 80013aa:	10a4      	asrs	r4, r4, #2
 80013ac:	2600      	movs	r6, #0
 80013ae:	42a6      	cmp	r6, r4
 80013b0:	d105      	bne.n	80013be <__libc_init_array+0x2e>
 80013b2:	bd70      	pop	{r4, r5, r6, pc}
 80013b4:	f855 3b04 	ldr.w	r3, [r5], #4
 80013b8:	4798      	blx	r3
 80013ba:	3601      	adds	r6, #1
 80013bc:	e7ee      	b.n	800139c <__libc_init_array+0xc>
 80013be:	f855 3b04 	ldr.w	r3, [r5], #4
 80013c2:	4798      	blx	r3
 80013c4:	3601      	adds	r6, #1
 80013c6:	e7f2      	b.n	80013ae <__libc_init_array+0x1e>
 80013c8:	08002974 	.word	0x08002974
 80013cc:	08002974 	.word	0x08002974
 80013d0:	08002974 	.word	0x08002974
 80013d4:	08002978 	.word	0x08002978

080013d8 <__retarget_lock_init_recursive>:
 80013d8:	4770      	bx	lr

080013da <__retarget_lock_acquire_recursive>:
 80013da:	4770      	bx	lr

080013dc <__retarget_lock_release_recursive>:
 80013dc:	4770      	bx	lr
	...

080013e0 <__assert_func>:
 80013e0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80013e2:	4614      	mov	r4, r2
 80013e4:	461a      	mov	r2, r3
 80013e6:	4b09      	ldr	r3, [pc, #36]	@ (800140c <__assert_func+0x2c>)
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	4605      	mov	r5, r0
 80013ec:	68d8      	ldr	r0, [r3, #12]
 80013ee:	b14c      	cbz	r4, 8001404 <__assert_func+0x24>
 80013f0:	4b07      	ldr	r3, [pc, #28]	@ (8001410 <__assert_func+0x30>)
 80013f2:	9100      	str	r1, [sp, #0]
 80013f4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80013f8:	4906      	ldr	r1, [pc, #24]	@ (8001414 <__assert_func+0x34>)
 80013fa:	462b      	mov	r3, r5
 80013fc:	f000 fc82 	bl	8001d04 <fiprintf>
 8001400:	f000 fe34 	bl	800206c <abort>
 8001404:	4b04      	ldr	r3, [pc, #16]	@ (8001418 <__assert_func+0x38>)
 8001406:	461c      	mov	r4, r3
 8001408:	e7f3      	b.n	80013f2 <__assert_func+0x12>
 800140a:	bf00      	nop
 800140c:	2000005c 	.word	0x2000005c
 8001410:	080027fa 	.word	0x080027fa
 8001414:	08002807 	.word	0x08002807
 8001418:	08002835 	.word	0x08002835

0800141c <__sfputc_r>:
 800141c:	6893      	ldr	r3, [r2, #8]
 800141e:	3b01      	subs	r3, #1
 8001420:	2b00      	cmp	r3, #0
 8001422:	b410      	push	{r4}
 8001424:	6093      	str	r3, [r2, #8]
 8001426:	da08      	bge.n	800143a <__sfputc_r+0x1e>
 8001428:	6994      	ldr	r4, [r2, #24]
 800142a:	42a3      	cmp	r3, r4
 800142c:	db01      	blt.n	8001432 <__sfputc_r+0x16>
 800142e:	290a      	cmp	r1, #10
 8001430:	d103      	bne.n	800143a <__sfputc_r+0x1e>
 8001432:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001436:	f000 bc77 	b.w	8001d28 <__swbuf_r>
 800143a:	6813      	ldr	r3, [r2, #0]
 800143c:	1c58      	adds	r0, r3, #1
 800143e:	6010      	str	r0, [r2, #0]
 8001440:	7019      	strb	r1, [r3, #0]
 8001442:	4608      	mov	r0, r1
 8001444:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001448:	4770      	bx	lr

0800144a <__sfputs_r>:
 800144a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800144c:	4606      	mov	r6, r0
 800144e:	460f      	mov	r7, r1
 8001450:	4614      	mov	r4, r2
 8001452:	18d5      	adds	r5, r2, r3
 8001454:	42ac      	cmp	r4, r5
 8001456:	d101      	bne.n	800145c <__sfputs_r+0x12>
 8001458:	2000      	movs	r0, #0
 800145a:	e007      	b.n	800146c <__sfputs_r+0x22>
 800145c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001460:	463a      	mov	r2, r7
 8001462:	4630      	mov	r0, r6
 8001464:	f7ff ffda 	bl	800141c <__sfputc_r>
 8001468:	1c43      	adds	r3, r0, #1
 800146a:	d1f3      	bne.n	8001454 <__sfputs_r+0xa>
 800146c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08001470 <_vfiprintf_r>:
 8001470:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001474:	460d      	mov	r5, r1
 8001476:	b09d      	sub	sp, #116	@ 0x74
 8001478:	4614      	mov	r4, r2
 800147a:	4698      	mov	r8, r3
 800147c:	4606      	mov	r6, r0
 800147e:	b118      	cbz	r0, 8001488 <_vfiprintf_r+0x18>
 8001480:	6a03      	ldr	r3, [r0, #32]
 8001482:	b90b      	cbnz	r3, 8001488 <_vfiprintf_r+0x18>
 8001484:	f7ff fe44 	bl	8001110 <__sinit>
 8001488:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800148a:	07d9      	lsls	r1, r3, #31
 800148c:	d405      	bmi.n	800149a <_vfiprintf_r+0x2a>
 800148e:	89ab      	ldrh	r3, [r5, #12]
 8001490:	059a      	lsls	r2, r3, #22
 8001492:	d402      	bmi.n	800149a <_vfiprintf_r+0x2a>
 8001494:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8001496:	f7ff ffa0 	bl	80013da <__retarget_lock_acquire_recursive>
 800149a:	89ab      	ldrh	r3, [r5, #12]
 800149c:	071b      	lsls	r3, r3, #28
 800149e:	d501      	bpl.n	80014a4 <_vfiprintf_r+0x34>
 80014a0:	692b      	ldr	r3, [r5, #16]
 80014a2:	b99b      	cbnz	r3, 80014cc <_vfiprintf_r+0x5c>
 80014a4:	4629      	mov	r1, r5
 80014a6:	4630      	mov	r0, r6
 80014a8:	f000 fc7c 	bl	8001da4 <__swsetup_r>
 80014ac:	b170      	cbz	r0, 80014cc <_vfiprintf_r+0x5c>
 80014ae:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80014b0:	07dc      	lsls	r4, r3, #31
 80014b2:	d504      	bpl.n	80014be <_vfiprintf_r+0x4e>
 80014b4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80014b8:	b01d      	add	sp, #116	@ 0x74
 80014ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80014be:	89ab      	ldrh	r3, [r5, #12]
 80014c0:	0598      	lsls	r0, r3, #22
 80014c2:	d4f7      	bmi.n	80014b4 <_vfiprintf_r+0x44>
 80014c4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80014c6:	f7ff ff89 	bl	80013dc <__retarget_lock_release_recursive>
 80014ca:	e7f3      	b.n	80014b4 <_vfiprintf_r+0x44>
 80014cc:	2300      	movs	r3, #0
 80014ce:	9309      	str	r3, [sp, #36]	@ 0x24
 80014d0:	2320      	movs	r3, #32
 80014d2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80014d6:	f8cd 800c 	str.w	r8, [sp, #12]
 80014da:	2330      	movs	r3, #48	@ 0x30
 80014dc:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800168c <_vfiprintf_r+0x21c>
 80014e0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80014e4:	f04f 0901 	mov.w	r9, #1
 80014e8:	4623      	mov	r3, r4
 80014ea:	469a      	mov	sl, r3
 80014ec:	f813 2b01 	ldrb.w	r2, [r3], #1
 80014f0:	b10a      	cbz	r2, 80014f6 <_vfiprintf_r+0x86>
 80014f2:	2a25      	cmp	r2, #37	@ 0x25
 80014f4:	d1f9      	bne.n	80014ea <_vfiprintf_r+0x7a>
 80014f6:	ebba 0b04 	subs.w	fp, sl, r4
 80014fa:	d00b      	beq.n	8001514 <_vfiprintf_r+0xa4>
 80014fc:	465b      	mov	r3, fp
 80014fe:	4622      	mov	r2, r4
 8001500:	4629      	mov	r1, r5
 8001502:	4630      	mov	r0, r6
 8001504:	f7ff ffa1 	bl	800144a <__sfputs_r>
 8001508:	3001      	adds	r0, #1
 800150a:	f000 80a7 	beq.w	800165c <_vfiprintf_r+0x1ec>
 800150e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8001510:	445a      	add	r2, fp
 8001512:	9209      	str	r2, [sp, #36]	@ 0x24
 8001514:	f89a 3000 	ldrb.w	r3, [sl]
 8001518:	2b00      	cmp	r3, #0
 800151a:	f000 809f 	beq.w	800165c <_vfiprintf_r+0x1ec>
 800151e:	2300      	movs	r3, #0
 8001520:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001524:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8001528:	f10a 0a01 	add.w	sl, sl, #1
 800152c:	9304      	str	r3, [sp, #16]
 800152e:	9307      	str	r3, [sp, #28]
 8001530:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8001534:	931a      	str	r3, [sp, #104]	@ 0x68
 8001536:	4654      	mov	r4, sl
 8001538:	2205      	movs	r2, #5
 800153a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800153e:	4853      	ldr	r0, [pc, #332]	@ (800168c <_vfiprintf_r+0x21c>)
 8001540:	f7fe fe5e 	bl	8000200 <memchr>
 8001544:	9a04      	ldr	r2, [sp, #16]
 8001546:	b9d8      	cbnz	r0, 8001580 <_vfiprintf_r+0x110>
 8001548:	06d1      	lsls	r1, r2, #27
 800154a:	bf44      	itt	mi
 800154c:	2320      	movmi	r3, #32
 800154e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8001552:	0713      	lsls	r3, r2, #28
 8001554:	bf44      	itt	mi
 8001556:	232b      	movmi	r3, #43	@ 0x2b
 8001558:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800155c:	f89a 3000 	ldrb.w	r3, [sl]
 8001560:	2b2a      	cmp	r3, #42	@ 0x2a
 8001562:	d015      	beq.n	8001590 <_vfiprintf_r+0x120>
 8001564:	9a07      	ldr	r2, [sp, #28]
 8001566:	4654      	mov	r4, sl
 8001568:	2000      	movs	r0, #0
 800156a:	f04f 0c0a 	mov.w	ip, #10
 800156e:	4621      	mov	r1, r4
 8001570:	f811 3b01 	ldrb.w	r3, [r1], #1
 8001574:	3b30      	subs	r3, #48	@ 0x30
 8001576:	2b09      	cmp	r3, #9
 8001578:	d94b      	bls.n	8001612 <_vfiprintf_r+0x1a2>
 800157a:	b1b0      	cbz	r0, 80015aa <_vfiprintf_r+0x13a>
 800157c:	9207      	str	r2, [sp, #28]
 800157e:	e014      	b.n	80015aa <_vfiprintf_r+0x13a>
 8001580:	eba0 0308 	sub.w	r3, r0, r8
 8001584:	fa09 f303 	lsl.w	r3, r9, r3
 8001588:	4313      	orrs	r3, r2
 800158a:	9304      	str	r3, [sp, #16]
 800158c:	46a2      	mov	sl, r4
 800158e:	e7d2      	b.n	8001536 <_vfiprintf_r+0xc6>
 8001590:	9b03      	ldr	r3, [sp, #12]
 8001592:	1d19      	adds	r1, r3, #4
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	9103      	str	r1, [sp, #12]
 8001598:	2b00      	cmp	r3, #0
 800159a:	bfbb      	ittet	lt
 800159c:	425b      	neglt	r3, r3
 800159e:	f042 0202 	orrlt.w	r2, r2, #2
 80015a2:	9307      	strge	r3, [sp, #28]
 80015a4:	9307      	strlt	r3, [sp, #28]
 80015a6:	bfb8      	it	lt
 80015a8:	9204      	strlt	r2, [sp, #16]
 80015aa:	7823      	ldrb	r3, [r4, #0]
 80015ac:	2b2e      	cmp	r3, #46	@ 0x2e
 80015ae:	d10a      	bne.n	80015c6 <_vfiprintf_r+0x156>
 80015b0:	7863      	ldrb	r3, [r4, #1]
 80015b2:	2b2a      	cmp	r3, #42	@ 0x2a
 80015b4:	d132      	bne.n	800161c <_vfiprintf_r+0x1ac>
 80015b6:	9b03      	ldr	r3, [sp, #12]
 80015b8:	1d1a      	adds	r2, r3, #4
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	9203      	str	r2, [sp, #12]
 80015be:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80015c2:	3402      	adds	r4, #2
 80015c4:	9305      	str	r3, [sp, #20]
 80015c6:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800169c <_vfiprintf_r+0x22c>
 80015ca:	7821      	ldrb	r1, [r4, #0]
 80015cc:	2203      	movs	r2, #3
 80015ce:	4650      	mov	r0, sl
 80015d0:	f7fe fe16 	bl	8000200 <memchr>
 80015d4:	b138      	cbz	r0, 80015e6 <_vfiprintf_r+0x176>
 80015d6:	9b04      	ldr	r3, [sp, #16]
 80015d8:	eba0 000a 	sub.w	r0, r0, sl
 80015dc:	2240      	movs	r2, #64	@ 0x40
 80015de:	4082      	lsls	r2, r0
 80015e0:	4313      	orrs	r3, r2
 80015e2:	3401      	adds	r4, #1
 80015e4:	9304      	str	r3, [sp, #16]
 80015e6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80015ea:	4829      	ldr	r0, [pc, #164]	@ (8001690 <_vfiprintf_r+0x220>)
 80015ec:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80015f0:	2206      	movs	r2, #6
 80015f2:	f7fe fe05 	bl	8000200 <memchr>
 80015f6:	2800      	cmp	r0, #0
 80015f8:	d03f      	beq.n	800167a <_vfiprintf_r+0x20a>
 80015fa:	4b26      	ldr	r3, [pc, #152]	@ (8001694 <_vfiprintf_r+0x224>)
 80015fc:	bb1b      	cbnz	r3, 8001646 <_vfiprintf_r+0x1d6>
 80015fe:	9b03      	ldr	r3, [sp, #12]
 8001600:	3307      	adds	r3, #7
 8001602:	f023 0307 	bic.w	r3, r3, #7
 8001606:	3308      	adds	r3, #8
 8001608:	9303      	str	r3, [sp, #12]
 800160a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800160c:	443b      	add	r3, r7
 800160e:	9309      	str	r3, [sp, #36]	@ 0x24
 8001610:	e76a      	b.n	80014e8 <_vfiprintf_r+0x78>
 8001612:	fb0c 3202 	mla	r2, ip, r2, r3
 8001616:	460c      	mov	r4, r1
 8001618:	2001      	movs	r0, #1
 800161a:	e7a8      	b.n	800156e <_vfiprintf_r+0xfe>
 800161c:	2300      	movs	r3, #0
 800161e:	3401      	adds	r4, #1
 8001620:	9305      	str	r3, [sp, #20]
 8001622:	4619      	mov	r1, r3
 8001624:	f04f 0c0a 	mov.w	ip, #10
 8001628:	4620      	mov	r0, r4
 800162a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800162e:	3a30      	subs	r2, #48	@ 0x30
 8001630:	2a09      	cmp	r2, #9
 8001632:	d903      	bls.n	800163c <_vfiprintf_r+0x1cc>
 8001634:	2b00      	cmp	r3, #0
 8001636:	d0c6      	beq.n	80015c6 <_vfiprintf_r+0x156>
 8001638:	9105      	str	r1, [sp, #20]
 800163a:	e7c4      	b.n	80015c6 <_vfiprintf_r+0x156>
 800163c:	fb0c 2101 	mla	r1, ip, r1, r2
 8001640:	4604      	mov	r4, r0
 8001642:	2301      	movs	r3, #1
 8001644:	e7f0      	b.n	8001628 <_vfiprintf_r+0x1b8>
 8001646:	ab03      	add	r3, sp, #12
 8001648:	9300      	str	r3, [sp, #0]
 800164a:	462a      	mov	r2, r5
 800164c:	4b12      	ldr	r3, [pc, #72]	@ (8001698 <_vfiprintf_r+0x228>)
 800164e:	a904      	add	r1, sp, #16
 8001650:	4630      	mov	r0, r6
 8001652:	f3af 8000 	nop.w
 8001656:	4607      	mov	r7, r0
 8001658:	1c78      	adds	r0, r7, #1
 800165a:	d1d6      	bne.n	800160a <_vfiprintf_r+0x19a>
 800165c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800165e:	07d9      	lsls	r1, r3, #31
 8001660:	d405      	bmi.n	800166e <_vfiprintf_r+0x1fe>
 8001662:	89ab      	ldrh	r3, [r5, #12]
 8001664:	059a      	lsls	r2, r3, #22
 8001666:	d402      	bmi.n	800166e <_vfiprintf_r+0x1fe>
 8001668:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800166a:	f7ff feb7 	bl	80013dc <__retarget_lock_release_recursive>
 800166e:	89ab      	ldrh	r3, [r5, #12]
 8001670:	065b      	lsls	r3, r3, #25
 8001672:	f53f af1f 	bmi.w	80014b4 <_vfiprintf_r+0x44>
 8001676:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8001678:	e71e      	b.n	80014b8 <_vfiprintf_r+0x48>
 800167a:	ab03      	add	r3, sp, #12
 800167c:	9300      	str	r3, [sp, #0]
 800167e:	462a      	mov	r2, r5
 8001680:	4b05      	ldr	r3, [pc, #20]	@ (8001698 <_vfiprintf_r+0x228>)
 8001682:	a904      	add	r1, sp, #16
 8001684:	4630      	mov	r0, r6
 8001686:	f000 f923 	bl	80018d0 <_printf_i>
 800168a:	e7e4      	b.n	8001656 <_vfiprintf_r+0x1e6>
 800168c:	08002836 	.word	0x08002836
 8001690:	08002840 	.word	0x08002840
 8001694:	00000000 	.word	0x00000000
 8001698:	0800144b 	.word	0x0800144b
 800169c:	0800283c 	.word	0x0800283c

080016a0 <malloc>:
 80016a0:	4b02      	ldr	r3, [pc, #8]	@ (80016ac <malloc+0xc>)
 80016a2:	4601      	mov	r1, r0
 80016a4:	6818      	ldr	r0, [r3, #0]
 80016a6:	f000 b825 	b.w	80016f4 <_malloc_r>
 80016aa:	bf00      	nop
 80016ac:	2000005c 	.word	0x2000005c

080016b0 <sbrk_aligned>:
 80016b0:	b570      	push	{r4, r5, r6, lr}
 80016b2:	4e0f      	ldr	r6, [pc, #60]	@ (80016f0 <sbrk_aligned+0x40>)
 80016b4:	460c      	mov	r4, r1
 80016b6:	6831      	ldr	r1, [r6, #0]
 80016b8:	4605      	mov	r5, r0
 80016ba:	b911      	cbnz	r1, 80016c2 <sbrk_aligned+0x12>
 80016bc:	f000 fc92 	bl	8001fe4 <_sbrk_r>
 80016c0:	6030      	str	r0, [r6, #0]
 80016c2:	4621      	mov	r1, r4
 80016c4:	4628      	mov	r0, r5
 80016c6:	f000 fc8d 	bl	8001fe4 <_sbrk_r>
 80016ca:	1c43      	adds	r3, r0, #1
 80016cc:	d103      	bne.n	80016d6 <sbrk_aligned+0x26>
 80016ce:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 80016d2:	4620      	mov	r0, r4
 80016d4:	bd70      	pop	{r4, r5, r6, pc}
 80016d6:	1cc4      	adds	r4, r0, #3
 80016d8:	f024 0403 	bic.w	r4, r4, #3
 80016dc:	42a0      	cmp	r0, r4
 80016de:	d0f8      	beq.n	80016d2 <sbrk_aligned+0x22>
 80016e0:	1a21      	subs	r1, r4, r0
 80016e2:	4628      	mov	r0, r5
 80016e4:	f000 fc7e 	bl	8001fe4 <_sbrk_r>
 80016e8:	3001      	adds	r0, #1
 80016ea:	d1f2      	bne.n	80016d2 <sbrk_aligned+0x22>
 80016ec:	e7ef      	b.n	80016ce <sbrk_aligned+0x1e>
 80016ee:	bf00      	nop
 80016f0:	2000026c 	.word	0x2000026c

080016f4 <_malloc_r>:
 80016f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80016f8:	1ccd      	adds	r5, r1, #3
 80016fa:	f025 0503 	bic.w	r5, r5, #3
 80016fe:	3508      	adds	r5, #8
 8001700:	2d0c      	cmp	r5, #12
 8001702:	bf38      	it	cc
 8001704:	250c      	movcc	r5, #12
 8001706:	2d00      	cmp	r5, #0
 8001708:	4606      	mov	r6, r0
 800170a:	db01      	blt.n	8001710 <_malloc_r+0x1c>
 800170c:	42a9      	cmp	r1, r5
 800170e:	d904      	bls.n	800171a <_malloc_r+0x26>
 8001710:	230c      	movs	r3, #12
 8001712:	6033      	str	r3, [r6, #0]
 8001714:	2000      	movs	r0, #0
 8001716:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800171a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80017f0 <_malloc_r+0xfc>
 800171e:	f000 faa1 	bl	8001c64 <__malloc_lock>
 8001722:	f8d8 3000 	ldr.w	r3, [r8]
 8001726:	461c      	mov	r4, r3
 8001728:	bb44      	cbnz	r4, 800177c <_malloc_r+0x88>
 800172a:	4629      	mov	r1, r5
 800172c:	4630      	mov	r0, r6
 800172e:	f7ff ffbf 	bl	80016b0 <sbrk_aligned>
 8001732:	1c43      	adds	r3, r0, #1
 8001734:	4604      	mov	r4, r0
 8001736:	d158      	bne.n	80017ea <_malloc_r+0xf6>
 8001738:	f8d8 4000 	ldr.w	r4, [r8]
 800173c:	4627      	mov	r7, r4
 800173e:	2f00      	cmp	r7, #0
 8001740:	d143      	bne.n	80017ca <_malloc_r+0xd6>
 8001742:	2c00      	cmp	r4, #0
 8001744:	d04b      	beq.n	80017de <_malloc_r+0xea>
 8001746:	6823      	ldr	r3, [r4, #0]
 8001748:	4639      	mov	r1, r7
 800174a:	4630      	mov	r0, r6
 800174c:	eb04 0903 	add.w	r9, r4, r3
 8001750:	f000 fc48 	bl	8001fe4 <_sbrk_r>
 8001754:	4581      	cmp	r9, r0
 8001756:	d142      	bne.n	80017de <_malloc_r+0xea>
 8001758:	6821      	ldr	r1, [r4, #0]
 800175a:	1a6d      	subs	r5, r5, r1
 800175c:	4629      	mov	r1, r5
 800175e:	4630      	mov	r0, r6
 8001760:	f7ff ffa6 	bl	80016b0 <sbrk_aligned>
 8001764:	3001      	adds	r0, #1
 8001766:	d03a      	beq.n	80017de <_malloc_r+0xea>
 8001768:	6823      	ldr	r3, [r4, #0]
 800176a:	442b      	add	r3, r5
 800176c:	6023      	str	r3, [r4, #0]
 800176e:	f8d8 3000 	ldr.w	r3, [r8]
 8001772:	685a      	ldr	r2, [r3, #4]
 8001774:	bb62      	cbnz	r2, 80017d0 <_malloc_r+0xdc>
 8001776:	f8c8 7000 	str.w	r7, [r8]
 800177a:	e00f      	b.n	800179c <_malloc_r+0xa8>
 800177c:	6822      	ldr	r2, [r4, #0]
 800177e:	1b52      	subs	r2, r2, r5
 8001780:	d420      	bmi.n	80017c4 <_malloc_r+0xd0>
 8001782:	2a0b      	cmp	r2, #11
 8001784:	d917      	bls.n	80017b6 <_malloc_r+0xc2>
 8001786:	1961      	adds	r1, r4, r5
 8001788:	42a3      	cmp	r3, r4
 800178a:	6025      	str	r5, [r4, #0]
 800178c:	bf18      	it	ne
 800178e:	6059      	strne	r1, [r3, #4]
 8001790:	6863      	ldr	r3, [r4, #4]
 8001792:	bf08      	it	eq
 8001794:	f8c8 1000 	streq.w	r1, [r8]
 8001798:	5162      	str	r2, [r4, r5]
 800179a:	604b      	str	r3, [r1, #4]
 800179c:	4630      	mov	r0, r6
 800179e:	f000 fa67 	bl	8001c70 <__malloc_unlock>
 80017a2:	f104 000b 	add.w	r0, r4, #11
 80017a6:	1d23      	adds	r3, r4, #4
 80017a8:	f020 0007 	bic.w	r0, r0, #7
 80017ac:	1ac2      	subs	r2, r0, r3
 80017ae:	bf1c      	itt	ne
 80017b0:	1a1b      	subne	r3, r3, r0
 80017b2:	50a3      	strne	r3, [r4, r2]
 80017b4:	e7af      	b.n	8001716 <_malloc_r+0x22>
 80017b6:	6862      	ldr	r2, [r4, #4]
 80017b8:	42a3      	cmp	r3, r4
 80017ba:	bf0c      	ite	eq
 80017bc:	f8c8 2000 	streq.w	r2, [r8]
 80017c0:	605a      	strne	r2, [r3, #4]
 80017c2:	e7eb      	b.n	800179c <_malloc_r+0xa8>
 80017c4:	4623      	mov	r3, r4
 80017c6:	6864      	ldr	r4, [r4, #4]
 80017c8:	e7ae      	b.n	8001728 <_malloc_r+0x34>
 80017ca:	463c      	mov	r4, r7
 80017cc:	687f      	ldr	r7, [r7, #4]
 80017ce:	e7b6      	b.n	800173e <_malloc_r+0x4a>
 80017d0:	461a      	mov	r2, r3
 80017d2:	685b      	ldr	r3, [r3, #4]
 80017d4:	42a3      	cmp	r3, r4
 80017d6:	d1fb      	bne.n	80017d0 <_malloc_r+0xdc>
 80017d8:	2300      	movs	r3, #0
 80017da:	6053      	str	r3, [r2, #4]
 80017dc:	e7de      	b.n	800179c <_malloc_r+0xa8>
 80017de:	230c      	movs	r3, #12
 80017e0:	6033      	str	r3, [r6, #0]
 80017e2:	4630      	mov	r0, r6
 80017e4:	f000 fa44 	bl	8001c70 <__malloc_unlock>
 80017e8:	e794      	b.n	8001714 <_malloc_r+0x20>
 80017ea:	6005      	str	r5, [r0, #0]
 80017ec:	e7d6      	b.n	800179c <_malloc_r+0xa8>
 80017ee:	bf00      	nop
 80017f0:	20000270 	.word	0x20000270

080017f4 <_printf_common>:
 80017f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80017f8:	4616      	mov	r6, r2
 80017fa:	4698      	mov	r8, r3
 80017fc:	688a      	ldr	r2, [r1, #8]
 80017fe:	690b      	ldr	r3, [r1, #16]
 8001800:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8001804:	4293      	cmp	r3, r2
 8001806:	bfb8      	it	lt
 8001808:	4613      	movlt	r3, r2
 800180a:	6033      	str	r3, [r6, #0]
 800180c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8001810:	4607      	mov	r7, r0
 8001812:	460c      	mov	r4, r1
 8001814:	b10a      	cbz	r2, 800181a <_printf_common+0x26>
 8001816:	3301      	adds	r3, #1
 8001818:	6033      	str	r3, [r6, #0]
 800181a:	6823      	ldr	r3, [r4, #0]
 800181c:	0699      	lsls	r1, r3, #26
 800181e:	bf42      	ittt	mi
 8001820:	6833      	ldrmi	r3, [r6, #0]
 8001822:	3302      	addmi	r3, #2
 8001824:	6033      	strmi	r3, [r6, #0]
 8001826:	6825      	ldr	r5, [r4, #0]
 8001828:	f015 0506 	ands.w	r5, r5, #6
 800182c:	d106      	bne.n	800183c <_printf_common+0x48>
 800182e:	f104 0a19 	add.w	sl, r4, #25
 8001832:	68e3      	ldr	r3, [r4, #12]
 8001834:	6832      	ldr	r2, [r6, #0]
 8001836:	1a9b      	subs	r3, r3, r2
 8001838:	42ab      	cmp	r3, r5
 800183a:	dc26      	bgt.n	800188a <_printf_common+0x96>
 800183c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8001840:	6822      	ldr	r2, [r4, #0]
 8001842:	3b00      	subs	r3, #0
 8001844:	bf18      	it	ne
 8001846:	2301      	movne	r3, #1
 8001848:	0692      	lsls	r2, r2, #26
 800184a:	d42b      	bmi.n	80018a4 <_printf_common+0xb0>
 800184c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8001850:	4641      	mov	r1, r8
 8001852:	4638      	mov	r0, r7
 8001854:	47c8      	blx	r9
 8001856:	3001      	adds	r0, #1
 8001858:	d01e      	beq.n	8001898 <_printf_common+0xa4>
 800185a:	6823      	ldr	r3, [r4, #0]
 800185c:	6922      	ldr	r2, [r4, #16]
 800185e:	f003 0306 	and.w	r3, r3, #6
 8001862:	2b04      	cmp	r3, #4
 8001864:	bf02      	ittt	eq
 8001866:	68e5      	ldreq	r5, [r4, #12]
 8001868:	6833      	ldreq	r3, [r6, #0]
 800186a:	1aed      	subeq	r5, r5, r3
 800186c:	68a3      	ldr	r3, [r4, #8]
 800186e:	bf0c      	ite	eq
 8001870:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8001874:	2500      	movne	r5, #0
 8001876:	4293      	cmp	r3, r2
 8001878:	bfc4      	itt	gt
 800187a:	1a9b      	subgt	r3, r3, r2
 800187c:	18ed      	addgt	r5, r5, r3
 800187e:	2600      	movs	r6, #0
 8001880:	341a      	adds	r4, #26
 8001882:	42b5      	cmp	r5, r6
 8001884:	d11a      	bne.n	80018bc <_printf_common+0xc8>
 8001886:	2000      	movs	r0, #0
 8001888:	e008      	b.n	800189c <_printf_common+0xa8>
 800188a:	2301      	movs	r3, #1
 800188c:	4652      	mov	r2, sl
 800188e:	4641      	mov	r1, r8
 8001890:	4638      	mov	r0, r7
 8001892:	47c8      	blx	r9
 8001894:	3001      	adds	r0, #1
 8001896:	d103      	bne.n	80018a0 <_printf_common+0xac>
 8001898:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800189c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80018a0:	3501      	adds	r5, #1
 80018a2:	e7c6      	b.n	8001832 <_printf_common+0x3e>
 80018a4:	18e1      	adds	r1, r4, r3
 80018a6:	1c5a      	adds	r2, r3, #1
 80018a8:	2030      	movs	r0, #48	@ 0x30
 80018aa:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80018ae:	4422      	add	r2, r4
 80018b0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80018b4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80018b8:	3302      	adds	r3, #2
 80018ba:	e7c7      	b.n	800184c <_printf_common+0x58>
 80018bc:	2301      	movs	r3, #1
 80018be:	4622      	mov	r2, r4
 80018c0:	4641      	mov	r1, r8
 80018c2:	4638      	mov	r0, r7
 80018c4:	47c8      	blx	r9
 80018c6:	3001      	adds	r0, #1
 80018c8:	d0e6      	beq.n	8001898 <_printf_common+0xa4>
 80018ca:	3601      	adds	r6, #1
 80018cc:	e7d9      	b.n	8001882 <_printf_common+0x8e>
	...

080018d0 <_printf_i>:
 80018d0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80018d4:	7e0f      	ldrb	r7, [r1, #24]
 80018d6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80018d8:	2f78      	cmp	r7, #120	@ 0x78
 80018da:	4691      	mov	r9, r2
 80018dc:	4680      	mov	r8, r0
 80018de:	460c      	mov	r4, r1
 80018e0:	469a      	mov	sl, r3
 80018e2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80018e6:	d807      	bhi.n	80018f8 <_printf_i+0x28>
 80018e8:	2f62      	cmp	r7, #98	@ 0x62
 80018ea:	d80a      	bhi.n	8001902 <_printf_i+0x32>
 80018ec:	2f00      	cmp	r7, #0
 80018ee:	f000 80d1 	beq.w	8001a94 <_printf_i+0x1c4>
 80018f2:	2f58      	cmp	r7, #88	@ 0x58
 80018f4:	f000 80b8 	beq.w	8001a68 <_printf_i+0x198>
 80018f8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80018fc:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8001900:	e03a      	b.n	8001978 <_printf_i+0xa8>
 8001902:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8001906:	2b15      	cmp	r3, #21
 8001908:	d8f6      	bhi.n	80018f8 <_printf_i+0x28>
 800190a:	a101      	add	r1, pc, #4	@ (adr r1, 8001910 <_printf_i+0x40>)
 800190c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8001910:	08001969 	.word	0x08001969
 8001914:	0800197d 	.word	0x0800197d
 8001918:	080018f9 	.word	0x080018f9
 800191c:	080018f9 	.word	0x080018f9
 8001920:	080018f9 	.word	0x080018f9
 8001924:	080018f9 	.word	0x080018f9
 8001928:	0800197d 	.word	0x0800197d
 800192c:	080018f9 	.word	0x080018f9
 8001930:	080018f9 	.word	0x080018f9
 8001934:	080018f9 	.word	0x080018f9
 8001938:	080018f9 	.word	0x080018f9
 800193c:	08001a7b 	.word	0x08001a7b
 8001940:	080019a7 	.word	0x080019a7
 8001944:	08001a35 	.word	0x08001a35
 8001948:	080018f9 	.word	0x080018f9
 800194c:	080018f9 	.word	0x080018f9
 8001950:	08001a9d 	.word	0x08001a9d
 8001954:	080018f9 	.word	0x080018f9
 8001958:	080019a7 	.word	0x080019a7
 800195c:	080018f9 	.word	0x080018f9
 8001960:	080018f9 	.word	0x080018f9
 8001964:	08001a3d 	.word	0x08001a3d
 8001968:	6833      	ldr	r3, [r6, #0]
 800196a:	1d1a      	adds	r2, r3, #4
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	6032      	str	r2, [r6, #0]
 8001970:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8001974:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8001978:	2301      	movs	r3, #1
 800197a:	e09c      	b.n	8001ab6 <_printf_i+0x1e6>
 800197c:	6833      	ldr	r3, [r6, #0]
 800197e:	6820      	ldr	r0, [r4, #0]
 8001980:	1d19      	adds	r1, r3, #4
 8001982:	6031      	str	r1, [r6, #0]
 8001984:	0606      	lsls	r6, r0, #24
 8001986:	d501      	bpl.n	800198c <_printf_i+0xbc>
 8001988:	681d      	ldr	r5, [r3, #0]
 800198a:	e003      	b.n	8001994 <_printf_i+0xc4>
 800198c:	0645      	lsls	r5, r0, #25
 800198e:	d5fb      	bpl.n	8001988 <_printf_i+0xb8>
 8001990:	f9b3 5000 	ldrsh.w	r5, [r3]
 8001994:	2d00      	cmp	r5, #0
 8001996:	da03      	bge.n	80019a0 <_printf_i+0xd0>
 8001998:	232d      	movs	r3, #45	@ 0x2d
 800199a:	426d      	negs	r5, r5
 800199c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80019a0:	4858      	ldr	r0, [pc, #352]	@ (8001b04 <_printf_i+0x234>)
 80019a2:	230a      	movs	r3, #10
 80019a4:	e011      	b.n	80019ca <_printf_i+0xfa>
 80019a6:	6821      	ldr	r1, [r4, #0]
 80019a8:	6833      	ldr	r3, [r6, #0]
 80019aa:	0608      	lsls	r0, r1, #24
 80019ac:	f853 5b04 	ldr.w	r5, [r3], #4
 80019b0:	d402      	bmi.n	80019b8 <_printf_i+0xe8>
 80019b2:	0649      	lsls	r1, r1, #25
 80019b4:	bf48      	it	mi
 80019b6:	b2ad      	uxthmi	r5, r5
 80019b8:	2f6f      	cmp	r7, #111	@ 0x6f
 80019ba:	4852      	ldr	r0, [pc, #328]	@ (8001b04 <_printf_i+0x234>)
 80019bc:	6033      	str	r3, [r6, #0]
 80019be:	bf14      	ite	ne
 80019c0:	230a      	movne	r3, #10
 80019c2:	2308      	moveq	r3, #8
 80019c4:	2100      	movs	r1, #0
 80019c6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80019ca:	6866      	ldr	r6, [r4, #4]
 80019cc:	60a6      	str	r6, [r4, #8]
 80019ce:	2e00      	cmp	r6, #0
 80019d0:	db05      	blt.n	80019de <_printf_i+0x10e>
 80019d2:	6821      	ldr	r1, [r4, #0]
 80019d4:	432e      	orrs	r6, r5
 80019d6:	f021 0104 	bic.w	r1, r1, #4
 80019da:	6021      	str	r1, [r4, #0]
 80019dc:	d04b      	beq.n	8001a76 <_printf_i+0x1a6>
 80019de:	4616      	mov	r6, r2
 80019e0:	fbb5 f1f3 	udiv	r1, r5, r3
 80019e4:	fb03 5711 	mls	r7, r3, r1, r5
 80019e8:	5dc7      	ldrb	r7, [r0, r7]
 80019ea:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80019ee:	462f      	mov	r7, r5
 80019f0:	42bb      	cmp	r3, r7
 80019f2:	460d      	mov	r5, r1
 80019f4:	d9f4      	bls.n	80019e0 <_printf_i+0x110>
 80019f6:	2b08      	cmp	r3, #8
 80019f8:	d10b      	bne.n	8001a12 <_printf_i+0x142>
 80019fa:	6823      	ldr	r3, [r4, #0]
 80019fc:	07df      	lsls	r7, r3, #31
 80019fe:	d508      	bpl.n	8001a12 <_printf_i+0x142>
 8001a00:	6923      	ldr	r3, [r4, #16]
 8001a02:	6861      	ldr	r1, [r4, #4]
 8001a04:	4299      	cmp	r1, r3
 8001a06:	bfde      	ittt	le
 8001a08:	2330      	movle	r3, #48	@ 0x30
 8001a0a:	f806 3c01 	strble.w	r3, [r6, #-1]
 8001a0e:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8001a12:	1b92      	subs	r2, r2, r6
 8001a14:	6122      	str	r2, [r4, #16]
 8001a16:	f8cd a000 	str.w	sl, [sp]
 8001a1a:	464b      	mov	r3, r9
 8001a1c:	aa03      	add	r2, sp, #12
 8001a1e:	4621      	mov	r1, r4
 8001a20:	4640      	mov	r0, r8
 8001a22:	f7ff fee7 	bl	80017f4 <_printf_common>
 8001a26:	3001      	adds	r0, #1
 8001a28:	d14a      	bne.n	8001ac0 <_printf_i+0x1f0>
 8001a2a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001a2e:	b004      	add	sp, #16
 8001a30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001a34:	6823      	ldr	r3, [r4, #0]
 8001a36:	f043 0320 	orr.w	r3, r3, #32
 8001a3a:	6023      	str	r3, [r4, #0]
 8001a3c:	4832      	ldr	r0, [pc, #200]	@ (8001b08 <_printf_i+0x238>)
 8001a3e:	2778      	movs	r7, #120	@ 0x78
 8001a40:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8001a44:	6823      	ldr	r3, [r4, #0]
 8001a46:	6831      	ldr	r1, [r6, #0]
 8001a48:	061f      	lsls	r7, r3, #24
 8001a4a:	f851 5b04 	ldr.w	r5, [r1], #4
 8001a4e:	d402      	bmi.n	8001a56 <_printf_i+0x186>
 8001a50:	065f      	lsls	r7, r3, #25
 8001a52:	bf48      	it	mi
 8001a54:	b2ad      	uxthmi	r5, r5
 8001a56:	6031      	str	r1, [r6, #0]
 8001a58:	07d9      	lsls	r1, r3, #31
 8001a5a:	bf44      	itt	mi
 8001a5c:	f043 0320 	orrmi.w	r3, r3, #32
 8001a60:	6023      	strmi	r3, [r4, #0]
 8001a62:	b11d      	cbz	r5, 8001a6c <_printf_i+0x19c>
 8001a64:	2310      	movs	r3, #16
 8001a66:	e7ad      	b.n	80019c4 <_printf_i+0xf4>
 8001a68:	4826      	ldr	r0, [pc, #152]	@ (8001b04 <_printf_i+0x234>)
 8001a6a:	e7e9      	b.n	8001a40 <_printf_i+0x170>
 8001a6c:	6823      	ldr	r3, [r4, #0]
 8001a6e:	f023 0320 	bic.w	r3, r3, #32
 8001a72:	6023      	str	r3, [r4, #0]
 8001a74:	e7f6      	b.n	8001a64 <_printf_i+0x194>
 8001a76:	4616      	mov	r6, r2
 8001a78:	e7bd      	b.n	80019f6 <_printf_i+0x126>
 8001a7a:	6833      	ldr	r3, [r6, #0]
 8001a7c:	6825      	ldr	r5, [r4, #0]
 8001a7e:	6961      	ldr	r1, [r4, #20]
 8001a80:	1d18      	adds	r0, r3, #4
 8001a82:	6030      	str	r0, [r6, #0]
 8001a84:	062e      	lsls	r6, r5, #24
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	d501      	bpl.n	8001a8e <_printf_i+0x1be>
 8001a8a:	6019      	str	r1, [r3, #0]
 8001a8c:	e002      	b.n	8001a94 <_printf_i+0x1c4>
 8001a8e:	0668      	lsls	r0, r5, #25
 8001a90:	d5fb      	bpl.n	8001a8a <_printf_i+0x1ba>
 8001a92:	8019      	strh	r1, [r3, #0]
 8001a94:	2300      	movs	r3, #0
 8001a96:	6123      	str	r3, [r4, #16]
 8001a98:	4616      	mov	r6, r2
 8001a9a:	e7bc      	b.n	8001a16 <_printf_i+0x146>
 8001a9c:	6833      	ldr	r3, [r6, #0]
 8001a9e:	1d1a      	adds	r2, r3, #4
 8001aa0:	6032      	str	r2, [r6, #0]
 8001aa2:	681e      	ldr	r6, [r3, #0]
 8001aa4:	6862      	ldr	r2, [r4, #4]
 8001aa6:	2100      	movs	r1, #0
 8001aa8:	4630      	mov	r0, r6
 8001aaa:	f7fe fba9 	bl	8000200 <memchr>
 8001aae:	b108      	cbz	r0, 8001ab4 <_printf_i+0x1e4>
 8001ab0:	1b80      	subs	r0, r0, r6
 8001ab2:	6060      	str	r0, [r4, #4]
 8001ab4:	6863      	ldr	r3, [r4, #4]
 8001ab6:	6123      	str	r3, [r4, #16]
 8001ab8:	2300      	movs	r3, #0
 8001aba:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8001abe:	e7aa      	b.n	8001a16 <_printf_i+0x146>
 8001ac0:	6923      	ldr	r3, [r4, #16]
 8001ac2:	4632      	mov	r2, r6
 8001ac4:	4649      	mov	r1, r9
 8001ac6:	4640      	mov	r0, r8
 8001ac8:	47d0      	blx	sl
 8001aca:	3001      	adds	r0, #1
 8001acc:	d0ad      	beq.n	8001a2a <_printf_i+0x15a>
 8001ace:	6823      	ldr	r3, [r4, #0]
 8001ad0:	079b      	lsls	r3, r3, #30
 8001ad2:	d413      	bmi.n	8001afc <_printf_i+0x22c>
 8001ad4:	68e0      	ldr	r0, [r4, #12]
 8001ad6:	9b03      	ldr	r3, [sp, #12]
 8001ad8:	4298      	cmp	r0, r3
 8001ada:	bfb8      	it	lt
 8001adc:	4618      	movlt	r0, r3
 8001ade:	e7a6      	b.n	8001a2e <_printf_i+0x15e>
 8001ae0:	2301      	movs	r3, #1
 8001ae2:	4632      	mov	r2, r6
 8001ae4:	4649      	mov	r1, r9
 8001ae6:	4640      	mov	r0, r8
 8001ae8:	47d0      	blx	sl
 8001aea:	3001      	adds	r0, #1
 8001aec:	d09d      	beq.n	8001a2a <_printf_i+0x15a>
 8001aee:	3501      	adds	r5, #1
 8001af0:	68e3      	ldr	r3, [r4, #12]
 8001af2:	9903      	ldr	r1, [sp, #12]
 8001af4:	1a5b      	subs	r3, r3, r1
 8001af6:	42ab      	cmp	r3, r5
 8001af8:	dcf2      	bgt.n	8001ae0 <_printf_i+0x210>
 8001afa:	e7eb      	b.n	8001ad4 <_printf_i+0x204>
 8001afc:	2500      	movs	r5, #0
 8001afe:	f104 0619 	add.w	r6, r4, #25
 8001b02:	e7f5      	b.n	8001af0 <_printf_i+0x220>
 8001b04:	08002847 	.word	0x08002847
 8001b08:	08002858 	.word	0x08002858

08001b0c <__sflush_r>:
 8001b0c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8001b10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001b14:	0716      	lsls	r6, r2, #28
 8001b16:	4605      	mov	r5, r0
 8001b18:	460c      	mov	r4, r1
 8001b1a:	d454      	bmi.n	8001bc6 <__sflush_r+0xba>
 8001b1c:	684b      	ldr	r3, [r1, #4]
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	dc02      	bgt.n	8001b28 <__sflush_r+0x1c>
 8001b22:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	dd48      	ble.n	8001bba <__sflush_r+0xae>
 8001b28:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8001b2a:	2e00      	cmp	r6, #0
 8001b2c:	d045      	beq.n	8001bba <__sflush_r+0xae>
 8001b2e:	2300      	movs	r3, #0
 8001b30:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8001b34:	682f      	ldr	r7, [r5, #0]
 8001b36:	6a21      	ldr	r1, [r4, #32]
 8001b38:	602b      	str	r3, [r5, #0]
 8001b3a:	d030      	beq.n	8001b9e <__sflush_r+0x92>
 8001b3c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8001b3e:	89a3      	ldrh	r3, [r4, #12]
 8001b40:	0759      	lsls	r1, r3, #29
 8001b42:	d505      	bpl.n	8001b50 <__sflush_r+0x44>
 8001b44:	6863      	ldr	r3, [r4, #4]
 8001b46:	1ad2      	subs	r2, r2, r3
 8001b48:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8001b4a:	b10b      	cbz	r3, 8001b50 <__sflush_r+0x44>
 8001b4c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8001b4e:	1ad2      	subs	r2, r2, r3
 8001b50:	2300      	movs	r3, #0
 8001b52:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8001b54:	6a21      	ldr	r1, [r4, #32]
 8001b56:	4628      	mov	r0, r5
 8001b58:	47b0      	blx	r6
 8001b5a:	1c43      	adds	r3, r0, #1
 8001b5c:	89a3      	ldrh	r3, [r4, #12]
 8001b5e:	d106      	bne.n	8001b6e <__sflush_r+0x62>
 8001b60:	6829      	ldr	r1, [r5, #0]
 8001b62:	291d      	cmp	r1, #29
 8001b64:	d82b      	bhi.n	8001bbe <__sflush_r+0xb2>
 8001b66:	4a2a      	ldr	r2, [pc, #168]	@ (8001c10 <__sflush_r+0x104>)
 8001b68:	40ca      	lsrs	r2, r1
 8001b6a:	07d6      	lsls	r6, r2, #31
 8001b6c:	d527      	bpl.n	8001bbe <__sflush_r+0xb2>
 8001b6e:	2200      	movs	r2, #0
 8001b70:	6062      	str	r2, [r4, #4]
 8001b72:	04d9      	lsls	r1, r3, #19
 8001b74:	6922      	ldr	r2, [r4, #16]
 8001b76:	6022      	str	r2, [r4, #0]
 8001b78:	d504      	bpl.n	8001b84 <__sflush_r+0x78>
 8001b7a:	1c42      	adds	r2, r0, #1
 8001b7c:	d101      	bne.n	8001b82 <__sflush_r+0x76>
 8001b7e:	682b      	ldr	r3, [r5, #0]
 8001b80:	b903      	cbnz	r3, 8001b84 <__sflush_r+0x78>
 8001b82:	6560      	str	r0, [r4, #84]	@ 0x54
 8001b84:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8001b86:	602f      	str	r7, [r5, #0]
 8001b88:	b1b9      	cbz	r1, 8001bba <__sflush_r+0xae>
 8001b8a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8001b8e:	4299      	cmp	r1, r3
 8001b90:	d002      	beq.n	8001b98 <__sflush_r+0x8c>
 8001b92:	4628      	mov	r0, r5
 8001b94:	f000 fa72 	bl	800207c <_free_r>
 8001b98:	2300      	movs	r3, #0
 8001b9a:	6363      	str	r3, [r4, #52]	@ 0x34
 8001b9c:	e00d      	b.n	8001bba <__sflush_r+0xae>
 8001b9e:	2301      	movs	r3, #1
 8001ba0:	4628      	mov	r0, r5
 8001ba2:	47b0      	blx	r6
 8001ba4:	4602      	mov	r2, r0
 8001ba6:	1c50      	adds	r0, r2, #1
 8001ba8:	d1c9      	bne.n	8001b3e <__sflush_r+0x32>
 8001baa:	682b      	ldr	r3, [r5, #0]
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d0c6      	beq.n	8001b3e <__sflush_r+0x32>
 8001bb0:	2b1d      	cmp	r3, #29
 8001bb2:	d001      	beq.n	8001bb8 <__sflush_r+0xac>
 8001bb4:	2b16      	cmp	r3, #22
 8001bb6:	d11e      	bne.n	8001bf6 <__sflush_r+0xea>
 8001bb8:	602f      	str	r7, [r5, #0]
 8001bba:	2000      	movs	r0, #0
 8001bbc:	e022      	b.n	8001c04 <__sflush_r+0xf8>
 8001bbe:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001bc2:	b21b      	sxth	r3, r3
 8001bc4:	e01b      	b.n	8001bfe <__sflush_r+0xf2>
 8001bc6:	690f      	ldr	r7, [r1, #16]
 8001bc8:	2f00      	cmp	r7, #0
 8001bca:	d0f6      	beq.n	8001bba <__sflush_r+0xae>
 8001bcc:	0793      	lsls	r3, r2, #30
 8001bce:	680e      	ldr	r6, [r1, #0]
 8001bd0:	bf08      	it	eq
 8001bd2:	694b      	ldreq	r3, [r1, #20]
 8001bd4:	600f      	str	r7, [r1, #0]
 8001bd6:	bf18      	it	ne
 8001bd8:	2300      	movne	r3, #0
 8001bda:	eba6 0807 	sub.w	r8, r6, r7
 8001bde:	608b      	str	r3, [r1, #8]
 8001be0:	f1b8 0f00 	cmp.w	r8, #0
 8001be4:	dde9      	ble.n	8001bba <__sflush_r+0xae>
 8001be6:	6a21      	ldr	r1, [r4, #32]
 8001be8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8001bea:	4643      	mov	r3, r8
 8001bec:	463a      	mov	r2, r7
 8001bee:	4628      	mov	r0, r5
 8001bf0:	47b0      	blx	r6
 8001bf2:	2800      	cmp	r0, #0
 8001bf4:	dc08      	bgt.n	8001c08 <__sflush_r+0xfc>
 8001bf6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001bfa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001bfe:	81a3      	strh	r3, [r4, #12]
 8001c00:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001c04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001c08:	4407      	add	r7, r0
 8001c0a:	eba8 0800 	sub.w	r8, r8, r0
 8001c0e:	e7e7      	b.n	8001be0 <__sflush_r+0xd4>
 8001c10:	20400001 	.word	0x20400001

08001c14 <_fflush_r>:
 8001c14:	b538      	push	{r3, r4, r5, lr}
 8001c16:	690b      	ldr	r3, [r1, #16]
 8001c18:	4605      	mov	r5, r0
 8001c1a:	460c      	mov	r4, r1
 8001c1c:	b913      	cbnz	r3, 8001c24 <_fflush_r+0x10>
 8001c1e:	2500      	movs	r5, #0
 8001c20:	4628      	mov	r0, r5
 8001c22:	bd38      	pop	{r3, r4, r5, pc}
 8001c24:	b118      	cbz	r0, 8001c2e <_fflush_r+0x1a>
 8001c26:	6a03      	ldr	r3, [r0, #32]
 8001c28:	b90b      	cbnz	r3, 8001c2e <_fflush_r+0x1a>
 8001c2a:	f7ff fa71 	bl	8001110 <__sinit>
 8001c2e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d0f3      	beq.n	8001c1e <_fflush_r+0xa>
 8001c36:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8001c38:	07d0      	lsls	r0, r2, #31
 8001c3a:	d404      	bmi.n	8001c46 <_fflush_r+0x32>
 8001c3c:	0599      	lsls	r1, r3, #22
 8001c3e:	d402      	bmi.n	8001c46 <_fflush_r+0x32>
 8001c40:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8001c42:	f7ff fbca 	bl	80013da <__retarget_lock_acquire_recursive>
 8001c46:	4628      	mov	r0, r5
 8001c48:	4621      	mov	r1, r4
 8001c4a:	f7ff ff5f 	bl	8001b0c <__sflush_r>
 8001c4e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8001c50:	07da      	lsls	r2, r3, #31
 8001c52:	4605      	mov	r5, r0
 8001c54:	d4e4      	bmi.n	8001c20 <_fflush_r+0xc>
 8001c56:	89a3      	ldrh	r3, [r4, #12]
 8001c58:	059b      	lsls	r3, r3, #22
 8001c5a:	d4e1      	bmi.n	8001c20 <_fflush_r+0xc>
 8001c5c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8001c5e:	f7ff fbbd 	bl	80013dc <__retarget_lock_release_recursive>
 8001c62:	e7dd      	b.n	8001c20 <_fflush_r+0xc>

08001c64 <__malloc_lock>:
 8001c64:	4801      	ldr	r0, [pc, #4]	@ (8001c6c <__malloc_lock+0x8>)
 8001c66:	f7ff bbb8 	b.w	80013da <__retarget_lock_acquire_recursive>
 8001c6a:	bf00      	nop
 8001c6c:	20000268 	.word	0x20000268

08001c70 <__malloc_unlock>:
 8001c70:	4801      	ldr	r0, [pc, #4]	@ (8001c78 <__malloc_unlock+0x8>)
 8001c72:	f7ff bbb3 	b.w	80013dc <__retarget_lock_release_recursive>
 8001c76:	bf00      	nop
 8001c78:	20000268 	.word	0x20000268

08001c7c <__sread>:
 8001c7c:	b510      	push	{r4, lr}
 8001c7e:	460c      	mov	r4, r1
 8001c80:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001c84:	f000 f99c 	bl	8001fc0 <_read_r>
 8001c88:	2800      	cmp	r0, #0
 8001c8a:	bfab      	itete	ge
 8001c8c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8001c8e:	89a3      	ldrhlt	r3, [r4, #12]
 8001c90:	181b      	addge	r3, r3, r0
 8001c92:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8001c96:	bfac      	ite	ge
 8001c98:	6563      	strge	r3, [r4, #84]	@ 0x54
 8001c9a:	81a3      	strhlt	r3, [r4, #12]
 8001c9c:	bd10      	pop	{r4, pc}

08001c9e <__swrite>:
 8001c9e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001ca2:	461f      	mov	r7, r3
 8001ca4:	898b      	ldrh	r3, [r1, #12]
 8001ca6:	05db      	lsls	r3, r3, #23
 8001ca8:	4605      	mov	r5, r0
 8001caa:	460c      	mov	r4, r1
 8001cac:	4616      	mov	r6, r2
 8001cae:	d505      	bpl.n	8001cbc <__swrite+0x1e>
 8001cb0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001cb4:	2302      	movs	r3, #2
 8001cb6:	2200      	movs	r2, #0
 8001cb8:	f000 f970 	bl	8001f9c <_lseek_r>
 8001cbc:	89a3      	ldrh	r3, [r4, #12]
 8001cbe:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001cc2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8001cc6:	81a3      	strh	r3, [r4, #12]
 8001cc8:	4632      	mov	r2, r6
 8001cca:	463b      	mov	r3, r7
 8001ccc:	4628      	mov	r0, r5
 8001cce:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8001cd2:	f000 b997 	b.w	8002004 <_write_r>

08001cd6 <__sseek>:
 8001cd6:	b510      	push	{r4, lr}
 8001cd8:	460c      	mov	r4, r1
 8001cda:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001cde:	f000 f95d 	bl	8001f9c <_lseek_r>
 8001ce2:	1c43      	adds	r3, r0, #1
 8001ce4:	89a3      	ldrh	r3, [r4, #12]
 8001ce6:	bf15      	itete	ne
 8001ce8:	6560      	strne	r0, [r4, #84]	@ 0x54
 8001cea:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8001cee:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8001cf2:	81a3      	strheq	r3, [r4, #12]
 8001cf4:	bf18      	it	ne
 8001cf6:	81a3      	strhne	r3, [r4, #12]
 8001cf8:	bd10      	pop	{r4, pc}

08001cfa <__sclose>:
 8001cfa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001cfe:	f000 b993 	b.w	8002028 <_close_r>
	...

08001d04 <fiprintf>:
 8001d04:	b40e      	push	{r1, r2, r3}
 8001d06:	b503      	push	{r0, r1, lr}
 8001d08:	4601      	mov	r1, r0
 8001d0a:	ab03      	add	r3, sp, #12
 8001d0c:	4805      	ldr	r0, [pc, #20]	@ (8001d24 <fiprintf+0x20>)
 8001d0e:	f853 2b04 	ldr.w	r2, [r3], #4
 8001d12:	6800      	ldr	r0, [r0, #0]
 8001d14:	9301      	str	r3, [sp, #4]
 8001d16:	f7ff fbab 	bl	8001470 <_vfiprintf_r>
 8001d1a:	b002      	add	sp, #8
 8001d1c:	f85d eb04 	ldr.w	lr, [sp], #4
 8001d20:	b003      	add	sp, #12
 8001d22:	4770      	bx	lr
 8001d24:	2000005c 	.word	0x2000005c

08001d28 <__swbuf_r>:
 8001d28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001d2a:	460e      	mov	r6, r1
 8001d2c:	4614      	mov	r4, r2
 8001d2e:	4605      	mov	r5, r0
 8001d30:	b118      	cbz	r0, 8001d3a <__swbuf_r+0x12>
 8001d32:	6a03      	ldr	r3, [r0, #32]
 8001d34:	b90b      	cbnz	r3, 8001d3a <__swbuf_r+0x12>
 8001d36:	f7ff f9eb 	bl	8001110 <__sinit>
 8001d3a:	69a3      	ldr	r3, [r4, #24]
 8001d3c:	60a3      	str	r3, [r4, #8]
 8001d3e:	89a3      	ldrh	r3, [r4, #12]
 8001d40:	071a      	lsls	r2, r3, #28
 8001d42:	d501      	bpl.n	8001d48 <__swbuf_r+0x20>
 8001d44:	6923      	ldr	r3, [r4, #16]
 8001d46:	b943      	cbnz	r3, 8001d5a <__swbuf_r+0x32>
 8001d48:	4621      	mov	r1, r4
 8001d4a:	4628      	mov	r0, r5
 8001d4c:	f000 f82a 	bl	8001da4 <__swsetup_r>
 8001d50:	b118      	cbz	r0, 8001d5a <__swbuf_r+0x32>
 8001d52:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8001d56:	4638      	mov	r0, r7
 8001d58:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001d5a:	6823      	ldr	r3, [r4, #0]
 8001d5c:	6922      	ldr	r2, [r4, #16]
 8001d5e:	1a98      	subs	r0, r3, r2
 8001d60:	6963      	ldr	r3, [r4, #20]
 8001d62:	b2f6      	uxtb	r6, r6
 8001d64:	4283      	cmp	r3, r0
 8001d66:	4637      	mov	r7, r6
 8001d68:	dc05      	bgt.n	8001d76 <__swbuf_r+0x4e>
 8001d6a:	4621      	mov	r1, r4
 8001d6c:	4628      	mov	r0, r5
 8001d6e:	f7ff ff51 	bl	8001c14 <_fflush_r>
 8001d72:	2800      	cmp	r0, #0
 8001d74:	d1ed      	bne.n	8001d52 <__swbuf_r+0x2a>
 8001d76:	68a3      	ldr	r3, [r4, #8]
 8001d78:	3b01      	subs	r3, #1
 8001d7a:	60a3      	str	r3, [r4, #8]
 8001d7c:	6823      	ldr	r3, [r4, #0]
 8001d7e:	1c5a      	adds	r2, r3, #1
 8001d80:	6022      	str	r2, [r4, #0]
 8001d82:	701e      	strb	r6, [r3, #0]
 8001d84:	6962      	ldr	r2, [r4, #20]
 8001d86:	1c43      	adds	r3, r0, #1
 8001d88:	429a      	cmp	r2, r3
 8001d8a:	d004      	beq.n	8001d96 <__swbuf_r+0x6e>
 8001d8c:	89a3      	ldrh	r3, [r4, #12]
 8001d8e:	07db      	lsls	r3, r3, #31
 8001d90:	d5e1      	bpl.n	8001d56 <__swbuf_r+0x2e>
 8001d92:	2e0a      	cmp	r6, #10
 8001d94:	d1df      	bne.n	8001d56 <__swbuf_r+0x2e>
 8001d96:	4621      	mov	r1, r4
 8001d98:	4628      	mov	r0, r5
 8001d9a:	f7ff ff3b 	bl	8001c14 <_fflush_r>
 8001d9e:	2800      	cmp	r0, #0
 8001da0:	d0d9      	beq.n	8001d56 <__swbuf_r+0x2e>
 8001da2:	e7d6      	b.n	8001d52 <__swbuf_r+0x2a>

08001da4 <__swsetup_r>:
 8001da4:	b538      	push	{r3, r4, r5, lr}
 8001da6:	4b29      	ldr	r3, [pc, #164]	@ (8001e4c <__swsetup_r+0xa8>)
 8001da8:	4605      	mov	r5, r0
 8001daa:	6818      	ldr	r0, [r3, #0]
 8001dac:	460c      	mov	r4, r1
 8001dae:	b118      	cbz	r0, 8001db8 <__swsetup_r+0x14>
 8001db0:	6a03      	ldr	r3, [r0, #32]
 8001db2:	b90b      	cbnz	r3, 8001db8 <__swsetup_r+0x14>
 8001db4:	f7ff f9ac 	bl	8001110 <__sinit>
 8001db8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001dbc:	0719      	lsls	r1, r3, #28
 8001dbe:	d422      	bmi.n	8001e06 <__swsetup_r+0x62>
 8001dc0:	06da      	lsls	r2, r3, #27
 8001dc2:	d407      	bmi.n	8001dd4 <__swsetup_r+0x30>
 8001dc4:	2209      	movs	r2, #9
 8001dc6:	602a      	str	r2, [r5, #0]
 8001dc8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001dcc:	81a3      	strh	r3, [r4, #12]
 8001dce:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001dd2:	e033      	b.n	8001e3c <__swsetup_r+0x98>
 8001dd4:	0758      	lsls	r0, r3, #29
 8001dd6:	d512      	bpl.n	8001dfe <__swsetup_r+0x5a>
 8001dd8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8001dda:	b141      	cbz	r1, 8001dee <__swsetup_r+0x4a>
 8001ddc:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8001de0:	4299      	cmp	r1, r3
 8001de2:	d002      	beq.n	8001dea <__swsetup_r+0x46>
 8001de4:	4628      	mov	r0, r5
 8001de6:	f000 f949 	bl	800207c <_free_r>
 8001dea:	2300      	movs	r3, #0
 8001dec:	6363      	str	r3, [r4, #52]	@ 0x34
 8001dee:	89a3      	ldrh	r3, [r4, #12]
 8001df0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8001df4:	81a3      	strh	r3, [r4, #12]
 8001df6:	2300      	movs	r3, #0
 8001df8:	6063      	str	r3, [r4, #4]
 8001dfa:	6923      	ldr	r3, [r4, #16]
 8001dfc:	6023      	str	r3, [r4, #0]
 8001dfe:	89a3      	ldrh	r3, [r4, #12]
 8001e00:	f043 0308 	orr.w	r3, r3, #8
 8001e04:	81a3      	strh	r3, [r4, #12]
 8001e06:	6923      	ldr	r3, [r4, #16]
 8001e08:	b94b      	cbnz	r3, 8001e1e <__swsetup_r+0x7a>
 8001e0a:	89a3      	ldrh	r3, [r4, #12]
 8001e0c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8001e10:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001e14:	d003      	beq.n	8001e1e <__swsetup_r+0x7a>
 8001e16:	4621      	mov	r1, r4
 8001e18:	4628      	mov	r0, r5
 8001e1a:	f000 f83f 	bl	8001e9c <__smakebuf_r>
 8001e1e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001e22:	f013 0201 	ands.w	r2, r3, #1
 8001e26:	d00a      	beq.n	8001e3e <__swsetup_r+0x9a>
 8001e28:	2200      	movs	r2, #0
 8001e2a:	60a2      	str	r2, [r4, #8]
 8001e2c:	6962      	ldr	r2, [r4, #20]
 8001e2e:	4252      	negs	r2, r2
 8001e30:	61a2      	str	r2, [r4, #24]
 8001e32:	6922      	ldr	r2, [r4, #16]
 8001e34:	b942      	cbnz	r2, 8001e48 <__swsetup_r+0xa4>
 8001e36:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8001e3a:	d1c5      	bne.n	8001dc8 <__swsetup_r+0x24>
 8001e3c:	bd38      	pop	{r3, r4, r5, pc}
 8001e3e:	0799      	lsls	r1, r3, #30
 8001e40:	bf58      	it	pl
 8001e42:	6962      	ldrpl	r2, [r4, #20]
 8001e44:	60a2      	str	r2, [r4, #8]
 8001e46:	e7f4      	b.n	8001e32 <__swsetup_r+0x8e>
 8001e48:	2000      	movs	r0, #0
 8001e4a:	e7f7      	b.n	8001e3c <__swsetup_r+0x98>
 8001e4c:	2000005c 	.word	0x2000005c

08001e50 <__swhatbuf_r>:
 8001e50:	b570      	push	{r4, r5, r6, lr}
 8001e52:	460c      	mov	r4, r1
 8001e54:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001e58:	2900      	cmp	r1, #0
 8001e5a:	b096      	sub	sp, #88	@ 0x58
 8001e5c:	4615      	mov	r5, r2
 8001e5e:	461e      	mov	r6, r3
 8001e60:	da0d      	bge.n	8001e7e <__swhatbuf_r+0x2e>
 8001e62:	89a3      	ldrh	r3, [r4, #12]
 8001e64:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8001e68:	f04f 0100 	mov.w	r1, #0
 8001e6c:	bf14      	ite	ne
 8001e6e:	2340      	movne	r3, #64	@ 0x40
 8001e70:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8001e74:	2000      	movs	r0, #0
 8001e76:	6031      	str	r1, [r6, #0]
 8001e78:	602b      	str	r3, [r5, #0]
 8001e7a:	b016      	add	sp, #88	@ 0x58
 8001e7c:	bd70      	pop	{r4, r5, r6, pc}
 8001e7e:	466a      	mov	r2, sp
 8001e80:	f000 f8e2 	bl	8002048 <_fstat_r>
 8001e84:	2800      	cmp	r0, #0
 8001e86:	dbec      	blt.n	8001e62 <__swhatbuf_r+0x12>
 8001e88:	9901      	ldr	r1, [sp, #4]
 8001e8a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8001e8e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8001e92:	4259      	negs	r1, r3
 8001e94:	4159      	adcs	r1, r3
 8001e96:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001e9a:	e7eb      	b.n	8001e74 <__swhatbuf_r+0x24>

08001e9c <__smakebuf_r>:
 8001e9c:	898b      	ldrh	r3, [r1, #12]
 8001e9e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8001ea0:	079d      	lsls	r5, r3, #30
 8001ea2:	4606      	mov	r6, r0
 8001ea4:	460c      	mov	r4, r1
 8001ea6:	d507      	bpl.n	8001eb8 <__smakebuf_r+0x1c>
 8001ea8:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8001eac:	6023      	str	r3, [r4, #0]
 8001eae:	6123      	str	r3, [r4, #16]
 8001eb0:	2301      	movs	r3, #1
 8001eb2:	6163      	str	r3, [r4, #20]
 8001eb4:	b003      	add	sp, #12
 8001eb6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001eb8:	ab01      	add	r3, sp, #4
 8001eba:	466a      	mov	r2, sp
 8001ebc:	f7ff ffc8 	bl	8001e50 <__swhatbuf_r>
 8001ec0:	9f00      	ldr	r7, [sp, #0]
 8001ec2:	4605      	mov	r5, r0
 8001ec4:	4639      	mov	r1, r7
 8001ec6:	4630      	mov	r0, r6
 8001ec8:	f7ff fc14 	bl	80016f4 <_malloc_r>
 8001ecc:	b948      	cbnz	r0, 8001ee2 <__smakebuf_r+0x46>
 8001ece:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001ed2:	059a      	lsls	r2, r3, #22
 8001ed4:	d4ee      	bmi.n	8001eb4 <__smakebuf_r+0x18>
 8001ed6:	f023 0303 	bic.w	r3, r3, #3
 8001eda:	f043 0302 	orr.w	r3, r3, #2
 8001ede:	81a3      	strh	r3, [r4, #12]
 8001ee0:	e7e2      	b.n	8001ea8 <__smakebuf_r+0xc>
 8001ee2:	89a3      	ldrh	r3, [r4, #12]
 8001ee4:	6020      	str	r0, [r4, #0]
 8001ee6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001eea:	81a3      	strh	r3, [r4, #12]
 8001eec:	9b01      	ldr	r3, [sp, #4]
 8001eee:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8001ef2:	b15b      	cbz	r3, 8001f0c <__smakebuf_r+0x70>
 8001ef4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001ef8:	4630      	mov	r0, r6
 8001efa:	f000 f83f 	bl	8001f7c <_isatty_r>
 8001efe:	b128      	cbz	r0, 8001f0c <__smakebuf_r+0x70>
 8001f00:	89a3      	ldrh	r3, [r4, #12]
 8001f02:	f023 0303 	bic.w	r3, r3, #3
 8001f06:	f043 0301 	orr.w	r3, r3, #1
 8001f0a:	81a3      	strh	r3, [r4, #12]
 8001f0c:	89a3      	ldrh	r3, [r4, #12]
 8001f0e:	431d      	orrs	r5, r3
 8001f10:	81a5      	strh	r5, [r4, #12]
 8001f12:	e7cf      	b.n	8001eb4 <__smakebuf_r+0x18>

08001f14 <_putc_r>:
 8001f14:	b570      	push	{r4, r5, r6, lr}
 8001f16:	460d      	mov	r5, r1
 8001f18:	4614      	mov	r4, r2
 8001f1a:	4606      	mov	r6, r0
 8001f1c:	b118      	cbz	r0, 8001f26 <_putc_r+0x12>
 8001f1e:	6a03      	ldr	r3, [r0, #32]
 8001f20:	b90b      	cbnz	r3, 8001f26 <_putc_r+0x12>
 8001f22:	f7ff f8f5 	bl	8001110 <__sinit>
 8001f26:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8001f28:	07d8      	lsls	r0, r3, #31
 8001f2a:	d405      	bmi.n	8001f38 <_putc_r+0x24>
 8001f2c:	89a3      	ldrh	r3, [r4, #12]
 8001f2e:	0599      	lsls	r1, r3, #22
 8001f30:	d402      	bmi.n	8001f38 <_putc_r+0x24>
 8001f32:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8001f34:	f7ff fa51 	bl	80013da <__retarget_lock_acquire_recursive>
 8001f38:	68a3      	ldr	r3, [r4, #8]
 8001f3a:	3b01      	subs	r3, #1
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	60a3      	str	r3, [r4, #8]
 8001f40:	da05      	bge.n	8001f4e <_putc_r+0x3a>
 8001f42:	69a2      	ldr	r2, [r4, #24]
 8001f44:	4293      	cmp	r3, r2
 8001f46:	db12      	blt.n	8001f6e <_putc_r+0x5a>
 8001f48:	b2eb      	uxtb	r3, r5
 8001f4a:	2b0a      	cmp	r3, #10
 8001f4c:	d00f      	beq.n	8001f6e <_putc_r+0x5a>
 8001f4e:	6823      	ldr	r3, [r4, #0]
 8001f50:	1c5a      	adds	r2, r3, #1
 8001f52:	6022      	str	r2, [r4, #0]
 8001f54:	701d      	strb	r5, [r3, #0]
 8001f56:	b2ed      	uxtb	r5, r5
 8001f58:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8001f5a:	07da      	lsls	r2, r3, #31
 8001f5c:	d405      	bmi.n	8001f6a <_putc_r+0x56>
 8001f5e:	89a3      	ldrh	r3, [r4, #12]
 8001f60:	059b      	lsls	r3, r3, #22
 8001f62:	d402      	bmi.n	8001f6a <_putc_r+0x56>
 8001f64:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8001f66:	f7ff fa39 	bl	80013dc <__retarget_lock_release_recursive>
 8001f6a:	4628      	mov	r0, r5
 8001f6c:	bd70      	pop	{r4, r5, r6, pc}
 8001f6e:	4629      	mov	r1, r5
 8001f70:	4622      	mov	r2, r4
 8001f72:	4630      	mov	r0, r6
 8001f74:	f7ff fed8 	bl	8001d28 <__swbuf_r>
 8001f78:	4605      	mov	r5, r0
 8001f7a:	e7ed      	b.n	8001f58 <_putc_r+0x44>

08001f7c <_isatty_r>:
 8001f7c:	b538      	push	{r3, r4, r5, lr}
 8001f7e:	4d06      	ldr	r5, [pc, #24]	@ (8001f98 <_isatty_r+0x1c>)
 8001f80:	2300      	movs	r3, #0
 8001f82:	4604      	mov	r4, r0
 8001f84:	4608      	mov	r0, r1
 8001f86:	602b      	str	r3, [r5, #0]
 8001f88:	f7fe fe8c 	bl	8000ca4 <_isatty>
 8001f8c:	1c43      	adds	r3, r0, #1
 8001f8e:	d102      	bne.n	8001f96 <_isatty_r+0x1a>
 8001f90:	682b      	ldr	r3, [r5, #0]
 8001f92:	b103      	cbz	r3, 8001f96 <_isatty_r+0x1a>
 8001f94:	6023      	str	r3, [r4, #0]
 8001f96:	bd38      	pop	{r3, r4, r5, pc}
 8001f98:	20000274 	.word	0x20000274

08001f9c <_lseek_r>:
 8001f9c:	b538      	push	{r3, r4, r5, lr}
 8001f9e:	4d07      	ldr	r5, [pc, #28]	@ (8001fbc <_lseek_r+0x20>)
 8001fa0:	4604      	mov	r4, r0
 8001fa2:	4608      	mov	r0, r1
 8001fa4:	4611      	mov	r1, r2
 8001fa6:	2200      	movs	r2, #0
 8001fa8:	602a      	str	r2, [r5, #0]
 8001faa:	461a      	mov	r2, r3
 8001fac:	f7fe fe85 	bl	8000cba <_lseek>
 8001fb0:	1c43      	adds	r3, r0, #1
 8001fb2:	d102      	bne.n	8001fba <_lseek_r+0x1e>
 8001fb4:	682b      	ldr	r3, [r5, #0]
 8001fb6:	b103      	cbz	r3, 8001fba <_lseek_r+0x1e>
 8001fb8:	6023      	str	r3, [r4, #0]
 8001fba:	bd38      	pop	{r3, r4, r5, pc}
 8001fbc:	20000274 	.word	0x20000274

08001fc0 <_read_r>:
 8001fc0:	b538      	push	{r3, r4, r5, lr}
 8001fc2:	4d07      	ldr	r5, [pc, #28]	@ (8001fe0 <_read_r+0x20>)
 8001fc4:	4604      	mov	r4, r0
 8001fc6:	4608      	mov	r0, r1
 8001fc8:	4611      	mov	r1, r2
 8001fca:	2200      	movs	r2, #0
 8001fcc:	602a      	str	r2, [r5, #0]
 8001fce:	461a      	mov	r2, r3
 8001fd0:	f7fe fe13 	bl	8000bfa <_read>
 8001fd4:	1c43      	adds	r3, r0, #1
 8001fd6:	d102      	bne.n	8001fde <_read_r+0x1e>
 8001fd8:	682b      	ldr	r3, [r5, #0]
 8001fda:	b103      	cbz	r3, 8001fde <_read_r+0x1e>
 8001fdc:	6023      	str	r3, [r4, #0]
 8001fde:	bd38      	pop	{r3, r4, r5, pc}
 8001fe0:	20000274 	.word	0x20000274

08001fe4 <_sbrk_r>:
 8001fe4:	b538      	push	{r3, r4, r5, lr}
 8001fe6:	4d06      	ldr	r5, [pc, #24]	@ (8002000 <_sbrk_r+0x1c>)
 8001fe8:	2300      	movs	r3, #0
 8001fea:	4604      	mov	r4, r0
 8001fec:	4608      	mov	r0, r1
 8001fee:	602b      	str	r3, [r5, #0]
 8001ff0:	f7fe fe70 	bl	8000cd4 <_sbrk>
 8001ff4:	1c43      	adds	r3, r0, #1
 8001ff6:	d102      	bne.n	8001ffe <_sbrk_r+0x1a>
 8001ff8:	682b      	ldr	r3, [r5, #0]
 8001ffa:	b103      	cbz	r3, 8001ffe <_sbrk_r+0x1a>
 8001ffc:	6023      	str	r3, [r4, #0]
 8001ffe:	bd38      	pop	{r3, r4, r5, pc}
 8002000:	20000274 	.word	0x20000274

08002004 <_write_r>:
 8002004:	b538      	push	{r3, r4, r5, lr}
 8002006:	4d07      	ldr	r5, [pc, #28]	@ (8002024 <_write_r+0x20>)
 8002008:	4604      	mov	r4, r0
 800200a:	4608      	mov	r0, r1
 800200c:	4611      	mov	r1, r2
 800200e:	2200      	movs	r2, #0
 8002010:	602a      	str	r2, [r5, #0]
 8002012:	461a      	mov	r2, r3
 8002014:	f7fe fe0e 	bl	8000c34 <_write>
 8002018:	1c43      	adds	r3, r0, #1
 800201a:	d102      	bne.n	8002022 <_write_r+0x1e>
 800201c:	682b      	ldr	r3, [r5, #0]
 800201e:	b103      	cbz	r3, 8002022 <_write_r+0x1e>
 8002020:	6023      	str	r3, [r4, #0]
 8002022:	bd38      	pop	{r3, r4, r5, pc}
 8002024:	20000274 	.word	0x20000274

08002028 <_close_r>:
 8002028:	b538      	push	{r3, r4, r5, lr}
 800202a:	4d06      	ldr	r5, [pc, #24]	@ (8002044 <_close_r+0x1c>)
 800202c:	2300      	movs	r3, #0
 800202e:	4604      	mov	r4, r0
 8002030:	4608      	mov	r0, r1
 8002032:	602b      	str	r3, [r5, #0]
 8002034:	f7fe fe1a 	bl	8000c6c <_close>
 8002038:	1c43      	adds	r3, r0, #1
 800203a:	d102      	bne.n	8002042 <_close_r+0x1a>
 800203c:	682b      	ldr	r3, [r5, #0]
 800203e:	b103      	cbz	r3, 8002042 <_close_r+0x1a>
 8002040:	6023      	str	r3, [r4, #0]
 8002042:	bd38      	pop	{r3, r4, r5, pc}
 8002044:	20000274 	.word	0x20000274

08002048 <_fstat_r>:
 8002048:	b538      	push	{r3, r4, r5, lr}
 800204a:	4d07      	ldr	r5, [pc, #28]	@ (8002068 <_fstat_r+0x20>)
 800204c:	2300      	movs	r3, #0
 800204e:	4604      	mov	r4, r0
 8002050:	4608      	mov	r0, r1
 8002052:	4611      	mov	r1, r2
 8002054:	602b      	str	r3, [r5, #0]
 8002056:	f7fe fe15 	bl	8000c84 <_fstat>
 800205a:	1c43      	adds	r3, r0, #1
 800205c:	d102      	bne.n	8002064 <_fstat_r+0x1c>
 800205e:	682b      	ldr	r3, [r5, #0]
 8002060:	b103      	cbz	r3, 8002064 <_fstat_r+0x1c>
 8002062:	6023      	str	r3, [r4, #0]
 8002064:	bd38      	pop	{r3, r4, r5, pc}
 8002066:	bf00      	nop
 8002068:	20000274 	.word	0x20000274

0800206c <abort>:
 800206c:	b508      	push	{r3, lr}
 800206e:	2006      	movs	r0, #6
 8002070:	f000 f876 	bl	8002160 <raise>
 8002074:	2001      	movs	r0, #1
 8002076:	f7fe fdb5 	bl	8000be4 <_exit>
	...

0800207c <_free_r>:
 800207c:	b538      	push	{r3, r4, r5, lr}
 800207e:	4605      	mov	r5, r0
 8002080:	2900      	cmp	r1, #0
 8002082:	d041      	beq.n	8002108 <_free_r+0x8c>
 8002084:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002088:	1f0c      	subs	r4, r1, #4
 800208a:	2b00      	cmp	r3, #0
 800208c:	bfb8      	it	lt
 800208e:	18e4      	addlt	r4, r4, r3
 8002090:	f7ff fde8 	bl	8001c64 <__malloc_lock>
 8002094:	4a1d      	ldr	r2, [pc, #116]	@ (800210c <_free_r+0x90>)
 8002096:	6813      	ldr	r3, [r2, #0]
 8002098:	b933      	cbnz	r3, 80020a8 <_free_r+0x2c>
 800209a:	6063      	str	r3, [r4, #4]
 800209c:	6014      	str	r4, [r2, #0]
 800209e:	4628      	mov	r0, r5
 80020a0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80020a4:	f7ff bde4 	b.w	8001c70 <__malloc_unlock>
 80020a8:	42a3      	cmp	r3, r4
 80020aa:	d908      	bls.n	80020be <_free_r+0x42>
 80020ac:	6820      	ldr	r0, [r4, #0]
 80020ae:	1821      	adds	r1, r4, r0
 80020b0:	428b      	cmp	r3, r1
 80020b2:	bf01      	itttt	eq
 80020b4:	6819      	ldreq	r1, [r3, #0]
 80020b6:	685b      	ldreq	r3, [r3, #4]
 80020b8:	1809      	addeq	r1, r1, r0
 80020ba:	6021      	streq	r1, [r4, #0]
 80020bc:	e7ed      	b.n	800209a <_free_r+0x1e>
 80020be:	461a      	mov	r2, r3
 80020c0:	685b      	ldr	r3, [r3, #4]
 80020c2:	b10b      	cbz	r3, 80020c8 <_free_r+0x4c>
 80020c4:	42a3      	cmp	r3, r4
 80020c6:	d9fa      	bls.n	80020be <_free_r+0x42>
 80020c8:	6811      	ldr	r1, [r2, #0]
 80020ca:	1850      	adds	r0, r2, r1
 80020cc:	42a0      	cmp	r0, r4
 80020ce:	d10b      	bne.n	80020e8 <_free_r+0x6c>
 80020d0:	6820      	ldr	r0, [r4, #0]
 80020d2:	4401      	add	r1, r0
 80020d4:	1850      	adds	r0, r2, r1
 80020d6:	4283      	cmp	r3, r0
 80020d8:	6011      	str	r1, [r2, #0]
 80020da:	d1e0      	bne.n	800209e <_free_r+0x22>
 80020dc:	6818      	ldr	r0, [r3, #0]
 80020de:	685b      	ldr	r3, [r3, #4]
 80020e0:	6053      	str	r3, [r2, #4]
 80020e2:	4408      	add	r0, r1
 80020e4:	6010      	str	r0, [r2, #0]
 80020e6:	e7da      	b.n	800209e <_free_r+0x22>
 80020e8:	d902      	bls.n	80020f0 <_free_r+0x74>
 80020ea:	230c      	movs	r3, #12
 80020ec:	602b      	str	r3, [r5, #0]
 80020ee:	e7d6      	b.n	800209e <_free_r+0x22>
 80020f0:	6820      	ldr	r0, [r4, #0]
 80020f2:	1821      	adds	r1, r4, r0
 80020f4:	428b      	cmp	r3, r1
 80020f6:	bf04      	itt	eq
 80020f8:	6819      	ldreq	r1, [r3, #0]
 80020fa:	685b      	ldreq	r3, [r3, #4]
 80020fc:	6063      	str	r3, [r4, #4]
 80020fe:	bf04      	itt	eq
 8002100:	1809      	addeq	r1, r1, r0
 8002102:	6021      	streq	r1, [r4, #0]
 8002104:	6054      	str	r4, [r2, #4]
 8002106:	e7ca      	b.n	800209e <_free_r+0x22>
 8002108:	bd38      	pop	{r3, r4, r5, pc}
 800210a:	bf00      	nop
 800210c:	20000270 	.word	0x20000270

08002110 <_raise_r>:
 8002110:	291f      	cmp	r1, #31
 8002112:	b538      	push	{r3, r4, r5, lr}
 8002114:	4605      	mov	r5, r0
 8002116:	460c      	mov	r4, r1
 8002118:	d904      	bls.n	8002124 <_raise_r+0x14>
 800211a:	2316      	movs	r3, #22
 800211c:	6003      	str	r3, [r0, #0]
 800211e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002122:	bd38      	pop	{r3, r4, r5, pc}
 8002124:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8002126:	b112      	cbz	r2, 800212e <_raise_r+0x1e>
 8002128:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800212c:	b94b      	cbnz	r3, 8002142 <_raise_r+0x32>
 800212e:	4628      	mov	r0, r5
 8002130:	f000 f830 	bl	8002194 <_getpid_r>
 8002134:	4622      	mov	r2, r4
 8002136:	4601      	mov	r1, r0
 8002138:	4628      	mov	r0, r5
 800213a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800213e:	f000 b817 	b.w	8002170 <_kill_r>
 8002142:	2b01      	cmp	r3, #1
 8002144:	d00a      	beq.n	800215c <_raise_r+0x4c>
 8002146:	1c59      	adds	r1, r3, #1
 8002148:	d103      	bne.n	8002152 <_raise_r+0x42>
 800214a:	2316      	movs	r3, #22
 800214c:	6003      	str	r3, [r0, #0]
 800214e:	2001      	movs	r0, #1
 8002150:	e7e7      	b.n	8002122 <_raise_r+0x12>
 8002152:	2100      	movs	r1, #0
 8002154:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8002158:	4620      	mov	r0, r4
 800215a:	4798      	blx	r3
 800215c:	2000      	movs	r0, #0
 800215e:	e7e0      	b.n	8002122 <_raise_r+0x12>

08002160 <raise>:
 8002160:	4b02      	ldr	r3, [pc, #8]	@ (800216c <raise+0xc>)
 8002162:	4601      	mov	r1, r0
 8002164:	6818      	ldr	r0, [r3, #0]
 8002166:	f7ff bfd3 	b.w	8002110 <_raise_r>
 800216a:	bf00      	nop
 800216c:	2000005c 	.word	0x2000005c

08002170 <_kill_r>:
 8002170:	b538      	push	{r3, r4, r5, lr}
 8002172:	4d07      	ldr	r5, [pc, #28]	@ (8002190 <_kill_r+0x20>)
 8002174:	2300      	movs	r3, #0
 8002176:	4604      	mov	r4, r0
 8002178:	4608      	mov	r0, r1
 800217a:	4611      	mov	r1, r2
 800217c:	602b      	str	r3, [r5, #0]
 800217e:	f7fe fd21 	bl	8000bc4 <_kill>
 8002182:	1c43      	adds	r3, r0, #1
 8002184:	d102      	bne.n	800218c <_kill_r+0x1c>
 8002186:	682b      	ldr	r3, [r5, #0]
 8002188:	b103      	cbz	r3, 800218c <_kill_r+0x1c>
 800218a:	6023      	str	r3, [r4, #0]
 800218c:	bd38      	pop	{r3, r4, r5, pc}
 800218e:	bf00      	nop
 8002190:	20000274 	.word	0x20000274

08002194 <_getpid_r>:
 8002194:	f7fe bd0e 	b.w	8000bb4 <_getpid>

08002198 <_init>:
 8002198:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800219a:	bf00      	nop
 800219c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800219e:	bc08      	pop	{r3}
 80021a0:	469e      	mov	lr, r3
 80021a2:	4770      	bx	lr

080021a4 <_fini>:
 80021a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80021a6:	bf00      	nop
 80021a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80021aa:	bc08      	pop	{r3}
 80021ac:	469e      	mov	lr, r3
 80021ae:	4770      	bx	lr
