
Potentiometer Island.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000018dc  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000028c  08001a7c  08001a7c  00002a7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001d08  08001d08  00003084  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08001d08  08001d08  00002d08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08001d10  08001d10  00003084  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001d10  08001d10  00002d10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08001d14  08001d14  00002d14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000084  20000000  08001d18  00003000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00003084  2**0
                  CONTENTS
 10 .bss          0000016c  20000084  20000084  00003084  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200001f0  200001f0  00003084  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00003084  2**0
                  CONTENTS, READONLY
 13 .debug_info   000012d3  00000000  00000000  000030b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000661  00000000  00000000  00004387  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000178  00000000  00000000  000049e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000103  00000000  00000000  00004b60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00016c91  00000000  00000000  00004c63  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00001cfd  00000000  00000000  0001b8f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000780f7  00000000  00000000  0001d5f1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000956e8  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000f4c  00000000  00000000  0009572c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000084  00000000  00000000  00096678  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000084 	.word	0x20000084
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08001a64 	.word	0x08001a64

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000088 	.word	0x20000088
 80001dc:	08001a64 	.word	0x08001a64

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__io_putchar>:
#include <stdlib.h>

#include "uart.h"
#include "stm32f303xc.h"

int __io_putchar(int ch) {
 8000280:	b580      	push	{r7, lr}
 8000282:	b082      	sub	sp, #8
 8000284:	af00      	add	r7, sp, #0
 8000286:	6078      	str	r0, [r7, #4]
    SerialOutputChar((uint8_t)ch, &USART1_PORT);
 8000288:	687b      	ldr	r3, [r7, #4]
 800028a:	b2db      	uxtb	r3, r3
 800028c:	4904      	ldr	r1, [pc, #16]	@ (80002a0 <__io_putchar+0x20>)
 800028e:	4618      	mov	r0, r3
 8000290:	f000 fad6 	bl	8000840 <SerialOutputChar>
    return ch;
 8000294:	687b      	ldr	r3, [r7, #4]
}
 8000296:	4618      	mov	r0, r3
 8000298:	3708      	adds	r7, #8
 800029a:	46bd      	mov	sp, r7
 800029c:	bd80      	pop	{r7, pc}
 800029e:	bf00      	nop
 80002a0:	20000000 	.word	0x20000000

080002a4 <__io_getchar>:

int __io_getchar(void) {
 80002a4:	b580      	push	{r7, lr}
 80002a6:	af00      	add	r7, sp, #0
    return SerialGetChar(&USART1_PORT);
 80002a8:	4802      	ldr	r0, [pc, #8]	@ (80002b4 <__io_getchar+0x10>)
 80002aa:	f000 fae2 	bl	8000872 <SerialGetChar>
 80002ae:	4603      	mov	r3, r0
}
 80002b0:	4618      	mov	r0, r3
 80002b2:	bd80      	pop	{r7, pc}
 80002b4:	20000000 	.word	0x20000000

080002b8 <initialise_PA1_as_input>:

void initialise_PA1_as_input(void) {
 80002b8:	b480      	push	{r7}
 80002ba:	af00      	add	r7, sp, #0
    RCC->AHBENR |= RCC_AHBENR_GPIOAEN;
 80002bc:	4b0d      	ldr	r3, [pc, #52]	@ (80002f4 <initialise_PA1_as_input+0x3c>)
 80002be:	695b      	ldr	r3, [r3, #20]
 80002c0:	4a0c      	ldr	r2, [pc, #48]	@ (80002f4 <initialise_PA1_as_input+0x3c>)
 80002c2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80002c6:	6153      	str	r3, [r2, #20]
    GPIOA->MODER &= ~(3 << (1 * 2));
 80002c8:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80002cc:	681b      	ldr	r3, [r3, #0]
 80002ce:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 80002d2:	f023 030c 	bic.w	r3, r3, #12
 80002d6:	6013      	str	r3, [r2, #0]
    GPIOA->PUPDR &= ~(3 << (1 * 2));
 80002d8:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80002dc:	68db      	ldr	r3, [r3, #12]
 80002de:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 80002e2:	f023 030c 	bic.w	r3, r3, #12
 80002e6:	60d3      	str	r3, [r2, #12]
}
 80002e8:	bf00      	nop
 80002ea:	46bd      	mov	sp, r7
 80002ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002f0:	4770      	bx	lr
 80002f2:	bf00      	nop
 80002f4:	40021000 	.word	0x40021000

080002f8 <initialise_PE8_as_output>:

void initialise_PE8_as_output(void) {
 80002f8:	b480      	push	{r7}
 80002fa:	af00      	add	r7, sp, #0
    RCC->AHBENR |= RCC_AHBENR_GPIOEEN;
 80002fc:	4b0b      	ldr	r3, [pc, #44]	@ (800032c <initialise_PE8_as_output+0x34>)
 80002fe:	695b      	ldr	r3, [r3, #20]
 8000300:	4a0a      	ldr	r2, [pc, #40]	@ (800032c <initialise_PE8_as_output+0x34>)
 8000302:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000306:	6153      	str	r3, [r2, #20]
    GPIOE->MODER &= ~(3 << (8 * 2));
 8000308:	4b09      	ldr	r3, [pc, #36]	@ (8000330 <initialise_PE8_as_output+0x38>)
 800030a:	681b      	ldr	r3, [r3, #0]
 800030c:	4a08      	ldr	r2, [pc, #32]	@ (8000330 <initialise_PE8_as_output+0x38>)
 800030e:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 8000312:	6013      	str	r3, [r2, #0]
    GPIOE->MODER |= (1 << (8 * 2));
 8000314:	4b06      	ldr	r3, [pc, #24]	@ (8000330 <initialise_PE8_as_output+0x38>)
 8000316:	681b      	ldr	r3, [r3, #0]
 8000318:	4a05      	ldr	r2, [pc, #20]	@ (8000330 <initialise_PE8_as_output+0x38>)
 800031a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800031e:	6013      	str	r3, [r2, #0]
}
 8000320:	bf00      	nop
 8000322:	46bd      	mov	sp, r7
 8000324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000328:	4770      	bx	lr
 800032a:	bf00      	nop
 800032c:	40021000 	.word	0x40021000
 8000330:	48001000 	.word	0x48001000

08000334 <delay_ms>:

void delay_ms(uint32_t ms) {
 8000334:	b480      	push	{r7}
 8000336:	b085      	sub	sp, #20
 8000338:	af00      	add	r7, sp, #0
 800033a:	6078      	str	r0, [r7, #4]
    for (volatile uint32_t i = 0; i < ms * 615; i++);
 800033c:	2300      	movs	r3, #0
 800033e:	60fb      	str	r3, [r7, #12]
 8000340:	e002      	b.n	8000348 <delay_ms+0x14>
 8000342:	68fb      	ldr	r3, [r7, #12]
 8000344:	3301      	adds	r3, #1
 8000346:	60fb      	str	r3, [r7, #12]
 8000348:	687b      	ldr	r3, [r7, #4]
 800034a:	f240 2267 	movw	r2, #615	@ 0x267
 800034e:	fb03 f202 	mul.w	r2, r3, r2
 8000352:	68fb      	ldr	r3, [r7, #12]
 8000354:	429a      	cmp	r2, r3
 8000356:	d8f4      	bhi.n	8000342 <delay_ms+0xe>
}
 8000358:	bf00      	nop
 800035a:	bf00      	nop
 800035c:	3714      	adds	r7, #20
 800035e:	46bd      	mov	sp, r7
 8000360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000364:	4770      	bx	lr
	...

08000368 <main>:

int main(void) {
 8000368:	b580      	push	{r7, lr}
 800036a:	b088      	sub	sp, #32
 800036c:	af00      	add	r7, sp, #0
    initialise_PA1_as_input();
 800036e:	f7ff ffa3 	bl	80002b8 <initialise_PA1_as_input>
    initialise_PE8_as_output();
 8000372:	f7ff ffc1 	bl	80002f8 <initialise_PE8_as_output>
    SerialInitialise(BAUD_115200, &USART1_PORT, NULL);
 8000376:	2200      	movs	r2, #0
 8000378:	497c      	ldr	r1, [pc, #496]	@ (800056c <main+0x204>)
 800037a:	2004      	movs	r0, #4
 800037c:	f000 f9e2 	bl	8000744 <SerialInitialise>

    // Start TIM2 for random seeding
    RCC->APB1ENR |= RCC_APB1ENR_TIM2EN;
 8000380:	4b7b      	ldr	r3, [pc, #492]	@ (8000570 <main+0x208>)
 8000382:	69db      	ldr	r3, [r3, #28]
 8000384:	4a7a      	ldr	r2, [pc, #488]	@ (8000570 <main+0x208>)
 8000386:	f043 0301 	orr.w	r3, r3, #1
 800038a:	61d3      	str	r3, [r2, #28]
    TIM2->PSC = 7999;
 800038c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000390:	f641 723f 	movw	r2, #7999	@ 0x1f3f
 8000394:	629a      	str	r2, [r3, #40]	@ 0x28
    TIM2->ARR = 0xFFFFFFFF;
 8000396:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800039a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800039e:	62da      	str	r2, [r3, #44]	@ 0x2c
    TIM2->CR1 |= TIM_CR1_CEN;
 80003a0:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80003a4:	681b      	ldr	r3, [r3, #0]
 80003a6:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80003aa:	f043 0301 	orr.w	r3, r3, #1
 80003ae:	6013      	str	r3, [r2, #0]

    while (1) {
        // === Start message ===
    	 printf("\r");
 80003b0:	200d      	movs	r0, #13
 80003b2:	f000 fbdf 	bl	8000b74 <putchar>
		delay_ms(1000);
 80003b6:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80003ba:	f7ff ffbb 	bl	8000334 <delay_ms>
		printf("=== Crack the code ===\r\n");
 80003be:	486d      	ldr	r0, [pc, #436]	@ (8000574 <main+0x20c>)
 80003c0:	f000 fc36 	bl	8000c30 <puts>
		printf("To crack the code and open the treasure chest, you must solve each question and answer within 4s\r\n");
 80003c4:	486c      	ldr	r0, [pc, #432]	@ (8000578 <main+0x210>)
 80003c6:	f000 fc33 	bl	8000c30 <puts>
		printf("Odd answer = Twist LEFT\r\n");
 80003ca:	486c      	ldr	r0, [pc, #432]	@ (800057c <main+0x214>)
 80003cc:	f000 fc30 	bl	8000c30 <puts>
		printf("Even answer = Twist RIGHT\r\n");
 80003d0:	486b      	ldr	r0, [pc, #428]	@ (8000580 <main+0x218>)
 80003d2:	f000 fc2d 	bl	8000c30 <puts>
		printf("Press ENTER to begin...\r\n");
 80003d6:	486b      	ldr	r0, [pc, #428]	@ (8000584 <main+0x21c>)
 80003d8:	f000 fc2a 	bl	8000c30 <puts>

        // Wait for Enter key
        while (1) {
            char c = __io_getchar();
 80003dc:	f7ff ff62 	bl	80002a4 <__io_getchar>
 80003e0:	4603      	mov	r3, r0
 80003e2:	75fb      	strb	r3, [r7, #23]
            if (c == '\r' || c == '\n') break;
 80003e4:	7dfb      	ldrb	r3, [r7, #23]
 80003e6:	2b0d      	cmp	r3, #13
 80003e8:	d003      	beq.n	80003f2 <main+0x8a>
 80003ea:	7dfb      	ldrb	r3, [r7, #23]
 80003ec:	2b0a      	cmp	r3, #10
 80003ee:	d000      	beq.n	80003f2 <main+0x8a>
        while (1) {
 80003f0:	e7f4      	b.n	80003dc <main+0x74>
        }

        printf("Ready???\r\n\r\n");
 80003f2:	4865      	ldr	r0, [pc, #404]	@ (8000588 <main+0x220>)
 80003f4:	f000 fc1c 	bl	8000c30 <puts>
		delay_ms(2000);
 80003f8:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80003fc:	f7ff ff9a 	bl	8000334 <delay_ms>

        // Seed randomness using TIM2 count
        srand(TIM2->CNT);
 8000400:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000404:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000406:	4618      	mov	r0, r3
 8000408:	f000 fa74 	bl	80008f4 <srand>

        int score = 0;
 800040c:	2300      	movs	r3, #0
 800040e:	61fb      	str	r3, [r7, #28]

        while (score < 10) {
 8000410:	e092      	b.n	8000538 <main+0x1d0>
            int a = (rand() % 20) + 1;  // 1–20
 8000412:	f000 fa9d 	bl	8000950 <rand>
 8000416:	4601      	mov	r1, r0
 8000418:	4b5c      	ldr	r3, [pc, #368]	@ (800058c <main+0x224>)
 800041a:	fb83 2301 	smull	r2, r3, r3, r1
 800041e:	10da      	asrs	r2, r3, #3
 8000420:	17cb      	asrs	r3, r1, #31
 8000422:	1ad2      	subs	r2, r2, r3
 8000424:	4613      	mov	r3, r2
 8000426:	009b      	lsls	r3, r3, #2
 8000428:	4413      	add	r3, r2
 800042a:	009b      	lsls	r3, r3, #2
 800042c:	1aca      	subs	r2, r1, r3
 800042e:	1c53      	adds	r3, r2, #1
 8000430:	613b      	str	r3, [r7, #16]
            int b = (rand() % 20) + 1;
 8000432:	f000 fa8d 	bl	8000950 <rand>
 8000436:	4601      	mov	r1, r0
 8000438:	4b54      	ldr	r3, [pc, #336]	@ (800058c <main+0x224>)
 800043a:	fb83 2301 	smull	r2, r3, r3, r1
 800043e:	10da      	asrs	r2, r3, #3
 8000440:	17cb      	asrs	r3, r1, #31
 8000442:	1ad2      	subs	r2, r2, r3
 8000444:	4613      	mov	r3, r2
 8000446:	009b      	lsls	r3, r3, #2
 8000448:	4413      	add	r3, r2
 800044a:	009b      	lsls	r3, r3, #2
 800044c:	1aca      	subs	r2, r1, r3
 800044e:	1c53      	adds	r3, r2, #1
 8000450:	60fb      	str	r3, [r7, #12]
            int result;

            // Transition message before Q6
            if (score == 5) {
 8000452:	69fb      	ldr	r3, [r7, #28]
 8000454:	2b05      	cmp	r3, #5
 8000456:	d10d      	bne.n	8000474 <main+0x10c>
                printf("\r\nThat was too easy. Let's spice it up...\r\n");
 8000458:	484d      	ldr	r0, [pc, #308]	@ (8000590 <main+0x228>)
 800045a:	f000 fbe9 	bl	8000c30 <puts>
                delay_ms(2000);
 800045e:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000462:	f7ff ff67 	bl	8000334 <delay_ms>
                printf("Ready???\r\n\r\n");
 8000466:	4848      	ldr	r0, [pc, #288]	@ (8000588 <main+0x220>)
 8000468:	f000 fbe2 	bl	8000c30 <puts>
               delay_ms(2000);
 800046c:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000470:	f7ff ff60 	bl	8000334 <delay_ms>
            }

            if (score < 5) {
 8000474:	69fb      	ldr	r3, [r7, #28]
 8000476:	2b04      	cmp	r3, #4
 8000478:	dc09      	bgt.n	800048e <main+0x126>
                result = a + b;
 800047a:	693a      	ldr	r2, [r7, #16]
 800047c:	68fb      	ldr	r3, [r7, #12]
 800047e:	4413      	add	r3, r2
 8000480:	61bb      	str	r3, [r7, #24]
                printf("\r\n%d + %d\r\n", a, b);
 8000482:	68fa      	ldr	r2, [r7, #12]
 8000484:	6939      	ldr	r1, [r7, #16]
 8000486:	4843      	ldr	r0, [pc, #268]	@ (8000594 <main+0x22c>)
 8000488:	f000 fb62 	bl	8000b50 <iprintf>
 800048c:	e009      	b.n	80004a2 <main+0x13a>
            } else {
                result = a * b;
 800048e:	693b      	ldr	r3, [r7, #16]
 8000490:	68fa      	ldr	r2, [r7, #12]
 8000492:	fb02 f303 	mul.w	r3, r2, r3
 8000496:	61bb      	str	r3, [r7, #24]
                printf("\r\n%d x %d\r\n", a, b);
 8000498:	68fa      	ldr	r2, [r7, #12]
 800049a:	6939      	ldr	r1, [r7, #16]
 800049c:	483e      	ldr	r0, [pc, #248]	@ (8000598 <main+0x230>)
 800049e:	f000 fb57 	bl	8000b50 <iprintf>
            }

            delay_ms(4000);  // Wait 4 seconds
 80004a2:	f44f 607a 	mov.w	r0, #4000	@ 0xfa0
 80004a6:	f7ff ff45 	bl	8000334 <delay_ms>

            uint8_t input_state = (GPIOA->IDR & (1 << 1)) ? 1 : 0;
 80004aa:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80004ae:	691b      	ldr	r3, [r3, #16]
 80004b0:	f003 0302 	and.w	r3, r3, #2
 80004b4:	2b00      	cmp	r3, #0
 80004b6:	bf14      	ite	ne
 80004b8:	2301      	movne	r3, #1
 80004ba:	2300      	moveq	r3, #0
 80004bc:	b2db      	uxtb	r3, r3
 80004be:	72fb      	strb	r3, [r7, #11]
            int is_even = (result % 2 == 0);
 80004c0:	69bb      	ldr	r3, [r7, #24]
 80004c2:	f003 0301 	and.w	r3, r3, #1
 80004c6:	2b00      	cmp	r3, #0
 80004c8:	bf0c      	ite	eq
 80004ca:	2301      	moveq	r3, #1
 80004cc:	2300      	movne	r3, #0
 80004ce:	b2db      	uxtb	r3, r3
 80004d0:	607b      	str	r3, [r7, #4]

            if ((is_even && input_state == 1) || (!is_even && input_state == 0)) {
 80004d2:	687b      	ldr	r3, [r7, #4]
 80004d4:	2b00      	cmp	r3, #0
 80004d6:	d002      	beq.n	80004de <main+0x176>
 80004d8:	7afb      	ldrb	r3, [r7, #11]
 80004da:	2b01      	cmp	r3, #1
 80004dc:	d005      	beq.n	80004ea <main+0x182>
 80004de:	687b      	ldr	r3, [r7, #4]
 80004e0:	2b00      	cmp	r3, #0
 80004e2:	d117      	bne.n	8000514 <main+0x1ac>
 80004e4:	7afb      	ldrb	r3, [r7, #11]
 80004e6:	2b00      	cmp	r3, #0
 80004e8:	d114      	bne.n	8000514 <main+0x1ac>
                printf("Correct! %d is %s.\r\n", result, is_even ? "even" : "odd");
 80004ea:	687b      	ldr	r3, [r7, #4]
 80004ec:	2b00      	cmp	r3, #0
 80004ee:	d001      	beq.n	80004f4 <main+0x18c>
 80004f0:	4b2a      	ldr	r3, [pc, #168]	@ (800059c <main+0x234>)
 80004f2:	e000      	b.n	80004f6 <main+0x18e>
 80004f4:	4b2a      	ldr	r3, [pc, #168]	@ (80005a0 <main+0x238>)
 80004f6:	461a      	mov	r2, r3
 80004f8:	69b9      	ldr	r1, [r7, #24]
 80004fa:	482a      	ldr	r0, [pc, #168]	@ (80005a4 <main+0x23c>)
 80004fc:	f000 fb28 	bl	8000b50 <iprintf>
                GPIOE->ODR |= (1 << 8);
 8000500:	4b29      	ldr	r3, [pc, #164]	@ (80005a8 <main+0x240>)
 8000502:	695b      	ldr	r3, [r3, #20]
 8000504:	4a28      	ldr	r2, [pc, #160]	@ (80005a8 <main+0x240>)
 8000506:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800050a:	6153      	str	r3, [r2, #20]
                score++;
 800050c:	69fb      	ldr	r3, [r7, #28]
 800050e:	3301      	adds	r3, #1
 8000510:	61fb      	str	r3, [r7, #28]
 8000512:	e011      	b.n	8000538 <main+0x1d0>
            } else {
                printf("Incorrect. %d is %s. You failed.\r\n", result, is_even ? "even" : "odd");
 8000514:	687b      	ldr	r3, [r7, #4]
 8000516:	2b00      	cmp	r3, #0
 8000518:	d001      	beq.n	800051e <main+0x1b6>
 800051a:	4b20      	ldr	r3, [pc, #128]	@ (800059c <main+0x234>)
 800051c:	e000      	b.n	8000520 <main+0x1b8>
 800051e:	4b20      	ldr	r3, [pc, #128]	@ (80005a0 <main+0x238>)
 8000520:	461a      	mov	r2, r3
 8000522:	69b9      	ldr	r1, [r7, #24]
 8000524:	4821      	ldr	r0, [pc, #132]	@ (80005ac <main+0x244>)
 8000526:	f000 fb13 	bl	8000b50 <iprintf>
                GPIOE->ODR &= ~(1 << 8);
 800052a:	4b1f      	ldr	r3, [pc, #124]	@ (80005a8 <main+0x240>)
 800052c:	695b      	ldr	r3, [r3, #20]
 800052e:	4a1e      	ldr	r2, [pc, #120]	@ (80005a8 <main+0x240>)
 8000530:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8000534:	6153      	str	r3, [r2, #20]
                break;
 8000536:	e003      	b.n	8000540 <main+0x1d8>
        while (score < 10) {
 8000538:	69fb      	ldr	r3, [r7, #28]
 800053a:	2b09      	cmp	r3, #9
 800053c:	f77f af69 	ble.w	8000412 <main+0xaa>
            }
        }


        if (score == 10) {
 8000540:	69fb      	ldr	r3, [r7, #28]
 8000542:	2b0a      	cmp	r3, #10
 8000544:	d102      	bne.n	800054c <main+0x1e4>
            printf("\r\n YOU WIN! The treasure is yours!\r\n");
 8000546:	481a      	ldr	r0, [pc, #104]	@ (80005b0 <main+0x248>)
 8000548:	f000 fb72 	bl	8000c30 <puts>
        }

        printf("\r\nPress ENTER to try again...\r\n");
 800054c:	4819      	ldr	r0, [pc, #100]	@ (80005b4 <main+0x24c>)
 800054e:	f000 fb6f 	bl	8000c30 <puts>
        while (1) {
            char c = __io_getchar();
 8000552:	f7ff fea7 	bl	80002a4 <__io_getchar>
 8000556:	4603      	mov	r3, r0
 8000558:	70fb      	strb	r3, [r7, #3]
            if (c == '\r' || c == '\n') break;
 800055a:	78fb      	ldrb	r3, [r7, #3]
 800055c:	2b0d      	cmp	r3, #13
 800055e:	f43f af27 	beq.w	80003b0 <main+0x48>
 8000562:	78fb      	ldrb	r3, [r7, #3]
 8000564:	2b0a      	cmp	r3, #10
 8000566:	f43f af23 	beq.w	80003b0 <main+0x48>
        while (1) {
 800056a:	e7f2      	b.n	8000552 <main+0x1ea>
 800056c:	20000000 	.word	0x20000000
 8000570:	40021000 	.word	0x40021000
 8000574:	08001a7c 	.word	0x08001a7c
 8000578:	08001a94 	.word	0x08001a94
 800057c:	08001af8 	.word	0x08001af8
 8000580:	08001b14 	.word	0x08001b14
 8000584:	08001b30 	.word	0x08001b30
 8000588:	08001b4c 	.word	0x08001b4c
 800058c:	66666667 	.word	0x66666667
 8000590:	08001b58 	.word	0x08001b58
 8000594:	08001b84 	.word	0x08001b84
 8000598:	08001b90 	.word	0x08001b90
 800059c:	08001b9c 	.word	0x08001b9c
 80005a0:	08001ba4 	.word	0x08001ba4
 80005a4:	08001ba8 	.word	0x08001ba8
 80005a8:	48001000 	.word	0x48001000
 80005ac:	08001bc0 	.word	0x08001bc0
 80005b0:	08001be4 	.word	0x08001be4
 80005b4:	08001c08 	.word	0x08001c08

080005b8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80005b8:	b480      	push	{r7}
 80005ba:	af00      	add	r7, sp, #0
  return 1;
 80005bc:	2301      	movs	r3, #1
}
 80005be:	4618      	mov	r0, r3
 80005c0:	46bd      	mov	sp, r7
 80005c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c6:	4770      	bx	lr

080005c8 <_kill>:

int _kill(int pid, int sig)
{
 80005c8:	b580      	push	{r7, lr}
 80005ca:	b082      	sub	sp, #8
 80005cc:	af00      	add	r7, sp, #0
 80005ce:	6078      	str	r0, [r7, #4]
 80005d0:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80005d2:	f000 fb3d 	bl	8000c50 <__errno>
 80005d6:	4603      	mov	r3, r0
 80005d8:	2216      	movs	r2, #22
 80005da:	601a      	str	r2, [r3, #0]
  return -1;
 80005dc:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 80005e0:	4618      	mov	r0, r3
 80005e2:	3708      	adds	r7, #8
 80005e4:	46bd      	mov	sp, r7
 80005e6:	bd80      	pop	{r7, pc}

080005e8 <_exit>:

void _exit (int status)
{
 80005e8:	b580      	push	{r7, lr}
 80005ea:	b082      	sub	sp, #8
 80005ec:	af00      	add	r7, sp, #0
 80005ee:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80005f0:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80005f4:	6878      	ldr	r0, [r7, #4]
 80005f6:	f7ff ffe7 	bl	80005c8 <_kill>
  while (1) {}    /* Make sure we hang here */
 80005fa:	bf00      	nop
 80005fc:	e7fd      	b.n	80005fa <_exit+0x12>

080005fe <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80005fe:	b580      	push	{r7, lr}
 8000600:	b086      	sub	sp, #24
 8000602:	af00      	add	r7, sp, #0
 8000604:	60f8      	str	r0, [r7, #12]
 8000606:	60b9      	str	r1, [r7, #8]
 8000608:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800060a:	2300      	movs	r3, #0
 800060c:	617b      	str	r3, [r7, #20]
 800060e:	e00a      	b.n	8000626 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000610:	f7ff fe48 	bl	80002a4 <__io_getchar>
 8000614:	4601      	mov	r1, r0
 8000616:	68bb      	ldr	r3, [r7, #8]
 8000618:	1c5a      	adds	r2, r3, #1
 800061a:	60ba      	str	r2, [r7, #8]
 800061c:	b2ca      	uxtb	r2, r1
 800061e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000620:	697b      	ldr	r3, [r7, #20]
 8000622:	3301      	adds	r3, #1
 8000624:	617b      	str	r3, [r7, #20]
 8000626:	697a      	ldr	r2, [r7, #20]
 8000628:	687b      	ldr	r3, [r7, #4]
 800062a:	429a      	cmp	r2, r3
 800062c:	dbf0      	blt.n	8000610 <_read+0x12>
  }

  return len;
 800062e:	687b      	ldr	r3, [r7, #4]
}
 8000630:	4618      	mov	r0, r3
 8000632:	3718      	adds	r7, #24
 8000634:	46bd      	mov	sp, r7
 8000636:	bd80      	pop	{r7, pc}

08000638 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000638:	b580      	push	{r7, lr}
 800063a:	b086      	sub	sp, #24
 800063c:	af00      	add	r7, sp, #0
 800063e:	60f8      	str	r0, [r7, #12]
 8000640:	60b9      	str	r1, [r7, #8]
 8000642:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000644:	2300      	movs	r3, #0
 8000646:	617b      	str	r3, [r7, #20]
 8000648:	e009      	b.n	800065e <_write+0x26>
  {
    __io_putchar(*ptr++);
 800064a:	68bb      	ldr	r3, [r7, #8]
 800064c:	1c5a      	adds	r2, r3, #1
 800064e:	60ba      	str	r2, [r7, #8]
 8000650:	781b      	ldrb	r3, [r3, #0]
 8000652:	4618      	mov	r0, r3
 8000654:	f7ff fe14 	bl	8000280 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000658:	697b      	ldr	r3, [r7, #20]
 800065a:	3301      	adds	r3, #1
 800065c:	617b      	str	r3, [r7, #20]
 800065e:	697a      	ldr	r2, [r7, #20]
 8000660:	687b      	ldr	r3, [r7, #4]
 8000662:	429a      	cmp	r2, r3
 8000664:	dbf1      	blt.n	800064a <_write+0x12>
  }
  return len;
 8000666:	687b      	ldr	r3, [r7, #4]
}
 8000668:	4618      	mov	r0, r3
 800066a:	3718      	adds	r7, #24
 800066c:	46bd      	mov	sp, r7
 800066e:	bd80      	pop	{r7, pc}

08000670 <_close>:

int _close(int file)
{
 8000670:	b480      	push	{r7}
 8000672:	b083      	sub	sp, #12
 8000674:	af00      	add	r7, sp, #0
 8000676:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000678:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 800067c:	4618      	mov	r0, r3
 800067e:	370c      	adds	r7, #12
 8000680:	46bd      	mov	sp, r7
 8000682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000686:	4770      	bx	lr

08000688 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000688:	b480      	push	{r7}
 800068a:	b083      	sub	sp, #12
 800068c:	af00      	add	r7, sp, #0
 800068e:	6078      	str	r0, [r7, #4]
 8000690:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000692:	683b      	ldr	r3, [r7, #0]
 8000694:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000698:	605a      	str	r2, [r3, #4]
  return 0;
 800069a:	2300      	movs	r3, #0
}
 800069c:	4618      	mov	r0, r3
 800069e:	370c      	adds	r7, #12
 80006a0:	46bd      	mov	sp, r7
 80006a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006a6:	4770      	bx	lr

080006a8 <_isatty>:

int _isatty(int file)
{
 80006a8:	b480      	push	{r7}
 80006aa:	b083      	sub	sp, #12
 80006ac:	af00      	add	r7, sp, #0
 80006ae:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80006b0:	2301      	movs	r3, #1
}
 80006b2:	4618      	mov	r0, r3
 80006b4:	370c      	adds	r7, #12
 80006b6:	46bd      	mov	sp, r7
 80006b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006bc:	4770      	bx	lr

080006be <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80006be:	b480      	push	{r7}
 80006c0:	b085      	sub	sp, #20
 80006c2:	af00      	add	r7, sp, #0
 80006c4:	60f8      	str	r0, [r7, #12]
 80006c6:	60b9      	str	r1, [r7, #8]
 80006c8:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80006ca:	2300      	movs	r3, #0
}
 80006cc:	4618      	mov	r0, r3
 80006ce:	3714      	adds	r7, #20
 80006d0:	46bd      	mov	sp, r7
 80006d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d6:	4770      	bx	lr

080006d8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80006d8:	b580      	push	{r7, lr}
 80006da:	b086      	sub	sp, #24
 80006dc:	af00      	add	r7, sp, #0
 80006de:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80006e0:	4a14      	ldr	r2, [pc, #80]	@ (8000734 <_sbrk+0x5c>)
 80006e2:	4b15      	ldr	r3, [pc, #84]	@ (8000738 <_sbrk+0x60>)
 80006e4:	1ad3      	subs	r3, r2, r3
 80006e6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80006e8:	697b      	ldr	r3, [r7, #20]
 80006ea:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80006ec:	4b13      	ldr	r3, [pc, #76]	@ (800073c <_sbrk+0x64>)
 80006ee:	681b      	ldr	r3, [r3, #0]
 80006f0:	2b00      	cmp	r3, #0
 80006f2:	d102      	bne.n	80006fa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80006f4:	4b11      	ldr	r3, [pc, #68]	@ (800073c <_sbrk+0x64>)
 80006f6:	4a12      	ldr	r2, [pc, #72]	@ (8000740 <_sbrk+0x68>)
 80006f8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80006fa:	4b10      	ldr	r3, [pc, #64]	@ (800073c <_sbrk+0x64>)
 80006fc:	681a      	ldr	r2, [r3, #0]
 80006fe:	687b      	ldr	r3, [r7, #4]
 8000700:	4413      	add	r3, r2
 8000702:	693a      	ldr	r2, [r7, #16]
 8000704:	429a      	cmp	r2, r3
 8000706:	d207      	bcs.n	8000718 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000708:	f000 faa2 	bl	8000c50 <__errno>
 800070c:	4603      	mov	r3, r0
 800070e:	220c      	movs	r2, #12
 8000710:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000712:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000716:	e009      	b.n	800072c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000718:	4b08      	ldr	r3, [pc, #32]	@ (800073c <_sbrk+0x64>)
 800071a:	681b      	ldr	r3, [r3, #0]
 800071c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800071e:	4b07      	ldr	r3, [pc, #28]	@ (800073c <_sbrk+0x64>)
 8000720:	681a      	ldr	r2, [r3, #0]
 8000722:	687b      	ldr	r3, [r7, #4]
 8000724:	4413      	add	r3, r2
 8000726:	4a05      	ldr	r2, [pc, #20]	@ (800073c <_sbrk+0x64>)
 8000728:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800072a:	68fb      	ldr	r3, [r7, #12]
}
 800072c:	4618      	mov	r0, r3
 800072e:	3718      	adds	r7, #24
 8000730:	46bd      	mov	sp, r7
 8000732:	bd80      	pop	{r7, pc}
 8000734:	2000a000 	.word	0x2000a000
 8000738:	00000400 	.word	0x00000400
 800073c:	200000a0 	.word	0x200000a0
 8000740:	200001f0 	.word	0x200001f0

08000744 <SerialInitialise>:


// Initialises the specified serial port with a baud rate and optional completion function
// InitialiseSerial - Initialise the serial port
// Input: baudRate is from an enumerated set
void SerialInitialise(uint32_t baudRate, SerialPort *serial_port, void (*completion_function)(uint32_t)) {
 8000744:	b480      	push	{r7}
 8000746:	b087      	sub	sp, #28
 8000748:	af00      	add	r7, sp, #0
 800074a:	60f8      	str	r0, [r7, #12]
 800074c:	60b9      	str	r1, [r7, #8]
 800074e:	607a      	str	r2, [r7, #4]

	serial_port->completion_function = completion_function; // Set the callback
 8000750:	68bb      	ldr	r3, [r7, #8]
 8000752:	687a      	ldr	r2, [r7, #4]
 8000754:	625a      	str	r2, [r3, #36]	@ 0x24

	// Enable power interface and system configuration controller
	RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 8000756:	4b39      	ldr	r3, [pc, #228]	@ (800083c <SerialInitialise+0xf8>)
 8000758:	69db      	ldr	r3, [r3, #28]
 800075a:	4a38      	ldr	r2, [pc, #224]	@ (800083c <SerialInitialise+0xf8>)
 800075c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000760:	61d3      	str	r3, [r2, #28]
	RCC->APB2ENR |= RCC_APB2ENR_SYSCFGEN;
 8000762:	4b36      	ldr	r3, [pc, #216]	@ (800083c <SerialInitialise+0xf8>)
 8000764:	699b      	ldr	r3, [r3, #24]
 8000766:	4a35      	ldr	r2, [pc, #212]	@ (800083c <SerialInitialise+0xf8>)
 8000768:	f043 0301 	orr.w	r3, r3, #1
 800076c:	6193      	str	r3, [r2, #24]

	// enable the GPIO which is on the AHB bus
	RCC->AHBENR |= serial_port->MaskAHBENR;
 800076e:	68bb      	ldr	r3, [r7, #8]
 8000770:	691a      	ldr	r2, [r3, #16]
 8000772:	4b32      	ldr	r3, [pc, #200]	@ (800083c <SerialInitialise+0xf8>)
 8000774:	695b      	ldr	r3, [r3, #20]
 8000776:	4931      	ldr	r1, [pc, #196]	@ (800083c <SerialInitialise+0xf8>)
 8000778:	4313      	orrs	r3, r2
 800077a:	614b      	str	r3, [r1, #20]

	// set pin mode to alternate function for the specific GPIO pins
	serial_port->GPIO->MODER = serial_port->SerialPinModeValue;
 800077c:	68bb      	ldr	r3, [r7, #8]
 800077e:	685b      	ldr	r3, [r3, #4]
 8000780:	68ba      	ldr	r2, [r7, #8]
 8000782:	6952      	ldr	r2, [r2, #20]
 8000784:	601a      	str	r2, [r3, #0]

	// enable high speed clock for specific GPIO pins
	serial_port->GPIO->OSPEEDR = serial_port->SerialPinSpeedValue;
 8000786:	68bb      	ldr	r3, [r7, #8]
 8000788:	685b      	ldr	r3, [r3, #4]
 800078a:	68ba      	ldr	r2, [r7, #8]
 800078c:	6992      	ldr	r2, [r2, #24]
 800078e:	609a      	str	r2, [r3, #8]

	// set alternate function to enable USART to external pins
	serial_port->GPIO->AFR[0] |= serial_port->SerialPinAlternatePinValueLow;
 8000790:	68bb      	ldr	r3, [r7, #8]
 8000792:	69d9      	ldr	r1, [r3, #28]
 8000794:	68bb      	ldr	r3, [r7, #8]
 8000796:	685b      	ldr	r3, [r3, #4]
 8000798:	6a1a      	ldr	r2, [r3, #32]
 800079a:	68bb      	ldr	r3, [r7, #8]
 800079c:	685b      	ldr	r3, [r3, #4]
 800079e:	430a      	orrs	r2, r1
 80007a0:	621a      	str	r2, [r3, #32]
	serial_port->GPIO->AFR[1] |= serial_port->SerialPinAlternatePinValueHigh;
 80007a2:	68bb      	ldr	r3, [r7, #8]
 80007a4:	6a19      	ldr	r1, [r3, #32]
 80007a6:	68bb      	ldr	r3, [r7, #8]
 80007a8:	685b      	ldr	r3, [r3, #4]
 80007aa:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80007ac:	68bb      	ldr	r3, [r7, #8]
 80007ae:	685b      	ldr	r3, [r3, #4]
 80007b0:	430a      	orrs	r2, r1
 80007b2:	625a      	str	r2, [r3, #36]	@ 0x24

	// enable the device based on the bits defined in the serial port definition
	RCC->APB1ENR |= serial_port->MaskAPB1ENR;
 80007b4:	68bb      	ldr	r3, [r7, #8]
 80007b6:	68da      	ldr	r2, [r3, #12]
 80007b8:	4b20      	ldr	r3, [pc, #128]	@ (800083c <SerialInitialise+0xf8>)
 80007ba:	69db      	ldr	r3, [r3, #28]
 80007bc:	491f      	ldr	r1, [pc, #124]	@ (800083c <SerialInitialise+0xf8>)
 80007be:	4313      	orrs	r3, r2
 80007c0:	61cb      	str	r3, [r1, #28]
	RCC->APB2ENR |= serial_port->MaskAPB2ENR;
 80007c2:	68bb      	ldr	r3, [r7, #8]
 80007c4:	689a      	ldr	r2, [r3, #8]
 80007c6:	4b1d      	ldr	r3, [pc, #116]	@ (800083c <SerialInitialise+0xf8>)
 80007c8:	699b      	ldr	r3, [r3, #24]
 80007ca:	491c      	ldr	r1, [pc, #112]	@ (800083c <SerialInitialise+0xf8>)
 80007cc:	4313      	orrs	r3, r2
 80007ce:	618b      	str	r3, [r1, #24]

	// Get a pointer to the 16 bits of the BRR register that we want to change
	uint16_t *baud_rate_config = (uint16_t*)&serial_port->UART->BRR; // only 16 bits used!
 80007d0:	68bb      	ldr	r3, [r7, #8]
 80007d2:	681b      	ldr	r3, [r3, #0]
 80007d4:	330c      	adds	r3, #12
 80007d6:	617b      	str	r3, [r7, #20]

	// Baud rate calculation from datasheet
	switch(baudRate){
 80007d8:	68fb      	ldr	r3, [r7, #12]
 80007da:	2b04      	cmp	r3, #4
 80007dc:	d820      	bhi.n	8000820 <SerialInitialise+0xdc>
 80007de:	a201      	add	r2, pc, #4	@ (adr r2, 80007e4 <SerialInitialise+0xa0>)
 80007e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80007e4:	080007f9 	.word	0x080007f9
 80007e8:	08000801 	.word	0x08000801
 80007ec:	08000809 	.word	0x08000809
 80007f0:	08000811 	.word	0x08000811
 80007f4:	08000819 	.word	0x08000819
	case BAUD_9600:
		// NEED TO FIX THIS !
		*baud_rate_config = 0x46;  // 115200 at 8MHz
 80007f8:	697b      	ldr	r3, [r7, #20]
 80007fa:	2246      	movs	r2, #70	@ 0x46
 80007fc:	801a      	strh	r2, [r3, #0]
		break;
 80007fe:	e00f      	b.n	8000820 <SerialInitialise+0xdc>
	case BAUD_19200:
		// NEED TO FIX THIS !
		*baud_rate_config = 0x46;  // 115200 at 8MHz
 8000800:	697b      	ldr	r3, [r7, #20]
 8000802:	2246      	movs	r2, #70	@ 0x46
 8000804:	801a      	strh	r2, [r3, #0]
		break;
 8000806:	e00b      	b.n	8000820 <SerialInitialise+0xdc>
	case BAUD_38400:
		// NEED TO FIX THIS !
		*baud_rate_config = 0x46;  // 115200 at 8MHz
 8000808:	697b      	ldr	r3, [r7, #20]
 800080a:	2246      	movs	r2, #70	@ 0x46
 800080c:	801a      	strh	r2, [r3, #0]
		break;
 800080e:	e007      	b.n	8000820 <SerialInitialise+0xdc>
	case BAUD_57600:
		// NEED TO FIX THIS !
		*baud_rate_config = 0x46;  // 115200 at 8MHz
 8000810:	697b      	ldr	r3, [r7, #20]
 8000812:	2246      	movs	r2, #70	@ 0x46
 8000814:	801a      	strh	r2, [r3, #0]
		break;
 8000816:	e003      	b.n	8000820 <SerialInitialise+0xdc>
	case BAUD_115200:
		*baud_rate_config = 0x46;  // 115200 at 8MHz
 8000818:	697b      	ldr	r3, [r7, #20]
 800081a:	2246      	movs	r2, #70	@ 0x46
 800081c:	801a      	strh	r2, [r3, #0]
		break;
 800081e:	bf00      	nop
	}


	// enable serial port for tx and rx
	serial_port->UART->CR1 |= USART_CR1_TE | USART_CR1_RE | USART_CR1_UE;
 8000820:	68bb      	ldr	r3, [r7, #8]
 8000822:	681b      	ldr	r3, [r3, #0]
 8000824:	681a      	ldr	r2, [r3, #0]
 8000826:	68bb      	ldr	r3, [r7, #8]
 8000828:	681b      	ldr	r3, [r3, #0]
 800082a:	f042 020d 	orr.w	r2, r2, #13
 800082e:	601a      	str	r2, [r3, #0]
}
 8000830:	bf00      	nop
 8000832:	371c      	adds	r7, #28
 8000834:	46bd      	mov	sp, r7
 8000836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800083a:	4770      	bx	lr
 800083c:	40021000 	.word	0x40021000

08000840 <SerialOutputChar>:


// Sends a single byte over the USART
void SerialOutputChar(uint8_t data, SerialPort *serial_port) {
 8000840:	b480      	push	{r7}
 8000842:	b083      	sub	sp, #12
 8000844:	af00      	add	r7, sp, #0
 8000846:	4603      	mov	r3, r0
 8000848:	6039      	str	r1, [r7, #0]
 800084a:	71fb      	strb	r3, [r7, #7]

	while((serial_port->UART->ISR & USART_ISR_TXE) == 0){ // Wait until transmit buffer is empty
 800084c:	bf00      	nop
 800084e:	683b      	ldr	r3, [r7, #0]
 8000850:	681b      	ldr	r3, [r3, #0]
 8000852:	69db      	ldr	r3, [r3, #28]
 8000854:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000858:	2b00      	cmp	r3, #0
 800085a:	d0f8      	beq.n	800084e <SerialOutputChar+0xe>
	}

	serial_port->UART->TDR = data; // Write data to transmit data register
 800085c:	683b      	ldr	r3, [r7, #0]
 800085e:	681b      	ldr	r3, [r3, #0]
 8000860:	79fa      	ldrb	r2, [r7, #7]
 8000862:	b292      	uxth	r2, r2
 8000864:	851a      	strh	r2, [r3, #40]	@ 0x28
}
 8000866:	bf00      	nop
 8000868:	370c      	adds	r7, #12
 800086a:	46bd      	mov	sp, r7
 800086c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000870:	4770      	bx	lr

08000872 <SerialGetChar>:
	serial_port->completion_function(counter);
}


// Receives a single byte from the USART (blocking)
uint8_t SerialGetChar(SerialPort *serial_port) {
 8000872:	b480      	push	{r7}
 8000874:	b083      	sub	sp, #12
 8000876:	af00      	add	r7, sp, #0
 8000878:	6078      	str	r0, [r7, #4]
	while ((serial_port->UART->ISR & USART_ISR_RXNE) == 0); // Wait until data is received
 800087a:	bf00      	nop
 800087c:	687b      	ldr	r3, [r7, #4]
 800087e:	681b      	ldr	r3, [r3, #0]
 8000880:	69db      	ldr	r3, [r3, #28]
 8000882:	f003 0320 	and.w	r3, r3, #32
 8000886:	2b00      	cmp	r3, #0
 8000888:	d0f8      	beq.n	800087c <SerialGetChar+0xa>
	return serial_port->UART->RDR;                          // Return received byte
 800088a:	687b      	ldr	r3, [r7, #4]
 800088c:	681b      	ldr	r3, [r3, #0]
 800088e:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8000890:	b29b      	uxth	r3, r3
 8000892:	b2db      	uxtb	r3, r3
}
 8000894:	4618      	mov	r0, r3
 8000896:	370c      	adds	r7, #12
 8000898:	46bd      	mov	sp, r7
 800089a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800089e:	4770      	bx	lr

080008a0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80008a0:	480d      	ldr	r0, [pc, #52]	@ (80008d8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80008a2:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80008a4:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80008a8:	480c      	ldr	r0, [pc, #48]	@ (80008dc <LoopForever+0x6>)
  ldr r1, =_edata
 80008aa:	490d      	ldr	r1, [pc, #52]	@ (80008e0 <LoopForever+0xa>)
  ldr r2, =_sidata
 80008ac:	4a0d      	ldr	r2, [pc, #52]	@ (80008e4 <LoopForever+0xe>)
  movs r3, #0
 80008ae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80008b0:	e002      	b.n	80008b8 <LoopCopyDataInit>

080008b2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80008b2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80008b4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80008b6:	3304      	adds	r3, #4

080008b8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80008b8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80008ba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80008bc:	d3f9      	bcc.n	80008b2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80008be:	4a0a      	ldr	r2, [pc, #40]	@ (80008e8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80008c0:	4c0a      	ldr	r4, [pc, #40]	@ (80008ec <LoopForever+0x16>)
  movs r3, #0
 80008c2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80008c4:	e001      	b.n	80008ca <LoopFillZerobss>

080008c6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80008c6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80008c8:	3204      	adds	r2, #4

080008ca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80008ca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80008cc:	d3fb      	bcc.n	80008c6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80008ce:	f000 f9c5 	bl	8000c5c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80008d2:	f7ff fd49 	bl	8000368 <main>

080008d6 <LoopForever>:

LoopForever:
  b LoopForever
 80008d6:	e7fe      	b.n	80008d6 <LoopForever>
  ldr   r0, =_estack
 80008d8:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 80008dc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80008e0:	20000084 	.word	0x20000084
  ldr r2, =_sidata
 80008e4:	08001d18 	.word	0x08001d18
  ldr r2, =_sbss
 80008e8:	20000084 	.word	0x20000084
  ldr r4, =_ebss
 80008ec:	200001f0 	.word	0x200001f0

080008f0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80008f0:	e7fe      	b.n	80008f0 <ADC1_2_IRQHandler>
	...

080008f4 <srand>:
 80008f4:	b538      	push	{r3, r4, r5, lr}
 80008f6:	4b10      	ldr	r3, [pc, #64]	@ (8000938 <srand+0x44>)
 80008f8:	681d      	ldr	r5, [r3, #0]
 80008fa:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 80008fc:	4604      	mov	r4, r0
 80008fe:	b9b3      	cbnz	r3, 800092e <srand+0x3a>
 8000900:	2018      	movs	r0, #24
 8000902:	f000 fb33 	bl	8000f6c <malloc>
 8000906:	4602      	mov	r2, r0
 8000908:	6328      	str	r0, [r5, #48]	@ 0x30
 800090a:	b920      	cbnz	r0, 8000916 <srand+0x22>
 800090c:	4b0b      	ldr	r3, [pc, #44]	@ (800093c <srand+0x48>)
 800090e:	480c      	ldr	r0, [pc, #48]	@ (8000940 <srand+0x4c>)
 8000910:	2146      	movs	r1, #70	@ 0x46
 8000912:	f000 f9cb 	bl	8000cac <__assert_func>
 8000916:	490b      	ldr	r1, [pc, #44]	@ (8000944 <srand+0x50>)
 8000918:	4b0b      	ldr	r3, [pc, #44]	@ (8000948 <srand+0x54>)
 800091a:	e9c0 1300 	strd	r1, r3, [r0]
 800091e:	4b0b      	ldr	r3, [pc, #44]	@ (800094c <srand+0x58>)
 8000920:	6083      	str	r3, [r0, #8]
 8000922:	230b      	movs	r3, #11
 8000924:	8183      	strh	r3, [r0, #12]
 8000926:	2100      	movs	r1, #0
 8000928:	2001      	movs	r0, #1
 800092a:	e9c2 0104 	strd	r0, r1, [r2, #16]
 800092e:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8000930:	2200      	movs	r2, #0
 8000932:	611c      	str	r4, [r3, #16]
 8000934:	615a      	str	r2, [r3, #20]
 8000936:	bd38      	pop	{r3, r4, r5, pc}
 8000938:	20000034 	.word	0x20000034
 800093c:	08001c27 	.word	0x08001c27
 8000940:	08001c3e 	.word	0x08001c3e
 8000944:	abcd330e 	.word	0xabcd330e
 8000948:	e66d1234 	.word	0xe66d1234
 800094c:	0005deec 	.word	0x0005deec

08000950 <rand>:
 8000950:	4b16      	ldr	r3, [pc, #88]	@ (80009ac <rand+0x5c>)
 8000952:	b510      	push	{r4, lr}
 8000954:	681c      	ldr	r4, [r3, #0]
 8000956:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8000958:	b9b3      	cbnz	r3, 8000988 <rand+0x38>
 800095a:	2018      	movs	r0, #24
 800095c:	f000 fb06 	bl	8000f6c <malloc>
 8000960:	4602      	mov	r2, r0
 8000962:	6320      	str	r0, [r4, #48]	@ 0x30
 8000964:	b920      	cbnz	r0, 8000970 <rand+0x20>
 8000966:	4b12      	ldr	r3, [pc, #72]	@ (80009b0 <rand+0x60>)
 8000968:	4812      	ldr	r0, [pc, #72]	@ (80009b4 <rand+0x64>)
 800096a:	2152      	movs	r1, #82	@ 0x52
 800096c:	f000 f99e 	bl	8000cac <__assert_func>
 8000970:	4911      	ldr	r1, [pc, #68]	@ (80009b8 <rand+0x68>)
 8000972:	4b12      	ldr	r3, [pc, #72]	@ (80009bc <rand+0x6c>)
 8000974:	e9c0 1300 	strd	r1, r3, [r0]
 8000978:	4b11      	ldr	r3, [pc, #68]	@ (80009c0 <rand+0x70>)
 800097a:	6083      	str	r3, [r0, #8]
 800097c:	230b      	movs	r3, #11
 800097e:	8183      	strh	r3, [r0, #12]
 8000980:	2100      	movs	r1, #0
 8000982:	2001      	movs	r0, #1
 8000984:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8000988:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800098a:	480e      	ldr	r0, [pc, #56]	@ (80009c4 <rand+0x74>)
 800098c:	690b      	ldr	r3, [r1, #16]
 800098e:	694c      	ldr	r4, [r1, #20]
 8000990:	4a0d      	ldr	r2, [pc, #52]	@ (80009c8 <rand+0x78>)
 8000992:	4358      	muls	r0, r3
 8000994:	fb02 0004 	mla	r0, r2, r4, r0
 8000998:	fba3 3202 	umull	r3, r2, r3, r2
 800099c:	3301      	adds	r3, #1
 800099e:	eb40 0002 	adc.w	r0, r0, r2
 80009a2:	e9c1 3004 	strd	r3, r0, [r1, #16]
 80009a6:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 80009aa:	bd10      	pop	{r4, pc}
 80009ac:	20000034 	.word	0x20000034
 80009b0:	08001c27 	.word	0x08001c27
 80009b4:	08001c3e 	.word	0x08001c3e
 80009b8:	abcd330e 	.word	0xabcd330e
 80009bc:	e66d1234 	.word	0xe66d1234
 80009c0:	0005deec 	.word	0x0005deec
 80009c4:	5851f42d 	.word	0x5851f42d
 80009c8:	4c957f2d 	.word	0x4c957f2d

080009cc <std>:
 80009cc:	2300      	movs	r3, #0
 80009ce:	b510      	push	{r4, lr}
 80009d0:	4604      	mov	r4, r0
 80009d2:	e9c0 3300 	strd	r3, r3, [r0]
 80009d6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80009da:	6083      	str	r3, [r0, #8]
 80009dc:	8181      	strh	r1, [r0, #12]
 80009de:	6643      	str	r3, [r0, #100]	@ 0x64
 80009e0:	81c2      	strh	r2, [r0, #14]
 80009e2:	6183      	str	r3, [r0, #24]
 80009e4:	4619      	mov	r1, r3
 80009e6:	2208      	movs	r2, #8
 80009e8:	305c      	adds	r0, #92	@ 0x5c
 80009ea:	f000 f929 	bl	8000c40 <memset>
 80009ee:	4b0d      	ldr	r3, [pc, #52]	@ (8000a24 <std+0x58>)
 80009f0:	6263      	str	r3, [r4, #36]	@ 0x24
 80009f2:	4b0d      	ldr	r3, [pc, #52]	@ (8000a28 <std+0x5c>)
 80009f4:	62a3      	str	r3, [r4, #40]	@ 0x28
 80009f6:	4b0d      	ldr	r3, [pc, #52]	@ (8000a2c <std+0x60>)
 80009f8:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80009fa:	4b0d      	ldr	r3, [pc, #52]	@ (8000a30 <std+0x64>)
 80009fc:	6323      	str	r3, [r4, #48]	@ 0x30
 80009fe:	4b0d      	ldr	r3, [pc, #52]	@ (8000a34 <std+0x68>)
 8000a00:	6224      	str	r4, [r4, #32]
 8000a02:	429c      	cmp	r4, r3
 8000a04:	d006      	beq.n	8000a14 <std+0x48>
 8000a06:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8000a0a:	4294      	cmp	r4, r2
 8000a0c:	d002      	beq.n	8000a14 <std+0x48>
 8000a0e:	33d0      	adds	r3, #208	@ 0xd0
 8000a10:	429c      	cmp	r4, r3
 8000a12:	d105      	bne.n	8000a20 <std+0x54>
 8000a14:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8000a18:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000a1c:	f000 b942 	b.w	8000ca4 <__retarget_lock_init_recursive>
 8000a20:	bd10      	pop	{r4, pc}
 8000a22:	bf00      	nop
 8000a24:	08001549 	.word	0x08001549
 8000a28:	0800156b 	.word	0x0800156b
 8000a2c:	080015a3 	.word	0x080015a3
 8000a30:	080015c7 	.word	0x080015c7
 8000a34:	200000a4 	.word	0x200000a4

08000a38 <stdio_exit_handler>:
 8000a38:	4a02      	ldr	r2, [pc, #8]	@ (8000a44 <stdio_exit_handler+0xc>)
 8000a3a:	4903      	ldr	r1, [pc, #12]	@ (8000a48 <stdio_exit_handler+0x10>)
 8000a3c:	4803      	ldr	r0, [pc, #12]	@ (8000a4c <stdio_exit_handler+0x14>)
 8000a3e:	f000 b869 	b.w	8000b14 <_fwalk_sglue>
 8000a42:	bf00      	nop
 8000a44:	20000028 	.word	0x20000028
 8000a48:	080014e1 	.word	0x080014e1
 8000a4c:	20000038 	.word	0x20000038

08000a50 <cleanup_stdio>:
 8000a50:	6841      	ldr	r1, [r0, #4]
 8000a52:	4b0c      	ldr	r3, [pc, #48]	@ (8000a84 <cleanup_stdio+0x34>)
 8000a54:	4299      	cmp	r1, r3
 8000a56:	b510      	push	{r4, lr}
 8000a58:	4604      	mov	r4, r0
 8000a5a:	d001      	beq.n	8000a60 <cleanup_stdio+0x10>
 8000a5c:	f000 fd40 	bl	80014e0 <_fflush_r>
 8000a60:	68a1      	ldr	r1, [r4, #8]
 8000a62:	4b09      	ldr	r3, [pc, #36]	@ (8000a88 <cleanup_stdio+0x38>)
 8000a64:	4299      	cmp	r1, r3
 8000a66:	d002      	beq.n	8000a6e <cleanup_stdio+0x1e>
 8000a68:	4620      	mov	r0, r4
 8000a6a:	f000 fd39 	bl	80014e0 <_fflush_r>
 8000a6e:	68e1      	ldr	r1, [r4, #12]
 8000a70:	4b06      	ldr	r3, [pc, #24]	@ (8000a8c <cleanup_stdio+0x3c>)
 8000a72:	4299      	cmp	r1, r3
 8000a74:	d004      	beq.n	8000a80 <cleanup_stdio+0x30>
 8000a76:	4620      	mov	r0, r4
 8000a78:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000a7c:	f000 bd30 	b.w	80014e0 <_fflush_r>
 8000a80:	bd10      	pop	{r4, pc}
 8000a82:	bf00      	nop
 8000a84:	200000a4 	.word	0x200000a4
 8000a88:	2000010c 	.word	0x2000010c
 8000a8c:	20000174 	.word	0x20000174

08000a90 <global_stdio_init.part.0>:
 8000a90:	b510      	push	{r4, lr}
 8000a92:	4b0b      	ldr	r3, [pc, #44]	@ (8000ac0 <global_stdio_init.part.0+0x30>)
 8000a94:	4c0b      	ldr	r4, [pc, #44]	@ (8000ac4 <global_stdio_init.part.0+0x34>)
 8000a96:	4a0c      	ldr	r2, [pc, #48]	@ (8000ac8 <global_stdio_init.part.0+0x38>)
 8000a98:	601a      	str	r2, [r3, #0]
 8000a9a:	4620      	mov	r0, r4
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	2104      	movs	r1, #4
 8000aa0:	f7ff ff94 	bl	80009cc <std>
 8000aa4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8000aa8:	2201      	movs	r2, #1
 8000aaa:	2109      	movs	r1, #9
 8000aac:	f7ff ff8e 	bl	80009cc <std>
 8000ab0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8000ab4:	2202      	movs	r2, #2
 8000ab6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000aba:	2112      	movs	r1, #18
 8000abc:	f7ff bf86 	b.w	80009cc <std>
 8000ac0:	200001dc 	.word	0x200001dc
 8000ac4:	200000a4 	.word	0x200000a4
 8000ac8:	08000a39 	.word	0x08000a39

08000acc <__sfp_lock_acquire>:
 8000acc:	4801      	ldr	r0, [pc, #4]	@ (8000ad4 <__sfp_lock_acquire+0x8>)
 8000ace:	f000 b8ea 	b.w	8000ca6 <__retarget_lock_acquire_recursive>
 8000ad2:	bf00      	nop
 8000ad4:	200001e1 	.word	0x200001e1

08000ad8 <__sfp_lock_release>:
 8000ad8:	4801      	ldr	r0, [pc, #4]	@ (8000ae0 <__sfp_lock_release+0x8>)
 8000ada:	f000 b8e5 	b.w	8000ca8 <__retarget_lock_release_recursive>
 8000ade:	bf00      	nop
 8000ae0:	200001e1 	.word	0x200001e1

08000ae4 <__sinit>:
 8000ae4:	b510      	push	{r4, lr}
 8000ae6:	4604      	mov	r4, r0
 8000ae8:	f7ff fff0 	bl	8000acc <__sfp_lock_acquire>
 8000aec:	6a23      	ldr	r3, [r4, #32]
 8000aee:	b11b      	cbz	r3, 8000af8 <__sinit+0x14>
 8000af0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000af4:	f7ff bff0 	b.w	8000ad8 <__sfp_lock_release>
 8000af8:	4b04      	ldr	r3, [pc, #16]	@ (8000b0c <__sinit+0x28>)
 8000afa:	6223      	str	r3, [r4, #32]
 8000afc:	4b04      	ldr	r3, [pc, #16]	@ (8000b10 <__sinit+0x2c>)
 8000afe:	681b      	ldr	r3, [r3, #0]
 8000b00:	2b00      	cmp	r3, #0
 8000b02:	d1f5      	bne.n	8000af0 <__sinit+0xc>
 8000b04:	f7ff ffc4 	bl	8000a90 <global_stdio_init.part.0>
 8000b08:	e7f2      	b.n	8000af0 <__sinit+0xc>
 8000b0a:	bf00      	nop
 8000b0c:	08000a51 	.word	0x08000a51
 8000b10:	200001dc 	.word	0x200001dc

08000b14 <_fwalk_sglue>:
 8000b14:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000b18:	4607      	mov	r7, r0
 8000b1a:	4688      	mov	r8, r1
 8000b1c:	4614      	mov	r4, r2
 8000b1e:	2600      	movs	r6, #0
 8000b20:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8000b24:	f1b9 0901 	subs.w	r9, r9, #1
 8000b28:	d505      	bpl.n	8000b36 <_fwalk_sglue+0x22>
 8000b2a:	6824      	ldr	r4, [r4, #0]
 8000b2c:	2c00      	cmp	r4, #0
 8000b2e:	d1f7      	bne.n	8000b20 <_fwalk_sglue+0xc>
 8000b30:	4630      	mov	r0, r6
 8000b32:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000b36:	89ab      	ldrh	r3, [r5, #12]
 8000b38:	2b01      	cmp	r3, #1
 8000b3a:	d907      	bls.n	8000b4c <_fwalk_sglue+0x38>
 8000b3c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8000b40:	3301      	adds	r3, #1
 8000b42:	d003      	beq.n	8000b4c <_fwalk_sglue+0x38>
 8000b44:	4629      	mov	r1, r5
 8000b46:	4638      	mov	r0, r7
 8000b48:	47c0      	blx	r8
 8000b4a:	4306      	orrs	r6, r0
 8000b4c:	3568      	adds	r5, #104	@ 0x68
 8000b4e:	e7e9      	b.n	8000b24 <_fwalk_sglue+0x10>

08000b50 <iprintf>:
 8000b50:	b40f      	push	{r0, r1, r2, r3}
 8000b52:	b507      	push	{r0, r1, r2, lr}
 8000b54:	4906      	ldr	r1, [pc, #24]	@ (8000b70 <iprintf+0x20>)
 8000b56:	ab04      	add	r3, sp, #16
 8000b58:	6808      	ldr	r0, [r1, #0]
 8000b5a:	f853 2b04 	ldr.w	r2, [r3], #4
 8000b5e:	6881      	ldr	r1, [r0, #8]
 8000b60:	9301      	str	r3, [sp, #4]
 8000b62:	f000 f8eb 	bl	8000d3c <_vfiprintf_r>
 8000b66:	b003      	add	sp, #12
 8000b68:	f85d eb04 	ldr.w	lr, [sp], #4
 8000b6c:	b004      	add	sp, #16
 8000b6e:	4770      	bx	lr
 8000b70:	20000034 	.word	0x20000034

08000b74 <putchar>:
 8000b74:	4b02      	ldr	r3, [pc, #8]	@ (8000b80 <putchar+0xc>)
 8000b76:	4601      	mov	r1, r0
 8000b78:	6818      	ldr	r0, [r3, #0]
 8000b7a:	6882      	ldr	r2, [r0, #8]
 8000b7c:	f000 be30 	b.w	80017e0 <_putc_r>
 8000b80:	20000034 	.word	0x20000034

08000b84 <_puts_r>:
 8000b84:	6a03      	ldr	r3, [r0, #32]
 8000b86:	b570      	push	{r4, r5, r6, lr}
 8000b88:	6884      	ldr	r4, [r0, #8]
 8000b8a:	4605      	mov	r5, r0
 8000b8c:	460e      	mov	r6, r1
 8000b8e:	b90b      	cbnz	r3, 8000b94 <_puts_r+0x10>
 8000b90:	f7ff ffa8 	bl	8000ae4 <__sinit>
 8000b94:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8000b96:	07db      	lsls	r3, r3, #31
 8000b98:	d405      	bmi.n	8000ba6 <_puts_r+0x22>
 8000b9a:	89a3      	ldrh	r3, [r4, #12]
 8000b9c:	0598      	lsls	r0, r3, #22
 8000b9e:	d402      	bmi.n	8000ba6 <_puts_r+0x22>
 8000ba0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8000ba2:	f000 f880 	bl	8000ca6 <__retarget_lock_acquire_recursive>
 8000ba6:	89a3      	ldrh	r3, [r4, #12]
 8000ba8:	0719      	lsls	r1, r3, #28
 8000baa:	d502      	bpl.n	8000bb2 <_puts_r+0x2e>
 8000bac:	6923      	ldr	r3, [r4, #16]
 8000bae:	2b00      	cmp	r3, #0
 8000bb0:	d135      	bne.n	8000c1e <_puts_r+0x9a>
 8000bb2:	4621      	mov	r1, r4
 8000bb4:	4628      	mov	r0, r5
 8000bb6:	f000 fd5b 	bl	8001670 <__swsetup_r>
 8000bba:	b380      	cbz	r0, 8000c1e <_puts_r+0x9a>
 8000bbc:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 8000bc0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8000bc2:	07da      	lsls	r2, r3, #31
 8000bc4:	d405      	bmi.n	8000bd2 <_puts_r+0x4e>
 8000bc6:	89a3      	ldrh	r3, [r4, #12]
 8000bc8:	059b      	lsls	r3, r3, #22
 8000bca:	d402      	bmi.n	8000bd2 <_puts_r+0x4e>
 8000bcc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8000bce:	f000 f86b 	bl	8000ca8 <__retarget_lock_release_recursive>
 8000bd2:	4628      	mov	r0, r5
 8000bd4:	bd70      	pop	{r4, r5, r6, pc}
 8000bd6:	2b00      	cmp	r3, #0
 8000bd8:	da04      	bge.n	8000be4 <_puts_r+0x60>
 8000bda:	69a2      	ldr	r2, [r4, #24]
 8000bdc:	429a      	cmp	r2, r3
 8000bde:	dc17      	bgt.n	8000c10 <_puts_r+0x8c>
 8000be0:	290a      	cmp	r1, #10
 8000be2:	d015      	beq.n	8000c10 <_puts_r+0x8c>
 8000be4:	6823      	ldr	r3, [r4, #0]
 8000be6:	1c5a      	adds	r2, r3, #1
 8000be8:	6022      	str	r2, [r4, #0]
 8000bea:	7019      	strb	r1, [r3, #0]
 8000bec:	68a3      	ldr	r3, [r4, #8]
 8000bee:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8000bf2:	3b01      	subs	r3, #1
 8000bf4:	60a3      	str	r3, [r4, #8]
 8000bf6:	2900      	cmp	r1, #0
 8000bf8:	d1ed      	bne.n	8000bd6 <_puts_r+0x52>
 8000bfa:	2b00      	cmp	r3, #0
 8000bfc:	da11      	bge.n	8000c22 <_puts_r+0x9e>
 8000bfe:	4622      	mov	r2, r4
 8000c00:	210a      	movs	r1, #10
 8000c02:	4628      	mov	r0, r5
 8000c04:	f000 fcf6 	bl	80015f4 <__swbuf_r>
 8000c08:	3001      	adds	r0, #1
 8000c0a:	d0d7      	beq.n	8000bbc <_puts_r+0x38>
 8000c0c:	250a      	movs	r5, #10
 8000c0e:	e7d7      	b.n	8000bc0 <_puts_r+0x3c>
 8000c10:	4622      	mov	r2, r4
 8000c12:	4628      	mov	r0, r5
 8000c14:	f000 fcee 	bl	80015f4 <__swbuf_r>
 8000c18:	3001      	adds	r0, #1
 8000c1a:	d1e7      	bne.n	8000bec <_puts_r+0x68>
 8000c1c:	e7ce      	b.n	8000bbc <_puts_r+0x38>
 8000c1e:	3e01      	subs	r6, #1
 8000c20:	e7e4      	b.n	8000bec <_puts_r+0x68>
 8000c22:	6823      	ldr	r3, [r4, #0]
 8000c24:	1c5a      	adds	r2, r3, #1
 8000c26:	6022      	str	r2, [r4, #0]
 8000c28:	220a      	movs	r2, #10
 8000c2a:	701a      	strb	r2, [r3, #0]
 8000c2c:	e7ee      	b.n	8000c0c <_puts_r+0x88>
	...

08000c30 <puts>:
 8000c30:	4b02      	ldr	r3, [pc, #8]	@ (8000c3c <puts+0xc>)
 8000c32:	4601      	mov	r1, r0
 8000c34:	6818      	ldr	r0, [r3, #0]
 8000c36:	f7ff bfa5 	b.w	8000b84 <_puts_r>
 8000c3a:	bf00      	nop
 8000c3c:	20000034 	.word	0x20000034

08000c40 <memset>:
 8000c40:	4402      	add	r2, r0
 8000c42:	4603      	mov	r3, r0
 8000c44:	4293      	cmp	r3, r2
 8000c46:	d100      	bne.n	8000c4a <memset+0xa>
 8000c48:	4770      	bx	lr
 8000c4a:	f803 1b01 	strb.w	r1, [r3], #1
 8000c4e:	e7f9      	b.n	8000c44 <memset+0x4>

08000c50 <__errno>:
 8000c50:	4b01      	ldr	r3, [pc, #4]	@ (8000c58 <__errno+0x8>)
 8000c52:	6818      	ldr	r0, [r3, #0]
 8000c54:	4770      	bx	lr
 8000c56:	bf00      	nop
 8000c58:	20000034 	.word	0x20000034

08000c5c <__libc_init_array>:
 8000c5c:	b570      	push	{r4, r5, r6, lr}
 8000c5e:	4d0d      	ldr	r5, [pc, #52]	@ (8000c94 <__libc_init_array+0x38>)
 8000c60:	4c0d      	ldr	r4, [pc, #52]	@ (8000c98 <__libc_init_array+0x3c>)
 8000c62:	1b64      	subs	r4, r4, r5
 8000c64:	10a4      	asrs	r4, r4, #2
 8000c66:	2600      	movs	r6, #0
 8000c68:	42a6      	cmp	r6, r4
 8000c6a:	d109      	bne.n	8000c80 <__libc_init_array+0x24>
 8000c6c:	4d0b      	ldr	r5, [pc, #44]	@ (8000c9c <__libc_init_array+0x40>)
 8000c6e:	4c0c      	ldr	r4, [pc, #48]	@ (8000ca0 <__libc_init_array+0x44>)
 8000c70:	f000 fef8 	bl	8001a64 <_init>
 8000c74:	1b64      	subs	r4, r4, r5
 8000c76:	10a4      	asrs	r4, r4, #2
 8000c78:	2600      	movs	r6, #0
 8000c7a:	42a6      	cmp	r6, r4
 8000c7c:	d105      	bne.n	8000c8a <__libc_init_array+0x2e>
 8000c7e:	bd70      	pop	{r4, r5, r6, pc}
 8000c80:	f855 3b04 	ldr.w	r3, [r5], #4
 8000c84:	4798      	blx	r3
 8000c86:	3601      	adds	r6, #1
 8000c88:	e7ee      	b.n	8000c68 <__libc_init_array+0xc>
 8000c8a:	f855 3b04 	ldr.w	r3, [r5], #4
 8000c8e:	4798      	blx	r3
 8000c90:	3601      	adds	r6, #1
 8000c92:	e7f2      	b.n	8000c7a <__libc_init_array+0x1e>
 8000c94:	08001d10 	.word	0x08001d10
 8000c98:	08001d10 	.word	0x08001d10
 8000c9c:	08001d10 	.word	0x08001d10
 8000ca0:	08001d14 	.word	0x08001d14

08000ca4 <__retarget_lock_init_recursive>:
 8000ca4:	4770      	bx	lr

08000ca6 <__retarget_lock_acquire_recursive>:
 8000ca6:	4770      	bx	lr

08000ca8 <__retarget_lock_release_recursive>:
 8000ca8:	4770      	bx	lr
	...

08000cac <__assert_func>:
 8000cac:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8000cae:	4614      	mov	r4, r2
 8000cb0:	461a      	mov	r2, r3
 8000cb2:	4b09      	ldr	r3, [pc, #36]	@ (8000cd8 <__assert_func+0x2c>)
 8000cb4:	681b      	ldr	r3, [r3, #0]
 8000cb6:	4605      	mov	r5, r0
 8000cb8:	68d8      	ldr	r0, [r3, #12]
 8000cba:	b14c      	cbz	r4, 8000cd0 <__assert_func+0x24>
 8000cbc:	4b07      	ldr	r3, [pc, #28]	@ (8000cdc <__assert_func+0x30>)
 8000cbe:	9100      	str	r1, [sp, #0]
 8000cc0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8000cc4:	4906      	ldr	r1, [pc, #24]	@ (8000ce0 <__assert_func+0x34>)
 8000cc6:	462b      	mov	r3, r5
 8000cc8:	f000 fc82 	bl	80015d0 <fiprintf>
 8000ccc:	f000 fe34 	bl	8001938 <abort>
 8000cd0:	4b04      	ldr	r3, [pc, #16]	@ (8000ce4 <__assert_func+0x38>)
 8000cd2:	461c      	mov	r4, r3
 8000cd4:	e7f3      	b.n	8000cbe <__assert_func+0x12>
 8000cd6:	bf00      	nop
 8000cd8:	20000034 	.word	0x20000034
 8000cdc:	08001c96 	.word	0x08001c96
 8000ce0:	08001ca3 	.word	0x08001ca3
 8000ce4:	08001cd1 	.word	0x08001cd1

08000ce8 <__sfputc_r>:
 8000ce8:	6893      	ldr	r3, [r2, #8]
 8000cea:	3b01      	subs	r3, #1
 8000cec:	2b00      	cmp	r3, #0
 8000cee:	b410      	push	{r4}
 8000cf0:	6093      	str	r3, [r2, #8]
 8000cf2:	da08      	bge.n	8000d06 <__sfputc_r+0x1e>
 8000cf4:	6994      	ldr	r4, [r2, #24]
 8000cf6:	42a3      	cmp	r3, r4
 8000cf8:	db01      	blt.n	8000cfe <__sfputc_r+0x16>
 8000cfa:	290a      	cmp	r1, #10
 8000cfc:	d103      	bne.n	8000d06 <__sfputc_r+0x1e>
 8000cfe:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000d02:	f000 bc77 	b.w	80015f4 <__swbuf_r>
 8000d06:	6813      	ldr	r3, [r2, #0]
 8000d08:	1c58      	adds	r0, r3, #1
 8000d0a:	6010      	str	r0, [r2, #0]
 8000d0c:	7019      	strb	r1, [r3, #0]
 8000d0e:	4608      	mov	r0, r1
 8000d10:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000d14:	4770      	bx	lr

08000d16 <__sfputs_r>:
 8000d16:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000d18:	4606      	mov	r6, r0
 8000d1a:	460f      	mov	r7, r1
 8000d1c:	4614      	mov	r4, r2
 8000d1e:	18d5      	adds	r5, r2, r3
 8000d20:	42ac      	cmp	r4, r5
 8000d22:	d101      	bne.n	8000d28 <__sfputs_r+0x12>
 8000d24:	2000      	movs	r0, #0
 8000d26:	e007      	b.n	8000d38 <__sfputs_r+0x22>
 8000d28:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000d2c:	463a      	mov	r2, r7
 8000d2e:	4630      	mov	r0, r6
 8000d30:	f7ff ffda 	bl	8000ce8 <__sfputc_r>
 8000d34:	1c43      	adds	r3, r0, #1
 8000d36:	d1f3      	bne.n	8000d20 <__sfputs_r+0xa>
 8000d38:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08000d3c <_vfiprintf_r>:
 8000d3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000d40:	460d      	mov	r5, r1
 8000d42:	b09d      	sub	sp, #116	@ 0x74
 8000d44:	4614      	mov	r4, r2
 8000d46:	4698      	mov	r8, r3
 8000d48:	4606      	mov	r6, r0
 8000d4a:	b118      	cbz	r0, 8000d54 <_vfiprintf_r+0x18>
 8000d4c:	6a03      	ldr	r3, [r0, #32]
 8000d4e:	b90b      	cbnz	r3, 8000d54 <_vfiprintf_r+0x18>
 8000d50:	f7ff fec8 	bl	8000ae4 <__sinit>
 8000d54:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8000d56:	07d9      	lsls	r1, r3, #31
 8000d58:	d405      	bmi.n	8000d66 <_vfiprintf_r+0x2a>
 8000d5a:	89ab      	ldrh	r3, [r5, #12]
 8000d5c:	059a      	lsls	r2, r3, #22
 8000d5e:	d402      	bmi.n	8000d66 <_vfiprintf_r+0x2a>
 8000d60:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8000d62:	f7ff ffa0 	bl	8000ca6 <__retarget_lock_acquire_recursive>
 8000d66:	89ab      	ldrh	r3, [r5, #12]
 8000d68:	071b      	lsls	r3, r3, #28
 8000d6a:	d501      	bpl.n	8000d70 <_vfiprintf_r+0x34>
 8000d6c:	692b      	ldr	r3, [r5, #16]
 8000d6e:	b99b      	cbnz	r3, 8000d98 <_vfiprintf_r+0x5c>
 8000d70:	4629      	mov	r1, r5
 8000d72:	4630      	mov	r0, r6
 8000d74:	f000 fc7c 	bl	8001670 <__swsetup_r>
 8000d78:	b170      	cbz	r0, 8000d98 <_vfiprintf_r+0x5c>
 8000d7a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8000d7c:	07dc      	lsls	r4, r3, #31
 8000d7e:	d504      	bpl.n	8000d8a <_vfiprintf_r+0x4e>
 8000d80:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000d84:	b01d      	add	sp, #116	@ 0x74
 8000d86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000d8a:	89ab      	ldrh	r3, [r5, #12]
 8000d8c:	0598      	lsls	r0, r3, #22
 8000d8e:	d4f7      	bmi.n	8000d80 <_vfiprintf_r+0x44>
 8000d90:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8000d92:	f7ff ff89 	bl	8000ca8 <__retarget_lock_release_recursive>
 8000d96:	e7f3      	b.n	8000d80 <_vfiprintf_r+0x44>
 8000d98:	2300      	movs	r3, #0
 8000d9a:	9309      	str	r3, [sp, #36]	@ 0x24
 8000d9c:	2320      	movs	r3, #32
 8000d9e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8000da2:	f8cd 800c 	str.w	r8, [sp, #12]
 8000da6:	2330      	movs	r3, #48	@ 0x30
 8000da8:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8000f58 <_vfiprintf_r+0x21c>
 8000dac:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8000db0:	f04f 0901 	mov.w	r9, #1
 8000db4:	4623      	mov	r3, r4
 8000db6:	469a      	mov	sl, r3
 8000db8:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000dbc:	b10a      	cbz	r2, 8000dc2 <_vfiprintf_r+0x86>
 8000dbe:	2a25      	cmp	r2, #37	@ 0x25
 8000dc0:	d1f9      	bne.n	8000db6 <_vfiprintf_r+0x7a>
 8000dc2:	ebba 0b04 	subs.w	fp, sl, r4
 8000dc6:	d00b      	beq.n	8000de0 <_vfiprintf_r+0xa4>
 8000dc8:	465b      	mov	r3, fp
 8000dca:	4622      	mov	r2, r4
 8000dcc:	4629      	mov	r1, r5
 8000dce:	4630      	mov	r0, r6
 8000dd0:	f7ff ffa1 	bl	8000d16 <__sfputs_r>
 8000dd4:	3001      	adds	r0, #1
 8000dd6:	f000 80a7 	beq.w	8000f28 <_vfiprintf_r+0x1ec>
 8000dda:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8000ddc:	445a      	add	r2, fp
 8000dde:	9209      	str	r2, [sp, #36]	@ 0x24
 8000de0:	f89a 3000 	ldrb.w	r3, [sl]
 8000de4:	2b00      	cmp	r3, #0
 8000de6:	f000 809f 	beq.w	8000f28 <_vfiprintf_r+0x1ec>
 8000dea:	2300      	movs	r3, #0
 8000dec:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000df0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8000df4:	f10a 0a01 	add.w	sl, sl, #1
 8000df8:	9304      	str	r3, [sp, #16]
 8000dfa:	9307      	str	r3, [sp, #28]
 8000dfc:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8000e00:	931a      	str	r3, [sp, #104]	@ 0x68
 8000e02:	4654      	mov	r4, sl
 8000e04:	2205      	movs	r2, #5
 8000e06:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000e0a:	4853      	ldr	r0, [pc, #332]	@ (8000f58 <_vfiprintf_r+0x21c>)
 8000e0c:	f7ff f9e8 	bl	80001e0 <memchr>
 8000e10:	9a04      	ldr	r2, [sp, #16]
 8000e12:	b9d8      	cbnz	r0, 8000e4c <_vfiprintf_r+0x110>
 8000e14:	06d1      	lsls	r1, r2, #27
 8000e16:	bf44      	itt	mi
 8000e18:	2320      	movmi	r3, #32
 8000e1a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8000e1e:	0713      	lsls	r3, r2, #28
 8000e20:	bf44      	itt	mi
 8000e22:	232b      	movmi	r3, #43	@ 0x2b
 8000e24:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8000e28:	f89a 3000 	ldrb.w	r3, [sl]
 8000e2c:	2b2a      	cmp	r3, #42	@ 0x2a
 8000e2e:	d015      	beq.n	8000e5c <_vfiprintf_r+0x120>
 8000e30:	9a07      	ldr	r2, [sp, #28]
 8000e32:	4654      	mov	r4, sl
 8000e34:	2000      	movs	r0, #0
 8000e36:	f04f 0c0a 	mov.w	ip, #10
 8000e3a:	4621      	mov	r1, r4
 8000e3c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000e40:	3b30      	subs	r3, #48	@ 0x30
 8000e42:	2b09      	cmp	r3, #9
 8000e44:	d94b      	bls.n	8000ede <_vfiprintf_r+0x1a2>
 8000e46:	b1b0      	cbz	r0, 8000e76 <_vfiprintf_r+0x13a>
 8000e48:	9207      	str	r2, [sp, #28]
 8000e4a:	e014      	b.n	8000e76 <_vfiprintf_r+0x13a>
 8000e4c:	eba0 0308 	sub.w	r3, r0, r8
 8000e50:	fa09 f303 	lsl.w	r3, r9, r3
 8000e54:	4313      	orrs	r3, r2
 8000e56:	9304      	str	r3, [sp, #16]
 8000e58:	46a2      	mov	sl, r4
 8000e5a:	e7d2      	b.n	8000e02 <_vfiprintf_r+0xc6>
 8000e5c:	9b03      	ldr	r3, [sp, #12]
 8000e5e:	1d19      	adds	r1, r3, #4
 8000e60:	681b      	ldr	r3, [r3, #0]
 8000e62:	9103      	str	r1, [sp, #12]
 8000e64:	2b00      	cmp	r3, #0
 8000e66:	bfbb      	ittet	lt
 8000e68:	425b      	neglt	r3, r3
 8000e6a:	f042 0202 	orrlt.w	r2, r2, #2
 8000e6e:	9307      	strge	r3, [sp, #28]
 8000e70:	9307      	strlt	r3, [sp, #28]
 8000e72:	bfb8      	it	lt
 8000e74:	9204      	strlt	r2, [sp, #16]
 8000e76:	7823      	ldrb	r3, [r4, #0]
 8000e78:	2b2e      	cmp	r3, #46	@ 0x2e
 8000e7a:	d10a      	bne.n	8000e92 <_vfiprintf_r+0x156>
 8000e7c:	7863      	ldrb	r3, [r4, #1]
 8000e7e:	2b2a      	cmp	r3, #42	@ 0x2a
 8000e80:	d132      	bne.n	8000ee8 <_vfiprintf_r+0x1ac>
 8000e82:	9b03      	ldr	r3, [sp, #12]
 8000e84:	1d1a      	adds	r2, r3, #4
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	9203      	str	r2, [sp, #12]
 8000e8a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8000e8e:	3402      	adds	r4, #2
 8000e90:	9305      	str	r3, [sp, #20]
 8000e92:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8000f68 <_vfiprintf_r+0x22c>
 8000e96:	7821      	ldrb	r1, [r4, #0]
 8000e98:	2203      	movs	r2, #3
 8000e9a:	4650      	mov	r0, sl
 8000e9c:	f7ff f9a0 	bl	80001e0 <memchr>
 8000ea0:	b138      	cbz	r0, 8000eb2 <_vfiprintf_r+0x176>
 8000ea2:	9b04      	ldr	r3, [sp, #16]
 8000ea4:	eba0 000a 	sub.w	r0, r0, sl
 8000ea8:	2240      	movs	r2, #64	@ 0x40
 8000eaa:	4082      	lsls	r2, r0
 8000eac:	4313      	orrs	r3, r2
 8000eae:	3401      	adds	r4, #1
 8000eb0:	9304      	str	r3, [sp, #16]
 8000eb2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000eb6:	4829      	ldr	r0, [pc, #164]	@ (8000f5c <_vfiprintf_r+0x220>)
 8000eb8:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8000ebc:	2206      	movs	r2, #6
 8000ebe:	f7ff f98f 	bl	80001e0 <memchr>
 8000ec2:	2800      	cmp	r0, #0
 8000ec4:	d03f      	beq.n	8000f46 <_vfiprintf_r+0x20a>
 8000ec6:	4b26      	ldr	r3, [pc, #152]	@ (8000f60 <_vfiprintf_r+0x224>)
 8000ec8:	bb1b      	cbnz	r3, 8000f12 <_vfiprintf_r+0x1d6>
 8000eca:	9b03      	ldr	r3, [sp, #12]
 8000ecc:	3307      	adds	r3, #7
 8000ece:	f023 0307 	bic.w	r3, r3, #7
 8000ed2:	3308      	adds	r3, #8
 8000ed4:	9303      	str	r3, [sp, #12]
 8000ed6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8000ed8:	443b      	add	r3, r7
 8000eda:	9309      	str	r3, [sp, #36]	@ 0x24
 8000edc:	e76a      	b.n	8000db4 <_vfiprintf_r+0x78>
 8000ede:	fb0c 3202 	mla	r2, ip, r2, r3
 8000ee2:	460c      	mov	r4, r1
 8000ee4:	2001      	movs	r0, #1
 8000ee6:	e7a8      	b.n	8000e3a <_vfiprintf_r+0xfe>
 8000ee8:	2300      	movs	r3, #0
 8000eea:	3401      	adds	r4, #1
 8000eec:	9305      	str	r3, [sp, #20]
 8000eee:	4619      	mov	r1, r3
 8000ef0:	f04f 0c0a 	mov.w	ip, #10
 8000ef4:	4620      	mov	r0, r4
 8000ef6:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000efa:	3a30      	subs	r2, #48	@ 0x30
 8000efc:	2a09      	cmp	r2, #9
 8000efe:	d903      	bls.n	8000f08 <_vfiprintf_r+0x1cc>
 8000f00:	2b00      	cmp	r3, #0
 8000f02:	d0c6      	beq.n	8000e92 <_vfiprintf_r+0x156>
 8000f04:	9105      	str	r1, [sp, #20]
 8000f06:	e7c4      	b.n	8000e92 <_vfiprintf_r+0x156>
 8000f08:	fb0c 2101 	mla	r1, ip, r1, r2
 8000f0c:	4604      	mov	r4, r0
 8000f0e:	2301      	movs	r3, #1
 8000f10:	e7f0      	b.n	8000ef4 <_vfiprintf_r+0x1b8>
 8000f12:	ab03      	add	r3, sp, #12
 8000f14:	9300      	str	r3, [sp, #0]
 8000f16:	462a      	mov	r2, r5
 8000f18:	4b12      	ldr	r3, [pc, #72]	@ (8000f64 <_vfiprintf_r+0x228>)
 8000f1a:	a904      	add	r1, sp, #16
 8000f1c:	4630      	mov	r0, r6
 8000f1e:	f3af 8000 	nop.w
 8000f22:	4607      	mov	r7, r0
 8000f24:	1c78      	adds	r0, r7, #1
 8000f26:	d1d6      	bne.n	8000ed6 <_vfiprintf_r+0x19a>
 8000f28:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8000f2a:	07d9      	lsls	r1, r3, #31
 8000f2c:	d405      	bmi.n	8000f3a <_vfiprintf_r+0x1fe>
 8000f2e:	89ab      	ldrh	r3, [r5, #12]
 8000f30:	059a      	lsls	r2, r3, #22
 8000f32:	d402      	bmi.n	8000f3a <_vfiprintf_r+0x1fe>
 8000f34:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8000f36:	f7ff feb7 	bl	8000ca8 <__retarget_lock_release_recursive>
 8000f3a:	89ab      	ldrh	r3, [r5, #12]
 8000f3c:	065b      	lsls	r3, r3, #25
 8000f3e:	f53f af1f 	bmi.w	8000d80 <_vfiprintf_r+0x44>
 8000f42:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8000f44:	e71e      	b.n	8000d84 <_vfiprintf_r+0x48>
 8000f46:	ab03      	add	r3, sp, #12
 8000f48:	9300      	str	r3, [sp, #0]
 8000f4a:	462a      	mov	r2, r5
 8000f4c:	4b05      	ldr	r3, [pc, #20]	@ (8000f64 <_vfiprintf_r+0x228>)
 8000f4e:	a904      	add	r1, sp, #16
 8000f50:	4630      	mov	r0, r6
 8000f52:	f000 f923 	bl	800119c <_printf_i>
 8000f56:	e7e4      	b.n	8000f22 <_vfiprintf_r+0x1e6>
 8000f58:	08001cd2 	.word	0x08001cd2
 8000f5c:	08001cdc 	.word	0x08001cdc
 8000f60:	00000000 	.word	0x00000000
 8000f64:	08000d17 	.word	0x08000d17
 8000f68:	08001cd8 	.word	0x08001cd8

08000f6c <malloc>:
 8000f6c:	4b02      	ldr	r3, [pc, #8]	@ (8000f78 <malloc+0xc>)
 8000f6e:	4601      	mov	r1, r0
 8000f70:	6818      	ldr	r0, [r3, #0]
 8000f72:	f000 b825 	b.w	8000fc0 <_malloc_r>
 8000f76:	bf00      	nop
 8000f78:	20000034 	.word	0x20000034

08000f7c <sbrk_aligned>:
 8000f7c:	b570      	push	{r4, r5, r6, lr}
 8000f7e:	4e0f      	ldr	r6, [pc, #60]	@ (8000fbc <sbrk_aligned+0x40>)
 8000f80:	460c      	mov	r4, r1
 8000f82:	6831      	ldr	r1, [r6, #0]
 8000f84:	4605      	mov	r5, r0
 8000f86:	b911      	cbnz	r1, 8000f8e <sbrk_aligned+0x12>
 8000f88:	f000 fc92 	bl	80018b0 <_sbrk_r>
 8000f8c:	6030      	str	r0, [r6, #0]
 8000f8e:	4621      	mov	r1, r4
 8000f90:	4628      	mov	r0, r5
 8000f92:	f000 fc8d 	bl	80018b0 <_sbrk_r>
 8000f96:	1c43      	adds	r3, r0, #1
 8000f98:	d103      	bne.n	8000fa2 <sbrk_aligned+0x26>
 8000f9a:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8000f9e:	4620      	mov	r0, r4
 8000fa0:	bd70      	pop	{r4, r5, r6, pc}
 8000fa2:	1cc4      	adds	r4, r0, #3
 8000fa4:	f024 0403 	bic.w	r4, r4, #3
 8000fa8:	42a0      	cmp	r0, r4
 8000faa:	d0f8      	beq.n	8000f9e <sbrk_aligned+0x22>
 8000fac:	1a21      	subs	r1, r4, r0
 8000fae:	4628      	mov	r0, r5
 8000fb0:	f000 fc7e 	bl	80018b0 <_sbrk_r>
 8000fb4:	3001      	adds	r0, #1
 8000fb6:	d1f2      	bne.n	8000f9e <sbrk_aligned+0x22>
 8000fb8:	e7ef      	b.n	8000f9a <sbrk_aligned+0x1e>
 8000fba:	bf00      	nop
 8000fbc:	200001e4 	.word	0x200001e4

08000fc0 <_malloc_r>:
 8000fc0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000fc4:	1ccd      	adds	r5, r1, #3
 8000fc6:	f025 0503 	bic.w	r5, r5, #3
 8000fca:	3508      	adds	r5, #8
 8000fcc:	2d0c      	cmp	r5, #12
 8000fce:	bf38      	it	cc
 8000fd0:	250c      	movcc	r5, #12
 8000fd2:	2d00      	cmp	r5, #0
 8000fd4:	4606      	mov	r6, r0
 8000fd6:	db01      	blt.n	8000fdc <_malloc_r+0x1c>
 8000fd8:	42a9      	cmp	r1, r5
 8000fda:	d904      	bls.n	8000fe6 <_malloc_r+0x26>
 8000fdc:	230c      	movs	r3, #12
 8000fde:	6033      	str	r3, [r6, #0]
 8000fe0:	2000      	movs	r0, #0
 8000fe2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000fe6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80010bc <_malloc_r+0xfc>
 8000fea:	f000 faa1 	bl	8001530 <__malloc_lock>
 8000fee:	f8d8 3000 	ldr.w	r3, [r8]
 8000ff2:	461c      	mov	r4, r3
 8000ff4:	bb44      	cbnz	r4, 8001048 <_malloc_r+0x88>
 8000ff6:	4629      	mov	r1, r5
 8000ff8:	4630      	mov	r0, r6
 8000ffa:	f7ff ffbf 	bl	8000f7c <sbrk_aligned>
 8000ffe:	1c43      	adds	r3, r0, #1
 8001000:	4604      	mov	r4, r0
 8001002:	d158      	bne.n	80010b6 <_malloc_r+0xf6>
 8001004:	f8d8 4000 	ldr.w	r4, [r8]
 8001008:	4627      	mov	r7, r4
 800100a:	2f00      	cmp	r7, #0
 800100c:	d143      	bne.n	8001096 <_malloc_r+0xd6>
 800100e:	2c00      	cmp	r4, #0
 8001010:	d04b      	beq.n	80010aa <_malloc_r+0xea>
 8001012:	6823      	ldr	r3, [r4, #0]
 8001014:	4639      	mov	r1, r7
 8001016:	4630      	mov	r0, r6
 8001018:	eb04 0903 	add.w	r9, r4, r3
 800101c:	f000 fc48 	bl	80018b0 <_sbrk_r>
 8001020:	4581      	cmp	r9, r0
 8001022:	d142      	bne.n	80010aa <_malloc_r+0xea>
 8001024:	6821      	ldr	r1, [r4, #0]
 8001026:	1a6d      	subs	r5, r5, r1
 8001028:	4629      	mov	r1, r5
 800102a:	4630      	mov	r0, r6
 800102c:	f7ff ffa6 	bl	8000f7c <sbrk_aligned>
 8001030:	3001      	adds	r0, #1
 8001032:	d03a      	beq.n	80010aa <_malloc_r+0xea>
 8001034:	6823      	ldr	r3, [r4, #0]
 8001036:	442b      	add	r3, r5
 8001038:	6023      	str	r3, [r4, #0]
 800103a:	f8d8 3000 	ldr.w	r3, [r8]
 800103e:	685a      	ldr	r2, [r3, #4]
 8001040:	bb62      	cbnz	r2, 800109c <_malloc_r+0xdc>
 8001042:	f8c8 7000 	str.w	r7, [r8]
 8001046:	e00f      	b.n	8001068 <_malloc_r+0xa8>
 8001048:	6822      	ldr	r2, [r4, #0]
 800104a:	1b52      	subs	r2, r2, r5
 800104c:	d420      	bmi.n	8001090 <_malloc_r+0xd0>
 800104e:	2a0b      	cmp	r2, #11
 8001050:	d917      	bls.n	8001082 <_malloc_r+0xc2>
 8001052:	1961      	adds	r1, r4, r5
 8001054:	42a3      	cmp	r3, r4
 8001056:	6025      	str	r5, [r4, #0]
 8001058:	bf18      	it	ne
 800105a:	6059      	strne	r1, [r3, #4]
 800105c:	6863      	ldr	r3, [r4, #4]
 800105e:	bf08      	it	eq
 8001060:	f8c8 1000 	streq.w	r1, [r8]
 8001064:	5162      	str	r2, [r4, r5]
 8001066:	604b      	str	r3, [r1, #4]
 8001068:	4630      	mov	r0, r6
 800106a:	f000 fa67 	bl	800153c <__malloc_unlock>
 800106e:	f104 000b 	add.w	r0, r4, #11
 8001072:	1d23      	adds	r3, r4, #4
 8001074:	f020 0007 	bic.w	r0, r0, #7
 8001078:	1ac2      	subs	r2, r0, r3
 800107a:	bf1c      	itt	ne
 800107c:	1a1b      	subne	r3, r3, r0
 800107e:	50a3      	strne	r3, [r4, r2]
 8001080:	e7af      	b.n	8000fe2 <_malloc_r+0x22>
 8001082:	6862      	ldr	r2, [r4, #4]
 8001084:	42a3      	cmp	r3, r4
 8001086:	bf0c      	ite	eq
 8001088:	f8c8 2000 	streq.w	r2, [r8]
 800108c:	605a      	strne	r2, [r3, #4]
 800108e:	e7eb      	b.n	8001068 <_malloc_r+0xa8>
 8001090:	4623      	mov	r3, r4
 8001092:	6864      	ldr	r4, [r4, #4]
 8001094:	e7ae      	b.n	8000ff4 <_malloc_r+0x34>
 8001096:	463c      	mov	r4, r7
 8001098:	687f      	ldr	r7, [r7, #4]
 800109a:	e7b6      	b.n	800100a <_malloc_r+0x4a>
 800109c:	461a      	mov	r2, r3
 800109e:	685b      	ldr	r3, [r3, #4]
 80010a0:	42a3      	cmp	r3, r4
 80010a2:	d1fb      	bne.n	800109c <_malloc_r+0xdc>
 80010a4:	2300      	movs	r3, #0
 80010a6:	6053      	str	r3, [r2, #4]
 80010a8:	e7de      	b.n	8001068 <_malloc_r+0xa8>
 80010aa:	230c      	movs	r3, #12
 80010ac:	6033      	str	r3, [r6, #0]
 80010ae:	4630      	mov	r0, r6
 80010b0:	f000 fa44 	bl	800153c <__malloc_unlock>
 80010b4:	e794      	b.n	8000fe0 <_malloc_r+0x20>
 80010b6:	6005      	str	r5, [r0, #0]
 80010b8:	e7d6      	b.n	8001068 <_malloc_r+0xa8>
 80010ba:	bf00      	nop
 80010bc:	200001e8 	.word	0x200001e8

080010c0 <_printf_common>:
 80010c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80010c4:	4616      	mov	r6, r2
 80010c6:	4698      	mov	r8, r3
 80010c8:	688a      	ldr	r2, [r1, #8]
 80010ca:	690b      	ldr	r3, [r1, #16]
 80010cc:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80010d0:	4293      	cmp	r3, r2
 80010d2:	bfb8      	it	lt
 80010d4:	4613      	movlt	r3, r2
 80010d6:	6033      	str	r3, [r6, #0]
 80010d8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80010dc:	4607      	mov	r7, r0
 80010de:	460c      	mov	r4, r1
 80010e0:	b10a      	cbz	r2, 80010e6 <_printf_common+0x26>
 80010e2:	3301      	adds	r3, #1
 80010e4:	6033      	str	r3, [r6, #0]
 80010e6:	6823      	ldr	r3, [r4, #0]
 80010e8:	0699      	lsls	r1, r3, #26
 80010ea:	bf42      	ittt	mi
 80010ec:	6833      	ldrmi	r3, [r6, #0]
 80010ee:	3302      	addmi	r3, #2
 80010f0:	6033      	strmi	r3, [r6, #0]
 80010f2:	6825      	ldr	r5, [r4, #0]
 80010f4:	f015 0506 	ands.w	r5, r5, #6
 80010f8:	d106      	bne.n	8001108 <_printf_common+0x48>
 80010fa:	f104 0a19 	add.w	sl, r4, #25
 80010fe:	68e3      	ldr	r3, [r4, #12]
 8001100:	6832      	ldr	r2, [r6, #0]
 8001102:	1a9b      	subs	r3, r3, r2
 8001104:	42ab      	cmp	r3, r5
 8001106:	dc26      	bgt.n	8001156 <_printf_common+0x96>
 8001108:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800110c:	6822      	ldr	r2, [r4, #0]
 800110e:	3b00      	subs	r3, #0
 8001110:	bf18      	it	ne
 8001112:	2301      	movne	r3, #1
 8001114:	0692      	lsls	r2, r2, #26
 8001116:	d42b      	bmi.n	8001170 <_printf_common+0xb0>
 8001118:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800111c:	4641      	mov	r1, r8
 800111e:	4638      	mov	r0, r7
 8001120:	47c8      	blx	r9
 8001122:	3001      	adds	r0, #1
 8001124:	d01e      	beq.n	8001164 <_printf_common+0xa4>
 8001126:	6823      	ldr	r3, [r4, #0]
 8001128:	6922      	ldr	r2, [r4, #16]
 800112a:	f003 0306 	and.w	r3, r3, #6
 800112e:	2b04      	cmp	r3, #4
 8001130:	bf02      	ittt	eq
 8001132:	68e5      	ldreq	r5, [r4, #12]
 8001134:	6833      	ldreq	r3, [r6, #0]
 8001136:	1aed      	subeq	r5, r5, r3
 8001138:	68a3      	ldr	r3, [r4, #8]
 800113a:	bf0c      	ite	eq
 800113c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8001140:	2500      	movne	r5, #0
 8001142:	4293      	cmp	r3, r2
 8001144:	bfc4      	itt	gt
 8001146:	1a9b      	subgt	r3, r3, r2
 8001148:	18ed      	addgt	r5, r5, r3
 800114a:	2600      	movs	r6, #0
 800114c:	341a      	adds	r4, #26
 800114e:	42b5      	cmp	r5, r6
 8001150:	d11a      	bne.n	8001188 <_printf_common+0xc8>
 8001152:	2000      	movs	r0, #0
 8001154:	e008      	b.n	8001168 <_printf_common+0xa8>
 8001156:	2301      	movs	r3, #1
 8001158:	4652      	mov	r2, sl
 800115a:	4641      	mov	r1, r8
 800115c:	4638      	mov	r0, r7
 800115e:	47c8      	blx	r9
 8001160:	3001      	adds	r0, #1
 8001162:	d103      	bne.n	800116c <_printf_common+0xac>
 8001164:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001168:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800116c:	3501      	adds	r5, #1
 800116e:	e7c6      	b.n	80010fe <_printf_common+0x3e>
 8001170:	18e1      	adds	r1, r4, r3
 8001172:	1c5a      	adds	r2, r3, #1
 8001174:	2030      	movs	r0, #48	@ 0x30
 8001176:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800117a:	4422      	add	r2, r4
 800117c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8001180:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8001184:	3302      	adds	r3, #2
 8001186:	e7c7      	b.n	8001118 <_printf_common+0x58>
 8001188:	2301      	movs	r3, #1
 800118a:	4622      	mov	r2, r4
 800118c:	4641      	mov	r1, r8
 800118e:	4638      	mov	r0, r7
 8001190:	47c8      	blx	r9
 8001192:	3001      	adds	r0, #1
 8001194:	d0e6      	beq.n	8001164 <_printf_common+0xa4>
 8001196:	3601      	adds	r6, #1
 8001198:	e7d9      	b.n	800114e <_printf_common+0x8e>
	...

0800119c <_printf_i>:
 800119c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80011a0:	7e0f      	ldrb	r7, [r1, #24]
 80011a2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80011a4:	2f78      	cmp	r7, #120	@ 0x78
 80011a6:	4691      	mov	r9, r2
 80011a8:	4680      	mov	r8, r0
 80011aa:	460c      	mov	r4, r1
 80011ac:	469a      	mov	sl, r3
 80011ae:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80011b2:	d807      	bhi.n	80011c4 <_printf_i+0x28>
 80011b4:	2f62      	cmp	r7, #98	@ 0x62
 80011b6:	d80a      	bhi.n	80011ce <_printf_i+0x32>
 80011b8:	2f00      	cmp	r7, #0
 80011ba:	f000 80d1 	beq.w	8001360 <_printf_i+0x1c4>
 80011be:	2f58      	cmp	r7, #88	@ 0x58
 80011c0:	f000 80b8 	beq.w	8001334 <_printf_i+0x198>
 80011c4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80011c8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80011cc:	e03a      	b.n	8001244 <_printf_i+0xa8>
 80011ce:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80011d2:	2b15      	cmp	r3, #21
 80011d4:	d8f6      	bhi.n	80011c4 <_printf_i+0x28>
 80011d6:	a101      	add	r1, pc, #4	@ (adr r1, 80011dc <_printf_i+0x40>)
 80011d8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80011dc:	08001235 	.word	0x08001235
 80011e0:	08001249 	.word	0x08001249
 80011e4:	080011c5 	.word	0x080011c5
 80011e8:	080011c5 	.word	0x080011c5
 80011ec:	080011c5 	.word	0x080011c5
 80011f0:	080011c5 	.word	0x080011c5
 80011f4:	08001249 	.word	0x08001249
 80011f8:	080011c5 	.word	0x080011c5
 80011fc:	080011c5 	.word	0x080011c5
 8001200:	080011c5 	.word	0x080011c5
 8001204:	080011c5 	.word	0x080011c5
 8001208:	08001347 	.word	0x08001347
 800120c:	08001273 	.word	0x08001273
 8001210:	08001301 	.word	0x08001301
 8001214:	080011c5 	.word	0x080011c5
 8001218:	080011c5 	.word	0x080011c5
 800121c:	08001369 	.word	0x08001369
 8001220:	080011c5 	.word	0x080011c5
 8001224:	08001273 	.word	0x08001273
 8001228:	080011c5 	.word	0x080011c5
 800122c:	080011c5 	.word	0x080011c5
 8001230:	08001309 	.word	0x08001309
 8001234:	6833      	ldr	r3, [r6, #0]
 8001236:	1d1a      	adds	r2, r3, #4
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	6032      	str	r2, [r6, #0]
 800123c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8001240:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8001244:	2301      	movs	r3, #1
 8001246:	e09c      	b.n	8001382 <_printf_i+0x1e6>
 8001248:	6833      	ldr	r3, [r6, #0]
 800124a:	6820      	ldr	r0, [r4, #0]
 800124c:	1d19      	adds	r1, r3, #4
 800124e:	6031      	str	r1, [r6, #0]
 8001250:	0606      	lsls	r6, r0, #24
 8001252:	d501      	bpl.n	8001258 <_printf_i+0xbc>
 8001254:	681d      	ldr	r5, [r3, #0]
 8001256:	e003      	b.n	8001260 <_printf_i+0xc4>
 8001258:	0645      	lsls	r5, r0, #25
 800125a:	d5fb      	bpl.n	8001254 <_printf_i+0xb8>
 800125c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8001260:	2d00      	cmp	r5, #0
 8001262:	da03      	bge.n	800126c <_printf_i+0xd0>
 8001264:	232d      	movs	r3, #45	@ 0x2d
 8001266:	426d      	negs	r5, r5
 8001268:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800126c:	4858      	ldr	r0, [pc, #352]	@ (80013d0 <_printf_i+0x234>)
 800126e:	230a      	movs	r3, #10
 8001270:	e011      	b.n	8001296 <_printf_i+0xfa>
 8001272:	6821      	ldr	r1, [r4, #0]
 8001274:	6833      	ldr	r3, [r6, #0]
 8001276:	0608      	lsls	r0, r1, #24
 8001278:	f853 5b04 	ldr.w	r5, [r3], #4
 800127c:	d402      	bmi.n	8001284 <_printf_i+0xe8>
 800127e:	0649      	lsls	r1, r1, #25
 8001280:	bf48      	it	mi
 8001282:	b2ad      	uxthmi	r5, r5
 8001284:	2f6f      	cmp	r7, #111	@ 0x6f
 8001286:	4852      	ldr	r0, [pc, #328]	@ (80013d0 <_printf_i+0x234>)
 8001288:	6033      	str	r3, [r6, #0]
 800128a:	bf14      	ite	ne
 800128c:	230a      	movne	r3, #10
 800128e:	2308      	moveq	r3, #8
 8001290:	2100      	movs	r1, #0
 8001292:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8001296:	6866      	ldr	r6, [r4, #4]
 8001298:	60a6      	str	r6, [r4, #8]
 800129a:	2e00      	cmp	r6, #0
 800129c:	db05      	blt.n	80012aa <_printf_i+0x10e>
 800129e:	6821      	ldr	r1, [r4, #0]
 80012a0:	432e      	orrs	r6, r5
 80012a2:	f021 0104 	bic.w	r1, r1, #4
 80012a6:	6021      	str	r1, [r4, #0]
 80012a8:	d04b      	beq.n	8001342 <_printf_i+0x1a6>
 80012aa:	4616      	mov	r6, r2
 80012ac:	fbb5 f1f3 	udiv	r1, r5, r3
 80012b0:	fb03 5711 	mls	r7, r3, r1, r5
 80012b4:	5dc7      	ldrb	r7, [r0, r7]
 80012b6:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80012ba:	462f      	mov	r7, r5
 80012bc:	42bb      	cmp	r3, r7
 80012be:	460d      	mov	r5, r1
 80012c0:	d9f4      	bls.n	80012ac <_printf_i+0x110>
 80012c2:	2b08      	cmp	r3, #8
 80012c4:	d10b      	bne.n	80012de <_printf_i+0x142>
 80012c6:	6823      	ldr	r3, [r4, #0]
 80012c8:	07df      	lsls	r7, r3, #31
 80012ca:	d508      	bpl.n	80012de <_printf_i+0x142>
 80012cc:	6923      	ldr	r3, [r4, #16]
 80012ce:	6861      	ldr	r1, [r4, #4]
 80012d0:	4299      	cmp	r1, r3
 80012d2:	bfde      	ittt	le
 80012d4:	2330      	movle	r3, #48	@ 0x30
 80012d6:	f806 3c01 	strble.w	r3, [r6, #-1]
 80012da:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 80012de:	1b92      	subs	r2, r2, r6
 80012e0:	6122      	str	r2, [r4, #16]
 80012e2:	f8cd a000 	str.w	sl, [sp]
 80012e6:	464b      	mov	r3, r9
 80012e8:	aa03      	add	r2, sp, #12
 80012ea:	4621      	mov	r1, r4
 80012ec:	4640      	mov	r0, r8
 80012ee:	f7ff fee7 	bl	80010c0 <_printf_common>
 80012f2:	3001      	adds	r0, #1
 80012f4:	d14a      	bne.n	800138c <_printf_i+0x1f0>
 80012f6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80012fa:	b004      	add	sp, #16
 80012fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001300:	6823      	ldr	r3, [r4, #0]
 8001302:	f043 0320 	orr.w	r3, r3, #32
 8001306:	6023      	str	r3, [r4, #0]
 8001308:	4832      	ldr	r0, [pc, #200]	@ (80013d4 <_printf_i+0x238>)
 800130a:	2778      	movs	r7, #120	@ 0x78
 800130c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8001310:	6823      	ldr	r3, [r4, #0]
 8001312:	6831      	ldr	r1, [r6, #0]
 8001314:	061f      	lsls	r7, r3, #24
 8001316:	f851 5b04 	ldr.w	r5, [r1], #4
 800131a:	d402      	bmi.n	8001322 <_printf_i+0x186>
 800131c:	065f      	lsls	r7, r3, #25
 800131e:	bf48      	it	mi
 8001320:	b2ad      	uxthmi	r5, r5
 8001322:	6031      	str	r1, [r6, #0]
 8001324:	07d9      	lsls	r1, r3, #31
 8001326:	bf44      	itt	mi
 8001328:	f043 0320 	orrmi.w	r3, r3, #32
 800132c:	6023      	strmi	r3, [r4, #0]
 800132e:	b11d      	cbz	r5, 8001338 <_printf_i+0x19c>
 8001330:	2310      	movs	r3, #16
 8001332:	e7ad      	b.n	8001290 <_printf_i+0xf4>
 8001334:	4826      	ldr	r0, [pc, #152]	@ (80013d0 <_printf_i+0x234>)
 8001336:	e7e9      	b.n	800130c <_printf_i+0x170>
 8001338:	6823      	ldr	r3, [r4, #0]
 800133a:	f023 0320 	bic.w	r3, r3, #32
 800133e:	6023      	str	r3, [r4, #0]
 8001340:	e7f6      	b.n	8001330 <_printf_i+0x194>
 8001342:	4616      	mov	r6, r2
 8001344:	e7bd      	b.n	80012c2 <_printf_i+0x126>
 8001346:	6833      	ldr	r3, [r6, #0]
 8001348:	6825      	ldr	r5, [r4, #0]
 800134a:	6961      	ldr	r1, [r4, #20]
 800134c:	1d18      	adds	r0, r3, #4
 800134e:	6030      	str	r0, [r6, #0]
 8001350:	062e      	lsls	r6, r5, #24
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	d501      	bpl.n	800135a <_printf_i+0x1be>
 8001356:	6019      	str	r1, [r3, #0]
 8001358:	e002      	b.n	8001360 <_printf_i+0x1c4>
 800135a:	0668      	lsls	r0, r5, #25
 800135c:	d5fb      	bpl.n	8001356 <_printf_i+0x1ba>
 800135e:	8019      	strh	r1, [r3, #0]
 8001360:	2300      	movs	r3, #0
 8001362:	6123      	str	r3, [r4, #16]
 8001364:	4616      	mov	r6, r2
 8001366:	e7bc      	b.n	80012e2 <_printf_i+0x146>
 8001368:	6833      	ldr	r3, [r6, #0]
 800136a:	1d1a      	adds	r2, r3, #4
 800136c:	6032      	str	r2, [r6, #0]
 800136e:	681e      	ldr	r6, [r3, #0]
 8001370:	6862      	ldr	r2, [r4, #4]
 8001372:	2100      	movs	r1, #0
 8001374:	4630      	mov	r0, r6
 8001376:	f7fe ff33 	bl	80001e0 <memchr>
 800137a:	b108      	cbz	r0, 8001380 <_printf_i+0x1e4>
 800137c:	1b80      	subs	r0, r0, r6
 800137e:	6060      	str	r0, [r4, #4]
 8001380:	6863      	ldr	r3, [r4, #4]
 8001382:	6123      	str	r3, [r4, #16]
 8001384:	2300      	movs	r3, #0
 8001386:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800138a:	e7aa      	b.n	80012e2 <_printf_i+0x146>
 800138c:	6923      	ldr	r3, [r4, #16]
 800138e:	4632      	mov	r2, r6
 8001390:	4649      	mov	r1, r9
 8001392:	4640      	mov	r0, r8
 8001394:	47d0      	blx	sl
 8001396:	3001      	adds	r0, #1
 8001398:	d0ad      	beq.n	80012f6 <_printf_i+0x15a>
 800139a:	6823      	ldr	r3, [r4, #0]
 800139c:	079b      	lsls	r3, r3, #30
 800139e:	d413      	bmi.n	80013c8 <_printf_i+0x22c>
 80013a0:	68e0      	ldr	r0, [r4, #12]
 80013a2:	9b03      	ldr	r3, [sp, #12]
 80013a4:	4298      	cmp	r0, r3
 80013a6:	bfb8      	it	lt
 80013a8:	4618      	movlt	r0, r3
 80013aa:	e7a6      	b.n	80012fa <_printf_i+0x15e>
 80013ac:	2301      	movs	r3, #1
 80013ae:	4632      	mov	r2, r6
 80013b0:	4649      	mov	r1, r9
 80013b2:	4640      	mov	r0, r8
 80013b4:	47d0      	blx	sl
 80013b6:	3001      	adds	r0, #1
 80013b8:	d09d      	beq.n	80012f6 <_printf_i+0x15a>
 80013ba:	3501      	adds	r5, #1
 80013bc:	68e3      	ldr	r3, [r4, #12]
 80013be:	9903      	ldr	r1, [sp, #12]
 80013c0:	1a5b      	subs	r3, r3, r1
 80013c2:	42ab      	cmp	r3, r5
 80013c4:	dcf2      	bgt.n	80013ac <_printf_i+0x210>
 80013c6:	e7eb      	b.n	80013a0 <_printf_i+0x204>
 80013c8:	2500      	movs	r5, #0
 80013ca:	f104 0619 	add.w	r6, r4, #25
 80013ce:	e7f5      	b.n	80013bc <_printf_i+0x220>
 80013d0:	08001ce3 	.word	0x08001ce3
 80013d4:	08001cf4 	.word	0x08001cf4

080013d8 <__sflush_r>:
 80013d8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80013dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80013e0:	0716      	lsls	r6, r2, #28
 80013e2:	4605      	mov	r5, r0
 80013e4:	460c      	mov	r4, r1
 80013e6:	d454      	bmi.n	8001492 <__sflush_r+0xba>
 80013e8:	684b      	ldr	r3, [r1, #4]
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	dc02      	bgt.n	80013f4 <__sflush_r+0x1c>
 80013ee:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	dd48      	ble.n	8001486 <__sflush_r+0xae>
 80013f4:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80013f6:	2e00      	cmp	r6, #0
 80013f8:	d045      	beq.n	8001486 <__sflush_r+0xae>
 80013fa:	2300      	movs	r3, #0
 80013fc:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8001400:	682f      	ldr	r7, [r5, #0]
 8001402:	6a21      	ldr	r1, [r4, #32]
 8001404:	602b      	str	r3, [r5, #0]
 8001406:	d030      	beq.n	800146a <__sflush_r+0x92>
 8001408:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800140a:	89a3      	ldrh	r3, [r4, #12]
 800140c:	0759      	lsls	r1, r3, #29
 800140e:	d505      	bpl.n	800141c <__sflush_r+0x44>
 8001410:	6863      	ldr	r3, [r4, #4]
 8001412:	1ad2      	subs	r2, r2, r3
 8001414:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8001416:	b10b      	cbz	r3, 800141c <__sflush_r+0x44>
 8001418:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800141a:	1ad2      	subs	r2, r2, r3
 800141c:	2300      	movs	r3, #0
 800141e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8001420:	6a21      	ldr	r1, [r4, #32]
 8001422:	4628      	mov	r0, r5
 8001424:	47b0      	blx	r6
 8001426:	1c43      	adds	r3, r0, #1
 8001428:	89a3      	ldrh	r3, [r4, #12]
 800142a:	d106      	bne.n	800143a <__sflush_r+0x62>
 800142c:	6829      	ldr	r1, [r5, #0]
 800142e:	291d      	cmp	r1, #29
 8001430:	d82b      	bhi.n	800148a <__sflush_r+0xb2>
 8001432:	4a2a      	ldr	r2, [pc, #168]	@ (80014dc <__sflush_r+0x104>)
 8001434:	40ca      	lsrs	r2, r1
 8001436:	07d6      	lsls	r6, r2, #31
 8001438:	d527      	bpl.n	800148a <__sflush_r+0xb2>
 800143a:	2200      	movs	r2, #0
 800143c:	6062      	str	r2, [r4, #4]
 800143e:	04d9      	lsls	r1, r3, #19
 8001440:	6922      	ldr	r2, [r4, #16]
 8001442:	6022      	str	r2, [r4, #0]
 8001444:	d504      	bpl.n	8001450 <__sflush_r+0x78>
 8001446:	1c42      	adds	r2, r0, #1
 8001448:	d101      	bne.n	800144e <__sflush_r+0x76>
 800144a:	682b      	ldr	r3, [r5, #0]
 800144c:	b903      	cbnz	r3, 8001450 <__sflush_r+0x78>
 800144e:	6560      	str	r0, [r4, #84]	@ 0x54
 8001450:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8001452:	602f      	str	r7, [r5, #0]
 8001454:	b1b9      	cbz	r1, 8001486 <__sflush_r+0xae>
 8001456:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800145a:	4299      	cmp	r1, r3
 800145c:	d002      	beq.n	8001464 <__sflush_r+0x8c>
 800145e:	4628      	mov	r0, r5
 8001460:	f000 fa72 	bl	8001948 <_free_r>
 8001464:	2300      	movs	r3, #0
 8001466:	6363      	str	r3, [r4, #52]	@ 0x34
 8001468:	e00d      	b.n	8001486 <__sflush_r+0xae>
 800146a:	2301      	movs	r3, #1
 800146c:	4628      	mov	r0, r5
 800146e:	47b0      	blx	r6
 8001470:	4602      	mov	r2, r0
 8001472:	1c50      	adds	r0, r2, #1
 8001474:	d1c9      	bne.n	800140a <__sflush_r+0x32>
 8001476:	682b      	ldr	r3, [r5, #0]
 8001478:	2b00      	cmp	r3, #0
 800147a:	d0c6      	beq.n	800140a <__sflush_r+0x32>
 800147c:	2b1d      	cmp	r3, #29
 800147e:	d001      	beq.n	8001484 <__sflush_r+0xac>
 8001480:	2b16      	cmp	r3, #22
 8001482:	d11e      	bne.n	80014c2 <__sflush_r+0xea>
 8001484:	602f      	str	r7, [r5, #0]
 8001486:	2000      	movs	r0, #0
 8001488:	e022      	b.n	80014d0 <__sflush_r+0xf8>
 800148a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800148e:	b21b      	sxth	r3, r3
 8001490:	e01b      	b.n	80014ca <__sflush_r+0xf2>
 8001492:	690f      	ldr	r7, [r1, #16]
 8001494:	2f00      	cmp	r7, #0
 8001496:	d0f6      	beq.n	8001486 <__sflush_r+0xae>
 8001498:	0793      	lsls	r3, r2, #30
 800149a:	680e      	ldr	r6, [r1, #0]
 800149c:	bf08      	it	eq
 800149e:	694b      	ldreq	r3, [r1, #20]
 80014a0:	600f      	str	r7, [r1, #0]
 80014a2:	bf18      	it	ne
 80014a4:	2300      	movne	r3, #0
 80014a6:	eba6 0807 	sub.w	r8, r6, r7
 80014aa:	608b      	str	r3, [r1, #8]
 80014ac:	f1b8 0f00 	cmp.w	r8, #0
 80014b0:	dde9      	ble.n	8001486 <__sflush_r+0xae>
 80014b2:	6a21      	ldr	r1, [r4, #32]
 80014b4:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80014b6:	4643      	mov	r3, r8
 80014b8:	463a      	mov	r2, r7
 80014ba:	4628      	mov	r0, r5
 80014bc:	47b0      	blx	r6
 80014be:	2800      	cmp	r0, #0
 80014c0:	dc08      	bgt.n	80014d4 <__sflush_r+0xfc>
 80014c2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80014c6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80014ca:	81a3      	strh	r3, [r4, #12]
 80014cc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80014d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80014d4:	4407      	add	r7, r0
 80014d6:	eba8 0800 	sub.w	r8, r8, r0
 80014da:	e7e7      	b.n	80014ac <__sflush_r+0xd4>
 80014dc:	20400001 	.word	0x20400001

080014e0 <_fflush_r>:
 80014e0:	b538      	push	{r3, r4, r5, lr}
 80014e2:	690b      	ldr	r3, [r1, #16]
 80014e4:	4605      	mov	r5, r0
 80014e6:	460c      	mov	r4, r1
 80014e8:	b913      	cbnz	r3, 80014f0 <_fflush_r+0x10>
 80014ea:	2500      	movs	r5, #0
 80014ec:	4628      	mov	r0, r5
 80014ee:	bd38      	pop	{r3, r4, r5, pc}
 80014f0:	b118      	cbz	r0, 80014fa <_fflush_r+0x1a>
 80014f2:	6a03      	ldr	r3, [r0, #32]
 80014f4:	b90b      	cbnz	r3, 80014fa <_fflush_r+0x1a>
 80014f6:	f7ff faf5 	bl	8000ae4 <__sinit>
 80014fa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d0f3      	beq.n	80014ea <_fflush_r+0xa>
 8001502:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8001504:	07d0      	lsls	r0, r2, #31
 8001506:	d404      	bmi.n	8001512 <_fflush_r+0x32>
 8001508:	0599      	lsls	r1, r3, #22
 800150a:	d402      	bmi.n	8001512 <_fflush_r+0x32>
 800150c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800150e:	f7ff fbca 	bl	8000ca6 <__retarget_lock_acquire_recursive>
 8001512:	4628      	mov	r0, r5
 8001514:	4621      	mov	r1, r4
 8001516:	f7ff ff5f 	bl	80013d8 <__sflush_r>
 800151a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800151c:	07da      	lsls	r2, r3, #31
 800151e:	4605      	mov	r5, r0
 8001520:	d4e4      	bmi.n	80014ec <_fflush_r+0xc>
 8001522:	89a3      	ldrh	r3, [r4, #12]
 8001524:	059b      	lsls	r3, r3, #22
 8001526:	d4e1      	bmi.n	80014ec <_fflush_r+0xc>
 8001528:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800152a:	f7ff fbbd 	bl	8000ca8 <__retarget_lock_release_recursive>
 800152e:	e7dd      	b.n	80014ec <_fflush_r+0xc>

08001530 <__malloc_lock>:
 8001530:	4801      	ldr	r0, [pc, #4]	@ (8001538 <__malloc_lock+0x8>)
 8001532:	f7ff bbb8 	b.w	8000ca6 <__retarget_lock_acquire_recursive>
 8001536:	bf00      	nop
 8001538:	200001e0 	.word	0x200001e0

0800153c <__malloc_unlock>:
 800153c:	4801      	ldr	r0, [pc, #4]	@ (8001544 <__malloc_unlock+0x8>)
 800153e:	f7ff bbb3 	b.w	8000ca8 <__retarget_lock_release_recursive>
 8001542:	bf00      	nop
 8001544:	200001e0 	.word	0x200001e0

08001548 <__sread>:
 8001548:	b510      	push	{r4, lr}
 800154a:	460c      	mov	r4, r1
 800154c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001550:	f000 f99c 	bl	800188c <_read_r>
 8001554:	2800      	cmp	r0, #0
 8001556:	bfab      	itete	ge
 8001558:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800155a:	89a3      	ldrhlt	r3, [r4, #12]
 800155c:	181b      	addge	r3, r3, r0
 800155e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8001562:	bfac      	ite	ge
 8001564:	6563      	strge	r3, [r4, #84]	@ 0x54
 8001566:	81a3      	strhlt	r3, [r4, #12]
 8001568:	bd10      	pop	{r4, pc}

0800156a <__swrite>:
 800156a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800156e:	461f      	mov	r7, r3
 8001570:	898b      	ldrh	r3, [r1, #12]
 8001572:	05db      	lsls	r3, r3, #23
 8001574:	4605      	mov	r5, r0
 8001576:	460c      	mov	r4, r1
 8001578:	4616      	mov	r6, r2
 800157a:	d505      	bpl.n	8001588 <__swrite+0x1e>
 800157c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001580:	2302      	movs	r3, #2
 8001582:	2200      	movs	r2, #0
 8001584:	f000 f970 	bl	8001868 <_lseek_r>
 8001588:	89a3      	ldrh	r3, [r4, #12]
 800158a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800158e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8001592:	81a3      	strh	r3, [r4, #12]
 8001594:	4632      	mov	r2, r6
 8001596:	463b      	mov	r3, r7
 8001598:	4628      	mov	r0, r5
 800159a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800159e:	f000 b997 	b.w	80018d0 <_write_r>

080015a2 <__sseek>:
 80015a2:	b510      	push	{r4, lr}
 80015a4:	460c      	mov	r4, r1
 80015a6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80015aa:	f000 f95d 	bl	8001868 <_lseek_r>
 80015ae:	1c43      	adds	r3, r0, #1
 80015b0:	89a3      	ldrh	r3, [r4, #12]
 80015b2:	bf15      	itete	ne
 80015b4:	6560      	strne	r0, [r4, #84]	@ 0x54
 80015b6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80015ba:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80015be:	81a3      	strheq	r3, [r4, #12]
 80015c0:	bf18      	it	ne
 80015c2:	81a3      	strhne	r3, [r4, #12]
 80015c4:	bd10      	pop	{r4, pc}

080015c6 <__sclose>:
 80015c6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80015ca:	f000 b993 	b.w	80018f4 <_close_r>
	...

080015d0 <fiprintf>:
 80015d0:	b40e      	push	{r1, r2, r3}
 80015d2:	b503      	push	{r0, r1, lr}
 80015d4:	4601      	mov	r1, r0
 80015d6:	ab03      	add	r3, sp, #12
 80015d8:	4805      	ldr	r0, [pc, #20]	@ (80015f0 <fiprintf+0x20>)
 80015da:	f853 2b04 	ldr.w	r2, [r3], #4
 80015de:	6800      	ldr	r0, [r0, #0]
 80015e0:	9301      	str	r3, [sp, #4]
 80015e2:	f7ff fbab 	bl	8000d3c <_vfiprintf_r>
 80015e6:	b002      	add	sp, #8
 80015e8:	f85d eb04 	ldr.w	lr, [sp], #4
 80015ec:	b003      	add	sp, #12
 80015ee:	4770      	bx	lr
 80015f0:	20000034 	.word	0x20000034

080015f4 <__swbuf_r>:
 80015f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80015f6:	460e      	mov	r6, r1
 80015f8:	4614      	mov	r4, r2
 80015fa:	4605      	mov	r5, r0
 80015fc:	b118      	cbz	r0, 8001606 <__swbuf_r+0x12>
 80015fe:	6a03      	ldr	r3, [r0, #32]
 8001600:	b90b      	cbnz	r3, 8001606 <__swbuf_r+0x12>
 8001602:	f7ff fa6f 	bl	8000ae4 <__sinit>
 8001606:	69a3      	ldr	r3, [r4, #24]
 8001608:	60a3      	str	r3, [r4, #8]
 800160a:	89a3      	ldrh	r3, [r4, #12]
 800160c:	071a      	lsls	r2, r3, #28
 800160e:	d501      	bpl.n	8001614 <__swbuf_r+0x20>
 8001610:	6923      	ldr	r3, [r4, #16]
 8001612:	b943      	cbnz	r3, 8001626 <__swbuf_r+0x32>
 8001614:	4621      	mov	r1, r4
 8001616:	4628      	mov	r0, r5
 8001618:	f000 f82a 	bl	8001670 <__swsetup_r>
 800161c:	b118      	cbz	r0, 8001626 <__swbuf_r+0x32>
 800161e:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8001622:	4638      	mov	r0, r7
 8001624:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001626:	6823      	ldr	r3, [r4, #0]
 8001628:	6922      	ldr	r2, [r4, #16]
 800162a:	1a98      	subs	r0, r3, r2
 800162c:	6963      	ldr	r3, [r4, #20]
 800162e:	b2f6      	uxtb	r6, r6
 8001630:	4283      	cmp	r3, r0
 8001632:	4637      	mov	r7, r6
 8001634:	dc05      	bgt.n	8001642 <__swbuf_r+0x4e>
 8001636:	4621      	mov	r1, r4
 8001638:	4628      	mov	r0, r5
 800163a:	f7ff ff51 	bl	80014e0 <_fflush_r>
 800163e:	2800      	cmp	r0, #0
 8001640:	d1ed      	bne.n	800161e <__swbuf_r+0x2a>
 8001642:	68a3      	ldr	r3, [r4, #8]
 8001644:	3b01      	subs	r3, #1
 8001646:	60a3      	str	r3, [r4, #8]
 8001648:	6823      	ldr	r3, [r4, #0]
 800164a:	1c5a      	adds	r2, r3, #1
 800164c:	6022      	str	r2, [r4, #0]
 800164e:	701e      	strb	r6, [r3, #0]
 8001650:	6962      	ldr	r2, [r4, #20]
 8001652:	1c43      	adds	r3, r0, #1
 8001654:	429a      	cmp	r2, r3
 8001656:	d004      	beq.n	8001662 <__swbuf_r+0x6e>
 8001658:	89a3      	ldrh	r3, [r4, #12]
 800165a:	07db      	lsls	r3, r3, #31
 800165c:	d5e1      	bpl.n	8001622 <__swbuf_r+0x2e>
 800165e:	2e0a      	cmp	r6, #10
 8001660:	d1df      	bne.n	8001622 <__swbuf_r+0x2e>
 8001662:	4621      	mov	r1, r4
 8001664:	4628      	mov	r0, r5
 8001666:	f7ff ff3b 	bl	80014e0 <_fflush_r>
 800166a:	2800      	cmp	r0, #0
 800166c:	d0d9      	beq.n	8001622 <__swbuf_r+0x2e>
 800166e:	e7d6      	b.n	800161e <__swbuf_r+0x2a>

08001670 <__swsetup_r>:
 8001670:	b538      	push	{r3, r4, r5, lr}
 8001672:	4b29      	ldr	r3, [pc, #164]	@ (8001718 <__swsetup_r+0xa8>)
 8001674:	4605      	mov	r5, r0
 8001676:	6818      	ldr	r0, [r3, #0]
 8001678:	460c      	mov	r4, r1
 800167a:	b118      	cbz	r0, 8001684 <__swsetup_r+0x14>
 800167c:	6a03      	ldr	r3, [r0, #32]
 800167e:	b90b      	cbnz	r3, 8001684 <__swsetup_r+0x14>
 8001680:	f7ff fa30 	bl	8000ae4 <__sinit>
 8001684:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001688:	0719      	lsls	r1, r3, #28
 800168a:	d422      	bmi.n	80016d2 <__swsetup_r+0x62>
 800168c:	06da      	lsls	r2, r3, #27
 800168e:	d407      	bmi.n	80016a0 <__swsetup_r+0x30>
 8001690:	2209      	movs	r2, #9
 8001692:	602a      	str	r2, [r5, #0]
 8001694:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001698:	81a3      	strh	r3, [r4, #12]
 800169a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800169e:	e033      	b.n	8001708 <__swsetup_r+0x98>
 80016a0:	0758      	lsls	r0, r3, #29
 80016a2:	d512      	bpl.n	80016ca <__swsetup_r+0x5a>
 80016a4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80016a6:	b141      	cbz	r1, 80016ba <__swsetup_r+0x4a>
 80016a8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80016ac:	4299      	cmp	r1, r3
 80016ae:	d002      	beq.n	80016b6 <__swsetup_r+0x46>
 80016b0:	4628      	mov	r0, r5
 80016b2:	f000 f949 	bl	8001948 <_free_r>
 80016b6:	2300      	movs	r3, #0
 80016b8:	6363      	str	r3, [r4, #52]	@ 0x34
 80016ba:	89a3      	ldrh	r3, [r4, #12]
 80016bc:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80016c0:	81a3      	strh	r3, [r4, #12]
 80016c2:	2300      	movs	r3, #0
 80016c4:	6063      	str	r3, [r4, #4]
 80016c6:	6923      	ldr	r3, [r4, #16]
 80016c8:	6023      	str	r3, [r4, #0]
 80016ca:	89a3      	ldrh	r3, [r4, #12]
 80016cc:	f043 0308 	orr.w	r3, r3, #8
 80016d0:	81a3      	strh	r3, [r4, #12]
 80016d2:	6923      	ldr	r3, [r4, #16]
 80016d4:	b94b      	cbnz	r3, 80016ea <__swsetup_r+0x7a>
 80016d6:	89a3      	ldrh	r3, [r4, #12]
 80016d8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80016dc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80016e0:	d003      	beq.n	80016ea <__swsetup_r+0x7a>
 80016e2:	4621      	mov	r1, r4
 80016e4:	4628      	mov	r0, r5
 80016e6:	f000 f83f 	bl	8001768 <__smakebuf_r>
 80016ea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80016ee:	f013 0201 	ands.w	r2, r3, #1
 80016f2:	d00a      	beq.n	800170a <__swsetup_r+0x9a>
 80016f4:	2200      	movs	r2, #0
 80016f6:	60a2      	str	r2, [r4, #8]
 80016f8:	6962      	ldr	r2, [r4, #20]
 80016fa:	4252      	negs	r2, r2
 80016fc:	61a2      	str	r2, [r4, #24]
 80016fe:	6922      	ldr	r2, [r4, #16]
 8001700:	b942      	cbnz	r2, 8001714 <__swsetup_r+0xa4>
 8001702:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8001706:	d1c5      	bne.n	8001694 <__swsetup_r+0x24>
 8001708:	bd38      	pop	{r3, r4, r5, pc}
 800170a:	0799      	lsls	r1, r3, #30
 800170c:	bf58      	it	pl
 800170e:	6962      	ldrpl	r2, [r4, #20]
 8001710:	60a2      	str	r2, [r4, #8]
 8001712:	e7f4      	b.n	80016fe <__swsetup_r+0x8e>
 8001714:	2000      	movs	r0, #0
 8001716:	e7f7      	b.n	8001708 <__swsetup_r+0x98>
 8001718:	20000034 	.word	0x20000034

0800171c <__swhatbuf_r>:
 800171c:	b570      	push	{r4, r5, r6, lr}
 800171e:	460c      	mov	r4, r1
 8001720:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001724:	2900      	cmp	r1, #0
 8001726:	b096      	sub	sp, #88	@ 0x58
 8001728:	4615      	mov	r5, r2
 800172a:	461e      	mov	r6, r3
 800172c:	da0d      	bge.n	800174a <__swhatbuf_r+0x2e>
 800172e:	89a3      	ldrh	r3, [r4, #12]
 8001730:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8001734:	f04f 0100 	mov.w	r1, #0
 8001738:	bf14      	ite	ne
 800173a:	2340      	movne	r3, #64	@ 0x40
 800173c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8001740:	2000      	movs	r0, #0
 8001742:	6031      	str	r1, [r6, #0]
 8001744:	602b      	str	r3, [r5, #0]
 8001746:	b016      	add	sp, #88	@ 0x58
 8001748:	bd70      	pop	{r4, r5, r6, pc}
 800174a:	466a      	mov	r2, sp
 800174c:	f000 f8e2 	bl	8001914 <_fstat_r>
 8001750:	2800      	cmp	r0, #0
 8001752:	dbec      	blt.n	800172e <__swhatbuf_r+0x12>
 8001754:	9901      	ldr	r1, [sp, #4]
 8001756:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800175a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800175e:	4259      	negs	r1, r3
 8001760:	4159      	adcs	r1, r3
 8001762:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001766:	e7eb      	b.n	8001740 <__swhatbuf_r+0x24>

08001768 <__smakebuf_r>:
 8001768:	898b      	ldrh	r3, [r1, #12]
 800176a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800176c:	079d      	lsls	r5, r3, #30
 800176e:	4606      	mov	r6, r0
 8001770:	460c      	mov	r4, r1
 8001772:	d507      	bpl.n	8001784 <__smakebuf_r+0x1c>
 8001774:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8001778:	6023      	str	r3, [r4, #0]
 800177a:	6123      	str	r3, [r4, #16]
 800177c:	2301      	movs	r3, #1
 800177e:	6163      	str	r3, [r4, #20]
 8001780:	b003      	add	sp, #12
 8001782:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001784:	ab01      	add	r3, sp, #4
 8001786:	466a      	mov	r2, sp
 8001788:	f7ff ffc8 	bl	800171c <__swhatbuf_r>
 800178c:	9f00      	ldr	r7, [sp, #0]
 800178e:	4605      	mov	r5, r0
 8001790:	4639      	mov	r1, r7
 8001792:	4630      	mov	r0, r6
 8001794:	f7ff fc14 	bl	8000fc0 <_malloc_r>
 8001798:	b948      	cbnz	r0, 80017ae <__smakebuf_r+0x46>
 800179a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800179e:	059a      	lsls	r2, r3, #22
 80017a0:	d4ee      	bmi.n	8001780 <__smakebuf_r+0x18>
 80017a2:	f023 0303 	bic.w	r3, r3, #3
 80017a6:	f043 0302 	orr.w	r3, r3, #2
 80017aa:	81a3      	strh	r3, [r4, #12]
 80017ac:	e7e2      	b.n	8001774 <__smakebuf_r+0xc>
 80017ae:	89a3      	ldrh	r3, [r4, #12]
 80017b0:	6020      	str	r0, [r4, #0]
 80017b2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80017b6:	81a3      	strh	r3, [r4, #12]
 80017b8:	9b01      	ldr	r3, [sp, #4]
 80017ba:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80017be:	b15b      	cbz	r3, 80017d8 <__smakebuf_r+0x70>
 80017c0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80017c4:	4630      	mov	r0, r6
 80017c6:	f000 f83f 	bl	8001848 <_isatty_r>
 80017ca:	b128      	cbz	r0, 80017d8 <__smakebuf_r+0x70>
 80017cc:	89a3      	ldrh	r3, [r4, #12]
 80017ce:	f023 0303 	bic.w	r3, r3, #3
 80017d2:	f043 0301 	orr.w	r3, r3, #1
 80017d6:	81a3      	strh	r3, [r4, #12]
 80017d8:	89a3      	ldrh	r3, [r4, #12]
 80017da:	431d      	orrs	r5, r3
 80017dc:	81a5      	strh	r5, [r4, #12]
 80017de:	e7cf      	b.n	8001780 <__smakebuf_r+0x18>

080017e0 <_putc_r>:
 80017e0:	b570      	push	{r4, r5, r6, lr}
 80017e2:	460d      	mov	r5, r1
 80017e4:	4614      	mov	r4, r2
 80017e6:	4606      	mov	r6, r0
 80017e8:	b118      	cbz	r0, 80017f2 <_putc_r+0x12>
 80017ea:	6a03      	ldr	r3, [r0, #32]
 80017ec:	b90b      	cbnz	r3, 80017f2 <_putc_r+0x12>
 80017ee:	f7ff f979 	bl	8000ae4 <__sinit>
 80017f2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80017f4:	07d8      	lsls	r0, r3, #31
 80017f6:	d405      	bmi.n	8001804 <_putc_r+0x24>
 80017f8:	89a3      	ldrh	r3, [r4, #12]
 80017fa:	0599      	lsls	r1, r3, #22
 80017fc:	d402      	bmi.n	8001804 <_putc_r+0x24>
 80017fe:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8001800:	f7ff fa51 	bl	8000ca6 <__retarget_lock_acquire_recursive>
 8001804:	68a3      	ldr	r3, [r4, #8]
 8001806:	3b01      	subs	r3, #1
 8001808:	2b00      	cmp	r3, #0
 800180a:	60a3      	str	r3, [r4, #8]
 800180c:	da05      	bge.n	800181a <_putc_r+0x3a>
 800180e:	69a2      	ldr	r2, [r4, #24]
 8001810:	4293      	cmp	r3, r2
 8001812:	db12      	blt.n	800183a <_putc_r+0x5a>
 8001814:	b2eb      	uxtb	r3, r5
 8001816:	2b0a      	cmp	r3, #10
 8001818:	d00f      	beq.n	800183a <_putc_r+0x5a>
 800181a:	6823      	ldr	r3, [r4, #0]
 800181c:	1c5a      	adds	r2, r3, #1
 800181e:	6022      	str	r2, [r4, #0]
 8001820:	701d      	strb	r5, [r3, #0]
 8001822:	b2ed      	uxtb	r5, r5
 8001824:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8001826:	07da      	lsls	r2, r3, #31
 8001828:	d405      	bmi.n	8001836 <_putc_r+0x56>
 800182a:	89a3      	ldrh	r3, [r4, #12]
 800182c:	059b      	lsls	r3, r3, #22
 800182e:	d402      	bmi.n	8001836 <_putc_r+0x56>
 8001830:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8001832:	f7ff fa39 	bl	8000ca8 <__retarget_lock_release_recursive>
 8001836:	4628      	mov	r0, r5
 8001838:	bd70      	pop	{r4, r5, r6, pc}
 800183a:	4629      	mov	r1, r5
 800183c:	4622      	mov	r2, r4
 800183e:	4630      	mov	r0, r6
 8001840:	f7ff fed8 	bl	80015f4 <__swbuf_r>
 8001844:	4605      	mov	r5, r0
 8001846:	e7ed      	b.n	8001824 <_putc_r+0x44>

08001848 <_isatty_r>:
 8001848:	b538      	push	{r3, r4, r5, lr}
 800184a:	4d06      	ldr	r5, [pc, #24]	@ (8001864 <_isatty_r+0x1c>)
 800184c:	2300      	movs	r3, #0
 800184e:	4604      	mov	r4, r0
 8001850:	4608      	mov	r0, r1
 8001852:	602b      	str	r3, [r5, #0]
 8001854:	f7fe ff28 	bl	80006a8 <_isatty>
 8001858:	1c43      	adds	r3, r0, #1
 800185a:	d102      	bne.n	8001862 <_isatty_r+0x1a>
 800185c:	682b      	ldr	r3, [r5, #0]
 800185e:	b103      	cbz	r3, 8001862 <_isatty_r+0x1a>
 8001860:	6023      	str	r3, [r4, #0]
 8001862:	bd38      	pop	{r3, r4, r5, pc}
 8001864:	200001ec 	.word	0x200001ec

08001868 <_lseek_r>:
 8001868:	b538      	push	{r3, r4, r5, lr}
 800186a:	4d07      	ldr	r5, [pc, #28]	@ (8001888 <_lseek_r+0x20>)
 800186c:	4604      	mov	r4, r0
 800186e:	4608      	mov	r0, r1
 8001870:	4611      	mov	r1, r2
 8001872:	2200      	movs	r2, #0
 8001874:	602a      	str	r2, [r5, #0]
 8001876:	461a      	mov	r2, r3
 8001878:	f7fe ff21 	bl	80006be <_lseek>
 800187c:	1c43      	adds	r3, r0, #1
 800187e:	d102      	bne.n	8001886 <_lseek_r+0x1e>
 8001880:	682b      	ldr	r3, [r5, #0]
 8001882:	b103      	cbz	r3, 8001886 <_lseek_r+0x1e>
 8001884:	6023      	str	r3, [r4, #0]
 8001886:	bd38      	pop	{r3, r4, r5, pc}
 8001888:	200001ec 	.word	0x200001ec

0800188c <_read_r>:
 800188c:	b538      	push	{r3, r4, r5, lr}
 800188e:	4d07      	ldr	r5, [pc, #28]	@ (80018ac <_read_r+0x20>)
 8001890:	4604      	mov	r4, r0
 8001892:	4608      	mov	r0, r1
 8001894:	4611      	mov	r1, r2
 8001896:	2200      	movs	r2, #0
 8001898:	602a      	str	r2, [r5, #0]
 800189a:	461a      	mov	r2, r3
 800189c:	f7fe feaf 	bl	80005fe <_read>
 80018a0:	1c43      	adds	r3, r0, #1
 80018a2:	d102      	bne.n	80018aa <_read_r+0x1e>
 80018a4:	682b      	ldr	r3, [r5, #0]
 80018a6:	b103      	cbz	r3, 80018aa <_read_r+0x1e>
 80018a8:	6023      	str	r3, [r4, #0]
 80018aa:	bd38      	pop	{r3, r4, r5, pc}
 80018ac:	200001ec 	.word	0x200001ec

080018b0 <_sbrk_r>:
 80018b0:	b538      	push	{r3, r4, r5, lr}
 80018b2:	4d06      	ldr	r5, [pc, #24]	@ (80018cc <_sbrk_r+0x1c>)
 80018b4:	2300      	movs	r3, #0
 80018b6:	4604      	mov	r4, r0
 80018b8:	4608      	mov	r0, r1
 80018ba:	602b      	str	r3, [r5, #0]
 80018bc:	f7fe ff0c 	bl	80006d8 <_sbrk>
 80018c0:	1c43      	adds	r3, r0, #1
 80018c2:	d102      	bne.n	80018ca <_sbrk_r+0x1a>
 80018c4:	682b      	ldr	r3, [r5, #0]
 80018c6:	b103      	cbz	r3, 80018ca <_sbrk_r+0x1a>
 80018c8:	6023      	str	r3, [r4, #0]
 80018ca:	bd38      	pop	{r3, r4, r5, pc}
 80018cc:	200001ec 	.word	0x200001ec

080018d0 <_write_r>:
 80018d0:	b538      	push	{r3, r4, r5, lr}
 80018d2:	4d07      	ldr	r5, [pc, #28]	@ (80018f0 <_write_r+0x20>)
 80018d4:	4604      	mov	r4, r0
 80018d6:	4608      	mov	r0, r1
 80018d8:	4611      	mov	r1, r2
 80018da:	2200      	movs	r2, #0
 80018dc:	602a      	str	r2, [r5, #0]
 80018de:	461a      	mov	r2, r3
 80018e0:	f7fe feaa 	bl	8000638 <_write>
 80018e4:	1c43      	adds	r3, r0, #1
 80018e6:	d102      	bne.n	80018ee <_write_r+0x1e>
 80018e8:	682b      	ldr	r3, [r5, #0]
 80018ea:	b103      	cbz	r3, 80018ee <_write_r+0x1e>
 80018ec:	6023      	str	r3, [r4, #0]
 80018ee:	bd38      	pop	{r3, r4, r5, pc}
 80018f0:	200001ec 	.word	0x200001ec

080018f4 <_close_r>:
 80018f4:	b538      	push	{r3, r4, r5, lr}
 80018f6:	4d06      	ldr	r5, [pc, #24]	@ (8001910 <_close_r+0x1c>)
 80018f8:	2300      	movs	r3, #0
 80018fa:	4604      	mov	r4, r0
 80018fc:	4608      	mov	r0, r1
 80018fe:	602b      	str	r3, [r5, #0]
 8001900:	f7fe feb6 	bl	8000670 <_close>
 8001904:	1c43      	adds	r3, r0, #1
 8001906:	d102      	bne.n	800190e <_close_r+0x1a>
 8001908:	682b      	ldr	r3, [r5, #0]
 800190a:	b103      	cbz	r3, 800190e <_close_r+0x1a>
 800190c:	6023      	str	r3, [r4, #0]
 800190e:	bd38      	pop	{r3, r4, r5, pc}
 8001910:	200001ec 	.word	0x200001ec

08001914 <_fstat_r>:
 8001914:	b538      	push	{r3, r4, r5, lr}
 8001916:	4d07      	ldr	r5, [pc, #28]	@ (8001934 <_fstat_r+0x20>)
 8001918:	2300      	movs	r3, #0
 800191a:	4604      	mov	r4, r0
 800191c:	4608      	mov	r0, r1
 800191e:	4611      	mov	r1, r2
 8001920:	602b      	str	r3, [r5, #0]
 8001922:	f7fe feb1 	bl	8000688 <_fstat>
 8001926:	1c43      	adds	r3, r0, #1
 8001928:	d102      	bne.n	8001930 <_fstat_r+0x1c>
 800192a:	682b      	ldr	r3, [r5, #0]
 800192c:	b103      	cbz	r3, 8001930 <_fstat_r+0x1c>
 800192e:	6023      	str	r3, [r4, #0]
 8001930:	bd38      	pop	{r3, r4, r5, pc}
 8001932:	bf00      	nop
 8001934:	200001ec 	.word	0x200001ec

08001938 <abort>:
 8001938:	b508      	push	{r3, lr}
 800193a:	2006      	movs	r0, #6
 800193c:	f000 f876 	bl	8001a2c <raise>
 8001940:	2001      	movs	r0, #1
 8001942:	f7fe fe51 	bl	80005e8 <_exit>
	...

08001948 <_free_r>:
 8001948:	b538      	push	{r3, r4, r5, lr}
 800194a:	4605      	mov	r5, r0
 800194c:	2900      	cmp	r1, #0
 800194e:	d041      	beq.n	80019d4 <_free_r+0x8c>
 8001950:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001954:	1f0c      	subs	r4, r1, #4
 8001956:	2b00      	cmp	r3, #0
 8001958:	bfb8      	it	lt
 800195a:	18e4      	addlt	r4, r4, r3
 800195c:	f7ff fde8 	bl	8001530 <__malloc_lock>
 8001960:	4a1d      	ldr	r2, [pc, #116]	@ (80019d8 <_free_r+0x90>)
 8001962:	6813      	ldr	r3, [r2, #0]
 8001964:	b933      	cbnz	r3, 8001974 <_free_r+0x2c>
 8001966:	6063      	str	r3, [r4, #4]
 8001968:	6014      	str	r4, [r2, #0]
 800196a:	4628      	mov	r0, r5
 800196c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001970:	f7ff bde4 	b.w	800153c <__malloc_unlock>
 8001974:	42a3      	cmp	r3, r4
 8001976:	d908      	bls.n	800198a <_free_r+0x42>
 8001978:	6820      	ldr	r0, [r4, #0]
 800197a:	1821      	adds	r1, r4, r0
 800197c:	428b      	cmp	r3, r1
 800197e:	bf01      	itttt	eq
 8001980:	6819      	ldreq	r1, [r3, #0]
 8001982:	685b      	ldreq	r3, [r3, #4]
 8001984:	1809      	addeq	r1, r1, r0
 8001986:	6021      	streq	r1, [r4, #0]
 8001988:	e7ed      	b.n	8001966 <_free_r+0x1e>
 800198a:	461a      	mov	r2, r3
 800198c:	685b      	ldr	r3, [r3, #4]
 800198e:	b10b      	cbz	r3, 8001994 <_free_r+0x4c>
 8001990:	42a3      	cmp	r3, r4
 8001992:	d9fa      	bls.n	800198a <_free_r+0x42>
 8001994:	6811      	ldr	r1, [r2, #0]
 8001996:	1850      	adds	r0, r2, r1
 8001998:	42a0      	cmp	r0, r4
 800199a:	d10b      	bne.n	80019b4 <_free_r+0x6c>
 800199c:	6820      	ldr	r0, [r4, #0]
 800199e:	4401      	add	r1, r0
 80019a0:	1850      	adds	r0, r2, r1
 80019a2:	4283      	cmp	r3, r0
 80019a4:	6011      	str	r1, [r2, #0]
 80019a6:	d1e0      	bne.n	800196a <_free_r+0x22>
 80019a8:	6818      	ldr	r0, [r3, #0]
 80019aa:	685b      	ldr	r3, [r3, #4]
 80019ac:	6053      	str	r3, [r2, #4]
 80019ae:	4408      	add	r0, r1
 80019b0:	6010      	str	r0, [r2, #0]
 80019b2:	e7da      	b.n	800196a <_free_r+0x22>
 80019b4:	d902      	bls.n	80019bc <_free_r+0x74>
 80019b6:	230c      	movs	r3, #12
 80019b8:	602b      	str	r3, [r5, #0]
 80019ba:	e7d6      	b.n	800196a <_free_r+0x22>
 80019bc:	6820      	ldr	r0, [r4, #0]
 80019be:	1821      	adds	r1, r4, r0
 80019c0:	428b      	cmp	r3, r1
 80019c2:	bf04      	itt	eq
 80019c4:	6819      	ldreq	r1, [r3, #0]
 80019c6:	685b      	ldreq	r3, [r3, #4]
 80019c8:	6063      	str	r3, [r4, #4]
 80019ca:	bf04      	itt	eq
 80019cc:	1809      	addeq	r1, r1, r0
 80019ce:	6021      	streq	r1, [r4, #0]
 80019d0:	6054      	str	r4, [r2, #4]
 80019d2:	e7ca      	b.n	800196a <_free_r+0x22>
 80019d4:	bd38      	pop	{r3, r4, r5, pc}
 80019d6:	bf00      	nop
 80019d8:	200001e8 	.word	0x200001e8

080019dc <_raise_r>:
 80019dc:	291f      	cmp	r1, #31
 80019de:	b538      	push	{r3, r4, r5, lr}
 80019e0:	4605      	mov	r5, r0
 80019e2:	460c      	mov	r4, r1
 80019e4:	d904      	bls.n	80019f0 <_raise_r+0x14>
 80019e6:	2316      	movs	r3, #22
 80019e8:	6003      	str	r3, [r0, #0]
 80019ea:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80019ee:	bd38      	pop	{r3, r4, r5, pc}
 80019f0:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80019f2:	b112      	cbz	r2, 80019fa <_raise_r+0x1e>
 80019f4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80019f8:	b94b      	cbnz	r3, 8001a0e <_raise_r+0x32>
 80019fa:	4628      	mov	r0, r5
 80019fc:	f000 f830 	bl	8001a60 <_getpid_r>
 8001a00:	4622      	mov	r2, r4
 8001a02:	4601      	mov	r1, r0
 8001a04:	4628      	mov	r0, r5
 8001a06:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001a0a:	f000 b817 	b.w	8001a3c <_kill_r>
 8001a0e:	2b01      	cmp	r3, #1
 8001a10:	d00a      	beq.n	8001a28 <_raise_r+0x4c>
 8001a12:	1c59      	adds	r1, r3, #1
 8001a14:	d103      	bne.n	8001a1e <_raise_r+0x42>
 8001a16:	2316      	movs	r3, #22
 8001a18:	6003      	str	r3, [r0, #0]
 8001a1a:	2001      	movs	r0, #1
 8001a1c:	e7e7      	b.n	80019ee <_raise_r+0x12>
 8001a1e:	2100      	movs	r1, #0
 8001a20:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8001a24:	4620      	mov	r0, r4
 8001a26:	4798      	blx	r3
 8001a28:	2000      	movs	r0, #0
 8001a2a:	e7e0      	b.n	80019ee <_raise_r+0x12>

08001a2c <raise>:
 8001a2c:	4b02      	ldr	r3, [pc, #8]	@ (8001a38 <raise+0xc>)
 8001a2e:	4601      	mov	r1, r0
 8001a30:	6818      	ldr	r0, [r3, #0]
 8001a32:	f7ff bfd3 	b.w	80019dc <_raise_r>
 8001a36:	bf00      	nop
 8001a38:	20000034 	.word	0x20000034

08001a3c <_kill_r>:
 8001a3c:	b538      	push	{r3, r4, r5, lr}
 8001a3e:	4d07      	ldr	r5, [pc, #28]	@ (8001a5c <_kill_r+0x20>)
 8001a40:	2300      	movs	r3, #0
 8001a42:	4604      	mov	r4, r0
 8001a44:	4608      	mov	r0, r1
 8001a46:	4611      	mov	r1, r2
 8001a48:	602b      	str	r3, [r5, #0]
 8001a4a:	f7fe fdbd 	bl	80005c8 <_kill>
 8001a4e:	1c43      	adds	r3, r0, #1
 8001a50:	d102      	bne.n	8001a58 <_kill_r+0x1c>
 8001a52:	682b      	ldr	r3, [r5, #0]
 8001a54:	b103      	cbz	r3, 8001a58 <_kill_r+0x1c>
 8001a56:	6023      	str	r3, [r4, #0]
 8001a58:	bd38      	pop	{r3, r4, r5, pc}
 8001a5a:	bf00      	nop
 8001a5c:	200001ec 	.word	0x200001ec

08001a60 <_getpid_r>:
 8001a60:	f7fe bdaa 	b.w	80005b8 <_getpid>

08001a64 <_init>:
 8001a64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001a66:	bf00      	nop
 8001a68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001a6a:	bc08      	pop	{r3}
 8001a6c:	469e      	mov	lr, r3
 8001a6e:	4770      	bx	lr

08001a70 <_fini>:
 8001a70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001a72:	bf00      	nop
 8001a74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001a76:	bc08      	pop	{r3}
 8001a78:	469e      	mov	lr, r3
 8001a7a:	4770      	bx	lr
